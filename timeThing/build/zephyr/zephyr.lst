
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018200 <_vector_start>:
   18200:	20010478 	.word	0x20010478
   18204:	0001c7c1 	.word	0x0001c7c1
   18208:	0002ae97 	.word	0x0002ae97
   1820c:	0001c795 	.word	0x0001c795
   18210:	0001c795 	.word	0x0001c795
   18214:	0001c795 	.word	0x0001c795
   18218:	0001c795 	.word	0x0001c795
   1821c:	0001c795 	.word	0x0001c795
	...
   1822c:	0001c26d 	.word	0x0001c26d
   18230:	0001c795 	.word	0x0001c795
   18234:	00000000 	.word	0x00000000
   18238:	0001c215 	.word	0x0001c215
   1823c:	0001c795 	.word	0x0001c795

00018240 <_irq_vector_table>:
   18240:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18250:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18260:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18270:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18280:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18290:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   182a0:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   182b0:	0001e621 0001c2ed 0001c2ed 0001c2ed     !...............
   182c0:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   182d0:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   182e0:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   182f0:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18300:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18310:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18320:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18330:	0001c2ed 0001c2ed 0001c2ed 0001c2ed     ................
   18340:	0001c2ed                                ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   18410:	000192dc 00000001 00018200 00018200     ................
   18420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00018440 <__aeabi_fmul>:
   18440:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18448:	bf1e      	ittt	ne
   1844a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1844e:	ea92 0f0c 	teqne	r2, ip
   18452:	ea93 0f0c 	teqne	r3, ip
   18456:	d06f      	beq.n	18538 <__aeabi_fmul+0xf8>
   18458:	441a      	add	r2, r3
   1845a:	ea80 0c01 	eor.w	ip, r0, r1
   1845e:	0240      	lsls	r0, r0, #9
   18460:	bf18      	it	ne
   18462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18466:	d01e      	beq.n	184a6 <__aeabi_fmul+0x66>
   18468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1846c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18474:	fba0 3101 	umull	r3, r1, r0, r1
   18478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1847c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18480:	bf3e      	ittt	cc
   18482:	0049      	lslcc	r1, r1, #1
   18484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18488:	005b      	lslcc	r3, r3, #1
   1848a:	ea40 0001 	orr.w	r0, r0, r1
   1848e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18492:	2afd      	cmp	r2, #253	; 0xfd
   18494:	d81d      	bhi.n	184d2 <__aeabi_fmul+0x92>
   18496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1849a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1849e:	bf08      	it	eq
   184a0:	f020 0001 	biceq.w	r0, r0, #1
   184a4:	4770      	bx	lr
   184a6:	f090 0f00 	teq	r0, #0
   184aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184ae:	bf08      	it	eq
   184b0:	0249      	lsleq	r1, r1, #9
   184b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   184ba:	3a7f      	subs	r2, #127	; 0x7f
   184bc:	bfc2      	ittt	gt
   184be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184c6:	4770      	bxgt	lr
   184c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184cc:	f04f 0300 	mov.w	r3, #0
   184d0:	3a01      	subs	r2, #1
   184d2:	dc5d      	bgt.n	18590 <__aeabi_fmul+0x150>
   184d4:	f112 0f19 	cmn.w	r2, #25
   184d8:	bfdc      	itt	le
   184da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   184de:	4770      	bxle	lr
   184e0:	f1c2 0200 	rsb	r2, r2, #0
   184e4:	0041      	lsls	r1, r0, #1
   184e6:	fa21 f102 	lsr.w	r1, r1, r2
   184ea:	f1c2 0220 	rsb	r2, r2, #32
   184ee:	fa00 fc02 	lsl.w	ip, r0, r2
   184f2:	ea5f 0031 	movs.w	r0, r1, rrx
   184f6:	f140 0000 	adc.w	r0, r0, #0
   184fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   184fe:	bf08      	it	eq
   18500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18504:	4770      	bx	lr
   18506:	f092 0f00 	teq	r2, #0
   1850a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1850e:	bf02      	ittt	eq
   18510:	0040      	lsleq	r0, r0, #1
   18512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18516:	3a01      	subeq	r2, #1
   18518:	d0f9      	beq.n	1850e <__aeabi_fmul+0xce>
   1851a:	ea40 000c 	orr.w	r0, r0, ip
   1851e:	f093 0f00 	teq	r3, #0
   18522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18526:	bf02      	ittt	eq
   18528:	0049      	lsleq	r1, r1, #1
   1852a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1852e:	3b01      	subeq	r3, #1
   18530:	d0f9      	beq.n	18526 <__aeabi_fmul+0xe6>
   18532:	ea41 010c 	orr.w	r1, r1, ip
   18536:	e78f      	b.n	18458 <__aeabi_fmul+0x18>
   18538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1853c:	ea92 0f0c 	teq	r2, ip
   18540:	bf18      	it	ne
   18542:	ea93 0f0c 	teqne	r3, ip
   18546:	d00a      	beq.n	1855e <__aeabi_fmul+0x11e>
   18548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1854c:	bf18      	it	ne
   1854e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18552:	d1d8      	bne.n	18506 <__aeabi_fmul+0xc6>
   18554:	ea80 0001 	eor.w	r0, r0, r1
   18558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1855c:	4770      	bx	lr
   1855e:	f090 0f00 	teq	r0, #0
   18562:	bf17      	itett	ne
   18564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18568:	4608      	moveq	r0, r1
   1856a:	f091 0f00 	teqne	r1, #0
   1856e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18572:	d014      	beq.n	1859e <__aeabi_fmul+0x15e>
   18574:	ea92 0f0c 	teq	r2, ip
   18578:	d101      	bne.n	1857e <__aeabi_fmul+0x13e>
   1857a:	0242      	lsls	r2, r0, #9
   1857c:	d10f      	bne.n	1859e <__aeabi_fmul+0x15e>
   1857e:	ea93 0f0c 	teq	r3, ip
   18582:	d103      	bne.n	1858c <__aeabi_fmul+0x14c>
   18584:	024b      	lsls	r3, r1, #9
   18586:	bf18      	it	ne
   18588:	4608      	movne	r0, r1
   1858a:	d108      	bne.n	1859e <__aeabi_fmul+0x15e>
   1858c:	ea80 0001 	eor.w	r0, r0, r1
   18590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1859c:	4770      	bx	lr
   1859e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   185a6:	4770      	bx	lr

000185a8 <__aeabi_drsub>:
   185a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   185ac:	e002      	b.n	185b4 <__adddf3>
   185ae:	bf00      	nop

000185b0 <__aeabi_dsub>:
   185b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000185b4 <__adddf3>:
   185b4:	b530      	push	{r4, r5, lr}
   185b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   185ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   185be:	ea94 0f05 	teq	r4, r5
   185c2:	bf08      	it	eq
   185c4:	ea90 0f02 	teqeq	r0, r2
   185c8:	bf1f      	itttt	ne
   185ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   185ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   185d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   185d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   185da:	f000 80e2 	beq.w	187a2 <__adddf3+0x1ee>
   185de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   185e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   185e6:	bfb8      	it	lt
   185e8:	426d      	neglt	r5, r5
   185ea:	dd0c      	ble.n	18606 <__adddf3+0x52>
   185ec:	442c      	add	r4, r5
   185ee:	ea80 0202 	eor.w	r2, r0, r2
   185f2:	ea81 0303 	eor.w	r3, r1, r3
   185f6:	ea82 0000 	eor.w	r0, r2, r0
   185fa:	ea83 0101 	eor.w	r1, r3, r1
   185fe:	ea80 0202 	eor.w	r2, r0, r2
   18602:	ea81 0303 	eor.w	r3, r1, r3
   18606:	2d36      	cmp	r5, #54	; 0x36
   18608:	bf88      	it	hi
   1860a:	bd30      	pophi	{r4, r5, pc}
   1860c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18610:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1861c:	d002      	beq.n	18624 <__adddf3+0x70>
   1861e:	4240      	negs	r0, r0
   18620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18628:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1862c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18630:	d002      	beq.n	18638 <__adddf3+0x84>
   18632:	4252      	negs	r2, r2
   18634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18638:	ea94 0f05 	teq	r4, r5
   1863c:	f000 80a7 	beq.w	1878e <__adddf3+0x1da>
   18640:	f1a4 0401 	sub.w	r4, r4, #1
   18644:	f1d5 0e20 	rsbs	lr, r5, #32
   18648:	db0d      	blt.n	18666 <__adddf3+0xb2>
   1864a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1864e:	fa22 f205 	lsr.w	r2, r2, r5
   18652:	1880      	adds	r0, r0, r2
   18654:	f141 0100 	adc.w	r1, r1, #0
   18658:	fa03 f20e 	lsl.w	r2, r3, lr
   1865c:	1880      	adds	r0, r0, r2
   1865e:	fa43 f305 	asr.w	r3, r3, r5
   18662:	4159      	adcs	r1, r3
   18664:	e00e      	b.n	18684 <__adddf3+0xd0>
   18666:	f1a5 0520 	sub.w	r5, r5, #32
   1866a:	f10e 0e20 	add.w	lr, lr, #32
   1866e:	2a01      	cmp	r2, #1
   18670:	fa03 fc0e 	lsl.w	ip, r3, lr
   18674:	bf28      	it	cs
   18676:	f04c 0c02 	orrcs.w	ip, ip, #2
   1867a:	fa43 f305 	asr.w	r3, r3, r5
   1867e:	18c0      	adds	r0, r0, r3
   18680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18688:	d507      	bpl.n	1869a <__adddf3+0xe6>
   1868a:	f04f 0e00 	mov.w	lr, #0
   1868e:	f1dc 0c00 	rsbs	ip, ip, #0
   18692:	eb7e 0000 	sbcs.w	r0, lr, r0
   18696:	eb6e 0101 	sbc.w	r1, lr, r1
   1869a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1869e:	d31b      	bcc.n	186d8 <__adddf3+0x124>
   186a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   186a4:	d30c      	bcc.n	186c0 <__adddf3+0x10c>
   186a6:	0849      	lsrs	r1, r1, #1
   186a8:	ea5f 0030 	movs.w	r0, r0, rrx
   186ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   186b0:	f104 0401 	add.w	r4, r4, #1
   186b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   186b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   186bc:	f080 809a 	bcs.w	187f4 <__adddf3+0x240>
   186c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   186c4:	bf08      	it	eq
   186c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   186ca:	f150 0000 	adcs.w	r0, r0, #0
   186ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186d2:	ea41 0105 	orr.w	r1, r1, r5
   186d6:	bd30      	pop	{r4, r5, pc}
   186d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   186dc:	4140      	adcs	r0, r0
   186de:	eb41 0101 	adc.w	r1, r1, r1
   186e2:	3c01      	subs	r4, #1
   186e4:	bf28      	it	cs
   186e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   186ea:	d2e9      	bcs.n	186c0 <__adddf3+0x10c>
   186ec:	f091 0f00 	teq	r1, #0
   186f0:	bf04      	itt	eq
   186f2:	4601      	moveq	r1, r0
   186f4:	2000      	moveq	r0, #0
   186f6:	fab1 f381 	clz	r3, r1
   186fa:	bf08      	it	eq
   186fc:	3320      	addeq	r3, #32
   186fe:	f1a3 030b 	sub.w	r3, r3, #11
   18702:	f1b3 0220 	subs.w	r2, r3, #32
   18706:	da0c      	bge.n	18722 <__adddf3+0x16e>
   18708:	320c      	adds	r2, #12
   1870a:	dd08      	ble.n	1871e <__adddf3+0x16a>
   1870c:	f102 0c14 	add.w	ip, r2, #20
   18710:	f1c2 020c 	rsb	r2, r2, #12
   18714:	fa01 f00c 	lsl.w	r0, r1, ip
   18718:	fa21 f102 	lsr.w	r1, r1, r2
   1871c:	e00c      	b.n	18738 <__adddf3+0x184>
   1871e:	f102 0214 	add.w	r2, r2, #20
   18722:	bfd8      	it	le
   18724:	f1c2 0c20 	rsble	ip, r2, #32
   18728:	fa01 f102 	lsl.w	r1, r1, r2
   1872c:	fa20 fc0c 	lsr.w	ip, r0, ip
   18730:	bfdc      	itt	le
   18732:	ea41 010c 	orrle.w	r1, r1, ip
   18736:	4090      	lslle	r0, r2
   18738:	1ae4      	subs	r4, r4, r3
   1873a:	bfa2      	ittt	ge
   1873c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18740:	4329      	orrge	r1, r5
   18742:	bd30      	popge	{r4, r5, pc}
   18744:	ea6f 0404 	mvn.w	r4, r4
   18748:	3c1f      	subs	r4, #31
   1874a:	da1c      	bge.n	18786 <__adddf3+0x1d2>
   1874c:	340c      	adds	r4, #12
   1874e:	dc0e      	bgt.n	1876e <__adddf3+0x1ba>
   18750:	f104 0414 	add.w	r4, r4, #20
   18754:	f1c4 0220 	rsb	r2, r4, #32
   18758:	fa20 f004 	lsr.w	r0, r0, r4
   1875c:	fa01 f302 	lsl.w	r3, r1, r2
   18760:	ea40 0003 	orr.w	r0, r0, r3
   18764:	fa21 f304 	lsr.w	r3, r1, r4
   18768:	ea45 0103 	orr.w	r1, r5, r3
   1876c:	bd30      	pop	{r4, r5, pc}
   1876e:	f1c4 040c 	rsb	r4, r4, #12
   18772:	f1c4 0220 	rsb	r2, r4, #32
   18776:	fa20 f002 	lsr.w	r0, r0, r2
   1877a:	fa01 f304 	lsl.w	r3, r1, r4
   1877e:	ea40 0003 	orr.w	r0, r0, r3
   18782:	4629      	mov	r1, r5
   18784:	bd30      	pop	{r4, r5, pc}
   18786:	fa21 f004 	lsr.w	r0, r1, r4
   1878a:	4629      	mov	r1, r5
   1878c:	bd30      	pop	{r4, r5, pc}
   1878e:	f094 0f00 	teq	r4, #0
   18792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   18796:	bf06      	itte	eq
   18798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1879c:	3401      	addeq	r4, #1
   1879e:	3d01      	subne	r5, #1
   187a0:	e74e      	b.n	18640 <__adddf3+0x8c>
   187a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   187a6:	bf18      	it	ne
   187a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   187ac:	d029      	beq.n	18802 <__adddf3+0x24e>
   187ae:	ea94 0f05 	teq	r4, r5
   187b2:	bf08      	it	eq
   187b4:	ea90 0f02 	teqeq	r0, r2
   187b8:	d005      	beq.n	187c6 <__adddf3+0x212>
   187ba:	ea54 0c00 	orrs.w	ip, r4, r0
   187be:	bf04      	itt	eq
   187c0:	4619      	moveq	r1, r3
   187c2:	4610      	moveq	r0, r2
   187c4:	bd30      	pop	{r4, r5, pc}
   187c6:	ea91 0f03 	teq	r1, r3
   187ca:	bf1e      	ittt	ne
   187cc:	2100      	movne	r1, #0
   187ce:	2000      	movne	r0, #0
   187d0:	bd30      	popne	{r4, r5, pc}
   187d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   187d6:	d105      	bne.n	187e4 <__adddf3+0x230>
   187d8:	0040      	lsls	r0, r0, #1
   187da:	4149      	adcs	r1, r1
   187dc:	bf28      	it	cs
   187de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   187e2:	bd30      	pop	{r4, r5, pc}
   187e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   187e8:	bf3c      	itt	cc
   187ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   187ee:	bd30      	popcc	{r4, r5, pc}
   187f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   187f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   187f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   187fc:	f04f 0000 	mov.w	r0, #0
   18800:	bd30      	pop	{r4, r5, pc}
   18802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   18806:	bf1a      	itte	ne
   18808:	4619      	movne	r1, r3
   1880a:	4610      	movne	r0, r2
   1880c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18810:	bf1c      	itt	ne
   18812:	460b      	movne	r3, r1
   18814:	4602      	movne	r2, r0
   18816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1881a:	bf06      	itte	eq
   1881c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18820:	ea91 0f03 	teqeq	r1, r3
   18824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18828:	bd30      	pop	{r4, r5, pc}
   1882a:	bf00      	nop

0001882c <__aeabi_ui2d>:
   1882c:	f090 0f00 	teq	r0, #0
   18830:	bf04      	itt	eq
   18832:	2100      	moveq	r1, #0
   18834:	4770      	bxeq	lr
   18836:	b530      	push	{r4, r5, lr}
   18838:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1883c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18840:	f04f 0500 	mov.w	r5, #0
   18844:	f04f 0100 	mov.w	r1, #0
   18848:	e750      	b.n	186ec <__adddf3+0x138>
   1884a:	bf00      	nop

0001884c <__aeabi_i2d>:
   1884c:	f090 0f00 	teq	r0, #0
   18850:	bf04      	itt	eq
   18852:	2100      	moveq	r1, #0
   18854:	4770      	bxeq	lr
   18856:	b530      	push	{r4, r5, lr}
   18858:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1885c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   18864:	bf48      	it	mi
   18866:	4240      	negmi	r0, r0
   18868:	f04f 0100 	mov.w	r1, #0
   1886c:	e73e      	b.n	186ec <__adddf3+0x138>
   1886e:	bf00      	nop

00018870 <__aeabi_f2d>:
   18870:	0042      	lsls	r2, r0, #1
   18872:	ea4f 01e2 	mov.w	r1, r2, asr #3
   18876:	ea4f 0131 	mov.w	r1, r1, rrx
   1887a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1887e:	bf1f      	itttt	ne
   18880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   18884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1888c:	4770      	bxne	lr
   1888e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   18892:	bf08      	it	eq
   18894:	4770      	bxeq	lr
   18896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1889a:	bf04      	itt	eq
   1889c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   188a0:	4770      	bxeq	lr
   188a2:	b530      	push	{r4, r5, lr}
   188a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   188a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   188ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b0:	e71c      	b.n	186ec <__adddf3+0x138>
   188b2:	bf00      	nop

000188b4 <__aeabi_ul2d>:
   188b4:	ea50 0201 	orrs.w	r2, r0, r1
   188b8:	bf08      	it	eq
   188ba:	4770      	bxeq	lr
   188bc:	b530      	push	{r4, r5, lr}
   188be:	f04f 0500 	mov.w	r5, #0
   188c2:	e00a      	b.n	188da <__aeabi_l2d+0x16>

000188c4 <__aeabi_l2d>:
   188c4:	ea50 0201 	orrs.w	r2, r0, r1
   188c8:	bf08      	it	eq
   188ca:	4770      	bxeq	lr
   188cc:	b530      	push	{r4, r5, lr}
   188ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   188d2:	d502      	bpl.n	188da <__aeabi_l2d+0x16>
   188d4:	4240      	negs	r0, r0
   188d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   188da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   188de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   188e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   188e6:	f43f aed8 	beq.w	1869a <__adddf3+0xe6>
   188ea:	f04f 0203 	mov.w	r2, #3
   188ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   188f2:	bf18      	it	ne
   188f4:	3203      	addne	r2, #3
   188f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   188fa:	bf18      	it	ne
   188fc:	3203      	addne	r2, #3
   188fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18902:	f1c2 0320 	rsb	r3, r2, #32
   18906:	fa00 fc03 	lsl.w	ip, r0, r3
   1890a:	fa20 f002 	lsr.w	r0, r0, r2
   1890e:	fa01 fe03 	lsl.w	lr, r1, r3
   18912:	ea40 000e 	orr.w	r0, r0, lr
   18916:	fa21 f102 	lsr.w	r1, r1, r2
   1891a:	4414      	add	r4, r2
   1891c:	e6bd      	b.n	1869a <__adddf3+0xe6>
   1891e:	bf00      	nop

00018920 <__aeabi_dmul>:
   18920:	b570      	push	{r4, r5, r6, lr}
   18922:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1892a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1892e:	bf1d      	ittte	ne
   18930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18934:	ea94 0f0c 	teqne	r4, ip
   18938:	ea95 0f0c 	teqne	r5, ip
   1893c:	f000 f8de 	bleq	18afc <__aeabi_dmul+0x1dc>
   18940:	442c      	add	r4, r5
   18942:	ea81 0603 	eor.w	r6, r1, r3
   18946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1894a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1894e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18952:	bf18      	it	ne
   18954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1895c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18960:	d038      	beq.n	189d4 <__aeabi_dmul+0xb4>
   18962:	fba0 ce02 	umull	ip, lr, r0, r2
   18966:	f04f 0500 	mov.w	r5, #0
   1896a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1896e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   18972:	fbe0 e503 	umlal	lr, r5, r0, r3
   18976:	f04f 0600 	mov.w	r6, #0
   1897a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1897e:	f09c 0f00 	teq	ip, #0
   18982:	bf18      	it	ne
   18984:	f04e 0e01 	orrne.w	lr, lr, #1
   18988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1898c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   18994:	d204      	bcs.n	189a0 <__aeabi_dmul+0x80>
   18996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1899a:	416d      	adcs	r5, r5
   1899c:	eb46 0606 	adc.w	r6, r6, r6
   189a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   189a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   189a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   189ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   189b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   189b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   189b8:	bf88      	it	hi
   189ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189be:	d81e      	bhi.n	189fe <__aeabi_dmul+0xde>
   189c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   189c4:	bf08      	it	eq
   189c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   189ca:	f150 0000 	adcs.w	r0, r0, #0
   189ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189d2:	bd70      	pop	{r4, r5, r6, pc}
   189d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   189d8:	ea46 0101 	orr.w	r1, r6, r1
   189dc:	ea40 0002 	orr.w	r0, r0, r2
   189e0:	ea81 0103 	eor.w	r1, r1, r3
   189e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   189e8:	bfc2      	ittt	gt
   189ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   189ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189f2:	bd70      	popgt	{r4, r5, r6, pc}
   189f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189f8:	f04f 0e00 	mov.w	lr, #0
   189fc:	3c01      	subs	r4, #1
   189fe:	f300 80ab 	bgt.w	18b58 <__aeabi_dmul+0x238>
   18a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   18a06:	bfde      	ittt	le
   18a08:	2000      	movle	r0, #0
   18a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18a0e:	bd70      	pople	{r4, r5, r6, pc}
   18a10:	f1c4 0400 	rsb	r4, r4, #0
   18a14:	3c20      	subs	r4, #32
   18a16:	da35      	bge.n	18a84 <__aeabi_dmul+0x164>
   18a18:	340c      	adds	r4, #12
   18a1a:	dc1b      	bgt.n	18a54 <__aeabi_dmul+0x134>
   18a1c:	f104 0414 	add.w	r4, r4, #20
   18a20:	f1c4 0520 	rsb	r5, r4, #32
   18a24:	fa00 f305 	lsl.w	r3, r0, r5
   18a28:	fa20 f004 	lsr.w	r0, r0, r4
   18a2c:	fa01 f205 	lsl.w	r2, r1, r5
   18a30:	ea40 0002 	orr.w	r0, r0, r2
   18a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18a40:	fa21 f604 	lsr.w	r6, r1, r4
   18a44:	eb42 0106 	adc.w	r1, r2, r6
   18a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18a4c:	bf08      	it	eq
   18a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18a52:	bd70      	pop	{r4, r5, r6, pc}
   18a54:	f1c4 040c 	rsb	r4, r4, #12
   18a58:	f1c4 0520 	rsb	r5, r4, #32
   18a5c:	fa00 f304 	lsl.w	r3, r0, r4
   18a60:	fa20 f005 	lsr.w	r0, r0, r5
   18a64:	fa01 f204 	lsl.w	r2, r1, r4
   18a68:	ea40 0002 	orr.w	r0, r0, r2
   18a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18a74:	f141 0100 	adc.w	r1, r1, #0
   18a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18a7c:	bf08      	it	eq
   18a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18a82:	bd70      	pop	{r4, r5, r6, pc}
   18a84:	f1c4 0520 	rsb	r5, r4, #32
   18a88:	fa00 f205 	lsl.w	r2, r0, r5
   18a8c:	ea4e 0e02 	orr.w	lr, lr, r2
   18a90:	fa20 f304 	lsr.w	r3, r0, r4
   18a94:	fa01 f205 	lsl.w	r2, r1, r5
   18a98:	ea43 0302 	orr.w	r3, r3, r2
   18a9c:	fa21 f004 	lsr.w	r0, r1, r4
   18aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18aa4:	fa21 f204 	lsr.w	r2, r1, r4
   18aa8:	ea20 0002 	bic.w	r0, r0, r2
   18aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18ab4:	bf08      	it	eq
   18ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18aba:	bd70      	pop	{r4, r5, r6, pc}
   18abc:	f094 0f00 	teq	r4, #0
   18ac0:	d10f      	bne.n	18ae2 <__aeabi_dmul+0x1c2>
   18ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   18ac6:	0040      	lsls	r0, r0, #1
   18ac8:	eb41 0101 	adc.w	r1, r1, r1
   18acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18ad0:	bf08      	it	eq
   18ad2:	3c01      	subeq	r4, #1
   18ad4:	d0f7      	beq.n	18ac6 <__aeabi_dmul+0x1a6>
   18ad6:	ea41 0106 	orr.w	r1, r1, r6
   18ada:	f095 0f00 	teq	r5, #0
   18ade:	bf18      	it	ne
   18ae0:	4770      	bxne	lr
   18ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   18ae6:	0052      	lsls	r2, r2, #1
   18ae8:	eb43 0303 	adc.w	r3, r3, r3
   18aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18af0:	bf08      	it	eq
   18af2:	3d01      	subeq	r5, #1
   18af4:	d0f7      	beq.n	18ae6 <__aeabi_dmul+0x1c6>
   18af6:	ea43 0306 	orr.w	r3, r3, r6
   18afa:	4770      	bx	lr
   18afc:	ea94 0f0c 	teq	r4, ip
   18b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b04:	bf18      	it	ne
   18b06:	ea95 0f0c 	teqne	r5, ip
   18b0a:	d00c      	beq.n	18b26 <__aeabi_dmul+0x206>
   18b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18b10:	bf18      	it	ne
   18b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18b16:	d1d1      	bne.n	18abc <__aeabi_dmul+0x19c>
   18b18:	ea81 0103 	eor.w	r1, r1, r3
   18b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18b20:	f04f 0000 	mov.w	r0, #0
   18b24:	bd70      	pop	{r4, r5, r6, pc}
   18b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18b2a:	bf06      	itte	eq
   18b2c:	4610      	moveq	r0, r2
   18b2e:	4619      	moveq	r1, r3
   18b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18b34:	d019      	beq.n	18b6a <__aeabi_dmul+0x24a>
   18b36:	ea94 0f0c 	teq	r4, ip
   18b3a:	d102      	bne.n	18b42 <__aeabi_dmul+0x222>
   18b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18b40:	d113      	bne.n	18b6a <__aeabi_dmul+0x24a>
   18b42:	ea95 0f0c 	teq	r5, ip
   18b46:	d105      	bne.n	18b54 <__aeabi_dmul+0x234>
   18b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18b4c:	bf1c      	itt	ne
   18b4e:	4610      	movne	r0, r2
   18b50:	4619      	movne	r1, r3
   18b52:	d10a      	bne.n	18b6a <__aeabi_dmul+0x24a>
   18b54:	ea81 0103 	eor.w	r1, r1, r3
   18b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18b64:	f04f 0000 	mov.w	r0, #0
   18b68:	bd70      	pop	{r4, r5, r6, pc}
   18b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   18b72:	bd70      	pop	{r4, r5, r6, pc}

00018b74 <__aeabi_ddiv>:
   18b74:	b570      	push	{r4, r5, r6, lr}
   18b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18b82:	bf1d      	ittte	ne
   18b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18b88:	ea94 0f0c 	teqne	r4, ip
   18b8c:	ea95 0f0c 	teqne	r5, ip
   18b90:	f000 f8a7 	bleq	18ce2 <__aeabi_ddiv+0x16e>
   18b94:	eba4 0405 	sub.w	r4, r4, r5
   18b98:	ea81 0e03 	eor.w	lr, r1, r3
   18b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18ba4:	f000 8088 	beq.w	18cb8 <__aeabi_ddiv+0x144>
   18ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18bcc:	429d      	cmp	r5, r3
   18bce:	bf08      	it	eq
   18bd0:	4296      	cmpeq	r6, r2
   18bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18bda:	d202      	bcs.n	18be2 <__aeabi_ddiv+0x6e>
   18bdc:	085b      	lsrs	r3, r3, #1
   18bde:	ea4f 0232 	mov.w	r2, r2, rrx
   18be2:	1ab6      	subs	r6, r6, r2
   18be4:	eb65 0503 	sbc.w	r5, r5, r3
   18be8:	085b      	lsrs	r3, r3, #1
   18bea:	ea4f 0232 	mov.w	r2, r2, rrx
   18bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18bf6:	ebb6 0e02 	subs.w	lr, r6, r2
   18bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   18bfe:	bf22      	ittt	cs
   18c00:	1ab6      	subcs	r6, r6, r2
   18c02:	4675      	movcs	r5, lr
   18c04:	ea40 000c 	orrcs.w	r0, r0, ip
   18c08:	085b      	lsrs	r3, r3, #1
   18c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   18c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   18c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c16:	bf22      	ittt	cs
   18c18:	1ab6      	subcs	r6, r6, r2
   18c1a:	4675      	movcs	r5, lr
   18c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18c20:	085b      	lsrs	r3, r3, #1
   18c22:	ea4f 0232 	mov.w	r2, r2, rrx
   18c26:	ebb6 0e02 	subs.w	lr, r6, r2
   18c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c2e:	bf22      	ittt	cs
   18c30:	1ab6      	subcs	r6, r6, r2
   18c32:	4675      	movcs	r5, lr
   18c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18c38:	085b      	lsrs	r3, r3, #1
   18c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   18c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   18c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c46:	bf22      	ittt	cs
   18c48:	1ab6      	subcs	r6, r6, r2
   18c4a:	4675      	movcs	r5, lr
   18c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18c50:	ea55 0e06 	orrs.w	lr, r5, r6
   18c54:	d018      	beq.n	18c88 <__aeabi_ddiv+0x114>
   18c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18c72:	d1c0      	bne.n	18bf6 <__aeabi_ddiv+0x82>
   18c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18c78:	d10b      	bne.n	18c92 <__aeabi_ddiv+0x11e>
   18c7a:	ea41 0100 	orr.w	r1, r1, r0
   18c7e:	f04f 0000 	mov.w	r0, #0
   18c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18c86:	e7b6      	b.n	18bf6 <__aeabi_ddiv+0x82>
   18c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18c8c:	bf04      	itt	eq
   18c8e:	4301      	orreq	r1, r0
   18c90:	2000      	moveq	r0, #0
   18c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18c96:	bf88      	it	hi
   18c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18c9c:	f63f aeaf 	bhi.w	189fe <__aeabi_dmul+0xde>
   18ca0:	ebb5 0c03 	subs.w	ip, r5, r3
   18ca4:	bf04      	itt	eq
   18ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
   18caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18cae:	f150 0000 	adcs.w	r0, r0, #0
   18cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18cb6:	bd70      	pop	{r4, r5, r6, pc}
   18cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18cc4:	bfc2      	ittt	gt
   18cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   18cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18cce:	bd70      	popgt	{r4, r5, r6, pc}
   18cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18cd4:	f04f 0e00 	mov.w	lr, #0
   18cd8:	3c01      	subs	r4, #1
   18cda:	e690      	b.n	189fe <__aeabi_dmul+0xde>
   18cdc:	ea45 0e06 	orr.w	lr, r5, r6
   18ce0:	e68d      	b.n	189fe <__aeabi_dmul+0xde>
   18ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18ce6:	ea94 0f0c 	teq	r4, ip
   18cea:	bf08      	it	eq
   18cec:	ea95 0f0c 	teqeq	r5, ip
   18cf0:	f43f af3b 	beq.w	18b6a <__aeabi_dmul+0x24a>
   18cf4:	ea94 0f0c 	teq	r4, ip
   18cf8:	d10a      	bne.n	18d10 <__aeabi_ddiv+0x19c>
   18cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18cfe:	f47f af34 	bne.w	18b6a <__aeabi_dmul+0x24a>
   18d02:	ea95 0f0c 	teq	r5, ip
   18d06:	f47f af25 	bne.w	18b54 <__aeabi_dmul+0x234>
   18d0a:	4610      	mov	r0, r2
   18d0c:	4619      	mov	r1, r3
   18d0e:	e72c      	b.n	18b6a <__aeabi_dmul+0x24a>
   18d10:	ea95 0f0c 	teq	r5, ip
   18d14:	d106      	bne.n	18d24 <__aeabi_ddiv+0x1b0>
   18d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d1a:	f43f aefd 	beq.w	18b18 <__aeabi_dmul+0x1f8>
   18d1e:	4610      	mov	r0, r2
   18d20:	4619      	mov	r1, r3
   18d22:	e722      	b.n	18b6a <__aeabi_dmul+0x24a>
   18d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d28:	bf18      	it	ne
   18d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d2e:	f47f aec5 	bne.w	18abc <__aeabi_dmul+0x19c>
   18d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18d36:	f47f af0d 	bne.w	18b54 <__aeabi_dmul+0x234>
   18d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18d3e:	f47f aeeb 	bne.w	18b18 <__aeabi_dmul+0x1f8>
   18d42:	e712      	b.n	18b6a <__aeabi_dmul+0x24a>

00018d44 <__aeabi_d2f>:
   18d44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18d48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18d4c:	bf24      	itt	cs
   18d4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18d52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18d56:	d90d      	bls.n	18d74 <__aeabi_d2f+0x30>
   18d58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18d5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18d60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18d64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18d68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18d6c:	bf08      	it	eq
   18d6e:	f020 0001 	biceq.w	r0, r0, #1
   18d72:	4770      	bx	lr
   18d74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18d78:	d121      	bne.n	18dbe <__aeabi_d2f+0x7a>
   18d7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18d7e:	bfbc      	itt	lt
   18d80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18d84:	4770      	bxlt	lr
   18d86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18d8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18d8e:	f1c2 0218 	rsb	r2, r2, #24
   18d92:	f1c2 0c20 	rsb	ip, r2, #32
   18d96:	fa10 f30c 	lsls.w	r3, r0, ip
   18d9a:	fa20 f002 	lsr.w	r0, r0, r2
   18d9e:	bf18      	it	ne
   18da0:	f040 0001 	orrne.w	r0, r0, #1
   18da4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18da8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18dac:	fa03 fc0c 	lsl.w	ip, r3, ip
   18db0:	ea40 000c 	orr.w	r0, r0, ip
   18db4:	fa23 f302 	lsr.w	r3, r3, r2
   18db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18dbc:	e7cc      	b.n	18d58 <__aeabi_d2f+0x14>
   18dbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18dc2:	d107      	bne.n	18dd4 <__aeabi_d2f+0x90>
   18dc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18dc8:	bf1e      	ittt	ne
   18dca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18dce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18dd2:	4770      	bxne	lr
   18dd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18de0:	4770      	bx	lr
   18de2:	bf00      	nop

00018de4 <__aeabi_frsub>:
   18de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18de8:	e002      	b.n	18df0 <__addsf3>
   18dea:	bf00      	nop

00018dec <__aeabi_fsub>:
   18dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018df0 <__addsf3>:
   18df0:	0042      	lsls	r2, r0, #1
   18df2:	bf1f      	itttt	ne
   18df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18df8:	ea92 0f03 	teqne	r2, r3
   18dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18e04:	d06a      	beq.n	18edc <__addsf3+0xec>
   18e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18e0e:	bfc1      	itttt	gt
   18e10:	18d2      	addgt	r2, r2, r3
   18e12:	4041      	eorgt	r1, r0
   18e14:	4048      	eorgt	r0, r1
   18e16:	4041      	eorgt	r1, r0
   18e18:	bfb8      	it	lt
   18e1a:	425b      	neglt	r3, r3
   18e1c:	2b19      	cmp	r3, #25
   18e1e:	bf88      	it	hi
   18e20:	4770      	bxhi	lr
   18e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18e2e:	bf18      	it	ne
   18e30:	4240      	negne	r0, r0
   18e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18e3e:	bf18      	it	ne
   18e40:	4249      	negne	r1, r1
   18e42:	ea92 0f03 	teq	r2, r3
   18e46:	d03f      	beq.n	18ec8 <__addsf3+0xd8>
   18e48:	f1a2 0201 	sub.w	r2, r2, #1
   18e4c:	fa41 fc03 	asr.w	ip, r1, r3
   18e50:	eb10 000c 	adds.w	r0, r0, ip
   18e54:	f1c3 0320 	rsb	r3, r3, #32
   18e58:	fa01 f103 	lsl.w	r1, r1, r3
   18e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18e60:	d502      	bpl.n	18e68 <__addsf3+0x78>
   18e62:	4249      	negs	r1, r1
   18e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18e6c:	d313      	bcc.n	18e96 <__addsf3+0xa6>
   18e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18e72:	d306      	bcc.n	18e82 <__addsf3+0x92>
   18e74:	0840      	lsrs	r0, r0, #1
   18e76:	ea4f 0131 	mov.w	r1, r1, rrx
   18e7a:	f102 0201 	add.w	r2, r2, #1
   18e7e:	2afe      	cmp	r2, #254	; 0xfe
   18e80:	d251      	bcs.n	18f26 <__addsf3+0x136>
   18e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18e8a:	bf08      	it	eq
   18e8c:	f020 0001 	biceq.w	r0, r0, #1
   18e90:	ea40 0003 	orr.w	r0, r0, r3
   18e94:	4770      	bx	lr
   18e96:	0049      	lsls	r1, r1, #1
   18e98:	eb40 0000 	adc.w	r0, r0, r0
   18e9c:	3a01      	subs	r2, #1
   18e9e:	bf28      	it	cs
   18ea0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18ea4:	d2ed      	bcs.n	18e82 <__addsf3+0x92>
   18ea6:	fab0 fc80 	clz	ip, r0
   18eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   18eae:	ebb2 020c 	subs.w	r2, r2, ip
   18eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   18eb6:	bfaa      	itet	ge
   18eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18ebc:	4252      	neglt	r2, r2
   18ebe:	4318      	orrge	r0, r3
   18ec0:	bfbc      	itt	lt
   18ec2:	40d0      	lsrlt	r0, r2
   18ec4:	4318      	orrlt	r0, r3
   18ec6:	4770      	bx	lr
   18ec8:	f092 0f00 	teq	r2, #0
   18ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18ed0:	bf06      	itte	eq
   18ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18ed6:	3201      	addeq	r2, #1
   18ed8:	3b01      	subne	r3, #1
   18eda:	e7b5      	b.n	18e48 <__addsf3+0x58>
   18edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18ee4:	bf18      	it	ne
   18ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18eea:	d021      	beq.n	18f30 <__addsf3+0x140>
   18eec:	ea92 0f03 	teq	r2, r3
   18ef0:	d004      	beq.n	18efc <__addsf3+0x10c>
   18ef2:	f092 0f00 	teq	r2, #0
   18ef6:	bf08      	it	eq
   18ef8:	4608      	moveq	r0, r1
   18efa:	4770      	bx	lr
   18efc:	ea90 0f01 	teq	r0, r1
   18f00:	bf1c      	itt	ne
   18f02:	2000      	movne	r0, #0
   18f04:	4770      	bxne	lr
   18f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18f0a:	d104      	bne.n	18f16 <__addsf3+0x126>
   18f0c:	0040      	lsls	r0, r0, #1
   18f0e:	bf28      	it	cs
   18f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18f14:	4770      	bx	lr
   18f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18f1a:	bf3c      	itt	cc
   18f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18f20:	4770      	bxcc	lr
   18f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18f2e:	4770      	bx	lr
   18f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18f34:	bf16      	itet	ne
   18f36:	4608      	movne	r0, r1
   18f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18f3c:	4601      	movne	r1, r0
   18f3e:	0242      	lsls	r2, r0, #9
   18f40:	bf06      	itte	eq
   18f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18f46:	ea90 0f01 	teqeq	r0, r1
   18f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18f4e:	4770      	bx	lr

00018f50 <__aeabi_ui2f>:
   18f50:	f04f 0300 	mov.w	r3, #0
   18f54:	e004      	b.n	18f60 <__aeabi_i2f+0x8>
   18f56:	bf00      	nop

00018f58 <__aeabi_i2f>:
   18f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18f5c:	bf48      	it	mi
   18f5e:	4240      	negmi	r0, r0
   18f60:	ea5f 0c00 	movs.w	ip, r0
   18f64:	bf08      	it	eq
   18f66:	4770      	bxeq	lr
   18f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18f6c:	4601      	mov	r1, r0
   18f6e:	f04f 0000 	mov.w	r0, #0
   18f72:	e01c      	b.n	18fae <__aeabi_l2f+0x2a>

00018f74 <__aeabi_ul2f>:
   18f74:	ea50 0201 	orrs.w	r2, r0, r1
   18f78:	bf08      	it	eq
   18f7a:	4770      	bxeq	lr
   18f7c:	f04f 0300 	mov.w	r3, #0
   18f80:	e00a      	b.n	18f98 <__aeabi_l2f+0x14>
   18f82:	bf00      	nop

00018f84 <__aeabi_l2f>:
   18f84:	ea50 0201 	orrs.w	r2, r0, r1
   18f88:	bf08      	it	eq
   18f8a:	4770      	bxeq	lr
   18f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18f90:	d502      	bpl.n	18f98 <__aeabi_l2f+0x14>
   18f92:	4240      	negs	r0, r0
   18f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18f98:	ea5f 0c01 	movs.w	ip, r1
   18f9c:	bf02      	ittt	eq
   18f9e:	4684      	moveq	ip, r0
   18fa0:	4601      	moveq	r1, r0
   18fa2:	2000      	moveq	r0, #0
   18fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18fa8:	bf08      	it	eq
   18faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18fb2:	fabc f28c 	clz	r2, ip
   18fb6:	3a08      	subs	r2, #8
   18fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18fbc:	db10      	blt.n	18fe0 <__aeabi_l2f+0x5c>
   18fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   18fc2:	4463      	add	r3, ip
   18fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   18fc8:	f1c2 0220 	rsb	r2, r2, #32
   18fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18fd0:	fa20 f202 	lsr.w	r2, r0, r2
   18fd4:	eb43 0002 	adc.w	r0, r3, r2
   18fd8:	bf08      	it	eq
   18fda:	f020 0001 	biceq.w	r0, r0, #1
   18fde:	4770      	bx	lr
   18fe0:	f102 0220 	add.w	r2, r2, #32
   18fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   18fe8:	f1c2 0220 	rsb	r2, r2, #32
   18fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18ff0:	fa21 f202 	lsr.w	r2, r1, r2
   18ff4:	eb43 0002 	adc.w	r0, r3, r2
   18ff8:	bf08      	it	eq
   18ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18ffe:	4770      	bx	lr

00019000 <__aeabi_ldivmod>:
   19000:	b97b      	cbnz	r3, 19022 <__aeabi_ldivmod+0x22>
   19002:	b972      	cbnz	r2, 19022 <__aeabi_ldivmod+0x22>
   19004:	2900      	cmp	r1, #0
   19006:	bfbe      	ittt	lt
   19008:	2000      	movlt	r0, #0
   1900a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1900e:	e006      	blt.n	1901e <__aeabi_ldivmod+0x1e>
   19010:	bf08      	it	eq
   19012:	2800      	cmpeq	r0, #0
   19014:	bf1c      	itt	ne
   19016:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1901a:	f04f 30ff 	movne.w	r0, #4294967295
   1901e:	f000 b9bb 	b.w	19398 <__aeabi_idiv0>
   19022:	f1ad 0c08 	sub.w	ip, sp, #8
   19026:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1902a:	2900      	cmp	r1, #0
   1902c:	db09      	blt.n	19042 <__aeabi_ldivmod+0x42>
   1902e:	2b00      	cmp	r3, #0
   19030:	db1a      	blt.n	19068 <__aeabi_ldivmod+0x68>
   19032:	f000 f84d 	bl	190d0 <__udivmoddi4>
   19036:	f8dd e004 	ldr.w	lr, [sp, #4]
   1903a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1903e:	b004      	add	sp, #16
   19040:	4770      	bx	lr
   19042:	4240      	negs	r0, r0
   19044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19048:	2b00      	cmp	r3, #0
   1904a:	db1b      	blt.n	19084 <__aeabi_ldivmod+0x84>
   1904c:	f000 f840 	bl	190d0 <__udivmoddi4>
   19050:	f8dd e004 	ldr.w	lr, [sp, #4]
   19054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19058:	b004      	add	sp, #16
   1905a:	4240      	negs	r0, r0
   1905c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19060:	4252      	negs	r2, r2
   19062:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19066:	4770      	bx	lr
   19068:	4252      	negs	r2, r2
   1906a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1906e:	f000 f82f 	bl	190d0 <__udivmoddi4>
   19072:	f8dd e004 	ldr.w	lr, [sp, #4]
   19076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1907a:	b004      	add	sp, #16
   1907c:	4240      	negs	r0, r0
   1907e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19082:	4770      	bx	lr
   19084:	4252      	negs	r2, r2
   19086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1908a:	f000 f821 	bl	190d0 <__udivmoddi4>
   1908e:	f8dd e004 	ldr.w	lr, [sp, #4]
   19092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19096:	b004      	add	sp, #16
   19098:	4252      	negs	r2, r2
   1909a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1909e:	4770      	bx	lr

000190a0 <__aeabi_uldivmod>:
   190a0:	b953      	cbnz	r3, 190b8 <__aeabi_uldivmod+0x18>
   190a2:	b94a      	cbnz	r2, 190b8 <__aeabi_uldivmod+0x18>
   190a4:	2900      	cmp	r1, #0
   190a6:	bf08      	it	eq
   190a8:	2800      	cmpeq	r0, #0
   190aa:	bf1c      	itt	ne
   190ac:	f04f 31ff 	movne.w	r1, #4294967295
   190b0:	f04f 30ff 	movne.w	r0, #4294967295
   190b4:	f000 b970 	b.w	19398 <__aeabi_idiv0>
   190b8:	f1ad 0c08 	sub.w	ip, sp, #8
   190bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   190c0:	f000 f806 	bl	190d0 <__udivmoddi4>
   190c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   190c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   190cc:	b004      	add	sp, #16
   190ce:	4770      	bx	lr

000190d0 <__udivmoddi4>:
   190d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   190d4:	9e08      	ldr	r6, [sp, #32]
   190d6:	460d      	mov	r5, r1
   190d8:	4604      	mov	r4, r0
   190da:	468a      	mov	sl, r1
   190dc:	2b00      	cmp	r3, #0
   190de:	d17f      	bne.n	191e0 <__udivmoddi4+0x110>
   190e0:	428a      	cmp	r2, r1
   190e2:	4617      	mov	r7, r2
   190e4:	d941      	bls.n	1916a <__udivmoddi4+0x9a>
   190e6:	fab2 f282 	clz	r2, r2
   190ea:	b14a      	cbz	r2, 19100 <__udivmoddi4+0x30>
   190ec:	f1c2 0120 	rsb	r1, r2, #32
   190f0:	fa05 f302 	lsl.w	r3, r5, r2
   190f4:	4097      	lsls	r7, r2
   190f6:	4094      	lsls	r4, r2
   190f8:	fa20 f101 	lsr.w	r1, r0, r1
   190fc:	ea41 0a03 	orr.w	sl, r1, r3
   19100:	ea4f 4817 	mov.w	r8, r7, lsr #16
   19104:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   19108:	fa1f f987 	uxth.w	r9, r7
   1910c:	fbba fef8 	udiv	lr, sl, r8
   19110:	fb08 a31e 	mls	r3, r8, lr, sl
   19114:	fb0e f109 	mul.w	r1, lr, r9
   19118:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   1911c:	4299      	cmp	r1, r3
   1911e:	d906      	bls.n	1912e <__udivmoddi4+0x5e>
   19120:	18fb      	adds	r3, r7, r3
   19122:	d202      	bcs.n	1912a <__udivmoddi4+0x5a>
   19124:	4299      	cmp	r1, r3
   19126:	f200 8124 	bhi.w	19372 <_flash_used+0x96>
   1912a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1912e:	1a59      	subs	r1, r3, r1
   19130:	b2a3      	uxth	r3, r4
   19132:	fbb1 f0f8 	udiv	r0, r1, r8
   19136:	fb08 1110 	mls	r1, r8, r0, r1
   1913a:	fb00 f909 	mul.w	r9, r0, r9
   1913e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   19142:	45a1      	cmp	r9, r4
   19144:	d905      	bls.n	19152 <__udivmoddi4+0x82>
   19146:	193c      	adds	r4, r7, r4
   19148:	d202      	bcs.n	19150 <__udivmoddi4+0x80>
   1914a:	45a1      	cmp	r9, r4
   1914c:	f200 810e 	bhi.w	1936c <_flash_used+0x90>
   19150:	3801      	subs	r0, #1
   19152:	eba4 0409 	sub.w	r4, r4, r9
   19156:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   1915a:	2100      	movs	r1, #0
   1915c:	b11e      	cbz	r6, 19166 <__udivmoddi4+0x96>
   1915e:	40d4      	lsrs	r4, r2
   19160:	2300      	movs	r3, #0
   19162:	e9c6 4300 	strd	r4, r3, [r6]
   19166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1916a:	b902      	cbnz	r2, 1916e <__udivmoddi4+0x9e>
   1916c:	deff      	udf	#255	; 0xff
   1916e:	fab2 f282 	clz	r2, r2
   19172:	2a00      	cmp	r2, #0
   19174:	d14f      	bne.n	19216 <__udivmoddi4+0x146>
   19176:	1bcb      	subs	r3, r1, r7
   19178:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1917c:	fa1f f887 	uxth.w	r8, r7
   19180:	2101      	movs	r1, #1
   19182:	0c25      	lsrs	r5, r4, #16
   19184:	fbb3 fcfe 	udiv	ip, r3, lr
   19188:	fb0e 301c 	mls	r0, lr, ip, r3
   1918c:	462b      	mov	r3, r5
   1918e:	fb08 f90c 	mul.w	r9, r8, ip
   19192:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   19196:	45a9      	cmp	r9, r5
   19198:	d90a      	bls.n	191b0 <__udivmoddi4+0xe0>
   1919a:	197d      	adds	r5, r7, r5
   1919c:	bf2c      	ite	cs
   1919e:	2301      	movcs	r3, #1
   191a0:	2300      	movcc	r3, #0
   191a2:	45a9      	cmp	r9, r5
   191a4:	d902      	bls.n	191ac <__udivmoddi4+0xdc>
   191a6:	2b00      	cmp	r3, #0
   191a8:	f000 80d9 	beq.w	1935e <_flash_used+0x82>
   191ac:	f10c 3cff 	add.w	ip, ip, #4294967295
   191b0:	eba5 0509 	sub.w	r5, r5, r9
   191b4:	b2a3      	uxth	r3, r4
   191b6:	fbb5 f0fe 	udiv	r0, r5, lr
   191ba:	fb0e 5510 	mls	r5, lr, r0, r5
   191be:	fb08 f800 	mul.w	r8, r8, r0
   191c2:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   191c6:	45a0      	cmp	r8, r4
   191c8:	d905      	bls.n	191d6 <__udivmoddi4+0x106>
   191ca:	193c      	adds	r4, r7, r4
   191cc:	d202      	bcs.n	191d4 <__udivmoddi4+0x104>
   191ce:	45a0      	cmp	r8, r4
   191d0:	f200 80c9 	bhi.w	19366 <_flash_used+0x8a>
   191d4:	3801      	subs	r0, #1
   191d6:	eba4 0408 	sub.w	r4, r4, r8
   191da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   191de:	e7bd      	b.n	1915c <__udivmoddi4+0x8c>
   191e0:	428b      	cmp	r3, r1
   191e2:	d908      	bls.n	191f6 <__udivmoddi4+0x126>
   191e4:	2e00      	cmp	r6, #0
   191e6:	f000 80b1 	beq.w	1934c <_flash_used+0x70>
   191ea:	2100      	movs	r1, #0
   191ec:	e9c6 0500 	strd	r0, r5, [r6]
   191f0:	4608      	mov	r0, r1
   191f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   191f6:	fab3 f183 	clz	r1, r3
   191fa:	2900      	cmp	r1, #0
   191fc:	d146      	bne.n	1928c <__udivmoddi4+0x1bc>
   191fe:	42ab      	cmp	r3, r5
   19200:	f0c0 80a7 	bcc.w	19352 <_flash_used+0x76>
   19204:	4282      	cmp	r2, r0
   19206:	f240 80a4 	bls.w	19352 <_flash_used+0x76>
   1920a:	4608      	mov	r0, r1
   1920c:	2e00      	cmp	r6, #0
   1920e:	d0aa      	beq.n	19166 <__udivmoddi4+0x96>
   19210:	e9c6 4a00 	strd	r4, sl, [r6]
   19214:	e7a7      	b.n	19166 <__udivmoddi4+0x96>
   19216:	f1c2 0020 	rsb	r0, r2, #32
   1921a:	4097      	lsls	r7, r2
   1921c:	fa01 f302 	lsl.w	r3, r1, r2
   19220:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   19224:	40c1      	lsrs	r1, r0
   19226:	fa24 f500 	lsr.w	r5, r4, r0
   1922a:	fa1f f887 	uxth.w	r8, r7
   1922e:	4094      	lsls	r4, r2
   19230:	431d      	orrs	r5, r3
   19232:	fbb1 f0fe 	udiv	r0, r1, lr
   19236:	0c2b      	lsrs	r3, r5, #16
   19238:	fb0e 1110 	mls	r1, lr, r0, r1
   1923c:	fb00 fc08 	mul.w	ip, r0, r8
   19240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   19244:	459c      	cmp	ip, r3
   19246:	d909      	bls.n	1925c <__udivmoddi4+0x18c>
   19248:	18fb      	adds	r3, r7, r3
   1924a:	bf2c      	ite	cs
   1924c:	2101      	movcs	r1, #1
   1924e:	2100      	movcc	r1, #0
   19250:	459c      	cmp	ip, r3
   19252:	d902      	bls.n	1925a <__udivmoddi4+0x18a>
   19254:	2900      	cmp	r1, #0
   19256:	f000 8095 	beq.w	19384 <_flash_used+0xa8>
   1925a:	3801      	subs	r0, #1
   1925c:	eba3 030c 	sub.w	r3, r3, ip
   19260:	b2ad      	uxth	r5, r5
   19262:	fbb3 f1fe 	udiv	r1, r3, lr
   19266:	fb0e 3311 	mls	r3, lr, r1, r3
   1926a:	fb01 fc08 	mul.w	ip, r1, r8
   1926e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   19272:	45ac      	cmp	ip, r5
   19274:	d905      	bls.n	19282 <__udivmoddi4+0x1b2>
   19276:	197d      	adds	r5, r7, r5
   19278:	d202      	bcs.n	19280 <__udivmoddi4+0x1b0>
   1927a:	45ac      	cmp	ip, r5
   1927c:	f200 8089 	bhi.w	19392 <_flash_used+0xb6>
   19280:	3901      	subs	r1, #1
   19282:	eba5 030c 	sub.w	r3, r5, ip
   19286:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1928a:	e77a      	b.n	19182 <__udivmoddi4+0xb2>
   1928c:	f1c1 0420 	rsb	r4, r1, #32
   19290:	408b      	lsls	r3, r1
   19292:	fa02 f701 	lsl.w	r7, r2, r1
   19296:	fa05 fc01 	lsl.w	ip, r5, r1
   1929a:	40e2      	lsrs	r2, r4
   1929c:	fa20 f804 	lsr.w	r8, r0, r4
   192a0:	40e5      	lsrs	r5, r4
   192a2:	fa00 fe01 	lsl.w	lr, r0, r1
   192a6:	4313      	orrs	r3, r2
   192a8:	ea48 020c 	orr.w	r2, r8, ip
   192ac:	ea4f 4813 	mov.w	r8, r3, lsr #16
   192b0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   192b4:	fa1f f983 	uxth.w	r9, r3
   192b8:	fbb5 faf8 	udiv	sl, r5, r8
   192bc:	fb08 551a 	mls	r5, r8, sl, r5
   192c0:	fb0a f009 	mul.w	r0, sl, r9
   192c4:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   192c8:	4560      	cmp	r0, ip
   192ca:	d90a      	bls.n	192e2 <_flash_used+0x6>
   192cc:	eb13 0c0c 	adds.w	ip, r3, ip
   192d0:	bf2c      	ite	cs
   192d2:	2501      	movcs	r5, #1
   192d4:	2500      	movcc	r5, #0
   192d6:	4560      	cmp	r0, ip
   192d8:	d901      	bls.n	192de <_flash_used+0x2>
   192da:	2d00      	cmp	r5, #0
   192dc:	d055      	beq.n	1938a <_flash_used+0xae>
   192de:	f10a 3aff 	add.w	sl, sl, #4294967295
   192e2:	ebac 0c00 	sub.w	ip, ip, r0
   192e6:	b292      	uxth	r2, r2
   192e8:	fbbc f0f8 	udiv	r0, ip, r8
   192ec:	fb08 cc10 	mls	ip, r8, r0, ip
   192f0:	fb00 f909 	mul.w	r9, r0, r9
   192f4:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   192f8:	45e1      	cmp	r9, ip
   192fa:	d905      	bls.n	19308 <_flash_used+0x2c>
   192fc:	eb13 0c0c 	adds.w	ip, r3, ip
   19300:	d201      	bcs.n	19306 <_flash_used+0x2a>
   19302:	45e1      	cmp	r9, ip
   19304:	d83b      	bhi.n	1937e <_flash_used+0xa2>
   19306:	3801      	subs	r0, #1
   19308:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1930c:	ebac 0c09 	sub.w	ip, ip, r9
   19310:	fba0 8907 	umull	r8, r9, r0, r7
   19314:	45cc      	cmp	ip, r9
   19316:	4645      	mov	r5, r8
   19318:	464a      	mov	r2, r9
   1931a:	d302      	bcc.n	19322 <_flash_used+0x46>
   1931c:	d106      	bne.n	1932c <_flash_used+0x50>
   1931e:	45c6      	cmp	lr, r8
   19320:	d204      	bcs.n	1932c <_flash_used+0x50>
   19322:	3801      	subs	r0, #1
   19324:	ebb8 0507 	subs.w	r5, r8, r7
   19328:	eb69 0203 	sbc.w	r2, r9, r3
   1932c:	b32e      	cbz	r6, 1937a <_flash_used+0x9e>
   1932e:	ebbe 0305 	subs.w	r3, lr, r5
   19332:	eb6c 0c02 	sbc.w	ip, ip, r2
   19336:	fa23 f201 	lsr.w	r2, r3, r1
   1933a:	fa0c f404 	lsl.w	r4, ip, r4
   1933e:	fa2c f301 	lsr.w	r3, ip, r1
   19342:	2100      	movs	r1, #0
   19344:	4314      	orrs	r4, r2
   19346:	e9c6 4300 	strd	r4, r3, [r6]
   1934a:	e70c      	b.n	19166 <__udivmoddi4+0x96>
   1934c:	4631      	mov	r1, r6
   1934e:	4630      	mov	r0, r6
   19350:	e709      	b.n	19166 <__udivmoddi4+0x96>
   19352:	1a84      	subs	r4, r0, r2
   19354:	eb65 0303 	sbc.w	r3, r5, r3
   19358:	2001      	movs	r0, #1
   1935a:	469a      	mov	sl, r3
   1935c:	e756      	b.n	1920c <__udivmoddi4+0x13c>
   1935e:	f1ac 0c02 	sub.w	ip, ip, #2
   19362:	443d      	add	r5, r7
   19364:	e724      	b.n	191b0 <__udivmoddi4+0xe0>
   19366:	3802      	subs	r0, #2
   19368:	443c      	add	r4, r7
   1936a:	e734      	b.n	191d6 <__udivmoddi4+0x106>
   1936c:	3802      	subs	r0, #2
   1936e:	443c      	add	r4, r7
   19370:	e6ef      	b.n	19152 <__udivmoddi4+0x82>
   19372:	f1ae 0e02 	sub.w	lr, lr, #2
   19376:	443b      	add	r3, r7
   19378:	e6d9      	b.n	1912e <__udivmoddi4+0x5e>
   1937a:	4631      	mov	r1, r6
   1937c:	e6f3      	b.n	19166 <__udivmoddi4+0x96>
   1937e:	3802      	subs	r0, #2
   19380:	449c      	add	ip, r3
   19382:	e7c1      	b.n	19308 <_flash_used+0x2c>
   19384:	3802      	subs	r0, #2
   19386:	443b      	add	r3, r7
   19388:	e768      	b.n	1925c <__udivmoddi4+0x18c>
   1938a:	f1aa 0a02 	sub.w	sl, sl, #2
   1938e:	449c      	add	ip, r3
   19390:	e7a7      	b.n	192e2 <_flash_used+0x6>
   19392:	3902      	subs	r1, #2
   19394:	443d      	add	r5, r7
   19396:	e774      	b.n	19282 <__udivmoddi4+0x1b2>

00019398 <__aeabi_idiv0>:
   19398:	4770      	bx	lr
   1939a:	bf00      	nop

0001939c <__gedf2>:
   1939c:	f04f 3cff 	mov.w	ip, #4294967295
   193a0:	e006      	b.n	193b0 <__cmpdf2+0x4>
   193a2:	bf00      	nop

000193a4 <__ledf2>:
   193a4:	f04f 0c01 	mov.w	ip, #1
   193a8:	e002      	b.n	193b0 <__cmpdf2+0x4>
   193aa:	bf00      	nop

000193ac <__cmpdf2>:
   193ac:	f04f 0c01 	mov.w	ip, #1
   193b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   193b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   193b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   193bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   193c0:	bf18      	it	ne
   193c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   193c6:	d01b      	beq.n	19400 <__cmpdf2+0x54>
   193c8:	b001      	add	sp, #4
   193ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   193ce:	bf0c      	ite	eq
   193d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   193d4:	ea91 0f03 	teqne	r1, r3
   193d8:	bf02      	ittt	eq
   193da:	ea90 0f02 	teqeq	r0, r2
   193de:	2000      	moveq	r0, #0
   193e0:	4770      	bxeq	lr
   193e2:	f110 0f00 	cmn.w	r0, #0
   193e6:	ea91 0f03 	teq	r1, r3
   193ea:	bf58      	it	pl
   193ec:	4299      	cmppl	r1, r3
   193ee:	bf08      	it	eq
   193f0:	4290      	cmpeq	r0, r2
   193f2:	bf2c      	ite	cs
   193f4:	17d8      	asrcs	r0, r3, #31
   193f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   193fa:	f040 0001 	orr.w	r0, r0, #1
   193fe:	4770      	bx	lr
   19400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19408:	d102      	bne.n	19410 <__cmpdf2+0x64>
   1940a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1940e:	d107      	bne.n	19420 <__cmpdf2+0x74>
   19410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19418:	d1d6      	bne.n	193c8 <__cmpdf2+0x1c>
   1941a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1941e:	d0d3      	beq.n	193c8 <__cmpdf2+0x1c>
   19420:	f85d 0b04 	ldr.w	r0, [sp], #4
   19424:	4770      	bx	lr
   19426:	bf00      	nop

00019428 <__aeabi_cdrcmple>:
   19428:	4684      	mov	ip, r0
   1942a:	4610      	mov	r0, r2
   1942c:	4662      	mov	r2, ip
   1942e:	468c      	mov	ip, r1
   19430:	4619      	mov	r1, r3
   19432:	4663      	mov	r3, ip
   19434:	e000      	b.n	19438 <__aeabi_cdcmpeq>
   19436:	bf00      	nop

00019438 <__aeabi_cdcmpeq>:
   19438:	b501      	push	{r0, lr}
   1943a:	f7ff ffb7 	bl	193ac <__cmpdf2>
   1943e:	2800      	cmp	r0, #0
   19440:	bf48      	it	mi
   19442:	f110 0f00 	cmnmi.w	r0, #0
   19446:	bd01      	pop	{r0, pc}

00019448 <__aeabi_dcmpeq>:
   19448:	f84d ed08 	str.w	lr, [sp, #-8]!
   1944c:	f7ff fff4 	bl	19438 <__aeabi_cdcmpeq>
   19450:	bf0c      	ite	eq
   19452:	2001      	moveq	r0, #1
   19454:	2000      	movne	r0, #0
   19456:	f85d fb08 	ldr.w	pc, [sp], #8
   1945a:	bf00      	nop

0001945c <__aeabi_dcmplt>:
   1945c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19460:	f7ff ffea 	bl	19438 <__aeabi_cdcmpeq>
   19464:	bf34      	ite	cc
   19466:	2001      	movcc	r0, #1
   19468:	2000      	movcs	r0, #0
   1946a:	f85d fb08 	ldr.w	pc, [sp], #8
   1946e:	bf00      	nop

00019470 <__aeabi_dcmple>:
   19470:	f84d ed08 	str.w	lr, [sp, #-8]!
   19474:	f7ff ffe0 	bl	19438 <__aeabi_cdcmpeq>
   19478:	bf94      	ite	ls
   1947a:	2001      	movls	r0, #1
   1947c:	2000      	movhi	r0, #0
   1947e:	f85d fb08 	ldr.w	pc, [sp], #8
   19482:	bf00      	nop

00019484 <__aeabi_dcmpge>:
   19484:	f84d ed08 	str.w	lr, [sp, #-8]!
   19488:	f7ff ffce 	bl	19428 <__aeabi_cdrcmple>
   1948c:	bf94      	ite	ls
   1948e:	2001      	movls	r0, #1
   19490:	2000      	movhi	r0, #0
   19492:	f85d fb08 	ldr.w	pc, [sp], #8
   19496:	bf00      	nop

00019498 <__aeabi_dcmpgt>:
   19498:	f84d ed08 	str.w	lr, [sp, #-8]!
   1949c:	f7ff ffc4 	bl	19428 <__aeabi_cdrcmple>
   194a0:	bf34      	ite	cc
   194a2:	2001      	movcc	r0, #1
   194a4:	2000      	movcs	r0, #0
   194a6:	f85d fb08 	ldr.w	pc, [sp], #8
   194aa:	bf00      	nop

000194ac <__aeabi_dcmpun>:
   194ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   194b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   194b4:	d102      	bne.n	194bc <__aeabi_dcmpun+0x10>
   194b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   194ba:	d10a      	bne.n	194d2 <__aeabi_dcmpun+0x26>
   194bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   194c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   194c4:	d102      	bne.n	194cc <__aeabi_dcmpun+0x20>
   194c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   194ca:	d102      	bne.n	194d2 <__aeabi_dcmpun+0x26>
   194cc:	f04f 0000 	mov.w	r0, #0
   194d0:	4770      	bx	lr
   194d2:	f04f 0001 	mov.w	r0, #1
   194d6:	4770      	bx	lr

000194d8 <__aeabi_d2iz>:
   194d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   194dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   194e0:	d215      	bcs.n	1950e <__aeabi_d2iz+0x36>
   194e2:	d511      	bpl.n	19508 <__aeabi_d2iz+0x30>
   194e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   194e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   194ec:	d912      	bls.n	19514 <__aeabi_d2iz+0x3c>
   194ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   194f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   194f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   194fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   194fe:	fa23 f002 	lsr.w	r0, r3, r2
   19502:	bf18      	it	ne
   19504:	4240      	negne	r0, r0
   19506:	4770      	bx	lr
   19508:	f04f 0000 	mov.w	r0, #0
   1950c:	4770      	bx	lr
   1950e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19512:	d105      	bne.n	19520 <__aeabi_d2iz+0x48>
   19514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   19518:	bf08      	it	eq
   1951a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1951e:	4770      	bx	lr
   19520:	f04f 0000 	mov.w	r0, #0
   19524:	4770      	bx	lr
   19526:	bf00      	nop

00019528 <strcmp>:
   19528:	f810 2b01 	ldrb.w	r2, [r0], #1
   1952c:	f811 3b01 	ldrb.w	r3, [r1], #1
   19530:	2a01      	cmp	r2, #1
   19532:	bf28      	it	cs
   19534:	429a      	cmpcs	r2, r3
   19536:	d0f7      	beq.n	19528 <strcmp>
   19538:	1ad0      	subs	r0, r2, r3
   1953a:	4770      	bx	lr

0001953c <strlen>:
   1953c:	4603      	mov	r3, r0
   1953e:	f813 2b01 	ldrb.w	r2, [r3], #1
   19542:	2a00      	cmp	r2, #0
   19544:	d1fb      	bne.n	1953e <strlen+0x2>
   19546:	1a18      	subs	r0, r3, r0
   19548:	3801      	subs	r0, #1
   1954a:	4770      	bx	lr
   1954c:	0000      	movs	r0, r0
	...

00019550 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   19550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19554:	4604      	mov	r4, r0
   19556:	b09b      	sub	sp, #108	; 0x6c
   19558:	460f      	mov	r7, r1
   1955a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1955c:	2100      	movs	r1, #0
   1955e:	2230      	movs	r2, #48	; 0x30
   19560:	a802      	add	r0, sp, #8
   19562:	f013 fb43 	bl	2cbec <memset>
	int ret = 0;

	if (!ctx || !time) {
   19566:	2c00      	cmp	r4, #0
   19568:	f000 8087 	beq.w	1967a <sntp_query+0x12a>
   1956c:	2e00      	cmp	r6, #0
   1956e:	f000 8084 	beq.w	1967a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   19572:	231b      	movs	r3, #27
   19574:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   19578:	f013 fa7d 	bl	2ca76 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1957c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19580:	2500      	movs	r5, #0
   19582:	fba0 8903 	umull	r8, r9, r0, r3
   19586:	fb03 9901 	mla	r9, r3, r1, r9
   1958a:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   1958e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19592:	2300      	movs	r3, #0
   19594:	4629      	mov	r1, r5
   19596:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1959a:	f7ff fd81 	bl	190a0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1959e:	4a3c      	ldr	r2, [pc, #240]	; (19690 <sntp_query+0x140>)
   195a0:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   195a2:	0a13      	lsrs	r3, r2, #8
   195a4:	0211      	lsls	r1, r2, #8
   195a6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   195aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   195ae:	430b      	orrs	r3, r1
   195b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   195b4:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   195b8:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   195ba:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   195bc:	930c      	str	r3, [sp, #48]	; 0x30
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   195be:	2230      	movs	r2, #48	; 0x30
   195c0:	462b      	mov	r3, r5
   195c2:	e9cd 5500 	strd	r5, r5, [sp]
   195c6:	a902      	add	r1, sp, #8
   195c8:	f011 fbce 	bl	2ad68 <z_impl_zsock_sendto>
	if (ret < 0) {
   195cc:	2800      	cmp	r0, #0
   195ce:	db0f      	blt.n	195f0 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   195d0:	4629      	mov	r1, r5
   195d2:	2230      	movs	r2, #48	; 0x30
   195d4:	a80e      	add	r0, sp, #56	; 0x38
   195d6:	f013 fb09 	bl	2cbec <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   195da:	68a1      	ldr	r1, [r4, #8]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   195dc:	463a      	mov	r2, r7
   195de:	4620      	mov	r0, r4
   195e0:	f011 fc22 	bl	2ae28 <z_impl_zsock_poll>
	if (status < 0) {
   195e4:	42a8      	cmp	r0, r5
   195e6:	da06      	bge.n	195f6 <sntp_query+0xa6>
		return -errno;
   195e8:	f011 fc6e 	bl	2aec8 <__errno>
   195ec:	6800      	ldr	r0, [r0, #0]
   195ee:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   195f0:	b01b      	add	sp, #108	; 0x6c
   195f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   195f6:	d037      	beq.n	19668 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   195f8:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   195fa:	2230      	movs	r2, #48	; 0x30
   195fc:	462b      	mov	r3, r5
   195fe:	e9cd 5500 	strd	r5, r5, [sp]
   19602:	a90e      	add	r1, sp, #56	; 0x38
   19604:	f011 fbe0 	bl	2adc8 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   19608:	2800      	cmp	r0, #0
   1960a:	dbed      	blt.n	195e8 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1960c:	2830      	cmp	r0, #48	; 0x30
   1960e:	d12e      	bne.n	1966e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   19610:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19612:	6922      	ldr	r2, [r4, #16]
   19614:	ba1b      	rev	r3, r3
   19616:	429a      	cmp	r2, r3
   19618:	d002      	beq.n	19620 <sntp_query+0xd0>
		return -EINVAL;
   1961a:	f06f 0015 	mvn.w	r0, #21
   1961e:	e7e7      	b.n	195f0 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   19620:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   19624:	f003 0307 	and.w	r3, r3, #7
   19628:	2b04      	cmp	r3, #4
   1962a:	d1f6      	bne.n	1961a <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1962c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   19630:	b303      	cbz	r3, 19674 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   19632:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19634:	9a19      	ldr	r2, [sp, #100]	; 0x64
   19636:	ba1b      	rev	r3, r3
   19638:	ba12      	rev	r2, r2
   1963a:	ea53 0102 	orrs.w	r1, r3, r2
   1963e:	d0ec      	beq.n	1961a <sntp_query+0xca>
	if (ts & 0x80000000) {
   19640:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   19642:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   19644:	da0c      	bge.n	19660 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   19646:	4a13      	ldr	r2, [pc, #76]	; (19694 <sntp_query+0x144>)
   19648:	4293      	cmp	r3, r2
   1964a:	d9e6      	bls.n	1961a <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1964c:	a10c      	add	r1, pc, #48	; (adr r1, 19680 <sntp_query+0x130>)
   1964e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   19652:	18c0      	adds	r0, r0, r3
   19654:	f141 0100 	adc.w	r1, r1, #0
   19658:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1965c:	2000      	movs	r0, #0
   1965e:	e7c7      	b.n	195f0 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   19660:	a109      	add	r1, pc, #36	; (adr r1, 19688 <sntp_query+0x138>)
   19662:	e9d1 0100 	ldrd	r0, r1, [r1]
   19666:	e7f4      	b.n	19652 <sntp_query+0x102>
		return -ETIMEDOUT;
   19668:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1966c:	e7c0      	b.n	195f0 <sntp_query+0xa0>
		return -EMSGSIZE;
   1966e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   19672:	e7bd      	b.n	195f0 <sntp_query+0xa0>
		return -EBUSY;
   19674:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   19678:	e7ba      	b.n	195f0 <sntp_query+0xa0>
		return -EFAULT;
   1967a:	f06f 000d 	mvn.w	r0, #13
   1967e:	e7b7      	b.n	195f0 <sntp_query+0xa0>
   19680:	7c558180 	.word	0x7c558180
   19684:	ffffffff 	.word	0xffffffff
   19688:	7c558180 	.word	0x7c558180
   1968c:	00000000 	.word	0x00000000
   19690:	83aa7e80 	.word	0x83aa7e80
   19694:	83aa7e7f 	.word	0x83aa7e7f

00019698 <z_impl_clock_gettime>:
{
	uint64_t elapsed_nsecs;
	struct timespec base;
	k_spinlock_key_t key;

	switch (clock_id) {
   19698:	2801      	cmp	r0, #1
{
   1969a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1969e:	460d      	mov	r5, r1
	switch (clock_id) {
   196a0:	d009      	beq.n	196b6 <z_impl_clock_gettime+0x1e>
   196a2:	2804      	cmp	r0, #4
   196a4:	d063      	beq.n	1976e <z_impl_clock_gettime+0xd6>
		base = rt_clock_base;
		k_spin_unlock(&rt_clock_base_lock, key);
		break;

	default:
		errno = EINVAL;
   196a6:	f011 fc0f 	bl	2aec8 <__errno>
   196aa:	2316      	movs	r3, #22
   196ac:	6003      	str	r3, [r0, #0]
		return -1;
   196ae:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   196b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   196b6:	f04f 0320 	mov.w	r3, #32
   196ba:	f3ef 8711 	mrs	r7, BASEPRI
   196be:	f383 8812 	msr	BASEPRI_MAX, r3
   196c2:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196c6:	482e      	ldr	r0, [pc, #184]	; (19780 <z_impl_clock_gettime+0xe8>)
   196c8:	f00c fd14 	bl	260f4 <z_spin_lock_valid>
   196cc:	b940      	cbnz	r0, 196e0 <z_impl_clock_gettime+0x48>
   196ce:	492d      	ldr	r1, [pc, #180]	; (19784 <z_impl_clock_gettime+0xec>)
   196d0:	482d      	ldr	r0, [pc, #180]	; (19788 <z_impl_clock_gettime+0xf0>)
   196d2:	2281      	movs	r2, #129	; 0x81
   196d4:	f011 f8e6 	bl	2a8a4 <printk>
   196d8:	2181      	movs	r1, #129	; 0x81
   196da:	482a      	ldr	r0, [pc, #168]	; (19784 <z_impl_clock_gettime+0xec>)
   196dc:	f011 fa7b 	bl	2abd6 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   196e0:	4827      	ldr	r0, [pc, #156]	; (19780 <z_impl_clock_gettime+0xe8>)
   196e2:	f00c fd23 	bl	2612c <z_spin_lock_set_owner>
		base = rt_clock_base;
   196e6:	4b29      	ldr	r3, [pc, #164]	; (1978c <z_impl_clock_gettime+0xf4>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   196e8:	4825      	ldr	r0, [pc, #148]	; (19780 <z_impl_clock_gettime+0xe8>)
   196ea:	689e      	ldr	r6, [r3, #8]
   196ec:	e9d3 4800 	ldrd	r4, r8, [r3]
   196f0:	f00c fd0e 	bl	26110 <z_spin_unlock_valid>
   196f4:	b940      	cbnz	r0, 19708 <z_impl_clock_gettime+0x70>
   196f6:	4923      	ldr	r1, [pc, #140]	; (19784 <z_impl_clock_gettime+0xec>)
   196f8:	4823      	ldr	r0, [pc, #140]	; (19788 <z_impl_clock_gettime+0xf0>)
   196fa:	22ac      	movs	r2, #172	; 0xac
   196fc:	f011 f8d2 	bl	2a8a4 <printk>
   19700:	21ac      	movs	r1, #172	; 0xac
   19702:	4820      	ldr	r0, [pc, #128]	; (19784 <z_impl_clock_gettime+0xec>)
   19704:	f011 fa67 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19708:	f387 8811 	msr	BASEPRI, r7
   1970c:	f3bf 8f6f 	isb	sy
   19710:	f013 f9b1 	bl	2ca76 <z_impl_k_uptime_ticks>
   19714:	460b      	mov	r3, r1
   19716:	4f1e      	ldr	r7, [pc, #120]	; (19790 <z_impl_clock_gettime+0xf8>)
   19718:	fba0 0107 	umull	r0, r1, r0, r7
   1971c:	fb07 1103 	mla	r1, r7, r3, r1
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   19720:	a315      	add	r3, pc, #84	; (adr r3, 19778 <z_impl_clock_gettime+0xe0>)
   19722:	e9d3 2300 	ldrd	r2, r3, [r3]
   19726:	ea4f 39d0 	mov.w	r9, r0, lsr #15
   1972a:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
   1972e:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
   19732:	4648      	mov	r0, r9
   19734:	4651      	mov	r1, sl
   19736:	f7ff fcb3 	bl	190a0 <__aeabi_uldivmod>
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1973a:	a30f      	add	r3, pc, #60	; (adr r3, 19778 <z_impl_clock_gettime+0xe0>)
   1973c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ts->tv_sec += base.tv_sec;
   19740:	1904      	adds	r4, r0, r4
   19742:	eb41 0808 	adc.w	r8, r1, r8
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   19746:	4648      	mov	r0, r9
   19748:	4651      	mov	r1, sl
	ts->tv_sec += base.tv_sec;
   1974a:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1974e:	f7ff fca7 	bl	190a0 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   19752:	4b10      	ldr	r3, [pc, #64]	; (19794 <z_impl_clock_gettime+0xfc>)
	ts->tv_nsec += base.tv_nsec;
   19754:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   19756:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
   19758:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1975a:	d906      	bls.n	1976a <z_impl_clock_gettime+0xd2>
		ts->tv_sec++;
   1975c:	3401      	adds	r4, #1
   1975e:	f148 0100 	adc.w	r1, r8, #0
   19762:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
   19766:	1bd2      	subs	r2, r2, r7
   19768:	60aa      	str	r2, [r5, #8]
	return 0;
   1976a:	2000      	movs	r0, #0
   1976c:	e7a1      	b.n	196b2 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   1976e:	2600      	movs	r6, #0
   19770:	4634      	mov	r4, r6
   19772:	46b0      	mov	r8, r6
   19774:	e7cc      	b.n	19710 <z_impl_clock_gettime+0x78>
   19776:	bf00      	nop
   19778:	3b9aca00 	.word	0x3b9aca00
   1977c:	00000000 	.word	0x00000000
   19780:	2000cebc 	.word	0x2000cebc
   19784:	0002e5ae 	.word	0x0002e5ae
   19788:	0002e574 	.word	0x0002e574
   1978c:	2000cac0 	.word	0x2000cac0
   19790:	3b9aca00 	.word	0x3b9aca00
   19794:	3b9ac9ff 	.word	0x3b9ac9ff

00019798 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   19798:	2801      	cmp	r0, #1
{
   1979a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1979c:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
   1979e:	d006      	beq.n	197ae <clock_settime+0x16>
		errno = EINVAL;
   197a0:	f011 fb92 	bl	2aec8 <__errno>
   197a4:	2316      	movs	r3, #22
   197a6:	6003      	str	r3, [r0, #0]
		return -1;
   197a8:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   197ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197ae:	f013 f962 	bl	2ca76 <z_impl_k_uptime_ticks>
   197b2:	460e      	mov	r6, r1
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   197b4:	4d2e      	ldr	r5, [pc, #184]	; (19870 <clock_settime+0xd8>)
   197b6:	6822      	ldr	r2, [r4, #0]
   197b8:	6861      	ldr	r1, [r4, #4]
   197ba:	fba2 2305 	umull	r2, r3, r2, r5
   197be:	fb05 3301 	mla	r3, r5, r1, r3
   197c2:	68a1      	ldr	r1, [r4, #8]
   197c4:	1852      	adds	r2, r2, r1
   197c6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   197ca:	fba0 0105 	umull	r0, r1, r0, r5
   197ce:	fb05 1106 	mla	r1, r5, r6, r1
   197d2:	0bc4      	lsrs	r4, r0, #15
   197d4:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		- elapsed_nsecs;
   197d8:	1b14      	subs	r4, r2, r4
   197da:	ea4f 35d1 	mov.w	r5, r1, lsr #15
   197de:	eb63 0505 	sbc.w	r5, r3, r5
	base.tv_sec = delta / NSEC_PER_SEC;
   197e2:	4620      	mov	r0, r4
   197e4:	a320      	add	r3, pc, #128	; (adr r3, 19868 <clock_settime+0xd0>)
   197e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   197ea:	4629      	mov	r1, r5
   197ec:	f7ff fc08 	bl	19000 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   197f0:	a31d      	add	r3, pc, #116	; (adr r3, 19868 <clock_settime+0xd0>)
   197f2:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   197f6:	4607      	mov	r7, r0
   197f8:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   197fa:	4620      	mov	r0, r4
   197fc:	4629      	mov	r1, r5
   197fe:	f7ff fbff 	bl	19000 <__aeabi_ldivmod>
   19802:	4614      	mov	r4, r2
	__asm__ volatile(
   19804:	f04f 0320 	mov.w	r3, #32
   19808:	f3ef 8511 	mrs	r5, BASEPRI
   1980c:	f383 8812 	msr	BASEPRI_MAX, r3
   19810:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19814:	4817      	ldr	r0, [pc, #92]	; (19874 <clock_settime+0xdc>)
   19816:	f00c fc6d 	bl	260f4 <z_spin_lock_valid>
   1981a:	b940      	cbnz	r0, 1982e <clock_settime+0x96>
   1981c:	4916      	ldr	r1, [pc, #88]	; (19878 <clock_settime+0xe0>)
   1981e:	4817      	ldr	r0, [pc, #92]	; (1987c <clock_settime+0xe4>)
   19820:	2281      	movs	r2, #129	; 0x81
   19822:	f011 f83f 	bl	2a8a4 <printk>
   19826:	2181      	movs	r1, #129	; 0x81
   19828:	4813      	ldr	r0, [pc, #76]	; (19878 <clock_settime+0xe0>)
   1982a:	f011 f9d4 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1982e:	4811      	ldr	r0, [pc, #68]	; (19874 <clock_settime+0xdc>)
   19830:	f00c fc7c 	bl	2612c <z_spin_lock_set_owner>
	rt_clock_base = base;
   19834:	4b12      	ldr	r3, [pc, #72]	; (19880 <clock_settime+0xe8>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19836:	480f      	ldr	r0, [pc, #60]	; (19874 <clock_settime+0xdc>)
   19838:	e9c3 7600 	strd	r7, r6, [r3]
   1983c:	609c      	str	r4, [r3, #8]
   1983e:	f00c fc67 	bl	26110 <z_spin_unlock_valid>
   19842:	b940      	cbnz	r0, 19856 <clock_settime+0xbe>
   19844:	490c      	ldr	r1, [pc, #48]	; (19878 <clock_settime+0xe0>)
   19846:	480d      	ldr	r0, [pc, #52]	; (1987c <clock_settime+0xe4>)
   19848:	22ac      	movs	r2, #172	; 0xac
   1984a:	f011 f82b 	bl	2a8a4 <printk>
   1984e:	21ac      	movs	r1, #172	; 0xac
   19850:	4809      	ldr	r0, [pc, #36]	; (19878 <clock_settime+0xe0>)
   19852:	f011 f9c0 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   19856:	f385 8811 	msr	BASEPRI, r5
   1985a:	f3bf 8f6f 	isb	sy
	return 0;
   1985e:	2000      	movs	r0, #0
   19860:	e7a4      	b.n	197ac <clock_settime+0x14>
   19862:	bf00      	nop
   19864:	f3af 8000 	nop.w
   19868:	3b9aca00 	.word	0x3b9aca00
   1986c:	00000000 	.word	0x00000000
   19870:	3b9aca00 	.word	0x3b9aca00
   19874:	2000cebc 	.word	0x2000cebc
   19878:	0002e5ae 	.word	0x0002e5ae
   1987c:	0002e574 	.word	0x0002e574
   19880:	2000cac0 	.word	0x2000cac0
   19884:	00000000 	.word	0x00000000

00019888 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19888:	2300      	movs	r3, #0
{
   1988a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1988c:	b087      	sub	sp, #28
	struct at_param_list resp_list = {0};
   1988e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   19892:	2304      	movs	r3, #4
{
   19894:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19896:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19898:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1989a:	2800      	cmp	r0, #0
   1989c:	f000 80a6 	beq.w	199ec <parse_edrx+0x164>
   198a0:	2900      	cmp	r1, #0
   198a2:	f000 80a3 	beq.w	199ec <parse_edrx+0x164>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   198a6:	2106      	movs	r1, #6
   198a8:	a804      	add	r0, sp, #16
   198aa:	f011 fe39 	bl	2b520 <at_params_list_init>
	if (err) {
   198ae:	4604      	mov	r4, r0
   198b0:	b138      	cbz	r0, 198c2 <parse_edrx+0x3a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   198b2:	4602      	mov	r2, r0
   198b4:	2145      	movs	r1, #69	; 0x45
   198b6:	4852      	ldr	r0, [pc, #328]	; (19a00 <parse_edrx+0x178>)
   198b8:	f011 f9b3 	bl	2ac22 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   198bc:	4620      	mov	r0, r4
   198be:	b007      	add	sp, #28
   198c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   198c2:	4601      	mov	r1, r0
   198c4:	aa04      	add	r2, sp, #16
   198c6:	4630      	mov	r0, r6
   198c8:	f011 fe27 	bl	2b51a <at_parser_params_from_str>
	if (err) {
   198cc:	4604      	mov	r4, r0
   198ce:	b140      	cbz	r0, 198e2 <parse_edrx+0x5a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   198d0:	2145      	movs	r1, #69	; 0x45
   198d2:	4602      	mov	r2, r0
   198d4:	484b      	ldr	r0, [pc, #300]	; (19a04 <parse_edrx+0x17c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   198d6:	f011 f9a4 	bl	2ac22 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   198da:	a804      	add	r0, sp, #16
   198dc:	f011 fe33 	bl	2b546 <at_params_list_free>
	return err;
   198e0:	e7ec      	b.n	198bc <parse_edrx+0x34>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   198e2:	2103      	movs	r1, #3
   198e4:	ab01      	add	r3, sp, #4
   198e6:	aa02      	add	r2, sp, #8
   198e8:	a804      	add	r0, sp, #16
   198ea:	f011 ff27 	bl	2b73c <at_params_string_get>
	if (err) {
   198ee:	4604      	mov	r4, r0
   198f0:	b118      	cbz	r0, 198fa <parse_edrx+0x72>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   198f2:	4602      	mov	r2, r0
   198f4:	2145      	movs	r1, #69	; 0x45
   198f6:	4844      	ldr	r0, [pc, #272]	; (19a08 <parse_edrx+0x180>)
   198f8:	e7ed      	b.n	198d6 <parse_edrx+0x4e>
	tmp_buf[len] = '\0';
   198fa:	9b01      	ldr	r3, [sp, #4]
   198fc:	aa06      	add	r2, sp, #24
   198fe:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   19900:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   19902:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   19906:	2202      	movs	r2, #2
   19908:	a802      	add	r0, sp, #8
   1990a:	f010 f865 	bl	299d8 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1990e:	466a      	mov	r2, sp
	idx = strtoul(tmp_buf, NULL, 2);
   19910:	4606      	mov	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   19912:	2101      	movs	r1, #1
   19914:	a804      	add	r0, sp, #16
   19916:	f011 feda 	bl	2b6ce <at_params_int_get>
	if (err) {
   1991a:	4604      	mov	r4, r0
   1991c:	b118      	cbz	r0, 19926 <parse_edrx+0x9e>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1991e:	4602      	mov	r2, r0
   19920:	2145      	movs	r1, #69	; 0x45
   19922:	483a      	ldr	r0, [pc, #232]	; (19a0c <parse_edrx+0x184>)
   19924:	e7d7      	b.n	198d6 <parse_edrx+0x4e>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19926:	9b00      	ldr	r3, [sp, #0]
   19928:	2b04      	cmp	r3, #4
   1992a:	d01b      	beq.n	19964 <parse_edrx+0xdc>
   1992c:	2b05      	cmp	r3, #5
   1992e:	d007      	beq.n	19940 <parse_edrx+0xb8>
   19930:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   19932:	2157      	movs	r1, #87	; 0x57
   19934:	4836      	ldr	r0, [pc, #216]	; (19a10 <parse_edrx+0x188>)
   19936:	f011 f974 	bl	2ac22 <z_log_minimal_printk>
		return -ENOTCONN;
   1993a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1993e:	e7cc      	b.n	198da <parse_edrx+0x52>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19940:	2309      	movs	r3, #9
		*ptw_multiplier = 2.56;
   19942:	4f34      	ldr	r7, [pc, #208]	; (19a14 <parse_edrx+0x18c>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19944:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19946:	1d2a      	adds	r2, r5, #4
   19948:	d030      	beq.n	199ac <parse_edrx+0x124>
   1994a:	b2f0      	uxtb	r0, r6
   1994c:	280f      	cmp	r0, #15
   1994e:	d82d      	bhi.n	199ac <parse_edrx+0x124>
	switch (lte_mode) {
   19950:	2b07      	cmp	r3, #7
   19952:	d00b      	beq.n	1996c <parse_edrx+0xe4>
   19954:	2b09      	cmp	r3, #9
   19956:	d025      	beq.n	199a4 <parse_edrx+0x11c>
   19958:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1995c:	4622      	mov	r2, r4
   1995e:	2145      	movs	r1, #69	; 0x45
   19960:	482d      	ldr	r0, [pc, #180]	; (19a18 <parse_edrx+0x190>)
   19962:	e7b8      	b.n	198d6 <parse_edrx+0x4e>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19964:	2307      	movs	r3, #7
		*ptw_multiplier = 1.28;
   19966:	4f2d      	ldr	r7, [pc, #180]	; (19a1c <parse_edrx+0x194>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19968:	702b      	strb	r3, [r5, #0]
	if (err) {
   1996a:	e7ec      	b.n	19946 <parse_edrx+0xbe>
		multiplier = edrx_lookup_ltem[idx];
   1996c:	4b2c      	ldr	r3, [pc, #176]	; (19a20 <parse_edrx+0x198>)
		multiplier = edrx_lookup_nbiot[idx];
   1996e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19972:	b1c8      	cbz	r0, 199a8 <parse_edrx+0x120>
   19974:	f7fe ff6a 	bl	1884c <__aeabi_i2d>
   19978:	a31f      	add	r3, pc, #124	; (adr r3, 199f8 <parse_edrx+0x170>)
   1997a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1997e:	f7fe ffcf 	bl	18920 <__aeabi_dmul>
   19982:	f7ff f9df 	bl	18d44 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   19986:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19988:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1998a:	eb0d 0301 	add.w	r3, sp, r1
   1998e:	aa02      	add	r2, sp, #8
   19990:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   19992:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19994:	f011 fed2 	bl	2b73c <at_params_string_get>
	if (err) {
   19998:	4604      	mov	r4, r0
   1999a:	b150      	cbz	r0, 199b2 <parse_edrx+0x12a>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1999c:	4602      	mov	r2, r0
   1999e:	2145      	movs	r1, #69	; 0x45
   199a0:	4820      	ldr	r0, [pc, #128]	; (19a24 <parse_edrx+0x19c>)
   199a2:	e798      	b.n	198d6 <parse_edrx+0x4e>
		multiplier = edrx_lookup_nbiot[idx];
   199a4:	4b20      	ldr	r3, [pc, #128]	; (19a28 <parse_edrx+0x1a0>)
   199a6:	e7e2      	b.n	1996e <parse_edrx+0xe6>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   199a8:	4820      	ldr	r0, [pc, #128]	; (19a2c <parse_edrx+0x1a4>)
   199aa:	e7ec      	b.n	19986 <parse_edrx+0xfe>
		return -EINVAL;
   199ac:	f06f 0415 	mvn.w	r4, #21
   199b0:	e7d4      	b.n	1995c <parse_edrx+0xd4>
	tmp_buf[len] = '\0';
   199b2:	9b01      	ldr	r3, [sp, #4]
   199b4:	aa06      	add	r2, sp, #24
   199b6:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   199b8:	4601      	mov	r1, r0
   199ba:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   199bc:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   199c0:	a802      	add	r0, sp, #8
   199c2:	f010 f809 	bl	299d8 <strtoul>
	if (idx > 15) {
   199c6:	b2c2      	uxtb	r2, r0
   199c8:	2a0f      	cmp	r2, #15
   199ca:	d906      	bls.n	199da <parse_edrx+0x152>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   199cc:	2145      	movs	r1, #69	; 0x45
   199ce:	4818      	ldr	r0, [pc, #96]	; (19a30 <parse_edrx+0x1a8>)
   199d0:	f011 f927 	bl	2ac22 <z_log_minimal_printk>
		err = -EINVAL;
   199d4:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   199d8:	e77f      	b.n	198da <parse_edrx+0x52>
	idx += 1;
   199da:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   199dc:	b2c0      	uxtb	r0, r0
   199de:	f7ff fabb 	bl	18f58 <__aeabi_i2f>
   199e2:	4639      	mov	r1, r7
   199e4:	f7fe fd2c 	bl	18440 <__aeabi_fmul>
   199e8:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   199ea:	e776      	b.n	198da <parse_edrx+0x52>
		return -EINVAL;
   199ec:	f06f 0415 	mvn.w	r4, #21
   199f0:	e764      	b.n	198bc <parse_edrx+0x34>
   199f2:	bf00      	nop
   199f4:	f3af 8000 	nop.w
   199f8:	47ae147b 	.word	0x47ae147b
   199fc:	40247ae1 	.word	0x40247ae1
   19a00:	0002fd3d 	.word	0x0002fd3d
   19a04:	0002fd6b 	.word	0x0002fd6b
   19a08:	0002fd9c 	.word	0x0002fd9c
   19a0c:	0002fdcd 	.word	0x0002fdcd
   19a10:	0002fdf4 	.word	0x0002fdf4
   19a14:	4023d70a 	.word	0x4023d70a
   19a18:	0002fe21 	.word	0x0002fe21
   19a1c:	3fa3d70a 	.word	0x3fa3d70a
   19a20:	0002e24c 	.word	0x0002e24c
   19a24:	0002fe4a 	.word	0x0002fe4a
   19a28:	0002e26c 	.word	0x0002e26c
   19a2c:	40a3d70a 	.word	0x40a3d70a
   19a30:	0002fe7a 	.word	0x0002fe7a
   19a34:	00000000 	.word	0x00000000

00019a38 <_dtoa_r>:
   19a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a3c:	4616      	mov	r6, r2
   19a3e:	b099      	sub	sp, #100	; 0x64
   19a40:	461f      	mov	r7, r3
   19a42:	6a44      	ldr	r4, [r0, #36]	; 0x24
   19a44:	4605      	mov	r5, r0
   19a46:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   19a4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19a4e:	b93c      	cbnz	r4, 19a60 <_dtoa_r+0x28>
   19a50:	2010      	movs	r0, #16
   19a52:	f00f f9e3 	bl	28e1c <malloc>
   19a56:	6268      	str	r0, [r5, #36]	; 0x24
   19a58:	6004      	str	r4, [r0, #0]
   19a5a:	60c4      	str	r4, [r0, #12]
   19a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   19a60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19a62:	6819      	ldr	r1, [r3, #0]
   19a64:	b151      	cbz	r1, 19a7c <_dtoa_r+0x44>
   19a66:	685a      	ldr	r2, [r3, #4]
   19a68:	2301      	movs	r3, #1
   19a6a:	4628      	mov	r0, r5
   19a6c:	4093      	lsls	r3, r2
   19a6e:	604a      	str	r2, [r1, #4]
   19a70:	608b      	str	r3, [r1, #8]
   19a72:	f013 fb2b 	bl	2d0cc <_Bfree>
   19a76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19a78:	2200      	movs	r2, #0
   19a7a:	601a      	str	r2, [r3, #0]
   19a7c:	1e3b      	subs	r3, r7, #0
   19a7e:	bfb7      	itett	lt
   19a80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   19a84:	2300      	movge	r3, #0
   19a86:	2201      	movlt	r2, #1
   19a88:	9305      	strlt	r3, [sp, #20]
   19a8a:	bfa8      	it	ge
   19a8c:	f8c8 3000 	strge.w	r3, [r8]
   19a90:	f8dd 9014 	ldr.w	r9, [sp, #20]
   19a94:	4bac      	ldr	r3, [pc, #688]	; (19d48 <_dtoa_r+0x310>)
   19a96:	bfb8      	it	lt
   19a98:	f8c8 2000 	strlt.w	r2, [r8]
   19a9c:	ea33 0309 	bics.w	r3, r3, r9
   19aa0:	d119      	bne.n	19ad6 <_dtoa_r+0x9e>
   19aa2:	f242 730f 	movw	r3, #9999	; 0x270f
   19aa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19aa8:	6013      	str	r3, [r2, #0]
   19aaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   19aae:	4333      	orrs	r3, r6
   19ab0:	f000 856a 	beq.w	1a588 <_dtoa_r+0xb50>
   19ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19ab6:	b953      	cbnz	r3, 19ace <_dtoa_r+0x96>
   19ab8:	4ba4      	ldr	r3, [pc, #656]	; (19d4c <_dtoa_r+0x314>)
   19aba:	e023      	b.n	19b04 <_dtoa_r+0xcc>
   19abc:	4ba4      	ldr	r3, [pc, #656]	; (19d50 <_dtoa_r+0x318>)
   19abe:	9303      	str	r3, [sp, #12]
   19ac0:	3308      	adds	r3, #8
   19ac2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19ac4:	6013      	str	r3, [r2, #0]
   19ac6:	9803      	ldr	r0, [sp, #12]
   19ac8:	b019      	add	sp, #100	; 0x64
   19aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ace:	4b9f      	ldr	r3, [pc, #636]	; (19d4c <_dtoa_r+0x314>)
   19ad0:	9303      	str	r3, [sp, #12]
   19ad2:	3303      	adds	r3, #3
   19ad4:	e7f5      	b.n	19ac2 <_dtoa_r+0x8a>
   19ad6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   19ada:	2200      	movs	r2, #0
   19adc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   19ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19ae4:	2300      	movs	r3, #0
   19ae6:	f7ff fcaf 	bl	19448 <__aeabi_dcmpeq>
   19aea:	4680      	mov	r8, r0
   19aec:	b160      	cbz	r0, 19b08 <_dtoa_r+0xd0>
   19aee:	2301      	movs	r3, #1
   19af0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   19af2:	6013      	str	r3, [r2, #0]
   19af4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19af6:	2b00      	cmp	r3, #0
   19af8:	f000 8543 	beq.w	1a582 <_dtoa_r+0xb4a>
   19afc:	4b95      	ldr	r3, [pc, #596]	; (19d54 <_dtoa_r+0x31c>)
   19afe:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19b00:	6013      	str	r3, [r2, #0]
   19b02:	3b01      	subs	r3, #1
   19b04:	9303      	str	r3, [sp, #12]
   19b06:	e7de      	b.n	19ac6 <_dtoa_r+0x8e>
   19b08:	ab16      	add	r3, sp, #88	; 0x58
   19b0a:	f3c9 540a 	ubfx	r4, r9, #20, #11
   19b0e:	4628      	mov	r0, r5
   19b10:	9301      	str	r3, [sp, #4]
   19b12:	ab17      	add	r3, sp, #92	; 0x5c
   19b14:	9300      	str	r3, [sp, #0]
   19b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   19b1a:	f013 fd16 	bl	2d54a <__d2b>
   19b1e:	4683      	mov	fp, r0
   19b20:	2c00      	cmp	r4, #0
   19b22:	d07c      	beq.n	19c1e <_dtoa_r+0x1e6>
   19b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19b26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   19b2a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   19b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   19b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19b36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   19b3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   19b3e:	2200      	movs	r2, #0
   19b40:	4b85      	ldr	r3, [pc, #532]	; (19d58 <_dtoa_r+0x320>)
   19b42:	f7fe fd35 	bl	185b0 <__aeabi_dsub>
   19b46:	a37a      	add	r3, pc, #488	; (adr r3, 19d30 <_dtoa_r+0x2f8>)
   19b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b4c:	f7fe fee8 	bl	18920 <__aeabi_dmul>
   19b50:	a379      	add	r3, pc, #484	; (adr r3, 19d38 <_dtoa_r+0x300>)
   19b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b56:	f7fe fd2d 	bl	185b4 <__adddf3>
   19b5a:	4606      	mov	r6, r0
   19b5c:	460f      	mov	r7, r1
   19b5e:	4620      	mov	r0, r4
   19b60:	f7fe fe74 	bl	1884c <__aeabi_i2d>
   19b64:	a376      	add	r3, pc, #472	; (adr r3, 19d40 <_dtoa_r+0x308>)
   19b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   19b6a:	f7fe fed9 	bl	18920 <__aeabi_dmul>
   19b6e:	4602      	mov	r2, r0
   19b70:	460b      	mov	r3, r1
   19b72:	4630      	mov	r0, r6
   19b74:	4639      	mov	r1, r7
   19b76:	f7fe fd1d 	bl	185b4 <__adddf3>
   19b7a:	4606      	mov	r6, r0
   19b7c:	460f      	mov	r7, r1
   19b7e:	f7ff fcab 	bl	194d8 <__aeabi_d2iz>
   19b82:	2200      	movs	r2, #0
   19b84:	4682      	mov	sl, r0
   19b86:	2300      	movs	r3, #0
   19b88:	4630      	mov	r0, r6
   19b8a:	4639      	mov	r1, r7
   19b8c:	f7ff fc66 	bl	1945c <__aeabi_dcmplt>
   19b90:	b148      	cbz	r0, 19ba6 <_dtoa_r+0x16e>
   19b92:	4650      	mov	r0, sl
   19b94:	f7fe fe5a 	bl	1884c <__aeabi_i2d>
   19b98:	4632      	mov	r2, r6
   19b9a:	463b      	mov	r3, r7
   19b9c:	f7ff fc54 	bl	19448 <__aeabi_dcmpeq>
   19ba0:	b908      	cbnz	r0, 19ba6 <_dtoa_r+0x16e>
   19ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
   19ba6:	f1ba 0f16 	cmp.w	sl, #22
   19baa:	d856      	bhi.n	19c5a <_dtoa_r+0x222>
   19bac:	4b6b      	ldr	r3, [pc, #428]	; (19d5c <_dtoa_r+0x324>)
   19bae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   19bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bba:	f7ff fc4f 	bl	1945c <__aeabi_dcmplt>
   19bbe:	2800      	cmp	r0, #0
   19bc0:	d04d      	beq.n	19c5e <_dtoa_r+0x226>
   19bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
   19bc6:	2300      	movs	r3, #0
   19bc8:	930f      	str	r3, [sp, #60]	; 0x3c
   19bca:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19bcc:	1b1c      	subs	r4, r3, r4
   19bce:	1e63      	subs	r3, r4, #1
   19bd0:	9309      	str	r3, [sp, #36]	; 0x24
   19bd2:	bf49      	itett	mi
   19bd4:	f1c4 0301 	rsbmi	r3, r4, #1
   19bd8:	2300      	movpl	r3, #0
   19bda:	9306      	strmi	r3, [sp, #24]
   19bdc:	2300      	movmi	r3, #0
   19bde:	bf54      	ite	pl
   19be0:	9306      	strpl	r3, [sp, #24]
   19be2:	9309      	strmi	r3, [sp, #36]	; 0x24
   19be4:	f1ba 0f00 	cmp.w	sl, #0
   19be8:	db3b      	blt.n	19c62 <_dtoa_r+0x22a>
   19bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19bec:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   19bf0:	4453      	add	r3, sl
   19bf2:	9309      	str	r3, [sp, #36]	; 0x24
   19bf4:	2300      	movs	r3, #0
   19bf6:	930a      	str	r3, [sp, #40]	; 0x28
   19bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19bfa:	2b09      	cmp	r3, #9
   19bfc:	f200 80b4 	bhi.w	19d68 <_dtoa_r+0x330>
   19c00:	2b05      	cmp	r3, #5
   19c02:	bfc5      	ittet	gt
   19c04:	3b04      	subgt	r3, #4
   19c06:	2400      	movgt	r4, #0
   19c08:	2401      	movle	r4, #1
   19c0a:	9322      	strgt	r3, [sp, #136]	; 0x88
   19c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19c0e:	3b02      	subs	r3, #2
   19c10:	2b03      	cmp	r3, #3
   19c12:	f200 80b5 	bhi.w	19d80 <_dtoa_r+0x348>
   19c16:	e8df f003 	tbb	[pc, r3]
   19c1a:	7d2e      	.short	0x7d2e
   19c1c:	a57b      	.short	0xa57b
   19c1e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   19c22:	441c      	add	r4, r3
   19c24:	f204 4332 	addw	r3, r4, #1074	; 0x432
   19c28:	2b20      	cmp	r3, #32
   19c2a:	bfc6      	itte	gt
   19c2c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   19c30:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   19c34:	f1c3 0320 	rsble	r3, r3, #32
   19c38:	f104 34ff 	add.w	r4, r4, #4294967295
   19c3c:	bfc5      	ittet	gt
   19c3e:	fa09 f303 	lslgt.w	r3, r9, r3
   19c42:	fa26 f000 	lsrgt.w	r0, r6, r0
   19c46:	fa06 f003 	lslle.w	r0, r6, r3
   19c4a:	4318      	orrgt	r0, r3
   19c4c:	f7fe fdee 	bl	1882c <__aeabi_ui2d>
   19c50:	2301      	movs	r3, #1
   19c52:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   19c56:	9313      	str	r3, [sp, #76]	; 0x4c
   19c58:	e771      	b.n	19b3e <_dtoa_r+0x106>
   19c5a:	2301      	movs	r3, #1
   19c5c:	e7b4      	b.n	19bc8 <_dtoa_r+0x190>
   19c5e:	900f      	str	r0, [sp, #60]	; 0x3c
   19c60:	e7b3      	b.n	19bca <_dtoa_r+0x192>
   19c62:	9b06      	ldr	r3, [sp, #24]
   19c64:	eba3 030a 	sub.w	r3, r3, sl
   19c68:	9306      	str	r3, [sp, #24]
   19c6a:	f1ca 0300 	rsb	r3, sl, #0
   19c6e:	930a      	str	r3, [sp, #40]	; 0x28
   19c70:	2300      	movs	r3, #0
   19c72:	930e      	str	r3, [sp, #56]	; 0x38
   19c74:	e7c0      	b.n	19bf8 <_dtoa_r+0x1c0>
   19c76:	2300      	movs	r3, #0
   19c78:	930b      	str	r3, [sp, #44]	; 0x2c
   19c7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19c7c:	2b00      	cmp	r3, #0
   19c7e:	f300 8082 	bgt.w	19d86 <_dtoa_r+0x34e>
   19c82:	f04f 0901 	mov.w	r9, #1
   19c86:	464b      	mov	r3, r9
   19c88:	f8cd 9020 	str.w	r9, [sp, #32]
   19c8c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   19c90:	2200      	movs	r2, #0
   19c92:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   19c94:	6072      	str	r2, [r6, #4]
   19c96:	2204      	movs	r2, #4
   19c98:	f102 0014 	add.w	r0, r2, #20
   19c9c:	6871      	ldr	r1, [r6, #4]
   19c9e:	4298      	cmp	r0, r3
   19ca0:	d977      	bls.n	19d92 <_dtoa_r+0x35a>
   19ca2:	4628      	mov	r0, r5
   19ca4:	f013 f9de 	bl	2d064 <_Balloc>
   19ca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19caa:	6030      	str	r0, [r6, #0]
   19cac:	681b      	ldr	r3, [r3, #0]
   19cae:	9303      	str	r3, [sp, #12]
   19cb0:	9b08      	ldr	r3, [sp, #32]
   19cb2:	2b0e      	cmp	r3, #14
   19cb4:	f200 80ee 	bhi.w	19e94 <_dtoa_r+0x45c>
   19cb8:	2c00      	cmp	r4, #0
   19cba:	f000 80eb 	beq.w	19e94 <_dtoa_r+0x45c>
   19cbe:	f1ba 0f00 	cmp.w	sl, #0
   19cc2:	dd7a      	ble.n	19dba <_dtoa_r+0x382>
   19cc4:	f00a 030f 	and.w	r3, sl, #15
   19cc8:	4a24      	ldr	r2, [pc, #144]	; (19d5c <_dtoa_r+0x324>)
   19cca:	f41a 7f80 	tst.w	sl, #256	; 0x100
   19cce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
   19cd6:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   19cda:	ea4f 142a 	mov.w	r4, sl, asr #4
   19cde:	d05c      	beq.n	19d9a <_dtoa_r+0x362>
   19ce0:	4b1f      	ldr	r3, [pc, #124]	; (19d60 <_dtoa_r+0x328>)
   19ce2:	f004 040f 	and.w	r4, r4, #15
   19ce6:	2703      	movs	r7, #3
   19ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   19cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19cf0:	f7fe ff40 	bl	18b74 <__aeabi_ddiv>
   19cf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19cf8:	4e19      	ldr	r6, [pc, #100]	; (19d60 <_dtoa_r+0x328>)
   19cfa:	2c00      	cmp	r4, #0
   19cfc:	d14f      	bne.n	19d9e <_dtoa_r+0x366>
   19cfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19d06:	f7fe ff35 	bl	18b74 <__aeabi_ddiv>
   19d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19d0e:	e06e      	b.n	19dee <_dtoa_r+0x3b6>
   19d10:	2301      	movs	r3, #1
   19d12:	e7b1      	b.n	19c78 <_dtoa_r+0x240>
   19d14:	2300      	movs	r3, #0
   19d16:	930b      	str	r3, [sp, #44]	; 0x2c
   19d18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19d1a:	eb0a 0903 	add.w	r9, sl, r3
   19d1e:	f109 0301 	add.w	r3, r9, #1
   19d22:	2b01      	cmp	r3, #1
   19d24:	9308      	str	r3, [sp, #32]
   19d26:	bfb8      	it	lt
   19d28:	2301      	movlt	r3, #1
   19d2a:	e7b1      	b.n	19c90 <_dtoa_r+0x258>
   19d2c:	f3af 8000 	nop.w
   19d30:	636f4361 	.word	0x636f4361
   19d34:	3fd287a7 	.word	0x3fd287a7
   19d38:	8b60c8b3 	.word	0x8b60c8b3
   19d3c:	3fc68a28 	.word	0x3fc68a28
   19d40:	509f79fb 	.word	0x509f79fb
   19d44:	3fd34413 	.word	0x3fd34413
   19d48:	7ff00000 	.word	0x7ff00000
   19d4c:	00030ec9 	.word	0x00030ec9
   19d50:	00030ec0 	.word	0x00030ec0
   19d54:	0002fcdd 	.word	0x0002fcdd
   19d58:	3ff80000 	.word	0x3ff80000
   19d5c:	0002dd80 	.word	0x0002dd80
   19d60:	0002dd58 	.word	0x0002dd58
   19d64:	2301      	movs	r3, #1
   19d66:	e7d6      	b.n	19d16 <_dtoa_r+0x2de>
   19d68:	2401      	movs	r4, #1
   19d6a:	2300      	movs	r3, #0
   19d6c:	940b      	str	r4, [sp, #44]	; 0x2c
   19d6e:	9322      	str	r3, [sp, #136]	; 0x88
   19d70:	f04f 39ff 	mov.w	r9, #4294967295
   19d74:	2200      	movs	r2, #0
   19d76:	2312      	movs	r3, #18
   19d78:	f8cd 9020 	str.w	r9, [sp, #32]
   19d7c:	9223      	str	r2, [sp, #140]	; 0x8c
   19d7e:	e787      	b.n	19c90 <_dtoa_r+0x258>
   19d80:	2301      	movs	r3, #1
   19d82:	930b      	str	r3, [sp, #44]	; 0x2c
   19d84:	e7f4      	b.n	19d70 <_dtoa_r+0x338>
   19d86:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   19d8a:	464b      	mov	r3, r9
   19d8c:	f8cd 9020 	str.w	r9, [sp, #32]
   19d90:	e77e      	b.n	19c90 <_dtoa_r+0x258>
   19d92:	3101      	adds	r1, #1
   19d94:	0052      	lsls	r2, r2, #1
   19d96:	6071      	str	r1, [r6, #4]
   19d98:	e77e      	b.n	19c98 <_dtoa_r+0x260>
   19d9a:	2702      	movs	r7, #2
   19d9c:	e7ac      	b.n	19cf8 <_dtoa_r+0x2c0>
   19d9e:	07e1      	lsls	r1, r4, #31
   19da0:	d508      	bpl.n	19db4 <_dtoa_r+0x37c>
   19da2:	3701      	adds	r7, #1
   19da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19da8:	e9d6 2300 	ldrd	r2, r3, [r6]
   19dac:	f7fe fdb8 	bl	18920 <__aeabi_dmul>
   19db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19db4:	1064      	asrs	r4, r4, #1
   19db6:	3608      	adds	r6, #8
   19db8:	e79f      	b.n	19cfa <_dtoa_r+0x2c2>
   19dba:	f000 80a5 	beq.w	19f08 <_dtoa_r+0x4d0>
   19dbe:	f1ca 0400 	rsb	r4, sl, #0
   19dc2:	4ba3      	ldr	r3, [pc, #652]	; (1a050 <_dtoa_r+0x618>)
   19dc4:	4ea3      	ldr	r6, [pc, #652]	; (1a054 <_dtoa_r+0x61c>)
   19dc6:	2702      	movs	r7, #2
   19dc8:	f004 020f 	and.w	r2, r4, #15
   19dcc:	1124      	asrs	r4, r4, #4
   19dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19dda:	f7fe fda1 	bl	18920 <__aeabi_dmul>
   19dde:	2300      	movs	r3, #0
   19de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19de4:	2c00      	cmp	r4, #0
   19de6:	f040 8084 	bne.w	19ef2 <_dtoa_r+0x4ba>
   19dea:	2b00      	cmp	r3, #0
   19dec:	d18d      	bne.n	19d0a <_dtoa_r+0x2d2>
   19dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19df0:	2b00      	cmp	r3, #0
   19df2:	f000 808b 	beq.w	19f0c <_dtoa_r+0x4d4>
   19df6:	2200      	movs	r2, #0
   19df8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   19dfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   19e00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19e04:	4b94      	ldr	r3, [pc, #592]	; (1a058 <_dtoa_r+0x620>)
   19e06:	f7ff fb29 	bl	1945c <__aeabi_dcmplt>
   19e0a:	2800      	cmp	r0, #0
   19e0c:	d07e      	beq.n	19f0c <_dtoa_r+0x4d4>
   19e0e:	9b08      	ldr	r3, [sp, #32]
   19e10:	2b00      	cmp	r3, #0
   19e12:	d07b      	beq.n	19f0c <_dtoa_r+0x4d4>
   19e14:	f1b9 0f00 	cmp.w	r9, #0
   19e18:	dd38      	ble.n	19e8c <_dtoa_r+0x454>
   19e1a:	f10a 38ff 	add.w	r8, sl, #4294967295
   19e1e:	3701      	adds	r7, #1
   19e20:	464c      	mov	r4, r9
   19e22:	2200      	movs	r2, #0
   19e24:	4b8d      	ldr	r3, [pc, #564]	; (1a05c <_dtoa_r+0x624>)
   19e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19e2a:	f7fe fd79 	bl	18920 <__aeabi_dmul>
   19e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19e32:	4638      	mov	r0, r7
   19e34:	f7fe fd0a 	bl	1884c <__aeabi_i2d>
   19e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19e3c:	f7fe fd70 	bl	18920 <__aeabi_dmul>
   19e40:	2200      	movs	r2, #0
   19e42:	4b87      	ldr	r3, [pc, #540]	; (1a060 <_dtoa_r+0x628>)
   19e44:	f7fe fbb6 	bl	185b4 <__adddf3>
   19e48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   19e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19e50:	9611      	str	r6, [sp, #68]	; 0x44
   19e52:	2c00      	cmp	r4, #0
   19e54:	d15d      	bne.n	19f12 <_dtoa_r+0x4da>
   19e56:	2200      	movs	r2, #0
   19e58:	4b82      	ldr	r3, [pc, #520]	; (1a064 <_dtoa_r+0x62c>)
   19e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19e5e:	f7fe fba7 	bl	185b0 <__aeabi_dsub>
   19e62:	4602      	mov	r2, r0
   19e64:	460b      	mov	r3, r1
   19e66:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19e6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19e6c:	4633      	mov	r3, r6
   19e6e:	f7ff fb13 	bl	19498 <__aeabi_dcmpgt>
   19e72:	2800      	cmp	r0, #0
   19e74:	f040 8294 	bne.w	1a3a0 <_dtoa_r+0x968>
   19e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19e7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   19e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19e82:	f7ff faeb 	bl	1945c <__aeabi_dcmplt>
   19e86:	2800      	cmp	r0, #0
   19e88:	f040 8288 	bne.w	1a39c <_dtoa_r+0x964>
   19e8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   19e90:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19e94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19e96:	2b00      	cmp	r3, #0
   19e98:	f2c0 814f 	blt.w	1a13a <_dtoa_r+0x702>
   19e9c:	f1ba 0f0e 	cmp.w	sl, #14
   19ea0:	f300 814b 	bgt.w	1a13a <_dtoa_r+0x702>
   19ea4:	4b6a      	ldr	r3, [pc, #424]	; (1a050 <_dtoa_r+0x618>)
   19ea6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   19eaa:	e9d3 3400 	ldrd	r3, r4, [r3]
   19eae:	e9cd 3406 	strd	r3, r4, [sp, #24]
   19eb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19eb4:	2b00      	cmp	r3, #0
   19eb6:	f280 80d9 	bge.w	1a06c <_dtoa_r+0x634>
   19eba:	9b08      	ldr	r3, [sp, #32]
   19ebc:	2b00      	cmp	r3, #0
   19ebe:	f300 80d5 	bgt.w	1a06c <_dtoa_r+0x634>
   19ec2:	f040 826a 	bne.w	1a39a <_dtoa_r+0x962>
   19ec6:	2200      	movs	r2, #0
   19ec8:	4b66      	ldr	r3, [pc, #408]	; (1a064 <_dtoa_r+0x62c>)
   19eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   19ece:	f7fe fd27 	bl	18920 <__aeabi_dmul>
   19ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19ed6:	f7ff fad5 	bl	19484 <__aeabi_dcmpge>
   19eda:	9c08      	ldr	r4, [sp, #32]
   19edc:	4626      	mov	r6, r4
   19ede:	2800      	cmp	r0, #0
   19ee0:	f040 8240 	bne.w	1a364 <_dtoa_r+0x92c>
   19ee4:	9f03      	ldr	r7, [sp, #12]
   19ee6:	2331      	movs	r3, #49	; 0x31
   19ee8:	f10a 0a01 	add.w	sl, sl, #1
   19eec:	f807 3b01 	strb.w	r3, [r7], #1
   19ef0:	e23c      	b.n	1a36c <_dtoa_r+0x934>
   19ef2:	07e2      	lsls	r2, r4, #31
   19ef4:	d505      	bpl.n	19f02 <_dtoa_r+0x4ca>
   19ef6:	3701      	adds	r7, #1
   19ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
   19efc:	f7fe fd10 	bl	18920 <__aeabi_dmul>
   19f00:	2301      	movs	r3, #1
   19f02:	1064      	asrs	r4, r4, #1
   19f04:	3608      	adds	r6, #8
   19f06:	e76d      	b.n	19de4 <_dtoa_r+0x3ac>
   19f08:	2702      	movs	r7, #2
   19f0a:	e770      	b.n	19dee <_dtoa_r+0x3b6>
   19f0c:	46d0      	mov	r8, sl
   19f0e:	9c08      	ldr	r4, [sp, #32]
   19f10:	e78f      	b.n	19e32 <_dtoa_r+0x3fa>
   19f12:	9903      	ldr	r1, [sp, #12]
   19f14:	4b4e      	ldr	r3, [pc, #312]	; (1a050 <_dtoa_r+0x618>)
   19f16:	4421      	add	r1, r4
   19f18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19f1c:	9112      	str	r1, [sp, #72]	; 0x48
   19f1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19f20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   19f24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   19f28:	2900      	cmp	r1, #0
   19f2a:	d046      	beq.n	19fba <_dtoa_r+0x582>
   19f2c:	2000      	movs	r0, #0
   19f2e:	494e      	ldr	r1, [pc, #312]	; (1a068 <_dtoa_r+0x630>)
   19f30:	f7fe fe20 	bl	18b74 <__aeabi_ddiv>
   19f34:	463b      	mov	r3, r7
   19f36:	4632      	mov	r2, r6
   19f38:	f7fe fb3a 	bl	185b0 <__aeabi_dsub>
   19f3c:	9f03      	ldr	r7, [sp, #12]
   19f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19f46:	f7ff fac7 	bl	194d8 <__aeabi_d2iz>
   19f4a:	4604      	mov	r4, r0
   19f4c:	f7fe fc7e 	bl	1884c <__aeabi_i2d>
   19f50:	4602      	mov	r2, r0
   19f52:	460b      	mov	r3, r1
   19f54:	3430      	adds	r4, #48	; 0x30
   19f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19f5a:	f7fe fb29 	bl	185b0 <__aeabi_dsub>
   19f5e:	4602      	mov	r2, r0
   19f60:	460b      	mov	r3, r1
   19f62:	f807 4b01 	strb.w	r4, [r7], #1
   19f66:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19f6e:	f7ff fa75 	bl	1945c <__aeabi_dcmplt>
   19f72:	2800      	cmp	r0, #0
   19f74:	d164      	bne.n	1a040 <_dtoa_r+0x608>
   19f76:	2000      	movs	r0, #0
   19f78:	4937      	ldr	r1, [pc, #220]	; (1a058 <_dtoa_r+0x620>)
   19f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19f7e:	f7fe fb17 	bl	185b0 <__aeabi_dsub>
   19f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19f86:	f7ff fa69 	bl	1945c <__aeabi_dcmplt>
   19f8a:	2800      	cmp	r0, #0
   19f8c:	f040 80b4 	bne.w	1a0f8 <_dtoa_r+0x6c0>
   19f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f92:	429f      	cmp	r7, r3
   19f94:	f43f af7a 	beq.w	19e8c <_dtoa_r+0x454>
   19f98:	2200      	movs	r2, #0
   19f9a:	4b30      	ldr	r3, [pc, #192]	; (1a05c <_dtoa_r+0x624>)
   19f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19fa0:	f7fe fcbe 	bl	18920 <__aeabi_dmul>
   19fa4:	2200      	movs	r2, #0
   19fa6:	4b2d      	ldr	r3, [pc, #180]	; (1a05c <_dtoa_r+0x624>)
   19fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19fb0:	f7fe fcb6 	bl	18920 <__aeabi_dmul>
   19fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19fb8:	e7c3      	b.n	19f42 <_dtoa_r+0x50a>
   19fba:	4630      	mov	r0, r6
   19fbc:	4639      	mov	r1, r7
   19fbe:	f7fe fcaf 	bl	18920 <__aeabi_dmul>
   19fc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19fc4:	9c03      	ldr	r4, [sp, #12]
   19fc6:	9314      	str	r3, [sp, #80]	; 0x50
   19fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19fd0:	f7ff fa82 	bl	194d8 <__aeabi_d2iz>
   19fd4:	9015      	str	r0, [sp, #84]	; 0x54
   19fd6:	f7fe fc39 	bl	1884c <__aeabi_i2d>
   19fda:	4602      	mov	r2, r0
   19fdc:	460b      	mov	r3, r1
   19fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19fe2:	f7fe fae5 	bl	185b0 <__aeabi_dsub>
   19fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19fe8:	4606      	mov	r6, r0
   19fea:	460f      	mov	r7, r1
   19fec:	3330      	adds	r3, #48	; 0x30
   19fee:	2200      	movs	r2, #0
   19ff0:	f804 3b01 	strb.w	r3, [r4], #1
   19ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19ff6:	429c      	cmp	r4, r3
   19ff8:	d124      	bne.n	1a044 <_dtoa_r+0x60c>
   19ffa:	4b1b      	ldr	r3, [pc, #108]	; (1a068 <_dtoa_r+0x630>)
   19ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1a000:	f7fe fad8 	bl	185b4 <__adddf3>
   1a004:	4602      	mov	r2, r0
   1a006:	460b      	mov	r3, r1
   1a008:	4630      	mov	r0, r6
   1a00a:	4639      	mov	r1, r7
   1a00c:	f7ff fa44 	bl	19498 <__aeabi_dcmpgt>
   1a010:	2800      	cmp	r0, #0
   1a012:	d170      	bne.n	1a0f6 <_dtoa_r+0x6be>
   1a014:	2000      	movs	r0, #0
   1a016:	4914      	ldr	r1, [pc, #80]	; (1a068 <_dtoa_r+0x630>)
   1a018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1a01c:	f7fe fac8 	bl	185b0 <__aeabi_dsub>
   1a020:	4602      	mov	r2, r0
   1a022:	460b      	mov	r3, r1
   1a024:	4630      	mov	r0, r6
   1a026:	4639      	mov	r1, r7
   1a028:	f7ff fa18 	bl	1945c <__aeabi_dcmplt>
   1a02c:	2800      	cmp	r0, #0
   1a02e:	f43f af2d 	beq.w	19e8c <_dtoa_r+0x454>
   1a032:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1a034:	1e7b      	subs	r3, r7, #1
   1a036:	9314      	str	r3, [sp, #80]	; 0x50
   1a038:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   1a03c:	2b30      	cmp	r3, #48	; 0x30
   1a03e:	d0f8      	beq.n	1a032 <_dtoa_r+0x5fa>
   1a040:	46c2      	mov	sl, r8
   1a042:	e048      	b.n	1a0d6 <_dtoa_r+0x69e>
   1a044:	4b05      	ldr	r3, [pc, #20]	; (1a05c <_dtoa_r+0x624>)
   1a046:	f7fe fc6b 	bl	18920 <__aeabi_dmul>
   1a04a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1a04e:	e7bd      	b.n	19fcc <_dtoa_r+0x594>
   1a050:	0002dd80 	.word	0x0002dd80
   1a054:	0002dd58 	.word	0x0002dd58
   1a058:	3ff00000 	.word	0x3ff00000
   1a05c:	40240000 	.word	0x40240000
   1a060:	401c0000 	.word	0x401c0000
   1a064:	40140000 	.word	0x40140000
   1a068:	3fe00000 	.word	0x3fe00000
   1a06c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   1a070:	9f03      	ldr	r7, [sp, #12]
   1a072:	4640      	mov	r0, r8
   1a074:	4649      	mov	r1, r9
   1a076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a07a:	f7fe fd7b 	bl	18b74 <__aeabi_ddiv>
   1a07e:	f7ff fa2b 	bl	194d8 <__aeabi_d2iz>
   1a082:	4604      	mov	r4, r0
   1a084:	f7fe fbe2 	bl	1884c <__aeabi_i2d>
   1a088:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1a08c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a090:	f7fe fc46 	bl	18920 <__aeabi_dmul>
   1a094:	460b      	mov	r3, r1
   1a096:	4602      	mov	r2, r0
   1a098:	4649      	mov	r1, r9
   1a09a:	4640      	mov	r0, r8
   1a09c:	f7fe fa88 	bl	185b0 <__aeabi_dsub>
   1a0a0:	f807 6b01 	strb.w	r6, [r7], #1
   1a0a4:	9e03      	ldr	r6, [sp, #12]
   1a0a6:	9b08      	ldr	r3, [sp, #32]
   1a0a8:	1bbe      	subs	r6, r7, r6
   1a0aa:	42b3      	cmp	r3, r6
   1a0ac:	d138      	bne.n	1a120 <_dtoa_r+0x6e8>
   1a0ae:	4602      	mov	r2, r0
   1a0b0:	460b      	mov	r3, r1
   1a0b2:	f7fe fa7f 	bl	185b4 <__adddf3>
   1a0b6:	4680      	mov	r8, r0
   1a0b8:	4689      	mov	r9, r1
   1a0ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a0be:	f7ff f9eb 	bl	19498 <__aeabi_dcmpgt>
   1a0c2:	bb58      	cbnz	r0, 1a11c <_dtoa_r+0x6e4>
   1a0c4:	4640      	mov	r0, r8
   1a0c6:	4649      	mov	r1, r9
   1a0c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a0cc:	f7ff f9bc 	bl	19448 <__aeabi_dcmpeq>
   1a0d0:	b108      	cbz	r0, 1a0d6 <_dtoa_r+0x69e>
   1a0d2:	07e1      	lsls	r1, r4, #31
   1a0d4:	d422      	bmi.n	1a11c <_dtoa_r+0x6e4>
   1a0d6:	4628      	mov	r0, r5
   1a0d8:	4659      	mov	r1, fp
   1a0da:	f012 fff7 	bl	2d0cc <_Bfree>
   1a0de:	2300      	movs	r3, #0
   1a0e0:	f10a 0001 	add.w	r0, sl, #1
   1a0e4:	703b      	strb	r3, [r7, #0]
   1a0e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1a0e8:	6018      	str	r0, [r3, #0]
   1a0ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a0ec:	2b00      	cmp	r3, #0
   1a0ee:	f43f acea 	beq.w	19ac6 <_dtoa_r+0x8e>
   1a0f2:	601f      	str	r7, [r3, #0]
   1a0f4:	e4e7      	b.n	19ac6 <_dtoa_r+0x8e>
   1a0f6:	4627      	mov	r7, r4
   1a0f8:	463b      	mov	r3, r7
   1a0fa:	461f      	mov	r7, r3
   1a0fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a100:	2a39      	cmp	r2, #57	; 0x39
   1a102:	d107      	bne.n	1a114 <_dtoa_r+0x6dc>
   1a104:	9a03      	ldr	r2, [sp, #12]
   1a106:	429a      	cmp	r2, r3
   1a108:	d1f7      	bne.n	1a0fa <_dtoa_r+0x6c2>
   1a10a:	2230      	movs	r2, #48	; 0x30
   1a10c:	9903      	ldr	r1, [sp, #12]
   1a10e:	f108 0801 	add.w	r8, r8, #1
   1a112:	700a      	strb	r2, [r1, #0]
   1a114:	781a      	ldrb	r2, [r3, #0]
   1a116:	3201      	adds	r2, #1
   1a118:	701a      	strb	r2, [r3, #0]
   1a11a:	e791      	b.n	1a040 <_dtoa_r+0x608>
   1a11c:	46d0      	mov	r8, sl
   1a11e:	e7eb      	b.n	1a0f8 <_dtoa_r+0x6c0>
   1a120:	2200      	movs	r2, #0
   1a122:	4ba1      	ldr	r3, [pc, #644]	; (1a3a8 <_dtoa_r+0x970>)
   1a124:	f7fe fbfc 	bl	18920 <__aeabi_dmul>
   1a128:	2200      	movs	r2, #0
   1a12a:	2300      	movs	r3, #0
   1a12c:	4680      	mov	r8, r0
   1a12e:	4689      	mov	r9, r1
   1a130:	f7ff f98a 	bl	19448 <__aeabi_dcmpeq>
   1a134:	2800      	cmp	r0, #0
   1a136:	d09c      	beq.n	1a072 <_dtoa_r+0x63a>
   1a138:	e7cd      	b.n	1a0d6 <_dtoa_r+0x69e>
   1a13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a13c:	2a00      	cmp	r2, #0
   1a13e:	f000 80cc 	beq.w	1a2da <_dtoa_r+0x8a2>
   1a142:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1a144:	2a01      	cmp	r2, #1
   1a146:	f300 80af 	bgt.w	1a2a8 <_dtoa_r+0x870>
   1a14a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a14c:	2a00      	cmp	r2, #0
   1a14e:	f000 80a7 	beq.w	1a2a0 <_dtoa_r+0x868>
   1a152:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1a156:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a158:	9f06      	ldr	r7, [sp, #24]
   1a15a:	9a06      	ldr	r2, [sp, #24]
   1a15c:	2101      	movs	r1, #1
   1a15e:	4628      	mov	r0, r5
   1a160:	441a      	add	r2, r3
   1a162:	9206      	str	r2, [sp, #24]
   1a164:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a166:	441a      	add	r2, r3
   1a168:	9209      	str	r2, [sp, #36]	; 0x24
   1a16a:	f013 f853 	bl	2d214 <__i2b>
   1a16e:	4606      	mov	r6, r0
   1a170:	2f00      	cmp	r7, #0
   1a172:	dd0c      	ble.n	1a18e <_dtoa_r+0x756>
   1a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a176:	2b00      	cmp	r3, #0
   1a178:	dd09      	ble.n	1a18e <_dtoa_r+0x756>
   1a17a:	42bb      	cmp	r3, r7
   1a17c:	9a06      	ldr	r2, [sp, #24]
   1a17e:	bfa8      	it	ge
   1a180:	463b      	movge	r3, r7
   1a182:	1ad2      	subs	r2, r2, r3
   1a184:	1aff      	subs	r7, r7, r3
   1a186:	9206      	str	r2, [sp, #24]
   1a188:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a18a:	1ad3      	subs	r3, r2, r3
   1a18c:	9309      	str	r3, [sp, #36]	; 0x24
   1a18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a190:	b1f3      	cbz	r3, 1a1d0 <_dtoa_r+0x798>
   1a192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a194:	2b00      	cmp	r3, #0
   1a196:	f000 80a4 	beq.w	1a2e2 <_dtoa_r+0x8aa>
   1a19a:	2c00      	cmp	r4, #0
   1a19c:	dd10      	ble.n	1a1c0 <_dtoa_r+0x788>
   1a19e:	4631      	mov	r1, r6
   1a1a0:	4622      	mov	r2, r4
   1a1a2:	4628      	mov	r0, r5
   1a1a4:	f00f fee6 	bl	29f74 <__pow5mult>
   1a1a8:	465a      	mov	r2, fp
   1a1aa:	4601      	mov	r1, r0
   1a1ac:	4606      	mov	r6, r0
   1a1ae:	4628      	mov	r0, r5
   1a1b0:	f013 f839 	bl	2d226 <__multiply>
   1a1b4:	4680      	mov	r8, r0
   1a1b6:	4659      	mov	r1, fp
   1a1b8:	4628      	mov	r0, r5
   1a1ba:	46c3      	mov	fp, r8
   1a1bc:	f012 ff86 	bl	2d0cc <_Bfree>
   1a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a1c2:	1b1a      	subs	r2, r3, r4
   1a1c4:	d004      	beq.n	1a1d0 <_dtoa_r+0x798>
   1a1c6:	4659      	mov	r1, fp
   1a1c8:	4628      	mov	r0, r5
   1a1ca:	f00f fed3 	bl	29f74 <__pow5mult>
   1a1ce:	4683      	mov	fp, r0
   1a1d0:	2101      	movs	r1, #1
   1a1d2:	4628      	mov	r0, r5
   1a1d4:	f013 f81e 	bl	2d214 <__i2b>
   1a1d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a1da:	4604      	mov	r4, r0
   1a1dc:	2b00      	cmp	r3, #0
   1a1de:	f340 8082 	ble.w	1a2e6 <_dtoa_r+0x8ae>
   1a1e2:	461a      	mov	r2, r3
   1a1e4:	4601      	mov	r1, r0
   1a1e6:	4628      	mov	r0, r5
   1a1e8:	f00f fec4 	bl	29f74 <__pow5mult>
   1a1ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a1ee:	4604      	mov	r4, r0
   1a1f0:	2b01      	cmp	r3, #1
   1a1f2:	dd7b      	ble.n	1a2ec <_dtoa_r+0x8b4>
   1a1f4:	f04f 0800 	mov.w	r8, #0
   1a1f8:	6923      	ldr	r3, [r4, #16]
   1a1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1a1fe:	6918      	ldr	r0, [r3, #16]
   1a200:	f012 ffba 	bl	2d178 <__hi0bits>
   1a204:	f1c0 0020 	rsb	r0, r0, #32
   1a208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a20a:	4418      	add	r0, r3
   1a20c:	f010 001f 	ands.w	r0, r0, #31
   1a210:	f000 808d 	beq.w	1a32e <_dtoa_r+0x8f6>
   1a214:	f1c0 0320 	rsb	r3, r0, #32
   1a218:	2b04      	cmp	r3, #4
   1a21a:	f340 8086 	ble.w	1a32a <_dtoa_r+0x8f2>
   1a21e:	f1c0 001c 	rsb	r0, r0, #28
   1a222:	9b06      	ldr	r3, [sp, #24]
   1a224:	4407      	add	r7, r0
   1a226:	4403      	add	r3, r0
   1a228:	9306      	str	r3, [sp, #24]
   1a22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a22c:	4403      	add	r3, r0
   1a22e:	9309      	str	r3, [sp, #36]	; 0x24
   1a230:	9b06      	ldr	r3, [sp, #24]
   1a232:	2b00      	cmp	r3, #0
   1a234:	dd05      	ble.n	1a242 <_dtoa_r+0x80a>
   1a236:	4659      	mov	r1, fp
   1a238:	461a      	mov	r2, r3
   1a23a:	4628      	mov	r0, r5
   1a23c:	f013 f88e 	bl	2d35c <__lshift>
   1a240:	4683      	mov	fp, r0
   1a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a244:	2b00      	cmp	r3, #0
   1a246:	dd05      	ble.n	1a254 <_dtoa_r+0x81c>
   1a248:	4621      	mov	r1, r4
   1a24a:	461a      	mov	r2, r3
   1a24c:	4628      	mov	r0, r5
   1a24e:	f013 f885 	bl	2d35c <__lshift>
   1a252:	4604      	mov	r4, r0
   1a254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a256:	2b00      	cmp	r3, #0
   1a258:	d06b      	beq.n	1a332 <_dtoa_r+0x8fa>
   1a25a:	4621      	mov	r1, r4
   1a25c:	4658      	mov	r0, fp
   1a25e:	f013 f8dc 	bl	2d41a <__mcmp>
   1a262:	2800      	cmp	r0, #0
   1a264:	da65      	bge.n	1a332 <_dtoa_r+0x8fa>
   1a266:	2300      	movs	r3, #0
   1a268:	4659      	mov	r1, fp
   1a26a:	220a      	movs	r2, #10
   1a26c:	4628      	mov	r0, r5
   1a26e:	f012 ff44 	bl	2d0fa <__multadd>
   1a272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a274:	f10a 3aff 	add.w	sl, sl, #4294967295
   1a278:	4683      	mov	fp, r0
   1a27a:	2b00      	cmp	r3, #0
   1a27c:	f000 818b 	beq.w	1a596 <_dtoa_r+0xb5e>
   1a280:	4631      	mov	r1, r6
   1a282:	2300      	movs	r3, #0
   1a284:	220a      	movs	r2, #10
   1a286:	4628      	mov	r0, r5
   1a288:	f012 ff37 	bl	2d0fa <__multadd>
   1a28c:	f1b9 0f00 	cmp.w	r9, #0
   1a290:	4606      	mov	r6, r0
   1a292:	f300 8091 	bgt.w	1a3b8 <_dtoa_r+0x980>
   1a296:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a298:	2b02      	cmp	r3, #2
   1a29a:	f340 808d 	ble.w	1a3b8 <_dtoa_r+0x980>
   1a29e:	e050      	b.n	1a342 <_dtoa_r+0x90a>
   1a2a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a2a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1a2a6:	e756      	b.n	1a156 <_dtoa_r+0x71e>
   1a2a8:	9b08      	ldr	r3, [sp, #32]
   1a2aa:	1e5c      	subs	r4, r3, #1
   1a2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a2ae:	42a3      	cmp	r3, r4
   1a2b0:	bfb7      	itett	lt
   1a2b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1a2b4:	1b1c      	subge	r4, r3, r4
   1a2b6:	940a      	strlt	r4, [sp, #40]	; 0x28
   1a2b8:	1ae2      	sublt	r2, r4, r3
   1a2ba:	bfbf      	itttt	lt
   1a2bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1a2be:	2400      	movlt	r4, #0
   1a2c0:	189b      	addlt	r3, r3, r2
   1a2c2:	930e      	strlt	r3, [sp, #56]	; 0x38
   1a2c4:	9b08      	ldr	r3, [sp, #32]
   1a2c6:	2b00      	cmp	r3, #0
   1a2c8:	bfbb      	ittet	lt
   1a2ca:	9b06      	ldrlt	r3, [sp, #24]
   1a2cc:	9a08      	ldrlt	r2, [sp, #32]
   1a2ce:	9f06      	ldrge	r7, [sp, #24]
   1a2d0:	1a9f      	sublt	r7, r3, r2
   1a2d2:	bfac      	ite	ge
   1a2d4:	9b08      	ldrge	r3, [sp, #32]
   1a2d6:	2300      	movlt	r3, #0
   1a2d8:	e73f      	b.n	1a15a <_dtoa_r+0x722>
   1a2da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a2dc:	9f06      	ldr	r7, [sp, #24]
   1a2de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a2e0:	e746      	b.n	1a170 <_dtoa_r+0x738>
   1a2e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a2e4:	e76f      	b.n	1a1c6 <_dtoa_r+0x78e>
   1a2e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a2e8:	2b01      	cmp	r3, #1
   1a2ea:	dc19      	bgt.n	1a320 <_dtoa_r+0x8e8>
   1a2ec:	9b04      	ldr	r3, [sp, #16]
   1a2ee:	b9bb      	cbnz	r3, 1a320 <_dtoa_r+0x8e8>
   1a2f0:	9b05      	ldr	r3, [sp, #20]
   1a2f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1a2f6:	b99b      	cbnz	r3, 1a320 <_dtoa_r+0x8e8>
   1a2f8:	9b05      	ldr	r3, [sp, #20]
   1a2fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a2fe:	0d1b      	lsrs	r3, r3, #20
   1a300:	051b      	lsls	r3, r3, #20
   1a302:	b183      	cbz	r3, 1a326 <_dtoa_r+0x8ee>
   1a304:	9b06      	ldr	r3, [sp, #24]
   1a306:	f04f 0801 	mov.w	r8, #1
   1a30a:	3301      	adds	r3, #1
   1a30c:	9306      	str	r3, [sp, #24]
   1a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a310:	3301      	adds	r3, #1
   1a312:	9309      	str	r3, [sp, #36]	; 0x24
   1a314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a316:	2b00      	cmp	r3, #0
   1a318:	f47f af6e 	bne.w	1a1f8 <_dtoa_r+0x7c0>
   1a31c:	2001      	movs	r0, #1
   1a31e:	e773      	b.n	1a208 <_dtoa_r+0x7d0>
   1a320:	f04f 0800 	mov.w	r8, #0
   1a324:	e7f6      	b.n	1a314 <_dtoa_r+0x8dc>
   1a326:	4698      	mov	r8, r3
   1a328:	e7f4      	b.n	1a314 <_dtoa_r+0x8dc>
   1a32a:	d081      	beq.n	1a230 <_dtoa_r+0x7f8>
   1a32c:	4618      	mov	r0, r3
   1a32e:	301c      	adds	r0, #28
   1a330:	e777      	b.n	1a222 <_dtoa_r+0x7ea>
   1a332:	9b08      	ldr	r3, [sp, #32]
   1a334:	2b00      	cmp	r3, #0
   1a336:	dc39      	bgt.n	1a3ac <_dtoa_r+0x974>
   1a338:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a33a:	2b02      	cmp	r3, #2
   1a33c:	dd36      	ble.n	1a3ac <_dtoa_r+0x974>
   1a33e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1a342:	f1b9 0f00 	cmp.w	r9, #0
   1a346:	d10d      	bne.n	1a364 <_dtoa_r+0x92c>
   1a348:	4621      	mov	r1, r4
   1a34a:	464b      	mov	r3, r9
   1a34c:	2205      	movs	r2, #5
   1a34e:	4628      	mov	r0, r5
   1a350:	f012 fed3 	bl	2d0fa <__multadd>
   1a354:	4601      	mov	r1, r0
   1a356:	4604      	mov	r4, r0
   1a358:	4658      	mov	r0, fp
   1a35a:	f013 f85e 	bl	2d41a <__mcmp>
   1a35e:	2800      	cmp	r0, #0
   1a360:	f73f adc0 	bgt.w	19ee4 <_dtoa_r+0x4ac>
   1a364:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a366:	9f03      	ldr	r7, [sp, #12]
   1a368:	ea6f 0a03 	mvn.w	sl, r3
   1a36c:	f04f 0800 	mov.w	r8, #0
   1a370:	4621      	mov	r1, r4
   1a372:	4628      	mov	r0, r5
   1a374:	f012 feaa 	bl	2d0cc <_Bfree>
   1a378:	2e00      	cmp	r6, #0
   1a37a:	f43f aeac 	beq.w	1a0d6 <_dtoa_r+0x69e>
   1a37e:	f1b8 0f00 	cmp.w	r8, #0
   1a382:	d005      	beq.n	1a390 <_dtoa_r+0x958>
   1a384:	45b0      	cmp	r8, r6
   1a386:	d003      	beq.n	1a390 <_dtoa_r+0x958>
   1a388:	4641      	mov	r1, r8
   1a38a:	4628      	mov	r0, r5
   1a38c:	f012 fe9e 	bl	2d0cc <_Bfree>
   1a390:	4631      	mov	r1, r6
   1a392:	4628      	mov	r0, r5
   1a394:	f012 fe9a 	bl	2d0cc <_Bfree>
   1a398:	e69d      	b.n	1a0d6 <_dtoa_r+0x69e>
   1a39a:	2400      	movs	r4, #0
   1a39c:	4626      	mov	r6, r4
   1a39e:	e7e1      	b.n	1a364 <_dtoa_r+0x92c>
   1a3a0:	46c2      	mov	sl, r8
   1a3a2:	4626      	mov	r6, r4
   1a3a4:	e59e      	b.n	19ee4 <_dtoa_r+0x4ac>
   1a3a6:	bf00      	nop
   1a3a8:	40240000 	.word	0x40240000
   1a3ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a3ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	f000 80f6 	beq.w	1a5a4 <_dtoa_r+0xb6c>
   1a3b8:	2f00      	cmp	r7, #0
   1a3ba:	dd05      	ble.n	1a3c8 <_dtoa_r+0x990>
   1a3bc:	4631      	mov	r1, r6
   1a3be:	463a      	mov	r2, r7
   1a3c0:	4628      	mov	r0, r5
   1a3c2:	f012 ffcb 	bl	2d35c <__lshift>
   1a3c6:	4606      	mov	r6, r0
   1a3c8:	f1b8 0f00 	cmp.w	r8, #0
   1a3cc:	d055      	beq.n	1a47a <_dtoa_r+0xa42>
   1a3ce:	6871      	ldr	r1, [r6, #4]
   1a3d0:	4628      	mov	r0, r5
   1a3d2:	f012 fe47 	bl	2d064 <_Balloc>
   1a3d6:	6932      	ldr	r2, [r6, #16]
   1a3d8:	4607      	mov	r7, r0
   1a3da:	f106 010c 	add.w	r1, r6, #12
   1a3de:	3202      	adds	r2, #2
   1a3e0:	300c      	adds	r0, #12
   1a3e2:	0092      	lsls	r2, r2, #2
   1a3e4:	f012 fbf5 	bl	2cbd2 <memcpy>
   1a3e8:	2201      	movs	r2, #1
   1a3ea:	4639      	mov	r1, r7
   1a3ec:	4628      	mov	r0, r5
   1a3ee:	f012 ffb5 	bl	2d35c <__lshift>
   1a3f2:	9b03      	ldr	r3, [sp, #12]
   1a3f4:	46b0      	mov	r8, r6
   1a3f6:	4606      	mov	r6, r0
   1a3f8:	3301      	adds	r3, #1
   1a3fa:	9308      	str	r3, [sp, #32]
   1a3fc:	9b03      	ldr	r3, [sp, #12]
   1a3fe:	444b      	add	r3, r9
   1a400:	930a      	str	r3, [sp, #40]	; 0x28
   1a402:	9b04      	ldr	r3, [sp, #16]
   1a404:	f003 0301 	and.w	r3, r3, #1
   1a408:	9309      	str	r3, [sp, #36]	; 0x24
   1a40a:	9b08      	ldr	r3, [sp, #32]
   1a40c:	4621      	mov	r1, r4
   1a40e:	4658      	mov	r0, fp
   1a410:	3b01      	subs	r3, #1
   1a412:	9304      	str	r3, [sp, #16]
   1a414:	f012 fd90 	bl	2cf38 <quorem>
   1a418:	4603      	mov	r3, r0
   1a41a:	4641      	mov	r1, r8
   1a41c:	9006      	str	r0, [sp, #24]
   1a41e:	4658      	mov	r0, fp
   1a420:	3330      	adds	r3, #48	; 0x30
   1a422:	930b      	str	r3, [sp, #44]	; 0x2c
   1a424:	f012 fff9 	bl	2d41a <__mcmp>
   1a428:	4632      	mov	r2, r6
   1a42a:	4681      	mov	r9, r0
   1a42c:	4621      	mov	r1, r4
   1a42e:	4628      	mov	r0, r5
   1a430:	f013 f80e 	bl	2d450 <__mdiff>
   1a434:	68c2      	ldr	r2, [r0, #12]
   1a436:	4607      	mov	r7, r0
   1a438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a43a:	bb02      	cbnz	r2, 1a47e <_dtoa_r+0xa46>
   1a43c:	4601      	mov	r1, r0
   1a43e:	4658      	mov	r0, fp
   1a440:	f012 ffeb 	bl	2d41a <__mcmp>
   1a444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a446:	4602      	mov	r2, r0
   1a448:	4639      	mov	r1, r7
   1a44a:	4628      	mov	r0, r5
   1a44c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   1a450:	f012 fe3c 	bl	2d0cc <_Bfree>
   1a454:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a458:	9f08      	ldr	r7, [sp, #32]
   1a45a:	ea43 0102 	orr.w	r1, r3, r2
   1a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a460:	430b      	orrs	r3, r1
   1a462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a464:	d10d      	bne.n	1a482 <_dtoa_r+0xa4a>
   1a466:	2b39      	cmp	r3, #57	; 0x39
   1a468:	d029      	beq.n	1a4be <_dtoa_r+0xa86>
   1a46a:	f1b9 0f00 	cmp.w	r9, #0
   1a46e:	dd01      	ble.n	1a474 <_dtoa_r+0xa3c>
   1a470:	9b06      	ldr	r3, [sp, #24]
   1a472:	3331      	adds	r3, #49	; 0x31
   1a474:	9a04      	ldr	r2, [sp, #16]
   1a476:	7013      	strb	r3, [r2, #0]
   1a478:	e77a      	b.n	1a370 <_dtoa_r+0x938>
   1a47a:	4630      	mov	r0, r6
   1a47c:	e7b9      	b.n	1a3f2 <_dtoa_r+0x9ba>
   1a47e:	2201      	movs	r2, #1
   1a480:	e7e2      	b.n	1a448 <_dtoa_r+0xa10>
   1a482:	f1b9 0f00 	cmp.w	r9, #0
   1a486:	db06      	blt.n	1a496 <_dtoa_r+0xa5e>
   1a488:	9922      	ldr	r1, [sp, #136]	; 0x88
   1a48a:	ea41 0909 	orr.w	r9, r1, r9
   1a48e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a490:	ea59 0101 	orrs.w	r1, r9, r1
   1a494:	d120      	bne.n	1a4d8 <_dtoa_r+0xaa0>
   1a496:	2a00      	cmp	r2, #0
   1a498:	ddec      	ble.n	1a474 <_dtoa_r+0xa3c>
   1a49a:	4659      	mov	r1, fp
   1a49c:	2201      	movs	r2, #1
   1a49e:	4628      	mov	r0, r5
   1a4a0:	9308      	str	r3, [sp, #32]
   1a4a2:	f012 ff5b 	bl	2d35c <__lshift>
   1a4a6:	4621      	mov	r1, r4
   1a4a8:	4683      	mov	fp, r0
   1a4aa:	f012 ffb6 	bl	2d41a <__mcmp>
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	9b08      	ldr	r3, [sp, #32]
   1a4b2:	dc02      	bgt.n	1a4ba <_dtoa_r+0xa82>
   1a4b4:	d1de      	bne.n	1a474 <_dtoa_r+0xa3c>
   1a4b6:	07da      	lsls	r2, r3, #31
   1a4b8:	d5dc      	bpl.n	1a474 <_dtoa_r+0xa3c>
   1a4ba:	2b39      	cmp	r3, #57	; 0x39
   1a4bc:	d1d8      	bne.n	1a470 <_dtoa_r+0xa38>
   1a4be:	2339      	movs	r3, #57	; 0x39
   1a4c0:	9a04      	ldr	r2, [sp, #16]
   1a4c2:	7013      	strb	r3, [r2, #0]
   1a4c4:	463b      	mov	r3, r7
   1a4c6:	461f      	mov	r7, r3
   1a4c8:	3b01      	subs	r3, #1
   1a4ca:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   1a4ce:	2a39      	cmp	r2, #57	; 0x39
   1a4d0:	d050      	beq.n	1a574 <_dtoa_r+0xb3c>
   1a4d2:	3201      	adds	r2, #1
   1a4d4:	701a      	strb	r2, [r3, #0]
   1a4d6:	e74b      	b.n	1a370 <_dtoa_r+0x938>
   1a4d8:	2a00      	cmp	r2, #0
   1a4da:	dd03      	ble.n	1a4e4 <_dtoa_r+0xaac>
   1a4dc:	2b39      	cmp	r3, #57	; 0x39
   1a4de:	d0ee      	beq.n	1a4be <_dtoa_r+0xa86>
   1a4e0:	3301      	adds	r3, #1
   1a4e2:	e7c7      	b.n	1a474 <_dtoa_r+0xa3c>
   1a4e4:	9a08      	ldr	r2, [sp, #32]
   1a4e6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a4e8:	f802 3c01 	strb.w	r3, [r2, #-1]
   1a4ec:	428a      	cmp	r2, r1
   1a4ee:	d02a      	beq.n	1a546 <_dtoa_r+0xb0e>
   1a4f0:	4659      	mov	r1, fp
   1a4f2:	2300      	movs	r3, #0
   1a4f4:	220a      	movs	r2, #10
   1a4f6:	4628      	mov	r0, r5
   1a4f8:	f012 fdff 	bl	2d0fa <__multadd>
   1a4fc:	45b0      	cmp	r8, r6
   1a4fe:	4683      	mov	fp, r0
   1a500:	f04f 0300 	mov.w	r3, #0
   1a504:	f04f 020a 	mov.w	r2, #10
   1a508:	4641      	mov	r1, r8
   1a50a:	4628      	mov	r0, r5
   1a50c:	d107      	bne.n	1a51e <_dtoa_r+0xae6>
   1a50e:	f012 fdf4 	bl	2d0fa <__multadd>
   1a512:	4680      	mov	r8, r0
   1a514:	4606      	mov	r6, r0
   1a516:	9b08      	ldr	r3, [sp, #32]
   1a518:	3301      	adds	r3, #1
   1a51a:	9308      	str	r3, [sp, #32]
   1a51c:	e775      	b.n	1a40a <_dtoa_r+0x9d2>
   1a51e:	f012 fdec 	bl	2d0fa <__multadd>
   1a522:	4631      	mov	r1, r6
   1a524:	4680      	mov	r8, r0
   1a526:	2300      	movs	r3, #0
   1a528:	220a      	movs	r2, #10
   1a52a:	4628      	mov	r0, r5
   1a52c:	f012 fde5 	bl	2d0fa <__multadd>
   1a530:	4606      	mov	r6, r0
   1a532:	e7f0      	b.n	1a516 <_dtoa_r+0xade>
   1a534:	f1b9 0f00 	cmp.w	r9, #0
   1a538:	9a03      	ldr	r2, [sp, #12]
   1a53a:	f04f 0800 	mov.w	r8, #0
   1a53e:	bfcc      	ite	gt
   1a540:	464f      	movgt	r7, r9
   1a542:	2701      	movle	r7, #1
   1a544:	4417      	add	r7, r2
   1a546:	4659      	mov	r1, fp
   1a548:	2201      	movs	r2, #1
   1a54a:	4628      	mov	r0, r5
   1a54c:	9308      	str	r3, [sp, #32]
   1a54e:	f012 ff05 	bl	2d35c <__lshift>
   1a552:	4621      	mov	r1, r4
   1a554:	4683      	mov	fp, r0
   1a556:	f012 ff60 	bl	2d41a <__mcmp>
   1a55a:	2800      	cmp	r0, #0
   1a55c:	dcb2      	bgt.n	1a4c4 <_dtoa_r+0xa8c>
   1a55e:	d102      	bne.n	1a566 <_dtoa_r+0xb2e>
   1a560:	9b08      	ldr	r3, [sp, #32]
   1a562:	07db      	lsls	r3, r3, #31
   1a564:	d4ae      	bmi.n	1a4c4 <_dtoa_r+0xa8c>
   1a566:	463b      	mov	r3, r7
   1a568:	461f      	mov	r7, r3
   1a56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a56e:	2a30      	cmp	r2, #48	; 0x30
   1a570:	d0fa      	beq.n	1a568 <_dtoa_r+0xb30>
   1a572:	e6fd      	b.n	1a370 <_dtoa_r+0x938>
   1a574:	9a03      	ldr	r2, [sp, #12]
   1a576:	429a      	cmp	r2, r3
   1a578:	d1a5      	bne.n	1a4c6 <_dtoa_r+0xa8e>
   1a57a:	f10a 0a01 	add.w	sl, sl, #1
   1a57e:	2331      	movs	r3, #49	; 0x31
   1a580:	e779      	b.n	1a476 <_dtoa_r+0xa3e>
   1a582:	4b13      	ldr	r3, [pc, #76]	; (1a5d0 <_dtoa_r+0xb98>)
   1a584:	f7ff babe 	b.w	19b04 <_dtoa_r+0xcc>
   1a588:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a58a:	2b00      	cmp	r3, #0
   1a58c:	f47f aa96 	bne.w	19abc <_dtoa_r+0x84>
   1a590:	4b10      	ldr	r3, [pc, #64]	; (1a5d4 <_dtoa_r+0xb9c>)
   1a592:	f7ff bab7 	b.w	19b04 <_dtoa_r+0xcc>
   1a596:	f1b9 0f00 	cmp.w	r9, #0
   1a59a:	dc03      	bgt.n	1a5a4 <_dtoa_r+0xb6c>
   1a59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a59e:	2b02      	cmp	r3, #2
   1a5a0:	f73f aecf 	bgt.w	1a342 <_dtoa_r+0x90a>
   1a5a4:	9f03      	ldr	r7, [sp, #12]
   1a5a6:	4621      	mov	r1, r4
   1a5a8:	4658      	mov	r0, fp
   1a5aa:	f012 fcc5 	bl	2cf38 <quorem>
   1a5ae:	9a03      	ldr	r2, [sp, #12]
   1a5b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1a5b4:	f807 3b01 	strb.w	r3, [r7], #1
   1a5b8:	1aba      	subs	r2, r7, r2
   1a5ba:	4591      	cmp	r9, r2
   1a5bc:	ddba      	ble.n	1a534 <_dtoa_r+0xafc>
   1a5be:	4659      	mov	r1, fp
   1a5c0:	2300      	movs	r3, #0
   1a5c2:	220a      	movs	r2, #10
   1a5c4:	4628      	mov	r0, r5
   1a5c6:	f012 fd98 	bl	2d0fa <__multadd>
   1a5ca:	4683      	mov	fp, r0
   1a5cc:	e7eb      	b.n	1a5a6 <_dtoa_r+0xb6e>
   1a5ce:	bf00      	nop
   1a5d0:	0002fcdc 	.word	0x0002fcdc
   1a5d4:	00030ec0 	.word	0x00030ec0

0001a5d8 <lte_handler>:
	} while (err != 0);
	LOG_INF("Network time obtained");

}
static void lte_handler(const struct lte_lc_evt *const evt)
{
   1a5d8:	b510      	push	{r4, lr}
	switch (evt->type) {
   1a5da:	7803      	ldrb	r3, [r0, #0]
{
   1a5dc:	4604      	mov	r4, r0
	switch (evt->type) {
   1a5de:	b113      	cbz	r3, 1a5e6 <lte_handler+0xe>
   1a5e0:	2b04      	cmp	r3, #4
   1a5e2:	d016      	beq.n	1a612 <lte_handler+0x3a>
			evt->cell.id, evt->cell.tac);
		break;
	default:
		break;
	}
}
   1a5e4:	bd10      	pop	{r4, pc}
		LOG_DBG("LTE_LC_EVT_NW_REG_STATUS: %d", evt->nw_reg_status);
   1a5e6:	7a02      	ldrb	r2, [r0, #8]
   1a5e8:	2144      	movs	r1, #68	; 0x44
   1a5ea:	480e      	ldr	r0, [pc, #56]	; (1a624 <lte_handler+0x4c>)
   1a5ec:	f010 fb19 	bl	2ac22 <z_log_minimal_printk>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1a5f0:	7a23      	ldrb	r3, [r4, #8]
   1a5f2:	2b01      	cmp	r3, #1
   1a5f4:	d00b      	beq.n	1a60e <lte_handler+0x36>
   1a5f6:	2b05      	cmp	r3, #5
   1a5f8:	d1f4      	bne.n	1a5e4 <lte_handler+0xc>
		LOG_DBG("Network registration status: %s",
   1a5fa:	4a0b      	ldr	r2, [pc, #44]	; (1a628 <lte_handler+0x50>)
   1a5fc:	2144      	movs	r1, #68	; 0x44
   1a5fe:	480b      	ldr	r0, [pc, #44]	; (1a62c <lte_handler+0x54>)
   1a600:	f010 fb0f 	bl	2ac22 <z_log_minimal_printk>
}
   1a604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a608:	4809      	ldr	r0, [pc, #36]	; (1a630 <lte_handler+0x58>)
   1a60a:	f00c b817 	b.w	2663c <z_impl_k_sem_give>
		LOG_DBG("Network registration status: %s",
   1a60e:	4a09      	ldr	r2, [pc, #36]	; (1a634 <lte_handler+0x5c>)
   1a610:	e7f4      	b.n	1a5fc <lte_handler+0x24>
		LOG_DBG("LTE cell changed: Cell ID: %d, Tracking area: %d",
   1a612:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1a616:	2144      	movs	r1, #68	; 0x44
}
   1a618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_DBG("LTE cell changed: Cell ID: %d, Tracking area: %d",
   1a61c:	4806      	ldr	r0, [pc, #24]	; (1a638 <lte_handler+0x60>)
   1a61e:	f010 bb00 	b.w	2ac22 <z_log_minimal_printk>
   1a622:	bf00      	nop
   1a624:	0002e2b9 	.word	0x0002e2b9
   1a628:	0002e2a5 	.word	0x0002e2a5
   1a62c:	0002e2db 	.word	0x0002e2db
   1a630:	2000ca50 	.word	0x2000ca50
   1a634:	0002e28c 	.word	0x0002e28c
   1a638:	0002e300 	.word	0x0002e300

0001a63c <main>:

void main(void)
{
	int err;

	int64_t unix_time_ms=1;
   1a63c:	2201      	movs	r2, #1
   1a63e:	2300      	movs	r3, #0
{
   1a640:	b5f0      	push	{r4, r5, r6, r7, lr}
	// unix_time_ms=&err;
	

	LOG_INF("Get time app");
   1a642:	2149      	movs	r1, #73	; 0x49
{
   1a644:	b085      	sub	sp, #20
	LOG_INF("Get time app");
   1a646:	484d      	ldr	r0, [pc, #308]	; (1a77c <main+0x140>)
	int64_t unix_time_ms=1;
   1a648:	e9cd 2300 	strd	r2, r3, [sp]
	LOG_INF("Get time app");
   1a64c:	f010 fae9 	bl	2ac22 <z_log_minimal_printk>
	modem_lib_init_result = nrf_modem_lib_init(NORMAL_MODE);
   1a650:	2000      	movs	r0, #0
   1a652:	f003 ffb5 	bl	1e5c0 <nrf_modem_lib_init>
	if (modem_lib_init_result) {
   1a656:	4602      	mov	r2, r0
   1a658:	b9c0      	cbnz	r0, 1a68c <main+0x50>
	LOG_INF("Waiting for network...");
   1a65a:	2149      	movs	r1, #73	; 0x49
   1a65c:	4848      	ldr	r0, [pc, #288]	; (1a780 <main+0x144>)
   1a65e:	f010 fae0 	bl	2ac22 <z_log_minimal_printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   1a662:	4848      	ldr	r0, [pc, #288]	; (1a784 <main+0x148>)
   1a664:	f00c f88e 	bl	26784 <z_impl_k_sem_reset>
	err = lte_lc_init_and_connect_async(lte_handler);
   1a668:	4847      	ldr	r0, [pc, #284]	; (1a788 <main+0x14c>)
   1a66a:	f011 f8a5 	bl	2b7b8 <lte_lc_init_and_connect_async>
	if (err) {
   1a66e:	4604      	mov	r4, r0
   1a670:	b1d0      	cbz	r0, 1a6a8 <main+0x6c>
		LOG_ERR("Failed to init modem, error: %d", err);
   1a672:	4602      	mov	r2, r0
   1a674:	2145      	movs	r1, #69	; 0x45
   1a676:	4845      	ldr	r0, [pc, #276]	; (1a78c <main+0x150>)
   1a678:	f010 fad3 	bl	2ac22 <z_log_minimal_printk>
		LOG_ERR("Failed to connect to cellular network: %d", err);
   1a67c:	2145      	movs	r1, #69	; 0x45
   1a67e:	4844      	ldr	r0, [pc, #272]	; (1a790 <main+0x154>)
   1a680:	4622      	mov	r2, r4
   1a682:	f010 face 	bl	2ac22 <z_log_minimal_printk>
		LOG_ERR("Connection set-up failed.");
   1a686:	2145      	movs	r1, #69	; 0x45
   1a688:	4842      	ldr	r0, [pc, #264]	; (1a794 <main+0x158>)
   1a68a:	e005      	b.n	1a698 <main+0x5c>
		LOG_ERR("Failed to initialize modem library: 0x%X", modem_lib_init_result);
   1a68c:	2145      	movs	r1, #69	; 0x45
   1a68e:	4842      	ldr	r0, [pc, #264]	; (1a798 <main+0x15c>)
   1a690:	f010 fac7 	bl	2ac22 <z_log_minimal_printk>
		LOG_ERR("Initialization failed.");
   1a694:	2145      	movs	r1, #69	; 0x45
   1a696:	4841      	ldr	r0, [pc, #260]	; (1a79c <main+0x160>)
		LOG_ERR("Connection set-up failed.");
   1a698:	f010 fac3 	bl	2ac22 <z_log_minimal_printk>

	err = setup();
	if (err) {
		LOG_ERR("Setup failed, stopping.");
   1a69c:	2145      	movs	r1, #69	; 0x45
   1a69e:	4840      	ldr	r0, [pc, #256]	; (1a7a0 <main+0x164>)
   1a6a0:	f010 fabf 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("summertimeys: %i", summertime);
		

	}
	
}
   1a6a4:	b005      	add	sp, #20
   1a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   1a6a8:	f04f 32ff 	mov.w	r2, #4294967295
   1a6ac:	f04f 33ff 	mov.w	r3, #4294967295
   1a6b0:	4834      	ldr	r0, [pc, #208]	; (1a784 <main+0x148>)
   1a6b2:	f00b fffd 	bl	266b0 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE");
   1a6b6:	2149      	movs	r1, #73	; 0x49
   1a6b8:	483a      	ldr	r0, [pc, #232]	; (1a7a4 <main+0x168>)
   1a6ba:	f010 fab2 	bl	2ac22 <z_log_minimal_printk>
	LOG_INF("Waiting for modem to acquire network time...");
   1a6be:	2149      	movs	r1, #73	; 0x49
   1a6c0:	4839      	ldr	r0, [pc, #228]	; (1a7a8 <main+0x16c>)
   1a6c2:	f010 faae 	bl	2ac22 <z_log_minimal_printk>
		err = nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a6c6:	4d39      	ldr	r5, [pc, #228]	; (1a7ac <main+0x170>)
   1a6c8:	4e39      	ldr	r6, [pc, #228]	; (1a7b0 <main+0x174>)
			LOG_DBG("AT Clock Command Error %d... Retrying in 3 seconds.", err);
   1a6ca:	4c3a      	ldr	r4, [pc, #232]	; (1a7b4 <main+0x178>)
	return z_impl_k_sleep(timeout);
   1a6cc:	2100      	movs	r1, #0
   1a6ce:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   1a6d2:	f00d fa4f 	bl	27b74 <z_impl_k_sleep>
		err = nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a6d6:	462a      	mov	r2, r5
   1a6d8:	2140      	movs	r1, #64	; 0x40
   1a6da:	4630      	mov	r0, r6
   1a6dc:	f00a fe7e 	bl	253dc <nrf_modem_at_cmd>
		if (err) {
   1a6e0:	4602      	mov	r2, r0
   1a6e2:	b120      	cbz	r0, 1a6ee <main+0xb2>
			LOG_DBG("AT Clock Command Error %d... Retrying in 3 seconds.", err);
   1a6e4:	2144      	movs	r1, #68	; 0x44
   1a6e6:	4620      	mov	r0, r4
   1a6e8:	f010 fa9b 	bl	2ac22 <z_log_minimal_printk>
	} while (err != 0);
   1a6ec:	e7ee      	b.n	1a6cc <main+0x90>
	LOG_INF("Network time obtained");
   1a6ee:	2149      	movs	r1, #73	; 0x49
   1a6f0:	4831      	ldr	r0, [pc, #196]	; (1a7b8 <main+0x17c>)
   1a6f2:	f010 fa96 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("time now22: %i", (ptm->tm_hour));
   1a6f6:	4f31      	ldr	r7, [pc, #196]	; (1a7bc <main+0x180>)
		LOG_INF("time nowsek: %i", (ptm->tm_sec));
   1a6f8:	4e31      	ldr	r6, [pc, #196]	; (1a7c0 <main+0x184>)
		nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a6fa:	4d2d      	ldr	r5, [pc, #180]	; (1a7b0 <main+0x174>)
   1a6fc:	2100      	movs	r1, #0
   1a6fe:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   1a702:	f00d fa37 	bl	27b74 <z_impl_k_sleep>
   1a706:	2140      	movs	r1, #64	; 0x40
   1a708:	4628      	mov	r0, r5
   1a70a:	4a28      	ldr	r2, [pc, #160]	; (1a7ac <main+0x170>)
   1a70c:	f00a fe66 	bl	253dc <nrf_modem_at_cmd>
		LOG_INF("time now: %s", time_buf);
   1a710:	462a      	mov	r2, r5
   1a712:	2149      	movs	r1, #73	; 0x49
   1a714:	482b      	ldr	r0, [pc, #172]	; (1a7c4 <main+0x188>)
   1a716:	f010 fa84 	bl	2ac22 <z_log_minimal_printk>
		date_time_now(&unix_time_ms);
   1a71a:	4668      	mov	r0, sp
   1a71c:	f006 fafe 	bl	20d1c <date_time_now>
		time_t nowish = unix_time_ms/1000;
   1a720:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a728:	2300      	movs	r3, #0
   1a72a:	f7fe fc69 	bl	19000 <__aeabi_ldivmod>
   1a72e:	e9cd 0102 	strd	r0, r1, [sp, #8]
		struct tm *ptm = localtime(&nowish);
   1a732:	a802      	add	r0, sp, #8
   1a734:	f00e fa6a 	bl	28c0c <localtime>
		LOG_INF("time now2: %lli", unix_time_ms);
   1a738:	e9dd 2300 	ldrd	r2, r3, [sp]
		struct tm *ptm = localtime(&nowish);
   1a73c:	4604      	mov	r4, r0
		LOG_INF("time now2: %lli", unix_time_ms);
   1a73e:	2149      	movs	r1, #73	; 0x49
   1a740:	4821      	ldr	r0, [pc, #132]	; (1a7c8 <main+0x18c>)
   1a742:	f010 fa6e 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("time now22: %i", (ptm->tm_hour));
   1a746:	4638      	mov	r0, r7
   1a748:	68a2      	ldr	r2, [r4, #8]
   1a74a:	2149      	movs	r1, #73	; 0x49
   1a74c:	f010 fa69 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("time now22: %i", (ptm->tm_min));
   1a750:	4638      	mov	r0, r7
   1a752:	6862      	ldr	r2, [r4, #4]
   1a754:	2149      	movs	r1, #73	; 0x49
   1a756:	f010 fa64 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("time nowsek: %i", (ptm->tm_sec));
   1a75a:	4630      	mov	r0, r6
   1a75c:	6822      	ldr	r2, [r4, #0]
   1a75e:	2149      	movs	r1, #73	; 0x49
   1a760:	f010 fa5f 	bl	2ac22 <z_log_minimal_printk>
		LOG_INF("time nowsek: %i", (ptm->tm_isdst));
   1a764:	4630      	mov	r0, r6
   1a766:	6a22      	ldr	r2, [r4, #32]
   1a768:	2149      	movs	r1, #73	; 0x49
   1a76a:	f010 fa5a 	bl	2ac22 <z_log_minimal_printk>
		int summertime = (int)(time_buf[30])-48;
   1a76e:	7faa      	ldrb	r2, [r5, #30]
		LOG_INF("summertimeys: %i", summertime);
   1a770:	2149      	movs	r1, #73	; 0x49
   1a772:	4816      	ldr	r0, [pc, #88]	; (1a7cc <main+0x190>)
   1a774:	3a30      	subs	r2, #48	; 0x30
   1a776:	f010 fa54 	bl	2ac22 <z_log_minimal_printk>
	while (true)
   1a77a:	e7be      	b.n	1a6fa <main+0xbe>
   1a77c:	0002e336 	.word	0x0002e336
   1a780:	0002e348 	.word	0x0002e348
   1a784:	2000ca50 	.word	0x2000ca50
   1a788:	0001a5d9 	.word	0x0001a5d9
   1a78c:	0002e3ae 	.word	0x0002e3ae
   1a790:	0002e3d3 	.word	0x0002e3d3
   1a794:	0002e402 	.word	0x0002e402
   1a798:	0002e364 	.word	0x0002e364
   1a79c:	0002e392 	.word	0x0002e392
   1a7a0:	0002e512 	.word	0x0002e512
   1a7a4:	0002e421 	.word	0x0002e421
   1a7a8:	0002e437 	.word	0x0002e437
   1a7ac:	0002e469 	.word	0x0002e469
   1a7b0:	2000d47a 	.word	0x2000d47a
   1a7b4:	0002e473 	.word	0x0002e473
   1a7b8:	0002e52f 	.word	0x0002e52f
   1a7bc:	0002e4d3 	.word	0x0002e4d3
   1a7c0:	0002e4e7 	.word	0x0002e4e7
   1a7c4:	0002e4ac 	.word	0x0002e4ac
   1a7c8:	0002e4be 	.word	0x0002e4be
   1a7cc:	0002e4fc 	.word	0x0002e4fc

0001a7d0 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a7d0:	2803      	cmp	r0, #3
{
   1a7d2:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a7d4:	d906      	bls.n	1a7e4 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1a7d6:	f010 fb77 	bl	2aec8 <__errno>
   1a7da:	2309      	movs	r3, #9
   1a7dc:	6003      	str	r3, [r0, #0]
   1a7de:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   1a7e2:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a7e4:	4b04      	ldr	r3, [pc, #16]	; (1a7f8 <_check_fd+0x28>)
   1a7e6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a7ea:	3008      	adds	r0, #8
   1a7ec:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   1a7f0:	2b00      	cmp	r3, #0
   1a7f2:	d0f0      	beq.n	1a7d6 <_check_fd+0x6>
	return 0;
   1a7f4:	2000      	movs	r0, #0
   1a7f6:	e7f4      	b.n	1a7e2 <_check_fd+0x12>
   1a7f8:	2000cd78 	.word	0x2000cd78

0001a7fc <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   1a7fc:	b570      	push	{r4, r5, r6, lr}
   1a7fe:	4604      	mov	r4, r0
   1a800:	460d      	mov	r5, r1
   1a802:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1a804:	f7ff ffe4 	bl	1a7d0 <_check_fd>
   1a808:	2800      	cmp	r0, #0
   1a80a:	db09      	blt.n	1a820 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   1a80c:	4b06      	ldr	r3, [pc, #24]	; (1a828 <z_get_fd_obj+0x2c>)
   1a80e:	0160      	lsls	r0, r4, #5
   1a810:	b145      	cbz	r5, 1a824 <z_get_fd_obj+0x28>
   1a812:	181a      	adds	r2, r3, r0
   1a814:	6852      	ldr	r2, [r2, #4]
   1a816:	42aa      	cmp	r2, r5
   1a818:	d004      	beq.n	1a824 <z_get_fd_obj+0x28>
		errno = err;
   1a81a:	f010 fb55 	bl	2aec8 <__errno>
   1a81e:	6006      	str	r6, [r0, #0]
		return NULL;
   1a820:	2000      	movs	r0, #0
   1a822:	e000      	b.n	1a826 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   1a824:	5818      	ldr	r0, [r3, r0]
}
   1a826:	bd70      	pop	{r4, r5, r6, pc}
   1a828:	2000cd78 	.word	0x2000cd78

0001a82c <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   1a82c:	b570      	push	{r4, r5, r6, lr}
   1a82e:	4604      	mov	r4, r0
   1a830:	460e      	mov	r6, r1
   1a832:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1a834:	f7ff ffcc 	bl	1a7d0 <_check_fd>
   1a838:	2800      	cmp	r0, #0
   1a83a:	db0c      	blt.n	1a856 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   1a83c:	4b07      	ldr	r3, [pc, #28]	; (1a85c <z_get_fd_obj_and_vtable+0x30>)
   1a83e:	0161      	lsls	r1, r4, #5
   1a840:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1a844:	6862      	ldr	r2, [r4, #4]
   1a846:	6032      	str	r2, [r6, #0]

	if (lock) {
   1a848:	b11d      	cbz	r5, 1a852 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   1a84a:	f101 020c 	add.w	r2, r1, #12
   1a84e:	441a      	add	r2, r3
   1a850:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   1a852:	5858      	ldr	r0, [r3, r1]
}
   1a854:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1a856:	2000      	movs	r0, #0
   1a858:	e7fc      	b.n	1a854 <z_get_fd_obj_and_vtable+0x28>
   1a85a:	bf00      	nop
   1a85c:	2000cd78 	.word	0x2000cd78

0001a860 <z_reserve_fd>:

int z_reserve_fd(void)
{
   1a860:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a862:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1a864:	f04f 32ff 	mov.w	r2, #4294967295
   1a868:	f04f 33ff 	mov.w	r3, #4294967295
   1a86c:	4814      	ldr	r0, [pc, #80]	; (1a8c0 <z_reserve_fd+0x60>)
   1a86e:	f00b fc8d 	bl	2618c <z_impl_k_mutex_lock>
   1a872:	4a14      	ldr	r2, [pc, #80]	; (1a8c4 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   1a874:	0163      	lsls	r3, r4, #5
   1a876:	e8d2 1faf 	lda	r1, [r2]
   1a87a:	b179      	cbz	r1, 1a89c <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a87c:	3401      	adds	r4, #1
   1a87e:	2c04      	cmp	r4, #4
   1a880:	f102 0220 	add.w	r2, r2, #32
   1a884:	d1f6      	bne.n	1a874 <z_reserve_fd+0x14>
	errno = ENFILE;
   1a886:	f010 fb1f 	bl	2aec8 <__errno>
   1a88a:	2317      	movs	r3, #23
	return -1;
   1a88c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   1a890:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1a892:	480b      	ldr	r0, [pc, #44]	; (1a8c0 <z_reserve_fd+0x60>)
   1a894:	f00b fd52 	bl	2633c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1a898:	4620      	mov	r0, r4
   1a89a:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a89c:	e8d2 0fef 	ldaex	r0, [r2]
   1a8a0:	3001      	adds	r0, #1
   1a8a2:	e8c2 0fec 	stlex	ip, r0, [r2]
   1a8a6:	f1bc 0f00 	cmp.w	ip, #0
   1a8aa:	d1f7      	bne.n	1a89c <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   1a8ac:	4806      	ldr	r0, [pc, #24]	; (1a8c8 <z_reserve_fd+0x68>)
   1a8ae:	18c2      	adds	r2, r0, r3
   1a8b0:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   1a8b2:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   1a8b4:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   1a8b6:	4418      	add	r0, r3
   1a8b8:	f012 f86b 	bl	2c992 <z_impl_k_mutex_init>
   1a8bc:	e7e9      	b.n	1a892 <z_reserve_fd+0x32>
   1a8be:	bf00      	nop
   1a8c0:	2000c9d4 	.word	0x2000c9d4
   1a8c4:	2000cd80 	.word	0x2000cd80
   1a8c8:	2000cd78 	.word	0x2000cd78

0001a8cc <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   1a8cc:	b410      	push	{r4}
   1a8ce:	4614      	mov	r4, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1a8d0:	4b09      	ldr	r3, [pc, #36]	; (1a8f8 <z_finalize_fd+0x2c>)
   1a8d2:	0142      	lsls	r2, r0, #5
   1a8d4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a8d8:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   1a8da:	6044      	str	r4, [r0, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   1a8dc:	b14c      	cbz	r4, 1a8f2 <z_finalize_fd+0x26>
   1a8de:	68e0      	ldr	r0, [r4, #12]
   1a8e0:	b138      	cbz	r0, 1a8f2 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a8e2:	320c      	adds	r2, #12
   1a8e4:	4620      	mov	r0, r4
   1a8e6:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   1a8e8:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a8ea:	f240 1205 	movw	r2, #261	; 0x105
   1a8ee:	f00f bf62 	b.w	2a7b6 <z_fdtable_call_ioctl.constprop.0>
}
   1a8f2:	bc10      	pop	{r4}
   1a8f4:	4770      	bx	lr
   1a8f6:	bf00      	nop
   1a8f8:	2000cd78 	.word	0x2000cd78

0001a8fc <z_free_fd>:

void z_free_fd(int fd)
{
   1a8fc:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1a8fe:	4b0d      	ldr	r3, [pc, #52]	; (1a934 <z_free_fd+0x38>)
   1a900:	0140      	lsls	r0, r0, #5
   1a902:	f100 0208 	add.w	r2, r0, #8
   1a906:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a908:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   1a90c:	b181      	cbz	r1, 1a930 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1a90e:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a910:	e8d2 5fef 	ldaex	r5, [r2]
   1a914:	428d      	cmp	r5, r1
   1a916:	d104      	bne.n	1a922 <z_free_fd+0x26>
   1a918:	e8c2 4fec 	stlex	ip, r4, [r2]
   1a91c:	f1bc 0f00 	cmp.w	ip, #0
   1a920:	d1f6      	bne.n	1a910 <z_free_fd+0x14>
   1a922:	d1f1      	bne.n	1a908 <z_free_fd+0xc>
	if (old_rc != 1) {
   1a924:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   1a926:	bf01      	itttt	eq
   1a928:	2200      	moveq	r2, #0
   1a92a:	1819      	addeq	r1, r3, r0
   1a92c:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   1a92e:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1a930:	bd30      	pop	{r4, r5, pc}
   1a932:	bf00      	nop
   1a934:	2000cd78 	.word	0x2000cd78

0001a938 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a938:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1a93a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   1a93c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1a940:	2b02      	cmp	r3, #2
{
   1a942:	4604      	mov	r4, r0
   1a944:	460e      	mov	r6, r1
	notify->result = res;
   1a946:	6081      	str	r1, [r0, #8]
	switch (method) {
   1a948:	d010      	beq.n	1a96c <sys_notify_finalize+0x34>
   1a94a:	2b03      	cmp	r3, #3
   1a94c:	d004      	beq.n	1a958 <sys_notify_finalize+0x20>
   1a94e:	2b01      	cmp	r3, #1
   1a950:	d10f      	bne.n	1a972 <sys_notify_finalize+0x3a>
   1a952:	2500      	movs	r5, #0
   1a954:	4628      	mov	r0, r5
   1a956:	e001      	b.n	1a95c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1a958:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1a95a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a95c:	2300      	movs	r3, #0
   1a95e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1a960:	b110      	cbz	r0, 1a968 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1a962:	4631      	mov	r1, r6
   1a964:	f00d ffc6 	bl	288f4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a968:	4628      	mov	r0, r5
   1a96a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   1a96c:	2500      	movs	r5, #0
		sig = notify->method.signal;
   1a96e:	6800      	ldr	r0, [r0, #0]
		break;
   1a970:	e7f4      	b.n	1a95c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1a972:	2245      	movs	r2, #69	; 0x45
   1a974:	4904      	ldr	r1, [pc, #16]	; (1a988 <sys_notify_finalize+0x50>)
   1a976:	4805      	ldr	r0, [pc, #20]	; (1a98c <sys_notify_finalize+0x54>)
   1a978:	f00f ff94 	bl	2a8a4 <printk>
   1a97c:	2145      	movs	r1, #69	; 0x45
   1a97e:	4802      	ldr	r0, [pc, #8]	; (1a988 <sys_notify_finalize+0x50>)
   1a980:	f010 f929 	bl	2abd6 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1a984:	2500      	movs	r5, #0
   1a986:	e7e8      	b.n	1a95a <sys_notify_finalize+0x22>
   1a988:	0002e551 	.word	0x0002e551
   1a98c:	0002e574 	.word	0x0002e574

0001a990 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1a990:	680b      	ldr	r3, [r1, #0]
   1a992:	3301      	adds	r3, #1
   1a994:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1a996:	4b01      	ldr	r3, [pc, #4]	; (1a99c <char_out+0xc>)
   1a998:	681b      	ldr	r3, [r3, #0]
   1a99a:	4718      	bx	r3
   1a99c:	2000c588 	.word	0x2000c588

0001a9a0 <__printk_hook_install>:
	_char_out = fn;
   1a9a0:	4b01      	ldr	r3, [pc, #4]	; (1a9a8 <__printk_hook_install+0x8>)
   1a9a2:	6018      	str	r0, [r3, #0]
}
   1a9a4:	4770      	bx	lr
   1a9a6:	bf00      	nop
   1a9a8:	2000c588 	.word	0x2000c588

0001a9ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1a9ac:	b507      	push	{r0, r1, r2, lr}
   1a9ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1a9b0:	2100      	movs	r1, #0
{
   1a9b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1a9b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1a9b6:	4803      	ldr	r0, [pc, #12]	; (1a9c4 <vprintk+0x18>)
   1a9b8:	a901      	add	r1, sp, #4
   1a9ba:	f000 fc81 	bl	1b2c0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1a9be:	b003      	add	sp, #12
   1a9c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1a9c4:	0001a991 	.word	0x0001a991

0001a9c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1a9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a9cc:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
   1a9d0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1a9d2:	f01a 0f08 	tst.w	sl, #8
{
   1a9d6:	4693      	mov	fp, r2
	if (processing) {
   1a9d8:	d01c      	beq.n	1aa14 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   1a9da:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1a9dc:	bf0c      	ite	eq
   1a9de:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a9e2:	f04a 0a20 	orrne.w	sl, sl, #32
   1a9e6:	f8a0 a01c 	strh.w	sl, [r0, #28]
   1a9ea:	f104 0014 	add.w	r0, r4, #20
   1a9ee:	f00b fb8f 	bl	26110 <z_spin_unlock_valid>
   1a9f2:	b940      	cbnz	r0, 1aa06 <process_event+0x3e>
   1a9f4:	49ba      	ldr	r1, [pc, #744]	; (1ace0 <process_event+0x318>)
   1a9f6:	48bb      	ldr	r0, [pc, #748]	; (1ace4 <process_event+0x31c>)
   1a9f8:	22ac      	movs	r2, #172	; 0xac
   1a9fa:	f00f ff53 	bl	2a8a4 <printk>
   1a9fe:	21ac      	movs	r1, #172	; 0xac
   1aa00:	48b7      	ldr	r0, [pc, #732]	; (1ace0 <process_event+0x318>)
   1aa02:	f010 f8e8 	bl	2abd6 <assert_post_action>
   1aa06:	f38b 8811 	msr	BASEPRI, fp
   1aa0a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1aa0e:	b003      	add	sp, #12
   1aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1aa14:	4fb4      	ldr	r7, [pc, #720]	; (1ace8 <process_event+0x320>)
   1aa16:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 1ace4 <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aa1a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   1aa1e:	2902      	cmp	r1, #2
   1aa20:	d106      	bne.n	1aa30 <process_event+0x68>
			evt = process_recheck(mgr);
   1aa22:	4620      	mov	r0, r4
   1aa24:	f00f ff4b 	bl	2a8be <process_recheck>
		if (evt == EVT_NOP) {
   1aa28:	2800      	cmp	r0, #0
   1aa2a:	d0de      	beq.n	1a9ea <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1aa2c:	2801      	cmp	r0, #1
   1aa2e:	d165      	bne.n	1aafc <process_event+0x134>
			res = mgr->last_res;
   1aa30:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aa34:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1aa36:	f1b9 0f00 	cmp.w	r9, #0
   1aa3a:	da19      	bge.n	1aa70 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1aa3c:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1aa3e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1aa40:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1aa44:	e9c4 6600 	strd	r6, r6, [r4]
   1aa48:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1aa4c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1aa4e:	8ba3      	ldrh	r3, [r4, #28]
   1aa50:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1aa54:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1aa56:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   1aa58:	d003      	beq.n	1aa62 <process_event+0x9a>
		if (do_monitors
   1aa5a:	68a2      	ldr	r2, [r4, #8]
   1aa5c:	2a00      	cmp	r2, #0
   1aa5e:	f040 80f1 	bne.w	1ac44 <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
   1aa62:	b915      	cbnz	r5, 1aa6a <process_event+0xa2>
		    || (transit != NULL)) {
   1aa64:	2e00      	cmp	r6, #0
   1aa66:	f000 812b 	beq.w	1acc0 <process_event+0x2f8>
   1aa6a:	f04f 0a00 	mov.w	sl, #0
   1aa6e:	e0eb      	b.n	1ac48 <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aa70:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1aa74:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1aa76:	2901      	cmp	r1, #1
   1aa78:	d822      	bhi.n	1aac0 <process_event+0xf8>
	list->head = NULL;
   1aa7a:	2100      	movs	r1, #0
   1aa7c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1aa80:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1aa82:	6825      	ldr	r5, [r4, #0]
   1aa84:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1aa86:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1aa8a:	d10c      	bne.n	1aaa6 <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1aa8c:	428d      	cmp	r5, r1
   1aa8e:	462a      	mov	r2, r5
   1aa90:	bf38      	it	cc
   1aa92:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1aa94:	b12a      	cbz	r2, 1aaa2 <process_event+0xda>
				mgr->refs += 1U;
   1aa96:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1aa98:	6812      	ldr	r2, [r2, #0]
   1aa9a:	3101      	adds	r1, #1
   1aa9c:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1aa9e:	2a00      	cmp	r2, #0
   1aaa0:	d1f8      	bne.n	1aa94 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1aaa2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1aaa6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1aaa8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1aaaa:	f00f ff08 	bl	2a8be <process_recheck>
   1aaae:	4606      	mov	r6, r0
   1aab0:	2800      	cmp	r0, #0
   1aab2:	d0cc      	beq.n	1aa4e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1aab4:	8ba3      	ldrh	r3, [r4, #28]
   1aab6:	f043 0320 	orr.w	r3, r3, #32
   1aaba:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1aabc:	2600      	movs	r6, #0
   1aabe:	e7c6      	b.n	1aa4e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1aac0:	2a04      	cmp	r2, #4
   1aac2:	d10d      	bne.n	1aae0 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1aac4:	f023 0307 	bic.w	r3, r3, #7
   1aac8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   1aaca:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1aacc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1aace:	f00f fef6 	bl	2a8be <process_recheck>
   1aad2:	4605      	mov	r5, r0
   1aad4:	b180      	cbz	r0, 1aaf8 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1aad6:	f042 0220 	orr.w	r2, r2, #32
   1aada:	2500      	movs	r5, #0
   1aadc:	83a2      	strh	r2, [r4, #28]
   1aade:	e7ed      	b.n	1aabc <process_event+0xf4>
		__ASSERT_NO_MSG(false);
   1aae0:	f240 121b 	movw	r2, #283	; 0x11b
   1aae4:	4639      	mov	r1, r7
   1aae6:	4640      	mov	r0, r8
   1aae8:	f00f fedc 	bl	2a8a4 <printk>
   1aaec:	f240 111b 	movw	r1, #283	; 0x11b
   1aaf0:	4638      	mov	r0, r7
   1aaf2:	f010 f870 	bl	2abd6 <assert_post_action>
   1aaf6:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1aaf8:	462e      	mov	r6, r5
   1aafa:	e7a8      	b.n	1aa4e <process_event+0x86>
		} else if (evt == EVT_START) {
   1aafc:	2803      	cmp	r0, #3
   1aafe:	d131      	bne.n	1ab64 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1ab00:	f1ba 0f00 	cmp.w	sl, #0
   1ab04:	d00a      	beq.n	1ab1c <process_event+0x154>
   1ab06:	4639      	mov	r1, r7
   1ab08:	4640      	mov	r0, r8
   1ab0a:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1ab0e:	f00f fec9 	bl	2a8a4 <printk>
   1ab12:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1ab16:	4638      	mov	r0, r7
   1ab18:	f010 f85d 	bl	2abd6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1ab1c:	6823      	ldr	r3, [r4, #0]
   1ab1e:	b953      	cbnz	r3, 1ab36 <process_event+0x16e>
   1ab20:	4639      	mov	r1, r7
   1ab22:	4640      	mov	r0, r8
   1ab24:	f240 1257 	movw	r2, #343	; 0x157
   1ab28:	f00f febc 	bl	2a8a4 <printk>
   1ab2c:	f240 1157 	movw	r1, #343	; 0x157
   1ab30:	4638      	mov	r0, r7
   1ab32:	f010 f850 	bl	2abd6 <assert_post_action>
			transit = mgr->transitions->start;
   1ab36:	6923      	ldr	r3, [r4, #16]
   1ab38:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1ab3a:	b956      	cbnz	r6, 1ab52 <process_event+0x18a>
   1ab3c:	4639      	mov	r1, r7
   1ab3e:	4640      	mov	r0, r8
   1ab40:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   1ab44:	f00f feae 	bl	2a8a4 <printk>
   1ab48:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1ab4c:	4638      	mov	r0, r7
   1ab4e:	f010 f842 	bl	2abd6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1ab52:	8ba3      	ldrh	r3, [r4, #28]
   1ab54:	f023 0307 	bic.w	r3, r3, #7
   1ab58:	f043 0306 	orr.w	r3, r3, #6
}
   1ab5c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1ab5e:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1ab60:	46a9      	mov	r9, r5
}
   1ab62:	e774      	b.n	1aa4e <process_event+0x86>
		} else if (evt == EVT_STOP) {
   1ab64:	2804      	cmp	r0, #4
   1ab66:	d12e      	bne.n	1abc6 <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1ab68:	f1ba 0f02 	cmp.w	sl, #2
   1ab6c:	d00a      	beq.n	1ab84 <process_event+0x1bc>
   1ab6e:	4639      	mov	r1, r7
   1ab70:	4640      	mov	r0, r8
   1ab72:	f240 125d 	movw	r2, #349	; 0x15d
   1ab76:	f00f fe95 	bl	2a8a4 <printk>
   1ab7a:	f240 115d 	movw	r1, #349	; 0x15d
   1ab7e:	4638      	mov	r0, r7
   1ab80:	f010 f829 	bl	2abd6 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1ab84:	8be3      	ldrh	r3, [r4, #30]
   1ab86:	b153      	cbz	r3, 1ab9e <process_event+0x1d6>
   1ab88:	4639      	mov	r1, r7
   1ab8a:	4640      	mov	r0, r8
   1ab8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
   1ab90:	f00f fe88 	bl	2a8a4 <printk>
   1ab94:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1ab98:	4638      	mov	r0, r7
   1ab9a:	f010 f81c 	bl	2abd6 <assert_post_action>
			transit = mgr->transitions->stop;
   1ab9e:	6923      	ldr	r3, [r4, #16]
   1aba0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1aba2:	b956      	cbnz	r6, 1abba <process_event+0x1f2>
   1aba4:	4639      	mov	r1, r7
   1aba6:	4640      	mov	r0, r8
   1aba8:	f240 1261 	movw	r2, #353	; 0x161
   1abac:	f00f fe7a 	bl	2a8a4 <printk>
   1abb0:	f240 1161 	movw	r1, #353	; 0x161
   1abb4:	4638      	mov	r0, r7
   1abb6:	f010 f80e 	bl	2abd6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1abba:	8ba3      	ldrh	r3, [r4, #28]
   1abbc:	f023 0307 	bic.w	r3, r3, #7
   1abc0:	f043 0304 	orr.w	r3, r3, #4
   1abc4:	e7ca      	b.n	1ab5c <process_event+0x194>
		} else if (evt == EVT_RESET) {
   1abc6:	2805      	cmp	r0, #5
   1abc8:	d12e      	bne.n	1ac28 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1abca:	f1ba 0f01 	cmp.w	sl, #1
   1abce:	d00a      	beq.n	1abe6 <process_event+0x21e>
   1abd0:	4639      	mov	r1, r7
   1abd2:	4640      	mov	r0, r8
   1abd4:	f44f 72b2 	mov.w	r2, #356	; 0x164
   1abd8:	f00f fe64 	bl	2a8a4 <printk>
   1abdc:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1abe0:	4638      	mov	r0, r7
   1abe2:	f00f fff8 	bl	2abd6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1abe6:	6823      	ldr	r3, [r4, #0]
   1abe8:	b953      	cbnz	r3, 1ac00 <process_event+0x238>
   1abea:	4639      	mov	r1, r7
   1abec:	4640      	mov	r0, r8
   1abee:	f240 1265 	movw	r2, #357	; 0x165
   1abf2:	f00f fe57 	bl	2a8a4 <printk>
   1abf6:	f240 1165 	movw	r1, #357	; 0x165
   1abfa:	4638      	mov	r0, r7
   1abfc:	f00f ffeb 	bl	2abd6 <assert_post_action>
			transit = mgr->transitions->reset;
   1ac00:	6923      	ldr	r3, [r4, #16]
   1ac02:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   1ac04:	b956      	cbnz	r6, 1ac1c <process_event+0x254>
   1ac06:	4639      	mov	r1, r7
   1ac08:	4640      	mov	r0, r8
   1ac0a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1ac0e:	f00f fe49 	bl	2a8a4 <printk>
   1ac12:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1ac16:	4638      	mov	r0, r7
   1ac18:	f00f ffdd 	bl	2abd6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1ac1c:	8ba3      	ldrh	r3, [r4, #28]
   1ac1e:	f023 0307 	bic.w	r3, r3, #7
   1ac22:	f043 0305 	orr.w	r3, r3, #5
   1ac26:	e799      	b.n	1ab5c <process_event+0x194>
			__ASSERT_NO_MSG(false);
   1ac28:	2500      	movs	r5, #0
   1ac2a:	f240 126b 	movw	r2, #363	; 0x16b
   1ac2e:	4639      	mov	r1, r7
   1ac30:	4640      	mov	r0, r8
   1ac32:	f00f fe37 	bl	2a8a4 <printk>
   1ac36:	f240 116b 	movw	r1, #363	; 0x16b
   1ac3a:	4638      	mov	r0, r7
   1ac3c:	f00f ffcb 	bl	2abd6 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1ac40:	462e      	mov	r6, r5
   1ac42:	e78d      	b.n	1ab60 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
   1ac44:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1ac48:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1ac4c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   1ac4e:	f104 0314 	add.w	r3, r4, #20
   1ac52:	4618      	mov	r0, r3
   1ac54:	9301      	str	r3, [sp, #4]
   1ac56:	f00b fa5b 	bl	26110 <z_spin_unlock_valid>
   1ac5a:	b940      	cbnz	r0, 1ac6e <process_event+0x2a6>
   1ac5c:	4640      	mov	r0, r8
   1ac5e:	4920      	ldr	r1, [pc, #128]	; (1ace0 <process_event+0x318>)
   1ac60:	22ac      	movs	r2, #172	; 0xac
   1ac62:	f00f fe1f 	bl	2a8a4 <printk>
   1ac66:	21ac      	movs	r1, #172	; 0xac
   1ac68:	481d      	ldr	r0, [pc, #116]	; (1ace0 <process_event+0x318>)
   1ac6a:	f00f ffb4 	bl	2abd6 <assert_post_action>
   1ac6e:	f38b 8811 	msr	BASEPRI, fp
   1ac72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1ac76:	f1ba 0f00 	cmp.w	sl, #0
   1ac7a:	d139      	bne.n	1acf0 <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
   1ac7c:	2d00      	cmp	r5, #0
   1ac7e:	d14c      	bne.n	1ad1a <process_event+0x352>
			if (transit != NULL) {
   1ac80:	b116      	cbz	r6, 1ac88 <process_event+0x2c0>
				transit(mgr, transition_complete);
   1ac82:	4620      	mov	r0, r4
   1ac84:	4919      	ldr	r1, [pc, #100]	; (1acec <process_event+0x324>)
   1ac86:	47b0      	blx	r6
	__asm__ volatile(
   1ac88:	f04f 0320 	mov.w	r3, #32
   1ac8c:	f3ef 8b11 	mrs	fp, BASEPRI
   1ac90:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac98:	9801      	ldr	r0, [sp, #4]
   1ac9a:	f00b fa2b 	bl	260f4 <z_spin_lock_valid>
   1ac9e:	b940      	cbnz	r0, 1acb2 <process_event+0x2ea>
   1aca0:	4640      	mov	r0, r8
   1aca2:	490f      	ldr	r1, [pc, #60]	; (1ace0 <process_event+0x318>)
   1aca4:	2281      	movs	r2, #129	; 0x81
   1aca6:	f00f fdfd 	bl	2a8a4 <printk>
   1acaa:	2181      	movs	r1, #129	; 0x81
   1acac:	480c      	ldr	r0, [pc, #48]	; (1ace0 <process_event+0x318>)
   1acae:	f00f ff92 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1acb2:	9801      	ldr	r0, [sp, #4]
   1acb4:	f00b fa3a 	bl	2612c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1acb8:	8ba3      	ldrh	r3, [r4, #28]
   1acba:	f023 0308 	bic.w	r3, r3, #8
   1acbe:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1acc0:	8ba3      	ldrh	r3, [r4, #28]
   1acc2:	06da      	lsls	r2, r3, #27
   1acc4:	d531      	bpl.n	1ad2a <process_event+0x362>
			evt = EVT_COMPLETE;
   1acc6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1acc8:	f023 0310 	bic.w	r3, r3, #16
   1accc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1acce:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   1acd2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   1acd6:	2900      	cmp	r1, #0
   1acd8:	f47f aea1 	bne.w	1aa1e <process_event+0x56>
out:
   1acdc:	e685      	b.n	1a9ea <process_event+0x22>
   1acde:	bf00      	nop
   1ace0:	0002e5ae 	.word	0x0002e5ae
   1ace4:	0002e574 	.word	0x0002e574
   1ace8:	0002e58c 	.word	0x0002e58c
   1acec:	0001ad3d 	.word	0x0001ad3d
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1acf0:	68a1      	ldr	r1, [r4, #8]
   1acf2:	2900      	cmp	r1, #0
   1acf4:	d0c2      	beq.n	1ac7c <process_event+0x2b4>
	return node->next;
   1acf6:	680b      	ldr	r3, [r1, #0]
   1acf8:	2b00      	cmp	r3, #0
   1acfa:	bf38      	it	cc
   1acfc:	2300      	movcc	r3, #0
   1acfe:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
   1ad00:	4620      	mov	r0, r4
   1ad02:	464b      	mov	r3, r9
   1ad04:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1ad08:	9a00      	ldr	r2, [sp, #0]
   1ad0a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1ad0c:	f1ba 0f00 	cmp.w	sl, #0
   1ad10:	d0b4      	beq.n	1ac7c <process_event+0x2b4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ad12:	4651      	mov	r1, sl
   1ad14:	f8da 3000 	ldr.w	r3, [sl]
   1ad18:	e7ee      	b.n	1acf8 <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad1a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1ad1c:	464b      	mov	r3, r9
   1ad1e:	4620      	mov	r0, r4
   1ad20:	9a00      	ldr	r2, [sp, #0]
   1ad22:	682d      	ldr	r5, [r5, #0]
   1ad24:	f00f fde7 	bl	2a8f6 <notify_one>
   1ad28:	e7a8      	b.n	1ac7c <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1ad2a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1ad2e:	bf1e      	ittt	ne
   1ad30:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1ad34:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1ad36:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   1ad38:	e7c9      	b.n	1acce <process_event+0x306>
   1ad3a:	bf00      	nop

0001ad3c <transition_complete>:
{
   1ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad3e:	4604      	mov	r4, r0
   1ad40:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1ad42:	f100 0614 	add.w	r6, r0, #20
   1ad46:	f04f 0320 	mov.w	r3, #32
   1ad4a:	f3ef 8711 	mrs	r7, BASEPRI
   1ad4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad56:	4630      	mov	r0, r6
   1ad58:	f00b f9cc 	bl	260f4 <z_spin_lock_valid>
   1ad5c:	b940      	cbnz	r0, 1ad70 <transition_complete+0x34>
   1ad5e:	490a      	ldr	r1, [pc, #40]	; (1ad88 <transition_complete+0x4c>)
   1ad60:	480a      	ldr	r0, [pc, #40]	; (1ad8c <transition_complete+0x50>)
   1ad62:	2281      	movs	r2, #129	; 0x81
   1ad64:	f00f fd9e 	bl	2a8a4 <printk>
   1ad68:	2181      	movs	r1, #129	; 0x81
   1ad6a:	4807      	ldr	r0, [pc, #28]	; (1ad88 <transition_complete+0x4c>)
   1ad6c:	f00f ff33 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad70:	4630      	mov	r0, r6
   1ad72:	f00b f9db 	bl	2612c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   1ad76:	463a      	mov	r2, r7
   1ad78:	4620      	mov	r0, r4
	mgr->last_res = res;
   1ad7a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1ad7c:	2101      	movs	r1, #1
}
   1ad7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1ad82:	f7ff be21 	b.w	1a9c8 <process_event>
   1ad86:	bf00      	nop
   1ad88:	0002e5ae 	.word	0x0002e5ae
   1ad8c:	0002e574 	.word	0x0002e574

0001ad90 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad94:	4604      	mov	r4, r0
   1ad96:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1ad98:	f00f fdc3 	bl	2a922 <validate_args>

	if (rv < 0) {
   1ad9c:	1e05      	subs	r5, r0, #0
   1ad9e:	db54      	blt.n	1ae4a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1ada0:	f104 0914 	add.w	r9, r4, #20
   1ada4:	f04f 0320 	mov.w	r3, #32
   1ada8:	f3ef 8a11 	mrs	sl, BASEPRI
   1adac:	f383 8812 	msr	BASEPRI_MAX, r3
   1adb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1adb4:	4648      	mov	r0, r9
   1adb6:	f00b f99d 	bl	260f4 <z_spin_lock_valid>
   1adba:	b940      	cbnz	r0, 1adce <onoff_request+0x3e>
   1adbc:	4933      	ldr	r1, [pc, #204]	; (1ae8c <onoff_request+0xfc>)
   1adbe:	4834      	ldr	r0, [pc, #208]	; (1ae90 <onoff_request+0x100>)
   1adc0:	2281      	movs	r2, #129	; 0x81
   1adc2:	f00f fd6f 	bl	2a8a4 <printk>
   1adc6:	2181      	movs	r1, #129	; 0x81
   1adc8:	4830      	ldr	r0, [pc, #192]	; (1ae8c <onoff_request+0xfc>)
   1adca:	f00f ff04 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1adce:	4648      	mov	r0, r9
   1add0:	f00b f9ac 	bl	2612c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1add4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1add8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1adda:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1addc:	428b      	cmp	r3, r1
   1adde:	f002 0607 	and.w	r6, r2, #7
   1ade2:	d04a      	beq.n	1ae7a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1ade4:	2e02      	cmp	r6, #2
   1ade6:	d11f      	bne.n	1ae28 <onoff_request+0x98>
	rv = state;
   1ade8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   1adea:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   1adee:	3301      	adds	r3, #1
   1adf0:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1adf2:	4648      	mov	r0, r9
   1adf4:	f00b f98c 	bl	26110 <z_spin_unlock_valid>
   1adf8:	b940      	cbnz	r0, 1ae0c <onoff_request+0x7c>
   1adfa:	4924      	ldr	r1, [pc, #144]	; (1ae8c <onoff_request+0xfc>)
   1adfc:	4824      	ldr	r0, [pc, #144]	; (1ae90 <onoff_request+0x100>)
   1adfe:	22ac      	movs	r2, #172	; 0xac
   1ae00:	f00f fd50 	bl	2a8a4 <printk>
   1ae04:	21ac      	movs	r1, #172	; 0xac
   1ae06:	4821      	ldr	r0, [pc, #132]	; (1ae8c <onoff_request+0xfc>)
   1ae08:	f00f fee5 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   1ae0c:	f38a 8811 	msr	BASEPRI, sl
   1ae10:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ae14:	f1b8 0f00 	cmp.w	r8, #0
   1ae18:	d017      	beq.n	1ae4a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	4632      	mov	r2, r6
   1ae1e:	4639      	mov	r1, r7
   1ae20:	4620      	mov	r0, r4
   1ae22:	f00f fd68 	bl	2a8f6 <notify_one>
   1ae26:	e010      	b.n	1ae4a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   1ae28:	0793      	lsls	r3, r2, #30
   1ae2a:	d001      	beq.n	1ae30 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ae2c:	2e06      	cmp	r6, #6
   1ae2e:	d10f      	bne.n	1ae50 <onoff_request+0xc0>
	parent->next = child;
   1ae30:	2300      	movs	r3, #0
   1ae32:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   1ae34:	6863      	ldr	r3, [r4, #4]
   1ae36:	b9eb      	cbnz	r3, 1ae74 <onoff_request+0xe4>
	list->head = node;
   1ae38:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1ae3c:	4635      	mov	r5, r6
   1ae3e:	b9f6      	cbnz	r6, 1ae7e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   1ae40:	4652      	mov	r2, sl
   1ae42:	2102      	movs	r1, #2
   1ae44:	4620      	mov	r0, r4
   1ae46:	f7ff fdbf 	bl	1a9c8 <process_event>
		}
	}

	return rv;
}
   1ae4a:	4628      	mov	r0, r5
   1ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1ae50:	2e05      	cmp	r6, #5
   1ae52:	d017      	beq.n	1ae84 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1ae54:	2e01      	cmp	r6, #1
   1ae56:	d00a      	beq.n	1ae6e <onoff_request+0xde>
   1ae58:	490e      	ldr	r1, [pc, #56]	; (1ae94 <onoff_request+0x104>)
   1ae5a:	480d      	ldr	r0, [pc, #52]	; (1ae90 <onoff_request+0x100>)
   1ae5c:	f240 12c9 	movw	r2, #457	; 0x1c9
   1ae60:	f00f fd20 	bl	2a8a4 <printk>
   1ae64:	f240 11c9 	movw	r1, #457	; 0x1c9
   1ae68:	480a      	ldr	r0, [pc, #40]	; (1ae94 <onoff_request+0x104>)
   1ae6a:	f00f feb4 	bl	2abd6 <assert_post_action>
		rv = -EIO;
   1ae6e:	f06f 0504 	mvn.w	r5, #4
   1ae72:	e004      	b.n	1ae7e <onoff_request+0xee>
	parent->next = child;
   1ae74:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1ae76:	6067      	str	r7, [r4, #4]
}
   1ae78:	e7e0      	b.n	1ae3c <onoff_request+0xac>
		rv = -EAGAIN;
   1ae7a:	f06f 050a 	mvn.w	r5, #10
   1ae7e:	f04f 0800 	mov.w	r8, #0
   1ae82:	e7b6      	b.n	1adf2 <onoff_request+0x62>
		rv = -ENOTSUP;
   1ae84:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1ae88:	e7f9      	b.n	1ae7e <onoff_request+0xee>
   1ae8a:	bf00      	nop
   1ae8c:	0002e5ae 	.word	0x0002e5ae
   1ae90:	0002e574 	.word	0x0002e574
   1ae94:	0002e58c 	.word	0x0002e58c

0001ae98 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   1ae98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   1ae9c:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   1ae9e:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   1aea0:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1aea4:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1aea6:	f240 746c 	movw	r4, #1900	; 0x76c
   1aeaa:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   1aeac:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1aeae:	6943      	ldr	r3, [r0, #20]
{
   1aeb0:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1aeb2:	18e4      	adds	r4, r4, r3
   1aeb4:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   1aeb8:	f1b9 0f02 	cmp.w	r9, #2
   1aebc:	bf8c      	ite	hi
   1aebe:	2300      	movhi	r3, #0
   1aec0:	2301      	movls	r3, #1
   1aec2:	1ae4      	subs	r4, r4, r3
   1aec4:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1aec8:	2c00      	cmp	r4, #0
   1aeca:	f175 0300 	sbcs.w	r3, r5, #0
   1aece:	da57      	bge.n	1af80 <timeutil_timegm64+0xe8>
   1aed0:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1aed4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1aed8:	2300      	movs	r3, #0
   1aeda:	1820      	adds	r0, r4, r0
   1aedc:	f145 31ff 	adc.w	r1, r5, #4294967295
   1aee0:	f7fe f88e 	bl	19000 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   1aee4:	4b29      	ldr	r3, [pc, #164]	; (1af8c <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1aee6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   1aeea:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1aeee:	e9d8 5300 	ldrd	r5, r3, [r8]
   1aef2:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1aef4:	f1b9 0f02 	cmp.w	r9, #2
   1aef8:	bf8c      	ite	hi
   1aefa:	f06f 0e02 	mvnhi.w	lr, #2
   1aefe:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1af02:	ea4f 7be3 	mov.w	fp, r3, asr #31
   1af06:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1af0a:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1af0c:	fbcc ab03 	smlal	sl, fp, ip, r3
   1af10:	fbaa 230c 	umull	r2, r3, sl, ip
   1af14:	fb0c 330b 	mla	r3, ip, fp, r3
   1af18:	1952      	adds	r2, r2, r5
   1af1a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1af1e:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1af22:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1af26:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1af2a:	fb05 cc04 	mla	ip, r5, r4, ip
   1af2e:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1af30:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1af34:	4465      	add	r5, ip
   1af36:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1af3a:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1af3e:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1af42:	f10e 0e02 	add.w	lr, lr, #2
   1af46:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   1af4a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1af98 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1af4e:	1b2c      	subs	r4, r5, r4
   1af50:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1af52:	fba0 450c 	umull	r4, r5, r0, ip
   1af56:	fb0c 5501 	mla	r5, ip, r1, r5
   1af5a:	490d      	ldr	r1, [pc, #52]	; (1af90 <timeutil_timegm64+0xf8>)
   1af5c:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   1af5e:	490d      	ldr	r1, [pc, #52]	; (1af94 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   1af60:	f145 37ff 	adc.w	r7, r5, #4294967295
   1af64:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   1af68:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   1af6c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   1af70:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   1af74:	18a0      	adds	r0, r4, r2
   1af76:	eb45 0103 	adc.w	r1, r5, r3
   1af7a:	b003      	add	sp, #12
   1af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1af80:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1af84:	2300      	movs	r3, #0
   1af86:	4620      	mov	r0, r4
   1af88:	4629      	mov	r1, r5
   1af8a:	e7a9      	b.n	1aee0 <timeutil_timegm64+0x48>
   1af8c:	fffffe70 	.word	0xfffffe70
   1af90:	fff50594 	.word	0xfff50594
   1af94:	00015180 	.word	0x00015180
   1af98:	00023ab1 	.word	0x00023ab1

0001af9c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1af9c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   1af9e:	b379      	cbz	r1, 1b000 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1afa0:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1afa2:	1f0c      	subs	r4, r1, #4
   1afa4:	1b64      	subs	r4, r4, r5
   1afa6:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1afa8:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1afac:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1afae:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1afb0:	07db      	lsls	r3, r3, #31
   1afb2:	d408      	bmi.n	1afc6 <sys_heap_free+0x2a>
   1afb4:	4913      	ldr	r1, [pc, #76]	; (1b004 <sys_heap_free+0x68>)
   1afb6:	4814      	ldr	r0, [pc, #80]	; (1b008 <sys_heap_free+0x6c>)
   1afb8:	22a3      	movs	r2, #163	; 0xa3
   1afba:	f00f fc73 	bl	2a8a4 <printk>
   1afbe:	21a3      	movs	r1, #163	; 0xa3
   1afc0:	4810      	ldr	r0, [pc, #64]	; (1b004 <sys_heap_free+0x68>)
   1afc2:	f00f fe08 	bl	2abd6 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1afc6:	4631      	mov	r1, r6
   1afc8:	4628      	mov	r0, r5
   1afca:	f00f fcd6 	bl	2a97a <chunk_size>
   1afce:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   1afd0:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1afd4:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1afd6:	4286      	cmp	r6, r0
   1afd8:	d008      	beq.n	1afec <sys_heap_free+0x50>
   1afda:	490a      	ldr	r1, [pc, #40]	; (1b004 <sys_heap_free+0x68>)
   1afdc:	480a      	ldr	r0, [pc, #40]	; (1b008 <sys_heap_free+0x6c>)
   1afde:	22ab      	movs	r2, #171	; 0xab
   1afe0:	f00f fc60 	bl	2a8a4 <printk>
   1afe4:	21ab      	movs	r1, #171	; 0xab
   1afe6:	4807      	ldr	r0, [pc, #28]	; (1b004 <sys_heap_free+0x68>)
   1afe8:	f00f fdf5 	bl	2abd6 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1afec:	8863      	ldrh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   1afee:	4631      	mov	r1, r6
   1aff0:	f023 0301 	bic.w	r3, r3, #1
   1aff4:	4628      	mov	r0, r5
   1aff6:	8063      	strh	r3, [r4, #2]
}
   1aff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   1affc:	f00f bd7a 	b.w	2aaf4 <free_chunk>
}
   1b000:	bd70      	pop	{r4, r5, r6, pc}
   1b002:	bf00      	nop
   1b004:	0002e5d4 	.word	0x0002e5d4
   1b008:	0002e574 	.word	0x0002e574

0001b00c <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1b00c:	424b      	negs	r3, r1
{
   1b00e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1b012:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1b016:	ea31 0303 	bics.w	r3, r1, r3
{
   1b01a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1b01c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   1b01e:	d01b      	beq.n	1b058 <sys_heap_aligned_alloc+0x4c>
		return false;
   1b020:	2f04      	cmp	r7, #4
   1b022:	463d      	mov	r5, r7
   1b024:	bf28      	it	cs
   1b026:	2504      	movcs	r5, #4
   1b028:	46b9      	mov	r9, r7
		align -= rew;
   1b02a:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1b02c:	f107 3aff 	add.w	sl, r7, #4294967295
   1b030:	ea1a 0f07 	tst.w	sl, r7
   1b034:	d00a      	beq.n	1b04c <sys_heap_aligned_alloc+0x40>
   1b036:	4931      	ldr	r1, [pc, #196]	; (1b0fc <sys_heap_aligned_alloc+0xf0>)
   1b038:	4831      	ldr	r0, [pc, #196]	; (1b100 <sys_heap_aligned_alloc+0xf4>)
   1b03a:	f240 1227 	movw	r2, #295	; 0x127
   1b03e:	f00f fc31 	bl	2a8a4 <printk>
   1b042:	f240 1127 	movw	r1, #295	; 0x127
   1b046:	482d      	ldr	r0, [pc, #180]	; (1b0fc <sys_heap_aligned_alloc+0xf0>)
   1b048:	f00f fdc5 	bl	2abd6 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1b04c:	b97c      	cbnz	r4, 1b06e <sys_heap_aligned_alloc+0x62>
		return NULL;
   1b04e:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1b052:	4648      	mov	r0, r9
   1b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1b058:	2904      	cmp	r1, #4
   1b05a:	d804      	bhi.n	1b066 <sys_heap_aligned_alloc+0x5a>
}
   1b05c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1b060:	4611      	mov	r1, r2
   1b062:	f00f bd78 	b.w	2ab56 <sys_heap_alloc>
		rew = 0;
   1b066:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1b06a:	2504      	movs	r5, #4
   1b06c:	e7de      	b.n	1b02c <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1b06e:	68b3      	ldr	r3, [r6, #8]
   1b070:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1b074:	d9eb      	bls.n	1b04e <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b076:	f104 010b 	add.w	r1, r4, #11
   1b07a:	4439      	add	r1, r7
   1b07c:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1b07e:	4630      	mov	r0, r6
   1b080:	08c9      	lsrs	r1, r1, #3
   1b082:	f00f fcd0 	bl	2aa26 <alloc_chunk>
	if (c0 == 0) {
   1b086:	4680      	mov	r8, r0
   1b088:	2800      	cmp	r0, #0
   1b08a:	d0e0      	beq.n	1b04e <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1b08c:	f109 0504 	add.w	r5, r9, #4
   1b090:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1b094:	4435      	add	r5, r6
   1b096:	4455      	add	r5, sl
   1b098:	427f      	negs	r7, r7
   1b09a:	402f      	ands	r7, r5
   1b09c:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b0a0:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b0a2:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b0a6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b0a8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b0aa:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1b0ae:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1b0b0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b0b4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1b0b8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1b0bc:	d208      	bcs.n	1b0d0 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   1b0be:	4601      	mov	r1, r0
   1b0c0:	463a      	mov	r2, r7
   1b0c2:	4630      	mov	r0, r6
   1b0c4:	f00f fcfc 	bl	2aac0 <split_chunks>
		free_list_add(h, c0);
   1b0c8:	4641      	mov	r1, r8
   1b0ca:	4630      	mov	r0, r6
   1b0cc:	f00f fc5a 	bl	2a984 <free_list_add>
	return c + chunk_size(h, c);
   1b0d0:	4639      	mov	r1, r7
   1b0d2:	4630      	mov	r0, r6
   1b0d4:	f00f fc51 	bl	2a97a <chunk_size>
   1b0d8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1b0da:	4284      	cmp	r4, r0
   1b0dc:	d207      	bcs.n	1b0ee <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   1b0de:	4630      	mov	r0, r6
   1b0e0:	4622      	mov	r2, r4
   1b0e2:	f00f fced 	bl	2aac0 <split_chunks>
		free_list_add(h, c_end);
   1b0e6:	4621      	mov	r1, r4
   1b0e8:	4630      	mov	r0, r6
   1b0ea:	f00f fc4b 	bl	2a984 <free_list_add>
	void *cmem = &buf[c];
   1b0ee:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b0f2:	8873      	ldrh	r3, [r6, #2]
   1b0f4:	f043 0301 	orr.w	r3, r3, #1
   1b0f8:	8073      	strh	r3, [r6, #2]
   1b0fa:	e7aa      	b.n	1b052 <sys_heap_aligned_alloc+0x46>
   1b0fc:	0002e5d4 	.word	0x0002e5d4
   1b100:	0002e574 	.word	0x0002e574

0001b104 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1b104:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   1b108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b10c:	4606      	mov	r6, r0
   1b10e:	460d      	mov	r5, r1
   1b110:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1b112:	d35d      	bcc.n	1b1d0 <sys_heap_init+0xcc>
   1b114:	4935      	ldr	r1, [pc, #212]	; (1b1ec <sys_heap_init+0xe8>)
   1b116:	f240 12a5 	movw	r2, #421	; 0x1a5
   1b11a:	4835      	ldr	r0, [pc, #212]	; (1b1f0 <sys_heap_init+0xec>)
   1b11c:	f00f fbc2 	bl	2a8a4 <printk>
   1b120:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1b124:	4831      	ldr	r0, [pc, #196]	; (1b1ec <sys_heap_init+0xe8>)
   1b126:	f00f fd56 	bl	2abd6 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1b12a:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b12c:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b12e:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b130:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b134:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1b138:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1b13a:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1b13c:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1b140:	d80a      	bhi.n	1b158 <sys_heap_init+0x54>
   1b142:	492a      	ldr	r1, [pc, #168]	; (1b1ec <sys_heap_init+0xe8>)
   1b144:	482a      	ldr	r0, [pc, #168]	; (1b1f0 <sys_heap_init+0xec>)
   1b146:	f240 12b5 	movw	r2, #437	; 0x1b5
   1b14a:	f00f fbab 	bl	2a8a4 <printk>
   1b14e:	f240 11b5 	movw	r1, #437	; 0x1b5
   1b152:	4826      	ldr	r0, [pc, #152]	; (1b1ec <sys_heap_init+0xe8>)
   1b154:	f00f fd3f 	bl	2abd6 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1b158:	fab7 f887 	clz	r8, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1b15c:	2300      	movs	r3, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1b15e:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   1b162:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   1b166:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b168:	f108 0607 	add.w	r6, r8, #7
   1b16c:	08f6      	lsrs	r6, r6, #3
	h->avail_buckets = 0;
   1b16e:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1b170:	1c73      	adds	r3, r6, #1
   1b172:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   1b174:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1b176:	d90a      	bls.n	1b18e <sys_heap_init+0x8a>
   1b178:	491c      	ldr	r1, [pc, #112]	; (1b1ec <sys_heap_init+0xe8>)
   1b17a:	481d      	ldr	r0, [pc, #116]	; (1b1f0 <sys_heap_init+0xec>)
   1b17c:	f240 12c5 	movw	r2, #453	; 0x1c5
   1b180:	f00f fb90 	bl	2a8a4 <printk>
   1b184:	f240 11c5 	movw	r1, #453	; 0x1c5
   1b188:	4818      	ldr	r0, [pc, #96]	; (1b1ec <sys_heap_init+0xe8>)
   1b18a:	f00f fd24 	bl	2abd6 <assert_post_action>
   1b18e:	2300      	movs	r3, #0
   1b190:	f104 0210 	add.w	r2, r4, #16
   1b194:	44a0      	add	r8, r4

	for (int i = 0; i < nb_buckets; i++) {
   1b196:	4590      	cmp	r8, r2
   1b198:	d125      	bne.n	1b1e6 <sys_heap_init+0xe2>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b19a:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b19c:	f042 0201 	orr.w	r2, r2, #1
   1b1a0:	8062      	strh	r2, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1b1a2:	1bba      	subs	r2, r7, r6
		((uint16_t *)cmem)[f] = val;
   1b1a4:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b1a8:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   1b1aa:	8023      	strh	r3, [r4, #0]
   1b1ac:	8048      	strh	r0, [r1, #2]
   1b1ae:	1961      	adds	r1, r4, r5
   1b1b0:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   1b1b4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   1b1b8:	804b      	strh	r3, [r1, #2]
   1b1ba:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b1bc:	887b      	ldrh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1b1be:	4631      	mov	r1, r6
   1b1c0:	f043 0301 	orr.w	r3, r3, #1
   1b1c4:	4620      	mov	r0, r4
   1b1c6:	807b      	strh	r3, [r7, #2]
}
   1b1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1b1cc:	f00f bbda 	b.w	2a984 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1b1d0:	2a04      	cmp	r2, #4
   1b1d2:	d8aa      	bhi.n	1b12a <sys_heap_init+0x26>
   1b1d4:	4905      	ldr	r1, [pc, #20]	; (1b1ec <sys_heap_init+0xe8>)
   1b1d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   1b1da:	4805      	ldr	r0, [pc, #20]	; (1b1f0 <sys_heap_init+0xec>)
   1b1dc:	f00f fb62 	bl	2a8a4 <printk>
   1b1e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1b1e4:	e79e      	b.n	1b124 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   1b1e6:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1b1ea:	e7d4      	b.n	1b196 <sys_heap_init+0x92>
   1b1ec:	0002e5d4 	.word	0x0002e5d4
   1b1f0:	0002e574 	.word	0x0002e574

0001b1f4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1f6:	4602      	mov	r2, r0
   1b1f8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   1b1fa:	270a      	movs	r7, #10
	size_t val = 0;
   1b1fc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1b1fe:	4e07      	ldr	r6, [pc, #28]	; (1b21c <extract_decimal+0x28>)
   1b200:	460c      	mov	r4, r1
   1b202:	7823      	ldrb	r3, [r4, #0]
   1b204:	3101      	adds	r1, #1
   1b206:	5d9d      	ldrb	r5, [r3, r6]
   1b208:	076d      	lsls	r5, r5, #29
   1b20a:	d401      	bmi.n	1b210 <extract_decimal+0x1c>
	}
	*str = sp;
   1b20c:	6014      	str	r4, [r2, #0]
	return val;
}
   1b20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1b210:	fb07 3300 	mla	r3, r7, r0, r3
   1b214:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1b218:	e7f2      	b.n	1b200 <extract_decimal+0xc>
   1b21a:	bf00      	nop
   1b21c:	00030d52 	.word	0x00030d52

0001b220 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1b220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b224:	4614      	mov	r4, r2
   1b226:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1b228:	78d3      	ldrb	r3, [r2, #3]
   1b22a:	4a24      	ldr	r2, [pc, #144]	; (1b2bc <encode_uint+0x9c>)
	switch (specifier) {
   1b22c:	2b6f      	cmp	r3, #111	; 0x6f
   1b22e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   1b232:	4606      	mov	r6, r0
   1b234:	f00a 0203 	and.w	r2, sl, #3
   1b238:	460f      	mov	r7, r1
   1b23a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1b23c:	d02d      	beq.n	1b29a <encode_uint+0x7a>
   1b23e:	d828      	bhi.n	1b292 <encode_uint+0x72>
		return 16;
   1b240:	2b58      	cmp	r3, #88	; 0x58
   1b242:	bf14      	ite	ne
   1b244:	250a      	movne	r5, #10
   1b246:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1b248:	46aa      	mov	sl, r5
   1b24a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1b24e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1b252:	4652      	mov	r2, sl
   1b254:	465b      	mov	r3, fp
   1b256:	4630      	mov	r0, r6
   1b258:	4639      	mov	r1, r7
   1b25a:	f7fd ff21 	bl	190a0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b25e:	2a09      	cmp	r2, #9
   1b260:	b2d3      	uxtb	r3, r2
   1b262:	d81f      	bhi.n	1b2a4 <encode_uint+0x84>
   1b264:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1b266:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b268:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1b26a:	bf08      	it	eq
   1b26c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b26e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1b272:	d301      	bcc.n	1b278 <encode_uint+0x58>
   1b274:	45c8      	cmp	r8, r9
   1b276:	d812      	bhi.n	1b29e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1b278:	7823      	ldrb	r3, [r4, #0]
   1b27a:	069b      	lsls	r3, r3, #26
   1b27c:	d505      	bpl.n	1b28a <encode_uint+0x6a>
		if (radix == 8) {
   1b27e:	2d08      	cmp	r5, #8
   1b280:	d116      	bne.n	1b2b0 <encode_uint+0x90>
			conv->altform_0 = true;
   1b282:	78a3      	ldrb	r3, [r4, #2]
   1b284:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1b288:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1b28a:	4640      	mov	r0, r8
   1b28c:	b003      	add	sp, #12
   1b28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b292:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1b296:	2b70      	cmp	r3, #112	; 0x70
   1b298:	e7d3      	b.n	1b242 <encode_uint+0x22>
	switch (specifier) {
   1b29a:	2508      	movs	r5, #8
   1b29c:	e7d4      	b.n	1b248 <encode_uint+0x28>
		value /= radix;
   1b29e:	4606      	mov	r6, r0
   1b2a0:	460f      	mov	r7, r1
   1b2a2:	e7d6      	b.n	1b252 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b2a4:	9a01      	ldr	r2, [sp, #4]
   1b2a6:	2a01      	cmp	r2, #1
   1b2a8:	bf0c      	ite	eq
   1b2aa:	3337      	addeq	r3, #55	; 0x37
   1b2ac:	3357      	addne	r3, #87	; 0x57
   1b2ae:	e7da      	b.n	1b266 <encode_uint+0x46>
		} else if (radix == 16) {
   1b2b0:	2d10      	cmp	r5, #16
   1b2b2:	d1ea      	bne.n	1b28a <encode_uint+0x6a>
			conv->altform_0c = true;
   1b2b4:	78a3      	ldrb	r3, [r4, #2]
   1b2b6:	f043 0310 	orr.w	r3, r3, #16
   1b2ba:	e7e5      	b.n	1b288 <encode_uint+0x68>
   1b2bc:	00030d52 	.word	0x00030d52

0001b2c0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2c4:	4682      	mov	sl, r0
   1b2c6:	468b      	mov	fp, r1
   1b2c8:	4691      	mov	r9, r2
   1b2ca:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1b2cc:	2500      	movs	r5, #0
{
   1b2ce:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1b2d0:	f899 0000 	ldrb.w	r0, [r9]
   1b2d4:	b908      	cbnz	r0, 1b2da <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1b2d6:	4628      	mov	r0, r5
   1b2d8:	e33a      	b.n	1b950 <cbvprintf+0x690>
		if (*fp != '%') {
   1b2da:	f109 0301 	add.w	r3, r9, #1
   1b2de:	2825      	cmp	r0, #37	; 0x25
   1b2e0:	9302      	str	r3, [sp, #8]
   1b2e2:	d006      	beq.n	1b2f2 <cbvprintf+0x32>
			OUTC('%');
   1b2e4:	4659      	mov	r1, fp
   1b2e6:	47d0      	blx	sl
   1b2e8:	2800      	cmp	r0, #0
   1b2ea:	f2c0 8331 	blt.w	1b950 <cbvprintf+0x690>
   1b2ee:	3501      	adds	r5, #1
			break;
   1b2f0:	e1f1      	b.n	1b6d6 <cbvprintf+0x416>
		} state = {
   1b2f2:	2218      	movs	r2, #24
   1b2f4:	2100      	movs	r1, #0
   1b2f6:	a80c      	add	r0, sp, #48	; 0x30
   1b2f8:	f011 fc78 	bl	2cbec <memset>
	if (*sp == '%') {
   1b2fc:	f899 3001 	ldrb.w	r3, [r9, #1]
   1b300:	2b25      	cmp	r3, #37	; 0x25
   1b302:	d059      	beq.n	1b3b8 <cbvprintf+0xf8>
   1b304:	9a02      	ldr	r2, [sp, #8]
   1b306:	4616      	mov	r6, r2
		switch (*sp) {
   1b308:	f812 3b01 	ldrb.w	r3, [r2], #1
   1b30c:	2b2b      	cmp	r3, #43	; 0x2b
   1b30e:	f000 808b 	beq.w	1b428 <cbvprintf+0x168>
   1b312:	d879      	bhi.n	1b408 <cbvprintf+0x148>
   1b314:	2b20      	cmp	r3, #32
   1b316:	f000 808c 	beq.w	1b432 <cbvprintf+0x172>
   1b31a:	2b23      	cmp	r3, #35	; 0x23
   1b31c:	f000 808e 	beq.w	1b43c <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   1b320:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b324:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1b328:	2a44      	cmp	r2, #68	; 0x44
   1b32a:	d103      	bne.n	1b334 <cbvprintf+0x74>
		conv->flag_zero = false;
   1b32c:	f36f 1386 	bfc	r3, #6, #1
   1b330:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1b334:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b338:	9605      	str	r6, [sp, #20]
   1b33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b33e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1b342:	7833      	ldrb	r3, [r6, #0]
   1b344:	2b2a      	cmp	r3, #42	; 0x2a
   1b346:	d17e      	bne.n	1b446 <cbvprintf+0x186>
		conv->width_star = true;
   1b348:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b34c:	f043 0301 	orr.w	r3, r3, #1
   1b350:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1b354:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   1b356:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1b358:	781a      	ldrb	r2, [r3, #0]
   1b35a:	2a2e      	cmp	r2, #46	; 0x2e
   1b35c:	bf0c      	ite	eq
   1b35e:	2101      	moveq	r1, #1
   1b360:	2100      	movne	r1, #0
   1b362:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b366:	f361 0241 	bfi	r2, r1, #1, #1
   1b36a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1b36e:	d10b      	bne.n	1b388 <cbvprintf+0xc8>
	++sp;
   1b370:	1c5a      	adds	r2, r3, #1
   1b372:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1b374:	785a      	ldrb	r2, [r3, #1]
   1b376:	2a2a      	cmp	r2, #42	; 0x2a
   1b378:	d17b      	bne.n	1b472 <cbvprintf+0x1b2>
		conv->prec_star = true;
   1b37a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1b37e:	3302      	adds	r3, #2
		conv->prec_star = true;
   1b380:	f042 0204 	orr.w	r2, r2, #4
   1b384:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   1b388:	4619      	mov	r1, r3
   1b38a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b38e:	286c      	cmp	r0, #108	; 0x6c
   1b390:	f000 80b6 	beq.w	1b500 <cbvprintf+0x240>
   1b394:	d87d      	bhi.n	1b492 <cbvprintf+0x1d2>
   1b396:	2868      	cmp	r0, #104	; 0x68
   1b398:	f000 8084 	beq.w	1b4a4 <cbvprintf+0x1e4>
   1b39c:	286a      	cmp	r0, #106	; 0x6a
   1b39e:	f000 80b9 	beq.w	1b514 <cbvprintf+0x254>
   1b3a2:	284c      	cmp	r0, #76	; 0x4c
   1b3a4:	f000 80bd 	beq.w	1b522 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   1b3a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1b3ac:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1b3ae:	f36f 02c6 	bfc	r2, #3, #4
   1b3b2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1b3b6:	e080      	b.n	1b4ba <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   1b3b8:	f109 0202 	add.w	r2, r9, #2
   1b3bc:	9202      	str	r2, [sp, #8]
   1b3be:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1b3c2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b3c6:	07d9      	lsls	r1, r3, #31
   1b3c8:	f140 8149 	bpl.w	1b65e <cbvprintf+0x39e>
			width = va_arg(ap, int);
   1b3cc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1b3d0:	f1b8 0f00 	cmp.w	r8, #0
   1b3d4:	da07      	bge.n	1b3e6 <cbvprintf+0x126>
				conv->flag_dash = true;
   1b3d6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1b3da:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   1b3de:	f042 0204 	orr.w	r2, r2, #4
   1b3e2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1b3e6:	075a      	lsls	r2, r3, #29
   1b3e8:	f140 8142 	bpl.w	1b670 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   1b3ec:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   1b3f0:	2f00      	cmp	r7, #0
   1b3f2:	f280 8141 	bge.w	1b678 <cbvprintf+0x3b8>
				conv->prec_present = false;
   1b3f6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b3fa:	f36f 0341 	bfc	r3, #1, #1
   1b3fe:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1b402:	f04f 37ff 	mov.w	r7, #4294967295
   1b406:	e137      	b.n	1b678 <cbvprintf+0x3b8>
		switch (*sp) {
   1b408:	2b2d      	cmp	r3, #45	; 0x2d
   1b40a:	d006      	beq.n	1b41a <cbvprintf+0x15a>
   1b40c:	2b30      	cmp	r3, #48	; 0x30
   1b40e:	d187      	bne.n	1b320 <cbvprintf+0x60>
			conv->flag_zero = true;
   1b410:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b418:	e003      	b.n	1b422 <cbvprintf+0x162>
			conv->flag_dash = true;
   1b41a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b41e:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1b422:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1b426:	e76e      	b.n	1b306 <cbvprintf+0x46>
			conv->flag_plus = true;
   1b428:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b42c:	f043 0308 	orr.w	r3, r3, #8
   1b430:	e7f7      	b.n	1b422 <cbvprintf+0x162>
			conv->flag_space = true;
   1b432:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b436:	f043 0310 	orr.w	r3, r3, #16
   1b43a:	e7f2      	b.n	1b422 <cbvprintf+0x162>
			conv->flag_hash = true;
   1b43c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b440:	f043 0320 	orr.w	r3, r3, #32
   1b444:	e7ed      	b.n	1b422 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   1b446:	a805      	add	r0, sp, #20
   1b448:	f7ff fed4 	bl	1b1f4 <extract_decimal>
	if (sp != wp) {
   1b44c:	9b05      	ldr	r3, [sp, #20]
   1b44e:	42b3      	cmp	r3, r6
   1b450:	d081      	beq.n	1b356 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   1b452:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   1b456:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1b458:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1b45c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1b460:	0052      	lsls	r2, r2, #1
   1b462:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b466:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1b46a:	430a      	orrs	r2, r1
   1b46c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1b470:	e771      	b.n	1b356 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   1b472:	a805      	add	r0, sp, #20
   1b474:	f7ff febe 	bl	1b1f4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1b478:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1b47c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1b47e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b482:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1b486:	f360 0341 	bfi	r3, r0, #1, #1
   1b48a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1b48e:	9b05      	ldr	r3, [sp, #20]
   1b490:	e77a      	b.n	1b388 <cbvprintf+0xc8>
	switch (*sp) {
   1b492:	2874      	cmp	r0, #116	; 0x74
   1b494:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b498:	d040      	beq.n	1b51c <cbvprintf+0x25c>
   1b49a:	287a      	cmp	r0, #122	; 0x7a
   1b49c:	d184      	bne.n	1b3a8 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   1b49e:	4613      	mov	r3, r2
   1b4a0:	2206      	movs	r2, #6
   1b4a2:	e028      	b.n	1b4f6 <cbvprintf+0x236>
		if (*++sp == 'h') {
   1b4a4:	785a      	ldrb	r2, [r3, #1]
   1b4a6:	2a68      	cmp	r2, #104	; 0x68
   1b4a8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b4ac:	d121      	bne.n	1b4f2 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   1b4ae:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1b4b0:	f361 02c6 	bfi	r2, r1, #3, #4
   1b4b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1b4b8:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1b4ba:	460b      	mov	r3, r1
   1b4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1b4c0:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1b4c2:	9302      	str	r3, [sp, #8]
   1b4c4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   1b4c8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b4cc:	f200 80bf 	bhi.w	1b64e <cbvprintf+0x38e>
   1b4d0:	2a57      	cmp	r2, #87	; 0x57
   1b4d2:	d833      	bhi.n	1b53c <cbvprintf+0x27c>
   1b4d4:	2a41      	cmp	r2, #65	; 0x41
   1b4d6:	d003      	beq.n	1b4e0 <cbvprintf+0x220>
   1b4d8:	3a45      	subs	r2, #69	; 0x45
   1b4da:	2a02      	cmp	r2, #2
   1b4dc:	f200 80b7 	bhi.w	1b64e <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   1b4e0:	2204      	movs	r2, #4
   1b4e2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b4e6:	f362 0302 	bfi	r3, r2, #0, #3
   1b4ea:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   1b4ee:	2301      	movs	r3, #1
			break;
   1b4f0:	e084      	b.n	1b5fc <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   1b4f2:	4613      	mov	r3, r2
   1b4f4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1b4f6:	f362 03c6 	bfi	r3, r2, #3, #4
   1b4fa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1b4fe:	e7dc      	b.n	1b4ba <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   1b500:	785a      	ldrb	r2, [r3, #1]
   1b502:	2a6c      	cmp	r2, #108	; 0x6c
   1b504:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b508:	d101      	bne.n	1b50e <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   1b50a:	2104      	movs	r1, #4
   1b50c:	e7d0      	b.n	1b4b0 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   1b50e:	4613      	mov	r3, r2
   1b510:	2203      	movs	r2, #3
   1b512:	e7f0      	b.n	1b4f6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   1b514:	2205      	movs	r2, #5
   1b516:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b51a:	e7ec      	b.n	1b4f6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   1b51c:	4613      	mov	r3, r2
   1b51e:	2207      	movs	r2, #7
   1b520:	e7e9      	b.n	1b4f6 <cbvprintf+0x236>
		conv->unsupported = true;
   1b522:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1b526:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1b52a:	f023 0302 	bic.w	r3, r3, #2
   1b52e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b532:	f043 0302 	orr.w	r3, r3, #2
   1b536:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1b53a:	e7be      	b.n	1b4ba <cbvprintf+0x1fa>
   1b53c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1b540:	2920      	cmp	r1, #32
   1b542:	f200 8084 	bhi.w	1b64e <cbvprintf+0x38e>
   1b546:	a001      	add	r0, pc, #4	; (adr r0, 1b54c <cbvprintf+0x28c>)
   1b548:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1b54c:	0001b611 	.word	0x0001b611
   1b550:	0001b64f 	.word	0x0001b64f
   1b554:	0001b64f 	.word	0x0001b64f
   1b558:	0001b64f 	.word	0x0001b64f
   1b55c:	0001b64f 	.word	0x0001b64f
   1b560:	0001b64f 	.word	0x0001b64f
   1b564:	0001b64f 	.word	0x0001b64f
   1b568:	0001b64f 	.word	0x0001b64f
   1b56c:	0001b64f 	.word	0x0001b64f
   1b570:	0001b4e1 	.word	0x0001b4e1
   1b574:	0001b64f 	.word	0x0001b64f
   1b578:	0001b611 	.word	0x0001b611
   1b57c:	0001b5d1 	.word	0x0001b5d1
   1b580:	0001b4e1 	.word	0x0001b4e1
   1b584:	0001b4e1 	.word	0x0001b4e1
   1b588:	0001b4e1 	.word	0x0001b4e1
   1b58c:	0001b64f 	.word	0x0001b64f
   1b590:	0001b5d1 	.word	0x0001b5d1
   1b594:	0001b64f 	.word	0x0001b64f
   1b598:	0001b64f 	.word	0x0001b64f
   1b59c:	0001b64f 	.word	0x0001b64f
   1b5a0:	0001b64f 	.word	0x0001b64f
   1b5a4:	0001b619 	.word	0x0001b619
   1b5a8:	0001b611 	.word	0x0001b611
   1b5ac:	0001b635 	.word	0x0001b635
   1b5b0:	0001b64f 	.word	0x0001b64f
   1b5b4:	0001b64f 	.word	0x0001b64f
   1b5b8:	0001b635 	.word	0x0001b635
   1b5bc:	0001b64f 	.word	0x0001b64f
   1b5c0:	0001b611 	.word	0x0001b611
   1b5c4:	0001b64f 	.word	0x0001b64f
   1b5c8:	0001b64f 	.word	0x0001b64f
   1b5cc:	0001b611 	.word	0x0001b611
		conv->specifier_cat = SPECIFIER_SINT;
   1b5d0:	2001      	movs	r0, #1
   1b5d2:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b5d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1b5da:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b5de:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1b5e0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   1b5e4:	bf02      	ittt	eq
   1b5e6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1b5ea:	f041 0101 	orreq.w	r1, r1, #1
   1b5ee:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1b5f2:	2a63      	cmp	r2, #99	; 0x63
   1b5f4:	d131      	bne.n	1b65a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1b5f6:	3b00      	subs	r3, #0
   1b5f8:	bf18      	it	ne
   1b5fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1b5fc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1b600:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1b604:	430b      	orrs	r3, r1
   1b606:	f363 0241 	bfi	r2, r3, #1, #1
   1b60a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1b60e:	e6d8      	b.n	1b3c2 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   1b610:	2002      	movs	r0, #2
   1b612:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1b616:	e7de      	b.n	1b5d6 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   1b618:	2103      	movs	r1, #3
   1b61a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b61e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1b622:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1b626:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b62a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1b62c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b630:	4143      	adcs	r3, r0
   1b632:	e7e3      	b.n	1b5fc <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   1b634:	2103      	movs	r1, #3
   1b636:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1b63a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1b63e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1b642:	bf14      	ite	ne
   1b644:	2301      	movne	r3, #1
   1b646:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   1b648:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1b64c:	e7d6      	b.n	1b5fc <cbvprintf+0x33c>
		conv->invalid = true;
   1b64e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b652:	f043 0301 	orr.w	r3, r3, #1
   1b656:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1b65a:	2300      	movs	r3, #0
   1b65c:	e7ce      	b.n	1b5fc <cbvprintf+0x33c>
		} else if (conv->width_present) {
   1b65e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1b662:	2a00      	cmp	r2, #0
		int width = -1;
   1b664:	bfac      	ite	ge
   1b666:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   1b66a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
   1b66e:	e6ba      	b.n	1b3e6 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   1b670:	079f      	lsls	r7, r3, #30
   1b672:	f57f aec6 	bpl.w	1b402 <cbvprintf+0x142>
			precision = conv->prec_value;
   1b676:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   1b678:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1b67a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1b67e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
   1b682:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
   1b686:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1b68a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1b68c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1b690:	d137      	bne.n	1b702 <cbvprintf+0x442>
			switch (length_mod) {
   1b692:	1ecb      	subs	r3, r1, #3
   1b694:	2b04      	cmp	r3, #4
   1b696:	d821      	bhi.n	1b6dc <cbvprintf+0x41c>
   1b698:	e8df f003 	tbb	[pc, r3]
   1b69c:	20070703 	.word	0x20070703
   1b6a0:	20          	.byte	0x20
   1b6a1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1b6a2:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1b6a6:	17d3      	asrs	r3, r2, #31
   1b6a8:	e004      	b.n	1b6b4 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1b6aa:	3407      	adds	r4, #7
   1b6ac:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1b6b0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   1b6b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1b6b8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b6bc:	f013 0603 	ands.w	r6, r3, #3
   1b6c0:	d055      	beq.n	1b76e <cbvprintf+0x4ae>
			OUTS(sp, fp);
   1b6c2:	464a      	mov	r2, r9
   1b6c4:	4659      	mov	r1, fp
   1b6c6:	4650      	mov	r0, sl
   1b6c8:	9b02      	ldr	r3, [sp, #8]
   1b6ca:	f00f fa6e 	bl	2abaa <outs>
   1b6ce:	2800      	cmp	r0, #0
   1b6d0:	f2c0 813e 	blt.w	1b950 <cbvprintf+0x690>
   1b6d4:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1b6d6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1b6da:	e5f9      	b.n	1b2d0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1b6dc:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   1b6e0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1b6e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1b6e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1b6ea:	d105      	bne.n	1b6f8 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   1b6ec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   1b6f0:	930c      	str	r3, [sp, #48]	; 0x30
   1b6f2:	2300      	movs	r3, #0
   1b6f4:	930d      	str	r3, [sp, #52]	; 0x34
   1b6f6:	e7df      	b.n	1b6b8 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   1b6f8:	2902      	cmp	r1, #2
   1b6fa:	d1dd      	bne.n	1b6b8 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   1b6fc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   1b700:	e7d1      	b.n	1b6a6 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1b702:	2b02      	cmp	r3, #2
   1b704:	d123      	bne.n	1b74e <cbvprintf+0x48e>
			switch (length_mod) {
   1b706:	1ecb      	subs	r3, r1, #3
   1b708:	2b04      	cmp	r3, #4
   1b70a:	d813      	bhi.n	1b734 <cbvprintf+0x474>
   1b70c:	e8df f003 	tbb	[pc, r3]
   1b710:	120a0a03 	.word	0x120a0a03
   1b714:	12          	.byte	0x12
   1b715:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1b716:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   1b718:	6822      	ldr	r2, [r4, #0]
   1b71a:	1d20      	adds	r0, r4, #4
   1b71c:	920c      	str	r2, [sp, #48]	; 0x30
   1b71e:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   1b720:	4604      	mov	r4, r0
   1b722:	e7c9      	b.n	1b6b8 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   1b724:	3407      	adds	r4, #7
   1b726:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   1b72a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1b72e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   1b732:	e7f5      	b.n	1b720 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   1b734:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1b738:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1b73a:	930c      	str	r3, [sp, #48]	; 0x30
   1b73c:	f04f 0300 	mov.w	r3, #0
   1b740:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   1b742:	d0d3      	beq.n	1b6ec <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   1b744:	2902      	cmp	r1, #2
   1b746:	d1b7      	bne.n	1b6b8 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   1b748:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1b74c:	e7d0      	b.n	1b6f0 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   1b74e:	2b04      	cmp	r3, #4
   1b750:	d107      	bne.n	1b762 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   1b752:	3407      	adds	r4, #7
   1b754:	f024 0407 	bic.w	r4, r4, #7
   1b758:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1b75c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1b760:	e7aa      	b.n	1b6b8 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1b762:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1b764:	bf04      	itt	eq
   1b766:	f854 3b04 	ldreq.w	r3, [r4], #4
   1b76a:	930c      	streq	r3, [sp, #48]	; 0x30
   1b76c:	e7a4      	b.n	1b6b8 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   1b76e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1b772:	2878      	cmp	r0, #120	; 0x78
   1b774:	d8af      	bhi.n	1b6d6 <cbvprintf+0x416>
   1b776:	2862      	cmp	r0, #98	; 0x62
   1b778:	d820      	bhi.n	1b7bc <cbvprintf+0x4fc>
   1b77a:	2825      	cmp	r0, #37	; 0x25
   1b77c:	f43f adb2 	beq.w	1b2e4 <cbvprintf+0x24>
   1b780:	2858      	cmp	r0, #88	; 0x58
   1b782:	d1a8      	bne.n	1b6d6 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1b784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b788:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1b78c:	9300      	str	r3, [sp, #0]
   1b78e:	aa0e      	add	r2, sp, #56	; 0x38
   1b790:	ab06      	add	r3, sp, #24
   1b792:	f7ff fd45 	bl	1b220 <encode_uint>
   1b796:	4681      	mov	r9, r0
			if (precision >= 0) {
   1b798:	2f00      	cmp	r7, #0
   1b79a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1b79e:	db0b      	blt.n	1b7b8 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   1b7a0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1b7a4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   1b7a8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1b7ac:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1b7ae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1b7b2:	d901      	bls.n	1b7b8 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   1b7b4:	1aff      	subs	r7, r7, r3
   1b7b6:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1b7b8:	4607      	mov	r7, r0
   1b7ba:	e03c      	b.n	1b836 <cbvprintf+0x576>
   1b7bc:	3863      	subs	r0, #99	; 0x63
   1b7be:	2815      	cmp	r0, #21
   1b7c0:	d889      	bhi.n	1b6d6 <cbvprintf+0x416>
   1b7c2:	a201      	add	r2, pc, #4	; (adr r2, 1b7c8 <cbvprintf+0x508>)
   1b7c4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1b7c8:	0001b847 	.word	0x0001b847
   1b7cc:	0001b8a9 	.word	0x0001b8a9
   1b7d0:	0001b6d7 	.word	0x0001b6d7
   1b7d4:	0001b6d7 	.word	0x0001b6d7
   1b7d8:	0001b6d7 	.word	0x0001b6d7
   1b7dc:	0001b6d7 	.word	0x0001b6d7
   1b7e0:	0001b8a9 	.word	0x0001b8a9
   1b7e4:	0001b6d7 	.word	0x0001b6d7
   1b7e8:	0001b6d7 	.word	0x0001b6d7
   1b7ec:	0001b6d7 	.word	0x0001b6d7
   1b7f0:	0001b6d7 	.word	0x0001b6d7
   1b7f4:	0001b907 	.word	0x0001b907
   1b7f8:	0001b8d5 	.word	0x0001b8d5
   1b7fc:	0001b8d9 	.word	0x0001b8d9
   1b800:	0001b6d7 	.word	0x0001b6d7
   1b804:	0001b6d7 	.word	0x0001b6d7
   1b808:	0001b821 	.word	0x0001b821
   1b80c:	0001b6d7 	.word	0x0001b6d7
   1b810:	0001b8d5 	.word	0x0001b8d5
   1b814:	0001b6d7 	.word	0x0001b6d7
   1b818:	0001b6d7 	.word	0x0001b6d7
   1b81c:	0001b8d5 	.word	0x0001b8d5
			if (precision >= 0) {
   1b820:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   1b822:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   1b826:	db0a      	blt.n	1b83e <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   1b828:	4639      	mov	r1, r7
   1b82a:	4648      	mov	r0, r9
   1b82c:	f011 fb30 	bl	2ce90 <strnlen>
		char sign = 0;
   1b830:	2600      	movs	r6, #0
			bpe = bps + len;
   1b832:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
   1b836:	f1b9 0f00 	cmp.w	r9, #0
   1b83a:	d10c      	bne.n	1b856 <cbvprintf+0x596>
   1b83c:	e74b      	b.n	1b6d6 <cbvprintf+0x416>
				len = strlen(bps);
   1b83e:	4648      	mov	r0, r9
   1b840:	f7fd fe7c 	bl	1953c <strlen>
   1b844:	e7f4      	b.n	1b830 <cbvprintf+0x570>
			break;
   1b846:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1b848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1b84a:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1b84e:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
   1b852:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   1b856:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1b85a:	b106      	cbz	r6, 1b85e <cbvprintf+0x59e>
			nj_len += 1U;
   1b85c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1b85e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1b862:	06d0      	lsls	r0, r2, #27
   1b864:	d569      	bpl.n	1b93a <cbvprintf+0x67a>
			nj_len += 2U;
   1b866:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1b868:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1b86a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   1b86c:	bf48      	it	mi
   1b86e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   1b870:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1b872:	bf48      	it	mi
   1b874:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1b876:	f1b8 0f00 	cmp.w	r8, #0
   1b87a:	dd76      	ble.n	1b96a <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   1b87c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   1b880:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1b884:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1b888:	9303      	str	r3, [sp, #12]
   1b88a:	0753      	lsls	r3, r2, #29
   1b88c:	d46d      	bmi.n	1b96a <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   1b88e:	0650      	lsls	r0, r2, #25
   1b890:	d561      	bpl.n	1b956 <cbvprintf+0x696>
					if (sign != 0) {
   1b892:	b13e      	cbz	r6, 1b8a4 <cbvprintf+0x5e4>
						OUTC(sign);
   1b894:	4659      	mov	r1, fp
   1b896:	4630      	mov	r0, r6
   1b898:	47d0      	blx	sl
   1b89a:	2800      	cmp	r0, #0
   1b89c:	db58      	blt.n	1b950 <cbvprintf+0x690>
						sign = 0;
   1b89e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1b8a0:	3501      	adds	r5, #1
						sign = 0;
   1b8a2:	461e      	mov	r6, r3
					pad = '0';
   1b8a4:	2330      	movs	r3, #48	; 0x30
   1b8a6:	e057      	b.n	1b958 <cbvprintf+0x698>
			if (conv->flag_plus) {
   1b8a8:	071e      	lsls	r6, r3, #28
   1b8aa:	d411      	bmi.n	1b8d0 <cbvprintf+0x610>
				sign = ' ';
   1b8ac:	f013 0610 	ands.w	r6, r3, #16
   1b8b0:	bf18      	it	ne
   1b8b2:	2620      	movne	r6, #32
			sint = value->sint;
   1b8b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1b8b8:	2a00      	cmp	r2, #0
   1b8ba:	f173 0100 	sbcs.w	r1, r3, #0
   1b8be:	f6bf af61 	bge.w	1b784 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   1b8c2:	4252      	negs	r2, r2
   1b8c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1b8c8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1b8ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1b8ce:	e759      	b.n	1b784 <cbvprintf+0x4c4>
				sign = '+';
   1b8d0:	262b      	movs	r6, #43	; 0x2b
   1b8d2:	e7ef      	b.n	1b8b4 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   1b8d4:	2600      	movs	r6, #0
   1b8d6:	e755      	b.n	1b784 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   1b8d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b8da:	b348      	cbz	r0, 1b930 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1b8dc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1b8e0:	9300      	str	r3, [sp, #0]
   1b8e2:	2100      	movs	r1, #0
   1b8e4:	ab06      	add	r3, sp, #24
   1b8e6:	aa0e      	add	r2, sp, #56	; 0x38
   1b8e8:	f7ff fc9a 	bl	1b220 <encode_uint>
				conv->altform_0c = true;
   1b8ec:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1b8f0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1b8f2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1b8f6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1b8fa:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1b8fe:	2600      	movs	r6, #0
				conv->altform_0c = true;
   1b900:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1b904:	e748      	b.n	1b798 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   1b906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1b908:	2907      	cmp	r1, #7
   1b90a:	f63f aee4 	bhi.w	1b6d6 <cbvprintf+0x416>
   1b90e:	e8df f001 	tbb	[pc, r1]
   1b912:	040d      	.short	0x040d
   1b914:	08080d06 	.word	0x08080d06
   1b918:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1b91a:	701d      	strb	r5, [r3, #0]
		break;
   1b91c:	e6db      	b.n	1b6d6 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   1b91e:	801d      	strh	r5, [r3, #0]
		break;
   1b920:	e6d9      	b.n	1b6d6 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   1b922:	4628      	mov	r0, r5
   1b924:	17e9      	asrs	r1, r5, #31
   1b926:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1b92a:	e6d4      	b.n	1b6d6 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1b92c:	601d      	str	r5, [r3, #0]
		break;
   1b92e:	e6d2      	b.n	1b6d6 <cbvprintf+0x416>
			bpe = bps + 5;
   1b930:	4f2e      	ldr	r7, [pc, #184]	; (1b9ec <cbvprintf+0x72c>)
   1b932:	4606      	mov	r6, r0
			bps = "(nil)";
   1b934:	f1a7 0905 	sub.w	r9, r7, #5
   1b938:	e78d      	b.n	1b856 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   1b93a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1b93c:	bf48      	it	mi
   1b93e:	3301      	addmi	r3, #1
   1b940:	e792      	b.n	1b868 <cbvprintf+0x5a8>
					OUTC(pad);
   1b942:	4618      	mov	r0, r3
   1b944:	4659      	mov	r1, fp
   1b946:	9303      	str	r3, [sp, #12]
   1b948:	47d0      	blx	sl
   1b94a:	2800      	cmp	r0, #0
   1b94c:	9b03      	ldr	r3, [sp, #12]
   1b94e:	da04      	bge.n	1b95a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   1b950:	b013      	add	sp, #76	; 0x4c
   1b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1b956:	2320      	movs	r3, #32
   1b958:	4445      	add	r5, r8
   1b95a:	4642      	mov	r2, r8
				while (width-- > 0) {
   1b95c:	2a00      	cmp	r2, #0
   1b95e:	eba5 0108 	sub.w	r1, r5, r8
   1b962:	f108 38ff 	add.w	r8, r8, #4294967295
   1b966:	dcec      	bgt.n	1b942 <cbvprintf+0x682>
   1b968:	460d      	mov	r5, r1
		if (sign != 0) {
   1b96a:	b12e      	cbz	r6, 1b978 <cbvprintf+0x6b8>
			OUTC(sign);
   1b96c:	4659      	mov	r1, fp
   1b96e:	4630      	mov	r0, r6
   1b970:	47d0      	blx	sl
   1b972:	2800      	cmp	r0, #0
   1b974:	dbec      	blt.n	1b950 <cbvprintf+0x690>
   1b976:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1b978:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b97c:	06d9      	lsls	r1, r3, #27
   1b97e:	d401      	bmi.n	1b984 <cbvprintf+0x6c4>
   1b980:	071a      	lsls	r2, r3, #28
   1b982:	d505      	bpl.n	1b990 <cbvprintf+0x6d0>
				OUTC('0');
   1b984:	4659      	mov	r1, fp
   1b986:	2030      	movs	r0, #48	; 0x30
   1b988:	47d0      	blx	sl
   1b98a:	2800      	cmp	r0, #0
   1b98c:	dbe0      	blt.n	1b950 <cbvprintf+0x690>
   1b98e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1b990:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b994:	06db      	lsls	r3, r3, #27
   1b996:	d506      	bpl.n	1b9a6 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   1b998:	4659      	mov	r1, fp
   1b99a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1b99e:	47d0      	blx	sl
   1b9a0:	2800      	cmp	r0, #0
   1b9a2:	dbd5      	blt.n	1b950 <cbvprintf+0x690>
   1b9a4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1b9a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1b9a8:	442e      	add	r6, r5
   1b9aa:	1b73      	subs	r3, r6, r5
   1b9ac:	2b00      	cmp	r3, #0
   1b9ae:	dc15      	bgt.n	1b9dc <cbvprintf+0x71c>
			OUTS(bps, bpe);
   1b9b0:	463b      	mov	r3, r7
   1b9b2:	464a      	mov	r2, r9
   1b9b4:	4659      	mov	r1, fp
   1b9b6:	4650      	mov	r0, sl
   1b9b8:	f00f f8f7 	bl	2abaa <outs>
   1b9bc:	2800      	cmp	r0, #0
   1b9be:	dbc7      	blt.n	1b950 <cbvprintf+0x690>
   1b9c0:	4405      	add	r5, r0
		while (width > 0) {
   1b9c2:	44a8      	add	r8, r5
   1b9c4:	eba8 0305 	sub.w	r3, r8, r5
   1b9c8:	2b00      	cmp	r3, #0
   1b9ca:	f77f ae84 	ble.w	1b6d6 <cbvprintf+0x416>
			OUTC(' ');
   1b9ce:	4659      	mov	r1, fp
   1b9d0:	2020      	movs	r0, #32
   1b9d2:	47d0      	blx	sl
   1b9d4:	2800      	cmp	r0, #0
   1b9d6:	dbbb      	blt.n	1b950 <cbvprintf+0x690>
   1b9d8:	3501      	adds	r5, #1
			--width;
   1b9da:	e7f3      	b.n	1b9c4 <cbvprintf+0x704>
				OUTC('0');
   1b9dc:	4659      	mov	r1, fp
   1b9de:	2030      	movs	r0, #48	; 0x30
   1b9e0:	47d0      	blx	sl
   1b9e2:	2800      	cmp	r0, #0
   1b9e4:	dbb4      	blt.n	1b950 <cbvprintf+0x690>
   1b9e6:	3501      	adds	r5, #1
   1b9e8:	e7df      	b.n	1b9aa <cbvprintf+0x6ea>
   1b9ea:	bf00      	nop
   1b9ec:	0002e5fa 	.word	0x0002e5fa

0001b9f0 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1b9f0:	f04f 0220 	mov.w	r2, #32
   1b9f4:	f3ef 8311 	mrs	r3, BASEPRI
   1b9f8:	f382 8812 	msr	BASEPRI_MAX, r2
   1b9fc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1ba00:	2101      	movs	r1, #1
   1ba02:	4a04      	ldr	r2, [pc, #16]	; (1ba14 <nordicsemi_nrf91_init+0x24>)
   1ba04:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1ba08:	f383 8811 	msr	BASEPRI, r3
   1ba0c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ba10:	2000      	movs	r0, #0
   1ba12:	4770      	bx	lr
   1ba14:	40039000 	.word	0x40039000

0001ba18 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1ba18:	b120      	cbz	r0, 1ba24 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1ba1a:	4b03      	ldr	r3, [pc, #12]	; (1ba28 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1ba1c:	0180      	lsls	r0, r0, #6
   1ba1e:	f043 0301 	orr.w	r3, r3, #1
   1ba22:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1ba24:	4770      	bx	lr
   1ba26:	bf00      	nop
   1ba28:	0002dd50 	.word	0x0002dd50

0001ba2c <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1ba30:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1bab0 <z_impl_zsock_socket+0x84>
{
   1ba34:	4605      	mov	r5, r0
   1ba36:	460e      	mov	r6, r1
   1ba38:	4617      	mov	r7, r2
   1ba3a:	46ca      	mov	sl, r9
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1ba3c:	4c1a      	ldr	r4, [pc, #104]	; (1baa8 <z_impl_zsock_socket+0x7c>)
   1ba3e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1bab4 <z_impl_zsock_socket+0x88>
   1ba42:	454c      	cmp	r4, r9
   1ba44:	d908      	bls.n	1ba58 <z_impl_zsock_socket+0x2c>
   1ba46:	4641      	mov	r1, r8
   1ba48:	4818      	ldr	r0, [pc, #96]	; (1baac <z_impl_zsock_socket+0x80>)
   1ba4a:	22d5      	movs	r2, #213	; 0xd5
   1ba4c:	f00e ff2a 	bl	2a8a4 <printk>
   1ba50:	21d5      	movs	r1, #213	; 0xd5
   1ba52:	4640      	mov	r0, r8
   1ba54:	f00f f8bf 	bl	2abd6 <assert_post_action>
   1ba58:	4554      	cmp	r4, sl
   1ba5a:	d307      	bcc.n	1ba6c <z_impl_zsock_socket+0x40>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1ba5c:	f00f fa34 	bl	2aec8 <__errno>
   1ba60:	236a      	movs	r3, #106	; 0x6a
   1ba62:	6003      	str	r3, [r0, #0]
	return -1;
}
   1ba64:	f04f 30ff 	mov.w	r0, #4294967295
   1ba68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   1ba6c:	6823      	ldr	r3, [r4, #0]
   1ba6e:	42ab      	cmp	r3, r5
   1ba70:	d000      	beq.n	1ba74 <z_impl_zsock_socket+0x48>
   1ba72:	b9bb      	cbnz	r3, 1baa4 <z_impl_zsock_socket+0x78>
		NET_ASSERT(sock_family->is_supported);
   1ba74:	6863      	ldr	r3, [r4, #4]
   1ba76:	b943      	cbnz	r3, 1ba8a <z_impl_zsock_socket+0x5e>
   1ba78:	4641      	mov	r1, r8
   1ba7a:	480c      	ldr	r0, [pc, #48]	; (1baac <z_impl_zsock_socket+0x80>)
   1ba7c:	22db      	movs	r2, #219	; 0xdb
   1ba7e:	f00e ff11 	bl	2a8a4 <printk>
   1ba82:	21db      	movs	r1, #219	; 0xdb
   1ba84:	4640      	mov	r0, r8
   1ba86:	f00f f8a6 	bl	2abd6 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   1ba8a:	463a      	mov	r2, r7
   1ba8c:	4631      	mov	r1, r6
   1ba8e:	4628      	mov	r0, r5
   1ba90:	6863      	ldr	r3, [r4, #4]
   1ba92:	4798      	blx	r3
   1ba94:	b130      	cbz	r0, 1baa4 <z_impl_zsock_socket+0x78>
		return sock_family->handler(family, type, proto);
   1ba96:	463a      	mov	r2, r7
   1ba98:	4631      	mov	r1, r6
   1ba9a:	4628      	mov	r0, r5
   1ba9c:	68a3      	ldr	r3, [r4, #8]
}
   1ba9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   1baa2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1baa4:	340c      	adds	r4, #12
   1baa6:	e7cc      	b.n	1ba42 <z_impl_zsock_socket+0x16>
   1baa8:	0002dc60 	.word	0x0002dc60
   1baac:	0002e574 	.word	0x0002e574
   1bab0:	0002dc6c 	.word	0x0002dc6c
   1bab4:	0002e62c 	.word	0x0002e62c

0001bab8 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   1bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1babc:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   1babe:	2700      	movs	r7, #0
{
   1bac0:	b09b      	sub	sp, #108	; 0x6c
   1bac2:	9104      	str	r1, [sp, #16]

	end = sys_clock_timeout_end_calc(timeout);
   1bac4:	4610      	mov	r0, r2
   1bac6:	4619      	mov	r1, r3
{
   1bac8:	461d      	mov	r5, r3
   1baca:	4614      	mov	r4, r2
	end = sys_clock_timeout_end_calc(timeout);
   1bacc:	f010 ffd9 	bl	2ca82 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bad0:	46b0      	mov	r8, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   1bad2:	46b9      	mov	r9, r7
	end = sys_clock_timeout_end_calc(timeout);
   1bad4:	e9cd 0105 	strd	r0, r1, [sp, #20]
	pev = poll_events;
   1bad8:	ab0b      	add	r3, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bada:	f8dd b010 	ldr.w	fp, [sp, #16]
	pev = poll_events;
   1bade:	9308      	str	r3, [sp, #32]
	bool offload = false;
   1bae0:	9703      	str	r7, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bae2:	f1bb 0f00 	cmp.w	fp, #0
   1bae6:	d11f      	bne.n	1bb28 <zsock_poll_internal+0x70>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   1bae8:	9b03      	ldr	r3, [sp, #12]
   1baea:	2b00      	cmp	r3, #0
   1baec:	d063      	beq.n	1bbb6 <zsock_poll_internal+0xfe>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1baee:	3501      	adds	r5, #1
   1baf0:	bf0b      	itete	eq
   1baf2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   1baf6:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   1bafa:	f04f 33ff 	moveq.w	r3, #4294967295
   1bafe:	fba4 4503 	umullne	r4, r5, r4, r3
   1bb02:	bf1c      	itt	ne
   1bb04:	0be3      	lsrne	r3, r4, #15
   1bb06:	ea43 4345 	orrne.w	r3, r3, r5, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   1bb0a:	9301      	str	r3, [sp, #4]
   1bb0c:	9b04      	ldr	r3, [sp, #16]
   1bb0e:	4639      	mov	r1, r7
   1bb10:	9300      	str	r3, [sp, #0]
   1bb12:	f44f 7282 	mov.w	r2, #260	; 0x104
   1bb16:	4633      	mov	r3, r6
   1bb18:	4648      	mov	r0, r9
   1bb1a:	f00f f8c9 	bl	2acb0 <z_fdtable_call_ioctl>
   1bb1e:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   1bb20:	4638      	mov	r0, r7
   1bb22:	b01b      	add	sp, #108	; 0x6c
   1bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   1bb28:	f8d8 0000 	ldr.w	r0, [r8]
   1bb2c:	2800      	cmp	r0, #0
   1bb2e:	db3d      	blt.n	1bbac <zsock_poll_internal+0xf4>
	ctx = z_get_fd_obj_and_vtable(sock,
   1bb30:	aa0a      	add	r2, sp, #40	; 0x28
   1bb32:	a909      	add	r1, sp, #36	; 0x24
   1bb34:	f7fe fe7a 	bl	1a82c <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1bb38:	9007      	str	r0, [sp, #28]
   1bb3a:	2800      	cmp	r0, #0
   1bb3c:	d036      	beq.n	1bbac <zsock_poll_internal+0xf4>
		(void)k_mutex_lock(lock, K_FOREVER);
   1bb3e:	f04f 32ff 	mov.w	r2, #4294967295
   1bb42:	f04f 33ff 	mov.w	r3, #4294967295
   1bb46:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bb48:	f00f f8c1 	bl	2acce <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   1bb4c:	ab1a      	add	r3, sp, #104	; 0x68
   1bb4e:	9301      	str	r3, [sp, #4]
   1bb50:	ab08      	add	r3, sp, #32
   1bb52:	9300      	str	r3, [sp, #0]
   1bb54:	f44f 7281 	mov.w	r2, #258	; 0x102
   1bb58:	4643      	mov	r3, r8
   1bb5a:	9907      	ldr	r1, [sp, #28]
   1bb5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bb5e:	f00f f8a7 	bl	2acb0 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   1bb62:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   1bb66:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   1bb68:	d00e      	beq.n	1bb88 <zsock_poll_internal+0xd0>
		} else if (result == -EXDEV) {
   1bb6a:	f110 0f12 	cmn.w	r0, #18
   1bb6e:	9907      	ldr	r1, [sp, #28]
   1bb70:	d10e      	bne.n	1bb90 <zsock_poll_internal+0xd8>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1bb72:	f1b9 0f00 	cmp.w	r9, #0
   1bb76:	d102      	bne.n	1bb7e <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   1bb78:	460f      	mov	r7, r1
   1bb7a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
			offload = true;
   1bb7e:	2301      	movs	r3, #1
			result = 0;
   1bb80:	f04f 0a00 	mov.w	sl, #0
			offload = true;
   1bb84:	9303      	str	r3, [sp, #12]
   1bb86:	e003      	b.n	1bb90 <zsock_poll_internal+0xd8>
			timeout = K_NO_WAIT;
   1bb88:	2400      	movs	r4, #0
   1bb8a:	2500      	movs	r5, #0
			result = 0;
   1bb8c:	f04f 0a00 	mov.w	sl, #0
		k_mutex_unlock(lock);
   1bb90:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bb92:	f00f f88b 	bl	2acac <k_mutex_unlock>
		if (result < 0) {
   1bb96:	f1ba 0f00 	cmp.w	sl, #0
   1bb9a:	da07      	bge.n	1bbac <zsock_poll_internal+0xf4>
			errno = -result;
   1bb9c:	f00f f994 	bl	2aec8 <__errno>
   1bba0:	f1ca 0300 	rsb	r3, sl, #0
			return -1;
   1bba4:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   1bba8:	6003      	str	r3, [r0, #0]
			return -1;
   1bbaa:	e7b9      	b.n	1bb20 <zsock_poll_internal+0x68>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bbac:	f108 0808 	add.w	r8, r8, #8
   1bbb0:	f10b 3bff 	add.w	fp, fp, #4294967295
   1bbb4:	e795      	b.n	1bae2 <zsock_poll_internal+0x2a>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bbb6:	ea54 0305 	orrs.w	r3, r4, r5
   1bbba:	d011      	beq.n	1bbe0 <zsock_poll_internal+0x128>
   1bbbc:	1c6a      	adds	r2, r5, #1
   1bbbe:	bf08      	it	eq
   1bbc0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1bbc4:	d00c      	beq.n	1bbe0 <zsock_poll_internal+0x128>
		int64_t remaining = end - sys_clock_tick_get();
   1bbc6:	f00c fb8f 	bl	282e8 <sys_clock_tick_get>
   1bbca:	9b05      	ldr	r3, [sp, #20]
   1bbcc:	1a1c      	subs	r4, r3, r0
   1bbce:	9b06      	ldr	r3, [sp, #24]
   1bbd0:	eb63 0501 	sbc.w	r5, r3, r1
   1bbd4:	2c00      	cmp	r4, #0
   1bbd6:	f175 0300 	sbcs.w	r3, r5, #0
   1bbda:	bfbc      	itt	lt
   1bbdc:	2400      	movlt	r4, #0
   1bbde:	2500      	movlt	r5, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1bbe0:	9908      	ldr	r1, [sp, #32]
   1bbe2:	af0b      	add	r7, sp, #44	; 0x2c
   1bbe4:	4b3e      	ldr	r3, [pc, #248]	; (1bce0 <zsock_poll_internal+0x228>)
   1bbe6:	1bc9      	subs	r1, r1, r7
   1bbe8:	1089      	asrs	r1, r1, #2
   1bbea:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   1bbec:	462b      	mov	r3, r5
   1bbee:	4622      	mov	r2, r4
   1bbf0:	4638      	mov	r0, r7
   1bbf2:	f00c fda9 	bl	28748 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   1bbf6:	f100 030b 	add.w	r3, r0, #11
   1bbfa:	2b0b      	cmp	r3, #11
   1bbfc:	4681      	mov	r9, r0
   1bbfe:	d808      	bhi.n	1bc12 <zsock_poll_internal+0x15a>
   1bc00:	f640 0881 	movw	r8, #2177	; 0x881
   1bc04:	fa28 f803 	lsr.w	r8, r8, r3
   1bc08:	ea6f 0808 	mvn.w	r8, r8
   1bc0c:	f018 0801 	ands.w	r8, r8, #1
   1bc10:	d004      	beq.n	1bc1c <zsock_poll_internal+0x164>
			errno = -ret;
   1bc12:	f00f f959 	bl	2aec8 <__errno>
   1bc16:	f1c9 0300 	rsb	r3, r9, #0
   1bc1a:	e7c3      	b.n	1bba4 <zsock_poll_internal+0xec>
		pev = poll_events;
   1bc1c:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bc1e:	46b1      	mov	r9, r6
		ret = 0;
   1bc20:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bc22:	f8dd a010 	ldr.w	sl, [sp, #16]
   1bc26:	f1ba 0f00 	cmp.w	sl, #0
   1bc2a:	d11b      	bne.n	1bc64 <zsock_poll_internal+0x1ac>
		if (retry) {
   1bc2c:	f1b8 0f00 	cmp.w	r8, #0
   1bc30:	f43f af76 	beq.w	1bb20 <zsock_poll_internal+0x68>
			if (ret > 0) {
   1bc34:	2f00      	cmp	r7, #0
   1bc36:	f73f af73 	bgt.w	1bb20 <zsock_poll_internal+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bc3a:	ea54 0305 	orrs.w	r3, r4, r5
   1bc3e:	f43f af6f 	beq.w	1bb20 <zsock_poll_internal+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bc42:	1c6b      	adds	r3, r5, #1
   1bc44:	bf08      	it	eq
   1bc46:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1bc4a:	d0c9      	beq.n	1bbe0 <zsock_poll_internal+0x128>
				int64_t remaining = end - sys_clock_tick_get();
   1bc4c:	f00c fb4c 	bl	282e8 <sys_clock_tick_get>
   1bc50:	9b05      	ldr	r3, [sp, #20]
   1bc52:	1a1c      	subs	r4, r3, r0
   1bc54:	9b06      	ldr	r3, [sp, #24]
   1bc56:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   1bc5a:	2c01      	cmp	r4, #1
   1bc5c:	f175 0300 	sbcs.w	r3, r5, #0
   1bc60:	dabe      	bge.n	1bbe0 <zsock_poll_internal+0x128>
   1bc62:	e75d      	b.n	1bb20 <zsock_poll_internal+0x68>
			pfd->revents = 0;
   1bc64:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   1bc68:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   1bc6c:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   1bc70:	2800      	cmp	r0, #0
   1bc72:	db2d      	blt.n	1bcd0 <zsock_poll_internal+0x218>
	ctx = z_get_fd_obj_and_vtable(sock,
   1bc74:	aa0a      	add	r2, sp, #40	; 0x28
   1bc76:	a909      	add	r1, sp, #36	; 0x24
   1bc78:	f7fe fdd8 	bl	1a82c <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   1bc7c:	4683      	mov	fp, r0
   1bc7e:	b920      	cbnz	r0, 1bc8a <zsock_poll_internal+0x1d2>
				pfd->revents = ZSOCK_POLLNVAL;
   1bc80:	2320      	movs	r3, #32
   1bc82:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   1bc86:	3701      	adds	r7, #1
   1bc88:	e022      	b.n	1bcd0 <zsock_poll_internal+0x218>
			(void)k_mutex_lock(lock, K_FOREVER);
   1bc8a:	f04f 32ff 	mov.w	r2, #4294967295
   1bc8e:	f04f 33ff 	mov.w	r3, #4294967295
   1bc92:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bc94:	f00f f81b 	bl	2acce <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   1bc98:	ab08      	add	r3, sp, #32
   1bc9a:	4659      	mov	r1, fp
   1bc9c:	f240 1203 	movw	r2, #259	; 0x103
   1bca0:	9300      	str	r3, [sp, #0]
   1bca2:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bca4:	464b      	mov	r3, r9
   1bca6:	f00f f803 	bl	2acb0 <z_fdtable_call_ioctl>
   1bcaa:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   1bcac:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bcae:	f00e fffd 	bl	2acac <k_mutex_unlock>
			if (result == -EAGAIN) {
   1bcb2:	f11b 0f0b 	cmn.w	fp, #11
   1bcb6:	d010      	beq.n	1bcda <zsock_poll_internal+0x222>
			} else if (result != 0) {
   1bcb8:	f1bb 0f00 	cmp.w	fp, #0
   1bcbc:	d004      	beq.n	1bcc8 <zsock_poll_internal+0x210>
				errno = -result;
   1bcbe:	f00f f903 	bl	2aec8 <__errno>
   1bcc2:	f1cb 0300 	rsb	r3, fp, #0
   1bcc6:	e76d      	b.n	1bba4 <zsock_poll_internal+0xec>
			if (pfd->revents != 0) {
   1bcc8:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1bccc:	2b00      	cmp	r3, #0
   1bcce:	d1da      	bne.n	1bc86 <zsock_poll_internal+0x1ce>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bcd0:	f109 0908 	add.w	r9, r9, #8
   1bcd4:	f10a 3aff 	add.w	sl, sl, #4294967295
   1bcd8:	e7a5      	b.n	1bc26 <zsock_poll_internal+0x16e>
				retry = true;
   1bcda:	f04f 0801 	mov.w	r8, #1
   1bcde:	e7f7      	b.n	1bcd0 <zsock_poll_internal+0x218>
   1bce0:	cccccccd 	.word	0xcccccccd

0001bce4 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   1bce4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1bce6:	4605      	mov	r5, r0
   1bce8:	b940      	cbnz	r0, 1bcfc <socket_offload_dns_register+0x18>
   1bcea:	490b      	ldr	r1, [pc, #44]	; (1bd18 <socket_offload_dns_register+0x34>)
   1bcec:	480b      	ldr	r0, [pc, #44]	; (1bd1c <socket_offload_dns_register+0x38>)
   1bcee:	2213      	movs	r2, #19
   1bcf0:	f00e fdd8 	bl	2a8a4 <printk>
   1bcf4:	2113      	movs	r1, #19
   1bcf6:	4808      	ldr	r0, [pc, #32]	; (1bd18 <socket_offload_dns_register+0x34>)
   1bcf8:	f00e ff6d 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   1bcfc:	4c08      	ldr	r4, [pc, #32]	; (1bd20 <socket_offload_dns_register+0x3c>)
   1bcfe:	6822      	ldr	r2, [r4, #0]
   1bd00:	b142      	cbz	r2, 1bd14 <socket_offload_dns_register+0x30>
   1bd02:	4905      	ldr	r1, [pc, #20]	; (1bd18 <socket_offload_dns_register+0x34>)
   1bd04:	4805      	ldr	r0, [pc, #20]	; (1bd1c <socket_offload_dns_register+0x38>)
   1bd06:	2214      	movs	r2, #20
   1bd08:	f00e fdcc 	bl	2a8a4 <printk>
   1bd0c:	2114      	movs	r1, #20
   1bd0e:	4802      	ldr	r0, [pc, #8]	; (1bd18 <socket_offload_dns_register+0x34>)
   1bd10:	f00e ff61 	bl	2abd6 <assert_post_action>

	dns_offload = ops;
   1bd14:	6025      	str	r5, [r4, #0]
}
   1bd16:	bd38      	pop	{r3, r4, r5, pc}
   1bd18:	0002e660 	.word	0x0002e660
   1bd1c:	0002e574 	.word	0x0002e574
   1bd20:	2000cdf8 	.word	0x2000cdf8

0001bd24 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   1bd28:	4c12      	ldr	r4, [pc, #72]	; (1bd74 <socket_offload_getaddrinfo+0x50>)
{
   1bd2a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   1bd2c:	6823      	ldr	r3, [r4, #0]
{
   1bd2e:	4605      	mov	r5, r0
   1bd30:	460e      	mov	r6, r1
   1bd32:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   1bd34:	b943      	cbnz	r3, 1bd48 <socket_offload_getaddrinfo+0x24>
   1bd36:	4910      	ldr	r1, [pc, #64]	; (1bd78 <socket_offload_getaddrinfo+0x54>)
   1bd38:	4810      	ldr	r0, [pc, #64]	; (1bd7c <socket_offload_getaddrinfo+0x58>)
   1bd3a:	221d      	movs	r2, #29
   1bd3c:	f00e fdb2 	bl	2a8a4 <printk>
   1bd40:	211d      	movs	r1, #29
   1bd42:	480d      	ldr	r0, [pc, #52]	; (1bd78 <socket_offload_getaddrinfo+0x54>)
   1bd44:	f00e ff47 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   1bd48:	6823      	ldr	r3, [r4, #0]
   1bd4a:	681b      	ldr	r3, [r3, #0]
   1bd4c:	b943      	cbnz	r3, 1bd60 <socket_offload_getaddrinfo+0x3c>
   1bd4e:	490a      	ldr	r1, [pc, #40]	; (1bd78 <socket_offload_getaddrinfo+0x54>)
   1bd50:	480a      	ldr	r0, [pc, #40]	; (1bd7c <socket_offload_getaddrinfo+0x58>)
   1bd52:	221e      	movs	r2, #30
   1bd54:	f00e fda6 	bl	2a8a4 <printk>
   1bd58:	211e      	movs	r1, #30
   1bd5a:	4807      	ldr	r0, [pc, #28]	; (1bd78 <socket_offload_getaddrinfo+0x54>)
   1bd5c:	f00e ff3b 	bl	2abd6 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   1bd60:	6823      	ldr	r3, [r4, #0]
   1bd62:	463a      	mov	r2, r7
   1bd64:	681c      	ldr	r4, [r3, #0]
   1bd66:	4631      	mov	r1, r6
   1bd68:	4643      	mov	r3, r8
   1bd6a:	4628      	mov	r0, r5
   1bd6c:	46a4      	mov	ip, r4
}
   1bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   1bd72:	4760      	bx	ip
   1bd74:	2000cdf8 	.word	0x2000cdf8
   1bd78:	0002e660 	.word	0x0002e660
   1bd7c:	0002e574 	.word	0x0002e574

0001bd80 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   1bd80:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   1bd82:	4c0f      	ldr	r4, [pc, #60]	; (1bdc0 <socket_offload_freeaddrinfo+0x40>)
{
   1bd84:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   1bd86:	6823      	ldr	r3, [r4, #0]
   1bd88:	b943      	cbnz	r3, 1bd9c <socket_offload_freeaddrinfo+0x1c>
   1bd8a:	490e      	ldr	r1, [pc, #56]	; (1bdc4 <socket_offload_freeaddrinfo+0x44>)
   1bd8c:	480e      	ldr	r0, [pc, #56]	; (1bdc8 <socket_offload_freeaddrinfo+0x48>)
   1bd8e:	2225      	movs	r2, #37	; 0x25
   1bd90:	f00e fd88 	bl	2a8a4 <printk>
   1bd94:	2125      	movs	r1, #37	; 0x25
   1bd96:	480b      	ldr	r0, [pc, #44]	; (1bdc4 <socket_offload_freeaddrinfo+0x44>)
   1bd98:	f00e ff1d 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   1bd9c:	6823      	ldr	r3, [r4, #0]
   1bd9e:	685b      	ldr	r3, [r3, #4]
   1bda0:	b943      	cbnz	r3, 1bdb4 <socket_offload_freeaddrinfo+0x34>
   1bda2:	4908      	ldr	r1, [pc, #32]	; (1bdc4 <socket_offload_freeaddrinfo+0x44>)
   1bda4:	4808      	ldr	r0, [pc, #32]	; (1bdc8 <socket_offload_freeaddrinfo+0x48>)
   1bda6:	2226      	movs	r2, #38	; 0x26
   1bda8:	f00e fd7c 	bl	2a8a4 <printk>
   1bdac:	2126      	movs	r1, #38	; 0x26
   1bdae:	4805      	ldr	r0, [pc, #20]	; (1bdc4 <socket_offload_freeaddrinfo+0x44>)
   1bdb0:	f00e ff11 	bl	2abd6 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   1bdb4:	6823      	ldr	r3, [r4, #0]
   1bdb6:	4628      	mov	r0, r5
}
   1bdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   1bdbc:	685b      	ldr	r3, [r3, #4]
   1bdbe:	4718      	bx	r3
   1bdc0:	2000cdf8 	.word	0x2000cdf8
   1bdc4:	0002e660 	.word	0x0002e660
   1bdc8:	0002e574 	.word	0x0002e574

0001bdcc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1bdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bdd0:	4605      	mov	r5, r0
	__asm__ volatile(
   1bdd2:	f04f 0320 	mov.w	r3, #32
   1bdd6:	f3ef 8611 	mrs	r6, BASEPRI
   1bdda:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bde2:	481e      	ldr	r0, [pc, #120]	; (1be5c <pm_state_notify+0x90>)
   1bde4:	f00a f986 	bl	260f4 <z_spin_lock_valid>
   1bde8:	b940      	cbnz	r0, 1bdfc <pm_state_notify+0x30>
   1bdea:	491d      	ldr	r1, [pc, #116]	; (1be60 <pm_state_notify+0x94>)
   1bdec:	481d      	ldr	r0, [pc, #116]	; (1be64 <pm_state_notify+0x98>)
   1bdee:	2281      	movs	r2, #129	; 0x81
   1bdf0:	f00e fd58 	bl	2a8a4 <printk>
   1bdf4:	2181      	movs	r1, #129	; 0x81
   1bdf6:	481a      	ldr	r0, [pc, #104]	; (1be60 <pm_state_notify+0x94>)
   1bdf8:	f00e feed 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bdfc:	4817      	ldr	r0, [pc, #92]	; (1be5c <pm_state_notify+0x90>)
   1bdfe:	f00a f995 	bl	2612c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1be02:	4b19      	ldr	r3, [pc, #100]	; (1be68 <pm_state_notify+0x9c>)
   1be04:	681c      	ldr	r4, [r3, #0]
   1be06:	2c00      	cmp	r4, #0
   1be08:	bf38      	it	cc
   1be0a:	2400      	movcc	r4, #0
   1be0c:	b19c      	cbz	r4, 1be36 <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   1be0e:	f04f 090c 	mov.w	r9, #12
   1be12:	4f16      	ldr	r7, [pc, #88]	; (1be6c <pm_state_notify+0xa0>)
   1be14:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1be70 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
   1be18:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1be1c:	2d00      	cmp	r5, #0
   1be1e:	bf08      	it	eq
   1be20:	4613      	moveq	r3, r2
		if (callback) {
   1be22:	b12b      	cbz	r3, 1be30 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
   1be24:	f898 2014 	ldrb.w	r2, [r8, #20]
   1be28:	fb09 f202 	mul.w	r2, r9, r2
   1be2c:	5cb8      	ldrb	r0, [r7, r2]
   1be2e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1be30:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1be32:	2c00      	cmp	r4, #0
   1be34:	d1f0      	bne.n	1be18 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be36:	4809      	ldr	r0, [pc, #36]	; (1be5c <pm_state_notify+0x90>)
   1be38:	f00a f96a 	bl	26110 <z_spin_unlock_valid>
   1be3c:	b940      	cbnz	r0, 1be50 <pm_state_notify+0x84>
   1be3e:	4908      	ldr	r1, [pc, #32]	; (1be60 <pm_state_notify+0x94>)
   1be40:	4808      	ldr	r0, [pc, #32]	; (1be64 <pm_state_notify+0x98>)
   1be42:	22ac      	movs	r2, #172	; 0xac
   1be44:	f00e fd2e 	bl	2a8a4 <printk>
   1be48:	21ac      	movs	r1, #172	; 0xac
   1be4a:	4805      	ldr	r0, [pc, #20]	; (1be60 <pm_state_notify+0x94>)
   1be4c:	f00e fec3 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   1be50:	f386 8811 	msr	BASEPRI, r6
   1be54:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1be58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1be5c:	2000cdfc 	.word	0x2000cdfc
   1be60:	0002e5ae 	.word	0x0002e5ae
   1be64:	0002e574 	.word	0x0002e574
   1be68:	2000ce00 	.word	0x2000ce00
   1be6c:	2000ce0c 	.word	0x2000ce0c
   1be70:	2000d3fc 	.word	0x2000d3fc

0001be74 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be74:	2201      	movs	r2, #1
   1be76:	f000 031f 	and.w	r3, r0, #31
   1be7a:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1be7c:	4b08      	ldr	r3, [pc, #32]	; (1bea0 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be7e:	0940      	lsrs	r0, r0, #5
   1be80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1be84:	e8d0 3fef 	ldaex	r3, [r0]
   1be88:	ea43 0102 	orr.w	r1, r3, r2
   1be8c:	e8c0 1fec 	stlex	ip, r1, [r0]
   1be90:	f1bc 0f00 	cmp.w	ip, #0
   1be94:	d1f6      	bne.n	1be84 <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
   1be96:	421a      	tst	r2, r3
}
   1be98:	bf14      	ite	ne
   1be9a:	2001      	movne	r0, #1
   1be9c:	2000      	moveq	r0, #0
   1be9e:	4770      	bx	lr
   1bea0:	2000ce18 	.word	0x2000ce18

0001bea4 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bea4:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1bea6:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   1bea8:	4b1a      	ldr	r3, [pc, #104]	; (1bf14 <pm_system_resume+0x70>)
{
   1beaa:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
   1beac:	7d1d      	ldrb	r5, [r3, #20]
   1beae:	f005 031f 	and.w	r3, r5, #31
   1beb2:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1beb4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1beb6:	4b18      	ldr	r3, [pc, #96]	; (1bf18 <pm_system_resume+0x74>)
   1beb8:	0969      	lsrs	r1, r5, #5
   1beba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1bebe:	e8d3 1fef 	ldaex	r1, [r3]
   1bec2:	ea01 0400 	and.w	r4, r1, r0
   1bec6:	e8c3 4fec 	stlex	ip, r4, [r3]
   1beca:	f1bc 0f00 	cmp.w	ip, #0
   1bece:	d1f6      	bne.n	1bebe <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1bed0:	4211      	tst	r1, r2
   1bed2:	d017      	beq.n	1bf04 <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
   1bed4:	220c      	movs	r2, #12
   1bed6:	4c11      	ldr	r4, [pc, #68]	; (1bf1c <pm_system_resume+0x78>)
   1bed8:	ab01      	add	r3, sp, #4
   1beda:	fb02 4205 	mla	r2, r2, r5, r4
   1bede:	ca07      	ldmia	r2, {r0, r1, r2}
   1bee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1bee4:	4a0e      	ldr	r2, [pc, #56]	; (1bf20 <pm_system_resume+0x7c>)
   1bee6:	b17a      	cbz	r2, 1bf08 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
   1bee8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1beec:	f00e fe8e 	bl	2ac0c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   1bef0:	2000      	movs	r0, #0
   1bef2:	f7ff ff6b 	bl	1bdcc <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1bef6:	230c      	movs	r3, #12
   1bef8:	2200      	movs	r2, #0
   1befa:	436b      	muls	r3, r5
   1befc:	18e1      	adds	r1, r4, r3
   1befe:	50e2      	str	r2, [r4, r3]
   1bf00:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   1bf04:	b005      	add	sp, #20
   1bf06:	bd30      	pop	{r4, r5, pc}
   1bf08:	f382 8811 	msr	BASEPRI, r2
   1bf0c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1bf10:	e7ee      	b.n	1bef0 <pm_system_resume+0x4c>
   1bf12:	bf00      	nop
   1bf14:	2000d3fc 	.word	0x2000d3fc
   1bf18:	2000ce08 	.word	0x2000ce08
   1bf1c:	2000ce0c 	.word	0x2000ce0c
   1bf20:	0002ac0d 	.word	0x0002ac0d

0001bf24 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   1bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1bf28:	4b33      	ldr	r3, [pc, #204]	; (1bff8 <pm_system_suspend+0xd4>)
{
   1bf2a:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   1bf2c:	7d1c      	ldrb	r4, [r3, #20]
{
   1bf2e:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   1bf30:	4620      	mov	r0, r4
   1bf32:	f7ff ff9f 	bl	1be74 <atomic_test_and_set_bit.constprop.0>
   1bf36:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1c010 <pm_system_suspend+0xec>
   1bf3a:	b960      	cbnz	r0, 1bf56 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   1bf3c:	250c      	movs	r5, #12
   1bf3e:	466e      	mov	r6, sp
   1bf40:	fb05 8504 	mla	r5, r5, r4, r8
   1bf44:	463a      	mov	r2, r7
   1bf46:	4621      	mov	r1, r4
   1bf48:	4630      	mov	r0, r6
   1bf4a:	f00e ff8b 	bl	2ae64 <pm_policy_next_state>
   1bf4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1bf52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   1bf56:	230c      	movs	r3, #12
   1bf58:	4363      	muls	r3, r4
   1bf5a:	f818 0003 	ldrb.w	r0, [r8, r3]
   1bf5e:	eb08 0203 	add.w	r2, r8, r3
   1bf62:	0965      	lsrs	r5, r4, #5
   1bf64:	f004 061f 	and.w	r6, r4, #31
   1bf68:	b3a8      	cbz	r0, 1bfd6 <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   1bf6a:	1c7b      	adds	r3, r7, #1
   1bf6c:	d00f      	beq.n	1bf8e <pm_system_suspend+0x6a>
   1bf6e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1bf72:	2100      	movs	r1, #0
   1bf74:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1bf78:	4820      	ldr	r0, [pc, #128]	; (1bffc <pm_system_suspend+0xd8>)
   1bf7a:	2300      	movs	r3, #0
   1bf7c:	fbec 010e 	umlal	r0, r1, ip, lr
   1bf80:	4a1f      	ldr	r2, [pc, #124]	; (1c000 <pm_system_suspend+0xdc>)
   1bf82:	f7fd f88d 	bl	190a0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1bf86:	2101      	movs	r1, #1
   1bf88:	1a38      	subs	r0, r7, r0
   1bf8a:	f00c f8bb 	bl	28104 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1bf8e:	f00a ffc7 	bl	26f20 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1bf92:	2001      	movs	r0, #1
   1bf94:	f7ff ff1a 	bl	1bdcc <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bf98:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bf9a:	4b1a      	ldr	r3, [pc, #104]	; (1c004 <pm_system_suspend+0xe0>)
   1bf9c:	40b2      	lsls	r2, r6
   1bf9e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1bfa2:	e8d3 1fef 	ldaex	r1, [r3]
   1bfa6:	4311      	orrs	r1, r2
   1bfa8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1bfac:	2800      	cmp	r0, #0
   1bfae:	d1f8      	bne.n	1bfa2 <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   1bfb0:	230c      	movs	r3, #12
   1bfb2:	fb03 8404 	mla	r4, r3, r4, r8
   1bfb6:	ab05      	add	r3, sp, #20
   1bfb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1bfbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1bfc0:	4a11      	ldr	r2, [pc, #68]	; (1c008 <pm_system_suspend+0xe4>)
   1bfc2:	b11a      	cbz	r2, 1bfcc <pm_system_suspend+0xa8>
		pm_power_state_set(info);
   1bfc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1bfc8:	f00e fe0d 	bl	2abe6 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   1bfcc:	f7ff ff6a 	bl	1bea4 <pm_system_resume>
	k_sched_unlock();
   1bfd0:	f00b fc16 	bl	27800 <k_sched_unlock>
	bool ret = true;
   1bfd4:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bfd6:	2301      	movs	r3, #1
   1bfd8:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bfda:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bfdc:	4a0b      	ldr	r2, [pc, #44]	; (1c00c <pm_system_suspend+0xe8>)
   1bfde:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1bfe2:	e8d5 2fef 	ldaex	r2, [r5]
   1bfe6:	401a      	ands	r2, r3
   1bfe8:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1bfec:	2900      	cmp	r1, #0
   1bfee:	d1f8      	bne.n	1bfe2 <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   1bff0:	b008      	add	sp, #32
   1bff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bff6:	bf00      	nop
   1bff8:	2000d3fc 	.word	0x2000d3fc
   1bffc:	000f423f 	.word	0x000f423f
   1c000:	000f4240 	.word	0x000f4240
   1c004:	2000ce08 	.word	0x2000ce08
   1c008:	0002abe7 	.word	0x0002abe7
   1c00c:	2000ce18 	.word	0x2000ce18
   1c010:	2000ce0c 	.word	0x2000ce0c

0001c014 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   1c014:	b508      	push	{r3, lr}
	k_sched_lock();
   1c016:	f00a ff83 	bl	26f20 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   1c01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   1c01e:	4801      	ldr	r0, [pc, #4]	; (1c024 <before_nse+0x10>)
   1c020:	f00e bf44 	b.w	2aeac <z_arm_save_fp_context>
   1c024:	2000ce1c 	.word	0x2000ce1c

0001c028 <after_nse>:

void after_nse(void)
{
   1c028:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   1c02a:	4803      	ldr	r0, [pc, #12]	; (1c038 <after_nse+0x10>)
   1c02c:	f00e ff3f 	bl	2aeae <z_arm_restore_fp_context>
	k_sched_unlock();
}
   1c030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_sched_unlock();
   1c034:	f00b bbe4 	b.w	27800 <k_sched_unlock>
   1c038:	2000ce1c 	.word	0x2000ce1c

0001c03c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1c03c:	4901      	ldr	r1, [pc, #4]	; (1c044 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1c03e:	2210      	movs	r2, #16
	str	r2, [r1]
   1c040:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1c042:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1c044:	e000ed10 	.word	0xe000ed10

0001c048 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1c048:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1c04a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1c04c:	f380 8811 	msr	BASEPRI, r0
	isb
   1c050:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1c054:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1c058:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1c05a:	b662      	cpsie	i
	isb
   1c05c:	f3bf 8f6f 	isb	sy

	bx	lr
   1c060:	4770      	bx	lr
   1c062:	bf00      	nop

0001c064 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1c064:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1c066:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1c068:	f381 8811 	msr	BASEPRI, r1

	wfe
   1c06c:	bf20      	wfe

	msr	BASEPRI, r0
   1c06e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1c072:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1c074:	4770      	bx	lr
   1c076:	bf00      	nop

0001c078 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c078:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c07a:	4605      	mov	r5, r0

	if (esf != NULL) {
   1c07c:	460c      	mov	r4, r1
   1c07e:	b1c9      	cbz	r1, 1c0b4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1c080:	688b      	ldr	r3, [r1, #8]
   1c082:	4810      	ldr	r0, [pc, #64]	; (1c0c4 <z_arm_fatal_error+0x4c>)
   1c084:	9300      	str	r3, [sp, #0]
   1c086:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c08a:	2145      	movs	r1, #69	; 0x45
   1c08c:	f00e fdc9 	bl	2ac22 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1c090:	6963      	ldr	r3, [r4, #20]
   1c092:	2145      	movs	r1, #69	; 0x45
   1c094:	9300      	str	r3, [sp, #0]
   1c096:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1c09a:	480b      	ldr	r0, [pc, #44]	; (1c0c8 <z_arm_fatal_error+0x50>)
   1c09c:	f00e fdc1 	bl	2ac22 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1c0a0:	2145      	movs	r1, #69	; 0x45
   1c0a2:	69e2      	ldr	r2, [r4, #28]
   1c0a4:	4809      	ldr	r0, [pc, #36]	; (1c0cc <z_arm_fatal_error+0x54>)
   1c0a6:	f00e fdbc 	bl	2ac22 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1c0aa:	2145      	movs	r1, #69	; 0x45
   1c0ac:	69a2      	ldr	r2, [r4, #24]
   1c0ae:	4808      	ldr	r0, [pc, #32]	; (1c0d0 <z_arm_fatal_error+0x58>)
   1c0b0:	f00e fdb7 	bl	2ac22 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1c0b4:	4621      	mov	r1, r4
   1c0b6:	4628      	mov	r0, r5
}
   1c0b8:	b003      	add	sp, #12
   1c0ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   1c0be:	f009 bcbb 	b.w	25a38 <z_fatal_error>
   1c0c2:	bf00      	nop
   1c0c4:	0002e69e 	.word	0x0002e69e
   1c0c8:	0002e6d2 	.word	0x0002e6d2
   1c0cc:	0002e706 	.word	0x0002e706
   1c0d0:	0002e71a 	.word	0x0002e71a

0001c0d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1c0d4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1c0d6:	2b00      	cmp	r3, #0
   1c0d8:	db08      	blt.n	1c0ec <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c0da:	2201      	movs	r2, #1
   1c0dc:	f000 001f 	and.w	r0, r0, #31
   1c0e0:	fa02 f000 	lsl.w	r0, r2, r0
   1c0e4:	4a02      	ldr	r2, [pc, #8]	; (1c0f0 <arch_irq_enable+0x1c>)
   1c0e6:	095b      	lsrs	r3, r3, #5
   1c0e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1c0ec:	4770      	bx	lr
   1c0ee:	bf00      	nop
   1c0f0:	e000e100 	.word	0xe000e100

0001c0f4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1c0f4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1c0f6:	2b00      	cmp	r3, #0
   1c0f8:	db0d      	blt.n	1c116 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c0fa:	2201      	movs	r2, #1
   1c0fc:	f000 001f 	and.w	r0, r0, #31
   1c100:	fa02 f000 	lsl.w	r0, r2, r0
   1c104:	095b      	lsrs	r3, r3, #5
   1c106:	4a04      	ldr	r2, [pc, #16]	; (1c118 <arch_irq_disable+0x24>)
   1c108:	3320      	adds	r3, #32
   1c10a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1c10e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c112:	f3bf 8f6f 	isb	sy
}
   1c116:	4770      	bx	lr
   1c118:	e000e100 	.word	0xe000e100

0001c11c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1c11c:	4b05      	ldr	r3, [pc, #20]	; (1c134 <arch_irq_is_enabled+0x18>)
   1c11e:	0942      	lsrs	r2, r0, #5
   1c120:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1c124:	2301      	movs	r3, #1
   1c126:	f000 001f 	and.w	r0, r0, #31
   1c12a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1c12e:	4010      	ands	r0, r2
   1c130:	4770      	bx	lr
   1c132:	bf00      	nop
   1c134:	e000e100 	.word	0xe000e100

0001c138 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1c138:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1c13a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1c13c:	2c07      	cmp	r4, #7
{
   1c13e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1c140:	d908      	bls.n	1c154 <z_arm_irq_priority_set+0x1c>
   1c142:	490d      	ldr	r1, [pc, #52]	; (1c178 <z_arm_irq_priority_set+0x40>)
   1c144:	480d      	ldr	r0, [pc, #52]	; (1c17c <z_arm_irq_priority_set+0x44>)
   1c146:	2259      	movs	r2, #89	; 0x59
   1c148:	f00e fbac 	bl	2a8a4 <printk>
   1c14c:	2159      	movs	r1, #89	; 0x59
   1c14e:	480a      	ldr	r0, [pc, #40]	; (1c178 <z_arm_irq_priority_set+0x40>)
   1c150:	f00e fd41 	bl	2abd6 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1c154:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1c156:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c158:	bfac      	ite	ge
   1c15a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c15e:	4b08      	ldrlt	r3, [pc, #32]	; (1c180 <z_arm_irq_priority_set+0x48>)
   1c160:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1c164:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c166:	bfab      	itete	ge
   1c168:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c16c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c170:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c174:	555c      	strblt	r4, [r3, r5]
}
   1c176:	bd38      	pop	{r3, r4, r5, pc}
   1c178:	0002e74d 	.word	0x0002e74d
   1c17c:	0002e574 	.word	0x0002e574
   1c180:	e000ed14 	.word	0xe000ed14

0001c184 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1c184:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1c186:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1c188:	4b04      	ldr	r3, [pc, #16]	; (1c19c <_arch_isr_direct_pm+0x18>)
   1c18a:	699a      	ldr	r2, [r3, #24]
   1c18c:	b11a      	cbz	r2, 1c196 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1c18e:	2200      	movs	r2, #0
   1c190:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1c192:	f010 fbf7 	bl	2c984 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1c196:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1c198:	bd08      	pop	{r3, pc}
   1c19a:	bf00      	nop
   1c19c:	2000d3fc 	.word	0x2000d3fc

0001c1a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1c1a0:	bf30      	wfi
    b z_SysNmiOnReset
   1c1a2:	f7ff bffd 	b.w	1c1a0 <z_SysNmiOnReset>
   1c1a6:	bf00      	nop

0001c1a8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c1a8:	4a0b      	ldr	r2, [pc, #44]	; (1c1d8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1c1aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c1ac:	4b0b      	ldr	r3, [pc, #44]	; (1c1dc <z_arm_prep_c+0x34>)
   1c1ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1c1b2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1c1b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c1b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1c1bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1c1c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1c1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1c1c8:	f009 fcd6 	bl	25b78 <z_bss_zero>
	z_data_copy();
   1c1cc:	f00b fe04 	bl	27dd8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1c1d0:	f000 faea 	bl	1c7a8 <z_arm_interrupt_init>
	z_cstart();
   1c1d4:	f009 fcda 	bl	25b8c <z_cstart>
   1c1d8:	00018200 	.word	0x00018200
   1c1dc:	e000ed00 	.word	0xe000ed00

0001c1e0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1c1e0:	4a09      	ldr	r2, [pc, #36]	; (1c208 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1c1e2:	490a      	ldr	r1, [pc, #40]	; (1c20c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1c1e4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1c1e6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1c1e8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1c1ea:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c1ec:	4908      	ldr	r1, [pc, #32]	; (1c210 <arch_swap+0x30>)
   1c1ee:	684b      	ldr	r3, [r1, #4]
   1c1f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c1f4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1c1f6:	2300      	movs	r3, #0
   1c1f8:	f383 8811 	msr	BASEPRI, r3
   1c1fc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1c200:	6893      	ldr	r3, [r2, #8]
}
   1c202:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1c204:	4770      	bx	lr
   1c206:	bf00      	nop
   1c208:	2000d3fc 	.word	0x2000d3fc
   1c20c:	0002e168 	.word	0x0002e168
   1c210:	e000ed00 	.word	0xe000ed00

0001c214 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1c214:	4913      	ldr	r1, [pc, #76]	; (1c264 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1c216:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1c218:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1c21c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1c21e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1c222:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c226:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1c228:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1c22c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1c230:	4f0d      	ldr	r7, [pc, #52]	; (1c268 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1c232:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1c236:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1c238:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1c23a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1c23c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1c23e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1c240:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1c242:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1c246:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1c24a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1c24e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1c252:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1c256:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1c258:	f00e fe24 	bl	2aea4 <configure_builtin_stack_guard>
    pop {r2, lr}
   1c25c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1c260:	4770      	bx	lr
   1c262:	0000      	.short	0x0000
    ldr r1, =_kernel
   1c264:	2000d3fc 	.word	0x2000d3fc
    ldr v4, =_SCS_ICSR
   1c268:	e000ed04 	.word	0xe000ed04

0001c26c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1c26c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1c270:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1c272:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1c276:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1c27a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1c27c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1c280:	2902      	cmp	r1, #2
    beq _oops
   1c282:	d0ff      	beq.n	1c284 <_oops>

0001c284 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1c284:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1c286:	f00e fdfe 	bl	2ae86 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1c28a:	bd01      	pop	{r0, pc}

0001c28c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1c28c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1c290:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1c292:	490b      	ldr	r1, [pc, #44]	; (1c2c0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   1c294:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1c298:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1c29a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1c29e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1c2a2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1c2a4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1c2a8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1c2ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1c2b0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1c2b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1c2b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1c2b8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1c2ba:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1c2bc:	4770      	bx	lr
   1c2be:	bf00      	nop
   1c2c0:	0002a967 	.word	0x0002a967

0001c2c4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1c2c4:	4b08      	ldr	r3, [pc, #32]	; (1c2e8 <arch_switch_to_main_thread+0x24>)
   1c2c6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1c2c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1c2ca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1c2ce:	4610      	mov	r0, r2
   1c2d0:	f381 8809 	msr	PSP, r1
   1c2d4:	2100      	movs	r1, #0
   1c2d6:	b663      	cpsie	if
   1c2d8:	f381 8811 	msr	BASEPRI, r1
   1c2dc:	f3bf 8f6f 	isb	sy
   1c2e0:	2200      	movs	r2, #0
   1c2e2:	2300      	movs	r3, #0
   1c2e4:	f00e fb3f 	bl	2a966 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1c2e8:	2000d3fc 	.word	0x2000d3fc

0001c2ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1c2ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1c2ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1c2f0:	4a0b      	ldr	r2, [pc, #44]	; (1c320 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1c2f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1c2f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1c2f6:	bf1e      	ittt	ne
	movne	r1, #0
   1c2f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1c2fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1c2fc:	f010 fb42 	blne	2c984 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1c300:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1c302:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1c306:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1c30a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1c30e:	4905      	ldr	r1, [pc, #20]	; (1c324 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1c310:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1c312:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1c314:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1c316:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1c31a:	4903      	ldr	r1, [pc, #12]	; (1c328 <_isr_wrapper+0x3c>)
	bx r1
   1c31c:	4708      	bx	r1
   1c31e:	0000      	.short	0x0000
	ldr r2, =_kernel
   1c320:	2000d3fc 	.word	0x2000d3fc
	ldr r1, =_sw_isr_table
   1c324:	0002da58 	.word	0x0002da58
	ldr r1, =z_arm_int_exit
   1c328:	0001c32d 	.word	0x0001c32d

0001c32c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1c32c:	4b04      	ldr	r3, [pc, #16]	; (1c340 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1c32e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1c330:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1c332:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1c334:	d003      	beq.n	1c33e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1c336:	4903      	ldr	r1, [pc, #12]	; (1c344 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1c338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1c33c:	600a      	str	r2, [r1, #0]

0001c33e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1c33e:	4770      	bx	lr
	ldr r3, =_kernel
   1c340:	2000d3fc 	.word	0x2000d3fc
	ldr r1, =_SCS_ICSR
   1c344:	e000ed04 	.word	0xe000ed04

0001c348 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c348:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c34a:	4c2b      	ldr	r4, [pc, #172]	; (1c3f8 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c34c:	4606      	mov	r6, r0
   1c34e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1c350:	482a      	ldr	r0, [pc, #168]	; (1c3fc <mem_manage_fault.isra.0+0xb4>)
   1c352:	2145      	movs	r1, #69	; 0x45
   1c354:	f00e fc65 	bl	2ac22 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c358:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c35a:	06d0      	lsls	r0, r2, #27
   1c35c:	d503      	bpl.n	1c366 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1c35e:	2145      	movs	r1, #69	; 0x45
   1c360:	4827      	ldr	r0, [pc, #156]	; (1c400 <mem_manage_fault.isra.0+0xb8>)
   1c362:	f00e fc5e 	bl	2ac22 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1c366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c368:	0719      	lsls	r1, r3, #28
   1c36a:	d503      	bpl.n	1c374 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   1c36c:	2145      	movs	r1, #69	; 0x45
   1c36e:	4825      	ldr	r0, [pc, #148]	; (1c404 <mem_manage_fault.isra.0+0xbc>)
   1c370:	f00e fc57 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1c374:	4c20      	ldr	r4, [pc, #128]	; (1c3f8 <mem_manage_fault.isra.0+0xb0>)
   1c376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c378:	079a      	lsls	r2, r3, #30
   1c37a:	d510      	bpl.n	1c39e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   1c37c:	2145      	movs	r1, #69	; 0x45
   1c37e:	4822      	ldr	r0, [pc, #136]	; (1c408 <mem_manage_fault.isra.0+0xc0>)
   1c380:	f00e fc4f 	bl	2ac22 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1c384:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1c386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c388:	061b      	lsls	r3, r3, #24
   1c38a:	d508      	bpl.n	1c39e <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1c38c:	2145      	movs	r1, #69	; 0x45
   1c38e:	481f      	ldr	r0, [pc, #124]	; (1c40c <mem_manage_fault.isra.0+0xc4>)
   1c390:	f00e fc47 	bl	2ac22 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1c394:	b11e      	cbz	r6, 1c39e <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1c396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c39c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1c39e:	4c16      	ldr	r4, [pc, #88]	; (1c3f8 <mem_manage_fault.isra.0+0xb0>)
   1c3a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c3a2:	07d6      	lsls	r6, r2, #31
   1c3a4:	d503      	bpl.n	1c3ae <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   1c3a6:	2145      	movs	r1, #69	; 0x45
   1c3a8:	4819      	ldr	r0, [pc, #100]	; (1c410 <mem_manage_fault.isra.0+0xc8>)
   1c3aa:	f00e fc3a 	bl	2ac22 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1c3ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3b0:	0698      	lsls	r0, r3, #26
   1c3b2:	d503      	bpl.n	1c3bc <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
   1c3b4:	2145      	movs	r1, #69	; 0x45
   1c3b6:	4817      	ldr	r0, [pc, #92]	; (1c414 <mem_manage_fault.isra.0+0xcc>)
   1c3b8:	f00e fc33 	bl	2ac22 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c3bc:	4b0e      	ldr	r3, [pc, #56]	; (1c3f8 <mem_manage_fault.isra.0+0xb0>)
   1c3be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c3c0:	06d1      	lsls	r1, r2, #27
   1c3c2:	d402      	bmi.n	1c3ca <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1c3c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c3c6:	0792      	lsls	r2, r2, #30
   1c3c8:	d50d      	bpl.n	1c3e6 <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c3cc:	06db      	lsls	r3, r3, #27
   1c3ce:	d50a      	bpl.n	1c3e6 <mem_manage_fault.isra.0+0x9e>
   1c3d0:	4911      	ldr	r1, [pc, #68]	; (1c418 <mem_manage_fault.isra.0+0xd0>)
   1c3d2:	4812      	ldr	r0, [pc, #72]	; (1c41c <mem_manage_fault.isra.0+0xd4>)
   1c3d4:	f240 124f 	movw	r2, #335	; 0x14f
   1c3d8:	f00e fa64 	bl	2a8a4 <printk>
   1c3dc:	f240 114f 	movw	r1, #335	; 0x14f
   1c3e0:	480d      	ldr	r0, [pc, #52]	; (1c418 <mem_manage_fault.isra.0+0xd0>)
   1c3e2:	f00e fbf8 	bl	2abd6 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1c3e6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1c3e8:	4a03      	ldr	r2, [pc, #12]	; (1c3f8 <mem_manage_fault.isra.0+0xb0>)
   1c3ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c3ec:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1c3f0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c3f2:	7028      	strb	r0, [r5, #0]

	return reason;
}
   1c3f4:	bd70      	pop	{r4, r5, r6, pc}
   1c3f6:	bf00      	nop
   1c3f8:	e000ed00 	.word	0xe000ed00
   1c3fc:	0002e783 	.word	0x0002e783
   1c400:	0002e79e 	.word	0x0002e79e
   1c404:	0002e7d6 	.word	0x0002e7d6
   1c408:	0002e7ee 	.word	0x0002e7ee
   1c40c:	0002e80b 	.word	0x0002e80b
   1c410:	0002e826 	.word	0x0002e826
   1c414:	0002e84a 	.word	0x0002e84a
   1c418:	0002e87e 	.word	0x0002e87e
   1c41c:	0002e574 	.word	0x0002e574

0001c420 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1c420:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1c422:	4c23      	ldr	r4, [pc, #140]	; (1c4b0 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1c424:	4606      	mov	r6, r0
   1c426:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1c428:	4822      	ldr	r0, [pc, #136]	; (1c4b4 <bus_fault.isra.0+0x94>)
   1c42a:	2145      	movs	r1, #69	; 0x45
   1c42c:	f00e fbf9 	bl	2ac22 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1c430:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c432:	04d1      	lsls	r1, r2, #19
   1c434:	d503      	bpl.n	1c43e <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1c436:	2145      	movs	r1, #69	; 0x45
   1c438:	481f      	ldr	r0, [pc, #124]	; (1c4b8 <bus_fault.isra.0+0x98>)
   1c43a:	f00e fbf2 	bl	2ac22 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1c43e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c440:	051a      	lsls	r2, r3, #20
   1c442:	d503      	bpl.n	1c44c <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   1c444:	2145      	movs	r1, #69	; 0x45
   1c446:	481d      	ldr	r0, [pc, #116]	; (1c4bc <bus_fault.isra.0+0x9c>)
   1c448:	f00e fbeb 	bl	2ac22 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1c44c:	4c18      	ldr	r4, [pc, #96]	; (1c4b0 <bus_fault.isra.0+0x90>)
   1c44e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c450:	059b      	lsls	r3, r3, #22
   1c452:	d510      	bpl.n	1c476 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   1c454:	481a      	ldr	r0, [pc, #104]	; (1c4c0 <bus_fault.isra.0+0xa0>)
   1c456:	2145      	movs	r1, #69	; 0x45
   1c458:	f00e fbe3 	bl	2ac22 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1c45c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1c45e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c460:	0418      	lsls	r0, r3, #16
   1c462:	d508      	bpl.n	1c476 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1c464:	2145      	movs	r1, #69	; 0x45
   1c466:	4817      	ldr	r0, [pc, #92]	; (1c4c4 <bus_fault.isra.0+0xa4>)
   1c468:	f00e fbdb 	bl	2ac22 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1c46c:	b11e      	cbz	r6, 1c476 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1c46e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c470:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1c474:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1c476:	4c0e      	ldr	r4, [pc, #56]	; (1c4b0 <bus_fault.isra.0+0x90>)
   1c478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c47a:	0559      	lsls	r1, r3, #21
   1c47c:	d503      	bpl.n	1c486 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1c47e:	2145      	movs	r1, #69	; 0x45
   1c480:	4811      	ldr	r0, [pc, #68]	; (1c4c8 <bus_fault.isra.0+0xa8>)
   1c482:	f00e fbce 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1c486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c488:	05da      	lsls	r2, r3, #23
   1c48a:	d50b      	bpl.n	1c4a4 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   1c48c:	2145      	movs	r1, #69	; 0x45
   1c48e:	480f      	ldr	r0, [pc, #60]	; (1c4cc <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c490:	f00e fbc7 	bl	2ac22 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   1c494:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1c496:	4a06      	ldr	r2, [pc, #24]	; (1c4b0 <bus_fault.isra.0+0x90>)
   1c498:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c49a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1c49e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c4a0:	7028      	strb	r0, [r5, #0]

	return reason;
}
   1c4a2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1c4a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c4a6:	049b      	lsls	r3, r3, #18
   1c4a8:	d5f4      	bpl.n	1c494 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c4aa:	2145      	movs	r1, #69	; 0x45
   1c4ac:	4808      	ldr	r0, [pc, #32]	; (1c4d0 <bus_fault.isra.0+0xb0>)
   1c4ae:	e7ef      	b.n	1c490 <bus_fault.isra.0+0x70>
   1c4b0:	e000ed00 	.word	0xe000ed00
   1c4b4:	0002e8b8 	.word	0x0002e8b8
   1c4b8:	0002e8d3 	.word	0x0002e8d3
   1c4bc:	0002e7d6 	.word	0x0002e7d6
   1c4c0:	0002e8e9 	.word	0x0002e8e9
   1c4c4:	0002e907 	.word	0x0002e907
   1c4c8:	0002e921 	.word	0x0002e921
   1c4cc:	0002e941 	.word	0x0002e941
   1c4d0:	0002e84a 	.word	0x0002e84a

0001c4d4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1c4d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c4d6:	4c21      	ldr	r4, [pc, #132]	; (1c55c <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1c4d8:	2145      	movs	r1, #69	; 0x45
   1c4da:	4821      	ldr	r0, [pc, #132]	; (1c560 <usage_fault.isra.0+0x8c>)
   1c4dc:	f00e fba1 	bl	2ac22 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c4e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1c4e2:	0195      	lsls	r5, r2, #6
   1c4e4:	d503      	bpl.n	1c4ee <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   1c4e6:	2145      	movs	r1, #69	; 0x45
   1c4e8:	481e      	ldr	r0, [pc, #120]	; (1c564 <usage_fault.isra.0+0x90>)
   1c4ea:	f00e fb9a 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1c4ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c4f0:	01dc      	lsls	r4, r3, #7
   1c4f2:	d503      	bpl.n	1c4fc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   1c4f4:	2145      	movs	r1, #69	; 0x45
   1c4f6:	481c      	ldr	r0, [pc, #112]	; (1c568 <usage_fault.isra.0+0x94>)
   1c4f8:	f00e fb93 	bl	2ac22 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1c4fc:	4d17      	ldr	r5, [pc, #92]	; (1c55c <usage_fault.isra.0+0x88>)
   1c4fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1c500:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1c504:	d004      	beq.n	1c510 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1c506:	2145      	movs	r1, #69	; 0x45
   1c508:	4818      	ldr	r0, [pc, #96]	; (1c56c <usage_fault.isra.0+0x98>)
   1c50a:	f00e fb8a 	bl	2ac22 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1c50e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1c510:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c512:	0318      	lsls	r0, r3, #12
   1c514:	d503      	bpl.n	1c51e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1c516:	2145      	movs	r1, #69	; 0x45
   1c518:	4815      	ldr	r0, [pc, #84]	; (1c570 <usage_fault.isra.0+0x9c>)
   1c51a:	f00e fb82 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1c51e:	4d0f      	ldr	r5, [pc, #60]	; (1c55c <usage_fault.isra.0+0x88>)
   1c520:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1c522:	0351      	lsls	r1, r2, #13
   1c524:	d503      	bpl.n	1c52e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1c526:	2145      	movs	r1, #69	; 0x45
   1c528:	4812      	ldr	r0, [pc, #72]	; (1c574 <usage_fault.isra.0+0xa0>)
   1c52a:	f00e fb7a 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1c52e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c530:	039a      	lsls	r2, r3, #14
   1c532:	d503      	bpl.n	1c53c <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1c534:	2145      	movs	r1, #69	; 0x45
   1c536:	4810      	ldr	r0, [pc, #64]	; (1c578 <usage_fault.isra.0+0xa4>)
   1c538:	f00e fb73 	bl	2ac22 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1c53c:	4d07      	ldr	r5, [pc, #28]	; (1c55c <usage_fault.isra.0+0x88>)
   1c53e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c540:	03db      	lsls	r3, r3, #15
   1c542:	d503      	bpl.n	1c54c <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1c544:	2145      	movs	r1, #69	; 0x45
   1c546:	480d      	ldr	r0, [pc, #52]	; (1c57c <usage_fault.isra.0+0xa8>)
   1c548:	f00e fb6b 	bl	2ac22 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c54c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   1c54e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c550:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1c554:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1c558:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1c55a:	bd38      	pop	{r3, r4, r5, pc}
   1c55c:	e000ed00 	.word	0xe000ed00
   1c560:	0002e95e 	.word	0x0002e95e
   1c564:	0002e97b 	.word	0x0002e97b
   1c568:	0002e993 	.word	0x0002e993
   1c56c:	0002e9b2 	.word	0x0002e9b2
   1c570:	0002e9e1 	.word	0x0002e9e1
   1c574:	0002ea04 	.word	0x0002ea04
   1c578:	0002ea2e 	.word	0x0002ea2e
   1c57c:	0002ea4d 	.word	0x0002ea4d

0001c580 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1c580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c584:	4b6e      	ldr	r3, [pc, #440]	; (1c740 <z_arm_fault+0x1c0>)
{
   1c586:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c588:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1c58c:	4689      	mov	r9, r1
   1c58e:	4614      	mov	r4, r2
   1c590:	2600      	movs	r6, #0
   1c592:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c594:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1c598:	f386 8811 	msr	BASEPRI, r6
   1c59c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1c5a0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1c5a4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c5a8:	d111      	bne.n	1c5ce <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1c5aa:	07d0      	lsls	r0, r2, #31
   1c5ac:	d40f      	bmi.n	1c5ce <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1c5ae:	0651      	lsls	r1, r2, #25
   1c5b0:	d403      	bmi.n	1c5ba <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1c5b2:	0722      	lsls	r2, r4, #28
   1c5b4:	d408      	bmi.n	1c5c8 <z_arm_fault+0x48>
			*nested_exc = true;
   1c5b6:	2601      	movs	r6, #1
   1c5b8:	e008      	b.n	1c5cc <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1c5ba:	2145      	movs	r1, #69	; 0x45
   1c5bc:	4861      	ldr	r0, [pc, #388]	; (1c744 <z_arm_fault+0x1c4>)
   1c5be:	f00e fb30 	bl	2ac22 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1c5c2:	f014 0404 	ands.w	r4, r4, #4
   1c5c6:	d000      	beq.n	1c5ca <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
   1c5c8:	464d      	mov	r5, r9
	*nested_exc = false;
   1c5ca:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1c5cc:	b95d      	cbnz	r5, 1c5e6 <z_arm_fault+0x66>
   1c5ce:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1c5d2:	495d      	ldr	r1, [pc, #372]	; (1c748 <z_arm_fault+0x1c8>)
   1c5d4:	485d      	ldr	r0, [pc, #372]	; (1c74c <z_arm_fault+0x1cc>)
   1c5d6:	f00e f965 	bl	2a8a4 <printk>
   1c5da:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1c5de:	485a      	ldr	r0, [pc, #360]	; (1c748 <z_arm_fault+0x1c8>)
   1c5e0:	f00e faf9 	bl	2abd6 <assert_post_action>
   1c5e4:	2500      	movs	r5, #0
	*recoverable = false;
   1c5e6:	2300      	movs	r3, #0
   1c5e8:	1efa      	subs	r2, r7, #3
   1c5ea:	461c      	mov	r4, r3
   1c5ec:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1c5f0:	4613      	mov	r3, r2
   1c5f2:	2b09      	cmp	r3, #9
   1c5f4:	f200 8091 	bhi.w	1c71a <z_arm_fault+0x19a>
   1c5f8:	e8df f003 	tbb	[pc, r3]
   1c5fc:	6c888405 	.word	0x6c888405
   1c600:	8f8f8f8f 	.word	0x8f8f8f8f
   1c604:	8c8f      	.short	0x8c8f
	PR_FAULT_INFO("***** HARD FAULT *****");
   1c606:	2145      	movs	r1, #69	; 0x45
   1c608:	4851      	ldr	r0, [pc, #324]	; (1c750 <z_arm_fault+0x1d0>)
   1c60a:	f00e fb0a 	bl	2ac22 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c60e:	4b4c      	ldr	r3, [pc, #304]	; (1c740 <z_arm_fault+0x1c0>)
	*recoverable = false;
   1c610:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c614:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1c616:	f014 0402 	ands.w	r4, r4, #2
   1c61a:	d005      	beq.n	1c628 <z_arm_fault+0xa8>
		PR_EXC("  Bus fault on vector table read");
   1c61c:	2145      	movs	r1, #69	; 0x45
   1c61e:	484d      	ldr	r0, [pc, #308]	; (1c754 <z_arm_fault+0x1d4>)
	PR_FAULT_INFO(
   1c620:	f00e faff 	bl	2ac22 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1c624:	2400      	movs	r4, #0
}
   1c626:	e006      	b.n	1c636 <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1c628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c62a:	2a00      	cmp	r2, #0
   1c62c:	da23      	bge.n	1c676 <z_arm_fault+0xf6>
		PR_EXC("  Debug event");
   1c62e:	2145      	movs	r1, #69	; 0x45
   1c630:	4849      	ldr	r0, [pc, #292]	; (1c758 <z_arm_fault+0x1d8>)
   1c632:	f00e faf6 	bl	2ac22 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1c636:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c63a:	b9cb      	cbnz	r3, 1c670 <z_arm_fault+0xf0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1c63c:	aa02      	add	r2, sp, #8
   1c63e:	f105 0720 	add.w	r7, r5, #32
   1c642:	4613      	mov	r3, r2
   1c644:	6828      	ldr	r0, [r5, #0]
   1c646:	6869      	ldr	r1, [r5, #4]
   1c648:	3508      	adds	r5, #8
   1c64a:	c303      	stmia	r3!, {r0, r1}
   1c64c:	42bd      	cmp	r5, r7
   1c64e:	461a      	mov	r2, r3
   1c650:	d1f7      	bne.n	1c642 <z_arm_fault+0xc2>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1c652:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c654:	2e00      	cmp	r6, #0
   1c656:	d06d      	beq.n	1c734 <z_arm_fault+0x1b4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1c658:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1c65c:	b922      	cbnz	r2, 1c668 <z_arm_fault+0xe8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1c65e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1c662:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c666:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1c668:	4620      	mov	r0, r4
   1c66a:	a902      	add	r1, sp, #8
   1c66c:	f7ff fd04 	bl	1c078 <z_arm_fatal_error>
}
   1c670:	b00b      	add	sp, #44	; 0x2c
   1c672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c678:	005b      	lsls	r3, r3, #1
   1c67a:	d53a      	bpl.n	1c6f2 <z_arm_fault+0x172>
		PR_EXC("  Fault escalation (see below)");
   1c67c:	2145      	movs	r1, #69	; 0x45
   1c67e:	4837      	ldr	r0, [pc, #220]	; (1c75c <z_arm_fault+0x1dc>)
   1c680:	f00e facf 	bl	2ac22 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   1c684:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1c686:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   1c68a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1c68e:	429a      	cmp	r2, r3
   1c690:	d00c      	beq.n	1c6ac <z_arm_fault+0x12c>
		} else if (SCB_MMFSR != 0) {
   1c692:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1c696:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   1c69a:	781b      	ldrb	r3, [r3, #0]
   1c69c:	b16b      	cbz	r3, 1c6ba <z_arm_fault+0x13a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1c69e:	2001      	movs	r0, #1
   1c6a0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1c6a4:	f7ff fe50 	bl	1c348 <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
   1c6a8:	4604      	mov	r4, r0
		break;
   1c6aa:	e7c4      	b.n	1c636 <z_arm_fault+0xb6>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1c6ac:	2145      	movs	r1, #69	; 0x45
   1c6ae:	682a      	ldr	r2, [r5, #0]
   1c6b0:	482b      	ldr	r0, [pc, #172]	; (1c760 <z_arm_fault+0x1e0>)
   1c6b2:	f00e fab6 	bl	2ac22 <z_log_minimal_printk>
			reason = esf->basic.r0;
   1c6b6:	682c      	ldr	r4, [r5, #0]
   1c6b8:	e7bd      	b.n	1c636 <z_arm_fault+0xb6>
		} else if (SCB_BFSR != 0) {
   1c6ba:	4b2a      	ldr	r3, [pc, #168]	; (1c764 <z_arm_fault+0x1e4>)
   1c6bc:	781b      	ldrb	r3, [r3, #0]
   1c6be:	b12b      	cbz	r3, 1c6cc <z_arm_fault+0x14c>
			reason = bus_fault(esf, 1, recoverable);
   1c6c0:	2001      	movs	r0, #1
   1c6c2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1c6c6:	f7ff feab 	bl	1c420 <bus_fault.isra.0>
   1c6ca:	e7ed      	b.n	1c6a8 <z_arm_fault+0x128>
		} else if (SCB_UFSR != 0) {
   1c6cc:	4b26      	ldr	r3, [pc, #152]	; (1c768 <z_arm_fault+0x1e8>)
   1c6ce:	881b      	ldrh	r3, [r3, #0]
   1c6d0:	b29b      	uxth	r3, r3
   1c6d2:	b113      	cbz	r3, 1c6da <z_arm_fault+0x15a>
		reason = usage_fault(esf);
   1c6d4:	f7ff fefe 	bl	1c4d4 <usage_fault.isra.0>
   1c6d8:	e7e6      	b.n	1c6a8 <z_arm_fault+0x128>
			__ASSERT(0,
   1c6da:	491b      	ldr	r1, [pc, #108]	; (1c748 <z_arm_fault+0x1c8>)
   1c6dc:	f240 22c3 	movw	r2, #707	; 0x2c3
   1c6e0:	481a      	ldr	r0, [pc, #104]	; (1c74c <z_arm_fault+0x1cc>)
   1c6e2:	f00e f8df 	bl	2a8a4 <printk>
   1c6e6:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   1c6ea:	4817      	ldr	r0, [pc, #92]	; (1c748 <z_arm_fault+0x1c8>)
   1c6ec:	f00e fa73 	bl	2abd6 <assert_post_action>
   1c6f0:	e7a1      	b.n	1c636 <z_arm_fault+0xb6>
   1c6f2:	4915      	ldr	r1, [pc, #84]	; (1c748 <z_arm_fault+0x1c8>)
   1c6f4:	f240 22c7 	movw	r2, #711	; 0x2c7
   1c6f8:	4814      	ldr	r0, [pc, #80]	; (1c74c <z_arm_fault+0x1cc>)
   1c6fa:	f00e f8d3 	bl	2a8a4 <printk>
   1c6fe:	f240 21c7 	movw	r1, #711	; 0x2c7
   1c702:	e7f2      	b.n	1c6ea <z_arm_fault+0x16a>
		reason = mem_manage_fault(esf, 0, recoverable);
   1c704:	2000      	movs	r0, #0
   1c706:	f10d 0107 	add.w	r1, sp, #7
   1c70a:	e7cb      	b.n	1c6a4 <z_arm_fault+0x124>
		reason = bus_fault(esf, 0, recoverable);
   1c70c:	2000      	movs	r0, #0
   1c70e:	f10d 0107 	add.w	r1, sp, #7
   1c712:	e7d8      	b.n	1c6c6 <z_arm_fault+0x146>
	PR_FAULT_INFO(
   1c714:	2145      	movs	r1, #69	; 0x45
   1c716:	4815      	ldr	r0, [pc, #84]	; (1c76c <z_arm_fault+0x1ec>)
   1c718:	e782      	b.n	1c620 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   1c71a:	4915      	ldr	r1, [pc, #84]	; (1c770 <z_arm_fault+0x1f0>)
   1c71c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1c720:	4a14      	ldr	r2, [pc, #80]	; (1c774 <z_arm_fault+0x1f4>)
   1c722:	4815      	ldr	r0, [pc, #84]	; (1c778 <z_arm_fault+0x1f8>)
   1c724:	bf08      	it	eq
   1c726:	460a      	moveq	r2, r1
   1c728:	f1a7 0310 	sub.w	r3, r7, #16
   1c72c:	2145      	movs	r1, #69	; 0x45
   1c72e:	f00e fa78 	bl	2ac22 <z_log_minimal_printk>
   1c732:	e777      	b.n	1c624 <z_arm_fault+0xa4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c734:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1c738:	f023 0301 	bic.w	r3, r3, #1
   1c73c:	e793      	b.n	1c666 <z_arm_fault+0xe6>
   1c73e:	bf00      	nop
   1c740:	e000ed00 	.word	0xe000ed00
   1c744:	0002eaab 	.word	0x0002eaab
   1c748:	0002e87e 	.word	0x0002e87e
   1c74c:	0002e574 	.word	0x0002e574
   1c750:	0002ead3 	.word	0x0002ead3
   1c754:	0002eaef 	.word	0x0002eaef
   1c758:	0002eb15 	.word	0x0002eb15
   1c75c:	0002eb28 	.word	0x0002eb28
   1c760:	0002eb4c 	.word	0x0002eb4c
   1c764:	e000ed29 	.word	0xe000ed29
   1c768:	e000ed2a 	.word	0xe000ed2a
   1c76c:	0002eb6d 	.word	0x0002eb6d
   1c770:	0002ea7d 	.word	0x0002ea7d
   1c774:	0002ea92 	.word	0x0002ea92
   1c778:	0002eb96 	.word	0x0002eb96

0001c77c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1c77c:	4b04      	ldr	r3, [pc, #16]	; (1c790 <z_arm_fault_init+0x14>)
   1c77e:	695a      	ldr	r2, [r3, #20]
   1c780:	f042 0210 	orr.w	r2, r2, #16
   1c784:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1c786:	695a      	ldr	r2, [r3, #20]
   1c788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1c78c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1c78e:	4770      	bx	lr
   1c790:	e000ed00 	.word	0xe000ed00

0001c794 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1c794:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1c798:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1c79c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1c79e:	4672      	mov	r2, lr
	bl z_arm_fault
   1c7a0:	f7ff feee 	bl	1c580 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1c7a4:	bd01      	pop	{r0, pc}
   1c7a6:	bf00      	nop

0001c7a8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1c7a8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c7aa:	2120      	movs	r1, #32
   1c7ac:	4803      	ldr	r0, [pc, #12]	; (1c7bc <z_arm_interrupt_init+0x14>)
   1c7ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1c7b0:	3301      	adds	r3, #1
   1c7b2:	2b41      	cmp	r3, #65	; 0x41
   1c7b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1c7b8:	d1f9      	bne.n	1c7ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1c7ba:	4770      	bx	lr
   1c7bc:	e000e100 	.word	0xe000e100

0001c7c0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1c7c0:	2000      	movs	r0, #0
    msr CONTROL, r0
   1c7c2:	f380 8814 	msr	CONTROL, r0
    isb
   1c7c6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1c7ca:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1c7cc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1c7d0:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1c7d4:	f011 f8a2 	bl	2d91c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1c7d8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1c7da:	490e      	ldr	r1, [pc, #56]	; (1c814 <__start+0x54>)
    str r0, [r1]
   1c7dc:	6008      	str	r0, [r1, #0]
    dsb
   1c7de:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c7e2:	480d      	ldr	r0, [pc, #52]	; (1c818 <__start+0x58>)
    msr msp, r0
   1c7e4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1c7e8:	f000 f83c 	bl	1c864 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c7ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1c7ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1c7f2:	480a      	ldr	r0, [pc, #40]	; (1c81c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1c7f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1c7f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1c7fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1c7fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1c802:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1c804:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1c806:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1c80a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1c80e:	f7ff fccb 	bl	1c1a8 <z_arm_prep_c>
   1c812:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1c814:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c818:	20010478 	.word	0x20010478
    ldr r0, =z_interrupt_stacks
   1c81c:	200105b8 	.word	0x200105b8

0001c820 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1c820:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c824:	4905      	ldr	r1, [pc, #20]	; (1c83c <sys_arch_reboot+0x1c>)
   1c826:	4b06      	ldr	r3, [pc, #24]	; (1c840 <sys_arch_reboot+0x20>)
   1c828:	68ca      	ldr	r2, [r1, #12]
   1c82a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c82e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c830:	60cb      	str	r3, [r1, #12]
   1c832:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c836:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c838:	e7fd      	b.n	1c836 <sys_arch_reboot+0x16>
   1c83a:	bf00      	nop
   1c83c:	e000ed00 	.word	0xe000ed00
   1c840:	05fa0004 	.word	0x05fa0004

0001c844 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1c844:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1c846:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1c848:	4a05      	ldr	r2, [pc, #20]	; (1c860 <z_arm_clear_arm_mpu_config+0x1c>)
   1c84a:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   1c84c:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   1c850:	428b      	cmp	r3, r1
   1c852:	d100      	bne.n	1c856 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   1c854:	4770      	bx	lr
  mpu->RNR = rnr;
   1c856:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   1c858:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   1c85a:	3301      	adds	r3, #1
   1c85c:	e7f8      	b.n	1c850 <z_arm_clear_arm_mpu_config+0xc>
   1c85e:	bf00      	nop
   1c860:	e000ed90 	.word	0xe000ed90

0001c864 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1c864:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1c866:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1c868:	2400      	movs	r4, #0
   1c86a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1c86e:	f7ff ffe9 	bl	1c844 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c872:	4a0e      	ldr	r2, [pc, #56]	; (1c8ac <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   1c874:	4623      	mov	r3, r4
   1c876:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c878:	f04f 34ff 	mov.w	r4, #4294967295
   1c87c:	f103 0020 	add.w	r0, r3, #32
   1c880:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c882:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c884:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c888:	d1f8      	bne.n	1c87c <z_arm_init_arch_hw_at_boot+0x18>
   1c88a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c88c:	f04f 30ff 	mov.w	r0, #4294967295
   1c890:	f103 0260 	add.w	r2, r3, #96	; 0x60
   1c894:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c896:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c898:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c89c:	d1f8      	bne.n	1c890 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1c89e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1c8a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c8a4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1c8a8:	bd10      	pop	{r4, pc}
   1c8aa:	bf00      	nop
   1c8ac:	e000e100 	.word	0xe000e100

0001c8b0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1c8b0:	4b06      	ldr	r3, [pc, #24]	; (1c8cc <z_impl_k_thread_abort+0x1c>)
   1c8b2:	689b      	ldr	r3, [r3, #8]
   1c8b4:	4283      	cmp	r3, r0
   1c8b6:	d107      	bne.n	1c8c8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c8b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1c8bc:	b123      	cbz	r3, 1c8c8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c8be:	4a04      	ldr	r2, [pc, #16]	; (1c8d0 <z_impl_k_thread_abort+0x20>)
   1c8c0:	6853      	ldr	r3, [r2, #4]
   1c8c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c8c6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   1c8c8:	f00b b99a 	b.w	27c00 <z_thread_abort>
   1c8cc:	2000d3fc 	.word	0x2000d3fc
   1c8d0:	e000ed00 	.word	0xe000ed00

0001c8d4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c8d6:	4c09      	ldr	r4, [pc, #36]	; (1c8fc <z_arm_configure_static_mpu_regions+0x28>)
   1c8d8:	4a09      	ldr	r2, [pc, #36]	; (1c900 <z_arm_configure_static_mpu_regions+0x2c>)
   1c8da:	4623      	mov	r3, r4
   1c8dc:	2101      	movs	r1, #1
   1c8de:	4809      	ldr	r0, [pc, #36]	; (1c904 <z_arm_configure_static_mpu_regions+0x30>)
   1c8e0:	f000 f91a 	bl	1cb18 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c8e4:	2300      	movs	r3, #0
   1c8e6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c8e8:	4b07      	ldr	r3, [pc, #28]	; (1c908 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8ea:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c8ec:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8ee:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c8f0:	9301      	str	r3, [sp, #4]
   1c8f2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c8f4:	f000 f92c 	bl	1cb50 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c8f8:	b004      	add	sp, #16
   1c8fa:	bd10      	pop	{r4, pc}
   1c8fc:	20040000 	.word	0x20040000
   1c900:	2000c500 	.word	0x2000c500
   1c904:	0002de48 	.word	0x0002de48
   1c908:	2000cac0 	.word	0x2000cac0

0001c90c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c90c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c90e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c910:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c912:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1c916:	f004 031f 	and.w	r3, r4, #31
   1c91a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c91c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c91e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c920:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1c924:	4904      	ldr	r1, [pc, #16]	; (1c938 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c926:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c92a:	f043 0301 	orr.w	r3, r3, #1
   1c92e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1c930:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1c932:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1c934:	bd10      	pop	{r4, pc}
   1c936:	bf00      	nop
   1c938:	e000ed90 	.word	0xe000ed90

0001c93c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   1c93c:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1c93e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1c940:	680c      	ldr	r4, [r1, #0]
{
   1c942:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   1c944:	890a      	ldrh	r2, [r1, #8]
   1c946:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1c948:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1c94a:	3b01      	subs	r3, #1
   1c94c:	f024 041f 	bic.w	r4, r4, #31
   1c950:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1c952:	f002 021f 	and.w	r2, r2, #31
   1c956:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1c95a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1c95e:	280f      	cmp	r0, #15
   1c960:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   1c962:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1c966:	9303      	str	r3, [sp, #12]
   1c968:	d909      	bls.n	1c97e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c96a:	4602      	mov	r2, r0
   1c96c:	2145      	movs	r1, #69	; 0x45
   1c96e:	4806      	ldr	r0, [pc, #24]	; (1c988 <mpu_configure_region+0x4c>)
   1c970:	f00e f957 	bl	2ac22 <z_log_minimal_printk>
   1c974:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   1c978:	4620      	mov	r0, r4
   1c97a:	b005      	add	sp, #20
   1c97c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1c97e:	4669      	mov	r1, sp
   1c980:	f7ff ffc4 	bl	1c90c <region_init>
	return region_allocate_and_init(index,
   1c984:	e7f8      	b.n	1c978 <mpu_configure_region+0x3c>
   1c986:	bf00      	nop
   1c988:	0002ebb2 	.word	0x0002ebb2

0001c98c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c990:	4689      	mov	r9, r1
   1c992:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1c994:	4606      	mov	r6, r0
   1c996:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   1c99a:	4d52      	ldr	r5, [pc, #328]	; (1cae4 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1c99c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1c99e:	45c8      	cmp	r8, r9
   1c9a0:	da23      	bge.n	1c9ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
   1c9a2:	6877      	ldr	r7, [r6, #4]
   1c9a4:	2f00      	cmp	r7, #0
   1c9a6:	d042      	beq.n	1ca2e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
   1c9a8:	2f1f      	cmp	r7, #31
   1c9aa:	d917      	bls.n	1c9dc <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
   1c9ac:	06fb      	lsls	r3, r7, #27
   1c9ae:	d115      	bne.n	1c9dc <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
   1c9b0:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   1c9b4:	f01a 0f1f 	tst.w	sl, #31
   1c9b8:	d110      	bne.n	1c9dc <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1c9ba:	4650      	mov	r0, sl
   1c9bc:	f00e fa78 	bl	2aeb0 <arm_cmse_mpu_region_get>
   1c9c0:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1c9c2:	eb07 000a 	add.w	r0, r7, sl
   1c9c6:	3801      	subs	r0, #1
   1c9c8:	f00e fa72 	bl	2aeb0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1c9cc:	4583      	cmp	fp, r0
   1c9ce:	d010      	beq.n	1c9f2 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
   1c9d0:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1c9d4:	465a      	mov	r2, fp
   1c9d6:	2145      	movs	r1, #69	; 0x45
   1c9d8:	4843      	ldr	r0, [pc, #268]	; (1cae8 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
   1c9da:	e002      	b.n	1c9e2 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1c9dc:	4642      	mov	r2, r8
   1c9de:	2145      	movs	r1, #69	; 0x45
   1c9e0:	4842      	ldr	r0, [pc, #264]	; (1caec <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1c9e2:	f00e f91e 	bl	2ac22 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1c9e6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1c9ea:	4620      	mov	r0, r4
   1c9ec:	b005      	add	sp, #20
   1c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1c9f2:	f11b 0f16 	cmn.w	fp, #22
   1c9f6:	d0ed      	beq.n	1c9d4 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
   1c9f8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1c9fa:	455b      	cmp	r3, fp
   1c9fc:	dbea      	blt.n	1c9d4 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
   1c9fe:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1ca02:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   1ca04:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1ca08:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1ca0a:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1ca0e:	e9d6 3200 	ldrd	r3, r2, [r6]
   1ca12:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   1ca14:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1ca16:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1ca1a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1ca1e:	d11c      	bne.n	1ca5a <mpu_configure_regions_and_partition.constprop.0+0xce>
   1ca20:	4557      	cmp	r7, sl
   1ca22:	d108      	bne.n	1ca36 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
   1ca24:	4631      	mov	r1, r6
   1ca26:	fa5f f08b 	uxtb.w	r0, fp
   1ca2a:	f7ff ff87 	bl	1c93c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1ca2e:	f108 0801 	add.w	r8, r8, #1
   1ca32:	360c      	adds	r6, #12
   1ca34:	e7b3      	b.n	1c99e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   1ca36:	4631      	mov	r1, r6
	MPU->RNR = index;
   1ca38:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1ca3c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1ca3e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1ca42:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1ca46:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1ca48:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   1ca4a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1ca4c:	f7ff ff76 	bl	1c93c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1ca50:	f110 0f16 	cmn.w	r0, #22
   1ca54:	d0c7      	beq.n	1c9e6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
   1ca56:	1c44      	adds	r4, r0, #1
   1ca58:	e7e9      	b.n	1ca2e <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
   1ca5a:	3b01      	subs	r3, #1
   1ca5c:	4557      	cmp	r7, sl
   1ca5e:	b2e0      	uxtb	r0, r4
   1ca60:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   1ca64:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   1ca68:	d106      	bne.n	1ca78 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1ca6a:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   1ca6c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1ca6e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1ca72:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1ca74:	612b      	str	r3, [r5, #16]
			reg_index =
   1ca76:	e7e9      	b.n	1ca4c <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1ca78:	6929      	ldr	r1, [r5, #16]
   1ca7a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1ca7e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1ca80:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   1ca82:	4631      	mov	r1, r6
   1ca84:	f7ff ff5a 	bl	1c93c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1ca88:	f110 0f16 	cmn.w	r0, #22
   1ca8c:	d0ab      	beq.n	1c9e6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
   1ca8e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   1ca92:	68ea      	ldr	r2, [r5, #12]
   1ca94:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1ca98:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
   1ca9a:	f362 0304 	bfi	r3, r2, #0, #5
   1ca9e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1caa2:	692b      	ldr	r3, [r5, #16]
   1caa4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1caa8:	085b      	lsrs	r3, r3, #1
   1caaa:	f363 1247 	bfi	r2, r3, #5, #3
   1caae:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   1cab2:	e9d6 3200 	ldrd	r3, r2, [r6]
   1cab6:	4413      	add	r3, r2
   1cab8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   1caba:	f023 031f 	bic.w	r3, r3, #31
   1cabe:	443b      	add	r3, r7
			reg_index++;
   1cac0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1cac2:	eba3 0a0a 	sub.w	sl, r3, sl
   1cac6:	b2e0      	uxtb	r0, r4
   1cac8:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
   1cacc:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   1cace:	9303      	str	r3, [sp, #12]
   1cad0:	d903      	bls.n	1cada <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1cad2:	4602      	mov	r2, r0
   1cad4:	2145      	movs	r1, #69	; 0x45
   1cad6:	4806      	ldr	r0, [pc, #24]	; (1caf0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   1cad8:	e783      	b.n	1c9e2 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
   1cada:	4669      	mov	r1, sp
   1cadc:	f7ff ff16 	bl	1c90c <region_init>
   1cae0:	e7b9      	b.n	1ca56 <mpu_configure_regions_and_partition.constprop.0+0xca>
   1cae2:	bf00      	nop
   1cae4:	e000ed90 	.word	0xe000ed90
   1cae8:	0002ec05 	.word	0x0002ec05
   1caec:	0002ebdd 	.word	0x0002ebdd
   1caf0:	0002ebb2 	.word	0x0002ebb2

0001caf4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1caf4:	2205      	movs	r2, #5
   1caf6:	4b03      	ldr	r3, [pc, #12]	; (1cb04 <arm_core_mpu_enable+0x10>)
   1caf8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1cafa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cafe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1cb02:	4770      	bx	lr
   1cb04:	e000ed90 	.word	0xe000ed90

0001cb08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1cb08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1cb0c:	2200      	movs	r2, #0
   1cb0e:	4b01      	ldr	r3, [pc, #4]	; (1cb14 <arm_core_mpu_disable+0xc>)
   1cb10:	605a      	str	r2, [r3, #4]
}
   1cb12:	4770      	bx	lr
   1cb14:	e000ed90 	.word	0xe000ed90

0001cb18 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1cb18:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1cb1a:	4c0a      	ldr	r4, [pc, #40]	; (1cb44 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1cb1c:	7822      	ldrb	r2, [r4, #0]
   1cb1e:	f7ff ff35 	bl	1c98c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1cb22:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1cb24:	3016      	adds	r0, #22
   1cb26:	d10c      	bne.n	1cb42 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1cb28:	4907      	ldr	r1, [pc, #28]	; (1cb48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1cb2a:	4808      	ldr	r0, [pc, #32]	; (1cb4c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1cb2c:	f240 1211 	movw	r2, #273	; 0x111
   1cb30:	f00d feb8 	bl	2a8a4 <printk>
			regions_num);
	}
}
   1cb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1cb38:	f240 1111 	movw	r1, #273	; 0x111
   1cb3c:	4802      	ldr	r0, [pc, #8]	; (1cb48 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1cb3e:	f00e b84a 	b.w	2abd6 <assert_post_action>
}
   1cb42:	bd10      	pop	{r4, pc}
   1cb44:	2000d4ba 	.word	0x2000d4ba
   1cb48:	0002ec2d 	.word	0x0002ec2d
   1cb4c:	0002e574 	.word	0x0002e574

0001cb50 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1cb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb54:	4d2d      	ldr	r5, [pc, #180]	; (1cc0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
   1cb56:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cb58:	4606      	mov	r6, r0
   1cb5a:	f04f 0800 	mov.w	r8, #0
   1cb5e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1cb60:	4f2b      	ldr	r7, [pc, #172]	; (1cc10 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cb62:	45d0      	cmp	r8, sl
   1cb64:	db02      	blt.n	1cb6c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1cb66:	b003      	add	sp, #12
   1cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1cb6c:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1cb70:	f1b9 0f00 	cmp.w	r9, #0
   1cb74:	d044      	beq.n	1cc00 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1cb76:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cb78:	4608      	mov	r0, r1
   1cb7a:	9101      	str	r1, [sp, #4]
   1cb7c:	f00e f998 	bl	2aeb0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cb80:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cb82:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cb84:	eb09 0001 	add.w	r0, r9, r1
   1cb88:	3801      	subs	r0, #1
   1cb8a:	f00e f991 	bl	2aeb0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1cb8e:	4284      	cmp	r4, r0
   1cb90:	f04f 0214 	mov.w	r2, #20
   1cb94:	4b1f      	ldr	r3, [pc, #124]	; (1cc14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   1cb96:	d013      	beq.n	1cbc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   1cb98:	f06f 0315 	mvn.w	r3, #21
   1cb9c:	fb02 f808 	mul.w	r8, r2, r8
   1cba0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1cba4:	f240 1221 	movw	r2, #289	; 0x121
   1cba8:	491b      	ldr	r1, [pc, #108]	; (1cc18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1cbaa:	481c      	ldr	r0, [pc, #112]	; (1cc1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1cbac:	f00d fe7a 	bl	2a8a4 <printk>
   1cbb0:	f240 1121 	movw	r1, #289	; 0x121
   1cbb4:	4818      	ldr	r0, [pc, #96]	; (1cc18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
   1cbb6:	b003      	add	sp, #12
   1cbb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1cbbc:	f00e b80b 	b.w	2abd6 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1cbc0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1cbc4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1cbc6:	d0ed      	beq.n	1cba4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1cbc8:	7819      	ldrb	r1, [r3, #0]
   1cbca:	42a1      	cmp	r1, r4
   1cbcc:	ddea      	ble.n	1cba4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   1cbce:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1cbd2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   1cbd4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1cbd6:	68fc      	ldr	r4, [r7, #12]
   1cbd8:	f100 0108 	add.w	r1, r0, #8
   1cbdc:	7b00      	ldrb	r0, [r0, #12]
   1cbde:	f364 0004 	bfi	r0, r4, #0, #5
   1cbe2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1cbe4:	6938      	ldr	r0, [r7, #16]
   1cbe6:	790c      	ldrb	r4, [r1, #4]
   1cbe8:	0840      	lsrs	r0, r0, #1
   1cbea:	f360 1447 	bfi	r4, r0, #5, #3
   1cbee:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1cbf0:	68f9      	ldr	r1, [r7, #12]
   1cbf2:	f021 011f 	bic.w	r1, r1, #31
   1cbf6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1cbf8:	6939      	ldr	r1, [r7, #16]
   1cbfa:	f021 011f 	bic.w	r1, r1, #31
   1cbfe:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cc00:	f108 0801 	add.w	r8, r8, #1
   1cc04:	3514      	adds	r5, #20
   1cc06:	360c      	adds	r6, #12
   1cc08:	e7ab      	b.n	1cb62 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1cc0a:	bf00      	nop
   1cc0c:	2000cea4 	.word	0x2000cea4
   1cc10:	e000ed90 	.word	0xe000ed90
   1cc14:	2000d4ba 	.word	0x2000d4ba
   1cc18:	0002ec2d 	.word	0x0002ec2d
   1cc1c:	0002e574 	.word	0x0002e574

0001cc20 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1cc20:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1cc22:	4d1b      	ldr	r5, [pc, #108]	; (1cc90 <z_arm_mpu_init+0x70>)
   1cc24:	682e      	ldr	r6, [r5, #0]
   1cc26:	2e10      	cmp	r6, #16
   1cc28:	d90d      	bls.n	1cc46 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1cc2a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cc2e:	4919      	ldr	r1, [pc, #100]	; (1cc94 <z_arm_mpu_init+0x74>)
   1cc30:	4819      	ldr	r0, [pc, #100]	; (1cc98 <z_arm_mpu_init+0x78>)
   1cc32:	f00d fe37 	bl	2a8a4 <printk>
   1cc36:	4817      	ldr	r0, [pc, #92]	; (1cc94 <z_arm_mpu_init+0x74>)
   1cc38:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1cc3c:	f00d ffcb 	bl	2abd6 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1cc40:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1cc44:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   1cc46:	f7ff ff5f 	bl	1cb08 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cc4a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1cc4c:	4c13      	ldr	r4, [pc, #76]	; (1cc9c <z_arm_mpu_init+0x7c>)
   1cc4e:	4a14      	ldr	r2, [pc, #80]	; (1cca0 <z_arm_mpu_init+0x80>)
   1cc50:	6322      	str	r2, [r4, #48]	; 0x30
   1cc52:	4286      	cmp	r6, r0
   1cc54:	d115      	bne.n	1cc82 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
   1cc56:	4b13      	ldr	r3, [pc, #76]	; (1cca4 <z_arm_mpu_init+0x84>)
   1cc58:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   1cc5a:	f7ff ff4b 	bl	1caf4 <arm_core_mpu_enable>
	__ASSERT(
   1cc5e:	6823      	ldr	r3, [r4, #0]
   1cc60:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cc64:	2b10      	cmp	r3, #16
   1cc66:	d00a      	beq.n	1cc7e <z_arm_mpu_init+0x5e>
   1cc68:	490a      	ldr	r1, [pc, #40]	; (1cc94 <z_arm_mpu_init+0x74>)
   1cc6a:	480b      	ldr	r0, [pc, #44]	; (1cc98 <z_arm_mpu_init+0x78>)
   1cc6c:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   1cc70:	f00d fe18 	bl	2a8a4 <printk>
   1cc74:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1cc78:	4806      	ldr	r0, [pc, #24]	; (1cc94 <z_arm_mpu_init+0x74>)
   1cc7a:	f00d ffac 	bl	2abd6 <assert_post_action>
	return 0;
   1cc7e:	2000      	movs	r0, #0
   1cc80:	e7e0      	b.n	1cc44 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1cc82:	6869      	ldr	r1, [r5, #4]
   1cc84:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1cc88:	f7ff fe40 	bl	1c90c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cc8c:	3001      	adds	r0, #1
   1cc8e:	e7e0      	b.n	1cc52 <z_arm_mpu_init+0x32>
   1cc90:	0002de54 	.word	0x0002de54
   1cc94:	0002ec2d 	.word	0x0002ec2d
   1cc98:	0002e574 	.word	0x0002e574
   1cc9c:	e000ed90 	.word	0xe000ed90
   1cca0:	0044ffaa 	.word	0x0044ffaa
   1cca4:	2000d4ba 	.word	0x2000d4ba

0001cca8 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   1cca8:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1ccaa:	4b09      	ldr	r3, [pc, #36]	; (1ccd0 <malloc_prepare+0x28>)
   1ccac:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1ccb0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1ccb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1ccb8:	d208      	bcs.n	1cccc <malloc_prepare+0x24>
   1ccba:	4906      	ldr	r1, [pc, #24]	; (1ccd4 <malloc_prepare+0x2c>)
   1ccbc:	4806      	ldr	r0, [pc, #24]	; (1ccd8 <malloc_prepare+0x30>)
   1ccbe:	2281      	movs	r2, #129	; 0x81
   1ccc0:	f00d fdf0 	bl	2a8a4 <printk>
   1ccc4:	2181      	movs	r1, #129	; 0x81
   1ccc6:	4803      	ldr	r0, [pc, #12]	; (1ccd4 <malloc_prepare+0x2c>)
   1ccc8:	f00d ff85 	bl	2abd6 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1cccc:	2000      	movs	r0, #0
   1ccce:	bd08      	pop	{r3, pc}
   1ccd0:	20012570 	.word	0x20012570
   1ccd4:	0002ec64 	.word	0x0002ec64
   1ccd8:	0002e574 	.word	0x0002e574

0001ccdc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1ccdc:	4b01      	ldr	r3, [pc, #4]	; (1cce4 <__stdout_hook_install+0x8>)
   1ccde:	6018      	str	r0, [r3, #0]
}
   1cce0:	4770      	bx	lr
   1cce2:	bf00      	nop
   1cce4:	2000c58c 	.word	0x2000c58c

0001cce8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1cce8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ccea:	4c07      	ldr	r4, [pc, #28]	; (1cd08 <_sbrk+0x20>)
   1ccec:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ccee:	18c2      	adds	r2, r0, r3
   1ccf0:	4806      	ldr	r0, [pc, #24]	; (1cd0c <_sbrk+0x24>)
   1ccf2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1ccf6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1ccfa:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1ccfc:	bf2e      	itee	cs
   1ccfe:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1cd02:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   1cd04:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   1cd06:	bd10      	pop	{r4, pc}
   1cd08:	2000ceb8 	.word	0x2000ceb8
   1cd0c:	20012570 	.word	0x20012570

0001cd10 <__retarget_lock_acquire>:
#endif /* !CONFIG_USERSPACE */
}

/* Acquiure non-recursive lock */
void __retarget_lock_acquire(_LOCK_T lock)
{
   1cd10:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cd12:	4604      	mov	r4, r0
   1cd14:	b950      	cbnz	r0, 1cd2c <__retarget_lock_acquire+0x1c>
   1cd16:	490a      	ldr	r1, [pc, #40]	; (1cd40 <__retarget_lock_acquire+0x30>)
   1cd18:	480a      	ldr	r0, [pc, #40]	; (1cd44 <__retarget_lock_acquire+0x34>)
   1cd1a:	f240 129d 	movw	r2, #413	; 0x19d
   1cd1e:	f00d fdc1 	bl	2a8a4 <printk>
   1cd22:	f240 119d 	movw	r1, #413	; 0x19d
   1cd26:	4806      	ldr	r0, [pc, #24]	; (1cd40 <__retarget_lock_acquire+0x30>)
   1cd28:	f00d ff55 	bl	2abd6 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1cd2c:	f04f 32ff 	mov.w	r2, #4294967295
   1cd30:	4620      	mov	r0, r4
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}
   1cd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd36:	f04f 33ff 	mov.w	r3, #4294967295
   1cd3a:	f009 bcb9 	b.w	266b0 <z_impl_k_sem_take>
   1cd3e:	bf00      	nop
   1cd40:	0002ec64 	.word	0x0002ec64
   1cd44:	0002e574 	.word	0x0002e574

0001cd48 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   1cd48:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cd4a:	4604      	mov	r4, r0
   1cd4c:	b950      	cbnz	r0, 1cd64 <__retarget_lock_acquire_recursive+0x1c>
   1cd4e:	490a      	ldr	r1, [pc, #40]	; (1cd78 <__retarget_lock_acquire_recursive+0x30>)
   1cd50:	480a      	ldr	r0, [pc, #40]	; (1cd7c <__retarget_lock_acquire_recursive+0x34>)
   1cd52:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1cd56:	f00d fda5 	bl	2a8a4 <printk>
   1cd5a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1cd5e:	4806      	ldr	r0, [pc, #24]	; (1cd78 <__retarget_lock_acquire_recursive+0x30>)
   1cd60:	f00d ff39 	bl	2abd6 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   1cd64:	f04f 32ff 	mov.w	r2, #4294967295
   1cd68:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1cd6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd6e:	f04f 33ff 	mov.w	r3, #4294967295
   1cd72:	f009 ba0b 	b.w	2618c <z_impl_k_mutex_lock>
   1cd76:	bf00      	nop
   1cd78:	0002ec64 	.word	0x0002ec64
   1cd7c:	0002e574 	.word	0x0002e574

0001cd80 <__retarget_lock_release>:
	return !k_mutex_lock((struct k_mutex *)lock, K_NO_WAIT);
}

/* Release non-recursive lock */
void __retarget_lock_release(_LOCK_T lock)
{
   1cd80:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cd82:	4604      	mov	r4, r0
   1cd84:	b950      	cbnz	r0, 1cd9c <__retarget_lock_release+0x1c>
   1cd86:	4908      	ldr	r1, [pc, #32]	; (1cda8 <__retarget_lock_release+0x28>)
   1cd88:	4808      	ldr	r0, [pc, #32]	; (1cdac <__retarget_lock_release+0x2c>)
   1cd8a:	f240 12b9 	movw	r2, #441	; 0x1b9
   1cd8e:	f00d fd89 	bl	2a8a4 <printk>
   1cd92:	f240 11b9 	movw	r1, #441	; 0x1b9
   1cd96:	4804      	ldr	r0, [pc, #16]	; (1cda8 <__retarget_lock_release+0x28>)
   1cd98:	f00d ff1d 	bl	2abd6 <assert_post_action>
	z_impl_k_sem_give(sem);
   1cd9c:	4620      	mov	r0, r4
	k_sem_give((struct k_sem *)lock);
}
   1cd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cda2:	f009 bc4b 	b.w	2663c <z_impl_k_sem_give>
   1cda6:	bf00      	nop
   1cda8:	0002ec64 	.word	0x0002ec64
   1cdac:	0002e574 	.word	0x0002e574

0001cdb0 <__retarget_lock_release_recursive>:

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   1cdb0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cdb2:	4604      	mov	r4, r0
   1cdb4:	b950      	cbnz	r0, 1cdcc <__retarget_lock_release_recursive+0x1c>
   1cdb6:	4908      	ldr	r1, [pc, #32]	; (1cdd8 <__retarget_lock_release_recursive+0x28>)
   1cdb8:	4808      	ldr	r0, [pc, #32]	; (1cddc <__retarget_lock_release_recursive+0x2c>)
   1cdba:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1cdbe:	f00d fd71 	bl	2a8a4 <printk>
   1cdc2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1cdc6:	4804      	ldr	r0, [pc, #16]	; (1cdd8 <__retarget_lock_release_recursive+0x28>)
   1cdc8:	f00d ff05 	bl	2abd6 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   1cdcc:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   1cdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cdd2:	f009 bab3 	b.w	2633c <z_impl_k_mutex_unlock>
   1cdd6:	bf00      	nop
   1cdd8:	0002ec64 	.word	0x0002ec64
   1cddc:	0002e574 	.word	0x0002e574

0001cde0 <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1cde0:	b510      	push	{r4, lr}
	err = nrf_modem_lib_get_init_ret();
   1cde2:	f001 fbf7 	bl	1e5d4 <nrf_modem_lib_get_init_ret>
	if (err < 0) {
   1cde6:	1e04      	subs	r4, r0, #0
   1cde8:	da0a      	bge.n	1ce00 <thingy91_board_init+0x20>
		LOG_ERR("nrf_modem_lib_get_init_ret failed, error: %d", err);
   1cdea:	4622      	mov	r2, r4
   1cdec:	2145      	movs	r1, #69	; 0x45
   1cdee:	4814      	ldr	r0, [pc, #80]	; (1ce40 <thingy91_board_init+0x60>)
   1cdf0:	f00d ff17 	bl	2ac22 <z_log_minimal_printk>
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   1cdf4:	4622      	mov	r2, r4
   1cdf6:	2145      	movs	r1, #69	; 0x45
   1cdf8:	4812      	ldr	r0, [pc, #72]	; (1ce44 <thingy91_board_init+0x64>)
   1cdfa:	f00d ff12 	bl	2ac22 <z_log_minimal_printk>
		return err;
   1cdfe:	e01d      	b.n	1ce3c <thingy91_board_init+0x5c>
	} else if (err > 0) {
   1ce00:	d004      	beq.n	1ce0c <thingy91_board_init+0x2c>
		LOG_WRN("A modem firmware upgrade has been performed, reboot is expected.");
   1ce02:	2157      	movs	r1, #87	; 0x57
   1ce04:	4810      	ldr	r0, [pc, #64]	; (1ce48 <thingy91_board_init+0x68>)
   1ce06:	f00d ff0c 	bl	2ac22 <z_log_minimal_printk>
		return err;
   1ce0a:	e7f3      	b.n	1cdf4 <thingy91_board_init+0x14>
	err = nrf_modem_at_printf(AT_CMD_TRACE);
   1ce0c:	480f      	ldr	r0, [pc, #60]	; (1ce4c <thingy91_board_init+0x6c>)
   1ce0e:	f008 fabd 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   1ce12:	b130      	cbz	r0, 1ce22 <thingy91_board_init+0x42>
		LOG_ERR("XMODEMTRACE received unexpected response");
   1ce14:	2145      	movs	r1, #69	; 0x45
   1ce16:	480e      	ldr	r0, [pc, #56]	; (1ce50 <thingy91_board_init+0x70>)
		LOG_ERR("MAGPIO command failed");
   1ce18:	f00d ff03 	bl	2ac22 <z_log_minimal_printk>
		return -EIO;
   1ce1c:	f06f 0404 	mvn.w	r4, #4
   1ce20:	e7e8      	b.n	1cdf4 <thingy91_board_init+0x14>
	err = nrf_modem_at_printf(AT_CMD_MAGPIO);
   1ce22:	480c      	ldr	r0, [pc, #48]	; (1ce54 <thingy91_board_init+0x74>)
   1ce24:	f008 fab2 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   1ce28:	b110      	cbz	r0, 1ce30 <thingy91_board_init+0x50>
		LOG_ERR("MAGPIO command failed");
   1ce2a:	2145      	movs	r1, #69	; 0x45
   1ce2c:	480a      	ldr	r0, [pc, #40]	; (1ce58 <thingy91_board_init+0x78>)
   1ce2e:	e7f3      	b.n	1ce18 <thingy91_board_init+0x38>
	err = nrf_modem_at_printf(AT_CMD_COEX0);
   1ce30:	480a      	ldr	r0, [pc, #40]	; (1ce5c <thingy91_board_init+0x7c>)
   1ce32:	f008 faab 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   1ce36:	4604      	mov	r4, r0
   1ce38:	2800      	cmp	r0, #0
   1ce3a:	d1f6      	bne.n	1ce2a <thingy91_board_init+0x4a>
	}

	return 0;
}
   1ce3c:	4620      	mov	r0, r4
   1ce3e:	bd10      	pop	{r4, pc}
   1ce40:	0002eca3 	.word	0x0002eca3
   1ce44:	0002eded 	.word	0x0002eded
   1ce48:	0002ecd5 	.word	0x0002ecd5
   1ce4c:	0002ed1b 	.word	0x0002ed1b
   1ce50:	0002ed2d 	.word	0x0002ed2d
   1ce54:	0002ed5b 	.word	0x0002ed5b
   1ce58:	0002edb9 	.word	0x0002edb9
   1ce5c:	0002edd4 	.word	0x0002edd4

0001ce60 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   1ce60:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   1ce62:	4604      	mov	r4, r0
   1ce64:	b950      	cbnz	r0, 1ce7c <net_if_flag_set.constprop.0+0x1c>
   1ce66:	490b      	ldr	r1, [pc, #44]	; (1ce94 <net_if_flag_set.constprop.0+0x34>)
   1ce68:	480b      	ldr	r0, [pc, #44]	; (1ce98 <net_if_flag_set.constprop.0+0x38>)
   1ce6a:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   1ce6e:	f00d fd19 	bl	2a8a4 <printk>
   1ce72:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1ce76:	4807      	ldr	r0, [pc, #28]	; (1ce94 <net_if_flag_set.constprop.0+0x34>)
   1ce78:	f00d fead 	bl	2abd6 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ce7c:	6823      	ldr	r3, [r4, #0]
   1ce7e:	330c      	adds	r3, #12
   1ce80:	e8d3 2fef 	ldaex	r2, [r3]
   1ce84:	f042 0201 	orr.w	r2, r2, #1
   1ce88:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ce8c:	2900      	cmp	r1, #0
   1ce8e:	d1f7      	bne.n	1ce80 <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   1ce90:	bd10      	pop	{r4, pc}
   1ce92:	bf00      	nop
   1ce94:	0002ee3a 	.word	0x0002ee3a
   1ce98:	0002e574 	.word	0x0002e574

0001ce9c <k_mutex_unlock.constprop.0>:
   1ce9c:	4801      	ldr	r0, [pc, #4]	; (1cea4 <k_mutex_unlock.constprop.0+0x8>)
   1ce9e:	f009 ba4d 	b.w	2633c <z_impl_k_mutex_unlock>
   1cea2:	bf00      	nop
   1cea4:	2000ca10 	.word	0x2000ca10

0001cea8 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1cea8:	4602      	mov	r2, r0
   1ceaa:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ceac:	4801      	ldr	r0, [pc, #4]	; (1ceb4 <k_mutex_lock.constprop.0+0xc>)
   1ceae:	f009 b96d 	b.w	2618c <z_impl_k_mutex_lock>
   1ceb2:	bf00      	nop
   1ceb4:	2000ca10 	.word	0x2000ca10

0001ceb8 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1ceb8:	b538      	push	{r3, r4, r5, lr}
   1ceba:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   1cebc:	f04f 31ff 	mov.w	r1, #4294967295
   1cec0:	f04f 30ff 	mov.w	r0, #4294967295
   1cec4:	f7ff fff0 	bl	1cea8 <k_mutex_lock.constprop.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1cec8:	2100      	movs	r1, #0
   1ceca:	4628      	mov	r0, r5
   1cecc:	f00e f817 	bl	2aefe <net_if_flag_is_set>
   1ced0:	4604      	mov	r4, r0
   1ced2:	bb48      	cbnz	r0, 1cf28 <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1ced4:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1ced6:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1ced8:	7e9b      	ldrb	r3, [r3, #26]
   1ceda:	b12b      	cbz	r3, 1cee8 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   1cedc:	f7ff ffc0 	bl	1ce60 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   1cee0:	f7ff ffdc 	bl	1ce9c <k_mutex_unlock.constprop.0>

	return status;
}
   1cee4:	4620      	mov	r0, r4
   1cee6:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1cee8:	f00d fff7 	bl	2aeda <net_if_l2>
   1ceec:	4604      	mov	r4, r0
   1ceee:	b130      	cbz	r0, 1cefe <net_if_up+0x46>
   1cef0:	6884      	ldr	r4, [r0, #8]
   1cef2:	b124      	cbz	r4, 1cefe <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   1cef4:	2101      	movs	r1, #1
   1cef6:	4628      	mov	r0, r5
   1cef8:	47a0      	blx	r4
	if (status < 0) {
   1cefa:	1e04      	subs	r4, r0, #0
   1cefc:	dbf0      	blt.n	1cee0 <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1cefe:	682b      	ldr	r3, [r5, #0]
   1cf00:	691b      	ldr	r3, [r3, #16]
   1cf02:	b953      	cbnz	r3, 1cf1a <net_if_up+0x62>
   1cf04:	490a      	ldr	r1, [pc, #40]	; (1cf30 <net_if_up+0x78>)
   1cf06:	480b      	ldr	r0, [pc, #44]	; (1cf34 <net_if_up+0x7c>)
   1cf08:	f640 72b5 	movw	r2, #4021	; 0xfb5
   1cf0c:	f00d fcca 	bl	2a8a4 <printk>
   1cf10:	f640 71b5 	movw	r1, #4021	; 0xfb5
   1cf14:	4806      	ldr	r0, [pc, #24]	; (1cf30 <net_if_up+0x78>)
   1cf16:	f00d fe5e 	bl	2abd6 <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   1cf1a:	4628      	mov	r0, r5
   1cf1c:	f7ff ffa0 	bl	1ce60 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1cf20:	4628      	mov	r0, r5
   1cf22:	f00d ffdf 	bl	2aee4 <l2_flags_get>
notify:
   1cf26:	e7db      	b.n	1cee0 <net_if_up+0x28>
		status = -EALREADY;
   1cf28:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1cf2c:	e7d8      	b.n	1cee0 <net_if_up+0x28>
   1cf2e:	bf00      	nop
   1cf30:	0002ee62 	.word	0x0002ee62
   1cf34:	0002e574 	.word	0x0002e574

0001cf38 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1cf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cf3c:	4e14      	ldr	r6, [pc, #80]	; (1cf90 <net_if_init+0x58>)
	k_mutex_lock(&lock, K_FOREVER);
   1cf3e:	f04f 30ff 	mov.w	r0, #4294967295
   1cf42:	f04f 31ff 	mov.w	r1, #4294967295
   1cf46:	f7ff ffaf 	bl	1cea8 <k_mutex_lock.constprop.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cf4a:	46b0      	mov	r8, r6
   1cf4c:	4c11      	ldr	r4, [pc, #68]	; (1cf94 <net_if_init+0x5c>)
   1cf4e:	4f12      	ldr	r7, [pc, #72]	; (1cf98 <net_if_init+0x60>)
   1cf50:	42b4      	cmp	r4, r6
   1cf52:	4625      	mov	r5, r4
   1cf54:	d90a      	bls.n	1cf6c <net_if_init+0x34>
   1cf56:	4639      	mov	r1, r7
   1cf58:	4810      	ldr	r0, [pc, #64]	; (1cf9c <net_if_init+0x64>)
   1cf5a:	f241 02cf 	movw	r2, #4303	; 0x10cf
   1cf5e:	f00d fca1 	bl	2a8a4 <printk>
   1cf62:	f241 01cf 	movw	r1, #4303	; 0x10cf
   1cf66:	4638      	mov	r0, r7
   1cf68:	f00d fe35 	bl	2abd6 <assert_post_action>
   1cf6c:	4544      	cmp	r4, r8
   1cf6e:	d303      	bcc.n	1cf78 <net_if_init+0x40>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1cf70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&lock);
   1cf74:	f7ff bf92 	b.w	1ce9c <k_mutex_unlock.constprop.0>
	return iface->if_dev->dev;
   1cf78:	682b      	ldr	r3, [r5, #0]
   1cf7a:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1cf7c:	681b      	ldr	r3, [r3, #0]
   1cf7e:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1cf80:	2b00      	cmp	r3, #0
   1cf82:	d0e5      	beq.n	1cf50 <net_if_init+0x18>
   1cf84:	681b      	ldr	r3, [r3, #0]
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	d0e2      	beq.n	1cf50 <net_if_init+0x18>
	api->init(iface);
   1cf8a:	4628      	mov	r0, r5
   1cf8c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cf8e:	e7df      	b.n	1cf50 <net_if_init+0x18>
   1cf90:	2000caa0 	.word	0x2000caa0
   1cf94:	2000ca9c 	.word	0x2000ca9c
   1cf98:	0002ee62 	.word	0x0002ee62
   1cf9c:	0002e574 	.word	0x0002e574

0001cfa0 <net_if_post_init>:

void net_if_post_init(void)
{
   1cfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cfa2:	4d0f      	ldr	r5, [pc, #60]	; (1cfe0 <net_if_post_init+0x40>)
   1cfa4:	4c0f      	ldr	r4, [pc, #60]	; (1cfe4 <net_if_post_init+0x44>)
   1cfa6:	462f      	mov	r7, r5
   1cfa8:	4e0f      	ldr	r6, [pc, #60]	; (1cfe8 <net_if_post_init+0x48>)
   1cfaa:	42ac      	cmp	r4, r5
   1cfac:	d90a      	bls.n	1cfc4 <net_if_post_init+0x24>
   1cfae:	4631      	mov	r1, r6
   1cfb0:	480e      	ldr	r0, [pc, #56]	; (1cfec <net_if_post_init+0x4c>)
   1cfb2:	f241 1201 	movw	r2, #4353	; 0x1101
   1cfb6:	f00d fc75 	bl	2a8a4 <printk>
   1cfba:	f241 1101 	movw	r1, #4353	; 0x1101
   1cfbe:	4630      	mov	r0, r6
   1cfc0:	f00d fe09 	bl	2abd6 <assert_post_action>
   1cfc4:	42bc      	cmp	r4, r7
   1cfc6:	d300      	bcc.n	1cfca <net_if_post_init+0x2a>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1cfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1cfca:	2103      	movs	r1, #3
   1cfcc:	4620      	mov	r0, r4
   1cfce:	f00d ff96 	bl	2aefe <net_if_flag_is_set>
   1cfd2:	b910      	cbnz	r0, 1cfda <net_if_post_init+0x3a>
			net_if_up(iface);
   1cfd4:	4620      	mov	r0, r4
   1cfd6:	f7ff ff6f 	bl	1ceb8 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1cfda:	3404      	adds	r4, #4
   1cfdc:	e7e5      	b.n	1cfaa <net_if_post_init+0xa>
   1cfde:	bf00      	nop
   1cfe0:	2000caa0 	.word	0x2000caa0
   1cfe4:	2000ca9c 	.word	0x2000ca9c
   1cfe8:	0002ee62 	.word	0x0002ee62
   1cfec:	0002e574 	.word	0x0002e574

0001cff0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1cff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1cff4:	4c0e      	ldr	r4, [pc, #56]	; (1d030 <onoff_start+0x40>)
{
   1cff6:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1cff8:	1b05      	subs	r5, r0, r4
   1cffa:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   1cffe:	250c      	movs	r5, #12
   1d000:	435d      	muls	r5, r3
   1d002:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1d006:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d008:	4420      	add	r0, r4
   1d00a:	2140      	movs	r1, #64	; 0x40
   1d00c:	f00d ff80 	bl	2af10 <set_starting_state>
	if (err < 0) {
   1d010:	1e01      	subs	r1, r0, #0
   1d012:	db08      	blt.n	1d026 <onoff_start+0x36>
	subdata->cb = cb;
   1d014:	4b07      	ldr	r3, [pc, #28]	; (1d034 <onoff_start+0x44>)
   1d016:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1d018:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1d01c:	4b06      	ldr	r3, [pc, #24]	; (1d038 <onoff_start+0x48>)
   1d01e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1d020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1d024:	4718      	bx	r3
		notify(mgr, err);
   1d026:	4638      	mov	r0, r7
   1d028:	4633      	mov	r3, r6
}
   1d02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1d02e:	4718      	bx	r3
   1d030:	2000ced0 	.word	0x2000ced0
   1d034:	0002af73 	.word	0x0002af73
   1d038:	0002de94 	.word	0x0002de94

0001d03c <get_status>:
{
   1d03c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d03e:	b2cc      	uxtb	r4, r1
   1d040:	2c01      	cmp	r4, #1
{
   1d042:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d044:	d908      	bls.n	1d058 <get_status+0x1c>
   1d046:	4908      	ldr	r1, [pc, #32]	; (1d068 <get_status+0x2c>)
   1d048:	4808      	ldr	r0, [pc, #32]	; (1d06c <get_status+0x30>)
   1d04a:	2279      	movs	r2, #121	; 0x79
   1d04c:	f00d fc2a 	bl	2a8a4 <printk>
   1d050:	2179      	movs	r1, #121	; 0x79
   1d052:	4805      	ldr	r0, [pc, #20]	; (1d068 <get_status+0x2c>)
   1d054:	f00d fdbf 	bl	2abd6 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d058:	210c      	movs	r1, #12
   1d05a:	692b      	ldr	r3, [r5, #16]
   1d05c:	fb04 3401 	mla	r4, r4, r1, r3
   1d060:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1d062:	f000 0007 	and.w	r0, r0, #7
   1d066:	bd38      	pop	{r3, r4, r5, pc}
   1d068:	0002ee8c 	.word	0x0002ee8c
   1d06c:	0002e574 	.word	0x0002e574

0001d070 <stop>:
{
   1d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d072:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d074:	2c01      	cmp	r4, #1
{
   1d076:	4605      	mov	r5, r0
   1d078:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d07a:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d07c:	d90a      	bls.n	1d094 <stop+0x24>
   1d07e:	4918      	ldr	r1, [pc, #96]	; (1d0e0 <stop+0x70>)
   1d080:	4818      	ldr	r0, [pc, #96]	; (1d0e4 <stop+0x74>)
   1d082:	f240 124d 	movw	r2, #333	; 0x14d
   1d086:	f00d fc0d 	bl	2a8a4 <printk>
   1d08a:	f240 114d 	movw	r1, #333	; 0x14d
   1d08e:	4814      	ldr	r0, [pc, #80]	; (1d0e0 <stop+0x70>)
   1d090:	f00d fda1 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   1d094:	f04f 0320 	mov.w	r3, #32
   1d098:	f3ef 8211 	mrs	r2, BASEPRI
   1d09c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d0a4:	230c      	movs	r3, #12
   1d0a6:	fb03 7104 	mla	r1, r3, r4, r7
   1d0aa:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d0ac:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   1d0b0:	d001      	beq.n	1d0b6 <stop+0x46>
   1d0b2:	428e      	cmp	r6, r1
   1d0b4:	d111      	bne.n	1d0da <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d0b6:	2101      	movs	r1, #1
	int err = 0;
   1d0b8:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d0ba:	fb03 7304 	mla	r3, r3, r4, r7
   1d0be:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   1d0c0:	f382 8811 	msr	BASEPRI, r2
   1d0c4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d0c8:	b930      	cbnz	r0, 1d0d8 <stop+0x68>
	get_sub_config(dev, type)->stop();
   1d0ca:	230c      	movs	r3, #12
   1d0cc:	6869      	ldr	r1, [r5, #4]
   1d0ce:	fb03 1404 	mla	r4, r3, r4, r1
   1d0d2:	6863      	ldr	r3, [r4, #4]
   1d0d4:	4798      	blx	r3
	return 0;
   1d0d6:	2000      	movs	r0, #0
}
   1d0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1d0da:	f04f 30ff 	mov.w	r0, #4294967295
   1d0de:	e7ef      	b.n	1d0c0 <stop+0x50>
   1d0e0:	0002ee8c 	.word	0x0002ee8c
   1d0e4:	0002e574 	.word	0x0002e574

0001d0e8 <onoff_stop>:
{
   1d0e8:	b570      	push	{r4, r5, r6, lr}
   1d0ea:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d0ec:	4906      	ldr	r1, [pc, #24]	; (1d108 <onoff_stop+0x20>)
{
   1d0ee:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1d0f0:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d0f2:	1149      	asrs	r1, r1, #5
   1d0f4:	2240      	movs	r2, #64	; 0x40
   1d0f6:	4805      	ldr	r0, [pc, #20]	; (1d10c <onoff_stop+0x24>)
   1d0f8:	f7ff ffba 	bl	1d070 <stop>
	notify(mgr, res);
   1d0fc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d0fe:	4601      	mov	r1, r0
	notify(mgr, res);
   1d100:	4620      	mov	r0, r4
}
   1d102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d106:	4718      	bx	r3
   1d108:	2000ced0 	.word	0x2000ced0
   1d10c:	0002d9c8 	.word	0x0002d9c8

0001d110 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d110:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d112:	2200      	movs	r2, #0
   1d114:	2101      	movs	r1, #1
{
   1d116:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d118:	2005      	movs	r0, #5
   1d11a:	f7ff f80d 	bl	1c138 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d11e:	2005      	movs	r0, #5
   1d120:	f7fe ffd8 	bl	1c0d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d124:	480f      	ldr	r0, [pc, #60]	; (1d164 <clk_init+0x54>)
   1d126:	f004 f98d 	bl	21444 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d12a:	4b0f      	ldr	r3, [pc, #60]	; (1d168 <clk_init+0x58>)
   1d12c:	4298      	cmp	r0, r3
   1d12e:	d115      	bne.n	1d15c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d130:	f004 f9a8 	bl	21484 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1d134:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d136:	490d      	ldr	r1, [pc, #52]	; (1d16c <clk_init+0x5c>)
   1d138:	4630      	mov	r0, r6
   1d13a:	f00d fc01 	bl	2a940 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d13e:	2800      	cmp	r0, #0
   1d140:	db0b      	blt.n	1d15a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d142:	2501      	movs	r5, #1
   1d144:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1d146:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d148:	4908      	ldr	r1, [pc, #32]	; (1d16c <clk_init+0x5c>)
   1d14a:	f104 0020 	add.w	r0, r4, #32
   1d14e:	f00d fbf7 	bl	2a940 <onoff_manager_init>
		if (err < 0) {
   1d152:	2800      	cmp	r0, #0
   1d154:	db01      	blt.n	1d15a <clk_init+0x4a>
	}

	return 0;
   1d156:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d158:	6565      	str	r5, [r4, #84]	; 0x54
}
   1d15a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d15c:	f06f 0004 	mvn.w	r0, #4
   1d160:	e7fb      	b.n	1d15a <clk_init+0x4a>
   1d162:	bf00      	nop
   1d164:	0001d1a5 	.word	0x0001d1a5
   1d168:	0bad0000 	.word	0x0bad0000
   1d16c:	0002deac 	.word	0x0002deac

0001d170 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d170:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d172:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1d174:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1d176:	434b      	muls	r3, r1
   1d178:	4808      	ldr	r0, [pc, #32]	; (1d19c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   1d17a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d17c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1d17e:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   1d180:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d184:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1d186:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d188:	f00d fee0 	bl	2af4c <set_on_state>
	if (callback) {
   1d18c:	b12d      	cbz	r5, 1d19a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d18e:	4632      	mov	r2, r6
   1d190:	462b      	mov	r3, r5
}
   1d192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d196:	4802      	ldr	r0, [pc, #8]	; (1d1a0 <clkstarted_handle.constprop.0+0x30>)
   1d198:	4718      	bx	r3
}
   1d19a:	bd70      	pop	{r4, r5, r6, pc}
   1d19c:	2000ced0 	.word	0x2000ced0
   1d1a0:	0002d9c8 	.word	0x0002d9c8

0001d1a4 <clock_event_handler>:
	switch (event) {
   1d1a4:	2801      	cmp	r0, #1
{
   1d1a6:	b508      	push	{r3, lr}
	switch (event) {
   1d1a8:	d006      	beq.n	1d1b8 <clock_event_handler+0x14>
   1d1aa:	2803      	cmp	r0, #3
   1d1ac:	d008      	beq.n	1d1c0 <clock_event_handler+0x1c>
   1d1ae:	b9a0      	cbnz	r0, 1d1da <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d1b0:	4b0f      	ldr	r3, [pc, #60]	; (1d1f0 <clock_event_handler+0x4c>)
   1d1b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d1b4:	075b      	lsls	r3, r3, #29
   1d1b6:	d119      	bne.n	1d1ec <clock_event_handler+0x48>
}
   1d1b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d1bc:	f7ff bfd8 	b.w	1d170 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1d1c0:	490c      	ldr	r1, [pc, #48]	; (1d1f4 <clock_event_handler+0x50>)
   1d1c2:	f240 225e 	movw	r2, #606	; 0x25e
   1d1c6:	480c      	ldr	r0, [pc, #48]	; (1d1f8 <clock_event_handler+0x54>)
   1d1c8:	f00d fb6c 	bl	2a8a4 <printk>
   1d1cc:	f240 215e 	movw	r1, #606	; 0x25e
}
   1d1d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1d1d4:	4807      	ldr	r0, [pc, #28]	; (1d1f4 <clock_event_handler+0x50>)
   1d1d6:	f00d bcfe 	b.w	2abd6 <assert_post_action>
   1d1da:	4906      	ldr	r1, [pc, #24]	; (1d1f4 <clock_event_handler+0x50>)
   1d1dc:	f240 2262 	movw	r2, #610	; 0x262
   1d1e0:	4805      	ldr	r0, [pc, #20]	; (1d1f8 <clock_event_handler+0x54>)
   1d1e2:	f00d fb5f 	bl	2a8a4 <printk>
   1d1e6:	f240 2162 	movw	r1, #610	; 0x262
   1d1ea:	e7f1      	b.n	1d1d0 <clock_event_handler+0x2c>
}
   1d1ec:	bd08      	pop	{r3, pc}
   1d1ee:	bf00      	nop
   1d1f0:	2000ced0 	.word	0x2000ced0
   1d1f4:	0002ee8c 	.word	0x0002ee8c
   1d1f8:	0002e574 	.word	0x0002e574

0001d1fc <generic_hfclk_start>:
{
   1d1fc:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d1fe:	f04f 0320 	mov.w	r3, #32
   1d202:	f3ef 8111 	mrs	r1, BASEPRI
   1d206:	f383 8812 	msr	BASEPRI_MAX, r3
   1d20a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d20e:	4a11      	ldr	r2, [pc, #68]	; (1d254 <generic_hfclk_start+0x58>)
   1d210:	6813      	ldr	r3, [r2, #0]
   1d212:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d216:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d21a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d21c:	d00b      	beq.n	1d236 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d21e:	4a0e      	ldr	r2, [pc, #56]	; (1d258 <generic_hfclk_start+0x5c>)
   1d220:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d224:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d228:	f013 0301 	ands.w	r3, r3, #1
   1d22c:	d003      	beq.n	1d236 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   1d22e:	480b      	ldr	r0, [pc, #44]	; (1d25c <generic_hfclk_start+0x60>)
   1d230:	f00d fe8c 	bl	2af4c <set_on_state>
			already_started = true;
   1d234:	2301      	movs	r3, #1
	__asm__ volatile(
   1d236:	f381 8811 	msr	BASEPRI, r1
   1d23a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d23e:	b123      	cbz	r3, 1d24a <generic_hfclk_start+0x4e>
}
   1d240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d244:	2000      	movs	r0, #0
   1d246:	f7ff bf93 	b.w	1d170 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d24a:	2001      	movs	r0, #1
}
   1d24c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d250:	f004 b936 	b.w	214c0 <nrfx_clock_start>
   1d254:	2000cf28 	.word	0x2000cf28
   1d258:	40005000 	.word	0x40005000
   1d25c:	2000cf18 	.word	0x2000cf18

0001d260 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d260:	4b07      	ldr	r3, [pc, #28]	; (1d280 <generic_hfclk_stop+0x20>)
   1d262:	e8d3 2fef 	ldaex	r2, [r3]
   1d266:	f022 0102 	bic.w	r1, r2, #2
   1d26a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1d26e:	2800      	cmp	r0, #0
   1d270:	d1f7      	bne.n	1d262 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d272:	07d3      	lsls	r3, r2, #31
   1d274:	d402      	bmi.n	1d27c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d276:	2001      	movs	r0, #1
   1d278:	f004 b972 	b.w	21560 <nrfx_clock_stop>
}
   1d27c:	4770      	bx	lr
   1d27e:	bf00      	nop
   1d280:	2000cf28 	.word	0x2000cf28

0001d284 <api_blocking_start>:
{
   1d284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d286:	2200      	movs	r2, #0
   1d288:	2301      	movs	r3, #1
   1d28a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d28e:	ab04      	add	r3, sp, #16
   1d290:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d294:	4a09      	ldr	r2, [pc, #36]	; (1d2bc <api_blocking_start+0x38>)
   1d296:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d298:	f8cd d000 	str.w	sp, [sp]
   1d29c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d2a0:	f00d fe79 	bl	2af96 <api_start>
	if (err < 0) {
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	db05      	blt.n	1d2b4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d2a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d2ac:	2300      	movs	r3, #0
   1d2ae:	4668      	mov	r0, sp
   1d2b0:	f009 f9fe 	bl	266b0 <z_impl_k_sem_take>
}
   1d2b4:	b007      	add	sp, #28
   1d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d2ba:	bf00      	nop
   1d2bc:	0002af91 	.word	0x0002af91

0001d2c0 <z_nrf_clock_control_lf_on>:
{
   1d2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d2c4:	2201      	movs	r2, #1
   1d2c6:	4606      	mov	r6, r0
   1d2c8:	4944      	ldr	r1, [pc, #272]	; (1d3dc <z_nrf_clock_control_lf_on+0x11c>)
   1d2ca:	e8d1 3fef 	ldaex	r3, [r1]
   1d2ce:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1d2d2:	2800      	cmp	r0, #0
   1d2d4:	d1f9      	bne.n	1d2ca <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1d2d6:	b99b      	cbnz	r3, 1d300 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d2d8:	4941      	ldr	r1, [pc, #260]	; (1d3e0 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1d2da:	4842      	ldr	r0, [pc, #264]	; (1d3e4 <z_nrf_clock_control_lf_on+0x124>)
   1d2dc:	604b      	str	r3, [r1, #4]
   1d2de:	60cb      	str	r3, [r1, #12]
   1d2e0:	608a      	str	r2, [r1, #8]
   1d2e2:	f7fd fd55 	bl	1ad90 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d2e6:	2800      	cmp	r0, #0
   1d2e8:	da0a      	bge.n	1d300 <z_nrf_clock_control_lf_on+0x40>
   1d2ea:	493f      	ldr	r1, [pc, #252]	; (1d3e8 <z_nrf_clock_control_lf_on+0x128>)
   1d2ec:	483f      	ldr	r0, [pc, #252]	; (1d3ec <z_nrf_clock_control_lf_on+0x12c>)
   1d2ee:	f44f 7208 	mov.w	r2, #544	; 0x220
   1d2f2:	f00d fad7 	bl	2a8a4 <printk>
   1d2f6:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d2fa:	483b      	ldr	r0, [pc, #236]	; (1d3e8 <z_nrf_clock_control_lf_on+0x128>)
   1d2fc:	f00d fc6b 	bl	2abd6 <assert_post_action>
	switch (start_mode) {
   1d300:	b38e      	cbz	r6, 1d366 <z_nrf_clock_control_lf_on+0xa6>
   1d302:	1e73      	subs	r3, r6, #1
   1d304:	2b01      	cmp	r3, #1
   1d306:	d855      	bhi.n	1d3b4 <z_nrf_clock_control_lf_on+0xf4>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d308:	2e01      	cmp	r6, #1
   1d30a:	d106      	bne.n	1d31a <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d30c:	4b38      	ldr	r3, [pc, #224]	; (1d3f0 <z_nrf_clock_control_lf_on+0x130>)
   1d30e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d312:	f003 0303 	and.w	r3, r3, #3
   1d316:	2b02      	cmp	r3, #2
   1d318:	d025      	beq.n	1d366 <z_nrf_clock_control_lf_on+0xa6>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d31a:	f00f fb26 	bl	2c96a <k_is_in_isr>
   1d31e:	4604      	mov	r4, r0
   1d320:	b918      	cbnz	r0, 1d32a <z_nrf_clock_control_lf_on+0x6a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1d322:	4b34      	ldr	r3, [pc, #208]	; (1d3f4 <z_nrf_clock_control_lf_on+0x134>)
	int key = isr_mode ? irq_lock() : 0;
   1d324:	781b      	ldrb	r3, [r3, #0]
   1d326:	2b00      	cmp	r3, #0
   1d328:	d151      	bne.n	1d3ce <z_nrf_clock_control_lf_on+0x10e>
	__asm__ volatile(
   1d32a:	f04f 0320 	mov.w	r3, #32
   1d32e:	f3ef 8711 	mrs	r7, BASEPRI
   1d332:	f383 8812 	msr	BASEPRI_MAX, r3
   1d336:	f3bf 8f6f 	isb	sy
   1d33a:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d33c:	4d2c      	ldr	r5, [pc, #176]	; (1d3f0 <z_nrf_clock_control_lf_on+0x130>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d33e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1d400 <z_nrf_clock_control_lf_on+0x140>
   1d342:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d344:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d348:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1d34c:	03d2      	lsls	r2, r2, #15
   1d34e:	d50c      	bpl.n	1d36a <z_nrf_clock_control_lf_on+0xaa>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d350:	f003 0303 	and.w	r3, r3, #3
   1d354:	2b02      	cmp	r3, #2
   1d356:	d001      	beq.n	1d35c <z_nrf_clock_control_lf_on+0x9c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d358:	2e01      	cmp	r6, #1
   1d35a:	d106      	bne.n	1d36a <z_nrf_clock_control_lf_on+0xaa>
	if (isr_mode) {
   1d35c:	b334      	cbz	r4, 1d3ac <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
   1d35e:	f387 8811 	msr	BASEPRI, r7
   1d362:	f3bf 8f6f 	isb	sy
}
   1d366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d36a:	b1d4      	cbz	r4, 1d3a2 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d36c:	4638      	mov	r0, r7
   1d36e:	f7fe fe79 	bl	1c064 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d372:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d376:	b2db      	uxtb	r3, r3
   1d378:	2b01      	cmp	r3, #1
   1d37a:	d1e3      	bne.n	1d344 <z_nrf_clock_control_lf_on+0x84>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d37c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1d380:	2a00      	cmp	r2, #0
   1d382:	d0df      	beq.n	1d344 <z_nrf_clock_control_lf_on+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d384:	2200      	movs	r2, #0
   1d386:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d38a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d38e:	2202      	movs	r2, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d390:	2120      	movs	r1, #32
   1d392:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   1d396:	4a18      	ldr	r2, [pc, #96]	; (1d3f8 <z_nrf_clock_control_lf_on+0x138>)
   1d398:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d39c:	4a17      	ldr	r2, [pc, #92]	; (1d3fc <z_nrf_clock_control_lf_on+0x13c>)
   1d39e:	6013      	str	r3, [r2, #0]
}
   1d3a0:	e7d0      	b.n	1d344 <z_nrf_clock_control_lf_on+0x84>
	return z_impl_k_sleep(timeout);
   1d3a2:	2100      	movs	r1, #0
   1d3a4:	2021      	movs	r0, #33	; 0x21
   1d3a6:	f00a fbe5 	bl	27b74 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d3aa:	e7e2      	b.n	1d372 <z_nrf_clock_control_lf_on+0xb2>
    p_reg->INTENSET = mask;
   1d3ac:	2302      	movs	r3, #2
   1d3ae:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1d3b2:	e7d8      	b.n	1d366 <z_nrf_clock_control_lf_on+0xa6>
		__ASSERT_NO_MSG(false);
   1d3b4:	490c      	ldr	r1, [pc, #48]	; (1d3e8 <z_nrf_clock_control_lf_on+0x128>)
   1d3b6:	480d      	ldr	r0, [pc, #52]	; (1d3ec <z_nrf_clock_control_lf_on+0x12c>)
   1d3b8:	f240 2232 	movw	r2, #562	; 0x232
   1d3bc:	f00d fa72 	bl	2a8a4 <printk>
}
   1d3c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   1d3c4:	f240 2132 	movw	r1, #562	; 0x232
   1d3c8:	4807      	ldr	r0, [pc, #28]	; (1d3e8 <z_nrf_clock_control_lf_on+0x128>)
   1d3ca:	f00d bc04 	b.w	2abd6 <assert_post_action>
    p_reg->INTENCLR = mask;
   1d3ce:	2202      	movs	r2, #2
   1d3d0:	4b07      	ldr	r3, [pc, #28]	; (1d3f0 <z_nrf_clock_control_lf_on+0x130>)
	int key = isr_mode ? irq_lock() : 0;
   1d3d2:	4607      	mov	r7, r0
   1d3d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d3d8:	e7b0      	b.n	1d33c <z_nrf_clock_control_lf_on+0x7c>
   1d3da:	bf00      	nop
   1d3dc:	2000cf2c 	.word	0x2000cf2c
   1d3e0:	2000cec0 	.word	0x2000cec0
   1d3e4:	2000cef0 	.word	0x2000cef0
   1d3e8:	0002ee8c 	.word	0x0002ee8c
   1d3ec:	0002e574 	.word	0x0002e574
   1d3f0:	40005000 	.word	0x40005000
   1d3f4:	2000db39 	.word	0x2000db39
   1d3f8:	e000e100 	.word	0xe000e100
   1d3fc:	40005008 	.word	0x40005008
   1d400:	40005104 	.word	0x40005104

0001d404 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1d404:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1d406:	4c04      	ldr	r4, [pc, #16]	; (1d418 <rtt_console_init+0x14>)
   1d408:	4620      	mov	r0, r4
   1d40a:	f7fd fac9 	bl	1a9a0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1d40e:	4620      	mov	r0, r4
   1d410:	f7ff fc64 	bl	1ccdc <__stdout_hook_install>

	return 0;
}
   1d414:	2000      	movs	r0, #0
   1d416:	bd10      	pop	{r4, pc}
   1d418:	0001d41d 	.word	0x0001d41d

0001d41c <rtt_console_out>:
{
   1d41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d41e:	4604      	mov	r4, r0
	char c = (char)character;
   1d420:	2503      	movs	r5, #3
   1d422:	4e13      	ldr	r6, [pc, #76]	; (1d470 <rtt_console_out+0x54>)
   1d424:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
   1d428:	f3ef 8711 	mrs	r7, BASEPRI
   1d42c:	f04f 0120 	mov.w	r1, #32
   1d430:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1d434:	2201      	movs	r2, #1
   1d436:	f10d 0107 	add.w	r1, sp, #7
   1d43a:	2000      	movs	r0, #0
   1d43c:	f005 fc6e 	bl	22d1c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   1d440:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   1d444:	b120      	cbz	r0, 1d450 <rtt_console_out+0x34>
			host_present = true;
   1d446:	2301      	movs	r3, #1
   1d448:	7033      	strb	r3, [r6, #0]
}
   1d44a:	4620      	mov	r0, r4
   1d44c:	b003      	add	sp, #12
   1d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1d450:	7833      	ldrb	r3, [r6, #0]
   1d452:	2b00      	cmp	r3, #0
   1d454:	d0f9      	beq.n	1d44a <rtt_console_out+0x2e>
			if (max_cnt) {
   1d456:	3d01      	subs	r5, #1
   1d458:	d008      	beq.n	1d46c <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1d45a:	f00f fa86 	bl	2c96a <k_is_in_isr>
   1d45e:	2800      	cmp	r0, #0
   1d460:	d1e2      	bne.n	1d428 <rtt_console_out+0xc>
   1d462:	2100      	movs	r1, #0
   1d464:	2042      	movs	r0, #66	; 0x42
   1d466:	f00a fb85 	bl	27b74 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1d46a:	e7dd      	b.n	1d428 <rtt_console_out+0xc>
				host_present = false;
   1d46c:	7035      	strb	r5, [r6, #0]
   1d46e:	e7ec      	b.n	1d44a <rtt_console_out+0x2e>
   1d470:	2000d4bb 	.word	0x2000d4bb

0001d474 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d474:	b570      	push	{r4, r5, r6, lr}
   1d476:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d478:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d47a:	6905      	ldr	r5, [r0, #16]
   1d47c:	b941      	cbnz	r1, 1d490 <gpio_nrfx_manage_callback+0x1c>
   1d47e:	491e      	ldr	r1, [pc, #120]	; (1d4f8 <gpio_nrfx_manage_callback+0x84>)
   1d480:	481e      	ldr	r0, [pc, #120]	; (1d4fc <gpio_nrfx_manage_callback+0x88>)
   1d482:	2224      	movs	r2, #36	; 0x24
   1d484:	f00d fa0e 	bl	2a8a4 <printk>
   1d488:	2124      	movs	r1, #36	; 0x24
   1d48a:	481b      	ldr	r0, [pc, #108]	; (1d4f8 <gpio_nrfx_manage_callback+0x84>)
   1d48c:	f00d fba3 	bl	2abd6 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d490:	6863      	ldr	r3, [r4, #4]
   1d492:	b943      	cbnz	r3, 1d4a6 <gpio_nrfx_manage_callback+0x32>
   1d494:	4918      	ldr	r1, [pc, #96]	; (1d4f8 <gpio_nrfx_manage_callback+0x84>)
   1d496:	4819      	ldr	r0, [pc, #100]	; (1d4fc <gpio_nrfx_manage_callback+0x88>)
   1d498:	2225      	movs	r2, #37	; 0x25
   1d49a:	f00d fa03 	bl	2a8a4 <printk>
   1d49e:	2125      	movs	r1, #37	; 0x25
   1d4a0:	4815      	ldr	r0, [pc, #84]	; (1d4f8 <gpio_nrfx_manage_callback+0x84>)
   1d4a2:	f00d fb98 	bl	2abd6 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1d4a6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d4a8:	b15b      	cbz	r3, 1d4c2 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	429c      	cmp	r4, r3
   1d4ae:	d113      	bne.n	1d4d8 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1d4b0:	6823      	ldr	r3, [r4, #0]
   1d4b2:	b95a      	cbnz	r2, 1d4cc <gpio_nrfx_manage_callback+0x58>
   1d4b4:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1d4b6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d4b8:	4294      	cmp	r4, r2
   1d4ba:	d100      	bne.n	1d4be <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d4bc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d4be:	2300      	movs	r3, #0
   1d4c0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d4c2:	b976      	cbnz	r6, 1d4e2 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d4c4:	2000      	movs	r0, #0
				     callback, set);
}
   1d4c6:	bd70      	pop	{r4, r5, r6, pc}
   1d4c8:	460b      	mov	r3, r1
   1d4ca:	e7ef      	b.n	1d4ac <gpio_nrfx_manage_callback+0x38>
   1d4cc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d4ce:	68ab      	ldr	r3, [r5, #8]
   1d4d0:	429c      	cmp	r4, r3
	list->tail = node;
   1d4d2:	bf08      	it	eq
   1d4d4:	60aa      	streq	r2, [r5, #8]
}
   1d4d6:	e7f2      	b.n	1d4be <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d4d8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d4da:	461a      	mov	r2, r3
   1d4dc:	2900      	cmp	r1, #0
   1d4de:	d1f3      	bne.n	1d4c8 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d4e0:	b13e      	cbz	r6, 1d4f2 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   1d4e2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1d4e4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d4e6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1d4e8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d4ea:	2800      	cmp	r0, #0
   1d4ec:	d1ea      	bne.n	1d4c4 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d4ee:	60ac      	str	r4, [r5, #8]
}
   1d4f0:	e7e9      	b.n	1d4c6 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d4f2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d4f6:	e7e6      	b.n	1d4c6 <gpio_nrfx_manage_callback+0x52>
   1d4f8:	0002eee9 	.word	0x0002eee9
   1d4fc:	0002e574 	.word	0x0002e574

0001d500 <gpio_nrfx_pin_interrupt_configure>:
{
   1d500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d502:	6840      	ldr	r0, [r0, #4]
   1d504:	f001 041f 	and.w	r4, r1, #31
   1d508:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d50a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d50e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d512:	f04f 0500 	mov.w	r5, #0
   1d516:	d104      	bne.n	1d522 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d518:	4620      	mov	r0, r4
   1d51a:	f004 fb53 	bl	21bc4 <nrfx_gpiote_trigger_disable>
	return 0;
   1d51e:	2000      	movs	r0, #0
   1d520:	e04b      	b.n	1d5ba <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d522:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d526:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d52a:	d148      	bne.n	1d5be <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d52c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d530:	bf0c      	ite	eq
   1d532:	2304      	moveq	r3, #4
   1d534:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d536:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d53a:	6883      	ldr	r3, [r0, #8]
   1d53c:	fa23 f101 	lsr.w	r1, r3, r1
   1d540:	07c9      	lsls	r1, r1, #31
   1d542:	d448      	bmi.n	1d5d6 <gpio_nrfx_pin_interrupt_configure+0xd6>
   1d544:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1d548:	d145      	bne.n	1d5d6 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d54a:	0966      	lsrs	r6, r4, #5
   1d54c:	bf0c      	ite	eq
   1d54e:	f04f 33ff 	moveq.w	r3, #4294967295
   1d552:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d554:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d558:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d55a:	07da      	lsls	r2, r3, #31
   1d55c:	d40a      	bmi.n	1d574 <gpio_nrfx_pin_interrupt_configure+0x74>
   1d55e:	4926      	ldr	r1, [pc, #152]	; (1d5f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d560:	4826      	ldr	r0, [pc, #152]	; (1d5fc <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d562:	f240 2229 	movw	r2, #553	; 0x229
   1d566:	f00d f99d 	bl	2a8a4 <printk>
   1d56a:	f240 2129 	movw	r1, #553	; 0x229
   1d56e:	4822      	ldr	r0, [pc, #136]	; (1d5f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d570:	f00d fb31 	bl	2abd6 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d574:	b156      	cbz	r6, 1d58c <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   1d576:	4920      	ldr	r1, [pc, #128]	; (1d5f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d578:	4820      	ldr	r0, [pc, #128]	; (1d5fc <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d57a:	f240 222e 	movw	r2, #558	; 0x22e
   1d57e:	f00d f991 	bl	2a8a4 <printk>
   1d582:	f240 212e 	movw	r1, #558	; 0x22e
   1d586:	481c      	ldr	r0, [pc, #112]	; (1d5f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d588:	f00d fb25 	bl	2abd6 <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d58c:	4b1c      	ldr	r3, [pc, #112]	; (1d600 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1d58e:	3580      	adds	r5, #128	; 0x80
   1d590:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d594:	07db      	lsls	r3, r3, #31
   1d596:	d41e      	bmi.n	1d5d6 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d598:	f10d 0507 	add.w	r5, sp, #7
   1d59c:	4629      	mov	r1, r5
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f004 fa46 	bl	21a30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d5a4:	4b17      	ldr	r3, [pc, #92]	; (1d604 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1d5a6:	4298      	cmp	r0, r3
   1d5a8:	d114      	bne.n	1d5d4 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d5aa:	4628      	mov	r0, r5
   1d5ac:	f004 fa9c 	bl	21ae8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d5b0:	4b15      	ldr	r3, [pc, #84]	; (1d608 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d5b2:	4298      	cmp	r0, r3
   1d5b4:	d00e      	beq.n	1d5d4 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   1d5b6:	f06f 000b 	mvn.w	r0, #11
}
   1d5ba:	b004      	add	sp, #16
   1d5bc:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d5be:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d5c2:	d005      	beq.n	1d5d0 <gpio_nrfx_pin_interrupt_configure+0xd0>
   1d5c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d5c8:	bf0c      	ite	eq
   1d5ca:	2302      	moveq	r3, #2
   1d5cc:	2301      	movne	r3, #1
   1d5ce:	e7b2      	b.n	1d536 <gpio_nrfx_pin_interrupt_configure+0x36>
   1d5d0:	2303      	movs	r3, #3
   1d5d2:	e7b0      	b.n	1d536 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   1d5d4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d5d6:	2300      	movs	r3, #0
   1d5d8:	4620      	mov	r0, r4
   1d5da:	4619      	mov	r1, r3
   1d5dc:	aa02      	add	r2, sp, #8
   1d5de:	f004 f909 	bl	217f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d5e2:	4b09      	ldr	r3, [pc, #36]	; (1d608 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d5e4:	4298      	cmp	r0, r3
   1d5e6:	d104      	bne.n	1d5f2 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d5e8:	2101      	movs	r1, #1
   1d5ea:	4620      	mov	r0, r4
   1d5ec:	f004 fa82 	bl	21af4 <nrfx_gpiote_trigger_enable>
   1d5f0:	e795      	b.n	1d51e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   1d5f2:	f06f 0004 	mvn.w	r0, #4
   1d5f6:	e7e0      	b.n	1d5ba <gpio_nrfx_pin_interrupt_configure+0xba>
   1d5f8:	0002ef16 	.word	0x0002ef16
   1d5fc:	0002e574 	.word	0x0002e574
   1d600:	40842500 	.word	0x40842500
   1d604:	0bad0004 	.word	0x0bad0004
   1d608:	0bad0000 	.word	0x0bad0000

0001d60c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d60c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d60e:	f004 fa5b 	bl	21ac8 <nrfx_gpiote_is_init>
   1d612:	4604      	mov	r4, r0
   1d614:	b968      	cbnz	r0, 1d632 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d616:	f004 fa2f 	bl	21a78 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d61a:	4b08      	ldr	r3, [pc, #32]	; (1d63c <gpio_nrfx_init+0x30>)
   1d61c:	4298      	cmp	r0, r3
   1d61e:	d10a      	bne.n	1d636 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d620:	4621      	mov	r1, r4
   1d622:	4807      	ldr	r0, [pc, #28]	; (1d640 <gpio_nrfx_init+0x34>)
   1d624:	f004 f9fe 	bl	21a24 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d628:	4622      	mov	r2, r4
   1d62a:	2105      	movs	r1, #5
   1d62c:	2031      	movs	r0, #49	; 0x31
   1d62e:	f7fe fd83 	bl	1c138 <z_arm_irq_priority_set>
		return 0;
   1d632:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d634:	bd10      	pop	{r4, pc}
		return -EIO;
   1d636:	f06f 0004 	mvn.w	r0, #4
   1d63a:	e7fb      	b.n	1d634 <gpio_nrfx_init+0x28>
   1d63c:	0bad0000 	.word	0x0bad0000
   1d640:	0001d645 	.word	0x0001d645

0001d644 <nrfx_gpio_handler>:
{
   1d644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d648:	0943      	lsrs	r3, r0, #5
   1d64a:	d129      	bne.n	1d6a0 <nrfx_gpio_handler+0x5c>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d64c:	4b15      	ldr	r3, [pc, #84]	; (1d6a4 <nrfx_gpio_handler+0x60>)
   1d64e:	685c      	ldr	r4, [r3, #4]
   1d650:	b334      	cbz	r4, 1d6a0 <nrfx_gpio_handler+0x5c>
   1d652:	6825      	ldr	r5, [r4, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
   1d654:	2601      	movs	r6, #1
   1d656:	2d00      	cmp	r5, #0
   1d658:	bf38      	it	cc
   1d65a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d65c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1d6ac <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   1d660:	4f11      	ldr	r7, [pc, #68]	; (1d6a8 <nrfx_gpio_handler+0x64>)
   1d662:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1d6b0 <nrfx_gpio_handler+0x6c>
   1d666:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1d668:	68a3      	ldr	r3, [r4, #8]
   1d66a:	421e      	tst	r6, r3
   1d66c:	d010      	beq.n	1d690 <nrfx_gpio_handler+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
   1d66e:	6863      	ldr	r3, [r4, #4]
   1d670:	b943      	cbnz	r3, 1d684 <nrfx_gpio_handler+0x40>
   1d672:	4639      	mov	r1, r7
   1d674:	4648      	mov	r0, r9
   1d676:	2245      	movs	r2, #69	; 0x45
   1d678:	f00d f914 	bl	2a8a4 <printk>
   1d67c:	2145      	movs	r1, #69	; 0x45
   1d67e:	4638      	mov	r0, r7
   1d680:	f00d faa9 	bl	2abd6 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d684:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d688:	4621      	mov	r1, r4
   1d68a:	4640      	mov	r0, r8
   1d68c:	4032      	ands	r2, r6
   1d68e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d690:	b135      	cbz	r5, 1d6a0 <nrfx_gpio_handler+0x5c>
	return node->next;
   1d692:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d694:	462c      	mov	r4, r5
   1d696:	2b00      	cmp	r3, #0
   1d698:	bf38      	it	cc
   1d69a:	2300      	movcc	r3, #0
   1d69c:	461d      	mov	r5, r3
   1d69e:	e7e3      	b.n	1d668 <nrfx_gpio_handler+0x24>
}
   1d6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d6a4:	2000cf30 	.word	0x2000cf30
   1d6a8:	0002eee9 	.word	0x0002eee9
   1d6ac:	0002d9e0 	.word	0x0002d9e0
   1d6b0:	0002e574 	.word	0x0002e574

0001d6b4 <gpio_nrfx_pin_configure>:
{
   1d6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1d6b8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d6ba:	f001 051f 	and.w	r5, r1, #31
   1d6be:	7b3b      	ldrb	r3, [r7, #12]
{
   1d6c0:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   1d6c2:	4614      	mov	r4, r2
{
   1d6c4:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d6c6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1d6ca:	b9ca      	cbnz	r2, 1d700 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d6cc:	a902      	add	r1, sp, #8
   1d6ce:	4628      	mov	r0, r5
   1d6d0:	f004 f9ae 	bl	21a30 <nrfx_gpiote_channel_get>
   1d6d4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1d6d6:	4628      	mov	r0, r5
   1d6d8:	f004 fa96 	bl	21c08 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1d6dc:	4b47      	ldr	r3, [pc, #284]	; (1d7fc <gpio_nrfx_pin_configure+0x148>)
   1d6de:	4298      	cmp	r0, r3
   1d6e0:	d004      	beq.n	1d6ec <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1d6e2:	f06f 0004 	mvn.w	r0, #4
}
   1d6e6:	b005      	add	sp, #20
   1d6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1d6ec:	4284      	cmp	r4, r0
   1d6ee:	d105      	bne.n	1d6fc <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1d6f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1d6f4:	f004 f9f2 	bl	21adc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d6f8:	42a0      	cmp	r0, r4
   1d6fa:	d1f2      	bne.n	1d6e2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d6fc:	2000      	movs	r0, #0
   1d6fe:	e7f2      	b.n	1d6e6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d700:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d704:	f10d 0103 	add.w	r1, sp, #3
   1d708:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d70a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d70e:	f004 f98f 	bl	21a30 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d712:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d714:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d716:	4649      	mov	r1, r9
   1d718:	4628      	mov	r0, r5
   1d71a:	aa02      	add	r2, sp, #8
   1d71c:	f004 f86a 	bl	217f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d720:	4b36      	ldr	r3, [pc, #216]	; (1d7fc <gpio_nrfx_pin_configure+0x148>)
   1d722:	4298      	cmp	r0, r3
   1d724:	d002      	beq.n	1d72c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d726:	f06f 0015 	mvn.w	r0, #21
   1d72a:	e7dc      	b.n	1d6e6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1d72c:	4580      	cmp	r8, r0
   1d72e:	d103      	bne.n	1d738 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1d730:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d734:	f004 f9d2 	bl	21adc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d738:	05a3      	lsls	r3, r4, #22
   1d73a:	d54c      	bpl.n	1d7d6 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d73c:	4b30      	ldr	r3, [pc, #192]	; (1d800 <gpio_nrfx_pin_configure+0x14c>)
   1d73e:	4a31      	ldr	r2, [pc, #196]	; (1d804 <gpio_nrfx_pin_configure+0x150>)
   1d740:	4023      	ands	r3, r4
   1d742:	4293      	cmp	r3, r2
   1d744:	d039      	beq.n	1d7ba <gpio_nrfx_pin_configure+0x106>
   1d746:	d80c      	bhi.n	1d762 <gpio_nrfx_pin_configure+0xae>
   1d748:	2b06      	cmp	r3, #6
   1d74a:	d014      	beq.n	1d776 <gpio_nrfx_pin_configure+0xc2>
   1d74c:	d804      	bhi.n	1d758 <gpio_nrfx_pin_configure+0xa4>
   1d74e:	b193      	cbz	r3, 1d776 <gpio_nrfx_pin_configure+0xc2>
   1d750:	2b02      	cmp	r3, #2
   1d752:	d1e8      	bne.n	1d726 <gpio_nrfx_pin_configure+0x72>
   1d754:	2304      	movs	r3, #4
   1d756:	e00e      	b.n	1d776 <gpio_nrfx_pin_configure+0xc2>
   1d758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d75c:	d1e3      	bne.n	1d726 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1d75e:	2301      	movs	r3, #1
   1d760:	e009      	b.n	1d776 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d762:	4a29      	ldr	r2, [pc, #164]	; (1d808 <gpio_nrfx_pin_configure+0x154>)
   1d764:	4293      	cmp	r3, r2
   1d766:	d02a      	beq.n	1d7be <gpio_nrfx_pin_configure+0x10a>
   1d768:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d76c:	d029      	beq.n	1d7c2 <gpio_nrfx_pin_configure+0x10e>
   1d76e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d772:	d1d8      	bne.n	1d726 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1d774:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d776:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d77a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1d77e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1d782:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d784:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1d788:	bf4c      	ite	mi
   1d78a:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   1d78c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d790:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1d792:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d796:	d516      	bpl.n	1d7c6 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d798:	2101      	movs	r1, #1
   1d79a:	687b      	ldr	r3, [r7, #4]
   1d79c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1d7a0:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d7a2:	2200      	movs	r2, #0
   1d7a4:	4628      	mov	r0, r5
   1d7a6:	a901      	add	r1, sp, #4
   1d7a8:	f004 f8ca 	bl	21940 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d7ac:	4b13      	ldr	r3, [pc, #76]	; (1d7fc <gpio_nrfx_pin_configure+0x148>)
   1d7ae:	4298      	cmp	r0, r3
   1d7b0:	bf14      	ite	ne
   1d7b2:	f06f 0015 	mvnne.w	r0, #21
   1d7b6:	2000      	moveq	r0, #0
   1d7b8:	e795      	b.n	1d6e6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1d7ba:	2307      	movs	r3, #7
   1d7bc:	e7db      	b.n	1d776 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1d7be:	2305      	movs	r3, #5
   1d7c0:	e7d9      	b.n	1d776 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1d7c2:	2303      	movs	r3, #3
   1d7c4:	e7d7      	b.n	1d776 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d7c6:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d7c8:	bf41      	itttt	mi
   1d7ca:	2101      	movmi	r1, #1
   1d7cc:	687b      	ldrmi	r3, [r7, #4]
   1d7ce:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1d7d2:	60de      	strmi	r6, [r3, #12]
}
   1d7d4:	e7e5      	b.n	1d7a2 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   1d7d6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d7d8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d7dc:	bf4c      	ite	mi
   1d7de:	2403      	movmi	r4, #3
   1d7e0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d7e4:	461a      	mov	r2, r3
   1d7e6:	4628      	mov	r0, r5
   1d7e8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1d7ea:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d7ee:	f004 f801 	bl	217f4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d7f2:	4b02      	ldr	r3, [pc, #8]	; (1d7fc <gpio_nrfx_pin_configure+0x148>)
   1d7f4:	4298      	cmp	r0, r3
   1d7f6:	d081      	beq.n	1d6fc <gpio_nrfx_pin_configure+0x48>
   1d7f8:	e795      	b.n	1d726 <gpio_nrfx_pin_configure+0x72>
   1d7fa:	bf00      	nop
   1d7fc:	0bad0000 	.word	0x0bad0000
   1d800:	00f00006 	.word	0x00f00006
   1d804:	00100006 	.word	0x00100006
   1d808:	00400002 	.word	0x00400002

0001d80c <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   1d80c:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   1d80e:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1d810:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1d814:	f005 f9ee 	bl	22bf4 <nrfx_twi_twim_bus_recover>
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1d818:	4b03      	ldr	r3, [pc, #12]	; (1d828 <i2c_nrfx_twim_recover_bus+0x1c>)
   1d81a:	4298      	cmp	r0, r3
}
   1d81c:	bf14      	ite	ne
   1d81e:	f06f 000f 	mvnne.w	r0, #15
   1d822:	2000      	moveq	r0, #0
   1d824:	bd08      	pop	{r3, pc}
   1d826:	bf00      	nop
   1d828:	0bad0000 	.word	0x0bad0000

0001d82c <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   1d82c:	b510      	push	{r4, lr}
   1d82e:	4604      	mov	r4, r0
   1d830:	2200      	movs	r2, #0
   1d832:	2101      	movs	r1, #1
   1d834:	200a      	movs	r0, #10
   1d836:	f7fe fc7f 	bl	1c138 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1d83a:	6860      	ldr	r0, [r4, #4]
   1d83c:	6923      	ldr	r3, [r4, #16]
   1d83e:	4a09      	ldr	r2, [pc, #36]	; (1d864 <twim_2_init+0x38>)
   1d840:	f100 0108 	add.w	r1, r0, #8
   1d844:	f004 fe1a 	bl	2247c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1d848:	4b07      	ldr	r3, [pc, #28]	; (1d868 <twim_2_init+0x3c>)
   1d84a:	4298      	cmp	r0, r3
   1d84c:	d007      	beq.n	1d85e <twim_2_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
   1d84e:	4807      	ldr	r0, [pc, #28]	; (1d86c <twim_2_init+0x40>)
   1d850:	2145      	movs	r1, #69	; 0x45
   1d852:	6822      	ldr	r2, [r4, #0]
   1d854:	f00d f9e5 	bl	2ac22 <z_log_minimal_printk>
		return -EBUSY;
   1d858:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   1d85c:	bd10      	pop	{r4, pc}
	return 0;
   1d85e:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   1d860:	e7fc      	b.n	1d85c <twim_2_init+0x30>
   1d862:	bf00      	nop
   1d864:	0001d8b1 	.word	0x0001d8b1
   1d868:	0bad0000 	.word	0x0bad0000
   1d86c:	0002ef54 	.word	0x0002ef54

0001d870 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1d870:	07ca      	lsls	r2, r1, #31
{
   1d872:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1d874:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1d876:	d409      	bmi.n	1d88c <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
   1d878:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1d87c:	2a01      	cmp	r2, #1
   1d87e:	d008      	beq.n	1d892 <i2c_nrfx_twim_configure+0x22>
   1d880:	2a02      	cmp	r2, #2
   1d882:	d00f      	beq.n	1d8a4 <i2c_nrfx_twim_configure+0x34>
		LOG_ERR("unsupported speed");
   1d884:	2145      	movs	r1, #69	; 0x45
   1d886:	4809      	ldr	r0, [pc, #36]	; (1d8ac <i2c_nrfx_twim_configure+0x3c>)
   1d888:	f00d f9cb 	bl	2ac22 <z_log_minimal_printk>
		return -EINVAL;
   1d88c:	f06f 0015 	mvn.w	r0, #21
   1d890:	e007      	b.n	1d8a2 <i2c_nrfx_twim_configure+0x32>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1d892:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1d896:	681b      	ldr	r3, [r3, #0]
   1d898:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1d89c:	6903      	ldr	r3, [r0, #16]
	return 0;
   1d89e:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1d8a0:	6359      	str	r1, [r3, #52]	; 0x34
}
   1d8a2:	bd08      	pop	{r3, pc}
   1d8a4:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1d8a8:	681b      	ldr	r3, [r3, #0]
   1d8aa:	e7f5      	b.n	1d898 <i2c_nrfx_twim_configure+0x28>
   1d8ac:	0002ef79 	.word	0x0002ef79

0001d8b0 <event_handler>:
	switch (p_event->type) {
   1d8b0:	7803      	ldrb	r3, [r0, #0]
   1d8b2:	2b01      	cmp	r3, #1
   1d8b4:	d008      	beq.n	1d8c8 <event_handler+0x18>
   1d8b6:	2b02      	cmp	r3, #2
   1d8b8:	d008      	beq.n	1d8cc <event_handler+0x1c>
   1d8ba:	b94b      	cbnz	r3, 1d8d0 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1d8bc:	4b05      	ldr	r3, [pc, #20]	; (1d8d4 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d8be:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1d8c0:	f101 0018 	add.w	r0, r1, #24
   1d8c4:	f008 beba 	b.w	2663c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1d8c8:	4b03      	ldr	r3, [pc, #12]	; (1d8d8 <event_handler+0x28>)
   1d8ca:	e7f8      	b.n	1d8be <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1d8cc:	4b03      	ldr	r3, [pc, #12]	; (1d8dc <event_handler+0x2c>)
   1d8ce:	e7f6      	b.n	1d8be <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d8d0:	4b03      	ldr	r3, [pc, #12]	; (1d8e0 <event_handler+0x30>)
   1d8d2:	e7f4      	b.n	1d8be <event_handler+0xe>
   1d8d4:	0bad0000 	.word	0x0bad0000
   1d8d8:	0bae0001 	.word	0x0bae0001
   1d8dc:	0bae0002 	.word	0x0bae0002
   1d8e0:	0bad0001 	.word	0x0bad0001

0001d8e4 <i2c_nrfx_twim_transfer>:
{
   1d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8e8:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = get_dev_config(dev);
   1d8ea:	6846      	ldr	r6, [r0, #4]
{
   1d8ec:	b08f      	sub	sp, #60	; 0x3c
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
   1d8ee:	f8d0 9010 	ldr.w	r9, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1d8f2:	8b33      	ldrh	r3, [r6, #24]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d8f4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
{
   1d8f8:	9205      	str	r2, [sp, #20]
   1d8fa:	4680      	mov	r8, r0
   1d8fc:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d8fe:	2214      	movs	r2, #20
   1d900:	2100      	movs	r1, #0
   1d902:	4658      	mov	r0, fp
	uint8_t *msg_buf = dev_data->msg_buf;
   1d904:	f8d9 a038 	ldr.w	sl, [r9, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1d908:	9304      	str	r3, [sp, #16]
	nrfx_twim_xfer_desc_t cur_xfer = {
   1d90a:	f00f f96f 	bl	2cbec <memset>
   1d90e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
	return z_impl_k_sem_take(sem, timeout);
   1d912:	f04f 32ff 	mov.w	r2, #4294967295
   1d916:	f04f 33ff 	mov.w	r3, #4294967295
   1d91a:	4648      	mov	r0, r9
   1d91c:	f008 fec8 	bl	266b0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1d920:	f109 0318 	add.w	r3, r9, #24
   1d924:	9303      	str	r3, [sp, #12]
	for (size_t i = 0; i < num_msgs; i++) {
   1d926:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
   1d928:	463d      	mov	r5, r7
   1d92a:	2200      	movs	r2, #0
   1d92c:	2300      	movs	r3, #0
   1d92e:	9803      	ldr	r0, [sp, #12]
   1d930:	f008 febe 	bl	266b0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   1d934:	4630      	mov	r0, r6
   1d936:	f004 fe11 	bl	2255c <nrfx_twim_enable>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d93a:	f8cd b018 	str.w	fp, [sp, #24]
	for (size_t i = 0; i < num_msgs; i++) {
   1d93e:	9b05      	ldr	r3, [sp, #20]
   1d940:	429f      	cmp	r7, r3
   1d942:	d301      	bcc.n	1d948 <i2c_nrfx_twim_transfer+0x64>
   1d944:	2400      	movs	r4, #0
   1d946:	e027      	b.n	1d998 <i2c_nrfx_twim_transfer+0xb4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1d948:	7a21      	ldrb	r1, [r4, #8]
   1d94a:	070b      	lsls	r3, r1, #28
   1d94c:	f100 80b5 	bmi.w	1daba <i2c_nrfx_twim_transfer+0x1d6>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d950:	9b05      	ldr	r3, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
   1d952:	f107 0b01 	add.w	fp, r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d956:	459b      	cmp	fp, r3
   1d958:	d20a      	bcs.n	1d970 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1d95a:	0788      	lsls	r0, r1, #30
   1d95c:	d408      	bmi.n	1d970 <i2c_nrfx_twim_transfer+0x8c>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1d95e:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1d960:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d964:	f002 0201 	and.w	r2, r2, #1
   1d968:	f003 0304 	and.w	r3, r3, #4
   1d96c:	4313      	orrs	r3, r2
   1d96e:	d01d      	beq.n	1d9ac <i2c_nrfx_twim_transfer+0xc8>
		if (concat_next || (msg_buf_used != 0)) {
   1d970:	b37d      	cbz	r5, 1d9d2 <i2c_nrfx_twim_transfer+0xee>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d972:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1d974:	6862      	ldr	r2, [r4, #4]
   1d976:	9804      	ldr	r0, [sp, #16]
   1d978:	eb05 0c02 	add.w	ip, r5, r2
   1d97c:	4584      	cmp	ip, r0
   1d97e:	d917      	bls.n	1d9b0 <i2c_nrfx_twim_transfer+0xcc>
				LOG_ERR("Need to use concatenation buffer and "
   1d980:	f8d8 3000 	ldr.w	r3, [r8]
   1d984:	9000      	str	r0, [sp, #0]
   1d986:	9301      	str	r3, [sp, #4]
   1d988:	2145      	movs	r1, #69	; 0x45
   1d98a:	4613      	mov	r3, r2
   1d98c:	484c      	ldr	r0, [pc, #304]	; (1dac0 <i2c_nrfx_twim_transfer+0x1dc>)
   1d98e:	462a      	mov	r2, r5
   1d990:	f00d f947 	bl	2ac22 <z_log_minimal_printk>
				ret = -ENOSPC;
   1d994:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   1d998:	4630      	mov	r0, r6
   1d99a:	f004 fe07 	bl	225ac <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   1d99e:	4648      	mov	r0, r9
   1d9a0:	f008 fe4c 	bl	2663c <z_impl_k_sem_give>
}
   1d9a4:	4620      	mov	r0, r4
   1d9a6:	b00f      	add	sp, #60	; 0x3c
   1d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   1d9ac:	2301      	movs	r3, #1
   1d9ae:	e7e1      	b.n	1d974 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1d9b0:	07c9      	lsls	r1, r1, #31
   1d9b2:	d406      	bmi.n	1d9c2 <i2c_nrfx_twim_transfer+0xde>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d9b4:	6821      	ldr	r1, [r4, #0]
   1d9b6:	eb0a 0005 	add.w	r0, sl, r5
   1d9ba:	9307      	str	r3, [sp, #28]
   1d9bc:	f00f f909 	bl	2cbd2 <memcpy>
   1d9c0:	9b07      	ldr	r3, [sp, #28]
			msg_buf_used += msgs[i].len;
   1d9c2:	6862      	ldr	r2, [r4, #4]
   1d9c4:	4415      	add	r5, r2
   1d9c6:	b2ad      	uxth	r5, r5
		if (concat_next) {
   1d9c8:	2b00      	cmp	r3, #0
   1d9ca:	d039      	beq.n	1da40 <i2c_nrfx_twim_transfer+0x15c>
		bool concat_next = ((i + 1) < num_msgs)
   1d9cc:	465f      	mov	r7, fp
   1d9ce:	340c      	adds	r4, #12
   1d9d0:	e7b5      	b.n	1d93e <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1d9d2:	07ca      	lsls	r2, r1, #31
   1d9d4:	d51d      	bpl.n	1da12 <i2c_nrfx_twim_transfer+0x12e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1d9d6:	2500      	movs	r5, #0
   1d9d8:	6823      	ldr	r3, [r4, #0]
   1d9da:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
   1d9dc:	6863      	ldr	r3, [r4, #4]
   1d9de:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1d9e0:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d9e2:	4630      	mov	r0, r6
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1d9e4:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d9e8:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1d9ec:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1d9f0:	9906      	ldr	r1, [sp, #24]
   1d9f2:	bf0c      	ite	eq
   1d9f4:	2220      	moveq	r2, #32
   1d9f6:	2200      	movne	r2, #0
   1d9f8:	f004 fe0c 	bl	22614 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1d9fc:	4b31      	ldr	r3, [pc, #196]	; (1dac4 <i2c_nrfx_twim_transfer+0x1e0>)
   1d9fe:	4298      	cmp	r0, r3
   1da00:	d024      	beq.n	1da4c <i2c_nrfx_twim_transfer+0x168>
			if (res == NRFX_ERROR_BUSY) {
   1da02:	330b      	adds	r3, #11
				ret = -EIO;
   1da04:	4298      	cmp	r0, r3
   1da06:	bf0c      	ite	eq
   1da08:	f06f 040f 	mvneq.w	r4, #15
   1da0c:	f06f 0404 	mvnne.w	r4, #4
   1da10:	e7c2      	b.n	1d998 <i2c_nrfx_twim_transfer+0xb4>
   1da12:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1da14:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1da18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1da1c:	d0db      	beq.n	1d9d6 <i2c_nrfx_twim_transfer+0xf2>
   1da1e:	6862      	ldr	r2, [r4, #4]
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1da20:	8b73      	ldrh	r3, [r6, #26]
   1da22:	4293      	cmp	r3, r2
   1da24:	d208      	bcs.n	1da38 <i2c_nrfx_twim_transfer+0x154>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1da26:	2145      	movs	r1, #69	; 0x45
   1da28:	f8d8 3000 	ldr.w	r3, [r8]
   1da2c:	4826      	ldr	r0, [pc, #152]	; (1dac8 <i2c_nrfx_twim_transfer+0x1e4>)
   1da2e:	f00d f8f8 	bl	2ac22 <z_log_minimal_printk>
				ret = -EINVAL;
   1da32:	f06f 0415 	mvn.w	r4, #21
				break;
   1da36:	e7af      	b.n	1d998 <i2c_nrfx_twim_transfer+0xb4>
   1da38:	4650      	mov	r0, sl
   1da3a:	f00f f8ca 	bl	2cbd2 <memcpy>
			msg_buf_used = msgs[i].len;
   1da3e:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   1da40:	2d00      	cmp	r5, #0
   1da42:	d0c8      	beq.n	1d9d6 <i2c_nrfx_twim_transfer+0xf2>
			cur_xfer.p_primary_buf = msg_buf;
   1da44:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
   1da48:	950a      	str	r5, [sp, #40]	; 0x28
   1da4a:	e7c9      	b.n	1d9e0 <i2c_nrfx_twim_transfer+0xfc>
	return z_impl_k_sem_take(sem, timeout);
   1da4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1da50:	2300      	movs	r3, #0
   1da52:	9803      	ldr	r0, [sp, #12]
   1da54:	f008 fe2c 	bl	266b0 <z_impl_k_sem_take>
		if (ret != 0) {
   1da58:	b170      	cbz	r0, 1da78 <i2c_nrfx_twim_transfer+0x194>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1da5a:	2145      	movs	r1, #69	; 0x45
   1da5c:	463a      	mov	r2, r7
   1da5e:	481b      	ldr	r0, [pc, #108]	; (1dacc <i2c_nrfx_twim_transfer+0x1e8>)
   1da60:	f00d f8df 	bl	2ac22 <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   1da64:	4630      	mov	r0, r6
   1da66:	f004 fda1 	bl	225ac <nrfx_twim_disable>
   1da6a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   1da6e:	f005 f8c1 	bl	22bf4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1da72:	f06f 0404 	mvn.w	r4, #4
			break;
   1da76:	e78f      	b.n	1d998 <i2c_nrfx_twim_transfer+0xb4>
		res = dev_data->res;
   1da78:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1da7c:	4b11      	ldr	r3, [pc, #68]	; (1dac4 <i2c_nrfx_twim_transfer+0x1e0>)
   1da7e:	429a      	cmp	r2, r3
   1da80:	d005      	beq.n	1da8e <i2c_nrfx_twim_transfer+0x1aa>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1da82:	463b      	mov	r3, r7
   1da84:	2145      	movs	r1, #69	; 0x45
   1da86:	4812      	ldr	r0, [pc, #72]	; (1dad0 <i2c_nrfx_twim_transfer+0x1ec>)
   1da88:	f00d f8cb 	bl	2ac22 <z_log_minimal_printk>
   1da8c:	e7f1      	b.n	1da72 <i2c_nrfx_twim_transfer+0x18e>
		if ((msgs[i].flags & I2C_MSG_READ)
   1da8e:	7a23      	ldrb	r3, [r4, #8]
   1da90:	07db      	lsls	r3, r3, #31
   1da92:	d401      	bmi.n	1da98 <i2c_nrfx_twim_transfer+0x1b4>
		msg_buf_used = 0;
   1da94:	2500      	movs	r5, #0
   1da96:	e799      	b.n	1d9cc <i2c_nrfx_twim_transfer+0xe8>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1da98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1da9a:	459a      	cmp	sl, r3
   1da9c:	d1fa      	bne.n	1da94 <i2c_nrfx_twim_transfer+0x1b0>
   1da9e:	4627      	mov	r7, r4
   1daa0:	e006      	b.n	1dab0 <i2c_nrfx_twim_transfer+0x1cc>
				msg_buf_used -= msgs[j].len;
   1daa2:	1aa9      	subs	r1, r5, r2
   1daa4:	b28d      	uxth	r5, r1
   1daa6:	68f8      	ldr	r0, [r7, #12]
   1daa8:	fa1a f181 	uxtah	r1, sl, r1
   1daac:	f00f f891 	bl	2cbd2 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1dab0:	687a      	ldr	r2, [r7, #4]
   1dab2:	3f0c      	subs	r7, #12
   1dab4:	4295      	cmp	r5, r2
   1dab6:	d2f4      	bcs.n	1daa2 <i2c_nrfx_twim_transfer+0x1be>
   1dab8:	e7ec      	b.n	1da94 <i2c_nrfx_twim_transfer+0x1b0>
			ret = -ENOTSUP;
   1daba:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dabe:	e76b      	b.n	1d998 <i2c_nrfx_twim_transfer+0xb4>
   1dac0:	0002ef90 	.word	0x0002ef90
   1dac4:	0bad0000 	.word	0x0bad0000
   1dac8:	0002f025 	.word	0x0002f025
   1dacc:	0002f090 	.word	0x0002f090
   1dad0:	0002f0bf 	.word	0x0002f0bf

0001dad4 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
   1dad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dad8:	2501      	movs	r5, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1dada:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dadc:	7903      	ldrb	r3, [r0, #4]
{
   1dade:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dae0:	409d      	lsls	r5, r3
   1dae2:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   1dae4:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dae6:	681b      	ldr	r3, [r3, #0]
   1dae8:	421d      	tst	r5, r3
   1daea:	d10a      	bne.n	1db02 <gpio_pin_set_dt+0x2e>
   1daec:	4914      	ldr	r1, [pc, #80]	; (1db40 <gpio_pin_set_dt+0x6c>)
   1daee:	4815      	ldr	r0, [pc, #84]	; (1db44 <gpio_pin_set_dt+0x70>)
   1daf0:	f240 42bb 	movw	r2, #1211	; 0x4bb
   1daf4:	f00c fed6 	bl	2a8a4 <printk>
   1daf8:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1dafc:	4810      	ldr	r0, [pc, #64]	; (1db40 <gpio_pin_set_dt+0x6c>)
   1dafe:	f00d f86a 	bl	2abd6 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1db02:	683b      	ldr	r3, [r7, #0]
   1db04:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1db06:	6863      	ldr	r3, [r4, #4]
   1db08:	bf18      	it	ne
   1db0a:	f086 0601 	eorne.w	r6, r6, #1
   1db0e:	681b      	ldr	r3, [r3, #0]
   1db10:	421d      	tst	r5, r3
   1db12:	d10a      	bne.n	1db2a <gpio_pin_set_dt+0x56>
   1db14:	490a      	ldr	r1, [pc, #40]	; (1db40 <gpio_pin_set_dt+0x6c>)
   1db16:	480b      	ldr	r0, [pc, #44]	; (1db44 <gpio_pin_set_dt+0x70>)
   1db18:	f240 4291 	movw	r2, #1169	; 0x491
   1db1c:	f00c fec2 	bl	2a8a4 <printk>
   1db20:	f240 4191 	movw	r1, #1169	; 0x491
   1db24:	4806      	ldr	r0, [pc, #24]	; (1db40 <gpio_pin_set_dt+0x6c>)
   1db26:	f00d f856 	bl	2abd6 <assert_post_action>
	if (value != 0)	{
   1db2a:	b136      	cbz	r6, 1db3a <gpio_pin_set_dt+0x66>
	return api->port_set_bits_raw(port, pins);
   1db2c:	68a3      	ldr	r3, [r4, #8]
   1db2e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1db30:	4629      	mov	r1, r5
   1db32:	4620      	mov	r0, r4
}
   1db34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1db38:	4718      	bx	r3
   1db3a:	68a3      	ldr	r3, [r4, #8]
   1db3c:	691b      	ldr	r3, [r3, #16]
   1db3e:	e7f7      	b.n	1db30 <gpio_pin_set_dt+0x5c>
   1db40:	0002f0fd 	.word	0x0002f0fd
   1db44:	0002e574 	.word	0x0002e574

0001db48 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db4c:	b085      	sub	sp, #20
   1db4e:	9001      	str	r0, [sp, #4]
   1db50:	2200      	movs	r2, #0
   1db52:	2101      	movs	r1, #1
   1db54:	200b      	movs	r0, #11
   1db56:	f7fe faef 	bl	1c138 <z_arm_irq_priority_set>
   1db5a:	9b01      	ldr	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1db5c:	4e3f      	ldr	r6, [pc, #252]	; (1dc5c <spi_3_init+0x114>)
   1db5e:	f8d3 9010 	ldr.w	r9, [r3, #16]
   1db62:	f8df a100 	ldr.w	sl, [pc, #256]	; 1dc64 <spi_3_init+0x11c>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1db66:	f8d9 4008 	ldr.w	r4, [r9, #8]
   1db6a:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
   1db6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1db72:	429c      	cmp	r4, r3
   1db74:	d305      	bcc.n	1db82 <spi_3_init+0x3a>
   1db76:	9b01      	ldr	r3, [sp, #4]
   1db78:	6918      	ldr	r0, [r3, #16]
   1db7a:	f00d fa79 	bl	2b070 <spi_context_unlock_unconditionally>
   1db7e:	2000      	movs	r0, #0
   1db80:	e068      	b.n	1dc54 <spi_3_init+0x10c>
		if (!device_is_ready(cs_gpio->port)) {
   1db82:	6820      	ldr	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1db84:	f00e fed5 	bl	2c932 <z_device_ready>
   1db88:	2800      	cmp	r0, #0
   1db8a:	d05a      	beq.n	1dc42 <spi_3_init+0xfa>
	return gpio_pin_configure(spec->port,
   1db8c:	f8d4 8000 	ldr.w	r8, [r4]
   1db90:	f894 b004 	ldrb.w	fp, [r4, #4]
				  spec->dt_flags | extra_flags);
   1db94:	7965      	ldrb	r5, [r4, #5]
	const struct gpio_driver_api *api =
   1db96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1db9a:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
   1db9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dba0:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
   1dba2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1dba6:	9300      	str	r3, [sp, #0]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1dba8:	f005 0330 	and.w	r3, r5, #48	; 0x30
   1dbac:	2b30      	cmp	r3, #48	; 0x30
   1dbae:	d10a      	bne.n	1dbc6 <spi_3_init+0x7e>
   1dbb0:	4631      	mov	r1, r6
   1dbb2:	4650      	mov	r0, sl
   1dbb4:	f240 22e1 	movw	r2, #737	; 0x2e1
   1dbb8:	f00c fe74 	bl	2a8a4 <printk>
   1dbbc:	f240 21e1 	movw	r1, #737	; 0x2e1
   1dbc0:	4630      	mov	r0, r6
   1dbc2:	f00d f808 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1dbc6:	f005 0306 	and.w	r3, r5, #6
   1dbca:	2b04      	cmp	r3, #4
   1dbcc:	d10a      	bne.n	1dbe4 <spi_3_init+0x9c>
   1dbce:	4631      	mov	r1, r6
   1dbd0:	4650      	mov	r0, sl
   1dbd2:	f240 22e9 	movw	r2, #745	; 0x2e9
   1dbd6:	f00c fe65 	bl	2a8a4 <printk>
   1dbda:	f240 21e9 	movw	r1, #745	; 0x2e9
   1dbde:	4630      	mov	r0, r6
   1dbe0:	f00c fff9 	bl	2abd6 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbe4:	2701      	movs	r7, #1
   1dbe6:	9a03      	ldr	r2, [sp, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dbe8:	07e8      	lsls	r0, r5, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbea:	6812      	ldr	r2, [r2, #0]
   1dbec:	fa07 f70b 	lsl.w	r7, r7, fp
	return gpio_pin_configure(spec->port,
   1dbf0:	bf54      	ite	pl
   1dbf2:	f445 55b0 	orrpl.w	r5, r5, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dbf6:	f485 55d0 	eormi.w	r5, r5, #6656	; 0x1a00
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbfa:	4217      	tst	r7, r2
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1dbfc:	f425 5380 	bic.w	r3, r5, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc00:	d10c      	bne.n	1dc1c <spi_3_init+0xd4>
   1dc02:	f240 22fd 	movw	r2, #765	; 0x2fd
   1dc06:	4631      	mov	r1, r6
   1dc08:	4650      	mov	r0, sl
   1dc0a:	9303      	str	r3, [sp, #12]
   1dc0c:	f00c fe4a 	bl	2a8a4 <printk>
   1dc10:	f240 21fd 	movw	r1, #765	; 0x2fd
   1dc14:	4630      	mov	r0, r6
   1dc16:	f00c ffde 	bl	2abd6 <assert_post_action>
   1dc1a:	9b03      	ldr	r3, [sp, #12]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1dc1c:	9a00      	ldr	r2, [sp, #0]
   1dc1e:	07e9      	lsls	r1, r5, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dc20:	6812      	ldr	r2, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1dc22:	4659      	mov	r1, fp
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dc24:	bf4c      	ite	mi
   1dc26:	4317      	orrmi	r7, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1dc28:	ea22 0707 	bicpl.w	r7, r2, r7
   1dc2c:	9a00      	ldr	r2, [sp, #0]
	return api->pin_configure(port, pin, flags);
   1dc2e:	4640      	mov	r0, r8
   1dc30:	6017      	str	r7, [r2, #0]
   1dc32:	9a02      	ldr	r2, [sp, #8]
   1dc34:	6815      	ldr	r5, [r2, #0]
   1dc36:	461a      	mov	r2, r3
   1dc38:	47a8      	blx	r5
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1dc3a:	2800      	cmp	r0, #0
   1dc3c:	db0a      	blt.n	1dc54 <spi_3_init+0x10c>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1dc3e:	3408      	adds	r4, #8
   1dc40:	e793      	b.n	1db6a <spi_3_init+0x22>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1dc42:	6822      	ldr	r2, [r4, #0]
   1dc44:	4806      	ldr	r0, [pc, #24]	; (1dc60 <spi_3_init+0x118>)
   1dc46:	2145      	movs	r1, #69	; 0x45
   1dc48:	7923      	ldrb	r3, [r4, #4]
   1dc4a:	6812      	ldr	r2, [r2, #0]
   1dc4c:	f00c ffe9 	bl	2ac22 <z_log_minimal_printk>
			return -ENODEV;
   1dc50:	f06f 0012 	mvn.w	r0, #18
   1dc54:	b005      	add	sp, #20
   1dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc5a:	bf00      	nop
   1dc5c:	0002f0fd 	.word	0x0002f0fd
   1dc60:	0002f127 	.word	0x0002f127
   1dc64:	0002e574 	.word	0x0002e574

0001dc68 <transfer_next_chunk>:
{
   1dc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1dc6c:	6905      	ldr	r5, [r0, #16]
{
   1dc6e:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1dc70:	6daf      	ldr	r7, [r5, #88]	; 0x58
   1dc72:	6e2c      	ldr	r4, [r5, #96]	; 0x60
   1dc74:	b98f      	cbnz	r7, 1dc9a <transfer_next_chunk+0x32>
	if (chunk_len > 0) {
   1dc76:	2c00      	cmp	r4, #0
   1dc78:	d14c      	bne.n	1dd14 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
   1dc7a:	2200      	movs	r2, #0
   1dc7c:	4628      	mov	r0, r5
   1dc7e:	4611      	mov	r1, r2
   1dc80:	f00d f9d4 	bl	2b02c <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   1dc84:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1dc86:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1dc8a:	f008 fcd7 	bl	2663c <z_impl_k_sem_give>
	dev_data->busy = false;
   1dc8e:	2300      	movs	r3, #0
   1dc90:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1dc94:	b005      	add	sp, #20
   1dc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   1dc9a:	463e      	mov	r6, r7
   1dc9c:	b114      	cbz	r4, 1dca4 <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1dc9e:	42a7      	cmp	r7, r4
   1dca0:	bf28      	it	cs
   1dca2:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
   1dca4:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1dca8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   1dcac:	f1b8 0f00 	cmp.w	r8, #0
   1dcb0:	d032      	beq.n	1dd18 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1dcb2:	b38f      	cbz	r7, 1dd18 <transfer_next_chunk+0xb0>
   1dcb4:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
   1dcb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1dcbc:	d02c      	beq.n	1dd18 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
   1dcbe:	2e08      	cmp	r6, #8
   1dcc0:	bf28      	it	cs
   1dcc2:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1dcc4:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   1dcc8:	4618      	mov	r0, r3
   1dcca:	4632      	mov	r2, r6
   1dccc:	4641      	mov	r1, r8
   1dcce:	f00e ff80 	bl	2cbd2 <memcpy>
   1dcd2:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
   1dcd4:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
   1dcd8:	9300      	str	r3, [sp, #0]
   1dcda:	4296      	cmp	r6, r2
   1dcdc:	bf28      	it	cs
   1dcde:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
   1dce0:	66ae      	str	r6, [r5, #104]	; 0x68
   1dce2:	f1b8 0f00 	cmp.w	r8, #0
   1dce6:	d019      	beq.n	1dd1c <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dce8:	2f00      	cmp	r7, #0
   1dcea:	bf18      	it	ne
   1dcec:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
   1dcee:	6deb      	ldr	r3, [r5, #92]	; 0x5c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dcf0:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dcf2:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dcf4:	b1a3      	cbz	r3, 1dd20 <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dcf6:	2c00      	cmp	r4, #0
   1dcf8:	bf18      	it	ne
   1dcfa:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dcfc:	2200      	movs	r2, #0
   1dcfe:	4669      	mov	r1, sp
   1dd00:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dd02:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1dd04:	f004 fa86 	bl	22214 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1dd08:	4b06      	ldr	r3, [pc, #24]	; (1dd24 <transfer_next_chunk+0xbc>)
   1dd0a:	4298      	cmp	r0, r3
   1dd0c:	d0c2      	beq.n	1dc94 <transfer_next_chunk+0x2c>
			error = -EIO;
   1dd0e:	f06f 0404 	mvn.w	r4, #4
   1dd12:	e7b2      	b.n	1dc7a <transfer_next_chunk+0x12>
   1dd14:	4626      	mov	r6, r4
   1dd16:	e7c5      	b.n	1dca4 <transfer_next_chunk+0x3c>
   1dd18:	4643      	mov	r3, r8
   1dd1a:	e7db      	b.n	1dcd4 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dd1c:	4647      	mov	r7, r8
   1dd1e:	e7e6      	b.n	1dcee <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dd20:	461c      	mov	r4, r3
   1dd22:	e7eb      	b.n	1dcfc <transfer_next_chunk+0x94>
   1dd24:	0bad0000 	.word	0x0bad0000

0001dd28 <spi_nrfx_transceive>:
{
   1dd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd2c:	b08b      	sub	sp, #44	; 0x2c
   1dd2e:	9301      	str	r3, [sp, #4]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dd30:	888b      	ldrh	r3, [r1, #4]
   1dd32:	4680      	mov	r8, r0
   1dd34:	049f      	lsls	r7, r3, #18
   1dd36:	460e      	mov	r6, r1
   1dd38:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1dd3a:	6904      	ldr	r4, [r0, #16]
   1dd3c:	d42f      	bmi.n	1dd9e <spi_nrfx_transceive+0x76>
	return z_impl_k_sem_take(sem, timeout);
   1dd3e:	f04f 32ff 	mov.w	r2, #4294967295
   1dd42:	f04f 33ff 	mov.w	r3, #4294967295
   1dd46:	f104 0010 	add.w	r0, r4, #16
   1dd4a:	f008 fcb1 	bl	266b0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1dd4e:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   1dd50:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1dd54:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1dd58:	f8db 300c 	ldr.w	r3, [fp, #12]
   1dd5c:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1dd5e:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1dd62:	9302      	str	r3, [sp, #8]
   1dd64:	b123      	cbz	r3, 1dd70 <spi_nrfx_transceive+0x48>
   1dd66:	f8da 3000 	ldr.w	r3, [sl]
   1dd6a:	429e      	cmp	r6, r3
   1dd6c:	f000 80a5 	beq.w	1deba <spi_nrfx_transceive+0x192>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1dd70:	88b7      	ldrh	r7, [r6, #4]
   1dd72:	053d      	lsls	r5, r7, #20
   1dd74:	d51a      	bpl.n	1ddac <spi_nrfx_transceive+0x84>
		LOG_ERR("Half-duplex not supported");
   1dd76:	2145      	movs	r1, #69	; 0x45
   1dd78:	4883      	ldr	r0, [pc, #524]	; (1df88 <spi_nrfx_transceive+0x260>)
   1dd7a:	f00c ff52 	bl	2ac22 <z_log_minimal_printk>
		return -ENOTSUP;
   1dd7e:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1dd82:	6823      	ldr	r3, [r4, #0]
   1dd84:	889b      	ldrh	r3, [r3, #4]
   1dd86:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1dd8a:	d104      	bne.n	1dd96 <spi_nrfx_transceive+0x6e>
		ctx->owner = NULL;
   1dd8c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1dd8e:	f104 0010 	add.w	r0, r4, #16
   1dd92:	f008 fc53 	bl	2663c <z_impl_k_sem_give>
}
   1dd96:	4628      	mov	r0, r5
   1dd98:	b00b      	add	sp, #44	; 0x2c
   1dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dd9e:	69a3      	ldr	r3, [r4, #24]
   1dda0:	2b00      	cmp	r3, #0
   1dda2:	d1cc      	bne.n	1dd3e <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1dda4:	6863      	ldr	r3, [r4, #4]
   1dda6:	4299      	cmp	r1, r3
   1dda8:	d1c9      	bne.n	1dd3e <spi_nrfx_transceive+0x16>
   1ddaa:	e7d1      	b.n	1dd50 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1ddac:	07f8      	lsls	r0, r7, #31
   1ddae:	d508      	bpl.n	1ddc2 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1ddb0:	2145      	movs	r1, #69	; 0x45
   1ddb2:	f8d8 2000 	ldr.w	r2, [r8]
   1ddb6:	4875      	ldr	r0, [pc, #468]	; (1df8c <spi_nrfx_transceive+0x264>)
   1ddb8:	f00c ff33 	bl	2ac22 <z_log_minimal_printk>
		return -EINVAL;
   1ddbc:	f06f 0515 	mvn.w	r5, #21
   1ddc0:	e7df      	b.n	1dd82 <spi_nrfx_transceive+0x5a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1ddc2:	0739      	lsls	r1, r7, #28
   1ddc4:	d504      	bpl.n	1ddd0 <spi_nrfx_transceive+0xa8>
		LOG_ERR("Loopback mode is not supported");
   1ddc6:	2145      	movs	r1, #69	; 0x45
   1ddc8:	4871      	ldr	r0, [pc, #452]	; (1df90 <spi_nrfx_transceive+0x268>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1ddca:	f00c ff2a 	bl	2ac22 <z_log_minimal_printk>
   1ddce:	e7f5      	b.n	1ddbc <spi_nrfx_transceive+0x94>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1ddd0:	f3c7 1345 	ubfx	r3, r7, #5, #6
   1ddd4:	2b08      	cmp	r3, #8
   1ddd6:	d002      	beq.n	1ddde <spi_nrfx_transceive+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1ddd8:	2145      	movs	r1, #69	; 0x45
   1ddda:	486e      	ldr	r0, [pc, #440]	; (1df94 <spi_nrfx_transceive+0x26c>)
   1dddc:	e7f5      	b.n	1ddca <spi_nrfx_transceive+0xa2>
	if (spi_cfg->frequency < 125000) {
   1ddde:	6835      	ldr	r5, [r6, #0]
   1dde0:	4b6d      	ldr	r3, [pc, #436]	; (1df98 <spi_nrfx_transceive+0x270>)
   1dde2:	429d      	cmp	r5, r3
   1dde4:	d802      	bhi.n	1ddec <spi_nrfx_transceive+0xc4>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1dde6:	2145      	movs	r1, #69	; 0x45
   1dde8:	486c      	ldr	r0, [pc, #432]	; (1df9c <spi_nrfx_transceive+0x274>)
   1ddea:	e7ee      	b.n	1ddca <spi_nrfx_transceive+0xa2>
	config = dev_config->def_config;
   1ddec:	f10d 0c14 	add.w	ip, sp, #20
   1ddf0:	f10b 0e10 	add.w	lr, fp, #16
   1ddf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1ddf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ddfc:	f8de 3000 	ldr.w	r3, [lr]
   1de00:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1de04:	9b03      	ldr	r3, [sp, #12]
   1de06:	42ab      	cmp	r3, r5
   1de08:	bf28      	it	cs
   1de0a:	462b      	movcs	r3, r5
   1de0c:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1de0e:	4b64      	ldr	r3, [pc, #400]	; (1dfa0 <spi_nrfx_transceive+0x278>)
   1de10:	429d      	cmp	r5, r3
   1de12:	d93a      	bls.n	1de8a <spi_nrfx_transceive+0x162>
	} else if (frequency < 500000) {
   1de14:	4b63      	ldr	r3, [pc, #396]	; (1dfa4 <spi_nrfx_transceive+0x27c>)
   1de16:	429d      	cmp	r5, r3
   1de18:	d93a      	bls.n	1de90 <spi_nrfx_transceive+0x168>
	} else if (frequency < 1000000) {
   1de1a:	4b63      	ldr	r3, [pc, #396]	; (1dfa8 <spi_nrfx_transceive+0x280>)
   1de1c:	429d      	cmp	r5, r3
   1de1e:	d93a      	bls.n	1de96 <spi_nrfx_transceive+0x16e>
	} else if (frequency < 2000000) {
   1de20:	4b62      	ldr	r3, [pc, #392]	; (1dfac <spi_nrfx_transceive+0x284>)
   1de22:	429d      	cmp	r5, r3
   1de24:	d93a      	bls.n	1de9c <spi_nrfx_transceive+0x174>
	} else if (frequency < 4000000) {
   1de26:	4b62      	ldr	r3, [pc, #392]	; (1dfb0 <spi_nrfx_transceive+0x288>)
   1de28:	429d      	cmp	r5, r3
   1de2a:	d93a      	bls.n	1dea2 <spi_nrfx_transceive+0x17a>
		return NRF_SPIM_FREQ_8M;
   1de2c:	4b61      	ldr	r3, [pc, #388]	; (1dfb4 <spi_nrfx_transceive+0x28c>)
   1de2e:	429d      	cmp	r5, r3
   1de30:	bf34      	ite	cc
   1de32:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1de36:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1de3a:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1de3c:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1de3e:	f007 0304 	and.w	r3, r7, #4
   1de42:	d531      	bpl.n	1dea8 <spi_nrfx_transceive+0x180>
			return NRF_SPIM_MODE_2;
   1de44:	2b00      	cmp	r3, #0
   1de46:	bf14      	ite	ne
   1de48:	2303      	movne	r3, #3
   1de4a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1de4c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
   1de50:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
   1de52:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1de56:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	if (dev_data->initialized) {
   1de5a:	b12b      	cbz	r3, 1de68 <spi_nrfx_transceive+0x140>
		nrfx_spim_uninit(&dev_config->spim);
   1de5c:	4658      	mov	r0, fp
   1de5e:	f004 f97d 	bl	2215c <nrfx_spim_uninit>
		dev_data->initialized = false;
   1de62:	2300      	movs	r3, #0
   1de64:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1de68:	4653      	mov	r3, sl
   1de6a:	4a53      	ldr	r2, [pc, #332]	; (1dfb8 <spi_nrfx_transceive+0x290>)
   1de6c:	4658      	mov	r0, fp
   1de6e:	a905      	add	r1, sp, #20
   1de70:	f004 f8b2 	bl	21fd8 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1de74:	4b51      	ldr	r3, [pc, #324]	; (1dfbc <spi_nrfx_transceive+0x294>)
	result = nrfx_spim_init(&dev_config->spim, &config,
   1de76:	4602      	mov	r2, r0
	if (result != NRFX_SUCCESS) {
   1de78:	4298      	cmp	r0, r3
   1de7a:	d019      	beq.n	1deb0 <spi_nrfx_transceive+0x188>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1de7c:	2145      	movs	r1, #69	; 0x45
   1de7e:	4850      	ldr	r0, [pc, #320]	; (1dfc0 <spi_nrfx_transceive+0x298>)
   1de80:	f00c fecf 	bl	2ac22 <z_log_minimal_printk>
		return -EIO;
   1de84:	f06f 0504 	mvn.w	r5, #4
   1de88:	e77b      	b.n	1dd82 <spi_nrfx_transceive+0x5a>
		return NRF_SPIM_FREQ_125K;
   1de8a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1de8e:	e7d4      	b.n	1de3a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_250K;
   1de90:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1de94:	e7d1      	b.n	1de3a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_500K;
   1de96:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1de9a:	e7ce      	b.n	1de3a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_1M;
   1de9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1dea0:	e7cb      	b.n	1de3a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_2M;
   1dea2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1dea6:	e7c8      	b.n	1de3a <spi_nrfx_transceive+0x112>
			return NRF_SPIM_MODE_0;
   1dea8:	3b00      	subs	r3, #0
   1deaa:	bf18      	it	ne
   1deac:	2301      	movne	r3, #1
   1deae:	e7cd      	b.n	1de4c <spi_nrfx_transceive+0x124>
	dev_data->initialized = true;
   1deb0:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1deb2:	f8ca 6000 	str.w	r6, [sl]
	dev_data->initialized = true;
   1deb6:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1deba:	2301      	movs	r3, #1
   1debc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1dec0:	f1b9 0f00 	cmp.w	r9, #0
   1dec4:	d14d      	bne.n	1df62 <spi_nrfx_transceive+0x23a>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1dec6:	464a      	mov	r2, r9
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1dec8:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1decc:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1dece:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1ded2:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1ded6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1deda:	f00d f896 	bl	2b00a <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1dede:	9b01      	ldr	r3, [sp, #4]
	ctx->tx_buf = (const uint8_t *)
   1dee0:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1dee2:	2b00      	cmp	r3, #0
   1dee4:	d145      	bne.n	1df72 <spi_nrfx_transceive+0x24a>
   1dee6:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1dee8:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1deea:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1deee:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1def2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1def6:	f00d f888 	bl	2b00a <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1defa:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   1defc:	2101      	movs	r1, #1
	ctx->sync_status = 0;
   1defe:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
   1df00:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   1df02:	4620      	mov	r0, r4
   1df04:	f00d f892 	bl	2b02c <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   1df08:	4640      	mov	r0, r8
   1df0a:	f7ff fead 	bl	1dc68 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1df0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1df10:	6e21      	ldr	r1, [r4, #96]	; 0x60
			     ctx->config->frequency;
   1df12:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1df14:	428b      	cmp	r3, r1
   1df16:	bf38      	it	cc
   1df18:	460b      	movcc	r3, r1
   1df1a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   1df1e:	4359      	muls	r1, r3
			     ctx->config->frequency;
   1df20:	f855 3b28 	ldr.w	r3, [r5], #40
			return (t * to_hz + off) / from_hz;
   1df24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1df28:	681b      	ldr	r3, [r3, #0]
   1df2a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1df2e:	fbb1 f1f3 	udiv	r1, r1, r3
   1df32:	2700      	movs	r7, #0
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1df34:	31c8      	adds	r1, #200	; 0xc8
   1df36:	fbe0 6701 	umlal	r6, r7, r0, r1
   1df3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1df3e:	2300      	movs	r3, #0
   1df40:	4630      	mov	r0, r6
   1df42:	4639      	mov	r1, r7
   1df44:	f7fb f8ac 	bl	190a0 <__aeabi_uldivmod>
   1df48:	4602      	mov	r2, r0
   1df4a:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1df4c:	4628      	mov	r0, r5
   1df4e:	f008 fbaf 	bl	266b0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1df52:	b1b0      	cbz	r0, 1df82 <spi_nrfx_transceive+0x25a>
		LOG_ERR("Timeout waiting for transfer complete");
   1df54:	2145      	movs	r1, #69	; 0x45
   1df56:	481b      	ldr	r0, [pc, #108]	; (1dfc4 <spi_nrfx_transceive+0x29c>)
   1df58:	f00c fe63 	bl	2ac22 <z_log_minimal_printk>
		return -ETIMEDOUT;
   1df5c:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1df60:	e70f      	b.n	1dd82 <spi_nrfx_transceive+0x5a>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1df62:	f8d9 2000 	ldr.w	r2, [r9]
   1df66:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1df68:	2a00      	cmp	r2, #0
   1df6a:	d0af      	beq.n	1decc <spi_nrfx_transceive+0x1a4>
   1df6c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1df70:	e7ac      	b.n	1decc <spi_nrfx_transceive+0x1a4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1df72:	9b01      	ldr	r3, [sp, #4]
   1df74:	681b      	ldr	r3, [r3, #0]
   1df76:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1df78:	2b00      	cmp	r3, #0
   1df7a:	d0b5      	beq.n	1dee8 <spi_nrfx_transceive+0x1c0>
   1df7c:	9b01      	ldr	r3, [sp, #4]
   1df7e:	685b      	ldr	r3, [r3, #4]
   1df80:	e7b2      	b.n	1dee8 <spi_nrfx_transceive+0x1c0>
	status = ctx->sync_status;
   1df82:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1df84:	e6fd      	b.n	1dd82 <spi_nrfx_transceive+0x5a>
   1df86:	bf00      	nop
   1df88:	0002f150 	.word	0x0002f150
   1df8c:	0002f16f 	.word	0x0002f16f
   1df90:	0002f196 	.word	0x0002f196
   1df94:	0002f1ba 	.word	0x0002f1ba
   1df98:	0001e847 	.word	0x0001e847
   1df9c:	0002f1ee 	.word	0x0002f1ee
   1dfa0:	0003d08f 	.word	0x0003d08f
   1dfa4:	0007a11f 	.word	0x0007a11f
   1dfa8:	000f423f 	.word	0x000f423f
   1dfac:	001e847f 	.word	0x001e847f
   1dfb0:	003d08ff 	.word	0x003d08ff
   1dfb4:	007a1200 	.word	0x007a1200
   1dfb8:	0001dfc9 	.word	0x0001dfc9
   1dfbc:	0bad0000 	.word	0x0bad0000
   1dfc0:	0002f224 	.word	0x0002f224
   1dfc4:	0002f250 	.word	0x0002f250

0001dfc8 <event_handler>:
{
   1dfc8:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1dfca:	7803      	ldrb	r3, [r0, #0]
{
   1dfcc:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1dfce:	2b00      	cmp	r3, #0
   1dfd0:	d147      	bne.n	1e062 <event_handler+0x9a>
	if (!ctx->tx_len) {
   1dfd2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1dfd4:	b133      	cbz	r3, 1dfe4 <event_handler+0x1c>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dfd6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1dfd8:	429a      	cmp	r2, r3
   1dfda:	d911      	bls.n	1e000 <event_handler+0x38>
		LOG_ERR("Update exceeds current buffer");
   1dfdc:	2145      	movs	r1, #69	; 0x45
   1dfde:	4821      	ldr	r0, [pc, #132]	; (1e064 <event_handler+0x9c>)
   1dfe0:	f00c fe1f 	bl	2ac22 <z_log_minimal_printk>
	if (!ctx->rx_len) {
   1dfe4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1dfe6:	b133      	cbz	r3, 1dff6 <event_handler+0x2e>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dfe8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1dfea:	429a      	cmp	r2, r3
   1dfec:	d920      	bls.n	1e030 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
   1dfee:	2145      	movs	r1, #69	; 0x45
   1dff0:	481c      	ldr	r0, [pc, #112]	; (1e064 <event_handler+0x9c>)
   1dff2:	f00c fe16 	bl	2ac22 <z_log_minimal_printk>
		transfer_next_chunk(dev_data->dev);
   1dff6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1dff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1dffc:	f7ff be34 	b.w	1dc68 <transfer_next_chunk>
	ctx->tx_len -= len;
   1e000:	1a9b      	subs	r3, r3, r2
   1e002:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1e004:	b973      	cbnz	r3, 1e024 <event_handler+0x5c>
		++ctx->current_tx;
   1e006:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1e008:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1e00c:	3308      	adds	r3, #8
   1e00e:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1e010:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1e012:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1e016:	3b01      	subs	r3, #1
   1e018:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1e01a:	3148      	adds	r1, #72	; 0x48
   1e01c:	f00c fff5 	bl	2b00a <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1e020:	6560      	str	r0, [r4, #84]	; 0x54
   1e022:	e7df      	b.n	1dfe4 <event_handler+0x1c>
	} else if (ctx->tx_buf) {
   1e024:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1e026:	2b00      	cmp	r3, #0
   1e028:	d0dc      	beq.n	1dfe4 <event_handler+0x1c>
		ctx->tx_buf += dfs * len;
   1e02a:	4413      	add	r3, r2
   1e02c:	654b      	str	r3, [r1, #84]	; 0x54
   1e02e:	e7d9      	b.n	1dfe4 <event_handler+0x1c>
	ctx->rx_len -= len;
   1e030:	1a9b      	subs	r3, r3, r2
   1e032:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1e034:	b97b      	cbnz	r3, 1e056 <event_handler+0x8e>
		++ctx->current_rx;
   1e036:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1e038:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1e03c:	3308      	adds	r3, #8
   1e03e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1e040:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1e042:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1e046:	3b01      	subs	r3, #1
   1e048:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1e04a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e04e:	f00c ffdc 	bl	2b00a <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1e052:	65e0      	str	r0, [r4, #92]	; 0x5c
   1e054:	e7cf      	b.n	1dff6 <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   1e056:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e058:	2b00      	cmp	r3, #0
   1e05a:	d0cc      	beq.n	1dff6 <event_handler+0x2e>
		ctx->rx_buf += dfs * len;
   1e05c:	4413      	add	r3, r2
   1e05e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e060:	e7c9      	b.n	1dff6 <event_handler+0x2e>
}
   1e062:	bd10      	pop	{r4, pc}
   1e064:	0002f27b 	.word	0x0002f27b

0001e068 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1e068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e06a:	460f      	mov	r7, r1
   1e06c:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1e06e:	b940      	cbnz	r0, 1e082 <entropy_cc3xx_rng_get_entropy+0x1a>
   1e070:	4917      	ldr	r1, [pc, #92]	; (1e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   1e072:	4818      	ldr	r0, [pc, #96]	; (1e0d4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e074:	2224      	movs	r2, #36	; 0x24
   1e076:	f00c fc15 	bl	2a8a4 <printk>
   1e07a:	2124      	movs	r1, #36	; 0x24
   1e07c:	4814      	ldr	r0, [pc, #80]	; (1e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   1e07e:	f00c fdaa 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e082:	b947      	cbnz	r7, 1e096 <entropy_cc3xx_rng_get_entropy+0x2e>
   1e084:	4912      	ldr	r1, [pc, #72]	; (1e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   1e086:	4813      	ldr	r0, [pc, #76]	; (1e0d4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e088:	2225      	movs	r2, #37	; 0x25
   1e08a:	f00c fc0b 	bl	2a8a4 <printk>
   1e08e:	2125      	movs	r1, #37	; 0x25
   1e090:	480f      	ldr	r0, [pc, #60]	; (1e0d0 <entropy_cc3xx_rng_get_entropy+0x68>)
   1e092:	f00c fda0 	bl	2abd6 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e096:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1e09a:	2400      	movs	r4, #0
   1e09c:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1e0a0:	42a6      	cmp	r6, r4
   1e0a2:	d801      	bhi.n	1e0a8 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
   1e0a4:	b003      	add	sp, #12
   1e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e0a8:	1b33      	subs	r3, r6, r4
   1e0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e0ae:	bf38      	it	cc
   1e0b0:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   1e0b2:	aa01      	add	r2, sp, #4
   1e0b4:	4629      	mov	r1, r5
   1e0b6:	1938      	adds	r0, r7, r4
   1e0b8:	f00c fed9 	bl	2ae6e <spm_request_random_number>
		if (olen != chunk_size) {
   1e0bc:	9b01      	ldr	r3, [sp, #4]
   1e0be:	42ab      	cmp	r3, r5
   1e0c0:	d103      	bne.n	1e0ca <entropy_cc3xx_rng_get_entropy+0x62>
		if (res != 0) {
   1e0c2:	2800      	cmp	r0, #0
   1e0c4:	d1ee      	bne.n	1e0a4 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   1e0c6:	442c      	add	r4, r5
   1e0c8:	e7ea      	b.n	1e0a0 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
   1e0ca:	f06f 0015 	mvn.w	r0, #21
   1e0ce:	e7e9      	b.n	1e0a4 <entropy_cc3xx_rng_get_entropy+0x3c>
   1e0d0:	0002f2b2 	.word	0x0002f2b2
   1e0d4:	0002e574 	.word	0x0002e574

0001e0d8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e0d8:	4919      	ldr	r1, [pc, #100]	; (1e140 <sys_clock_timeout_handler+0x68>)
{
   1e0da:	b570      	push	{r4, r5, r6, lr}
   1e0dc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e0de:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e0e2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e0e4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e0e8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e0ec:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e0ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e0f2:	f04f 0500 	mov.w	r5, #0
   1e0f6:	d20a      	bcs.n	1e10e <sys_clock_timeout_handler+0x36>
		return true;
   1e0f8:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e0fa:	4b12      	ldr	r3, [pc, #72]	; (1e144 <sys_clock_timeout_handler+0x6c>)
   1e0fc:	6819      	ldr	r1, [r3, #0]
   1e0fe:	060a      	lsls	r2, r1, #24
   1e100:	0a0b      	lsrs	r3, r1, #8
   1e102:	1992      	adds	r2, r2, r6
   1e104:	4910      	ldr	r1, [pc, #64]	; (1e148 <sys_clock_timeout_handler+0x70>)
   1e106:	f143 0300 	adc.w	r3, r3, #0
   1e10a:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e10e:	f00a f837 	bl	28180 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1e112:	00a3      	lsls	r3, r4, #2
   1e114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e118:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1e11c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e120:	42b2      	cmp	r2, r6
   1e122:	d10b      	bne.n	1e13c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1e124:	b91d      	cbnz	r5, 1e12e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1e126:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e12a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e12e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e132:	4b06      	ldr	r3, [pc, #24]	; (1e14c <sys_clock_timeout_handler+0x74>)
   1e134:	fa00 f404 	lsl.w	r4, r0, r4
   1e138:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e13c:	bd70      	pop	{r4, r5, r6, pc}
   1e13e:	bf00      	nop
   1e140:	2000cae8 	.word	0x2000cae8
   1e144:	2000cf44 	.word	0x2000cf44
   1e148:	2000cad0 	.word	0x2000cad0
   1e14c:	40015000 	.word	0x40015000

0001e150 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e150:	2301      	movs	r3, #1
   1e152:	4083      	lsls	r3, r0
{
   1e154:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e156:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e158:	4a0c      	ldr	r2, [pc, #48]	; (1e18c <compare_int_lock+0x3c>)
   1e15a:	e8d2 1fef 	ldaex	r1, [r2]
   1e15e:	ea01 0c04 	and.w	ip, r1, r4
   1e162:	e8c2 cfee 	stlex	lr, ip, [r2]
   1e166:	f1be 0f00 	cmp.w	lr, #0
   1e16a:	d1f6      	bne.n	1e15a <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e16c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e170:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1e174:	4a06      	ldr	r2, [pc, #24]	; (1e190 <compare_int_lock+0x40>)
   1e176:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   1e17a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e17e:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1e182:	420b      	tst	r3, r1
}
   1e184:	bf14      	ite	ne
   1e186:	2001      	movne	r0, #1
   1e188:	2000      	moveq	r0, #0
   1e18a:	bd10      	pop	{r4, pc}
   1e18c:	2000cf40 	.word	0x2000cf40
   1e190:	40015000 	.word	0x40015000

0001e194 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1e194:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e196:	4a0e      	ldr	r2, [pc, #56]	; (1e1d0 <compare_int_unlock.part.0+0x3c>)
   1e198:	4083      	lsls	r3, r0
   1e19a:	e8d2 1fef 	ldaex	r1, [r2]
   1e19e:	4319      	orrs	r1, r3
   1e1a0:	e8c2 1fec 	stlex	ip, r1, [r2]
   1e1a4:	f1bc 0f00 	cmp.w	ip, #0
   1e1a8:	d1f7      	bne.n	1e19a <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e1aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e1ae:	4a09      	ldr	r2, [pc, #36]	; (1e1d4 <compare_int_unlock.part.0+0x40>)
   1e1b0:	4083      	lsls	r3, r0
   1e1b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e1b6:	4b08      	ldr	r3, [pc, #32]	; (1e1d8 <compare_int_unlock.part.0+0x44>)
   1e1b8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e1bc:	fa23 f000 	lsr.w	r0, r3, r0
   1e1c0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e1c2:	bf42      	ittt	mi
   1e1c4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e1c8:	4b04      	ldrmi	r3, [pc, #16]	; (1e1dc <compare_int_unlock.part.0+0x48>)
   1e1ca:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e1ce:	4770      	bx	lr
   1e1d0:	2000cf40 	.word	0x2000cf40
   1e1d4:	40015000 	.word	0x40015000
   1e1d8:	2000cf3c 	.word	0x2000cf3c
   1e1dc:	e000e100 	.word	0xe000e100

0001e1e0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e1e0:	4b0d      	ldr	r3, [pc, #52]	; (1e218 <z_nrf_rtc_timer_read+0x38>)
   1e1e2:	681b      	ldr	r3, [r3, #0]
   1e1e4:	0a19      	lsrs	r1, r3, #8
   1e1e6:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e1e8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e1ec:	4b0b      	ldr	r3, [pc, #44]	; (1e21c <z_nrf_rtc_timer_read+0x3c>)
   1e1ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e1f2:	18c0      	adds	r0, r0, r3
   1e1f4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e1f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e1fc:	d20a      	bcs.n	1e214 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e1fe:	4b08      	ldr	r3, [pc, #32]	; (1e220 <z_nrf_rtc_timer_read+0x40>)
   1e200:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e204:	4299      	cmp	r1, r3
   1e206:	bf08      	it	eq
   1e208:	4290      	cmpeq	r0, r2
   1e20a:	d203      	bcs.n	1e214 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e20c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e210:	f141 0100 	adc.w	r1, r1, #0
}
   1e214:	4770      	bx	lr
   1e216:	bf00      	nop
   1e218:	2000cf44 	.word	0x2000cf44
   1e21c:	40015000 	.word	0x40015000
   1e220:	2000cad0 	.word	0x2000cad0

0001e224 <compare_set>:
{
   1e224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e228:	4616      	mov	r6, r2
   1e22a:	461f      	mov	r7, r3
   1e22c:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1e22e:	f7ff ff8f 	bl	1e150 <compare_int_lock>
   1e232:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e234:	f7ff ffd4 	bl	1e1e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e238:	42b9      	cmp	r1, r7
   1e23a:	bf08      	it	eq
   1e23c:	42b0      	cmpeq	r0, r6
   1e23e:	d27b      	bcs.n	1e338 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e240:	2300      	movs	r3, #0
   1e242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1e246:	ebb6 0800 	subs.w	r8, r6, r0
   1e24a:	eb67 0901 	sbc.w	r9, r7, r1
   1e24e:	454b      	cmp	r3, r9
   1e250:	bf08      	it	eq
   1e252:	4542      	cmpeq	r2, r8
   1e254:	d37d      	bcc.n	1e352 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   1e256:	4b40      	ldr	r3, [pc, #256]	; (1e358 <compare_set+0x134>)
   1e258:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1e25c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e260:	429f      	cmp	r7, r3
   1e262:	bf08      	it	eq
   1e264:	4296      	cmpeq	r6, r2
   1e266:	d051      	beq.n	1e30c <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e268:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1e26c:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e270:	4614      	mov	r4, r2
   1e272:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e276:	f105 0850 	add.w	r8, r5, #80	; 0x50
   1e27a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1e27e:	ea4f 0888 	mov.w	r8, r8, lsl #2
   1e282:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e286:	fa1f f888 	uxth.w	r8, r8
   1e28a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   1e28e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e292:	4b32      	ldr	r3, [pc, #200]	; (1e35c <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e294:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e298:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
   1e29c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e2a0:	eba0 000a 	sub.w	r0, r0, sl
   1e2a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e2a8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e2ac:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e2ae:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1e2b2:	d105      	bne.n	1e2c0 <compare_set+0x9c>
   1e2b4:	9201      	str	r2, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   1e2b6:	2013      	movs	r0, #19
   1e2b8:	f00e fbdf 	bl	2ca7a <z_impl_k_busy_wait>
   1e2bc:	4b27      	ldr	r3, [pc, #156]	; (1e35c <compare_set+0x138>)
   1e2be:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e2c0:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1e2c4:	eba4 000c 	sub.w	r0, r4, ip
   1e2c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e2cc:	2100      	movs	r1, #0
			cc_val = now + 2;
   1e2ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e2d2:	bf88      	it	hi
   1e2d4:	4664      	movhi	r4, ip
   1e2d6:	f8c8 1000 	str.w	r1, [r8]
   1e2da:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e2de:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
   1e2e2:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   1e2e6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e2ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e2ee:	4582      	cmp	sl, r0
   1e2f0:	d006      	beq.n	1e300 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   1e2f2:	1a20      	subs	r0, r4, r0
   1e2f4:	3802      	subs	r0, #2
   1e2f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e2fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e2fe:	d819      	bhi.n	1e334 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
   1e300:	1aa4      	subs	r4, r4, r2
   1e302:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e306:	1932      	adds	r2, r6, r4
   1e308:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1e30c:	4c12      	ldr	r4, [pc, #72]	; (1e358 <compare_set+0x134>)
   1e30e:	0129      	lsls	r1, r5, #4
   1e310:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1e314:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1e318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
   1e31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
   1e31c:	5062      	str	r2, [r4, r1]
	return ret;
   1e31e:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
   1e320:	6043      	str	r3, [r0, #4]
	if (key) {
   1e322:	9b00      	ldr	r3, [sp, #0]
   1e324:	b113      	cbz	r3, 1e32c <compare_set+0x108>
   1e326:	4628      	mov	r0, r5
   1e328:	f7ff ff34 	bl	1e194 <compare_int_unlock.part.0>
}
   1e32c:	4620      	mov	r0, r4
   1e32e:	b003      	add	sp, #12
   1e330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e334:	4620      	mov	r0, r4
   1e336:	e7b1      	b.n	1e29c <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
   1e338:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e33a:	4a09      	ldr	r2, [pc, #36]	; (1e360 <compare_set+0x13c>)
   1e33c:	40ab      	lsls	r3, r5
   1e33e:	e8d2 1fef 	ldaex	r1, [r2]
   1e342:	4319      	orrs	r1, r3
   1e344:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1e348:	2800      	cmp	r0, #0
   1e34a:	d1f8      	bne.n	1e33e <compare_set+0x11a>
   1e34c:	4632      	mov	r2, r6
   1e34e:	463b      	mov	r3, r7
   1e350:	e7dc      	b.n	1e30c <compare_set+0xe8>
			return -EINVAL;
   1e352:	f06f 0415 	mvn.w	r4, #21
   1e356:	e7e4      	b.n	1e322 <compare_set+0xfe>
   1e358:	2000cad8 	.word	0x2000cad8
   1e35c:	40015000 	.word	0x40015000
   1e360:	2000cf3c 	.word	0x2000cf3c

0001e364 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1e366:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e368:	f04f 30ff 	mov.w	r0, #4294967295
   1e36c:	f04f 31ff 	mov.w	r1, #4294967295
   1e370:	4d16      	ldr	r5, [pc, #88]	; (1e3cc <sys_clock_driver_init+0x68>)
   1e372:	4b17      	ldr	r3, [pc, #92]	; (1e3d0 <sys_clock_driver_init+0x6c>)
   1e374:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1e378:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e37c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e380:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e382:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e386:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1e38a:	4b12      	ldr	r3, [pc, #72]	; (1e3d4 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e38c:	2101      	movs	r1, #1
   1e38e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1e392:	2015      	movs	r0, #21
   1e394:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e398:	4622      	mov	r2, r4
   1e39a:	f7fd fecd 	bl	1c138 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e39e:	2015      	movs	r0, #21
   1e3a0:	f7fd fe98 	bl	1c0d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e3a4:	2301      	movs	r3, #1
   1e3a6:	4a0c      	ldr	r2, [pc, #48]	; (1e3d8 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e3a8:	4620      	mov	r0, r4
   1e3aa:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   1e3ac:	4a0b      	ldr	r2, [pc, #44]	; (1e3dc <sys_clock_driver_init+0x78>)
   1e3ae:	602b      	str	r3, [r5, #0]
   1e3b0:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e3b2:	4b0b      	ldr	r3, [pc, #44]	; (1e3e0 <sys_clock_driver_init+0x7c>)
   1e3b4:	4a0b      	ldr	r2, [pc, #44]	; (1e3e4 <sys_clock_driver_init+0x80>)
   1e3b6:	9300      	str	r3, [sp, #0]
   1e3b8:	9401      	str	r4, [sp, #4]
   1e3ba:	2300      	movs	r3, #0
   1e3bc:	f7ff ff32 	bl	1e224 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e3c0:	4630      	mov	r0, r6
   1e3c2:	f7fe ff7d 	bl	1d2c0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e3c6:	4620      	mov	r0, r4
   1e3c8:	b002      	add	sp, #8
   1e3ca:	bd70      	pop	{r4, r5, r6, pc}
   1e3cc:	40015000 	.word	0x40015000
   1e3d0:	2000cad8 	.word	0x2000cad8
   1e3d4:	e000e100 	.word	0xe000e100
   1e3d8:	40015008 	.word	0x40015008
   1e3dc:	2000cf40 	.word	0x2000cf40
   1e3e0:	0001e0d9 	.word	0x0001e0d9
   1e3e4:	007fffff 	.word	0x007fffff

0001e3e8 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   1e3e8:	4b33      	ldr	r3, [pc, #204]	; (1e4b8 <rtc_nrf_isr+0xd0>)
{
   1e3ea:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   1e3ee:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e3f2:	079a      	lsls	r2, r3, #30
   1e3f4:	d509      	bpl.n	1e40a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e3f6:	4b31      	ldr	r3, [pc, #196]	; (1e4bc <rtc_nrf_isr+0xd4>)
   1e3f8:	681a      	ldr	r2, [r3, #0]
   1e3fa:	b132      	cbz	r2, 1e40a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e3fc:	2200      	movs	r2, #0
   1e3fe:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1e400:	4a2f      	ldr	r2, [pc, #188]	; (1e4c0 <rtc_nrf_isr+0xd8>)
   1e402:	681b      	ldr	r3, [r3, #0]
   1e404:	6813      	ldr	r3, [r2, #0]
   1e406:	3301      	adds	r3, #1
   1e408:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1e40a:	f04f 0320 	mov.w	r3, #32
   1e40e:	f3ef 8211 	mrs	r2, BASEPRI
   1e412:	f383 8812 	msr	BASEPRI_MAX, r3
   1e416:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   1e41a:	4b27      	ldr	r3, [pc, #156]	; (1e4b8 <rtc_nrf_isr+0xd0>)
   1e41c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e420:	03db      	lsls	r3, r3, #15
   1e422:	d50e      	bpl.n	1e442 <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e424:	4b27      	ldr	r3, [pc, #156]	; (1e4c4 <rtc_nrf_isr+0xdc>)
   1e426:	e8d3 1fef 	ldaex	r1, [r3]
   1e42a:	f021 0001 	bic.w	r0, r1, #1
   1e42e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   1e432:	2c00      	cmp	r4, #0
   1e434:	d1f7      	bne.n	1e426 <rtc_nrf_isr+0x3e>
   1e436:	4b24      	ldr	r3, [pc, #144]	; (1e4c8 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e438:	2900      	cmp	r1, #0
   1e43a:	d136      	bne.n	1e4aa <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e43c:	6819      	ldr	r1, [r3, #0]
		if (result) {
   1e43e:	2900      	cmp	r1, #0
   1e440:	d133      	bne.n	1e4aa <rtc_nrf_isr+0xc2>
{
   1e442:	2300      	movs	r3, #0
	__asm__ volatile(
   1e444:	f382 8811 	msr	BASEPRI, r2
   1e448:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1e44c:	b353      	cbz	r3, 1e4a4 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
   1e44e:	f7ff fec7 	bl	1e1e0 <z_nrf_rtc_timer_read>
   1e452:	4604      	mov	r4, r0
	__asm__ volatile(
   1e454:	f04f 0320 	mov.w	r3, #32
   1e458:	f3ef 8011 	mrs	r0, BASEPRI
   1e45c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e460:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e464:	4b19      	ldr	r3, [pc, #100]	; (1e4cc <rtc_nrf_isr+0xe4>)
   1e466:	2200      	movs	r2, #0
   1e468:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1e46c:	4549      	cmp	r1, r9
   1e46e:	bf08      	it	eq
   1e470:	4544      	cmpeq	r4, r8
   1e472:	d31f      	bcc.n	1e4b4 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
   1e474:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e478:	f04f 34ff 	mov.w	r4, #4294967295
   1e47c:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
   1e480:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e482:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e486:	e9c3 4502 	strd	r4, r5, [r3, #8]
   1e48a:	4b0b      	ldr	r3, [pc, #44]	; (1e4b8 <rtc_nrf_isr+0xd0>)
   1e48c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   1e490:	f380 8811 	msr	BASEPRI, r0
   1e494:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e498:	b121      	cbz	r1, 1e4a4 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
   1e49a:	4642      	mov	r2, r8
   1e49c:	464b      	mov	r3, r9
   1e49e:	2000      	movs	r0, #0
   1e4a0:	9600      	str	r6, [sp, #0]
   1e4a2:	4788      	blx	r1
}
   1e4a4:	b002      	add	sp, #8
   1e4a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e4aa:	2100      	movs	r1, #0
   1e4ac:	6019      	str	r1, [r3, #0]
   1e4ae:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e4b0:	2301      	movs	r3, #1
}
   1e4b2:	e7c7      	b.n	1e444 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e4b4:	4611      	mov	r1, r2
   1e4b6:	e7eb      	b.n	1e490 <rtc_nrf_isr+0xa8>
   1e4b8:	40015000 	.word	0x40015000
   1e4bc:	40015104 	.word	0x40015104
   1e4c0:	2000cf44 	.word	0x2000cf44
   1e4c4:	2000cf3c 	.word	0x2000cf3c
   1e4c8:	40015140 	.word	0x40015140
   1e4cc:	2000cad8 	.word	0x2000cad8

0001e4d0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e4d0:	4b14      	ldr	r3, [pc, #80]	; (1e524 <sys_clock_set_timeout+0x54>)
{
   1e4d2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e4d4:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e4d8:	bf08      	it	eq
   1e4da:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e4dc:	1e44      	subs	r4, r0, #1
   1e4de:	2c00      	cmp	r4, #0
   1e4e0:	dd1d      	ble.n	1e51e <sys_clock_set_timeout+0x4e>
   1e4e2:	429c      	cmp	r4, r3
   1e4e4:	bfa8      	it	ge
   1e4e6:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e4e8:	f7ff fe7a 	bl	1e1e0 <z_nrf_rtc_timer_read>
   1e4ec:	4b0e      	ldr	r3, [pc, #56]	; (1e528 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e4ee:	490f      	ldr	r1, [pc, #60]	; (1e52c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e4f4:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1e4f6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e4fa:	bf28      	it	cs
   1e4fc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e4fe:	3001      	adds	r0, #1
   1e500:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1e502:	4808      	ldr	r0, [pc, #32]	; (1e524 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e504:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1e506:	4284      	cmp	r4, r0
   1e508:	bf28      	it	cs
   1e50a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e50c:	2000      	movs	r0, #0
   1e50e:	1912      	adds	r2, r2, r4
   1e510:	9001      	str	r0, [sp, #4]
   1e512:	f143 0300 	adc.w	r3, r3, #0
   1e516:	f7ff fe85 	bl	1e224 <compare_set>
}
   1e51a:	b002      	add	sp, #8
   1e51c:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e51e:	2400      	movs	r4, #0
   1e520:	e7e2      	b.n	1e4e8 <sys_clock_set_timeout+0x18>
   1e522:	bf00      	nop
   1e524:	007fffff 	.word	0x007fffff
   1e528:	2000cae8 	.word	0x2000cae8
   1e52c:	0001e0d9 	.word	0x0001e0d9

0001e530 <sys_clock_elapsed>:
{
   1e530:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e532:	f7ff fe55 	bl	1e1e0 <z_nrf_rtc_timer_read>
   1e536:	4b02      	ldr	r3, [pc, #8]	; (1e540 <sys_clock_elapsed+0x10>)
   1e538:	681b      	ldr	r3, [r3, #0]
}
   1e53a:	1ac0      	subs	r0, r0, r3
   1e53c:	bd08      	pop	{r3, pc}
   1e53e:	bf00      	nop
   1e540:	2000cae8 	.word	0x2000cae8

0001e544 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   1e544:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   1e546:	4d19      	ldr	r5, [pc, #100]	; (1e5ac <_nrf_modem_lib_init+0x68>)
   1e548:	4c19      	ldr	r4, [pc, #100]	; (1e5b0 <_nrf_modem_lib_init+0x6c>)
   1e54a:	782b      	ldrb	r3, [r5, #0]
   1e54c:	b933      	cbnz	r3, 1e55c <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1e54e:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1e552:	4818      	ldr	r0, [pc, #96]	; (1e5b4 <_nrf_modem_lib_init+0x70>)
   1e554:	f00e fa1d 	bl	2c992 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1e558:	2301      	movs	r3, #1
   1e55a:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   1e55c:	2200      	movs	r2, #0
   1e55e:	202a      	movs	r0, #42	; 0x2a
   1e560:	4611      	mov	r1, r2
   1e562:	f7fd fde9 	bl	1c138 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   1e566:	2100      	movs	r1, #0
   1e568:	4813      	ldr	r0, [pc, #76]	; (1e5b8 <_nrf_modem_lib_init+0x74>)
   1e56a:	f007 f9e3 	bl	25934 <nrf_modem_init>
   1e56e:	4b13      	ldr	r3, [pc, #76]	; (1e5bc <_nrf_modem_lib_init+0x78>)
   1e570:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1e572:	f04f 32ff 	mov.w	r2, #4294967295
   1e576:	f04f 33ff 	mov.w	r3, #4294967295
   1e57a:	480e      	ldr	r0, [pc, #56]	; (1e5b4 <_nrf_modem_lib_init+0x70>)
   1e57c:	f007 fe06 	bl	2618c <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1e580:	6820      	ldr	r0, [r4, #0]
   1e582:	b170      	cbz	r0, 1e5a2 <_nrf_modem_lib_init+0x5e>
	return node->next;
   1e584:	6804      	ldr	r4, [r0, #0]
   1e586:	2c00      	cmp	r4, #0
   1e588:	bf38      	it	cc
   1e58a:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   1e58c:	3004      	adds	r0, #4
   1e58e:	f008 f855 	bl	2663c <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1e592:	b134      	cbz	r4, 1e5a2 <_nrf_modem_lib_init+0x5e>
   1e594:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e596:	4620      	mov	r0, r4
   1e598:	2b00      	cmp	r3, #0
   1e59a:	bf38      	it	cc
   1e59c:	2300      	movcc	r3, #0
   1e59e:	461c      	mov	r4, r3
   1e5a0:	e7f4      	b.n	1e58c <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   1e5a2:	4804      	ldr	r0, [pc, #16]	; (1e5b4 <_nrf_modem_lib_init+0x70>)
   1e5a4:	f007 feca 	bl	2633c <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1e5a8:	2000      	movs	r0, #0
   1e5aa:	bd38      	pop	{r3, r4, r5, pc}
   1e5ac:	2000d4cc 	.word	0x2000d4cc
   1e5b0:	2000cf4c 	.word	0x2000cf4c
   1e5b4:	2000cf54 	.word	0x2000cf54
   1e5b8:	0002df64 	.word	0x0002df64
   1e5bc:	2000cf48 	.word	0x2000cf48

0001e5c0 <nrf_modem_lib_init>:
	k_mutex_unlock(&slist_mutex);
}

int nrf_modem_lib_init(enum nrf_modem_mode_t mode)
{
	if (mode == NORMAL_MODE) {
   1e5c0:	b908      	cbnz	r0, 1e5c6 <nrf_modem_lib_init+0x6>
		return _nrf_modem_lib_init(NULL);
   1e5c2:	f7ff bfbf 	b.w	1e544 <_nrf_modem_lib_init>
	} else {
		return nrf_modem_init(&init_params, FULL_DFU_MODE);
   1e5c6:	2101      	movs	r1, #1
   1e5c8:	4801      	ldr	r0, [pc, #4]	; (1e5d0 <nrf_modem_lib_init+0x10>)
   1e5ca:	f007 b9b3 	b.w	25934 <nrf_modem_init>
   1e5ce:	bf00      	nop
   1e5d0:	0002df64 	.word	0x0002df64

0001e5d4 <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   1e5d4:	4b01      	ldr	r3, [pc, #4]	; (1e5dc <nrf_modem_lib_get_init_ret+0x8>)
   1e5d6:	6818      	ldr	r0, [r3, #0]
   1e5d8:	4770      	bx	lr
   1e5da:	bf00      	nop
   1e5dc:	2000cf48 	.word	0x2000cf48

0001e5e0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   1e5e0:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1e5e2:	4c0d      	ldr	r4, [pc, #52]	; (1e618 <thread_monitor_entry_get+0x38>)
{
   1e5e4:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1e5e6:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1e5e8:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1e5ea:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   1e5ec:	4b0b      	ldr	r3, [pc, #44]	; (1e61c <thread_monitor_entry_get+0x3c>)
   1e5ee:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   1e5f0:	6801      	ldr	r1, [r0, #0]
   1e5f2:	4291      	cmp	r1, r2
   1e5f4:	d00e      	beq.n	1e614 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1e5f6:	b151      	cbz	r1, 1e60e <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   1e5f8:	6841      	ldr	r1, [r0, #4]
   1e5fa:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   1e5fc:	42b1      	cmp	r1, r6
   1e5fe:	bfc4      	itt	gt
   1e600:	4604      	movgt	r4, r0
   1e602:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e604:	3d01      	subs	r5, #1
   1e606:	f100 0008 	add.w	r0, r0, #8
   1e60a:	d1f1      	bne.n	1e5f0 <thread_monitor_entry_get+0x10>
   1e60c:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   1e60e:	3b01      	subs	r3, #1
	new_entry->id = id;
   1e610:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1e612:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1e614:	bd70      	pop	{r4, r5, r6, pc}
   1e616:	bf00      	nop
   1e618:	2000cfdc 	.word	0x2000cfdc
   1e61c:	2000cfb4 	.word	0x2000cfb4

0001e620 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1e620:	4668      	mov	r0, sp
   1e622:	f020 0107 	bic.w	r1, r0, #7
   1e626:	468d      	mov	sp, r1
   1e628:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e62a:	4b0f      	ldr	r3, [pc, #60]	; (1e668 <rpc_proxy_irq_handler+0x48>)
   1e62c:	e8d3 2fef 	ldaex	r2, [r3]
   1e630:	3201      	adds	r2, #1
   1e632:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e636:	2900      	cmp	r1, #0
   1e638:	d1f8      	bne.n	1e62c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   1e63a:	f004 fe41 	bl	232c0 <nrf_modem_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1e63e:	4b0b      	ldr	r3, [pc, #44]	; (1e66c <rpc_proxy_irq_handler+0x4c>)
   1e640:	681c      	ldr	r4, [r3, #0]
   1e642:	2c00      	cmp	r4, #0
   1e644:	bf38      	it	cc
   1e646:	2400      	movcc	r4, #0
   1e648:	b12c      	cbz	r4, 1e656 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   1e64a:	1d20      	adds	r0, r4, #4
   1e64c:	f007 fff6 	bl	2663c <z_impl_k_sem_give>
   1e650:	6824      	ldr	r4, [r4, #0]
   1e652:	2c00      	cmp	r4, #0
   1e654:	d1f8      	bne.n	1e648 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1e656:	f7fd fd95 	bl	1c184 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1e65a:	f7fd fe67 	bl	1c32c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1e65e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1e662:	4685      	mov	sp, r0
   1e664:	4770      	bx	lr
   1e666:	bf00      	nop
   1e668:	2000cfb4 	.word	0x2000cfb4
   1e66c:	2000cfd4 	.word	0x2000cfd4

0001e670 <nrf_modem_os_timedwait>:
{
   1e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e674:	460c      	mov	r4, r1
   1e676:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1e678:	f00e f9fd 	bl	2ca76 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1e67c:	6823      	ldr	r3, [r4, #0]
   1e67e:	4680      	mov	r8, r0
   1e680:	2b00      	cmp	r3, #0
   1e682:	468a      	mov	sl, r1
   1e684:	d103      	bne.n	1e68e <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   1e686:	f009 f961 	bl	2794c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1e68a:	2074      	movs	r0, #116	; 0x74
   1e68c:	e091      	b.n	1e7b2 <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   1e68e:	bfbc      	itt	lt
   1e690:	f04f 33ff 	movlt.w	r3, #4294967295
   1e694:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e696:	2201      	movs	r2, #1
   1e698:	2100      	movs	r1, #0
   1e69a:	a802      	add	r0, sp, #8
   1e69c:	f00e f997 	bl	2c9ce <z_impl_k_sem_init>
   1e6a0:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   1e6a2:	f04f 0320 	mov.w	r3, #32
   1e6a6:	f3ef 8b11 	mrs	fp, BASEPRI
   1e6aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6ae:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e6b2:	f009 fa8f 	bl	27bd4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1e6b6:	f7ff ff93 	bl	1e5e0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1e6ba:	4947      	ldr	r1, [pc, #284]	; (1e7d8 <nrf_modem_os_timedwait+0x168>)
   1e6bc:	6843      	ldr	r3, [r0, #4]
   1e6be:	680a      	ldr	r2, [r1, #0]
   1e6c0:	4689      	mov	r9, r1
   1e6c2:	4293      	cmp	r3, r2
   1e6c4:	f04f 0300 	mov.w	r3, #0
   1e6c8:	d108      	bne.n	1e6dc <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   1e6ca:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   1e6cc:	4b43      	ldr	r3, [pc, #268]	; (1e7dc <nrf_modem_os_timedwait+0x16c>)
   1e6ce:	685a      	ldr	r2, [r3, #4]
   1e6d0:	2a00      	cmp	r2, #0
   1e6d2:	d171      	bne.n	1e7b8 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   1e6d4:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   1e6d8:	2301      	movs	r3, #1
}
   1e6da:	e000      	b.n	1e6de <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   1e6dc:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1e6de:	f38b 8811 	msr	BASEPRI, fp
   1e6e2:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1e6e6:	2b00      	cmp	r3, #0
   1e6e8:	d062      	beq.n	1e7b0 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1e6ea:	6823      	ldr	r3, [r4, #0]
   1e6ec:	1c5a      	adds	r2, r3, #1
   1e6ee:	d066      	beq.n	1e7be <nrf_modem_os_timedwait+0x14e>
   1e6f0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1e6f4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e6f8:	2100      	movs	r1, #0
   1e6fa:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1e6fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e702:	2300      	movs	r3, #0
   1e704:	fbce 010c 	smlal	r0, r1, lr, ip
   1e708:	f7fa fcca 	bl	190a0 <__aeabi_uldivmod>
   1e70c:	4602      	mov	r2, r0
   1e70e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e710:	a802      	add	r0, sp, #8
   1e712:	f007 ffcd 	bl	266b0 <z_impl_k_sem_take>
	__asm__ volatile(
   1e716:	f04f 0320 	mov.w	r3, #32
   1e71a:	f3ef 8b11 	mrs	fp, BASEPRI
   1e71e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e722:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e726:	2000      	movs	r0, #0
   1e728:	4b2c      	ldr	r3, [pc, #176]	; (1e7dc <nrf_modem_os_timedwait+0x16c>)
   1e72a:	681a      	ldr	r2, [r3, #0]
   1e72c:	b15a      	cbz	r2, 1e746 <nrf_modem_os_timedwait+0xd6>
   1e72e:	42aa      	cmp	r2, r5
   1e730:	d14f      	bne.n	1e7d2 <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   1e732:	9d01      	ldr	r5, [sp, #4]
   1e734:	2800      	cmp	r0, #0
   1e736:	d146      	bne.n	1e7c6 <nrf_modem_os_timedwait+0x156>
   1e738:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   1e73a:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e73c:	4291      	cmp	r1, r2
   1e73e:	d100      	bne.n	1e742 <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   1e740:	605d      	str	r5, [r3, #4]
	parent->next = child;
   1e742:	2300      	movs	r3, #0
   1e744:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1e746:	f009 fa45 	bl	27bd4 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1e74a:	f7ff ff49 	bl	1e5e0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1e74e:	f8d9 3000 	ldr.w	r3, [r9]
   1e752:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1e754:	f38b 8811 	msr	BASEPRI, fp
   1e758:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1e75c:	6825      	ldr	r5, [r4, #0]
   1e75e:	1c6b      	adds	r3, r5, #1
   1e760:	d026      	beq.n	1e7b0 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   1e762:	f00e f988 	bl	2ca76 <z_impl_k_uptime_ticks>
   1e766:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1e76a:	468e      	mov	lr, r1
   1e76c:	fba8 890c 	umull	r8, r9, r8, ip
   1e770:	fba0 010c 	umull	r0, r1, r0, ip
   1e774:	fb0c 990a 	mla	r9, ip, sl, r9
   1e778:	fb0c 110e 	mla	r1, ip, lr, r1
   1e77c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1e780:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1e784:	1952      	adds	r2, r2, r5
   1e786:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1e78a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   1e78e:	0bc5      	lsrs	r5, r0, #15
   1e790:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1e794:	1b56      	subs	r6, r2, r5
   1e796:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   1e79a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   1e79e:	2e00      	cmp	r6, #0
   1e7a0:	f177 0300 	sbcs.w	r3, r7, #0
   1e7a4:	bfb8      	it	lt
   1e7a6:	2600      	movlt	r6, #0
   1e7a8:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   1e7aa:	2e00      	cmp	r6, #0
   1e7ac:	f43f af6d 	beq.w	1e68a <nrf_modem_os_timedwait+0x1a>
	return 0;
   1e7b0:	2000      	movs	r0, #0
}
   1e7b2:	b009      	add	sp, #36	; 0x24
   1e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7b8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1e7ba:	605d      	str	r5, [r3, #4]
   1e7bc:	e78c      	b.n	1e6d8 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1e7be:	f04f 32ff 	mov.w	r2, #4294967295
   1e7c2:	4613      	mov	r3, r2
   1e7c4:	e7a4      	b.n	1e710 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   1e7c6:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e7c8:	6859      	ldr	r1, [r3, #4]
   1e7ca:	4291      	cmp	r1, r2
	list->tail = node;
   1e7cc:	bf08      	it	eq
   1e7ce:	6058      	streq	r0, [r3, #4]
}
   1e7d0:	e7b7      	b.n	1e742 <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e7d2:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e7d4:	6812      	ldr	r2, [r2, #0]
   1e7d6:	e7a9      	b.n	1e72c <nrf_modem_os_timedwait+0xbc>
   1e7d8:	2000cfb4 	.word	0x2000cfb4
   1e7dc:	2000cfd4 	.word	0x2000cfd4

0001e7e0 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1e7e0:	6803      	ldr	r3, [r0, #0]
{
   1e7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7e6:	4604      	mov	r4, r0
   1e7e8:	460f      	mov	r7, r1
   1e7ea:	4690      	mov	r8, r2
   1e7ec:	4d11      	ldr	r5, [pc, #68]	; (1e834 <nrf_modem_os_sem_init+0x54>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1e7ee:	b12b      	cbz	r3, 1e7fc <nrf_modem_os_sem_init+0x1c>
   1e7f0:	42ab      	cmp	r3, r5
   1e7f2:	d303      	bcc.n	1e7fc <nrf_modem_os_sem_init+0x1c>
   1e7f4:	f105 0248 	add.w	r2, r5, #72	; 0x48
   1e7f8:	4293      	cmp	r3, r2
   1e7fa:	d314      	bcc.n	1e826 <nrf_modem_os_sem_init+0x46>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   1e7fc:	4e0e      	ldr	r6, [pc, #56]	; (1e838 <nrf_modem_os_sem_init+0x58>)
   1e7fe:	7833      	ldrb	r3, [r6, #0]
   1e800:	2b02      	cmp	r3, #2
   1e802:	d908      	bls.n	1e816 <nrf_modem_os_sem_init+0x36>
   1e804:	490d      	ldr	r1, [pc, #52]	; (1e83c <nrf_modem_os_sem_init+0x5c>)
   1e806:	480e      	ldr	r0, [pc, #56]	; (1e840 <nrf_modem_os_sem_init+0x60>)
   1e808:	22f4      	movs	r2, #244	; 0xf4
   1e80a:	f00c f84b 	bl	2a8a4 <printk>
   1e80e:	21f4      	movs	r1, #244	; 0xf4
   1e810:	480a      	ldr	r0, [pc, #40]	; (1e83c <nrf_modem_os_sem_init+0x5c>)
   1e812:	f00c f9e0 	bl	2abd6 <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   1e816:	7833      	ldrb	r3, [r6, #0]
   1e818:	1c5a      	adds	r2, r3, #1
   1e81a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e81e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1e822:	7032      	strb	r2, [r6, #0]
   1e824:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1e826:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e828:	4642      	mov	r2, r8
   1e82a:	4639      	mov	r1, r7
}
   1e82c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e830:	f00e b8cd 	b.w	2c9ce <z_impl_k_sem_init>
   1e834:	2000cf6c 	.word	0x2000cf6c
   1e838:	2000d4cd 	.word	0x2000d4cd
   1e83c:	0002f2f0 	.word	0x0002f2f0
   1e840:	0002e574 	.word	0x0002e574

0001e844 <nrf_modem_os_sem_give>:
{
   1e844:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1e846:	4604      	mov	r4, r0
   1e848:	b128      	cbz	r0, 1e856 <nrf_modem_os_sem_give+0x12>
   1e84a:	4b0a      	ldr	r3, [pc, #40]	; (1e874 <nrf_modem_os_sem_give+0x30>)
   1e84c:	4298      	cmp	r0, r3
   1e84e:	d302      	bcc.n	1e856 <nrf_modem_os_sem_give+0x12>
   1e850:	3348      	adds	r3, #72	; 0x48
   1e852:	4298      	cmp	r0, r3
   1e854:	d308      	bcc.n	1e868 <nrf_modem_os_sem_give+0x24>
   1e856:	4908      	ldr	r1, [pc, #32]	; (1e878 <nrf_modem_os_sem_give+0x34>)
   1e858:	4808      	ldr	r0, [pc, #32]	; (1e87c <nrf_modem_os_sem_give+0x38>)
   1e85a:	22ff      	movs	r2, #255	; 0xff
   1e85c:	f00c f822 	bl	2a8a4 <printk>
   1e860:	21ff      	movs	r1, #255	; 0xff
   1e862:	4805      	ldr	r0, [pc, #20]	; (1e878 <nrf_modem_os_sem_give+0x34>)
   1e864:	f00c f9b7 	bl	2abd6 <assert_post_action>
	z_impl_k_sem_give(sem);
   1e868:	4620      	mov	r0, r4
}
   1e86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e86e:	f007 bee5 	b.w	2663c <z_impl_k_sem_give>
   1e872:	bf00      	nop
   1e874:	2000cf6c 	.word	0x2000cf6c
   1e878:	0002f2f0 	.word	0x0002f2f0
   1e87c:	0002e574 	.word	0x0002e574

0001e880 <nrf_modem_os_sem_take>:
{
   1e880:	b570      	push	{r4, r5, r6, lr}
   1e882:	460d      	mov	r5, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1e884:	4604      	mov	r4, r0
   1e886:	b128      	cbz	r0, 1e894 <nrf_modem_os_sem_take+0x14>
   1e888:	4b17      	ldr	r3, [pc, #92]	; (1e8e8 <nrf_modem_os_sem_take+0x68>)
   1e88a:	4298      	cmp	r0, r3
   1e88c:	d302      	bcc.n	1e894 <nrf_modem_os_sem_take+0x14>
   1e88e:	3348      	adds	r3, #72	; 0x48
   1e890:	4298      	cmp	r0, r3
   1e892:	d30a      	bcc.n	1e8aa <nrf_modem_os_sem_take+0x2a>
   1e894:	4915      	ldr	r1, [pc, #84]	; (1e8ec <nrf_modem_os_sem_take+0x6c>)
   1e896:	4816      	ldr	r0, [pc, #88]	; (1e8f0 <nrf_modem_os_sem_take+0x70>)
   1e898:	f240 1209 	movw	r2, #265	; 0x109
   1e89c:	f00c f802 	bl	2a8a4 <printk>
   1e8a0:	f240 1109 	movw	r1, #265	; 0x109
   1e8a4:	4811      	ldr	r0, [pc, #68]	; (1e8ec <nrf_modem_os_sem_take+0x6c>)
   1e8a6:	f00c f996 	bl	2abd6 <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1e8aa:	1c6b      	adds	r3, r5, #1
   1e8ac:	d018      	beq.n	1e8e0 <nrf_modem_os_sem_take+0x60>
   1e8ae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1e8b2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e8b6:	2100      	movs	r1, #0
   1e8b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1e8bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e8c0:	2300      	movs	r3, #0
   1e8c2:	fbc6 0105 	smlal	r0, r1, r6, r5
   1e8c6:	f7fa fbeb 	bl	190a0 <__aeabi_uldivmod>
   1e8ca:	4602      	mov	r2, r0
   1e8cc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e8ce:	4620      	mov	r0, r4
   1e8d0:	f007 feee 	bl	266b0 <z_impl_k_sem_take>
		return NRF_ETIMEDOUT;
   1e8d4:	f110 0f0b 	cmn.w	r0, #11
}
   1e8d8:	bf0c      	ite	eq
   1e8da:	2074      	moveq	r0, #116	; 0x74
   1e8dc:	2000      	movne	r0, #0
   1e8de:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1e8e0:	f04f 32ff 	mov.w	r2, #4294967295
   1e8e4:	4613      	mov	r3, r2
   1e8e6:	e7f2      	b.n	1e8ce <nrf_modem_os_sem_take+0x4e>
   1e8e8:	2000cf6c 	.word	0x2000cf6c
   1e8ec:	0002f2f0 	.word	0x0002f2f0
   1e8f0:	0002e574 	.word	0x0002e574

0001e8f4 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e8f8:	4b01      	ldr	r3, [pc, #4]	; (1e900 <nrf_modem_os_application_irq_set+0xc>)
   1e8fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1e8fe:	4770      	bx	lr
   1e900:	e000e100 	.word	0xe000e100

0001e904 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e908:	4b01      	ldr	r3, [pc, #4]	; (1e910 <nrf_modem_os_application_irq_clear+0xc>)
   1e90a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1e90e:	4770      	bx	lr
   1e910:	e000e100 	.word	0xe000e100

0001e914 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e914:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1e918:	4b01      	ldr	r3, [pc, #4]	; (1e920 <nrf_modem_os_trace_irq_set+0xc>)
   1e91a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1e91e:	4770      	bx	lr
   1e920:	e000e100 	.word	0xe000e100

0001e924 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e924:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1e928:	4b01      	ldr	r3, [pc, #4]	; (1e930 <nrf_modem_os_trace_irq_clear+0xc>)
   1e92a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1e92e:	4770      	bx	lr
   1e930:	e000e100 	.word	0xe000e100

0001e934 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   1e934:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   1e936:	2200      	movs	r2, #0
   1e938:	2300      	movs	r3, #0
   1e93a:	4801      	ldr	r0, [pc, #4]	; (1e940 <nrf_modem_os_alloc+0xc>)
   1e93c:	f00e b80b 	b.w	2c956 <k_heap_alloc>
   1e940:	2000c980 	.word	0x2000c980

0001e944 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   1e944:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1e946:	4801      	ldr	r0, [pc, #4]	; (1e94c <nrf_modem_os_free+0x8>)
   1e948:	f007 ba44 	b.w	25dd4 <k_heap_free>
   1e94c:	2000c980 	.word	0x2000c980

0001e950 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   1e950:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   1e952:	2200      	movs	r2, #0
   1e954:	2300      	movs	r3, #0
   1e956:	4801      	ldr	r0, [pc, #4]	; (1e95c <nrf_modem_os_shm_tx_alloc+0xc>)
   1e958:	f00d bffd 	b.w	2c956 <k_heap_alloc>
   1e95c:	2000cfbc 	.word	0x2000cfbc

0001e960 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   1e960:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   1e962:	4801      	ldr	r0, [pc, #4]	; (1e968 <nrf_modem_os_shm_tx_free+0x8>)
   1e964:	f007 ba36 	b.w	25dd4 <k_heap_free>
   1e968:	2000cfbc 	.word	0x2000cfbc

0001e96c <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   1e96c:	b510      	push	{r4, lr}
	list->head = NULL;
   1e96e:	2400      	movs	r4, #0
   1e970:	4b0b      	ldr	r3, [pc, #44]	; (1e9a0 <nrf_modem_os_init+0x34>)
	list->tail = NULL;
   1e972:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e976:	4b0b      	ldr	r3, [pc, #44]	; (1e9a4 <nrf_modem_os_init+0x38>)
   1e978:	e8d3 2fef 	ldaex	r2, [r3]
   1e97c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1e980:	2900      	cmp	r1, #0
   1e982:	d1f9      	bne.n	1e978 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1e984:	f00c fba3 	bl	2b0ce <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1e988:	4b07      	ldr	r3, [pc, #28]	; (1e9a8 <nrf_modem_os_init+0x3c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   1e98a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1e98e:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1e990:	4b06      	ldr	r3, [pc, #24]	; (1e9ac <nrf_modem_os_init+0x40>)
	k_heap_init(&shmem_heap,
   1e992:	4907      	ldr	r1, [pc, #28]	; (1e9b0 <nrf_modem_os_init+0x44>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1e994:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   1e996:	4807      	ldr	r0, [pc, #28]	; (1e9b4 <nrf_modem_os_init+0x48>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   1e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   1e99c:	f00d bfd3 	b.w	2c946 <k_heap_init>
   1e9a0:	2000cfd4 	.word	0x2000cfd4
   1e9a4:	2000cfb4 	.word	0x2000cfb4
   1e9a8:	2000cf68 	.word	0x2000cf68
   1e9ac:	2000cfb8 	.word	0x2000cfb8
   1e9b0:	200084e8 	.word	0x200084e8
   1e9b4:	2000cfbc 	.word	0x2000cfbc

0001e9b8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1e9b8:	2801      	cmp	r0, #1
   1e9ba:	d021      	beq.n	1ea00 <z_to_nrf_optname+0x48>
   1e9bc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1e9c0:	d126      	bne.n	1ea10 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   1e9c2:	3901      	subs	r1, #1
   1e9c4:	290b      	cmp	r1, #11
   1e9c6:	d823      	bhi.n	1ea10 <z_to_nrf_optname+0x58>
   1e9c8:	e8df f001 	tbb	[pc, r1]
   1e9cc:	0e0c0a06 	.word	0x0e0c0a06
   1e9d0:	22221210 	.word	0x22221210
   1e9d4:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   1e9d8:	2302      	movs	r3, #2
	int retval = 0;
   1e9da:	2000      	movs	r0, #0
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1e9dc:	6013      	str	r3, [r2, #0]
			break;
   1e9de:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1e9e0:	2305      	movs	r3, #5
   1e9e2:	e7fa      	b.n	1e9da <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   1e9e4:	2306      	movs	r3, #6
   1e9e6:	e7f8      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   1e9e8:	2307      	movs	r3, #7
   1e9ea:	e7f6      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1e9ec:	2304      	movs	r3, #4
   1e9ee:	e7f4      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1e9f0:	2301      	movs	r3, #1
   1e9f2:	e7f2      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   1e9f4:	2303      	movs	r3, #3
   1e9f6:	e7f0      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   1e9f8:	2309      	movs	r3, #9
   1e9fa:	e7ee      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   1e9fc:	2308      	movs	r3, #8
   1e9fe:	e7ec      	b.n	1e9da <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1ea00:	2937      	cmp	r1, #55	; 0x37
   1ea02:	dc05      	bgt.n	1ea10 <z_to_nrf_optname+0x58>
   1ea04:	2913      	cmp	r1, #19
   1ea06:	dc06      	bgt.n	1ea16 <z_to_nrf_optname+0x5e>
   1ea08:	2902      	cmp	r1, #2
   1ea0a:	d059      	beq.n	1eac0 <z_to_nrf_optname+0x108>
   1ea0c:	2904      	cmp	r1, #4
   1ea0e:	d0ed      	beq.n	1e9ec <z_to_nrf_optname+0x34>
   1ea10:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   1ea14:	4770      	bx	lr
   1ea16:	3914      	subs	r1, #20
   1ea18:	2923      	cmp	r1, #35	; 0x23
   1ea1a:	d8f9      	bhi.n	1ea10 <z_to_nrf_optname+0x58>
   1ea1c:	a301      	add	r3, pc, #4	; (adr r3, 1ea24 <z_to_nrf_optname+0x6c>)
   1ea1e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1ea22:	bf00      	nop
   1ea24:	0001eab5 	.word	0x0001eab5
   1ea28:	0001eab9 	.word	0x0001eab9
   1ea2c:	0001ea11 	.word	0x0001ea11
   1ea30:	0001ea11 	.word	0x0001ea11
   1ea34:	0001ea11 	.word	0x0001ea11
   1ea38:	0001eabd 	.word	0x0001eabd
   1ea3c:	0001ea11 	.word	0x0001ea11
   1ea40:	0001ea11 	.word	0x0001ea11
   1ea44:	0001ea11 	.word	0x0001ea11
   1ea48:	0001ea11 	.word	0x0001ea11
   1ea4c:	0001eac5 	.word	0x0001eac5
   1ea50:	0001eac9 	.word	0x0001eac9
   1ea54:	0001eacd 	.word	0x0001eacd
   1ea58:	0001ea11 	.word	0x0001ea11
   1ea5c:	0001ea11 	.word	0x0001ea11
   1ea60:	0001ea11 	.word	0x0001ea11
   1ea64:	0001ea11 	.word	0x0001ea11
   1ea68:	0001ea11 	.word	0x0001ea11
   1ea6c:	0001ea11 	.word	0x0001ea11
   1ea70:	0001ea11 	.word	0x0001ea11
   1ea74:	0001ea11 	.word	0x0001ea11
   1ea78:	0001ea11 	.word	0x0001ea11
   1ea7c:	0001ea11 	.word	0x0001ea11
   1ea80:	0001ea11 	.word	0x0001ea11
   1ea84:	0001ea11 	.word	0x0001ea11
   1ea88:	0001ea11 	.word	0x0001ea11
   1ea8c:	0001ea11 	.word	0x0001ea11
   1ea90:	0001ea11 	.word	0x0001ea11
   1ea94:	0001ea11 	.word	0x0001ea11
   1ea98:	0001ea11 	.word	0x0001ea11
   1ea9c:	0001ead5 	.word	0x0001ead5
   1eaa0:	0001ead9 	.word	0x0001ead9
   1eaa4:	0001eadd 	.word	0x0001eadd
   1eaa8:	0001eae1 	.word	0x0001eae1
   1eaac:	0001eae5 	.word	0x0001eae5
   1eab0:	0001ead1 	.word	0x0001ead1
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1eab4:	2314      	movs	r3, #20
   1eab6:	e790      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   1eab8:	2315      	movs	r3, #21
   1eaba:	e78e      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1eabc:	2319      	movs	r3, #25
   1eabe:	e78c      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   1eac0:	2328      	movs	r3, #40	; 0x28
   1eac2:	e78a      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   1eac4:	231e      	movs	r3, #30
   1eac6:	e788      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   1eac8:	231f      	movs	r3, #31
   1eaca:	e786      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   1eacc:	2320      	movs	r3, #32
   1eace:	e784      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   1ead0:	2337      	movs	r3, #55	; 0x37
   1ead2:	e782      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   1ead4:	2332      	movs	r3, #50	; 0x32
   1ead6:	e780      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   1ead8:	2333      	movs	r3, #51	; 0x33
   1eada:	e77e      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   1eadc:	2334      	movs	r3, #52	; 0x34
   1eade:	e77c      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   1eae0:	2335      	movs	r3, #53	; 0x35
   1eae2:	e77a      	b.n	1e9da <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   1eae4:	2336      	movs	r3, #54	; 0x36
   1eae6:	e778      	b.n	1e9da <z_to_nrf_optname+0x22>

0001eae8 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1eae8:	f04f 32ff 	mov.w	r2, #4294967295
   1eaec:	4b05      	ldr	r3, [pc, #20]	; (1eb04 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   1eaee:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1eaf0:	601a      	str	r2, [r3, #0]
   1eaf2:	609a      	str	r2, [r3, #8]
   1eaf4:	611a      	str	r2, [r3, #16]
   1eaf6:	619a      	str	r2, [r3, #24]
   1eaf8:	621a      	str	r2, [r3, #32]
   1eafa:	629a      	str	r2, [r3, #40]	; 0x28
   1eafc:	631a      	str	r2, [r3, #48]	; 0x30
   1eafe:	639a      	str	r2, [r3, #56]	; 0x38
}
   1eb00:	4770      	bx	lr
   1eb02:	bf00      	nop
   1eb04:	2000d030 	.word	0x2000d030

0001eb08 <nrf91_socket_offload_ioctl>:
{
   1eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb0c:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   1eb10:	b091      	sub	sp, #68	; 0x44
   1eb12:	2b03      	cmp	r3, #3
   1eb14:	d878      	bhi.n	1ec08 <nrf91_socket_offload_ioctl+0x100>
   1eb16:	e8df f003 	tbb	[pc, r3]
   1eb1a:	0295      	.short	0x0295
   1eb1c:	7308      	.short	0x7308
		return 0;
   1eb1e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   1eb22:	4620      	mov	r0, r4
   1eb24:	b011      	add	sp, #68	; 0x44
   1eb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   1eb2a:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   1eb2e:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1eb32:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   1eb34:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1eb38:	4668      	mov	r0, sp
   1eb3a:	2240      	movs	r2, #64	; 0x40
   1eb3c:	f00e f856 	bl	2cbec <memset>
	for (int i = 0; i < nfds; i++) {
   1eb40:	466e      	mov	r6, sp
   1eb42:	464d      	mov	r5, r9
   1eb44:	464f      	mov	r7, r9
	int retval = 0;
   1eb46:	4654      	mov	r4, sl
		tmp[i].events = 0;
   1eb48:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   1eb4a:	4940      	ldr	r1, [pc, #256]	; (1ec4c <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   1eb4c:	45d0      	cmp	r8, sl
   1eb4e:	dc32      	bgt.n	1ebb6 <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   1eb50:	2c00      	cmp	r4, #0
   1eb52:	dce6      	bgt.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1eb54:	465a      	mov	r2, fp
   1eb56:	4641      	mov	r1, r8
   1eb58:	4668      	mov	r0, sp
   1eb5a:	f00d feb6 	bl	2c8ca <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1eb5e:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1eb60:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   1eb62:	4598      	cmp	r8, r3
   1eb64:	dddd      	ble.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   1eb66:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   1eb6a:	2a00      	cmp	r2, #0
   1eb6c:	db20      	blt.n	1ebb0 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   1eb6e:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   1eb72:	88d2      	ldrh	r2, [r2, #6]
   1eb74:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   1eb76:	bf42      	ittt	mi
   1eb78:	88e9      	ldrhmi	r1, [r5, #6]
   1eb7a:	f041 0101 	orrmi.w	r1, r1, #1
   1eb7e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1eb80:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   1eb82:	bf42      	ittt	mi
   1eb84:	88e9      	ldrhmi	r1, [r5, #6]
   1eb86:	f041 0104 	orrmi.w	r1, r1, #4
   1eb8a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1eb8c:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   1eb8e:	bf42      	ittt	mi
   1eb90:	88e9      	ldrhmi	r1, [r5, #6]
   1eb92:	f041 0108 	orrmi.w	r1, r1, #8
   1eb96:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1eb98:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   1eb9a:	bf42      	ittt	mi
   1eb9c:	88e9      	ldrhmi	r1, [r5, #6]
   1eb9e:	f041 0120 	orrmi.w	r1, r1, #32
   1eba2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1eba4:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   1eba6:	bf42      	ittt	mi
   1eba8:	88ea      	ldrhmi	r2, [r5, #6]
   1ebaa:	f042 0210 	orrmi.w	r2, r2, #16
   1ebae:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1ebb0:	3301      	adds	r3, #1
   1ebb2:	3508      	adds	r5, #8
   1ebb4:	e7d5      	b.n	1eb62 <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   1ebb6:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1ebb8:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   1ebba:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   1ebbc:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1ebbe:	da05      	bge.n	1ebcc <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   1ebc0:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1ebc2:	f10a 0a01 	add.w	sl, sl, #1
   1ebc6:	3608      	adds	r6, #8
   1ebc8:	3708      	adds	r7, #8
   1ebca:	e7bf      	b.n	1eb4c <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   1ebcc:	2286      	movs	r2, #134	; 0x86
   1ebce:	f7fb fe15 	bl	1a7fc <z_get_fd_obj>
			if (obj != NULL) {
   1ebd2:	2300      	movs	r3, #0
   1ebd4:	491d      	ldr	r1, [pc, #116]	; (1ec4c <nrf91_socket_offload_ioctl+0x144>)
   1ebd6:	b178      	cbz	r0, 1ebf8 <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   1ebd8:	6802      	ldr	r2, [r0, #0]
   1ebda:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   1ebdc:	88b8      	ldrh	r0, [r7, #4]
   1ebde:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1ebe0:	bf42      	ittt	mi
   1ebe2:	88b2      	ldrhmi	r2, [r6, #4]
   1ebe4:	f042 0201 	orrmi.w	r2, r2, #1
   1ebe8:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1ebea:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   1ebec:	bf42      	ittt	mi
   1ebee:	88b2      	ldrhmi	r2, [r6, #4]
   1ebf0:	f042 0202 	orrmi.w	r2, r2, #2
   1ebf4:	80b2      	strhmi	r2, [r6, #4]
   1ebf6:	e7e4      	b.n	1ebc2 <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   1ebf8:	2220      	movs	r2, #32
				retval++;
   1ebfa:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1ebfc:	80fa      	strh	r2, [r7, #6]
				retval++;
   1ebfe:	e7ed      	b.n	1ebdc <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   1ec00:	6813      	ldr	r3, [r2, #0]
		return 0;
   1ec02:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   1ec04:	6043      	str	r3, [r0, #4]
		return 0;
   1ec06:	e78c      	b.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   1ec08:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   1ec0a:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   1ec0c:	d00b      	beq.n	1ec26 <nrf91_socket_offload_ioctl+0x11e>
   1ec0e:	2904      	cmp	r1, #4
   1ec10:	d111      	bne.n	1ec36 <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   1ec12:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1ec14:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1ec18:	d10d      	bne.n	1ec36 <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1ec1a:	2101      	movs	r1, #1
   1ec1c:	1392      	asrs	r2, r2, #14
   1ec1e:	f00d fe56 	bl	2c8ce <nrf_fcntl>
   1ec22:	4604      	mov	r4, r0
		break;
   1ec24:	e77d      	b.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1ec26:	2200      	movs	r2, #0
   1ec28:	2102      	movs	r1, #2
   1ec2a:	f00d fe50 	bl	2c8ce <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1ec2e:	0380      	lsls	r0, r0, #14
   1ec30:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   1ec34:	e775      	b.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   1ec36:	f00c f947 	bl	2aec8 <__errno>
   1ec3a:	2316      	movs	r3, #22
	return retval;
   1ec3c:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   1ec40:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1ec42:	e76e      	b.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   1ec44:	f06f 0411 	mvn.w	r4, #17
   1ec48:	e76b      	b.n	1eb22 <nrf91_socket_offload_ioctl+0x1a>
   1ec4a:	bf00      	nop
   1ec4c:	0002df90 	.word	0x0002df90

0001ec50 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1ec50:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1ec52:	4b03      	ldr	r3, [pc, #12]	; (1ec60 <nrf91_socket_iface_init+0x10>)
   1ec54:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1ec56:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ec58:	4802      	ldr	r0, [pc, #8]	; (1ec64 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1ec5a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ec5c:	f7fd b842 	b.w	1bce4 <socket_offload_dns_register>
   1ec60:	2000d02c 	.word	0x2000d02c
   1ec64:	0002df88 	.word	0x0002df88

0001ec68 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1ec68:	4b0c      	ldr	r3, [pc, #48]	; (1ec9c <nrf91_socket_is_supported+0x34>)
   1ec6a:	781b      	ldrb	r3, [r3, #0]
   1ec6c:	b98b      	cbnz	r3, 1ec92 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1ec6e:	4b0c      	ldr	r3, [pc, #48]	; (1eca0 <nrf91_socket_is_supported+0x38>)
   1ec70:	781b      	ldrb	r3, [r3, #0]
   1ec72:	b183      	cbz	r3, 1ec96 <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ec74:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   1ec78:	2b02      	cmp	r3, #2
   1ec7a:	d908      	bls.n	1ec8e <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1ec7c:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ec80:	2801      	cmp	r0, #1
   1ec82:	bf8c      	ite	hi
   1ec84:	2000      	movhi	r0, #0
   1ec86:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1ec88:	f080 0001 	eor.w	r0, r0, #1
   1ec8c:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ec8e:	2001      	movs	r0, #1
   1ec90:	e7fa      	b.n	1ec88 <nrf91_socket_is_supported+0x20>
		return false;
   1ec92:	2000      	movs	r0, #0
   1ec94:	4770      	bx	lr
	return true;
   1ec96:	2001      	movs	r0, #1
}
   1ec98:	4770      	bx	lr
   1ec9a:	bf00      	nop
   1ec9c:	2000d54e 	.word	0x2000d54e
   1eca0:	2000d54f 	.word	0x2000d54f

0001eca4 <nrf91_socket_offload_getaddrinfo>:
{
   1eca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct nrf_addrinfo *nrf_res = NULL;
   1eca8:	f04f 0800 	mov.w	r8, #0
{
   1ecac:	4614      	mov	r4, r2
   1ecae:	b08a      	sub	sp, #40	; 0x28
   1ecb0:	4605      	mov	r5, r0
   1ecb2:	460e      	mov	r6, r1
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ecb4:	2220      	movs	r2, #32
   1ecb6:	4641      	mov	r1, r8
   1ecb8:	a802      	add	r0, sp, #8
{
   1ecba:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1ecbc:	f8cd 8004 	str.w	r8, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ecc0:	f00d ff94 	bl	2cbec <memset>
	if (hints != NULL) {
   1ecc4:	b324      	cbz	r4, 1ed10 <nrf91_socket_offload_getaddrinfo+0x6c>
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1ecc6:	221c      	movs	r2, #28
   1ecc8:	4641      	mov	r1, r8
   1ecca:	a803      	add	r0, sp, #12
   1eccc:	f00d ff8e 	bl	2cbec <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1ecd0:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   1ecd2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   1ecd6:	04d0      	lsls	r0, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   1ecd8:	bf48      	it	mi
   1ecda:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1ecde:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1ece0:	68e3      	ldr	r3, [r4, #12]
   1ece2:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   1ece4:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   1ece6:	2b03      	cmp	r3, #3
   1ece8:	f200 80e5 	bhi.w	1eeb6 <nrf91_socket_offload_getaddrinfo+0x212>
   1ecec:	4a75      	ldr	r2, [pc, #468]	; (1eec4 <nrf91_socket_offload_getaddrinfo+0x220>)
   1ecee:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   1ecf0:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   1ecf4:	f000 80df 	beq.w	1eeb6 <nrf91_socket_offload_getaddrinfo+0x212>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ecf8:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   1ecfa:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ecfc:	f00c fa06 	bl	2b10c <z_to_nrf_protocol>
   1ed00:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1ed02:	307b      	adds	r0, #123	; 0x7b
   1ed04:	f000 80da 	beq.w	1eebc <nrf91_socket_offload_getaddrinfo+0x218>
	if (z_in->ai_canonname != NULL) {
   1ed08:	69e3      	ldr	r3, [r4, #28]
   1ed0a:	b103      	cbz	r3, 1ed0e <nrf91_socket_offload_getaddrinfo+0x6a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1ed0c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1ed0e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1ed10:	f04f 32ff 	mov.w	r2, #4294967295
   1ed14:	f04f 33ff 	mov.w	r3, #4294967295
   1ed18:	486b      	ldr	r0, [pc, #428]	; (1eec8 <nrf91_socket_offload_getaddrinfo+0x224>)
   1ed1a:	f00c fb20 	bl	2b35e <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1ed1e:	4622      	mov	r2, r4
   1ed20:	4631      	mov	r1, r6
   1ed22:	4628      	mov	r0, r5
   1ed24:	ab01      	add	r3, sp, #4
   1ed26:	f00d fdcc 	bl	2c8c2 <nrf_getaddrinfo>
	if (retval != 0) {
   1ed2a:	4604      	mov	r4, r0
   1ed2c:	2800      	cmp	r0, #0
   1ed2e:	d043      	beq.n	1edb8 <nrf91_socket_offload_getaddrinfo+0x114>
	switch (nrf_gai_err) {
   1ed30:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1ed34:	440c      	add	r4, r1
   1ed36:	2c14      	cmp	r4, #20
   1ed38:	d830      	bhi.n	1ed9c <nrf91_socket_offload_getaddrinfo+0xf8>
   1ed3a:	e8df f004 	tbb	[pc, r4]
   1ed3e:	0bb9      	.short	0x0bb9
   1ed40:	2f2f143a 	.word	0x2f2f143a
   1ed44:	2f2f2f2f 	.word	0x2f2f2f2f
   1ed48:	172f2f2f 	.word	0x172f2f2f
   1ed4c:	23201d1a 	.word	0x23201d1a
   1ed50:	2926      	.short	0x2926
   1ed52:	2c          	.byte	0x2c
   1ed53:	00          	.byte	0x00
	if (retval != 0) {
   1ed54:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   1ed58:	485b      	ldr	r0, [pc, #364]	; (1eec8 <nrf91_socket_offload_getaddrinfo+0x224>)
   1ed5a:	f00c f9f2 	bl	2b142 <k_mutex_unlock>
}
   1ed5e:	4620      	mov	r0, r4
   1ed60:	b00a      	add	sp, #40	; 0x28
   1ed62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return DNS_EAI_FAIL;
   1ed66:	f06f 0403 	mvn.w	r4, #3
   1ed6a:	e7f5      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_FAMILY;
   1ed6c:	f06f 0405 	mvn.w	r4, #5
   1ed70:	e7f2      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_MEMORY;
   1ed72:	f06f 0409 	mvn.w	r4, #9
   1ed76:	e7ef      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_NODATA;
   1ed78:	f06f 0404 	mvn.w	r4, #4
   1ed7c:	e7ec      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_NONAME;
   1ed7e:	f06f 0401 	mvn.w	r4, #1
   1ed82:	e7e9      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_SERVICE;
   1ed84:	f06f 0407 	mvn.w	r4, #7
   1ed88:	e7e6      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_SOCKTYPE;
   1ed8a:	f06f 0406 	mvn.w	r4, #6
   1ed8e:	e7e3      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_INPROGRESS;
   1ed90:	f06f 0463 	mvn.w	r4, #99	; 0x63
   1ed94:	e7e0      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		return DNS_EAI_SYSTEM;
   1ed96:	f06f 040a 	mvn.w	r4, #10
   1ed9a:	e7dd      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   1ed9c:	494b      	ldr	r1, [pc, #300]	; (1eecc <nrf91_socket_offload_getaddrinfo+0x228>)
   1ed9e:	484c      	ldr	r0, [pc, #304]	; (1eed0 <nrf91_socket_offload_getaddrinfo+0x22c>)
   1eda0:	f240 12bd 	movw	r2, #445	; 0x1bd
   1eda4:	f00b fd7e 	bl	2a8a4 <printk>
   1eda8:	f240 11bd 	movw	r1, #445	; 0x1bd
   1edac:	4847      	ldr	r0, [pc, #284]	; (1eecc <nrf91_socket_offload_getaddrinfo+0x228>)
   1edae:	f00b ff12 	bl	2abd6 <assert_post_action>
		return -1;
   1edb2:	f04f 34ff 	mov.w	r4, #4294967295
   1edb6:	e7cf      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
	struct zsock_addrinfo *latest_z_res = NULL;
   1edb8:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1edba:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1edbc:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1edbe:	f8df a114 	ldr.w	sl, [pc, #276]	; 1eed4 <nrf91_socket_offload_getaddrinfo+0x230>
   1edc2:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1edc4:	b91e      	cbnz	r6, 1edce <nrf91_socket_offload_getaddrinfo+0x12a>
	nrf_freeaddrinfo(nrf_res);
   1edc6:	9801      	ldr	r0, [sp, #4]
   1edc8:	f00d fd7d 	bl	2c8c6 <nrf_freeaddrinfo>
   1edcc:	e7c4      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
					k_malloc(sizeof(struct zsock_addrinfo));
   1edce:	2050      	movs	r0, #80	; 0x50
   1edd0:	f00d feca 	bl	2cb68 <k_malloc>
		if (next_z_res == NULL) {
   1edd4:	4605      	mov	r5, r0
   1edd6:	2800      	cmp	r0, #0
   1edd8:	d059      	beq.n	1ee8e <nrf91_socket_offload_getaddrinfo+0x1ea>
	family = nrf_to_z_family(nrf_in->ai_family);
   1edda:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1eddc:	68b3      	ldr	r3, [r6, #8]
   1edde:	2a0a      	cmp	r2, #10
	z_out->ai_next = NULL;
   1ede0:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1ede4:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1ede8:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1edec:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   1edee:	d851      	bhi.n	1ee94 <nrf91_socket_offload_getaddrinfo+0x1f0>
   1edf0:	f91a 3002 	ldrsb.w	r3, [sl, r2]
	if (family == -EAFNOSUPPORT) {
   1edf4:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   1edf8:	d04c      	beq.n	1ee94 <nrf91_socket_offload_getaddrinfo+0x1f0>
	z_out->ai_family = family;
   1edfa:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1edfc:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1edfe:	2b02      	cmp	r3, #2
   1ee00:	d031      	beq.n	1ee66 <nrf91_socket_offload_getaddrinfo+0x1c2>
   1ee02:	dc0d      	bgt.n	1ee20 <nrf91_socket_offload_getaddrinfo+0x17c>
   1ee04:	b1a3      	cbz	r3, 1ee30 <nrf91_socket_offload_getaddrinfo+0x18c>
   1ee06:	2b01      	cmp	r3, #1
   1ee08:	d02f      	beq.n	1ee6a <nrf91_socket_offload_getaddrinfo+0x1c6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ee0a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1ee0e:	612b      	str	r3, [r5, #16]
		z_out->ai_addr = NULL;
   1ee10:	2300      	movs	r3, #0
   1ee12:	61ab      	str	r3, [r5, #24]
			k_free(next_z_res);
   1ee14:	4628      	mov	r0, r5
   1ee16:	f00d fea0 	bl	2cb5a <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1ee1a:	f06f 0406 	mvn.w	r4, #6
   1ee1e:	e03e      	b.n	1ee9e <nrf91_socket_offload_getaddrinfo+0x1fa>
	switch (proto) {
   1ee20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1ee24:	d01c      	beq.n	1ee60 <nrf91_socket_offload_getaddrinfo+0x1bc>
   1ee26:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1ee2a:	d1ee      	bne.n	1ee0a <nrf91_socket_offload_getaddrinfo+0x166>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ee2c:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   1ee30:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ee32:	612b      	str	r3, [r5, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1ee34:	d11b      	bne.n	1ee6e <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1ee36:	2008      	movs	r0, #8
   1ee38:	f00d fe96 	bl	2cb68 <k_malloc>
   1ee3c:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   1ee3e:	b318      	cbz	r0, 1ee88 <nrf91_socket_offload_getaddrinfo+0x1e4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1ee40:	2308      	movs	r3, #8
   1ee42:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1ee44:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1ee46:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1ee48:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1ee4a:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1ee4c:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1ee4e:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1ee50:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1ee52:	f1b8 0f00 	cmp.w	r8, #0
   1ee56:	d128      	bne.n	1eeaa <nrf91_socket_offload_getaddrinfo+0x206>
			*res = next_z_res;
   1ee58:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1ee5a:	46a8      	mov	r8, r5
   1ee5c:	69f6      	ldr	r6, [r6, #28]
   1ee5e:	e7b1      	b.n	1edc4 <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ee60:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ee64:	e7e4      	b.n	1ee30 <nrf91_socket_offload_getaddrinfo+0x18c>
   1ee66:	2311      	movs	r3, #17
   1ee68:	e7e2      	b.n	1ee30 <nrf91_socket_offload_getaddrinfo+0x18c>
   1ee6a:	2306      	movs	r3, #6
   1ee6c:	e7e0      	b.n	1ee30 <nrf91_socket_offload_getaddrinfo+0x18c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1ee6e:	2a0a      	cmp	r2, #10
   1ee70:	d1d0      	bne.n	1ee14 <nrf91_socket_offload_getaddrinfo+0x170>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1ee72:	2018      	movs	r0, #24
   1ee74:	f00d fe78 	bl	2cb68 <k_malloc>
   1ee78:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   1ee7a:	b128      	cbz	r0, 1ee88 <nrf91_socket_offload_getaddrinfo+0x1e4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ee7c:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   1ee7e:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1ee80:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1ee82:	f00c f9c5 	bl	2b210 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   1ee86:	e7e4      	b.n	1ee52 <nrf91_socket_offload_getaddrinfo+0x1ae>
			k_free(next_z_res);
   1ee88:	4628      	mov	r0, r5
   1ee8a:	f00d fe66 	bl	2cb5a <k_free>
			retval = DNS_EAI_MEMORY;
   1ee8e:	f06f 0409 	mvn.w	r4, #9
   1ee92:	e004      	b.n	1ee9e <nrf91_socket_offload_getaddrinfo+0x1fa>
			k_free(next_z_res);
   1ee94:	4628      	mov	r0, r5
   1ee96:	f00d fe60 	bl	2cb5a <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1ee9a:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   1ee9e:	6838      	ldr	r0, [r7, #0]
   1eea0:	f00c f9a9 	bl	2b1f6 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1eea4:	2300      	movs	r3, #0
   1eea6:	603b      	str	r3, [r7, #0]
   1eea8:	e78d      	b.n	1edc6 <nrf91_socket_offload_getaddrinfo+0x122>
			latest_z_res->ai_next = next_z_res;
   1eeaa:	f8c8 5000 	str.w	r5, [r8]
   1eeae:	e7d4      	b.n	1ee5a <nrf91_socket_offload_getaddrinfo+0x1b6>
		return DNS_EAI_ADDRFAMILY;
   1eeb0:	f06f 0408 	mvn.w	r4, #8
   1eeb4:	e750      	b.n	1ed58 <nrf91_socket_offload_getaddrinfo+0xb4>
			return DNS_EAI_ADDRFAMILY;
   1eeb6:	f06f 0408 	mvn.w	r4, #8
   1eeba:	e750      	b.n	1ed5e <nrf91_socket_offload_getaddrinfo+0xba>
			return DNS_EAI_SOCKTYPE;
   1eebc:	f06f 0406 	mvn.w	r4, #6
   1eec0:	e74d      	b.n	1ed5e <nrf91_socket_offload_getaddrinfo+0xba>
   1eec2:	bf00      	nop
   1eec4:	0002f36e 	.word	0x0002f36e
   1eec8:	2000c9e8 	.word	0x2000c9e8
   1eecc:	0002f32f 	.word	0x0002f32f
   1eed0:	0002e574 	.word	0x0002e574
   1eed4:	0002f372 	.word	0x0002f372

0001eed8 <nrf91_socket_offload_sendmsg>:
{
   1eed8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1eedc:	4680      	mov	r8, r0
   1eede:	4691      	mov	r9, r2
	if (msg == NULL) {
   1eee0:	460c      	mov	r4, r1
   1eee2:	b1f9      	cbz	r1, 1ef24 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1eee4:	2300      	movs	r3, #0
	ssize_t len = 0;
   1eee6:	461a      	mov	r2, r3
   1eee8:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1eeea:	4298      	cmp	r0, r3
   1eeec:	d124      	bne.n	1ef38 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   1eeee:	2a80      	cmp	r2, #128	; 0x80
   1eef0:	d86d      	bhi.n	1efce <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1eef2:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1eef4:	f04f 32ff 	mov.w	r2, #4294967295
   1eef8:	f04f 33ff 	mov.w	r3, #4294967295
   1eefc:	4836      	ldr	r0, [pc, #216]	; (1efd8 <nrf91_socket_offload_sendmsg+0x100>)
   1eefe:	f00c fa2e 	bl	2b35e <k_mutex_lock.constprop.0>
		len = 0;
   1ef02:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1ef04:	4e35      	ldr	r6, [pc, #212]	; (1efdc <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ef06:	68e3      	ldr	r3, [r4, #12]
   1ef08:	429d      	cmp	r5, r3
   1ef0a:	d31c      	bcc.n	1ef46 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   1ef0c:	2600      	movs	r6, #0
		ret = 0;
   1ef0e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1ef10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1efdc <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   1ef14:	42b7      	cmp	r7, r6
   1ef16:	dd01      	ble.n	1ef1c <nrf91_socket_offload_sendmsg+0x44>
   1ef18:	2d00      	cmp	r5, #0
   1ef1a:	da25      	bge.n	1ef68 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   1ef1c:	482e      	ldr	r0, [pc, #184]	; (1efd8 <nrf91_socket_offload_sendmsg+0x100>)
   1ef1e:	f00c f910 	bl	2b142 <k_mutex_unlock>
		return ret;
   1ef22:	e005      	b.n	1ef30 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   1ef24:	f00b ffd0 	bl	2aec8 <__errno>
   1ef28:	2316      	movs	r3, #22
		return -1;
   1ef2a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   1ef2e:	6003      	str	r3, [r0, #0]
}
   1ef30:	4628      	mov	r0, r5
   1ef32:	b002      	add	sp, #8
   1ef34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1ef38:	68a1      	ldr	r1, [r4, #8]
   1ef3a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ef3e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef40:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1ef42:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1ef44:	e7d1      	b.n	1eeea <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1ef46:	68a1      	ldr	r1, [r4, #8]
   1ef48:	19f0      	adds	r0, r6, r7
   1ef4a:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   1ef4e:	685a      	ldr	r2, [r3, #4]
   1ef50:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1ef54:	f00d fe3d 	bl	2cbd2 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1ef58:	68a3      	ldr	r3, [r4, #8]
   1ef5a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1ef5e:	4453      	add	r3, sl
   1ef60:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ef62:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1ef64:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1ef66:	e7ce      	b.n	1ef06 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   1ef68:	6863      	ldr	r3, [r4, #4]
   1ef6a:	1bba      	subs	r2, r7, r6
   1ef6c:	9301      	str	r3, [sp, #4]
   1ef6e:	6823      	ldr	r3, [r4, #0]
   1ef70:	eb0a 0106 	add.w	r1, sl, r6
   1ef74:	9300      	str	r3, [sp, #0]
   1ef76:	4640      	mov	r0, r8
   1ef78:	464b      	mov	r3, r9
   1ef7a:	f00c f976 	bl	2b26a <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1ef7e:	1e05      	subs	r5, r0, #0
				offset += ret;
   1ef80:	bfc8      	it	gt
   1ef82:	1976      	addgt	r6, r6, r5
   1ef84:	e7c6      	b.n	1ef14 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   1ef86:	68a3      	ldr	r3, [r4, #8]
   1ef88:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1ef8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1ef90:	685b      	ldr	r3, [r3, #4]
   1ef92:	b133      	cbz	r3, 1efa2 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   1ef94:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1ef96:	68a3      	ldr	r3, [r4, #8]
   1ef98:	eb03 020a 	add.w	r2, r3, sl
   1ef9c:	6852      	ldr	r2, [r2, #4]
   1ef9e:	4297      	cmp	r7, r2
   1efa0:	d304      	bcc.n	1efac <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1efa2:	3601      	adds	r6, #1
   1efa4:	68e3      	ldr	r3, [r4, #12]
   1efa6:	42b3      	cmp	r3, r6
   1efa8:	d8ed      	bhi.n	1ef86 <nrf91_socket_offload_sendmsg+0xae>
   1efaa:	e7c1      	b.n	1ef30 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   1efac:	f853 100a 	ldr.w	r1, [r3, sl]
   1efb0:	6863      	ldr	r3, [r4, #4]
   1efb2:	4640      	mov	r0, r8
   1efb4:	9301      	str	r3, [sp, #4]
   1efb6:	6823      	ldr	r3, [r4, #0]
   1efb8:	1bd2      	subs	r2, r2, r7
   1efba:	9300      	str	r3, [sp, #0]
   1efbc:	4439      	add	r1, r7
   1efbe:	464b      	mov	r3, r9
   1efc0:	f00c f953 	bl	2b26a <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1efc4:	1e03      	subs	r3, r0, #0
   1efc6:	db05      	blt.n	1efd4 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   1efc8:	441f      	add	r7, r3
			len += ret;
   1efca:	441d      	add	r5, r3
   1efcc:	e7e3      	b.n	1ef96 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1efce:	2600      	movs	r6, #0
	len = 0;
   1efd0:	4635      	mov	r5, r6
   1efd2:	e7e7      	b.n	1efa4 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   1efd4:	461d      	mov	r5, r3
   1efd6:	e7ab      	b.n	1ef30 <nrf91_socket_offload_sendmsg+0x58>
   1efd8:	2000ca24 	.word	0x2000ca24
   1efdc:	2000d4ce 	.word	0x2000d4ce

0001efe0 <allocate_ctx>:
{
   1efe0:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1efe2:	f04f 32ff 	mov.w	r2, #4294967295
   1efe6:	f04f 33ff 	mov.w	r3, #4294967295
{
   1efea:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1efec:	480b      	ldr	r0, [pc, #44]	; (1f01c <allocate_ctx+0x3c>)
   1efee:	f00c f9b6 	bl	2b35e <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1eff2:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   1eff4:	4a0a      	ldr	r2, [pc, #40]	; (1f020 <allocate_ctx+0x40>)
   1eff6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1effa:	3101      	adds	r1, #1
   1effc:	d108      	bne.n	1f010 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   1effe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   1f002:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   1f006:	4805      	ldr	r0, [pc, #20]	; (1f01c <allocate_ctx+0x3c>)
   1f008:	f00c f89b 	bl	2b142 <k_mutex_unlock>
}
   1f00c:	4628      	mov	r0, r5
   1f00e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f010:	3301      	adds	r3, #1
   1f012:	2b08      	cmp	r3, #8
   1f014:	d1ef      	bne.n	1eff6 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   1f016:	2500      	movs	r5, #0
   1f018:	e7f5      	b.n	1f006 <allocate_ctx+0x26>
   1f01a:	bf00      	nop
   1f01c:	2000c9c0 	.word	0x2000c9c0
   1f020:	2000d030 	.word	0x2000d030

0001f024 <release_ctx>:
{
   1f024:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f026:	4d09      	ldr	r5, [pc, #36]	; (1f04c <release_ctx+0x28>)
{
   1f028:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f02a:	f04f 32ff 	mov.w	r2, #4294967295
   1f02e:	f04f 33ff 	mov.w	r3, #4294967295
   1f032:	4628      	mov	r0, r5
   1f034:	f00c f993 	bl	2b35e <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   1f038:	2300      	movs	r3, #0
   1f03a:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   1f03e:	4628      	mov	r0, r5
	ctx->lock = NULL;
   1f040:	e9c4 2300 	strd	r2, r3, [r4]
}
   1f044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1f048:	f00c b87b 	b.w	2b142 <k_mutex_unlock>
   1f04c:	2000c9c0 	.word	0x2000c9c0

0001f050 <nrf91_socket_offload_accept>:
{
   1f050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f054:	b08b      	sub	sp, #44	; 0x2c
   1f056:	4607      	mov	r7, r0
   1f058:	460c      	mov	r4, r1
   1f05a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1f05c:	f7fb fc00 	bl	1a860 <z_reserve_fd>
   1f060:	4606      	mov	r6, r0
	if (fd < 0) {
   1f062:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1f064:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1f066:	db23      	blt.n	1f0b0 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f068:	b32c      	cbz	r4, 1f0b6 <nrf91_socket_offload_accept+0x66>
   1f06a:	b33d      	cbz	r5, 1f0bc <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f06c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1f06e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f070:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1f072:	bf0c      	ite	eq
   1f074:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1f076:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1f078:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1f07a:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1f07c:	4639      	mov	r1, r7
   1f07e:	f00d fbc4 	bl	2c80a <nrf_accept>
	if (new_sd < 0) {
   1f082:	f1b0 0900 	subs.w	r9, r0, #0
   1f086:	db3c      	blt.n	1f102 <nrf91_socket_offload_accept+0xb2>
	ctx = allocate_ctx(new_sd);
   1f088:	f7ff ffaa 	bl	1efe0 <allocate_ctx>
	if (ctx == NULL) {
   1f08c:	4680      	mov	r8, r0
   1f08e:	b9c0      	cbnz	r0, 1f0c2 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   1f090:	f00b ff1a 	bl	2aec8 <__errno>
   1f094:	230c      	movs	r3, #12
   1f096:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f098:	4648      	mov	r0, r9
   1f09a:	f00d fb53 	bl	2c744 <nrf_close>
	if (ctx != NULL) {
   1f09e:	f1b8 0f00 	cmp.w	r8, #0
   1f0a2:	d002      	beq.n	1f0aa <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   1f0a4:	4640      	mov	r0, r8
   1f0a6:	f7ff ffbd 	bl	1f024 <release_ctx>
	z_free_fd(fd);
   1f0aa:	4630      	mov	r0, r6
   1f0ac:	f7fb fc26 	bl	1a8fc <z_free_fd>
		return -1;
   1f0b0:	f04f 36ff 	mov.w	r6, #4294967295
   1f0b4:	e018      	b.n	1f0e8 <nrf91_socket_offload_accept+0x98>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f0b6:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f0b8:	4627      	mov	r7, r4
   1f0ba:	e7df      	b.n	1f07c <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f0bc:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f0be:	462f      	mov	r7, r5
   1f0c0:	e7dc      	b.n	1f07c <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f0c2:	b164      	cbz	r4, 1f0de <nrf91_socket_offload_accept+0x8e>
   1f0c4:	b15d      	cbz	r5, 1f0de <nrf91_socket_offload_accept+0x8e>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1f0c6:	687b      	ldr	r3, [r7, #4]
   1f0c8:	2b02      	cmp	r3, #2
   1f0ca:	d111      	bne.n	1f0f0 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in);
   1f0cc:	2308      	movs	r3, #8
   1f0ce:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1f0d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f0d4:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1f0d6:	2301      	movs	r3, #1
   1f0d8:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f0da:	9b04      	ldr	r3, [sp, #16]
   1f0dc:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1f0de:	4641      	mov	r1, r8
   1f0e0:	4630      	mov	r0, r6
   1f0e2:	4a0b      	ldr	r2, [pc, #44]	; (1f110 <nrf91_socket_offload_accept+0xc0>)
   1f0e4:	f7fb fbf2 	bl	1a8cc <z_finalize_fd>
}
   1f0e8:	4630      	mov	r0, r6
   1f0ea:	b00b      	add	sp, #44	; 0x2c
   1f0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1f0f0:	2b0a      	cmp	r3, #10
   1f0f2:	d1d1      	bne.n	1f098 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   1f0f4:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1f0f6:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1f0f8:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1f0fa:	a901      	add	r1, sp, #4
   1f0fc:	f00c f888 	bl	2b210 <nrf_to_z_ipv6>
   1f100:	e7ed      	b.n	1f0de <nrf91_socket_offload_accept+0x8e>
	if (new_sd != -1) {
   1f102:	f1b9 3fff 	cmp.w	r9, #4294967295
   1f106:	d0d0      	beq.n	1f0aa <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   1f108:	f04f 0800 	mov.w	r8, #0
   1f10c:	e7c4      	b.n	1f098 <nrf91_socket_offload_accept+0x48>
   1f10e:	bf00      	nop
   1f110:	0002df90 	.word	0x0002df90

0001f114 <nrf91_socket_create>:
{
   1f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1f118:	1e0e      	subs	r6, r1, #0
{
   1f11a:	4605      	mov	r5, r0
   1f11c:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   1f11e:	da15      	bge.n	1f14c <nrf91_socket_create+0x38>
	k_sched_lock();
   1f120:	f007 fefe 	bl	26f20 <k_sched_lock>
	*offload_lock = true;
   1f124:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1f1d4 <nrf91_socket_create+0xc0>
   1f128:	2301      	movs	r3, #1
   1f12a:	f888 3000 	strb.w	r3, [r8]
	return z_impl_zsock_socket(family, type, proto);
   1f12e:	463a      	mov	r2, r7
   1f130:	4628      	mov	r0, r5
   1f132:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   1f136:	f7fc fc79 	bl	1ba2c <z_impl_zsock_socket>
	*offload_lock = false;
   1f13a:	2300      	movs	r3, #0
   1f13c:	f888 3000 	strb.w	r3, [r8]
   1f140:	4604      	mov	r4, r0
	k_sched_unlock();
   1f142:	f008 fb5d 	bl	27800 <k_sched_unlock>
}
   1f146:	4620      	mov	r0, r4
   1f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1f14c:	0073      	lsls	r3, r6, #1
   1f14e:	d504      	bpl.n	1f15a <nrf91_socket_create+0x46>
	k_sched_lock();
   1f150:	f007 fee6 	bl	26f20 <k_sched_lock>
	*offload_lock = true;
   1f154:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1f1d8 <nrf91_socket_create+0xc4>
   1f158:	e7e6      	b.n	1f128 <nrf91_socket_create+0x14>
	fd = z_reserve_fd();
   1f15a:	f7fb fb81 	bl	1a860 <z_reserve_fd>
	if (fd < 0) {
   1f15e:	1e04      	subs	r4, r0, #0
   1f160:	db0e      	blt.n	1f180 <nrf91_socket_create+0x6c>
	family = z_to_nrf_family(family);
   1f162:	b2ad      	uxth	r5, r5
	switch (z_family) {
   1f164:	2d03      	cmp	r5, #3
   1f166:	d804      	bhi.n	1f172 <nrf91_socket_create+0x5e>
   1f168:	4b18      	ldr	r3, [pc, #96]	; (1f1cc <nrf91_socket_create+0xb8>)
   1f16a:	575d      	ldrsb	r5, [r3, r5]
	if (family == -EAFNOSUPPORT) {
   1f16c:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   1f170:	d109      	bne.n	1f186 <nrf91_socket_create+0x72>
		errno = EAFNOSUPPORT;
   1f172:	f00b fea9 	bl	2aec8 <__errno>
   1f176:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1f178:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1f17a:	4620      	mov	r0, r4
   1f17c:	f7fb fbbe 	bl	1a8fc <z_free_fd>
		return -1;
   1f180:	f04f 34ff 	mov.w	r4, #4294967295
   1f184:	e7df      	b.n	1f146 <nrf91_socket_create+0x32>
	proto = z_to_nrf_protocol(proto);
   1f186:	4638      	mov	r0, r7
   1f188:	f00b ffc0 	bl	2b10c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1f18c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   1f190:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1f192:	d103      	bne.n	1f19c <nrf91_socket_create+0x88>
		errno = EPROTONOSUPPORT;
   1f194:	f00b fe98 	bl	2aec8 <__errno>
   1f198:	237b      	movs	r3, #123	; 0x7b
   1f19a:	e7ed      	b.n	1f178 <nrf91_socket_create+0x64>
	retval = nrf_socket(family, type, proto);
   1f19c:	4628      	mov	r0, r5
   1f19e:	4631      	mov	r1, r6
   1f1a0:	f00d fabf 	bl	2c722 <nrf_socket>
	if (sd < 0) {
   1f1a4:	1e05      	subs	r5, r0, #0
   1f1a6:	dbe8      	blt.n	1f17a <nrf91_socket_create+0x66>
	ctx = allocate_ctx(sd);
   1f1a8:	f7ff ff1a 	bl	1efe0 <allocate_ctx>
	if (ctx == NULL) {
   1f1ac:	4601      	mov	r1, r0
   1f1ae:	b938      	cbnz	r0, 1f1c0 <nrf91_socket_create+0xac>
		errno = ENOMEM;
   1f1b0:	f00b fe8a 	bl	2aec8 <__errno>
   1f1b4:	230c      	movs	r3, #12
   1f1b6:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1f1b8:	4628      	mov	r0, r5
   1f1ba:	f00d fac3 	bl	2c744 <nrf_close>
   1f1be:	e7dc      	b.n	1f17a <nrf91_socket_create+0x66>
	z_finalize_fd(fd, ctx,
   1f1c0:	4620      	mov	r0, r4
   1f1c2:	4a03      	ldr	r2, [pc, #12]	; (1f1d0 <nrf91_socket_create+0xbc>)
   1f1c4:	f7fb fb82 	bl	1a8cc <z_finalize_fd>
	return fd;
   1f1c8:	e7bd      	b.n	1f146 <nrf91_socket_create+0x32>
   1f1ca:	bf00      	nop
   1f1cc:	0002f36e 	.word	0x0002f36e
   1f1d0:	0002df90 	.word	0x0002df90
   1f1d4:	2000d54e 	.word	0x2000d54e
   1f1d8:	2000d54f 	.word	0x2000d54f

0001f1dc <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1f1dc:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1f1de:	4805      	ldr	r0, [pc, #20]	; (1f1f4 <at_monitor_sys_init+0x18>)
   1f1e0:	f006 f8ce 	bl	25380 <nrf_modem_at_notif_handler_set>
	if (err) {
   1f1e4:	4602      	mov	r2, r0
   1f1e6:	b118      	cbz	r0, 1f1f0 <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1f1e8:	2145      	movs	r1, #69	; 0x45
   1f1ea:	4803      	ldr	r0, [pc, #12]	; (1f1f8 <at_monitor_sys_init+0x1c>)
   1f1ec:	f00b fd19 	bl	2ac22 <z_log_minimal_printk>
	}

	return 0;
}
   1f1f0:	2000      	movs	r0, #0
   1f1f2:	bd08      	pop	{r3, pc}
   1f1f4:	0001f1fd 	.word	0x0001f1fd
   1f1f8:	0002f37d 	.word	0x0002f37d

0001f1fc <at_monitor_dispatch>:
{
   1f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(notif != NULL);
   1f200:	4604      	mov	r4, r0
   1f202:	b940      	cbnz	r0, 1f216 <at_monitor_dispatch+0x1a>
   1f204:	4935      	ldr	r1, [pc, #212]	; (1f2dc <at_monitor_dispatch+0xe0>)
   1f206:	4836      	ldr	r0, [pc, #216]	; (1f2e0 <at_monitor_dispatch+0xe4>)
   1f208:	2224      	movs	r2, #36	; 0x24
   1f20a:	f00b fb4b 	bl	2a8a4 <printk>
   1f20e:	2124      	movs	r1, #36	; 0x24
   1f210:	4832      	ldr	r0, [pc, #200]	; (1f2dc <at_monitor_dispatch+0xe0>)
   1f212:	f00b fce0 	bl	2abd6 <assert_post_action>
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1f216:	4e33      	ldr	r6, [pc, #204]	; (1f2e4 <at_monitor_dispatch+0xe8>)
{
   1f218:	4d33      	ldr	r5, [pc, #204]	; (1f2e8 <at_monitor_dispatch+0xec>)
   1f21a:	46b0      	mov	r8, r6
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1f21c:	4f2f      	ldr	r7, [pc, #188]	; (1f2dc <at_monitor_dispatch+0xe0>)
   1f21e:	42b5      	cmp	r5, r6
   1f220:	d908      	bls.n	1f234 <at_monitor_dispatch+0x38>
   1f222:	4639      	mov	r1, r7
   1f224:	482e      	ldr	r0, [pc, #184]	; (1f2e0 <at_monitor_dispatch+0xe4>)
   1f226:	222a      	movs	r2, #42	; 0x2a
   1f228:	f00b fb3c 	bl	2a8a4 <printk>
   1f22c:	212a      	movs	r1, #42	; 0x2a
   1f22e:	4638      	mov	r0, r7
   1f230:	f00b fcd1 	bl	2abd6 <assert_post_action>
   1f234:	4545      	cmp	r5, r8
   1f236:	d312      	bcc.n	1f25e <at_monitor_dispatch+0x62>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f238:	4e2c      	ldr	r6, [pc, #176]	; (1f2ec <at_monitor_dispatch+0xf0>)
   1f23a:	4d2d      	ldr	r5, [pc, #180]	; (1f2f0 <at_monitor_dispatch+0xf4>)
   1f23c:	46b0      	mov	r8, r6
   1f23e:	4f27      	ldr	r7, [pc, #156]	; (1f2dc <at_monitor_dispatch+0xe0>)
   1f240:	42b5      	cmp	r5, r6
   1f242:	d908      	bls.n	1f256 <at_monitor_dispatch+0x5a>
   1f244:	4639      	mov	r1, r7
   1f246:	4826      	ldr	r0, [pc, #152]	; (1f2e0 <at_monitor_dispatch+0xe4>)
   1f248:	2232      	movs	r2, #50	; 0x32
   1f24a:	f00b fb2b 	bl	2a8a4 <printk>
   1f24e:	2132      	movs	r1, #50	; 0x32
   1f250:	4638      	mov	r0, r7
   1f252:	f00b fcc0 	bl	2abd6 <assert_post_action>
   1f256:	4545      	cmp	r5, r8
   1f258:	d315      	bcc.n	1f286 <at_monitor_dispatch+0x8a>
}
   1f25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f25e:	7a2b      	ldrb	r3, [r5, #8]
   1f260:	b94b      	cbnz	r3, 1f276 <at_monitor_dispatch+0x7a>
   1f262:	6829      	ldr	r1, [r5, #0]
   1f264:	b949      	cbnz	r1, 1f27a <at_monitor_dispatch+0x7e>
			LOG_DBG("Dispatching to %p (ISR)", e->handler);
   1f266:	4823      	ldr	r0, [pc, #140]	; (1f2f4 <at_monitor_dispatch+0xf8>)
   1f268:	2144      	movs	r1, #68	; 0x44
   1f26a:	686a      	ldr	r2, [r5, #4]
   1f26c:	f00b fcd9 	bl	2ac22 <z_log_minimal_printk>
			e->handler(notif);
   1f270:	4620      	mov	r0, r4
   1f272:	686b      	ldr	r3, [r5, #4]
   1f274:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1f276:	350c      	adds	r5, #12
   1f278:	e7d1      	b.n	1f21e <at_monitor_dispatch+0x22>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f27a:	4620      	mov	r0, r4
   1f27c:	f00d fe15 	bl	2ceaa <strstr>
   1f280:	2800      	cmp	r0, #0
   1f282:	d1f0      	bne.n	1f266 <at_monitor_dispatch+0x6a>
   1f284:	e7f7      	b.n	1f276 <at_monitor_dispatch+0x7a>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f286:	7a2b      	ldrb	r3, [r5, #8]
   1f288:	b9c3      	cbnz	r3, 1f2bc <at_monitor_dispatch+0xc0>
   1f28a:	6829      	ldr	r1, [r5, #0]
   1f28c:	b989      	cbnz	r1, 1f2b2 <at_monitor_dispatch+0xb6>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1f28e:	4620      	mov	r0, r4
   1f290:	f7fa f954 	bl	1953c <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1f294:	2200      	movs	r2, #0
   1f296:	1d41      	adds	r1, r0, #5
   1f298:	2300      	movs	r3, #0
   1f29a:	4817      	ldr	r0, [pc, #92]	; (1f2f8 <at_monitor_dispatch+0xfc>)
   1f29c:	f00d fb5b 	bl	2c956 <k_heap_alloc>
	if (!at_notif) {
   1f2a0:	4605      	mov	r5, r0
   1f2a2:	b968      	cbnz	r0, 1f2c0 <at_monitor_dispatch+0xc4>
		LOG_WRN("No heap space for incoming notification: %s",
   1f2a4:	4622      	mov	r2, r4
}
   1f2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   1f2aa:	2157      	movs	r1, #87	; 0x57
   1f2ac:	4813      	ldr	r0, [pc, #76]	; (1f2fc <at_monitor_dispatch+0x100>)
   1f2ae:	f00b bcb8 	b.w	2ac22 <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f2b2:	4620      	mov	r0, r4
   1f2b4:	f00d fdf9 	bl	2ceaa <strstr>
   1f2b8:	2800      	cmp	r0, #0
   1f2ba:	d1e8      	bne.n	1f28e <at_monitor_dispatch+0x92>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f2bc:	350c      	adds	r5, #12
   1f2be:	e7bf      	b.n	1f240 <at_monitor_dispatch+0x44>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	3004      	adds	r0, #4
   1f2c4:	f00d fdb7 	bl	2ce36 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1f2c8:	4629      	mov	r1, r5
   1f2ca:	480d      	ldr	r0, [pc, #52]	; (1f300 <at_monitor_dispatch+0x104>)
   1f2cc:	f00d fb74 	bl	2c9b8 <k_queue_append>
}
   1f2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_submit(&at_monitor_work);
   1f2d4:	480b      	ldr	r0, [pc, #44]	; (1f304 <at_monitor_dispatch+0x108>)
   1f2d6:	f007 bc73 	b.w	26bc0 <k_work_submit>
   1f2da:	bf00      	nop
   1f2dc:	0002f3af 	.word	0x0002f3af
   1f2e0:	0002e574 	.word	0x0002e574
   1f2e4:	2000c908 	.word	0x2000c908
   1f2e8:	2000c908 	.word	0x2000c908
   1f2ec:	2000c908 	.word	0x2000c908
   1f2f0:	2000c8a8 	.word	0x2000c8a8
   1f2f4:	0002f3db 	.word	0x0002f3db
   1f2f8:	2000c968 	.word	0x2000c968
   1f2fc:	0002f3f8 	.word	0x0002f3f8
   1f300:	2000ca80 	.word	0x2000ca80
   1f304:	2000c648 	.word	0x2000c648

0001f308 <at_monitor_task>:
{
   1f308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1f30c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1f39c <at_monitor_task+0x94>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f310:	4f1c      	ldr	r7, [pc, #112]	; (1f384 <at_monitor_task+0x7c>)
   1f312:	2200      	movs	r2, #0
   1f314:	2300      	movs	r3, #0
   1f316:	4648      	mov	r0, r9
   1f318:	f007 f934 	bl	26584 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1f31c:	4605      	mov	r5, r0
   1f31e:	b908      	cbnz	r0, 1f324 <at_monitor_task+0x1c>
}
   1f320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LOG_DBG("AT notif: %s", log_strdup(at_notif->data));
   1f324:	1d2e      	adds	r6, r5, #4
   1f326:	4632      	mov	r2, r6
   1f328:	2144      	movs	r1, #68	; 0x44
   1f32a:	4817      	ldr	r0, [pc, #92]	; (1f388 <at_monitor_task+0x80>)
   1f32c:	f00b fc79 	bl	2ac22 <z_log_minimal_printk>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f330:	4c16      	ldr	r4, [pc, #88]	; (1f38c <at_monitor_task+0x84>)
   1f332:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1f3a0 <at_monitor_task+0x98>
   1f336:	42bc      	cmp	r4, r7
   1f338:	d908      	bls.n	1f34c <at_monitor_task+0x44>
   1f33a:	4641      	mov	r1, r8
   1f33c:	4814      	ldr	r0, [pc, #80]	; (1f390 <at_monitor_task+0x88>)
   1f33e:	2253      	movs	r2, #83	; 0x53
   1f340:	f00b fab0 	bl	2a8a4 <printk>
   1f344:	2153      	movs	r1, #83	; 0x53
   1f346:	4640      	mov	r0, r8
   1f348:	f00b fc45 	bl	2abd6 <assert_post_action>
   1f34c:	42bc      	cmp	r4, r7
   1f34e:	d304      	bcc.n	1f35a <at_monitor_task+0x52>
		k_heap_free(&at_monitor_heap, at_notif);
   1f350:	4629      	mov	r1, r5
   1f352:	4810      	ldr	r0, [pc, #64]	; (1f394 <at_monitor_task+0x8c>)
   1f354:	f006 fd3e 	bl	25dd4 <k_heap_free>
   1f358:	e7db      	b.n	1f312 <at_monitor_task+0xa>
			if (!e->paused &&
   1f35a:	7a23      	ldrb	r3, [r4, #8]
   1f35c:	b94b      	cbnz	r3, 1f372 <at_monitor_task+0x6a>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   1f35e:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   1f360:	b949      	cbnz	r1, 1f376 <at_monitor_task+0x6e>
				LOG_DBG("Dispatching to %p", e->handler);
   1f362:	480d      	ldr	r0, [pc, #52]	; (1f398 <at_monitor_task+0x90>)
   1f364:	2144      	movs	r1, #68	; 0x44
   1f366:	6862      	ldr	r2, [r4, #4]
   1f368:	f00b fc5b 	bl	2ac22 <z_log_minimal_printk>
				e->handler(at_notif->data);
   1f36c:	4630      	mov	r0, r6
   1f36e:	6863      	ldr	r3, [r4, #4]
   1f370:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f372:	340c      	adds	r4, #12
   1f374:	e7df      	b.n	1f336 <at_monitor_task+0x2e>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   1f376:	4630      	mov	r0, r6
   1f378:	f00d fd97 	bl	2ceaa <strstr>
   1f37c:	2800      	cmp	r0, #0
   1f37e:	d1f0      	bne.n	1f362 <at_monitor_task+0x5a>
   1f380:	e7f7      	b.n	1f372 <at_monitor_task+0x6a>
   1f382:	bf00      	nop
   1f384:	2000c908 	.word	0x2000c908
   1f388:	0002f429 	.word	0x0002f429
   1f38c:	2000c8a8 	.word	0x2000c8a8
   1f390:	0002e574 	.word	0x0002e574
   1f394:	2000c968 	.word	0x2000c968
   1f398:	0002f43b 	.word	0x0002f43b
   1f39c:	2000ca80 	.word	0x2000ca80
   1f3a0:	0002f3af 	.word	0x0002f3af

0001f3a4 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1f3a4:	4b06      	ldr	r3, [pc, #24]	; (1f3c0 <is_valid_notification_char+0x1c>)
   1f3a6:	5cc3      	ldrb	r3, [r0, r3]
   1f3a8:	f003 0303 	and.w	r3, r3, #3
   1f3ac:	2b02      	cmp	r3, #2
   1f3ae:	bf08      	it	eq
   1f3b0:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1f3b2:	3841      	subs	r0, #65	; 0x41
   1f3b4:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1f3b6:	2819      	cmp	r0, #25
   1f3b8:	bf8c      	ite	hi
   1f3ba:	2000      	movhi	r0, #0
   1f3bc:	2001      	movls	r0, #1
   1f3be:	4770      	bx	lr
   1f3c0:	00030d52 	.word	0x00030d52

0001f3c4 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3c6:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f3c8:	2400      	movs	r4, #0
   1f3ca:	4e09      	ldr	r6, [pc, #36]	; (1f3f0 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1f3cc:	f856 7b04 	ldr.w	r7, [r6], #4
   1f3d0:	4638      	mov	r0, r7
   1f3d2:	f7fa f8b3 	bl	1953c <strlen>
   1f3d6:	4639      	mov	r1, r7
   1f3d8:	4602      	mov	r2, r0
   1f3da:	4628      	mov	r0, r5
   1f3dc:	f00d fd33 	bl	2ce46 <strncmp>
		if (!diff) {
   1f3e0:	b120      	cbz	r0, 1f3ec <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f3e2:	3401      	adds	r4, #1
   1f3e4:	2c04      	cmp	r4, #4
   1f3e6:	d1f1      	bne.n	1f3cc <is_result+0x8>
			return true;
		}
	}

	return false;
   1f3e8:	2000      	movs	r0, #0
}
   1f3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1f3ec:	2001      	movs	r0, #1
   1f3ee:	e7fc      	b.n	1f3ea <is_result+0x26>
   1f3f0:	0002dfc8 	.word	0x0002dfc8

0001f3f4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1f3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1f3f8:	6805      	ldr	r5, [r0, #0]
{
   1f3fa:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1f3fc:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f3fe:	782b      	ldrb	r3, [r5, #0]
{
   1f400:	4680      	mov	r8, r0
   1f402:	460f      	mov	r7, r1
   1f404:	4616      	mov	r6, r2
   1f406:	2b00      	cmp	r3, #0
   1f408:	f000 80ca 	beq.w	1f5a0 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1f40c:	4b66      	ldr	r3, [pc, #408]	; (1f5a8 <at_parse_process_element+0x1b4>)
   1f40e:	781c      	ldrb	r4, [r3, #0]
   1f410:	2c06      	cmp	r4, #6
   1f412:	d110      	bne.n	1f436 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1f414:	1c6b      	adds	r3, r5, #1
   1f416:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   1f418:	9a00      	ldr	r2, [sp, #0]
   1f41a:	7810      	ldrb	r0, [r2, #0]
   1f41c:	f7ff ffc2 	bl	1f3a4 <is_valid_notification_char>
   1f420:	b930      	cbnz	r0, 1f430 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f422:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f424:	462a      	mov	r2, r5
   1f426:	4639      	mov	r1, r7
   1f428:	4630      	mov	r0, r6
   1f42a:	f00c f8c8 	bl	2b5be <at_params_string_put>
   1f42e:	e01c      	b.n	1f46a <at_parse_process_element+0x76>
			tmpstr++;
   1f430:	3201      	adds	r2, #1
   1f432:	9200      	str	r2, [sp, #0]
   1f434:	e7f0      	b.n	1f418 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1f436:	2c07      	cmp	r4, #7
   1f438:	d125      	bne.n	1f486 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   1f43a:	4668      	mov	r0, sp
   1f43c:	f00c f85f 	bl	2b4fe <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1f440:	4a5a      	ldr	r2, [pc, #360]	; (1f5ac <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   1f442:	9b00      	ldr	r3, [sp, #0]
   1f444:	7819      	ldrb	r1, [r3, #0]
   1f446:	5c89      	ldrb	r1, [r1, r2]
   1f448:	0749      	lsls	r1, r1, #29
   1f44a:	d115      	bne.n	1f478 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   1f44c:	462a      	mov	r2, r5
   1f44e:	1b5b      	subs	r3, r3, r5
   1f450:	4639      	mov	r1, r7
   1f452:	4630      	mov	r0, r6
   1f454:	f00c f8b3 	bl	2b5be <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1f458:	9b00      	ldr	r3, [sp, #0]
   1f45a:	781a      	ldrb	r2, [r3, #0]
   1f45c:	2a3d      	cmp	r2, #61	; 0x3d
   1f45e:	d10e      	bne.n	1f47e <at_parse_process_element+0x8a>
   1f460:	785a      	ldrb	r2, [r3, #1]
   1f462:	2a3f      	cmp	r2, #63	; 0x3f
   1f464:	d101      	bne.n	1f46a <at_parse_process_element+0x76>
			tmpstr += 2;
   1f466:	3302      	adds	r3, #2
			tmpstr++;
   1f468:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1f46a:	2000      	movs	r0, #0
	*str = tmpstr;
   1f46c:	9b00      	ldr	r3, [sp, #0]
   1f46e:	f8c8 3000 	str.w	r3, [r8]
}
   1f472:	b023      	add	sp, #140	; 0x8c
   1f474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1f478:	3301      	adds	r3, #1
   1f47a:	9300      	str	r3, [sp, #0]
   1f47c:	e7e1      	b.n	1f442 <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1f47e:	2a3f      	cmp	r2, #63	; 0x3f
   1f480:	d1f3      	bne.n	1f46a <at_parse_process_element+0x76>
			tmpstr++;
   1f482:	3301      	adds	r3, #1
   1f484:	e7f0      	b.n	1f468 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   1f486:	2c08      	cmp	r4, #8
   1f488:	d103      	bne.n	1f492 <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   1f48a:	4610      	mov	r0, r2
   1f48c:	f00c f869 	bl	2b562 <at_params_empty_put>
   1f490:	e7eb      	b.n	1f46a <at_parse_process_element+0x76>
	} else if (state == STRING) {
   1f492:	2c02      	cmp	r4, #2
   1f494:	d111      	bne.n	1f4ba <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f496:	9a00      	ldr	r2, [sp, #0]
   1f498:	7811      	ldrb	r1, [r2, #0]
   1f49a:	4608      	mov	r0, r1
   1f49c:	f00c f826 	bl	2b4ec <is_lfcr>
   1f4a0:	b918      	cbnz	r0, 1f4aa <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f4a2:	b111      	cbz	r1, 1f4aa <at_parse_process_element+0xb6>
			tmpstr++;
   1f4a4:	3201      	adds	r2, #1
   1f4a6:	9200      	str	r2, [sp, #0]
   1f4a8:	e7f5      	b.n	1f496 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   1f4aa:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1f4ac:	462a      	mov	r2, r5
   1f4ae:	4639      	mov	r1, r7
   1f4b0:	4630      	mov	r0, r6
   1f4b2:	f00c f884 	bl	2b5be <at_params_string_put>
		tmpstr++;
   1f4b6:	9b00      	ldr	r3, [sp, #0]
   1f4b8:	e7e3      	b.n	1f482 <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   1f4ba:	2c03      	cmp	r4, #3
   1f4bc:	d109      	bne.n	1f4d2 <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1f4be:	9b00      	ldr	r3, [sp, #0]
   1f4c0:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   1f4c2:	2a22      	cmp	r2, #34	; 0x22
   1f4c4:	d003      	beq.n	1f4ce <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f4c6:	b112      	cbz	r2, 1f4ce <at_parse_process_element+0xda>
			tmpstr++;
   1f4c8:	3301      	adds	r3, #1
   1f4ca:	9300      	str	r3, [sp, #0]
   1f4cc:	e7f7      	b.n	1f4be <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   1f4ce:	1b5b      	subs	r3, r3, r5
   1f4d0:	e7ec      	b.n	1f4ac <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   1f4d2:	2c01      	cmp	r4, #1
   1f4d4:	d13c      	bne.n	1f550 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f4d6:	4628      	mov	r0, r5
   1f4d8:	220a      	movs	r2, #10
   1f4da:	a901      	add	r1, sp, #4
   1f4dc:	f00a fa7c 	bl	299d8 <strtoul>
		tmpstr = next;
   1f4e0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f4e2:	4d33      	ldr	r5, [pc, #204]	; (1f5b0 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f4e4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1f4e6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1f4e8:	9800      	ldr	r0, [sp, #0]
   1f4ea:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   1f4ec:	2b29      	cmp	r3, #41	; 0x29
   1f4ee:	d01f      	beq.n	1f530 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f4f0:	b1f3      	cbz	r3, 1f530 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f4f2:	3b2c      	subs	r3, #44	; 0x2c
   1f4f4:	b2db      	uxtb	r3, r3
   1f4f6:	3001      	adds	r0, #1
   1f4f8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1f4fa:	9000      	str	r0, [sp, #0]
   1f4fc:	d826      	bhi.n	1f54c <at_parse_process_element+0x158>
   1f4fe:	fa25 f303 	lsr.w	r3, r5, r3
   1f502:	07db      	lsls	r3, r3, #31
   1f504:	d522      	bpl.n	1f54c <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f506:	220a      	movs	r2, #10
   1f508:	a901      	add	r1, sp, #4
   1f50a:	f00a fa65 	bl	299d8 <strtoul>
				tmparray[i++] =
   1f50e:	ab22      	add	r3, sp, #136	; 0x88
   1f510:	f104 0901 	add.w	r9, r4, #1
   1f514:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1f518:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1f51c:	9800      	ldr	r0, [sp, #0]
   1f51e:	f7fa f80d 	bl	1953c <strlen>
   1f522:	4604      	mov	r4, r0
   1f524:	9801      	ldr	r0, [sp, #4]
   1f526:	f7fa f809 	bl	1953c <strlen>
   1f52a:	4284      	cmp	r4, r0
   1f52c:	d107      	bne.n	1f53e <at_parse_process_element+0x14a>
				tmparray[i++] =
   1f52e:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1f530:	4639      	mov	r1, r7
   1f532:	4630      	mov	r0, r6
   1f534:	00a3      	lsls	r3, r4, #2
   1f536:	aa02      	add	r2, sp, #8
   1f538:	f00c f867 	bl	2b60a <at_params_array_put>
		tmpstr++;
   1f53c:	e7bb      	b.n	1f4b6 <at_parse_process_element+0xc2>
					tmpstr = next;
   1f53e:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f540:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1f544:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f546:	d0f2      	beq.n	1f52e <at_parse_process_element+0x13a>
				tmpstr++;
   1f548:	464c      	mov	r4, r9
   1f54a:	e7cd      	b.n	1f4e8 <at_parse_process_element+0xf4>
   1f54c:	46a1      	mov	r9, r4
   1f54e:	e7fb      	b.n	1f548 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   1f550:	2c04      	cmp	r4, #4
   1f552:	d10d      	bne.n	1f570 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f554:	220a      	movs	r2, #10
   1f556:	4628      	mov	r0, r5
   1f558:	a902      	add	r1, sp, #8
   1f55a:	f00a f9b9 	bl	298d0 <strtoll>
   1f55e:	460b      	mov	r3, r1
		tmpstr = next;
   1f560:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f562:	4602      	mov	r2, r0
		tmpstr = next;
   1f564:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1f566:	4630      	mov	r0, r6
   1f568:	4639      	mov	r1, r7
   1f56a:	f00c f811 	bl	2b590 <at_params_int_put>
   1f56e:	e77c      	b.n	1f46a <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   1f570:	2c05      	cmp	r4, #5
   1f572:	d10b      	bne.n	1f58c <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   1f574:	490d      	ldr	r1, [pc, #52]	; (1f5ac <at_parse_process_element+0x1b8>)
   1f576:	9b00      	ldr	r3, [sp, #0]
   1f578:	781a      	ldrb	r2, [r3, #0]
   1f57a:	5c52      	ldrb	r2, [r2, r1]
   1f57c:	f012 0f44 	tst.w	r2, #68	; 0x44
   1f580:	d101      	bne.n	1f586 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   1f582:	1b5b      	subs	r3, r3, r5
   1f584:	e74e      	b.n	1f424 <at_parse_process_element+0x30>
			tmpstr++;
   1f586:	3301      	adds	r3, #1
   1f588:	9300      	str	r3, [sp, #0]
   1f58a:	e7f4      	b.n	1f576 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   1f58c:	2c09      	cmp	r4, #9
   1f58e:	f47f af6c 	bne.w	1f46a <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   1f592:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f594:	781a      	ldrb	r2, [r3, #0]
   1f596:	2a00      	cmp	r2, #0
   1f598:	d0f3      	beq.n	1f582 <at_parse_process_element+0x18e>
			tmpstr++;
   1f59a:	3301      	adds	r3, #1
   1f59c:	9300      	str	r3, [sp, #0]
   1f59e:	e7f8      	b.n	1f592 <at_parse_process_element+0x19e>
		return -1;
   1f5a0:	f04f 30ff 	mov.w	r0, #4294967295
   1f5a4:	e765      	b.n	1f472 <at_parse_process_element+0x7e>
   1f5a6:	bf00      	nop
   1f5a8:	2000d551 	.word	0x2000d551
   1f5ac:	00030d52 	.word	0x00030d52
   1f5b0:	00024001 	.word	0x00024001

0001f5b4 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1f5b4:	b510      	push	{r4, lr}
   1f5b6:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1f5b8:	f7f9 ffc0 	bl	1953c <strlen>
   1f5bc:	2801      	cmp	r0, #1
   1f5be:	d922      	bls.n	1f606 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1f5c0:	7821      	ldrb	r1, [r4, #0]
   1f5c2:	4b13      	ldr	r3, [pc, #76]	; (1f610 <is_command+0x5c>)
   1f5c4:	5cca      	ldrb	r2, [r1, r3]
   1f5c6:	f002 0203 	and.w	r2, r2, #3
   1f5ca:	2a02      	cmp	r2, #2
   1f5cc:	bf08      	it	eq
   1f5ce:	3920      	subeq	r1, #32
   1f5d0:	2941      	cmp	r1, #65	; 0x41
   1f5d2:	461a      	mov	r2, r3
   1f5d4:	d117      	bne.n	1f606 <is_command+0x52>
   1f5d6:	7863      	ldrb	r3, [r4, #1]
   1f5d8:	5cd2      	ldrb	r2, [r2, r3]
   1f5da:	f002 0203 	and.w	r2, r2, #3
   1f5de:	2a02      	cmp	r2, #2
   1f5e0:	bf08      	it	eq
   1f5e2:	3b20      	subeq	r3, #32
   1f5e4:	2b54      	cmp	r3, #84	; 0x54
   1f5e6:	d10e      	bne.n	1f606 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f5e8:	78a2      	ldrb	r2, [r4, #2]
   1f5ea:	2a25      	cmp	r2, #37	; 0x25
   1f5ec:	d00d      	beq.n	1f60a <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1f5ee:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1f5f2:	2b23      	cmp	r3, #35	; 0x23
   1f5f4:	d009      	beq.n	1f60a <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1f5f6:	4610      	mov	r0, r2
   1f5f8:	f00b ff78 	bl	2b4ec <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1f5fc:	b910      	cbnz	r0, 1f604 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f5fe:	fab2 f082 	clz	r0, r2
   1f602:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1f604:	bd10      	pop	{r4, pc}
		return false;
   1f606:	2000      	movs	r0, #0
   1f608:	e7fc      	b.n	1f604 <is_command+0x50>
		return true;
   1f60a:	2001      	movs	r0, #1
   1f60c:	e7fa      	b.n	1f604 <is_command+0x50>
   1f60e:	bf00      	nop
   1f610:	00030d52 	.word	0x00030d52

0001f614 <at_parse_detect_type>:
{
   1f614:	b570      	push	{r4, r5, r6, lr}
   1f616:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   1f618:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1f61a:	4e64      	ldr	r6, [pc, #400]	; (1f7ac <at_parse_detect_type+0x198>)
   1f61c:	2900      	cmp	r1, #0
   1f61e:	d137      	bne.n	1f690 <at_parse_detect_type+0x7c>
   1f620:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f622:	2b2b      	cmp	r3, #43	; 0x2b
   1f624:	d001      	beq.n	1f62a <at_parse_detect_type+0x16>
   1f626:	2b25      	cmp	r3, #37	; 0x25
   1f628:	d132      	bne.n	1f690 <at_parse_detect_type+0x7c>
	state = new_state;
   1f62a:	2206      	movs	r2, #6
   1f62c:	4b60      	ldr	r3, [pc, #384]	; (1f7b0 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f62e:	4620      	mov	r0, r4
	state = new_state;
   1f630:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f632:	4960      	ldr	r1, [pc, #384]	; (1f7b4 <at_parse_detect_type+0x1a0>)
   1f634:	2205      	movs	r2, #5
   1f636:	f00d fc06 	bl	2ce46 <strncmp>
   1f63a:	b920      	cbnz	r0, 1f646 <at_parse_detect_type+0x32>
			retval = true;
   1f63c:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   1f63e:	7030      	strb	r0, [r6, #0]
	return 0;
   1f640:	2000      	movs	r0, #0
	*str = tmpstr;
   1f642:	602c      	str	r4, [r5, #0]
	return 0;
   1f644:	e064      	b.n	1f710 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f646:	2205      	movs	r2, #5
   1f648:	4620      	mov	r0, r4
   1f64a:	495b      	ldr	r1, [pc, #364]	; (1f7b8 <at_parse_detect_type+0x1a4>)
   1f64c:	f00d fbfb 	bl	2ce46 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f650:	2800      	cmp	r0, #0
   1f652:	d0f3      	beq.n	1f63c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f654:	220b      	movs	r2, #11
   1f656:	4620      	mov	r0, r4
   1f658:	4958      	ldr	r1, [pc, #352]	; (1f7bc <at_parse_detect_type+0x1a8>)
   1f65a:	f00d fbf4 	bl	2ce46 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f65e:	2800      	cmp	r0, #0
   1f660:	d0ec      	beq.n	1f63c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f662:	220a      	movs	r2, #10
   1f664:	4620      	mov	r0, r4
   1f666:	4956      	ldr	r1, [pc, #344]	; (1f7c0 <at_parse_detect_type+0x1ac>)
   1f668:	f00d fbed 	bl	2ce46 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f66c:	2800      	cmp	r0, #0
   1f66e:	d0e5      	beq.n	1f63c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f670:	220b      	movs	r2, #11
   1f672:	4620      	mov	r0, r4
   1f674:	4953      	ldr	r1, [pc, #332]	; (1f7c4 <at_parse_detect_type+0x1b0>)
   1f676:	f00d fbe6 	bl	2ce46 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f67a:	2800      	cmp	r0, #0
   1f67c:	d0de      	beq.n	1f63c <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1f67e:	2207      	movs	r2, #7
   1f680:	4620      	mov	r0, r4
   1f682:	4951      	ldr	r1, [pc, #324]	; (1f7c8 <at_parse_detect_type+0x1b4>)
   1f684:	f00d fbdf 	bl	2ce46 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f688:	fab0 f080 	clz	r0, r0
   1f68c:	0940      	lsrs	r0, r0, #5
   1f68e:	e7d6      	b.n	1f63e <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   1f690:	7833      	ldrb	r3, [r6, #0]
   1f692:	b113      	cbz	r3, 1f69a <at_parse_detect_type+0x86>
	state = new_state;
   1f694:	4b46      	ldr	r3, [pc, #280]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f696:	2202      	movs	r2, #2
   1f698:	e043      	b.n	1f722 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1f69a:	2900      	cmp	r1, #0
   1f69c:	dd39      	ble.n	1f712 <at_parse_detect_type+0xfe>
   1f69e:	4622      	mov	r2, r4
   1f6a0:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1f6a2:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f6a6:	f00b ff21 	bl	2b4ec <is_lfcr>
   1f6aa:	2800      	cmp	r0, #0
   1f6ac:	d1f8      	bne.n	1f6a0 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   1f6ae:	4630      	mov	r0, r6
   1f6b0:	f7f9 ff44 	bl	1953c <strlen>
   1f6b4:	2803      	cmp	r0, #3
   1f6b6:	d970      	bls.n	1f79a <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1f6b8:	7832      	ldrb	r2, [r6, #0]
   1f6ba:	4b44      	ldr	r3, [pc, #272]	; (1f7cc <at_parse_detect_type+0x1b8>)
   1f6bc:	5cd1      	ldrb	r1, [r2, r3]
   1f6be:	f001 0103 	and.w	r1, r1, #3
   1f6c2:	2902      	cmp	r1, #2
   1f6c4:	bf08      	it	eq
   1f6c6:	3a20      	subeq	r2, #32
   1f6c8:	2a41      	cmp	r2, #65	; 0x41
   1f6ca:	d166      	bne.n	1f79a <at_parse_detect_type+0x186>
   1f6cc:	7872      	ldrb	r2, [r6, #1]
   1f6ce:	5c99      	ldrb	r1, [r3, r2]
   1f6d0:	f001 0103 	and.w	r1, r1, #3
   1f6d4:	2902      	cmp	r1, #2
   1f6d6:	bf08      	it	eq
   1f6d8:	3a20      	subeq	r2, #32
   1f6da:	2a54      	cmp	r2, #84	; 0x54
   1f6dc:	d15d      	bne.n	1f79a <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1f6de:	78b2      	ldrb	r2, [r6, #2]
   1f6e0:	5c99      	ldrb	r1, [r3, r2]
   1f6e2:	f001 0103 	and.w	r1, r1, #3
   1f6e6:	2902      	cmp	r1, #2
   1f6e8:	bf08      	it	eq
   1f6ea:	3a20      	subeq	r2, #32
   1f6ec:	2a2b      	cmp	r2, #43	; 0x2b
   1f6ee:	d00a      	beq.n	1f706 <at_parse_detect_type+0xf2>
   1f6f0:	2a25      	cmp	r2, #37	; 0x25
   1f6f2:	d152      	bne.n	1f79a <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1f6f4:	78f2      	ldrb	r2, [r6, #3]
   1f6f6:	5c9b      	ldrb	r3, [r3, r2]
   1f6f8:	f003 0303 	and.w	r3, r3, #3
   1f6fc:	2b02      	cmp	r3, #2
   1f6fe:	bf08      	it	eq
   1f700:	3a20      	subeq	r2, #32
   1f702:	2a58      	cmp	r2, #88	; 0x58
   1f704:	d049      	beq.n	1f79a <at_parse_detect_type+0x186>
	state = new_state;
   1f706:	2209      	movs	r2, #9
		return -2;
   1f708:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1f70c:	4b28      	ldr	r3, [pc, #160]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f70e:	701a      	strb	r2, [r3, #0]
}
   1f710:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1f712:	d108      	bne.n	1f726 <at_parse_detect_type+0x112>
   1f714:	4620      	mov	r0, r4
   1f716:	f7ff ff4d 	bl	1f5b4 <is_command>
   1f71a:	4b25      	ldr	r3, [pc, #148]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f71c:	2800      	cmp	r0, #0
   1f71e:	d0ba      	beq.n	1f696 <at_parse_detect_type+0x82>
	state = new_state;
   1f720:	2207      	movs	r2, #7
   1f722:	701a      	strb	r2, [r3, #0]
}
   1f724:	e78c      	b.n	1f640 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   1f726:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1f728:	4b28      	ldr	r3, [pc, #160]	; (1f7cc <at_parse_detect_type+0x1b8>)
   1f72a:	5cd3      	ldrb	r3, [r2, r3]
   1f72c:	0759      	lsls	r1, r3, #29
   1f72e:	d403      	bmi.n	1f738 <at_parse_detect_type+0x124>
   1f730:	2a2d      	cmp	r2, #45	; 0x2d
   1f732:	d001      	beq.n	1f738 <at_parse_detect_type+0x124>
   1f734:	2a2b      	cmp	r2, #43	; 0x2b
   1f736:	d102      	bne.n	1f73e <at_parse_detect_type+0x12a>
	state = new_state;
   1f738:	2204      	movs	r2, #4
   1f73a:	4b1d      	ldr	r3, [pc, #116]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f73c:	e7f1      	b.n	1f722 <at_parse_detect_type+0x10e>
	if (chr == '"') {
   1f73e:	2a22      	cmp	r2, #34	; 0x22
   1f740:	d006      	beq.n	1f750 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   1f742:	2a28      	cmp	r2, #40	; 0x28
   1f744:	d109      	bne.n	1f75a <at_parse_detect_type+0x146>
   1f746:	2201      	movs	r2, #1
   1f748:	4b19      	ldr	r3, [pc, #100]	; (1f7b0 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1f74a:	4414      	add	r4, r2
	state = new_state;
   1f74c:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1f74e:	e777      	b.n	1f640 <at_parse_detect_type+0x2c>
	state = new_state;
   1f750:	2203      	movs	r2, #3
   1f752:	4b17      	ldr	r3, [pc, #92]	; (1f7b0 <at_parse_detect_type+0x19c>)
		tmpstr++;
   1f754:	3401      	adds	r4, #1
	state = new_state;
   1f756:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1f758:	e772      	b.n	1f640 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1f75a:	4610      	mov	r0, r2
   1f75c:	f00b fec6 	bl	2b4ec <is_lfcr>
   1f760:	b178      	cbz	r0, 1f782 <at_parse_detect_type+0x16e>
   1f762:	4913      	ldr	r1, [pc, #76]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f764:	7808      	ldrb	r0, [r1, #0]
   1f766:	2804      	cmp	r0, #4
   1f768:	d108      	bne.n	1f77c <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   1f76a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1f76e:	f00b febd 	bl	2b4ec <is_lfcr>
   1f772:	2800      	cmp	r0, #0
   1f774:	d1f9      	bne.n	1f76a <at_parse_detect_type+0x156>
	state = new_state;
   1f776:	2305      	movs	r3, #5
   1f778:	700b      	strb	r3, [r1, #0]
}
   1f77a:	e761      	b.n	1f640 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1f77c:	2808      	cmp	r0, #8
   1f77e:	f43f af5f 	beq.w	1f640 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f782:	3a2c      	subs	r2, #44	; 0x2c
   1f784:	b2d2      	uxtb	r2, r2
   1f786:	2a11      	cmp	r2, #17
   1f788:	d80c      	bhi.n	1f7a4 <at_parse_detect_type+0x190>
   1f78a:	4b11      	ldr	r3, [pc, #68]	; (1f7d0 <at_parse_detect_type+0x1bc>)
   1f78c:	fa23 f202 	lsr.w	r2, r3, r2
   1f790:	07d3      	lsls	r3, r2, #31
   1f792:	d507      	bpl.n	1f7a4 <at_parse_detect_type+0x190>
	state = new_state;
   1f794:	2208      	movs	r2, #8
   1f796:	4b06      	ldr	r3, [pc, #24]	; (1f7b0 <at_parse_detect_type+0x19c>)
   1f798:	e7c3      	b.n	1f722 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1f79a:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f79c:	2b2b      	cmp	r3, #43	; 0x2b
   1f79e:	d001      	beq.n	1f7a4 <at_parse_detect_type+0x190>
   1f7a0:	2b25      	cmp	r3, #37	; 0x25
   1f7a2:	d1c0      	bne.n	1f726 <at_parse_detect_type+0x112>
		return -1;
   1f7a4:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   1f7a8:	602c      	str	r4, [r5, #0]
		return -1;
   1f7aa:	e7b1      	b.n	1f710 <at_parse_detect_type+0xfc>
   1f7ac:	2000d550 	.word	0x2000d550
   1f7b0:	2000d551 	.word	0x2000d551
   1f7b4:	0002f45d 	.word	0x0002f45d
   1f7b8:	0002f463 	.word	0x0002f463
   1f7bc:	0002f469 	.word	0x0002f469
   1f7c0:	0002f475 	.word	0x0002f475
   1f7c4:	0002f480 	.word	0x0002f480
   1f7c8:	0002f48c 	.word	0x0002f48c
   1f7cc:	00030d52 	.word	0x00030d52
   1f7d0:	00024001 	.word	0x00024001

0001f7d4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7d8:	4689      	mov	r9, r1
   1f7da:	4616      	mov	r6, r2
   1f7dc:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1f7de:	4680      	mov	r8, r0
{
   1f7e0:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1f7e2:	2800      	cmp	r0, #0
   1f7e4:	f000 8097 	beq.w	1f916 <at_parser_max_params_from_str+0x142>
   1f7e8:	2a00      	cmp	r2, #0
   1f7ea:	f000 8094 	beq.w	1f916 <at_parser_max_params_from_str+0x142>
   1f7ee:	6853      	ldr	r3, [r2, #4]
   1f7f0:	2b00      	cmp	r3, #0
   1f7f2:	f000 8090 	beq.w	1f916 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   1f7f6:	2500      	movs	r5, #0
	int index = 0;
   1f7f8:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   1f7fa:	4610      	mov	r0, r2
   1f7fc:	f000 f8e8 	bl	1f9d0 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1f800:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1f802:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   1f806:	429f      	cmp	r7, r3
   1f808:	bf28      	it	cs
   1f80a:	461f      	movcs	r7, r3
	state = IDLE;
   1f80c:	4b43      	ldr	r3, [pc, #268]	; (1f91c <at_parser_max_params_from_str+0x148>)
   1f80e:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   1f810:	4b43      	ldr	r3, [pc, #268]	; (1f920 <at_parser_max_params_from_str+0x14c>)
   1f812:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1f814:	9b03      	ldr	r3, [sp, #12]
   1f816:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f818:	2a00      	cmp	r2, #0
   1f81a:	d055      	beq.n	1f8c8 <at_parser_max_params_from_str+0xf4>
   1f81c:	42a7      	cmp	r7, r4
   1f81e:	d953      	bls.n	1f8c8 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1f820:	4940      	ldr	r1, [pc, #256]	; (1f924 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   1f822:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   1f824:	5c52      	ldrb	r2, [r2, r1]
   1f826:	0711      	lsls	r1, r2, #28
			str++;
   1f828:	bf48      	it	mi
   1f82a:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1f82c:	4621      	mov	r1, r4
			str++;
   1f82e:	bf48      	it	mi
   1f830:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   1f832:	f7ff feef 	bl	1f614 <at_parse_detect_type>
		if (ret == -1) {
   1f836:	1c42      	adds	r2, r0, #1
   1f838:	d046      	beq.n	1f8c8 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1f83a:	3002      	adds	r0, #2
			index = 0;
   1f83c:	bf08      	it	eq
   1f83e:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1f840:	4632      	mov	r2, r6
   1f842:	4621      	mov	r1, r4
   1f844:	a803      	add	r0, sp, #12
			str = *at_params_str;
   1f846:	bf08      	it	eq
   1f848:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   1f84c:	f7ff fdd2 	bl	1f3f4 <at_parse_process_element>
   1f850:	3001      	adds	r0, #1
   1f852:	d039      	beq.n	1f8c8 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1f854:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f856:	7813      	ldrb	r3, [r2, #0]
   1f858:	3b2c      	subs	r3, #44	; 0x2c
   1f85a:	b2db      	uxtb	r3, r3
   1f85c:	2b11      	cmp	r3, #17
   1f85e:	d81b      	bhi.n	1f898 <at_parser_max_params_from_str+0xc4>
   1f860:	4931      	ldr	r1, [pc, #196]	; (1f928 <at_parser_max_params_from_str+0x154>)
   1f862:	fa21 f303 	lsr.w	r3, r1, r3
   1f866:	07db      	lsls	r3, r3, #31
   1f868:	d516      	bpl.n	1f898 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   1f86a:	7850      	ldrb	r0, [r2, #1]
   1f86c:	f00b fe3e 	bl	2b4ec <is_lfcr>
   1f870:	b178      	cbz	r0, 1f892 <at_parser_max_params_from_str+0xbe>
				index++;
   1f872:	3401      	adds	r4, #1
				if (index == max_params) {
   1f874:	42bc      	cmp	r4, r7
   1f876:	d046      	beq.n	1f906 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   1f878:	4621      	mov	r1, r4
   1f87a:	a803      	add	r0, sp, #12
   1f87c:	f7ff feca 	bl	1f614 <at_parse_detect_type>
   1f880:	3001      	adds	r0, #1
   1f882:	d021      	beq.n	1f8c8 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1f884:	4632      	mov	r2, r6
   1f886:	4621      	mov	r1, r4
   1f888:	a803      	add	r0, sp, #12
   1f88a:	f7ff fdb3 	bl	1f3f4 <at_parse_process_element>
   1f88e:	3001      	adds	r0, #1
   1f890:	d01a      	beq.n	1f8c8 <at_parser_max_params_from_str+0xf4>
			str++;
   1f892:	9b03      	ldr	r3, [sp, #12]
   1f894:	3301      	adds	r3, #1
   1f896:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   1f898:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f89c:	f89b 0000 	ldrb.w	r0, [fp]
   1f8a0:	f00b fe24 	bl	2b4ec <is_lfcr>
   1f8a4:	b350      	cbz	r0, 1f8fc <at_parser_max_params_from_str+0x128>
   1f8a6:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   1f8aa:	eba1 0a0b 	sub.w	sl, r1, fp
   1f8ae:	9101      	str	r1, [sp, #4]
   1f8b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f8b4:	4610      	mov	r0, r2
   1f8b6:	f00b fe19 	bl	2b4ec <is_lfcr>
   1f8ba:	9b01      	ldr	r3, [sp, #4]
   1f8bc:	2800      	cmp	r0, #0
   1f8be:	d1f4      	bne.n	1f8aa <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f8c0:	b99a      	cbnz	r2, 1f8ea <at_parser_max_params_from_str+0x116>
				str += i;
   1f8c2:	9b03      	ldr	r3, [sp, #12]
   1f8c4:	4453      	add	r3, sl
   1f8c6:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   1f8c8:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   1f8ca:	b9f5      	cbnz	r5, 1f90a <at_parser_max_params_from_str+0x136>
   1f8cc:	7823      	ldrb	r3, [r4, #0]
   1f8ce:	b11b      	cbz	r3, 1f8d8 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   1f8d0:	4620      	mov	r0, r4
   1f8d2:	f7ff fd77 	bl	1f3c4 <is_result>
   1f8d6:	b1d8      	cbz	r0, 1f910 <at_parser_max_params_from_str+0x13c>
	return 0;
   1f8d8:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1f8da:	f1b9 0f00 	cmp.w	r9, #0
   1f8de:	d001      	beq.n	1f8e4 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   1f8e0:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   1f8e4:	b005      	add	sp, #20
   1f8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f8ea:	2a2b      	cmp	r2, #43	; 0x2b
   1f8ec:	d0e9      	beq.n	1f8c2 <at_parser_max_params_from_str+0xee>
   1f8ee:	2a25      	cmp	r2, #37	; 0x25
   1f8f0:	d0e7      	beq.n	1f8c2 <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   1f8f2:	4618      	mov	r0, r3
   1f8f4:	f7ff fd66 	bl	1f3c4 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1f8f8:	2800      	cmp	r0, #0
   1f8fa:	d1e2      	bne.n	1f8c2 <at_parser_max_params_from_str+0xee>
		index++;
   1f8fc:	3401      	adds	r4, #1
			oversized = true;
   1f8fe:	42bc      	cmp	r4, r7
   1f900:	bf08      	it	eq
   1f902:	2501      	moveq	r5, #1
   1f904:	e786      	b.n	1f814 <at_parser_max_params_from_str+0x40>
					oversized = true;
   1f906:	4605      	mov	r5, r0
   1f908:	e7de      	b.n	1f8c8 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   1f90a:	f06f 0006 	mvn.w	r0, #6
   1f90e:	e7e4      	b.n	1f8da <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   1f910:	f06f 000a 	mvn.w	r0, #10
   1f914:	e7e1      	b.n	1f8da <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   1f916:	f06f 0015 	mvn.w	r0, #21
   1f91a:	e7e3      	b.n	1f8e4 <at_parser_max_params_from_str+0x110>
   1f91c:	2000d551 	.word	0x2000d551
   1f920:	2000d550 	.word	0x2000d550
   1f924:	00030d52 	.word	0x00030d52
   1f928:	00024001 	.word	0x00024001

0001f92c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1f92c:	b538      	push	{r3, r4, r5, lr}
   1f92e:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1f930:	4604      	mov	r4, r0
   1f932:	b940      	cbnz	r0, 1f946 <at_params_get+0x1a>
   1f934:	4908      	ldr	r1, [pc, #32]	; (1f958 <at_params_get+0x2c>)
   1f936:	4809      	ldr	r0, [pc, #36]	; (1f95c <at_params_get+0x30>)
   1f938:	222b      	movs	r2, #43	; 0x2b
   1f93a:	f00a ffb3 	bl	2a8a4 <printk>
   1f93e:	212b      	movs	r1, #43	; 0x2b
   1f940:	4805      	ldr	r0, [pc, #20]	; (1f958 <at_params_get+0x2c>)
   1f942:	f00b f948 	bl	2abd6 <assert_post_action>

	if (index >= list->param_count) {
   1f946:	6823      	ldr	r3, [r4, #0]
   1f948:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1f94a:	bf8a      	itet	hi
   1f94c:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   1f94e:	2000      	movls	r0, #0
	return &param[index];
   1f950:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   1f954:	bd38      	pop	{r3, r4, r5, pc}
   1f956:	bf00      	nop
   1f958:	0002f4b7 	.word	0x0002f4b7
   1f95c:	0002e574 	.word	0x0002e574

0001f960 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1f960:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1f962:	4604      	mov	r4, r0
   1f964:	b940      	cbnz	r0, 1f978 <at_param_size+0x18>
   1f966:	490a      	ldr	r1, [pc, #40]	; (1f990 <at_param_size+0x30>)
   1f968:	480a      	ldr	r0, [pc, #40]	; (1f994 <at_param_size+0x34>)
   1f96a:	2239      	movs	r2, #57	; 0x39
   1f96c:	f00a ff9a 	bl	2a8a4 <printk>
   1f970:	2139      	movs	r1, #57	; 0x39
   1f972:	4807      	ldr	r0, [pc, #28]	; (1f990 <at_param_size+0x30>)
   1f974:	f00b f92f 	bl	2abd6 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1f978:	7823      	ldrb	r3, [r4, #0]
   1f97a:	2b01      	cmp	r3, #1
   1f97c:	d004      	beq.n	1f988 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1f97e:	3b02      	subs	r3, #2
   1f980:	2b01      	cmp	r3, #1
   1f982:	d803      	bhi.n	1f98c <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1f984:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   1f986:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   1f988:	2008      	movs	r0, #8
   1f98a:	e7fc      	b.n	1f986 <at_param_size+0x26>
	return 0;
   1f98c:	2000      	movs	r0, #0
   1f98e:	e7fa      	b.n	1f986 <at_param_size+0x26>
   1f990:	0002f4b7 	.word	0x0002f4b7
   1f994:	0002e574 	.word	0x0002e574

0001f998 <at_param_clear>:
{
   1f998:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1f99a:	4604      	mov	r4, r0
   1f99c:	b940      	cbnz	r0, 1f9b0 <at_param_clear+0x18>
   1f99e:	490a      	ldr	r1, [pc, #40]	; (1f9c8 <at_param_clear+0x30>)
   1f9a0:	480a      	ldr	r0, [pc, #40]	; (1f9cc <at_param_clear+0x34>)
   1f9a2:	221d      	movs	r2, #29
   1f9a4:	f00a ff7e 	bl	2a8a4 <printk>
   1f9a8:	211d      	movs	r1, #29
   1f9aa:	4807      	ldr	r0, [pc, #28]	; (1f9c8 <at_param_clear+0x30>)
   1f9ac:	f00b f913 	bl	2abd6 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1f9b0:	7823      	ldrb	r3, [r4, #0]
   1f9b2:	3b02      	subs	r3, #2
   1f9b4:	2b01      	cmp	r3, #1
   1f9b6:	d802      	bhi.n	1f9be <at_param_clear+0x26>
		k_free(param->value.str_val);
   1f9b8:	68a0      	ldr	r0, [r4, #8]
   1f9ba:	f00d f8ce 	bl	2cb5a <k_free>
	param->value.int_val = 0;
   1f9be:	2200      	movs	r2, #0
   1f9c0:	2300      	movs	r3, #0
   1f9c2:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1f9c6:	bd10      	pop	{r4, pc}
   1f9c8:	0002f4b7 	.word	0x0002f4b7
   1f9cc:	0002e574 	.word	0x0002e574

0001f9d0 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1f9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   1f9d4:	4604      	mov	r4, r0
   1f9d6:	b140      	cbz	r0, 1f9ea <at_params_list_clear+0x1a>
   1f9d8:	6843      	ldr	r3, [r0, #4]
   1f9da:	b133      	cbz	r3, 1f9ea <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1f9dc:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1f9de:	4f0f      	ldr	r7, [pc, #60]	; (1fa1c <at_params_list_clear+0x4c>)
   1f9e0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1fa20 <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   1f9e4:	6823      	ldr	r3, [r4, #0]
   1f9e6:	429e      	cmp	r6, r3
   1f9e8:	d301      	bcc.n	1f9ee <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   1f9ee:	6865      	ldr	r5, [r4, #4]
   1f9f0:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1f9f4:	4628      	mov	r0, r5
   1f9f6:	f7ff ffcf 	bl	1f998 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1f9fa:	b945      	cbnz	r5, 1fa0e <at_params_list_clear+0x3e>
   1f9fc:	4639      	mov	r1, r7
   1f9fe:	4640      	mov	r0, r8
   1fa00:	2214      	movs	r2, #20
   1fa02:	f00a ff4f 	bl	2a8a4 <printk>
   1fa06:	2114      	movs	r1, #20
   1fa08:	4638      	mov	r0, r7
   1fa0a:	f00b f8e4 	bl	2abd6 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1fa0e:	2210      	movs	r2, #16
   1fa10:	2100      	movs	r1, #0
   1fa12:	4628      	mov	r0, r5
   1fa14:	f00d f8ea 	bl	2cbec <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1fa18:	3601      	adds	r6, #1
   1fa1a:	e7e3      	b.n	1f9e4 <at_params_list_clear+0x14>
   1fa1c:	0002f4b7 	.word	0x0002f4b7
   1fa20:	0002e574 	.word	0x0002e574

0001fa24 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   1fa24:	b510      	push	{r4, lr}
   1fa26:	4604      	mov	r4, r0
   1fa28:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fa2a:	2240      	movs	r2, #64	; 0x40
   1fa2c:	2100      	movs	r1, #0
   1fa2e:	4668      	mov	r0, sp
   1fa30:	f00d f8dc 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fa34:	b954      	cbnz	r4, 1fa4c <at_handler_cscon+0x28>
   1fa36:	490f      	ldr	r1, [pc, #60]	; (1fa74 <at_handler_cscon+0x50>)
   1fa38:	480f      	ldr	r0, [pc, #60]	; (1fa78 <at_handler_cscon+0x54>)
   1fa3a:	f44f 7293 	mov.w	r2, #294	; 0x126
   1fa3e:	f00a ff31 	bl	2a8a4 <printk>
   1fa42:	f44f 7193 	mov.w	r1, #294	; 0x126
   1fa46:	480b      	ldr	r0, [pc, #44]	; (1fa74 <at_handler_cscon+0x50>)
   1fa48:	f00b f8c5 	bl	2abd6 <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1fa4c:	2201      	movs	r2, #1
   1fa4e:	4620      	mov	r0, r4
   1fa50:	a902      	add	r1, sp, #8
   1fa52:	f000 fe01 	bl	20658 <parse_rrc_mode>
	if (err) {
   1fa56:	4602      	mov	r2, r0
   1fa58:	b128      	cbz	r0, 1fa66 <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1fa5a:	2145      	movs	r1, #69	; 0x45
   1fa5c:	4807      	ldr	r0, [pc, #28]	; (1fa7c <at_handler_cscon+0x58>)
   1fa5e:	f00b f8e0 	bl	2ac22 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   1fa62:	b010      	add	sp, #64	; 0x40
   1fa64:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1fa66:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1fa68:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1fa6a:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fa6e:	f000 fd21 	bl	204b4 <event_handler_list_dispatch>
   1fa72:	e7f6      	b.n	1fa62 <at_handler_cscon+0x3e>
   1fa74:	0002f4e5 	.word	0x0002f4e5
   1fa78:	0002e574 	.word	0x0002e574
   1fa7c:	0002f513 	.word	0x0002f513

0001fa80 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   1fa80:	b510      	push	{r4, lr}
   1fa82:	4604      	mov	r4, r0
   1fa84:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fa86:	2240      	movs	r2, #64	; 0x40
   1fa88:	2100      	movs	r1, #0
   1fa8a:	4668      	mov	r0, sp
   1fa8c:	f00d f8ae 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fa90:	b954      	cbnz	r4, 1faa8 <at_handler_cedrxp+0x28>
   1fa92:	490f      	ldr	r1, [pc, #60]	; (1fad0 <at_handler_cedrxp+0x50>)
   1fa94:	480f      	ldr	r0, [pc, #60]	; (1fad4 <at_handler_cedrxp+0x54>)
   1fa96:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fa9a:	f00a ff03 	bl	2a8a4 <printk>
   1fa9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1faa2:	480b      	ldr	r0, [pc, #44]	; (1fad0 <at_handler_cedrxp+0x50>)
   1faa4:	f00b f897 	bl	2abd6 <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   1faa8:	4620      	mov	r0, r4
   1faaa:	a902      	add	r1, sp, #8
   1faac:	f7f9 feec 	bl	19888 <parse_edrx>
	if (err) {
   1fab0:	4602      	mov	r2, r0
   1fab2:	b128      	cbz	r0, 1fac0 <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1fab4:	2145      	movs	r1, #69	; 0x45
   1fab6:	4808      	ldr	r0, [pc, #32]	; (1fad8 <at_handler_cedrxp+0x58>)
   1fab8:	f00b f8b3 	bl	2ac22 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   1fabc:	b010      	add	sp, #64	; 0x40
   1fabe:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1fac0:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1fac2:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1fac4:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fac8:	f000 fcf4 	bl	204b4 <event_handler_list_dispatch>
   1facc:	e7f6      	b.n	1fabc <at_handler_cedrxp+0x3c>
   1face:	bf00      	nop
   1fad0:	0002f4e5 	.word	0x0002f4e5
   1fad4:	0002e574 	.word	0x0002e574
   1fad8:	0002f53f 	.word	0x0002f53f

0001fadc <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   1fadc:	b510      	push	{r4, lr}
   1fade:	4604      	mov	r4, r0
   1fae0:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fae2:	2240      	movs	r2, #64	; 0x40
   1fae4:	2100      	movs	r1, #0
   1fae6:	4668      	mov	r0, sp
   1fae8:	f00d f880 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1faec:	b954      	cbnz	r4, 1fb04 <at_handler_xt3412+0x28>
   1faee:	4913      	ldr	r1, [pc, #76]	; (1fb3c <at_handler_xt3412+0x60>)
   1faf0:	4813      	ldr	r0, [pc, #76]	; (1fb40 <at_handler_xt3412+0x64>)
   1faf2:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1faf6:	f00a fed5 	bl	2a8a4 <printk>
   1fafa:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1fafe:	480f      	ldr	r0, [pc, #60]	; (1fb3c <at_handler_xt3412+0x60>)
   1fb00:	f00b f869 	bl	2abd6 <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   1fb04:	4620      	mov	r0, r4
   1fb06:	a902      	add	r1, sp, #8
   1fb08:	f000 fec2 	bl	20890 <parse_xt3412>
	if (err) {
   1fb0c:	4602      	mov	r2, r0
   1fb0e:	b128      	cbz	r0, 1fb1c <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1fb10:	2145      	movs	r1, #69	; 0x45
   1fb12:	480c      	ldr	r0, [pc, #48]	; (1fb44 <at_handler_xt3412+0x68>)
   1fb14:	f00b f885 	bl	2ac22 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   1fb18:	b010      	add	sp, #64	; 0x40
   1fb1a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1fb1c:	2300      	movs	r3, #0
   1fb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fb22:	f241 3288 	movw	r2, #5000	; 0x1388
   1fb26:	4299      	cmp	r1, r3
   1fb28:	bf08      	it	eq
   1fb2a:	4290      	cmpeq	r0, r2
   1fb2c:	d1f4      	bne.n	1fb18 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1fb2e:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1fb30:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1fb32:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fb36:	f000 fcbd 	bl	204b4 <event_handler_list_dispatch>
   1fb3a:	e7ed      	b.n	1fb18 <at_handler_xt3412+0x3c>
   1fb3c:	0002f4e5 	.word	0x0002f4e5
   1fb40:	0002e574 	.word	0x0002e574
   1fb44:	0002f560 	.word	0x0002f560

0001fb48 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   1fb48:	b530      	push	{r4, r5, lr}
   1fb4a:	4605      	mov	r5, r0
   1fb4c:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   1fb4e:	2240      	movs	r2, #64	; 0x40
   1fb50:	2100      	movs	r1, #0
   1fb52:	4668      	mov	r0, sp
   1fb54:	f00d f84a 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fb58:	b955      	cbnz	r5, 1fb70 <at_handler_ncellmeas+0x28>
   1fb5a:	4921      	ldr	r1, [pc, #132]	; (1fbe0 <at_handler_ncellmeas+0x98>)
   1fb5c:	4821      	ldr	r0, [pc, #132]	; (1fbe4 <at_handler_ncellmeas+0x9c>)
   1fb5e:	f240 126f 	movw	r2, #367	; 0x16f
   1fb62:	f00a fe9f 	bl	2a8a4 <printk>
   1fb66:	f240 116f 	movw	r1, #367	; 0x16f
   1fb6a:	481d      	ldr	r0, [pc, #116]	; (1fbe0 <at_handler_ncellmeas+0x98>)
   1fb6c:	f00b f833 	bl	2abd6 <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   1fb70:	4628      	mov	r0, r5
   1fb72:	f000 fedb 	bl	2092c <neighborcell_count_get>
   1fb76:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   1fb78:	f000 fc66 	bl	20448 <event_handler_list_is_empty>
   1fb7c:	b950      	cbnz	r0, 1fb94 <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   1fb7e:	b15c      	cbz	r4, 1fb98 <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1fb80:	4620      	mov	r0, r4
   1fb82:	2110      	movs	r1, #16
   1fb84:	f00c fff4 	bl	2cb70 <k_calloc>
		if (neighbor_cells == NULL) {
   1fb88:	4604      	mov	r4, r0
   1fb8a:	b928      	cbnz	r0, 1fb98 <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1fb8c:	2145      	movs	r1, #69	; 0x45
   1fb8e:	4816      	ldr	r0, [pc, #88]	; (1fbe8 <at_handler_ncellmeas+0xa0>)
   1fb90:	f00b f847 	bl	2ac22 <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   1fb94:	b011      	add	sp, #68	; 0x44
   1fb96:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   1fb98:	4628      	mov	r0, r5
   1fb9a:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   1fb9c:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   1fb9e:	f000 fee1 	bl	20964 <parse_ncellmeas>
	switch (err) {
   1fba2:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   1fba4:	4602      	mov	r2, r0
	switch (err) {
   1fba6:	d006      	beq.n	1fbb6 <at_handler_ncellmeas+0x6e>
   1fba8:	2801      	cmp	r0, #1
   1fbaa:	d90d      	bls.n	1fbc8 <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1fbac:	2145      	movs	r1, #69	; 0x45
   1fbae:	480f      	ldr	r0, [pc, #60]	; (1fbec <at_handler_ncellmeas+0xa4>)
   1fbb0:	f00b f837 	bl	2ac22 <z_log_minimal_printk>
   1fbb4:	e00e      	b.n	1fbd4 <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   1fbb6:	2157      	movs	r1, #87	; 0x57
   1fbb8:	480d      	ldr	r0, [pc, #52]	; (1fbf0 <at_handler_ncellmeas+0xa8>)
   1fbba:	f00b f832 	bl	2ac22 <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   1fbbe:	220a      	movs	r2, #10
   1fbc0:	2157      	movs	r1, #87	; 0x57
   1fbc2:	480c      	ldr	r0, [pc, #48]	; (1fbf4 <at_handler_ncellmeas+0xac>)
   1fbc4:	f00b f82d 	bl	2ac22 <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fbc8:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1fbca:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fbcc:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   1fbd0:	f000 fc70 	bl	204b4 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1fbd4:	2c00      	cmp	r4, #0
   1fbd6:	d0dd      	beq.n	1fb94 <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   1fbd8:	4620      	mov	r0, r4
   1fbda:	f00c ffbe 	bl	2cb5a <k_free>
   1fbde:	e7d9      	b.n	1fb94 <at_handler_ncellmeas+0x4c>
   1fbe0:	0002f4e5 	.word	0x0002f4e5
   1fbe4:	0002e574 	.word	0x0002e574
   1fbe8:	0002f599 	.word	0x0002f599
   1fbec:	0002f636 	.word	0x0002f636
   1fbf0:	0002f5cb 	.word	0x0002f5cb
   1fbf4:	0002f5f7 	.word	0x0002f5f7

0001fbf8 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   1fbf8:	b510      	push	{r4, lr}
   1fbfa:	4604      	mov	r4, r0
   1fbfc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fbfe:	2240      	movs	r2, #64	; 0x40
   1fc00:	2100      	movs	r1, #0
   1fc02:	4668      	mov	r0, sp
   1fc04:	f00c fff2 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fc08:	b954      	cbnz	r4, 1fc20 <at_handler_xmodemsleep+0x28>
   1fc0a:	4919      	ldr	r1, [pc, #100]	; (1fc70 <at_handler_xmodemsleep+0x78>)
   1fc0c:	4819      	ldr	r0, [pc, #100]	; (1fc74 <at_handler_xmodemsleep+0x7c>)
   1fc0e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1fc12:	f00a fe47 	bl	2a8a4 <printk>
   1fc16:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1fc1a:	4815      	ldr	r0, [pc, #84]	; (1fc70 <at_handler_xmodemsleep+0x78>)
   1fc1c:	f00a ffdb 	bl	2abd6 <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1fc20:	4620      	mov	r0, r4
   1fc22:	a902      	add	r1, sp, #8
   1fc24:	f000 ffe8 	bl	20bf8 <parse_xmodemsleep>
	if (err) {
   1fc28:	4602      	mov	r2, r0
   1fc2a:	b128      	cbz	r0, 1fc38 <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1fc2c:	2145      	movs	r1, #69	; 0x45
   1fc2e:	4812      	ldr	r0, [pc, #72]	; (1fc78 <at_handler_xmodemsleep+0x80>)
   1fc30:	f00a fff7 	bl	2ac22 <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   1fc34:	b010      	add	sp, #64	; 0x40
   1fc36:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1fc38:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1fc3c:	1e5a      	subs	r2, r3, #1
   1fc3e:	2a01      	cmp	r2, #1
   1fc40:	d901      	bls.n	1fc46 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1fc42:	2b04      	cmp	r3, #4
   1fc44:	d1f6      	bne.n	1fc34 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1fc46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fc4a:	2100      	movs	r1, #0
   1fc4c:	f241 3088 	movw	r0, #5000	; 0x1388
   1fc50:	428b      	cmp	r3, r1
   1fc52:	bf08      	it	eq
   1fc54:	4282      	cmpeq	r2, r0
   1fc56:	d106      	bne.n	1fc66 <at_handler_xmodemsleep+0x6e>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1fc58:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   1fc5a:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   1fc5c:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fc60:	f000 fc28 	bl	204b4 <event_handler_list_dispatch>
   1fc64:	e7e6      	b.n	1fc34 <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   1fc66:	4313      	orrs	r3, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   1fc68:	bf0c      	ite	eq
   1fc6a:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   1fc6c:	230a      	movne	r3, #10
   1fc6e:	e7f4      	b.n	1fc5a <at_handler_xmodemsleep+0x62>
   1fc70:	0002f4e5 	.word	0x0002f4e5
   1fc74:	0002e574 	.word	0x0002e574
   1fc78:	0002f665 	.word	0x0002f665

0001fc7c <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   1fc7c:	b510      	push	{r4, lr}
   1fc7e:	4604      	mov	r4, r0
   1fc80:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fc82:	2240      	movs	r2, #64	; 0x40
   1fc84:	2100      	movs	r1, #0
   1fc86:	4668      	mov	r0, sp
   1fc88:	f00c ffb0 	bl	2cbec <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fc8c:	b954      	cbnz	r4, 1fca4 <at_handler_mdmev+0x28>
   1fc8e:	490f      	ldr	r1, [pc, #60]	; (1fccc <at_handler_mdmev+0x50>)
   1fc90:	480f      	ldr	r0, [pc, #60]	; (1fcd0 <at_handler_mdmev+0x54>)
   1fc92:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
   1fc96:	f00a fe05 	bl	2a8a4 <printk>
   1fc9a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1fc9e:	480b      	ldr	r0, [pc, #44]	; (1fccc <at_handler_mdmev+0x50>)
   1fca0:	f00a ff99 	bl	2abd6 <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   1fca4:	4620      	mov	r0, r4
   1fca6:	a902      	add	r1, sp, #8
   1fca8:	f001 f802 	bl	20cb0 <parse_mdmev>
	if (err) {
   1fcac:	4602      	mov	r2, r0
   1fcae:	b128      	cbz	r0, 1fcbc <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1fcb0:	2145      	movs	r1, #69	; 0x45
   1fcb2:	4808      	ldr	r0, [pc, #32]	; (1fcd4 <at_handler_mdmev+0x58>)
   1fcb4:	f00a ffb5 	bl	2ac22 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   1fcb8:	b010      	add	sp, #64	; 0x40
   1fcba:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fcbc:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1fcbe:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fcc0:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fcc4:	f000 fbf6 	bl	204b4 <event_handler_list_dispatch>
   1fcc8:	e7f6      	b.n	1fcb8 <at_handler_mdmev+0x3c>
   1fcca:	bf00      	nop
   1fccc:	0002f4e5 	.word	0x0002f4e5
   1fcd0:	0002e574 	.word	0x0002e574
   1fcd4:	0002f6a6 	.word	0x0002f6a6

0001fcd8 <enable_notifications>:

static int enable_notifications(void)
{
   1fcd8:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fcda:	4818      	ldr	r0, [pc, #96]	; (1fd3c <enable_notifications+0x64>)
{
   1fcdc:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fcde:	f005 fb55 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   1fce2:	4602      	mov	r2, r0
   1fce4:	b138      	cbz	r0, 1fcf6 <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1fce6:	4816      	ldr	r0, [pc, #88]	; (1fd40 <enable_notifications+0x68>)
   1fce8:	2145      	movs	r1, #69	; 0x45
   1fcea:	f00a ff9a 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   1fcee:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   1fcf2:	b00e      	add	sp, #56	; 0x38
   1fcf4:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   1fcf6:	4813      	ldr	r0, [pc, #76]	; (1fd44 <enable_notifications+0x6c>)
   1fcf8:	f005 fb48 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	d0f8      	beq.n	1fcf2 <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1fd00:	4602      	mov	r2, r0
   1fd02:	2157      	movs	r1, #87	; 0x57
   1fd04:	4810      	ldr	r0, [pc, #64]	; (1fd48 <enable_notifications+0x70>)
   1fd06:	f00a ff8c 	bl	2ac22 <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1fd0a:	2157      	movs	r1, #87	; 0x57
   1fd0c:	480f      	ldr	r0, [pc, #60]	; (1fd4c <enable_notifications+0x74>)
   1fd0e:	f00a ff88 	bl	2ac22 <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1fd12:	2132      	movs	r1, #50	; 0x32
   1fd14:	4a0e      	ldr	r2, [pc, #56]	; (1fd50 <enable_notifications+0x78>)
   1fd16:	a801      	add	r0, sp, #4
   1fd18:	f005 fb60 	bl	253dc <nrf_modem_at_cmd>
		if (err == 0) {
   1fd1c:	4604      	mov	r4, r0
   1fd1e:	b950      	cbnz	r0, 1fd36 <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   1fd20:	490c      	ldr	r1, [pc, #48]	; (1fd54 <enable_notifications+0x7c>)
   1fd22:	a801      	add	r0, sp, #4
   1fd24:	f00d f8c1 	bl	2ceaa <strstr>
			if (end) {
   1fd28:	b100      	cbz	r0, 1fd2c <enable_notifications+0x54>
				*end = '\0';
   1fd2a:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   1fd2c:	2157      	movs	r1, #87	; 0x57
   1fd2e:	480a      	ldr	r0, [pc, #40]	; (1fd58 <enable_notifications+0x80>)
   1fd30:	aa01      	add	r2, sp, #4
   1fd32:	f00a ff76 	bl	2ac22 <z_log_minimal_printk>
	return 0;
   1fd36:	2000      	movs	r0, #0
   1fd38:	e7db      	b.n	1fcf2 <enable_notifications+0x1a>
   1fd3a:	bf00      	nop
   1fd3c:	0002f6db 	.word	0x0002f6db
   1fd40:	0002f6e6 	.word	0x0002f6e6
   1fd44:	0002fd0f 	.word	0x0002fd0f
   1fd48:	0002f721 	.word	0x0002f721
   1fd4c:	0002f75e 	.word	0x0002f75e
   1fd50:	0002f794 	.word	0x0002f794
   1fd54:	0002f79c 	.word	0x0002f79c
   1fd58:	0002f7a1 	.word	0x0002f7a1

0001fd5c <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   1fd5c:	b918      	cbnz	r0, 1fd66 <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   1fd5e:	2149      	movs	r1, #73	; 0x49
   1fd60:	4802      	ldr	r0, [pc, #8]	; (1fd6c <lte_lc_register_handler+0x10>)
   1fd62:	f00a bf5e 	b.w	2ac22 <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   1fd66:	f000 bb77 	b.w	20458 <event_handler_list_append_handler>
   1fd6a:	bf00      	nop
   1fd6c:	0002f7c9 	.word	0x0002f7c9

0001fd70 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1fd70:	2300      	movs	r3, #0
{
   1fd72:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd74:	b08d      	sub	sp, #52	; 0x34
   1fd76:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1fd78:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1fd7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   1fd7e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   1fd82:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   1fd86:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   1fd8a:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   1fd8e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   1fd92:	2800      	cmp	r0, #0
   1fd94:	d054      	beq.n	1fe40 <lte_lc_psm_get+0xd0>
   1fd96:	2900      	cmp	r1, #0
   1fd98:	d052      	beq.n	1fe40 <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1fd9a:	4c2b      	ldr	r4, [pc, #172]	; (1fe48 <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fd9c:	4a2b      	ldr	r2, [pc, #172]	; (1fe4c <lte_lc_psm_get+0xdc>)
   1fd9e:	21a0      	movs	r1, #160	; 0xa0
   1fda0:	4620      	mov	r0, r4
	response[0] = '\0';
   1fda2:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fda4:	f005 fb1a 	bl	253dc <nrf_modem_at_cmd>
	if (err < 0) {
   1fda8:	1e02      	subs	r2, r0, #0
   1fdaa:	da08      	bge.n	1fdbe <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   1fdac:	2145      	movs	r1, #69	; 0x45
   1fdae:	4828      	ldr	r0, [pc, #160]	; (1fe50 <lte_lc_psm_get+0xe0>)
   1fdb0:	f00a ff37 	bl	2ac22 <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   1fdb4:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   1fdb8:	4620      	mov	r0, r4
   1fdba:	b00d      	add	sp, #52	; 0x34
   1fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   1fdbe:	4620      	mov	r0, r4
   1fdc0:	212c      	movs	r1, #44	; 0x2c
   1fdc2:	f00d f82b 	bl	2ce1c <strchr>
   1fdc6:	270c      	movs	r7, #12
   1fdc8:	4604      	mov	r4, r0
		if (comma_ptr) {
   1fdca:	b37c      	cbz	r4, 1fe2c <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   1fdcc:	1c60      	adds	r0, r4, #1
   1fdce:	212c      	movs	r1, #44	; 0x2c
   1fdd0:	f00d f824 	bl	2ce1c <strchr>
	for (int i = 0; i < 12; i++) {
   1fdd4:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1fdd6:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1fdd8:	d1f7      	bne.n	1fdca <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   1fdda:	b338      	cbz	r0, 1fe2c <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1fddc:	1c81      	adds	r1, r0, #2
   1fdde:	2208      	movs	r2, #8
   1fde0:	a803      	add	r0, sp, #12
   1fde2:	f00d f842 	bl	2ce6a <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1fde6:	1c60      	adds	r0, r4, #1
   1fde8:	212c      	movs	r1, #44	; 0x2c
   1fdea:	f00d f817 	bl	2ce1c <strchr>
	if (comma_ptr) {
   1fdee:	4604      	mov	r4, r0
   1fdf0:	b1e0      	cbz	r0, 1fe2c <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1fdf2:	1c81      	adds	r1, r0, #2
   1fdf4:	2208      	movs	r2, #8
   1fdf6:	a806      	add	r0, sp, #24
   1fdf8:	f00d f837 	bl	2ce6a <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1fdfc:	212c      	movs	r1, #44	; 0x2c
   1fdfe:	1c60      	adds	r0, r4, #1
   1fe00:	f00d f80c 	bl	2ce1c <strchr>
	if (comma_ptr) {
   1fe04:	b120      	cbz	r0, 1fe10 <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1fe06:	1c81      	adds	r1, r0, #2
   1fe08:	2208      	movs	r2, #8
   1fe0a:	a809      	add	r0, sp, #36	; 0x24
   1fe0c:	f00d f82d 	bl	2ce6a <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1fe10:	ab01      	add	r3, sp, #4
   1fe12:	aa09      	add	r2, sp, #36	; 0x24
   1fe14:	a906      	add	r1, sp, #24
   1fe16:	a803      	add	r0, sp, #12
   1fe18:	f000 fb90 	bl	2053c <parse_psm>
	if (err) {
   1fe1c:	4604      	mov	r4, r0
   1fe1e:	b150      	cbz	r0, 1fe36 <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1fe20:	4602      	mov	r2, r0
   1fe22:	2145      	movs	r1, #69	; 0x45
   1fe24:	480b      	ldr	r0, [pc, #44]	; (1fe54 <lte_lc_psm_get+0xe4>)
   1fe26:	f00a fefc 	bl	2ac22 <z_log_minimal_printk>
		return err;
   1fe2a:	e7c5      	b.n	1fdb8 <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   1fe2c:	2145      	movs	r1, #69	; 0x45
   1fe2e:	480a      	ldr	r0, [pc, #40]	; (1fe58 <lte_lc_psm_get+0xe8>)
   1fe30:	f00a fef7 	bl	2ac22 <z_log_minimal_printk>
   1fe34:	e7be      	b.n	1fdb4 <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   1fe36:	9b01      	ldr	r3, [sp, #4]
   1fe38:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1fe3a:	9b02      	ldr	r3, [sp, #8]
   1fe3c:	602b      	str	r3, [r5, #0]
	return 0;
   1fe3e:	e7bb      	b.n	1fdb8 <lte_lc_psm_get+0x48>
		return -EINVAL;
   1fe40:	f06f 0415 	mvn.w	r4, #21
   1fe44:	e7b8      	b.n	1fdb8 <lte_lc_psm_get+0x48>
   1fe46:	bf00      	nop
   1fe48:	2000d557 	.word	0x2000d557
   1fe4c:	0002f840 	.word	0x0002f840
   1fe50:	0002f84d 	.word	0x0002f84d
   1fe54:	0002f88e 	.word	0x0002f88e
   1fe58:	0002f86f 	.word	0x0002f86f

0001fe5c <at_handler_cereg>:
{
   1fe5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe5e:	4604      	mov	r4, r0
   1fe60:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   1fe62:	2240      	movs	r2, #64	; 0x40
   1fe64:	2100      	movs	r1, #0
   1fe66:	a812      	add	r0, sp, #72	; 0x48
   1fe68:	f00c fec0 	bl	2cbec <memset>
	__ASSERT_NO_MSG(response != NULL);
   1fe6c:	b944      	cbnz	r4, 1fe80 <at_handler_cereg+0x24>
   1fe6e:	494e      	ldr	r1, [pc, #312]	; (1ffa8 <at_handler_cereg+0x14c>)
   1fe70:	484e      	ldr	r0, [pc, #312]	; (1ffac <at_handler_cereg+0x150>)
   1fe72:	22ad      	movs	r2, #173	; 0xad
   1fe74:	f00a fd16 	bl	2a8a4 <printk>
   1fe78:	21ad      	movs	r1, #173	; 0xad
   1fe7a:	484b      	ldr	r0, [pc, #300]	; (1ffa8 <at_handler_cereg+0x14c>)
   1fe7c:	f00a feab 	bl	2abd6 <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   1fe80:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   1fe82:	2230      	movs	r2, #48	; 0x30
   1fe84:	4629      	mov	r1, r5
   1fe86:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   1fe88:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fe8c:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   1fe8e:	f00c fead 	bl	2cbec <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fe92:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fe96:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fe98:	f10d 020e 	add.w	r2, sp, #14
   1fe9c:	9300      	str	r3, [sp, #0]
   1fe9e:	2101      	movs	r1, #1
   1fea0:	4620      	mov	r0, r4
   1fea2:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fea4:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fea6:	f000 fc1f 	bl	206e8 <parse_cereg>
	if (err) {
   1feaa:	4602      	mov	r2, r0
   1feac:	b130      	cbz	r0, 1febc <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   1feae:	4623      	mov	r3, r4
   1feb0:	2145      	movs	r1, #69	; 0x45
   1feb2:	483f      	ldr	r0, [pc, #252]	; (1ffb0 <at_handler_cereg+0x154>)
   1feb4:	f00a feb5 	bl	2ac22 <z_log_minimal_printk>
}
   1feb8:	b023      	add	sp, #140	; 0x8c
   1feba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1febc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1fec0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1fec4:	2b01      	cmp	r3, #1
   1fec6:	d105      	bne.n	1fed4 <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   1fec8:	9b08      	ldr	r3, [sp, #32]
   1feca:	3301      	adds	r3, #1
   1fecc:	d053      	beq.n	1ff76 <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   1fece:	4839      	ldr	r0, [pc, #228]	; (1ffb4 <at_handler_cereg+0x158>)
   1fed0:	f006 fbb4 	bl	2663c <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   1fed4:	f000 fab8 	bl	20448 <event_handler_list_is_empty>
   1fed8:	2800      	cmp	r0, #0
   1feda:	d1ed      	bne.n	1feb8 <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   1fedc:	4a36      	ldr	r2, [pc, #216]	; (1ffb8 <at_handler_cereg+0x15c>)
   1fede:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1fee2:	7811      	ldrb	r1, [r2, #0]
   1fee4:	4299      	cmp	r1, r3
   1fee6:	d007      	beq.n	1fef8 <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1fee8:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1feec:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   1feee:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   1fef0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   1fef4:	f000 fade 	bl	204b4 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1fef8:	2230      	movs	r2, #48	; 0x30
   1fefa:	4930      	ldr	r1, [pc, #192]	; (1ffbc <at_handler_cereg+0x160>)
   1fefc:	a806      	add	r0, sp, #24
   1fefe:	f00c fe5a 	bl	2cbb6 <memcmp>
   1ff02:	b1c8      	cbz	r0, 1ff38 <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   1ff04:	2304      	movs	r3, #4
   1ff06:	4d2d      	ldr	r5, [pc, #180]	; (1ffbc <at_handler_cereg+0x160>)
   1ff08:	ac06      	add	r4, sp, #24
   1ff0a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1ff0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ff10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ff12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ff14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ff16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ff1a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1ff1e:	ae14      	add	r6, sp, #80	; 0x50
   1ff20:	ad06      	add	r5, sp, #24
   1ff22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ff24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ff26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ff28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ff2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1ff2e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   1ff32:	a812      	add	r0, sp, #72	; 0x48
   1ff34:	f000 fabe 	bl	204b4 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   1ff38:	4a21      	ldr	r2, [pc, #132]	; (1ffc0 <at_handler_cereg+0x164>)
   1ff3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ff3e:	7811      	ldrb	r1, [r2, #0]
   1ff40:	4299      	cmp	r1, r3
   1ff42:	d008      	beq.n	1ff56 <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   1ff44:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1ff46:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   1ff48:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   1ff4a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   1ff4e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   1ff52:	f000 faaf 	bl	204b4 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1ff56:	f89d 400e 	ldrb.w	r4, [sp, #14]
   1ff5a:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   1ff5e:	2c01      	cmp	r4, #1
   1ff60:	d1aa      	bne.n	1feb8 <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   1ff62:	4638      	mov	r0, r7
   1ff64:	a905      	add	r1, sp, #20
   1ff66:	f7ff ff03 	bl	1fd70 <lte_lc_psm_get>
	if (err) {
   1ff6a:	b140      	cbz	r0, 1ff7e <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   1ff6c:	2145      	movs	r1, #69	; 0x45
   1ff6e:	4815      	ldr	r0, [pc, #84]	; (1ffc4 <at_handler_cereg+0x168>)
   1ff70:	f00a fe57 	bl	2ac22 <z_log_minimal_printk>
		return;
   1ff74:	e7a0      	b.n	1feb8 <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   1ff76:	2304      	movs	r3, #4
   1ff78:	f88d 300e 	strb.w	r3, [sp, #14]
   1ff7c:	e7aa      	b.n	1fed4 <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   1ff7e:	4d12      	ldr	r5, [pc, #72]	; (1ffc8 <at_handler_cereg+0x16c>)
   1ff80:	2208      	movs	r2, #8
   1ff82:	4629      	mov	r1, r5
   1ff84:	4638      	mov	r0, r7
   1ff86:	f00c fe16 	bl	2cbb6 <memcmp>
   1ff8a:	2800      	cmp	r0, #0
   1ff8c:	d094      	beq.n	1feb8 <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1ff8e:	e897 0003 	ldmia.w	r7, {r0, r1}
   1ff92:	ab14      	add	r3, sp, #80	; 0x50
   1ff94:	e885 0003 	stmia.w	r5, {r0, r1}
   1ff98:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   1ff9c:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   1ff9e:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   1ffa2:	f000 fa87 	bl	204b4 <event_handler_list_dispatch>
   1ffa6:	e787      	b.n	1feb8 <at_handler_cereg+0x5c>
   1ffa8:	0002f4e5 	.word	0x0002f4e5
   1ffac:	0002e574 	.word	0x0002e574
   1ffb0:	0002f8c0 	.word	0x0002f8c0
   1ffb4:	2000d074 	.word	0x2000d074
   1ffb8:	2000d556 	.word	0x2000d556
   1ffbc:	2000caf0 	.word	0x2000caf0
   1ffc0:	2000d555 	.word	0x2000d555
   1ffc4:	0002f8f1 	.word	0x0002f8f1
   1ffc8:	2000d08c 	.word	0x2000d08c

0001ffcc <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   1ffcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   1ffce:	2400      	movs	r4, #0

	if (status == NULL) {
   1ffd0:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   1ffd2:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   1ffd4:	b1a8      	cbz	r0, 20002 <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   1ffd6:	f10d 0202 	add.w	r2, sp, #2
   1ffda:	490b      	ldr	r1, [pc, #44]	; (20008 <lte_lc_nw_reg_status_get+0x3c>)
   1ffdc:	480b      	ldr	r0, [pc, #44]	; (2000c <lte_lc_nw_reg_status_get+0x40>)
   1ffde:	ab01      	add	r3, sp, #4
   1ffe0:	f005 fa62 	bl	254a8 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   1ffe4:	1e02      	subs	r2, r0, #0
   1ffe6:	dc07      	bgt.n	1fff8 <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   1ffe8:	4809      	ldr	r0, [pc, #36]	; (20010 <lte_lc_nw_reg_status_get+0x44>)
   1ffea:	2145      	movs	r1, #69	; 0x45
   1ffec:	f00a fe19 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   1fff0:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   1fff4:	b003      	add	sp, #12
   1fff6:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   1fff8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   1fffc:	4620      	mov	r0, r4
	*status = status_tmp;
   1fffe:	702b      	strb	r3, [r5, #0]
	return 0;
   20000:	e7f8      	b.n	1fff4 <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   20002:	f06f 0015 	mvn.w	r0, #21
   20006:	e7f5      	b.n	1fff4 <lte_lc_nw_reg_status_get+0x28>
   20008:	0002f914 	.word	0x0002f914
   2000c:	0002f930 	.word	0x0002f930
   20010:	0002f93a 	.word	0x0002f93a

00020014 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   20014:	2807      	cmp	r0, #7
{
   20016:	b538      	push	{r3, r4, r5, lr}
   20018:	4605      	mov	r5, r0
   2001a:	460c      	mov	r4, r1
	switch (mode) {
   2001c:	d907      	bls.n	2002e <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   2001e:	2145      	movs	r1, #69	; 0x45
   20020:	4602      	mov	r2, r0
   20022:	4813      	ldr	r0, [pc, #76]	; (20070 <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   20024:	f00a fdfd 	bl	2ac22 <z_log_minimal_printk>
		return -EINVAL;
   20028:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   2002c:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   2002e:	2904      	cmp	r1, #4
   20030:	d903      	bls.n	2003a <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   20032:	460a      	mov	r2, r1
   20034:	480f      	ldr	r0, [pc, #60]	; (20074 <lte_lc_system_mode_set+0x60>)
   20036:	2145      	movs	r1, #69	; 0x45
   20038:	e7f4      	b.n	20024 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   2003a:	4b0f      	ldr	r3, [pc, #60]	; (20078 <lte_lc_system_mode_set+0x64>)
   2003c:	5c5a      	ldrb	r2, [r3, r1]
   2003e:	4b0f      	ldr	r3, [pc, #60]	; (2007c <lte_lc_system_mode_set+0x68>)
   20040:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   20044:	480e      	ldr	r0, [pc, #56]	; (20080 <lte_lc_system_mode_set+0x6c>)
   20046:	f005 f9a1 	bl	2538c <nrf_modem_at_printf>
	if (err) {
   2004a:	b138      	cbz	r0, 2005c <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   2004c:	4602      	mov	r2, r0
   2004e:	2145      	movs	r1, #69	; 0x45
   20050:	480c      	ldr	r0, [pc, #48]	; (20084 <lte_lc_system_mode_set+0x70>)
   20052:	f00a fde6 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   20056:	f06f 000d 	mvn.w	r0, #13
   2005a:	e7e7      	b.n	2002c <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   2005c:	4b0a      	ldr	r3, [pc, #40]	; (20088 <lte_lc_system_mode_set+0x74>)
   2005e:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   20060:	4b0a      	ldr	r3, [pc, #40]	; (2008c <lte_lc_system_mode_set+0x78>)
   20062:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   20064:	4b0a      	ldr	r3, [pc, #40]	; (20090 <lte_lc_system_mode_set+0x7c>)
   20066:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   20068:	4b0a      	ldr	r3, [pc, #40]	; (20094 <lte_lc_system_mode_set+0x80>)
   2006a:	701c      	strb	r4, [r3, #0]
	return 0;
   2006c:	e7de      	b.n	2002c <lte_lc_system_mode_set+0x18>
   2006e:	bf00      	nop
   20070:	0002f96c 	.word	0x0002f96c
   20074:	0002f993 	.word	0x0002f993
   20078:	0002fd1a 	.word	0x0002fd1a
   2007c:	0002dfd8 	.word	0x0002dfd8
   20080:	0002f9bd 	.word	0x0002f9bd
   20084:	0002f9d3 	.word	0x0002f9d3
   20088:	2000d5f7 	.word	0x2000d5f7
   2008c:	2000c8a4 	.word	0x2000c8a4
   20090:	2000d553 	.word	0x2000d553
   20094:	2000d554 	.word	0x2000d554

00020098 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   20098:	b530      	push	{r4, r5, lr}
   2009a:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   2009c:	4605      	mov	r5, r0
{
   2009e:	b087      	sub	sp, #28
	if (mode == NULL) {
   200a0:	2800      	cmp	r0, #0
   200a2:	d06b      	beq.n	2017c <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   200a4:	ab05      	add	r3, sp, #20
   200a6:	9301      	str	r3, [sp, #4]
   200a8:	ab04      	add	r3, sp, #16
   200aa:	9300      	str	r3, [sp, #0]
   200ac:	aa02      	add	r2, sp, #8
   200ae:	4935      	ldr	r1, [pc, #212]	; (20184 <lte_lc_system_mode_get+0xec>)
   200b0:	4835      	ldr	r0, [pc, #212]	; (20188 <lte_lc_system_mode_get+0xf0>)
   200b2:	ab03      	add	r3, sp, #12
   200b4:	f005 f9f8 	bl	254a8 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   200b8:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   200ba:	4602      	mov	r2, r0
	if (err != 4) {
   200bc:	d004      	beq.n	200c8 <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   200be:	2145      	movs	r1, #69	; 0x45
   200c0:	4832      	ldr	r0, [pc, #200]	; (2018c <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   200c2:	f00a fdae 	bl	2ac22 <z_log_minimal_printk>
			return -EFAULT;
   200c6:	e039      	b.n	2013c <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   200c8:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   200ca:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   200cc:	2b00      	cmp	r3, #0
   200ce:	bf14      	ite	ne
   200d0:	2302      	movne	r3, #2
   200d2:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   200d4:	2a00      	cmp	r2, #0
   200d6:	bf14      	ite	ne
   200d8:	2204      	movne	r2, #4
   200da:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   200dc:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   200de:	9a04      	ldr	r2, [sp, #16]
   200e0:	2a00      	cmp	r2, #0
   200e2:	bf14      	ite	ne
   200e4:	2208      	movne	r2, #8
   200e6:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   200e8:	4313      	orrs	r3, r2
   200ea:	2b0e      	cmp	r3, #14
   200ec:	d822      	bhi.n	20134 <lte_lc_system_mode_get+0x9c>
   200ee:	e8df f003 	tbb	[pc, r3]
   200f2:	2108      	.short	0x2108
   200f4:	21152113 	.word	0x21152113
   200f8:	2117211d 	.word	0x2117211d
   200fc:	211b2119 	.word	0x211b2119
   20100:	1f          	.byte	0x1f
   20101:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   20102:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   20104:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   20106:	b1fc      	cbz	r4, 20148 <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   20108:	9a05      	ldr	r2, [sp, #20]
   2010a:	2a04      	cmp	r2, #4
   2010c:	d833      	bhi.n	20176 <lte_lc_system_mode_get+0xde>
   2010e:	e8df f002 	tbb	[pc, r2]
   20112:	2a19      	.short	0x2a19
   20114:	2e2c      	.short	0x2e2c
   20116:	30          	.byte	0x30
   20117:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   20118:	2301      	movs	r3, #1
   2011a:	e7f3      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2011c:	2302      	movs	r3, #2
   2011e:	e7f1      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   20120:	2303      	movs	r3, #3
   20122:	e7ef      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   20124:	2304      	movs	r3, #4
   20126:	e7ed      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   20128:	2305      	movs	r3, #5
   2012a:	e7eb      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   2012c:	2306      	movs	r3, #6
   2012e:	e7e9      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   20130:	2307      	movs	r3, #7
   20132:	e7e7      	b.n	20104 <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   20134:	2145      	movs	r1, #69	; 0x45
   20136:	4816      	ldr	r0, [pc, #88]	; (20190 <lte_lc_system_mode_get+0xf8>)
   20138:	f00a fd73 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   2013c:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   20140:	b007      	add	sp, #28
   20142:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   20144:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   20146:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   20148:	4b12      	ldr	r3, [pc, #72]	; (20194 <lte_lc_system_mode_get+0xfc>)
   2014a:	782a      	ldrb	r2, [r5, #0]
   2014c:	7819      	ldrb	r1, [r3, #0]
   2014e:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   20150:	bf18      	it	ne
   20152:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   20154:	b12c      	cbz	r4, 20162 <lte_lc_system_mode_get+0xca>
   20156:	4b10      	ldr	r3, [pc, #64]	; (20198 <lte_lc_system_mode_get+0x100>)
   20158:	7822      	ldrb	r2, [r4, #0]
   2015a:	7819      	ldrb	r1, [r3, #0]
   2015c:	4291      	cmp	r1, r2
   2015e:	d000      	beq.n	20162 <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   20160:	701a      	strb	r2, [r3, #0]
	return 0;
   20162:	2000      	movs	r0, #0
   20164:	e7ec      	b.n	20140 <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   20166:	2301      	movs	r3, #1
   20168:	e7ed      	b.n	20146 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   2016a:	2302      	movs	r3, #2
   2016c:	e7eb      	b.n	20146 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   2016e:	2303      	movs	r3, #3
   20170:	e7e9      	b.n	20146 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   20172:	2304      	movs	r3, #4
   20174:	e7e7      	b.n	20146 <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   20176:	2145      	movs	r1, #69	; 0x45
   20178:	4808      	ldr	r0, [pc, #32]	; (2019c <lte_lc_system_mode_get+0x104>)
   2017a:	e7a2      	b.n	200c2 <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   2017c:	f06f 0015 	mvn.w	r0, #21
   20180:	e7de      	b.n	20140 <lte_lc_system_mode_get+0xa8>
   20182:	bf00      	nop
   20184:	0002f9fd 	.word	0x0002f9fd
   20188:	0002fa18 	.word	0x0002fa18
   2018c:	0002fa28 	.word	0x0002fa28
   20190:	0002fa52 	.word	0x0002fa52
   20194:	2000d5f7 	.word	0x2000d5f7
   20198:	2000d553 	.word	0x2000d553
   2019c:	0002fa83 	.word	0x0002fa83

000201a0 <init_and_config>:
{
   201a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   201a2:	4d1b      	ldr	r5, [pc, #108]	; (20210 <init_and_config+0x70>)
   201a4:	7829      	ldrb	r1, [r5, #0]
   201a6:	bb81      	cbnz	r1, 2020a <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   201a8:	4e1a      	ldr	r6, [pc, #104]	; (20214 <init_and_config+0x74>)
   201aa:	4f1b      	ldr	r7, [pc, #108]	; (20218 <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   201ac:	2201      	movs	r2, #1
   201ae:	481b      	ldr	r0, [pc, #108]	; (2021c <init_and_config+0x7c>)
   201b0:	f00c fc0d 	bl	2c9ce <z_impl_k_sem_init>
   201b4:	4631      	mov	r1, r6
   201b6:	4638      	mov	r0, r7
   201b8:	f7ff ff6e 	bl	20098 <lte_lc_system_mode_get>
	if (err) {
   201bc:	4604      	mov	r4, r0
   201be:	b130      	cbz	r0, 201ce <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   201c0:	2145      	movs	r1, #69	; 0x45
   201c2:	4602      	mov	r2, r0
   201c4:	4816      	ldr	r0, [pc, #88]	; (20220 <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   201c6:	f00a fd2c 	bl	2ac22 <z_log_minimal_printk>
}
   201ca:	4620      	mov	r0, r4
   201cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   201ce:	4b15      	ldr	r3, [pc, #84]	; (20224 <init_and_config+0x84>)
   201d0:	7818      	ldrb	r0, [r3, #0]
   201d2:	4b15      	ldr	r3, [pc, #84]	; (20228 <init_and_config+0x88>)
   201d4:	7819      	ldrb	r1, [r3, #0]
   201d6:	783b      	ldrb	r3, [r7, #0]
   201d8:	4283      	cmp	r3, r0
   201da:	d102      	bne.n	201e2 <init_and_config+0x42>
   201dc:	7833      	ldrb	r3, [r6, #0]
   201de:	428b      	cmp	r3, r1
   201e0:	d007      	beq.n	201f2 <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   201e2:	f7ff ff17 	bl	20014 <lte_lc_system_mode_set>
		if (err) {
   201e6:	4604      	mov	r4, r0
   201e8:	b118      	cbz	r0, 201f2 <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   201ea:	4602      	mov	r2, r0
   201ec:	2145      	movs	r1, #69	; 0x45
   201ee:	480f      	ldr	r0, [pc, #60]	; (2022c <init_and_config+0x8c>)
   201f0:	e7e9      	b.n	201c6 <init_and_config+0x26>
	err = enable_notifications();
   201f2:	f7ff fd71 	bl	1fcd8 <enable_notifications>
	if (err) {
   201f6:	4604      	mov	r4, r0
   201f8:	b120      	cbz	r0, 20204 <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   201fa:	2145      	movs	r1, #69	; 0x45
   201fc:	480c      	ldr	r0, [pc, #48]	; (20230 <init_and_config+0x90>)
   201fe:	f00a fd10 	bl	2ac22 <z_log_minimal_printk>
		return err;
   20202:	e7e2      	b.n	201ca <init_and_config+0x2a>
	is_initialized = true;
   20204:	2301      	movs	r3, #1
   20206:	702b      	strb	r3, [r5, #0]
	return 0;
   20208:	e7df      	b.n	201ca <init_and_config+0x2a>
		return 0;
   2020a:	2400      	movs	r4, #0
   2020c:	e7dd      	b.n	201ca <init_and_config+0x2a>
   2020e:	bf00      	nop
   20210:	2000d552 	.word	0x2000d552
   20214:	2000d553 	.word	0x2000d553
   20218:	2000d5f7 	.word	0x2000d5f7
   2021c:	2000d074 	.word	0x2000d074
   20220:	0002faa7 	.word	0x0002faa7
   20224:	2000c8a4 	.word	0x2000c8a4
   20228:	2000d554 	.word	0x2000d554
   2022c:	0002fad9 	.word	0x0002fad9
   20230:	0002fb03 	.word	0x0002fb03

00020234 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   20234:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   20236:	4604      	mov	r4, r0
   20238:	b1a8      	cbz	r0, 20266 <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2023a:	f10d 0206 	add.w	r2, sp, #6
   2023e:	490b      	ldr	r1, [pc, #44]	; (2026c <lte_lc_func_mode_get+0x38>)
   20240:	480b      	ldr	r0, [pc, #44]	; (20270 <lte_lc_func_mode_get+0x3c>)
   20242:	f005 f931 	bl	254a8 <nrf_modem_at_scanf>
	if (err != 1) {
   20246:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   20248:	4602      	mov	r2, r0
	if (err != 1) {
   2024a:	d007      	beq.n	2025c <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   2024c:	4809      	ldr	r0, [pc, #36]	; (20274 <lte_lc_func_mode_get+0x40>)
   2024e:	2145      	movs	r1, #69	; 0x45
   20250:	f00a fce7 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   20254:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   20258:	b002      	add	sp, #8
   2025a:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   2025c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   20260:	2000      	movs	r0, #0
	*mode = mode_tmp;
   20262:	7023      	strb	r3, [r4, #0]
	return 0;
   20264:	e7f8      	b.n	20258 <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   20266:	f06f 0015 	mvn.w	r0, #21
   2026a:	e7f5      	b.n	20258 <lte_lc_func_mode_get+0x24>
   2026c:	0002fb27 	.word	0x0002fb27
   20270:	0002fb32 	.word	0x0002fb32
   20274:	0002fb3b 	.word	0x0002fb3b

00020278 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   20278:	2804      	cmp	r0, #4
{
   2027a:	b510      	push	{r4, lr}
   2027c:	4604      	mov	r4, r0
	switch (mode) {
   2027e:	d819      	bhi.n	202b4 <lte_lc_func_mode_set+0x3c>
   20280:	2804      	cmp	r0, #4
   20282:	d81c      	bhi.n	202be <lte_lc_func_mode_set+0x46>
   20284:	e8df f000 	tbb	[pc, r0]
   20288:	1b230b23 	.word	0x1b230b23
   2028c:	23          	.byte	0x23
   2028d:	00          	.byte	0x00
   2028e:	2201      	movs	r2, #1
   20290:	fa02 f303 	lsl.w	r3, r2, r3
   20294:	4a12      	ldr	r2, [pc, #72]	; (202e0 <lte_lc_func_mode_set+0x68>)
   20296:	4213      	tst	r3, r2
   20298:	d119      	bne.n	202ce <lte_lc_func_mode_set+0x56>
   2029a:	079b      	lsls	r3, r3, #30
   2029c:	d50f      	bpl.n	202be <lte_lc_func_mode_set+0x46>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   2029e:	f7ff fd1b 	bl	1fcd8 <enable_notifications>
		if (err) {
   202a2:	4602      	mov	r2, r0
   202a4:	b198      	cbz	r0, 202ce <lte_lc_func_mode_set+0x56>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   202a6:	480f      	ldr	r0, [pc, #60]	; (202e4 <lte_lc_func_mode_set+0x6c>)
   202a8:	2145      	movs	r1, #69	; 0x45
   202aa:	f00a fcba 	bl	2ac22 <z_log_minimal_printk>
			return -EFAULT;
   202ae:	f06f 000d 	mvn.w	r0, #13
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
}
   202b2:	bd10      	pop	{r4, pc}
	switch (mode) {
   202b4:	f1a0 0314 	sub.w	r3, r0, #20
   202b8:	b2db      	uxtb	r3, r3
   202ba:	2b18      	cmp	r3, #24
   202bc:	d9e7      	bls.n	2028e <lte_lc_func_mode_set+0x16>
		LOG_ERR("Invalid functional mode: %d", mode);
   202be:	480a      	ldr	r0, [pc, #40]	; (202e8 <lte_lc_func_mode_set+0x70>)
   202c0:	4622      	mov	r2, r4
   202c2:	2145      	movs	r1, #69	; 0x45
   202c4:	f00a fcad 	bl	2ac22 <z_log_minimal_printk>
		return -EINVAL;
   202c8:	f06f 0015 	mvn.w	r0, #21
   202cc:	e7f1      	b.n	202b2 <lte_lc_func_mode_set+0x3a>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   202ce:	4621      	mov	r1, r4
   202d0:	4806      	ldr	r0, [pc, #24]	; (202ec <lte_lc_func_mode_set+0x74>)
   202d2:	f005 f85b 	bl	2538c <nrf_modem_at_printf>
   202d6:	2800      	cmp	r0, #0
   202d8:	bf18      	it	ne
   202da:	f06f 000d 	mvnne.w	r0, #13
   202de:	e7e8      	b.n	202b2 <lte_lc_func_mode_set+0x3a>
   202e0:	01300c01 	.word	0x01300c01
   202e4:	0002fb7b 	.word	0x0002fb7b
   202e8:	0002fbaa 	.word	0x0002fbaa
   202ec:	0002fbcb 	.word	0x0002fbcb

000202f0 <connect_lte>:
	if (!is_initialized) {
   202f0:	4b3e      	ldr	r3, [pc, #248]	; (203ec <connect_lte+0xfc>)
{
   202f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   202f6:	781b      	ldrb	r3, [r3, #0]
{
   202f8:	4605      	mov	r5, r0
	if (!is_initialized) {
   202fa:	b943      	cbnz	r3, 2030e <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   202fc:	483c      	ldr	r0, [pc, #240]	; (203f0 <connect_lte+0x100>)
   202fe:	2145      	movs	r1, #69	; 0x45
   20300:	f00a fc8f 	bl	2ac22 <z_log_minimal_printk>
		return -EPERM;
   20304:	f04f 30ff 	mov.w	r0, #4294967295
}
   20308:	b002      	add	sp, #8
   2030a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2030e:	2601      	movs	r6, #1
   20310:	4c38      	ldr	r4, [pc, #224]	; (203f4 <connect_lte+0x104>)
   20312:	e8d4 3fef 	ldaex	r3, [r4]
   20316:	e8c4 6fe2 	stlex	r2, r6, [r4]
   2031a:	2a00      	cmp	r2, #0
   2031c:	d1f9      	bne.n	20312 <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   2031e:	2b00      	cmp	r3, #0
   20320:	d160      	bne.n	203e4 <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   20322:	f10d 0006 	add.w	r0, sp, #6
   20326:	f7ff fe51 	bl	1ffcc <lte_lc_nw_reg_status_get>
	if (err) {
   2032a:	b130      	cbz	r0, 2033a <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   2032c:	4832      	ldr	r0, [pc, #200]	; (203f8 <connect_lte+0x108>)
   2032e:	2145      	movs	r1, #69	; 0x45
   20330:	f00a fc77 	bl	2ac22 <z_log_minimal_printk>
		return -EFAULT;
   20334:	f06f 000d 	mvn.w	r0, #13
   20338:	e7e6      	b.n	20308 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2033a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2033e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20342:	2b01      	cmp	r3, #1
   20344:	d0e0      	beq.n	20308 <connect_lte+0x18>
	if (blocking) {
   20346:	b125      	cbz	r5, 20352 <connect_lte+0x62>
   20348:	4601      	mov	r1, r0
   2034a:	4632      	mov	r2, r6
   2034c:	482b      	ldr	r0, [pc, #172]	; (203fc <connect_lte+0x10c>)
   2034e:	f00c fb3e 	bl	2c9ce <z_impl_k_sem_init>
{
   20352:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   20354:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2040c <connect_lte+0x11c>
   20358:	4e29      	ldr	r6, [pc, #164]	; (20400 <connect_lte+0x110>)
		err = lte_lc_func_mode_get(&current_func_mode);
   2035a:	f10d 0007 	add.w	r0, sp, #7
   2035e:	f7ff ff69 	bl	20234 <lte_lc_func_mode_get>
		if (err) {
   20362:	b9b8      	cbnz	r0, 20394 <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   20364:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20368:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   2036c:	d00b      	beq.n	20386 <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   2036e:	2001      	movs	r0, #1
   20370:	f7ff ff82 	bl	20278 <lte_lc_func_mode_set>
		if (err || !blocking) {
   20374:	b188      	cbz	r0, 2039a <connect_lte+0xaa>
   20376:	2300      	movs	r3, #0
   20378:	e8d4 2fef 	ldaex	r2, [r4]
   2037c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   20380:	2900      	cmp	r1, #0
   20382:	d0c1      	beq.n	20308 <connect_lte+0x18>
   20384:	e7f8      	b.n	20378 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   20386:	f898 1000 	ldrb.w	r1, [r8]
   2038a:	7830      	ldrb	r0, [r6, #0]
   2038c:	f7ff fe42 	bl	20014 <lte_lc_system_mode_set>
			if (err) {
   20390:	2800      	cmp	r0, #0
   20392:	d0ec      	beq.n	2036e <connect_lte+0x7e>
			err = -EFAULT;
   20394:	f06f 000d 	mvn.w	r0, #13
   20398:	e7ed      	b.n	20376 <connect_lte+0x86>
		if (err || !blocking) {
   2039a:	2d00      	cmp	r5, #0
   2039c:	d0eb      	beq.n	20376 <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   2039e:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   203a2:	2300      	movs	r3, #0
   203a4:	4815      	ldr	r0, [pc, #84]	; (203fc <connect_lte+0x10c>)
   203a6:	f006 f983 	bl	266b0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   203aa:	f110 0f0b 	cmn.w	r0, #11
   203ae:	d1e2      	bne.n	20376 <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   203b0:	2149      	movs	r1, #73	; 0x49
   203b2:	4814      	ldr	r0, [pc, #80]	; (20404 <connect_lte+0x114>)
   203b4:	f00a fc35 	bl	2ac22 <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   203b8:	2f01      	cmp	r7, #1
   203ba:	d010      	beq.n	203de <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   203bc:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   203be:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   203c0:	2b01      	cmp	r3, #1
   203c2:	bf0c      	ite	eq
   203c4:	2302      	moveq	r3, #2
   203c6:	2301      	movne	r3, #1
   203c8:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   203ca:	f7ff ff55 	bl	20278 <lte_lc_func_mode_set>
				if (err) {
   203ce:	2800      	cmp	r0, #0
   203d0:	d1e0      	bne.n	20394 <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   203d2:	2149      	movs	r1, #73	; 0x49
   203d4:	480c      	ldr	r0, [pc, #48]	; (20408 <connect_lte+0x118>)
   203d6:	f00a fc24 	bl	2ac22 <z_log_minimal_printk>
   203da:	2701      	movs	r7, #1
   203dc:	e7bd      	b.n	2035a <connect_lte+0x6a>
				err = -ETIMEDOUT;
   203de:	f06f 0073 	mvn.w	r0, #115	; 0x73
   203e2:	e7c8      	b.n	20376 <connect_lte+0x86>
		return -EINPROGRESS;
   203e4:	f06f 0076 	mvn.w	r0, #118	; 0x76
   203e8:	e78e      	b.n	20308 <connect_lte+0x18>
   203ea:	bf00      	nop
   203ec:	2000d552 	.word	0x2000d552
   203f0:	0002fbd6 	.word	0x0002fbd6
   203f4:	2000d070 	.word	0x2000d070
   203f8:	0002fc06 	.word	0x0002fc06
   203fc:	2000d074 	.word	0x2000d074
   20400:	2000c8a4 	.word	0x2000c8a4
   20404:	0002fc35 	.word	0x0002fc35
   20408:	0002fc5f 	.word	0x0002fc5f
   2040c:	2000d553 	.word	0x2000d553

00020410 <lte_lc_connect_async>:
{
   20410:	b508      	push	{r3, lr}
	if (handler) {
   20412:	b130      	cbz	r0, 20422 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   20414:	f000 f820 	bl	20458 <event_handler_list_append_handler>
}
   20418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   2041c:	2000      	movs	r0, #0
   2041e:	f7ff bf67 	b.w	202f0 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   20422:	f000 f811 	bl	20448 <event_handler_list_is_empty>
   20426:	2800      	cmp	r0, #0
   20428:	d0f6      	beq.n	20418 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   2042a:	2145      	movs	r1, #69	; 0x45
   2042c:	4802      	ldr	r0, [pc, #8]	; (20438 <lte_lc_connect_async+0x28>)
   2042e:	f00a fbf8 	bl	2ac22 <z_log_minimal_printk>
}
   20432:	f06f 0015 	mvn.w	r0, #21
   20436:	bd08      	pop	{r3, pc}
   20438:	0002fc80 	.word	0x0002fc80

0002043c <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   2043c:	4801      	ldr	r0, [pc, #4]	; (20444 <k_mutex_unlock.constprop.0+0x8>)
   2043e:	f005 bf7d 	b.w	2633c <z_impl_k_mutex_unlock>
   20442:	bf00      	nop
   20444:	2000c9fc 	.word	0x2000c9fc

00020448 <event_handler_list_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   20448:	4b02      	ldr	r3, [pc, #8]	; (20454 <event_handler_list_is_empty+0xc>)
   2044a:	6818      	ldr	r0, [r3, #0]
}
   2044c:	fab0 f080 	clz	r0, r0
   20450:	0940      	lsrs	r0, r0, #5
   20452:	4770      	bx	lr
   20454:	2000d094 	.word	0x2000d094

00020458 <event_handler_list_append_handler>:
{
   20458:	b570      	push	{r4, r5, r6, lr}
   2045a:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2045c:	4d13      	ldr	r5, [pc, #76]	; (204ac <event_handler_list_append_handler+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2045e:	f04f 32ff 	mov.w	r2, #4294967295
   20462:	f04f 33ff 	mov.w	r3, #4294967295
   20466:	4812      	ldr	r0, [pc, #72]	; (204b0 <event_handler_list_append_handler+0x58>)
   20468:	f005 fe90 	bl	2618c <z_impl_k_mutex_lock>
	return list->head;
   2046c:	682c      	ldr	r4, [r5, #0]
	return node->next;
   2046e:	2c00      	cmp	r4, #0
   20470:	bf38      	it	cc
   20472:	2400      	movcc	r4, #0
   20474:	b944      	cbnz	r4, 20488 <event_handler_list_append_handler+0x30>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   20476:	2008      	movs	r0, #8
   20478:	f00c fb76 	bl	2cb68 <k_malloc>
	if (to_ins == NULL) {
   2047c:	b948      	cbnz	r0, 20492 <event_handler_list_append_handler+0x3a>
		k_mutex_unlock(&list_mtx);
   2047e:	f7ff ffdd 	bl	2043c <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   20482:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   20486:	bd70      	pop	{r4, r5, r6, pc}
		if (curr->handler == handler) {
   20488:	6863      	ldr	r3, [r4, #4]
   2048a:	429e      	cmp	r6, r3
   2048c:	d007      	beq.n	2049e <event_handler_list_append_handler+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2048e:	6824      	ldr	r4, [r4, #0]
   20490:	e7ed      	b.n	2046e <event_handler_list_append_handler+0x16>
	parent->next = child;
   20492:	e9c0 4600 	strd	r4, r6, [r0]
Z_GENLIST_APPEND(slist, snode)
   20496:	686b      	ldr	r3, [r5, #4]
   20498:	b92b      	cbnz	r3, 204a6 <event_handler_list_append_handler+0x4e>
	list->head = node;
   2049a:	e9c5 0000 	strd	r0, r0, [r5]
	k_mutex_unlock(&list_mtx);
   2049e:	f7ff ffcd 	bl	2043c <k_mutex_unlock.constprop.0>
	return 0;
   204a2:	2000      	movs	r0, #0
   204a4:	e7ef      	b.n	20486 <event_handler_list_append_handler+0x2e>
	parent->next = child;
   204a6:	6018      	str	r0, [r3, #0]
	list->tail = node;
   204a8:	6068      	str	r0, [r5, #4]
}
   204aa:	e7f8      	b.n	2049e <event_handler_list_append_handler+0x46>
   204ac:	2000d094 	.word	0x2000d094
   204b0:	2000c9fc 	.word	0x2000c9fc

000204b4 <event_handler_list_dispatch>:
{
   204b4:	b538      	push	{r3, r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   204b6:	4c11      	ldr	r4, [pc, #68]	; (204fc <event_handler_list_dispatch+0x48>)
   204b8:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   204ba:	6823      	ldr	r3, [r4, #0]
   204bc:	b1e3      	cbz	r3, 204f8 <event_handler_list_dispatch+0x44>
   204be:	f04f 33ff 	mov.w	r3, #4294967295
   204c2:	f04f 32ff 	mov.w	r2, #4294967295
   204c6:	480e      	ldr	r0, [pc, #56]	; (20500 <event_handler_list_dispatch+0x4c>)
   204c8:	f005 fe60 	bl	2618c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   204cc:	6823      	ldr	r3, [r4, #0]
   204ce:	b91b      	cbnz	r3, 204d8 <event_handler_list_dispatch+0x24>
}
   204d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   204d4:	f7ff bfb2 	b.w	2043c <k_mutex_unlock.constprop.0>
	return node->next;
   204d8:	681c      	ldr	r4, [r3, #0]
   204da:	2c00      	cmp	r4, #0
   204dc:	bf38      	it	cc
   204de:	2400      	movcc	r4, #0
		curr->handler(evt);
   204e0:	4628      	mov	r0, r5
   204e2:	685b      	ldr	r3, [r3, #4]
   204e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   204e6:	2c00      	cmp	r4, #0
   204e8:	d0f2      	beq.n	204d0 <event_handler_list_dispatch+0x1c>
   204ea:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   204ec:	4623      	mov	r3, r4
   204ee:	2a00      	cmp	r2, #0
   204f0:	bf38      	it	cc
   204f2:	2200      	movcc	r2, #0
   204f4:	4614      	mov	r4, r2
   204f6:	e7f3      	b.n	204e0 <event_handler_list_dispatch+0x2c>
}
   204f8:	bd38      	pop	{r3, r4, r5, pc}
   204fa:	bf00      	nop
   204fc:	2000d094 	.word	0x2000d094
   20500:	2000c9fc 	.word	0x2000c9fc

00020504 <response_is_valid>:
{
   20504:	b570      	push	{r4, r5, r6, lr}
   20506:	460e      	mov	r6, r1
   20508:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   2050a:	4605      	mov	r5, r0
   2050c:	b100      	cbz	r0, 20510 <response_is_valid+0xc>
   2050e:	b92a      	cbnz	r2, 2051c <response_is_valid+0x18>
		LOG_ERR("Invalid pointer provided");
   20510:	2145      	movs	r1, #69	; 0x45
   20512:	4809      	ldr	r0, [pc, #36]	; (20538 <response_is_valid+0x34>)
   20514:	f00a fb85 	bl	2ac22 <z_log_minimal_printk>
		return false;
   20518:	2000      	movs	r0, #0
   2051a:	e00c      	b.n	20536 <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   2051c:	4610      	mov	r0, r2
   2051e:	f7f9 f80d 	bl	1953c <strlen>
   20522:	4286      	cmp	r6, r0
   20524:	d3f8      	bcc.n	20518 <response_is_valid+0x14>
	    (memcmp(response, check, response_len) != 0)) {
   20526:	4632      	mov	r2, r6
   20528:	4621      	mov	r1, r4
   2052a:	4628      	mov	r0, r5
   2052c:	f00c fb43 	bl	2cbb6 <memcmp>
	if ((response_len < strlen(check)) ||
   20530:	fab0 f080 	clz	r0, r0
   20534:	0940      	lsrs	r0, r0, #5
}
   20536:	bd70      	pop	{r4, r5, r6, pc}
   20538:	0002fd1f 	.word	0x0002fd1f

0002053c <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   2053c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   20540:	f04f 0900 	mov.w	r9, #0
{
   20544:	4607      	mov	r7, r0
   20546:	460e      	mov	r6, r1
   20548:	4614      	mov	r4, r2
   2054a:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   2054c:	f8cd 9004 	str.w	r9, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   20550:	f7f8 fff4 	bl	1953c <strlen>
   20554:	2808      	cmp	r0, #8
   20556:	d004      	beq.n	20562 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   20558:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   2055c:	b003      	add	sp, #12
   2055e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   20562:	4630      	mov	r0, r6
   20564:	f7f8 ffea 	bl	1953c <strlen>
   20568:	2808      	cmp	r0, #8
   2056a:	d1f5      	bne.n	20558 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2056c:	8832      	ldrh	r2, [r6, #0]
   2056e:	78b3      	ldrb	r3, [r6, #2]
   20570:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   20574:	4649      	mov	r1, r9
   20576:	2202      	movs	r2, #2
   20578:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2057a:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2057e:	f009 fa2b 	bl	299d8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   20582:	2807      	cmp	r0, #7
   20584:	d904      	bls.n	20590 <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   20586:	2145      	movs	r1, #69	; 0x45
   20588:	482d      	ldr	r0, [pc, #180]	; (20640 <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   2058a:	f00a fb4a 	bl	2ac22 <z_log_minimal_printk>
   2058e:	e7e3      	b.n	20558 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   20590:	4b2c      	ldr	r3, [pc, #176]	; (20644 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20592:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   20594:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20598:	4649      	mov	r1, r9
   2059a:	1cf0      	adds	r0, r6, #3
   2059c:	f009 fa1c 	bl	299d8 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   205a0:	f1b8 0f00 	cmp.w	r8, #0
   205a4:	d118      	bne.n	205d8 <parse_psm+0x9c>
   205a6:	f04f 33ff 	mov.w	r3, #4294967295
   205aa:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   205ac:	b1cc      	cbz	r4, 205e2 <parse_psm+0xa6>
   205ae:	4620      	mov	r0, r4
   205b0:	f7f8 ffc4 	bl	1953c <strlen>
   205b4:	2808      	cmp	r0, #8
   205b6:	d114      	bne.n	205e2 <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   205b8:	8822      	ldrh	r2, [r4, #0]
   205ba:	78a3      	ldrb	r3, [r4, #2]
   205bc:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   205c0:	2100      	movs	r1, #0
   205c2:	2202      	movs	r2, #2
   205c4:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   205c6:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   205ca:	f009 fa05 	bl	299d8 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   205ce:	2807      	cmp	r0, #7
   205d0:	d917      	bls.n	20602 <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   205d2:	2145      	movs	r1, #69	; 0x45
   205d4:	481c      	ldr	r0, [pc, #112]	; (20648 <parse_psm+0x10c>)
   205d6:	e7d8      	b.n	2058a <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   205d8:	fb08 f000 	mul.w	r0, r8, r0
   205dc:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   205de:	3001      	adds	r0, #1
   205e0:	d0e4      	beq.n	205ac <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   205e2:	883a      	ldrh	r2, [r7, #0]
   205e4:	78bb      	ldrb	r3, [r7, #2]
   205e6:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   205ea:	2100      	movs	r1, #0
   205ec:	2202      	movs	r2, #2
   205ee:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   205f0:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   205f4:	f009 f9f0 	bl	299d8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   205f8:	2807      	cmp	r0, #7
   205fa:	d911      	bls.n	20620 <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   205fc:	2145      	movs	r1, #69	; 0x45
   205fe:	4813      	ldr	r0, [pc, #76]	; (2064c <parse_psm+0x110>)
   20600:	e7c3      	b.n	2058a <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   20602:	4b13      	ldr	r3, [pc, #76]	; (20650 <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20604:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   20606:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2060a:	2100      	movs	r1, #0
   2060c:	1ce0      	adds	r0, r4, #3
   2060e:	f009 f9e3 	bl	299d8 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20612:	b116      	cbz	r6, 2061a <parse_psm+0xde>
   20614:	4346      	muls	r6, r0
   20616:	602e      	str	r6, [r5, #0]
   20618:	e7e3      	b.n	205e2 <parse_psm+0xa6>
   2061a:	f04f 36ff 	mov.w	r6, #4294967295
   2061e:	e7fa      	b.n	20616 <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   20620:	4b0c      	ldr	r3, [pc, #48]	; (20654 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20622:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   20624:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20628:	2100      	movs	r1, #0
   2062a:	1cf8      	adds	r0, r7, #3
   2062c:	f009 f9d4 	bl	299d8 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   20630:	b11c      	cbz	r4, 2063a <parse_psm+0xfe>
   20632:	4360      	muls	r0, r4
   20634:	6068      	str	r0, [r5, #4]
	return 0;
   20636:	2000      	movs	r0, #0
   20638:	e790      	b.n	2055c <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2063a:	f04f 30ff 	mov.w	r0, #4294967295
   2063e:	e7f9      	b.n	20634 <parse_psm+0xf8>
   20640:	0002fe9c 	.word	0x0002fe9c
   20644:	0002e02c 	.word	0x0002e02c
   20648:	0002fed6 	.word	0x0002fed6
   2064c:	0002ff07 	.word	0x0002ff07
   20650:	0002e00c 	.word	0x0002e00c
   20654:	0002e00c 	.word	0x0002e00c

00020658 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   20658:	2300      	movs	r3, #0
{
   2065a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2065c:	b085      	sub	sp, #20
   2065e:	4607      	mov	r7, r0
   20660:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   20662:	a802      	add	r0, sp, #8
   20664:	2104      	movs	r1, #4
{
   20666:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   20668:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2066c:	f00a ff58 	bl	2b520 <at_params_list_init>
	if (err) {
   20670:	4604      	mov	r4, r0
   20672:	b138      	cbz	r0, 20684 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20674:	4602      	mov	r2, r0
   20676:	2145      	movs	r1, #69	; 0x45
   20678:	4817      	ldr	r0, [pc, #92]	; (206d8 <parse_rrc_mode+0x80>)
   2067a:	f00a fad2 	bl	2ac22 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2067e:	4620      	mov	r0, r4
   20680:	b005      	add	sp, #20
   20682:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   20684:	4601      	mov	r1, r0
   20686:	aa02      	add	r2, sp, #8
   20688:	4638      	mov	r0, r7
   2068a:	f00a ff46 	bl	2b51a <at_parser_params_from_str>
	if (err) {
   2068e:	4604      	mov	r4, r0
   20690:	b140      	cbz	r0, 206a4 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   20692:	2145      	movs	r1, #69	; 0x45
   20694:	4602      	mov	r2, r0
   20696:	4811      	ldr	r0, [pc, #68]	; (206dc <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   20698:	f00a fac3 	bl	2ac22 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   2069c:	a802      	add	r0, sp, #8
   2069e:	f00a ff52 	bl	2b546 <at_params_list_free>
	return err;
   206a2:	e7ec      	b.n	2067e <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   206a4:	4631      	mov	r1, r6
   206a6:	aa01      	add	r2, sp, #4
   206a8:	a802      	add	r0, sp, #8
   206aa:	f00b f810 	bl	2b6ce <at_params_int_get>
	if (err) {
   206ae:	4604      	mov	r4, r0
   206b0:	b118      	cbz	r0, 206ba <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   206b2:	4602      	mov	r2, r0
   206b4:	2145      	movs	r1, #69	; 0x45
   206b6:	480a      	ldr	r0, [pc, #40]	; (206e0 <parse_rrc_mode+0x88>)
   206b8:	e7ee      	b.n	20698 <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   206ba:	9a01      	ldr	r2, [sp, #4]
   206bc:	b90a      	cbnz	r2, 206c2 <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   206be:	7028      	strb	r0, [r5, #0]
   206c0:	e7ec      	b.n	2069c <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   206c2:	2a01      	cmp	r2, #1
   206c4:	d101      	bne.n	206ca <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   206c6:	702a      	strb	r2, [r5, #0]
   206c8:	e7e8      	b.n	2069c <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   206ca:	2145      	movs	r1, #69	; 0x45
   206cc:	4805      	ldr	r0, [pc, #20]	; (206e4 <parse_rrc_mode+0x8c>)
   206ce:	f00a faa8 	bl	2ac22 <z_log_minimal_printk>
		err = -EINVAL;
   206d2:	f06f 0415 	mvn.w	r4, #21
   206d6:	e7e1      	b.n	2069c <parse_rrc_mode+0x44>
   206d8:	0002fd3d 	.word	0x0002fd3d
   206dc:	0002ff2f 	.word	0x0002ff2f
   206e0:	0002ff5f 	.word	0x0002ff5f
   206e4:	0002ff8d 	.word	0x0002ff8d

000206e8 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   206e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   206ec:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   206ee:	2300      	movs	r3, #0
{
   206f0:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   206f2:	9303      	str	r3, [sp, #12]
   206f4:	f8ad 3010 	strh.w	r3, [sp, #16]
   206f8:	f88d 3012 	strb.w	r3, [sp, #18]
{
   206fc:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   206fe:	2309      	movs	r3, #9
   20700:	2207      	movs	r2, #7
{
   20702:	4605      	mov	r5, r0
   20704:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20706:	a805      	add	r0, sp, #20
   20708:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   2070a:	e9cd 2300 	strd	r2, r3, [sp]
{
   2070e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20712:	f00a ff05 	bl	2b520 <at_params_list_init>
	if (err) {
   20716:	4604      	mov	r4, r0
   20718:	b140      	cbz	r0, 2072c <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2071a:	4602      	mov	r2, r0
   2071c:	2145      	movs	r1, #69	; 0x45
   2071e:	4854      	ldr	r0, [pc, #336]	; (20870 <parse_cereg+0x188>)
   20720:	f00a fa7f 	bl	2ac22 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   20724:	4620      	mov	r0, r4
   20726:	b00b      	add	sp, #44	; 0x2c
   20728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   2072c:	4601      	mov	r1, r0
   2072e:	aa05      	add	r2, sp, #20
   20730:	4628      	mov	r0, r5
   20732:	f00a fef2 	bl	2b51a <at_parser_params_from_str>
	if (err) {
   20736:	4604      	mov	r4, r0
   20738:	b140      	cbz	r0, 2074c <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2073a:	2145      	movs	r1, #69	; 0x45
   2073c:	4602      	mov	r2, r0
   2073e:	484d      	ldr	r0, [pc, #308]	; (20874 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   20740:	f00a fa6f 	bl	2ac22 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   20744:	a805      	add	r0, sp, #20
   20746:	f00a fefe 	bl	2b546 <at_params_list_free>
	return err;
   2074a:	e7eb      	b.n	20724 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   2074c:	4601      	mov	r1, r0
   2074e:	466b      	mov	r3, sp
   20750:	aa03      	add	r2, sp, #12
   20752:	a805      	add	r0, sp, #20
   20754:	f00a fff2 	bl	2b73c <at_params_string_get>
	if (err) {
   20758:	4604      	mov	r4, r0
   2075a:	b118      	cbz	r0, 20764 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2075c:	4602      	mov	r2, r0
   2075e:	2145      	movs	r1, #69	; 0x45
   20760:	4845      	ldr	r0, [pc, #276]	; (20878 <parse_cereg+0x190>)
   20762:	e7ed      	b.n	20740 <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20764:	4a45      	ldr	r2, [pc, #276]	; (2087c <parse_cereg+0x194>)
   20766:	9900      	ldr	r1, [sp, #0]
   20768:	a803      	add	r0, sp, #12
   2076a:	f7ff fecb 	bl	20504 <response_is_valid>
   2076e:	2800      	cmp	r0, #0
   20770:	d0e8      	beq.n	20744 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   20772:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   20774:	bf14      	ite	ne
   20776:	2101      	movne	r1, #1
   20778:	2102      	moveq	r1, #2
   2077a:	aa07      	add	r2, sp, #28
   2077c:	a805      	add	r0, sp, #20
   2077e:	f00a ffa6 	bl	2b6ce <at_params_int_get>
	if (err) {
   20782:	1e05      	subs	r5, r0, #0
   20784:	d132      	bne.n	207ec <parse_cereg+0x104>
	switch (reg_status) {
   20786:	9d07      	ldr	r5, [sp, #28]
   20788:	2d08      	cmp	r5, #8
   2078a:	d012      	beq.n	207b2 <parse_cereg+0xca>
   2078c:	dc0f      	bgt.n	207ae <parse_cereg+0xc6>
   2078e:	2d05      	cmp	r5, #5
   20790:	d90f      	bls.n	207b2 <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   20792:	462a      	mov	r2, r5
   20794:	2145      	movs	r1, #69	; 0x45
   20796:	483a      	ldr	r0, [pc, #232]	; (20880 <parse_cereg+0x198>)
   20798:	f00a fa43 	bl	2ac22 <z_log_minimal_printk>
		return -EINVAL;
   2079c:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   207a0:	462a      	mov	r2, r5
   207a2:	2145      	movs	r1, #69	; 0x45
   207a4:	4837      	ldr	r0, [pc, #220]	; (20884 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   207a6:	f00a fa3c 	bl	2ac22 <z_log_minimal_printk>
			goto clean_exit;
   207aa:	462c      	mov	r4, r5
   207ac:	e7ca      	b.n	20744 <parse_cereg+0x5c>
	switch (reg_status) {
   207ae:	2d5a      	cmp	r5, #90	; 0x5a
   207b0:	d1ef      	bne.n	20792 <parse_cereg+0xaa>
	if (reg_status) {
   207b2:	f1b9 0f00 	cmp.w	r9, #0
   207b6:	d001      	beq.n	207bc <parse_cereg+0xd4>
		*reg_status = status;
   207b8:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   207bc:	2e00      	cmp	r6, #0
   207be:	d03e      	beq.n	2083e <parse_cereg+0x156>
   207c0:	2d5a      	cmp	r5, #90	; 0x5a
   207c2:	d050      	beq.n	20866 <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   207c4:	a805      	add	r0, sp, #20
   207c6:	f00a ffe0 	bl	2b78a <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   207ca:	2803      	cmp	r0, #3
   207cc:	d94b      	bls.n	20866 <parse_cereg+0x17e>
		err = at_params_string_get(
   207ce:	2f00      	cmp	r7, #0
   207d0:	bf14      	ite	ne
   207d2:	2102      	movne	r1, #2
   207d4:	2103      	moveq	r1, #3
   207d6:	ab01      	add	r3, sp, #4
   207d8:	aa07      	add	r2, sp, #28
   207da:	a805      	add	r0, sp, #20
   207dc:	f00a ffae 	bl	2b73c <at_params_string_get>
		if (err) {
   207e0:	4605      	mov	r5, r0
   207e2:	b128      	cbz	r0, 207f0 <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   207e4:	4602      	mov	r2, r0
   207e6:	2145      	movs	r1, #69	; 0x45
   207e8:	4827      	ldr	r0, [pc, #156]	; (20888 <parse_cereg+0x1a0>)
   207ea:	e7dc      	b.n	207a6 <parse_cereg+0xbe>
	if (status < 0) {
   207ec:	dae1      	bge.n	207b2 <parse_cereg+0xca>
   207ee:	e7d7      	b.n	207a0 <parse_cereg+0xb8>
		str_buf[len] = '\0';
   207f0:	9b01      	ldr	r3, [sp, #4]
   207f2:	aa0a      	add	r2, sp, #40	; 0x28
   207f4:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   207f6:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   207f8:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   207fc:	2210      	movs	r2, #16
   207fe:	a807      	add	r0, sp, #28
   20800:	f009 f8ea 	bl	299d8 <strtoul>
		len = sizeof(str_buf) - 1;
   20804:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   20806:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   20808:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   2080a:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   2080c:	bf14      	ite	ne
   2080e:	2103      	movne	r1, #3
   20810:	2104      	moveq	r1, #4
   20812:	ab01      	add	r3, sp, #4
   20814:	aa07      	add	r2, sp, #28
   20816:	a805      	add	r0, sp, #20
   20818:	f00a ff90 	bl	2b73c <at_params_string_get>
		if (err) {
   2081c:	4605      	mov	r5, r0
   2081e:	b118      	cbz	r0, 20828 <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   20820:	4602      	mov	r2, r0
   20822:	2145      	movs	r1, #69	; 0x45
   20824:	4819      	ldr	r0, [pc, #100]	; (2088c <parse_cereg+0x1a4>)
   20826:	e7be      	b.n	207a6 <parse_cereg+0xbe>
		str_buf[len] = '\0';
   20828:	9b01      	ldr	r3, [sp, #4]
   2082a:	aa0a      	add	r2, sp, #40	; 0x28
   2082c:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   2082e:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   20830:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   20834:	2210      	movs	r2, #16
   20836:	a807      	add	r0, sp, #28
   20838:	f009 f8ce 	bl	299d8 <strtoul>
   2083c:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   2083e:	f1b8 0f00 	cmp.w	r8, #0
   20842:	f43f af7f 	beq.w	20744 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   20846:	2f00      	cmp	r7, #0
   20848:	bf14      	ite	ne
   2084a:	2104      	movne	r1, #4
   2084c:	2105      	moveq	r1, #5
   2084e:	aa02      	add	r2, sp, #8
   20850:	a805      	add	r0, sp, #20
   20852:	f00a ff3c 	bl	2b6ce <at_params_int_get>
		if (err) {
   20856:	b920      	cbnz	r0, 20862 <parse_cereg+0x17a>
			*lte_mode = mode;
   20858:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   2085c:	f888 3000 	strb.w	r3, [r8]
   20860:	e770      	b.n	20744 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   20862:	2300      	movs	r3, #0
   20864:	e7fa      	b.n	2085c <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   20866:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2086a:	e9c6 3302 	strd	r3, r3, [r6, #8]
   2086e:	e7e6      	b.n	2083e <parse_cereg+0x156>
   20870:	0002fd3d 	.word	0x0002fd3d
   20874:	0002ffae 	.word	0x0002ffae
   20878:	0002ffe0 	.word	0x0002ffe0
   2087c:	0002fcd1 	.word	0x0002fcd1
   20880:	0003000e 	.word	0x0003000e
   20884:	0002f93a 	.word	0x0002f93a
   20888:	0003003b 	.word	0x0003003b
   2088c:	0003006c 	.word	0x0003006c

00020890 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   20890:	2300      	movs	r3, #0
{
   20892:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20894:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   20896:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   20898:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   2089c:	2900      	cmp	r1, #0
   2089e:	d038      	beq.n	20912 <parse_xt3412+0x82>
   208a0:	b3b8      	cbz	r0, 20912 <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   208a2:	2104      	movs	r1, #4
   208a4:	4668      	mov	r0, sp
   208a6:	f00a fe3b 	bl	2b520 <at_params_list_init>
	if (err) {
   208aa:	4604      	mov	r4, r0
   208ac:	b138      	cbz	r0, 208be <parse_xt3412+0x2e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   208ae:	4602      	mov	r2, r0
   208b0:	2145      	movs	r1, #69	; 0x45
   208b2:	4819      	ldr	r0, [pc, #100]	; (20918 <parse_xt3412+0x88>)
   208b4:	f00a f9b5 	bl	2ac22 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   208b8:	4620      	mov	r0, r4
   208ba:	b002      	add	sp, #8
   208bc:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   208be:	4601      	mov	r1, r0
   208c0:	466a      	mov	r2, sp
   208c2:	4630      	mov	r0, r6
   208c4:	f00a fe29 	bl	2b51a <at_parser_params_from_str>
	if (err) {
   208c8:	4604      	mov	r4, r0
   208ca:	b140      	cbz	r0, 208de <parse_xt3412+0x4e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   208cc:	2145      	movs	r1, #69	; 0x45
   208ce:	4602      	mov	r2, r0
   208d0:	4812      	ldr	r0, [pc, #72]	; (2091c <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   208d2:	f00a f9a6 	bl	2ac22 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   208d6:	4668      	mov	r0, sp
   208d8:	f00a fe35 	bl	2b546 <at_params_list_free>
	return err;
   208dc:	e7ec      	b.n	208b8 <parse_xt3412+0x28>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   208de:	462a      	mov	r2, r5
   208e0:	2102      	movs	r1, #2
   208e2:	4668      	mov	r0, sp
   208e4:	f00a ff12 	bl	2b70c <at_params_int64_get>
	if (err) {
   208e8:	4604      	mov	r4, r0
   208ea:	b118      	cbz	r0, 208f4 <parse_xt3412+0x64>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   208ec:	4602      	mov	r2, r0
   208ee:	2145      	movs	r1, #69	; 0x45
   208f0:	480b      	ldr	r0, [pc, #44]	; (20920 <parse_xt3412+0x90>)
   208f2:	e7ee      	b.n	208d2 <parse_xt3412+0x42>
	if ((*time > T3412_MAX) || *time < 0) {
   208f4:	2108      	movs	r1, #8
   208f6:	e9d5 2300 	ldrd	r2, r3, [r5]
   208fa:	480a      	ldr	r0, [pc, #40]	; (20924 <parse_xt3412+0x94>)
   208fc:	4299      	cmp	r1, r3
   208fe:	bf08      	it	eq
   20900:	4290      	cmpeq	r0, r2
   20902:	d2e8      	bcs.n	208d6 <parse_xt3412+0x46>
		LOG_WRN("Parsed time parameter not within valid range");
   20904:	2157      	movs	r1, #87	; 0x57
   20906:	4808      	ldr	r0, [pc, #32]	; (20928 <parse_xt3412+0x98>)
   20908:	f00a f98b 	bl	2ac22 <z_log_minimal_printk>
		err = -EINVAL;
   2090c:	f06f 0415 	mvn.w	r4, #21
   20910:	e7e1      	b.n	208d6 <parse_xt3412+0x46>
		return -EINVAL;
   20912:	f06f 0415 	mvn.w	r4, #21
   20916:	e7cf      	b.n	208b8 <parse_xt3412+0x28>
   20918:	0002fd3d 	.word	0x0002fd3d
   2091c:	00030092 	.word	0x00030092
   20920:	000300c4 	.word	0x000300c4
   20924:	5099e000 	.word	0x5099e000
   20928:	000300f6 	.word	0x000300f6

0002092c <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   2092c:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   2092e:	4604      	mov	r4, r0
   20930:	b928      	cbnz	r0, 2093e <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   20932:	480b      	ldr	r0, [pc, #44]	; (20960 <neighborcell_count_get+0x34>)
   20934:	2145      	movs	r1, #69	; 0x45
   20936:	f00a f974 	bl	2ac22 <z_log_minimal_printk>
   2093a:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   2093c:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   2093e:	2400      	movs	r4, #0
   20940:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   20942:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   20946:	282c      	cmp	r0, #44	; 0x2c
   20948:	d101      	bne.n	2094e <neighborcell_count_get+0x22>
			count++;
   2094a:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   2094c:	e7f9      	b.n	20942 <neighborcell_count_get+0x16>
   2094e:	2800      	cmp	r0, #0
   20950:	d1f7      	bne.n	20942 <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   20952:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   20954:	bf82      	ittt	hi
   20956:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   20958:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   2095a:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   2095e:	e7ed      	b.n	2093c <neighborcell_count_get+0x10>
   20960:	00030128 	.word	0x00030128

00020964 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   20964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   20968:	230b      	movs	r3, #11
{
   2096a:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2096c:	2100      	movs	r1, #0
{
   2096e:	4606      	mov	r6, r0
   20970:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20972:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   20976:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20978:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   2097c:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   2097e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20982:	2b2c      	cmp	r3, #44	; 0x2c
   20984:	d101      	bne.n	2098a <parse_ncellmeas+0x26>
			count++;
   20986:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   20988:	e7f9      	b.n	2097e <parse_ncellmeas+0x1a>
   2098a:	2b00      	cmp	r3, #0
   2098c:	d1f7      	bne.n	2097e <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   2098e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20992:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   20996:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20998:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   2099a:	a807      	add	r0, sp, #28
   2099c:	f00a fdc0 	bl	2b520 <at_params_list_init>
	if (err) {
   209a0:	4604      	mov	r4, r0
   209a2:	b140      	cbz	r0, 209b6 <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   209a4:	4602      	mov	r2, r0
   209a6:	2145      	movs	r1, #69	; 0x45
   209a8:	488f      	ldr	r0, [pc, #572]	; (20be8 <parse_ncellmeas+0x284>)
   209aa:	f00a f93a 	bl	2ac22 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   209ae:	4620      	mov	r0, r4
   209b0:	b00d      	add	sp, #52	; 0x34
   209b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   209b6:	4601      	mov	r1, r0
   209b8:	aa07      	add	r2, sp, #28
   209ba:	4630      	mov	r0, r6
   209bc:	f00a fdad 	bl	2b51a <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   209c0:	4604      	mov	r4, r0
   209c2:	b150      	cbz	r0, 209da <parse_ncellmeas+0x76>
   209c4:	1dc3      	adds	r3, r0, #7
   209c6:	d015      	beq.n	209f4 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   209c8:	2145      	movs	r1, #69	; 0x45
   209ca:	4602      	mov	r2, r0
   209cc:	4887      	ldr	r0, [pc, #540]	; (20bec <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   209ce:	f00a f928 	bl	2ac22 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   209d2:	a807      	add	r0, sp, #28
   209d4:	f00a fdb7 	bl	2b546 <at_params_list_free>
	return err;
   209d8:	e7e9      	b.n	209ae <parse_ncellmeas+0x4a>
	bool incomplete = false;
   209da:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   209dc:	2100      	movs	r1, #0
   209de:	ab04      	add	r3, sp, #16
   209e0:	aa09      	add	r2, sp, #36	; 0x24
   209e2:	a807      	add	r0, sp, #28
   209e4:	f00a feaa 	bl	2b73c <at_params_string_get>
	if (err) {
   209e8:	4604      	mov	r4, r0
   209ea:	b128      	cbz	r0, 209f8 <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   209ec:	4602      	mov	r2, r0
   209ee:	2145      	movs	r1, #69	; 0x45
   209f0:	487f      	ldr	r0, [pc, #508]	; (20bf0 <parse_ncellmeas+0x28c>)
   209f2:	e7ec      	b.n	209ce <parse_ncellmeas+0x6a>
		incomplete = true;
   209f4:	2701      	movs	r7, #1
   209f6:	e7f1      	b.n	209dc <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   209f8:	4a7e      	ldr	r2, [pc, #504]	; (20bf4 <parse_ncellmeas+0x290>)
   209fa:	9904      	ldr	r1, [sp, #16]
   209fc:	a809      	add	r0, sp, #36	; 0x24
   209fe:	f7ff fd81 	bl	20504 <response_is_valid>
   20a02:	2800      	cmp	r0, #0
   20a04:	d0e5      	beq.n	209d2 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   20a06:	2101      	movs	r1, #1
   20a08:	aa01      	add	r2, sp, #4
   20a0a:	a807      	add	r0, sp, #28
   20a0c:	f00a fe5f 	bl	2b6ce <at_params_int_get>
	if (err) {
   20a10:	4604      	mov	r4, r0
   20a12:	2800      	cmp	r0, #0
   20a14:	d1dd      	bne.n	209d2 <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   20a16:	9b01      	ldr	r3, [sp, #4]
   20a18:	2b00      	cmp	r3, #0
   20a1a:	f040 80e3 	bne.w	20be4 <parse_ncellmeas+0x280>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   20a1e:	2102      	movs	r1, #2
   20a20:	aa02      	add	r2, sp, #8
   20a22:	a807      	add	r0, sp, #28
   20a24:	f00a fefb 	bl	2b81e <string_param_to_int.constprop.0>
	if (err) {
   20a28:	4604      	mov	r4, r0
   20a2a:	2800      	cmp	r0, #0
   20a2c:	d1d1      	bne.n	209d2 <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20a2e:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   20a30:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20a38:	bfa4      	itt	ge
   20a3a:	f04f 33ff 	movge.w	r3, #4294967295
   20a3e:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   20a40:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20a42:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   20a44:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20a46:	aa05      	add	r2, sp, #20
   20a48:	ab03      	add	r3, sp, #12
   20a4a:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   20a4c:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20a50:	f00a fe74 	bl	2b73c <at_params_string_get>
	if (err) {
   20a54:	4604      	mov	r4, r0
   20a56:	2800      	cmp	r0, #0
   20a58:	d1bb      	bne.n	209d2 <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   20a5a:	9b03      	ldr	r3, [sp, #12]
   20a5c:	aa0c      	add	r2, sp, #48	; 0x30
   20a5e:	4413      	add	r3, r2
   20a60:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   20a64:	210a      	movs	r1, #10
   20a66:	1d2a      	adds	r2, r5, #4
   20a68:	f10d 0017 	add.w	r0, sp, #23
   20a6c:	f00a feb1 	bl	2b7d2 <string_to_int>
	if (err) {
   20a70:	4604      	mov	r4, r0
   20a72:	2800      	cmp	r0, #0
   20a74:	d1ad      	bne.n	209d2 <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   20a76:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   20a7a:	462a      	mov	r2, r5
   20a7c:	210a      	movs	r1, #10
   20a7e:	a805      	add	r0, sp, #20
   20a80:	f00a fea7 	bl	2b7d2 <string_to_int>
	if (err) {
   20a84:	4604      	mov	r4, r0
   20a86:	2800      	cmp	r0, #0
   20a88:	d1a3      	bne.n	209d2 <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   20a8a:	2104      	movs	r1, #4
   20a8c:	aa02      	add	r2, sp, #8
   20a8e:	a807      	add	r0, sp, #28
   20a90:	f00a fec5 	bl	2b81e <string_param_to_int.constprop.0>
	if (err) {
   20a94:	4604      	mov	r4, r0
   20a96:	2800      	cmp	r0, #0
   20a98:	d19b      	bne.n	209d2 <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   20a9a:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20a9c:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   20a9e:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20aa0:	aa02      	add	r2, sp, #8
   20aa2:	a807      	add	r0, sp, #28
   20aa4:	f00a fe13 	bl	2b6ce <at_params_int_get>
	if (err) {
   20aa8:	4604      	mov	r4, r0
   20aaa:	2800      	cmp	r0, #0
   20aac:	d191      	bne.n	209d2 <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   20aae:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20ab0:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   20ab2:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20ab4:	f105 0210 	add.w	r2, r5, #16
   20ab8:	a807      	add	r0, sp, #28
   20aba:	f00a fe08 	bl	2b6ce <at_params_int_get>
	if (err) {
   20abe:	4604      	mov	r4, r0
   20ac0:	2800      	cmp	r0, #0
   20ac2:	d186      	bne.n	209d2 <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   20ac4:	4641      	mov	r1, r8
   20ac6:	f105 0228 	add.w	r2, r5, #40	; 0x28
   20aca:	a807      	add	r0, sp, #28
   20acc:	f00a fdc3 	bl	2b656 <at_params_short_get>
	if (err) {
   20ad0:	4604      	mov	r4, r0
   20ad2:	2800      	cmp	r0, #0
   20ad4:	f47f af7d 	bne.w	209d2 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   20ad8:	2108      	movs	r1, #8
   20ada:	aa02      	add	r2, sp, #8
   20adc:	a807      	add	r0, sp, #28
   20ade:	f00a fdf6 	bl	2b6ce <at_params_int_get>
	if (err) {
   20ae2:	4604      	mov	r4, r0
   20ae4:	2800      	cmp	r0, #0
   20ae6:	f47f af74 	bne.w	209d2 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   20aea:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   20aec:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   20aee:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   20af0:	aa02      	add	r2, sp, #8
   20af2:	a807      	add	r0, sp, #28
   20af4:	f00a fdeb 	bl	2b6ce <at_params_int_get>
	if (err) {
   20af8:	4604      	mov	r4, r0
   20afa:	2800      	cmp	r0, #0
   20afc:	f47f af69 	bne.w	209d2 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   20b00:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   20b02:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   20b04:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   20b06:	f105 0220 	add.w	r2, r5, #32
   20b0a:	a807      	add	r0, sp, #28
   20b0c:	f00a fdfe 	bl	2b70c <at_params_int64_get>
	if (err) {
   20b10:	4604      	mov	r4, r0
   20b12:	2800      	cmp	r0, #0
   20b14:	f47f af5d 	bne.w	209d2 <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   20b18:	4630      	mov	r0, r6
   20b1a:	f7ff ff07 	bl	2092c <neighborcell_count_get>
   20b1e:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   20b22:	b2c0      	uxtb	r0, r0
   20b24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   20b28:	f100 060b 	add.w	r6, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   20b2c:	a807      	add	r0, sp, #28
   20b2e:	f00a fe2c 	bl	2b78a <at_params_valid_count_get>
   20b32:	4286      	cmp	r6, r0
   20b34:	d208      	bcs.n	20b48 <parse_ncellmeas+0x1e4>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   20b36:	4631      	mov	r1, r6
   20b38:	f105 0218 	add.w	r2, r5, #24
   20b3c:	a807      	add	r0, sp, #28
   20b3e:	f00a fde5 	bl	2b70c <at_params_int64_get>
		if (err) {
   20b42:	b128      	cbz	r0, 20b50 <parse_ncellmeas+0x1ec>
		err = at_params_int_get(&resp_list,
   20b44:	4604      	mov	r4, r0
   20b46:	e744      	b.n	209d2 <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   20b48:	2200      	movs	r2, #0
   20b4a:	2300      	movs	r3, #0
   20b4c:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   20b50:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20b54:	2b00      	cmp	r3, #0
   20b56:	f43f af3c 	beq.w	209d2 <parse_ncellmeas+0x6e>
   20b5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	f43f af38 	beq.w	209d2 <parse_ncellmeas+0x6e>
   20b62:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20b64:	f04f 0800 	mov.w	r8, #0
   20b68:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20b6c:	4598      	cmp	r8, r3
   20b6e:	d304      	bcc.n	20b7a <parse_ncellmeas+0x216>
		err = -E2BIG;
   20b70:	2f00      	cmp	r7, #0
   20b72:	bf18      	it	ne
   20b74:	f06f 0406 	mvnne.w	r4, #6
   20b78:	e72b      	b.n	209d2 <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   20b7a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   20b7c:	1f31      	subs	r1, r6, #4
   20b7e:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   20b82:	a807      	add	r0, sp, #28
   20b84:	ea4f 1908 	mov.w	r9, r8, lsl #4
   20b88:	f00a fda1 	bl	2b6ce <at_params_int_get>
		if (err) {
   20b8c:	2800      	cmp	r0, #0
   20b8e:	d1d9      	bne.n	20b44 <parse_ncellmeas+0x1e0>
					  &cells->neighbor_cells[i].phys_cell_id);
   20b90:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   20b92:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   20b94:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   20b96:	3208      	adds	r2, #8
   20b98:	a807      	add	r0, sp, #28
   20b9a:	f00a fd5c 	bl	2b656 <at_params_short_get>
		if (err) {
   20b9e:	2800      	cmp	r0, #0
   20ba0:	d1d0      	bne.n	20b44 <parse_ncellmeas+0x1e0>
		err = at_params_int_get(&resp_list,
   20ba2:	aa02      	add	r2, sp, #8
   20ba4:	1eb1      	subs	r1, r6, #2
   20ba6:	a807      	add	r0, sp, #28
   20ba8:	f00a fd91 	bl	2b6ce <at_params_int_get>
		if (err) {
   20bac:	2800      	cmp	r0, #0
   20bae:	d1c9      	bne.n	20b44 <parse_ncellmeas+0x1e0>
		cells->neighbor_cells[i].rsrp = tmp;
   20bb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20bb2:	9a02      	ldr	r2, [sp, #8]
   20bb4:	444b      	add	r3, r9
   20bb6:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   20bb8:	1e71      	subs	r1, r6, #1
   20bba:	aa02      	add	r2, sp, #8
   20bbc:	a807      	add	r0, sp, #28
   20bbe:	f00a fd86 	bl	2b6ce <at_params_int_get>
		if (err) {
   20bc2:	2800      	cmp	r0, #0
   20bc4:	d1be      	bne.n	20b44 <parse_ncellmeas+0x1e0>
		cells->neighbor_cells[i].rsrq = tmp;
   20bc6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   20bc8:	9b02      	ldr	r3, [sp, #8]
   20bca:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   20bcc:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   20bce:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   20bd0:	a807      	add	r0, sp, #28
   20bd2:	3204      	adds	r2, #4
   20bd4:	f00a fd7b 	bl	2b6ce <at_params_int_get>
		if (err) {
   20bd8:	3605      	adds	r6, #5
   20bda:	2800      	cmp	r0, #0
   20bdc:	d1b2      	bne.n	20b44 <parse_ncellmeas+0x1e0>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20bde:	f108 0801 	add.w	r8, r8, #1
   20be2:	e7c1      	b.n	20b68 <parse_ncellmeas+0x204>
		err = 1;
   20be4:	2401      	movs	r4, #1
   20be6:	e6f4      	b.n	209d2 <parse_ncellmeas+0x6e>
   20be8:	0002fd3d 	.word	0x0002fd3d
   20bec:	00030157 	.word	0x00030157
   20bf0:	0002ffe0 	.word	0x0002ffe0
   20bf4:	0002fcaf 	.word	0x0002fcaf

00020bf8 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   20bf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   20bfa:	2300      	movs	r3, #0
{
   20bfc:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   20bfe:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   20c00:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   20c04:	2900      	cmp	r1, #0
   20c06:	d047      	beq.n	20c98 <parse_xmodemsleep+0xa0>
   20c08:	2800      	cmp	r0, #0
   20c0a:	d045      	beq.n	20c98 <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   20c0c:	2104      	movs	r1, #4
   20c0e:	a802      	add	r0, sp, #8
   20c10:	f00a fc86 	bl	2b520 <at_params_list_init>
	if (err) {
   20c14:	4604      	mov	r4, r0
   20c16:	b138      	cbz	r0, 20c28 <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20c18:	4602      	mov	r2, r0
   20c1a:	2145      	movs	r1, #69	; 0x45
   20c1c:	4820      	ldr	r0, [pc, #128]	; (20ca0 <parse_xmodemsleep+0xa8>)
   20c1e:	f00a f800 	bl	2ac22 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   20c22:	4620      	mov	r0, r4
   20c24:	b004      	add	sp, #16
   20c26:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20c28:	4601      	mov	r1, r0
   20c2a:	aa02      	add	r2, sp, #8
   20c2c:	4630      	mov	r0, r6
   20c2e:	f00a fc74 	bl	2b51a <at_parser_params_from_str>
	if (err) {
   20c32:	4604      	mov	r4, r0
   20c34:	b128      	cbz	r0, 20c42 <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   20c36:	2145      	movs	r1, #69	; 0x45
   20c38:	4602      	mov	r2, r0
   20c3a:	481a      	ldr	r0, [pc, #104]	; (20ca4 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20c3c:	f009 fff1 	bl	2ac22 <z_log_minimal_printk>
		goto clean_exit;
   20c40:	e019      	b.n	20c76 <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   20c42:	2101      	movs	r1, #1
   20c44:	f10d 0206 	add.w	r2, sp, #6
   20c48:	a802      	add	r0, sp, #8
   20c4a:	f00a fd24 	bl	2b696 <at_params_unsigned_short_get>
	if (err) {
   20c4e:	4604      	mov	r4, r0
   20c50:	b118      	cbz	r0, 20c5a <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   20c52:	4602      	mov	r2, r0
   20c54:	2145      	movs	r1, #69	; 0x45
   20c56:	4814      	ldr	r0, [pc, #80]	; (20ca8 <parse_xmodemsleep+0xb0>)
   20c58:	e7f0      	b.n	20c3c <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   20c5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20c5e:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   20c60:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20c62:	f00a fd92 	bl	2b78a <at_params_valid_count_get>
   20c66:	2802      	cmp	r0, #2
   20c68:	d809      	bhi.n	20c7e <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   20c6a:	f04f 32ff 	mov.w	r2, #4294967295
   20c6e:	f04f 33ff 	mov.w	r3, #4294967295
   20c72:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   20c76:	a802      	add	r0, sp, #8
   20c78:	f00a fc65 	bl	2b546 <at_params_list_free>
	return err;
   20c7c:	e7d1      	b.n	20c22 <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   20c7e:	2102      	movs	r1, #2
   20c80:	f105 0208 	add.w	r2, r5, #8
   20c84:	a802      	add	r0, sp, #8
   20c86:	f00a fd41 	bl	2b70c <at_params_int64_get>
	if (err) {
   20c8a:	4604      	mov	r4, r0
   20c8c:	2800      	cmp	r0, #0
   20c8e:	d0f2      	beq.n	20c76 <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20c90:	4602      	mov	r2, r0
   20c92:	2145      	movs	r1, #69	; 0x45
   20c94:	4805      	ldr	r0, [pc, #20]	; (20cac <parse_xmodemsleep+0xb4>)
   20c96:	e7d1      	b.n	20c3c <parse_xmodemsleep+0x44>
		return -EINVAL;
   20c98:	f06f 0415 	mvn.w	r4, #21
   20c9c:	e7c1      	b.n	20c22 <parse_xmodemsleep+0x2a>
   20c9e:	bf00      	nop
   20ca0:	0002fd3d 	.word	0x0002fd3d
   20ca4:	0003018e 	.word	0x0003018e
   20ca8:	000301c5 	.word	0x000301c5
   20cac:	000301f3 	.word	0x000301f3

00020cb0 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   20cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cb2:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   20cb4:	4604      	mov	r4, r0
   20cb6:	b1e8      	cbz	r0, 20cf4 <parse_mdmev+0x44>
   20cb8:	b1e1      	cbz	r1, 20cf4 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   20cba:	2108      	movs	r1, #8
   20cbc:	4a0f      	ldr	r2, [pc, #60]	; (20cfc <parse_mdmev+0x4c>)
   20cbe:	f7ff fc21 	bl	20504 <response_is_valid>
   20cc2:	b930      	cbnz	r0, 20cd2 <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   20cc4:	480e      	ldr	r0, [pc, #56]	; (20d00 <parse_mdmev+0x50>)
   20cc6:	2145      	movs	r1, #69	; 0x45
   20cc8:	f009 ffab 	bl	2ac22 <z_log_minimal_printk>
		return -EIO;
   20ccc:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   20cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20cd2:	2500      	movs	r5, #0
   20cd4:	4f0b      	ldr	r7, [pc, #44]	; (20d04 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   20cd6:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   20cd8:	4621      	mov	r1, r4
   20cda:	f857 0b04 	ldr.w	r0, [r7], #4
   20cde:	f7f8 fc23 	bl	19528 <strcmp>
   20ce2:	b908      	cbnz	r0, 20ce8 <parse_mdmev+0x38>
			*modem_evt = i;
   20ce4:	7035      	strb	r5, [r6, #0]
			return 0;
   20ce6:	e7f3      	b.n	20cd0 <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20ce8:	3501      	adds	r5, #1
   20cea:	2d05      	cmp	r5, #5
   20cec:	d1f4      	bne.n	20cd8 <parse_mdmev+0x28>
	return -ENODATA;
   20cee:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20cf2:	e7ed      	b.n	20cd0 <parse_mdmev+0x20>
		return -EINVAL;
   20cf4:	f06f 0015 	mvn.w	r0, #21
   20cf8:	e7ea      	b.n	20cd0 <parse_mdmev+0x20>
   20cfa:	bf00      	nop
   20cfc:	0003022d 	.word	0x0003022d
   20d00:	00030236 	.word	0x00030236
   20d04:	0002dff8 	.word	0x0002dff8

00020d08 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20d08:	4803      	ldr	r0, [pc, #12]	; (20d18 <k_sys_fatal_error_handler+0x10>)
   20d0a:	2145      	movs	r1, #69	; 0x45
{
   20d0c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   20d0e:	f009 ff88 	bl	2ac22 <z_log_minimal_printk>
		sys_arch_reboot(0);
   20d12:	2000      	movs	r0, #0
   20d14:	f7fb fd84 	bl	1c820 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   20d18:	000302b3 	.word	0x000302b3

00020d1c <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   20d1c:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   20d1e:	4604      	mov	r4, r0
   20d20:	b930      	cbnz	r0, 20d30 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   20d22:	480b      	ldr	r0, [pc, #44]	; (20d50 <date_time_now+0x34>)
   20d24:	2145      	movs	r1, #69	; 0x45
   20d26:	f009 ff7c 	bl	2ac22 <z_log_minimal_printk>
   20d2a:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   20d2e:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   20d30:	f000 f88a 	bl	20e48 <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   20d34:	b930      	cbnz	r0, 20d44 <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   20d36:	4807      	ldr	r0, [pc, #28]	; (20d54 <date_time_now+0x38>)
   20d38:	2157      	movs	r1, #87	; 0x57
   20d3a:	f009 ff72 	bl	2ac22 <z_log_minimal_printk>
		return -ENODATA;
   20d3e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20d42:	e7f4      	b.n	20d2e <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   20d44:	4620      	mov	r0, r4
}
   20d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   20d4a:	f000 b853 	b.w	20df4 <date_time_core_now>
   20d4e:	bf00      	nop
   20d50:	000302d5 	.word	0x000302d5
   20d54:	00030432 	.word	0x00030432

00020d58 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   20d58:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   20d5a:	bf1c      	itt	ne
   20d5c:	4b03      	ldrne	r3, [pc, #12]	; (20d6c <date_time_core_notify_event+0x14>)
   20d5e:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   20d60:	4b03      	ldr	r3, [pc, #12]	; (20d70 <date_time_core_notify_event+0x18>)
   20d62:	681b      	ldr	r3, [r3, #0]
   20d64:	b10b      	cbz	r3, 20d6a <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   20d66:	4801      	ldr	r0, [pc, #4]	; (20d6c <date_time_core_notify_event+0x14>)
   20d68:	4718      	bx	r3
	}
}
   20d6a:	4770      	bx	lr
   20d6c:	2000d5f8 	.word	0x2000d5f8
   20d70:	2000d09c 	.word	0x2000d09c

00020d74 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   20d74:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   20d76:	7803      	ldrb	r3, [r0, #0]
   20d78:	b9e3      	cbnz	r3, 20db4 <date_time_lte_ind_handler+0x40>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   20d7a:	7a03      	ldrb	r3, [r0, #8]
   20d7c:	3b01      	subs	r3, #1
   20d7e:	2b07      	cmp	r3, #7
   20d80:	d818      	bhi.n	20db4 <date_time_lte_ind_handler+0x40>
   20d82:	e8df f003 	tbb	[pc, r3]
   20d86:	1304      	.short	0x1304
   20d88:	17041717 	.word	0x17041717
   20d8c:	0417      	.short	0x0417
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid() && !k_work_delayable_is_pending(&time_work)) {
   20d8e:	f00a fd65 	bl	2b85c <date_time_is_valid>
   20d92:	b978      	cbnz	r0, 20db4 <date_time_lte_ind_handler+0x40>
	return k_work_delayable_busy_get(dwork) != 0;
   20d94:	4808      	ldr	r0, [pc, #32]	; (20db8 <date_time_lte_ind_handler+0x44>)
   20d96:	f005 ff83 	bl	26ca0 <k_work_delayable_busy_get>
   20d9a:	b958      	cbnz	r0, 20db4 <date_time_lte_ind_handler+0x40>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   20d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_schedule(&time_work, K_SECONDS(1));
   20da0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   20da4:	2300      	movs	r3, #0
   20da6:	4804      	ldr	r0, [pc, #16]	; (20db8 <date_time_lte_ind_handler+0x44>)
   20da8:	f006 b814 	b.w	26dd4 <k_work_schedule>
}
   20dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   20db0:	f000 ba74 	b.w	2129c <date_time_modem_xtime_subscribe>
}
   20db4:	bd10      	pop	{r4, pc}
   20db6:	bf00      	nop
   20db8:	2000c500 	.word	0x2000c500

00020dbc <date_time_handler>:
	z_impl_k_sem_give(sem);
   20dbc:	4801      	ldr	r0, [pc, #4]	; (20dc4 <date_time_handler+0x8>)
   20dbe:	f005 bc3d 	b.w	2663c <z_impl_k_sem_give>
   20dc2:	bf00      	nop
   20dc4:	2000ca68 	.word	0x2000ca68

00020dc8 <date_time_core_schedule_update>:
{
   20dc8:	b510      	push	{r4, lr}
   20dca:	4806      	ldr	r0, [pc, #24]	; (20de4 <date_time_core_schedule_update+0x1c>)
   20dcc:	f005 ff68 	bl	26ca0 <k_work_delayable_busy_get>
	if (CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0 &&
   20dd0:	b938      	cbnz	r0, 20de2 <date_time_core_schedule_update+0x1a>
}
   20dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   20dd6:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   20dda:	2300      	movs	r3, #0
   20ddc:	4801      	ldr	r0, [pc, #4]	; (20de4 <date_time_core_schedule_update+0x1c>)
   20dde:	f005 bff9 	b.w	26dd4 <k_work_schedule>
}
   20de2:	bd10      	pop	{r4, pc}
   20de4:	2000c500 	.word	0x2000c500

00020de8 <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   20de8:	4801      	ldr	r0, [pc, #4]	; (20df0 <date_time_core_init+0x8>)
   20dea:	f7fe bfb7 	b.w	1fd5c <lte_lc_register_handler>
   20dee:	bf00      	nop
   20df0:	00020d75 	.word	0x00020d75

00020df4 <date_time_core_now>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   20df4:	b530      	push	{r4, r5, lr}
   20df6:	4604      	mov	r4, r0
   20df8:	b085      	sub	sp, #20
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   20dfa:	2001      	movs	r0, #1
   20dfc:	4669      	mov	r1, sp
   20dfe:	f7f8 fc4b 	bl	19698 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   20e02:	b150      	cbz	r0, 20e1a <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   20e04:	f00a f860 	bl	2aec8 <__errno>
   20e08:	2157      	movs	r1, #87	; 0x57
   20e0a:	6802      	ldr	r2, [r0, #0]
   20e0c:	480c      	ldr	r0, [pc, #48]	; (20e40 <date_time_core_now+0x4c>)
   20e0e:	f009 ff08 	bl	2ac22 <z_log_minimal_printk>
		return -ENODATA;
   20e12:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   20e16:	b005      	add	sp, #20
   20e18:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   20e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20e1e:	9a00      	ldr	r2, [sp, #0]
   20e20:	9d01      	ldr	r5, [sp, #4]
   20e22:	fba2 2301 	umull	r2, r3, r2, r1
   20e26:	fb01 3305 	mla	r3, r1, r5, r3
   20e2a:	9902      	ldr	r1, [sp, #8]
   20e2c:	4d05      	ldr	r5, [pc, #20]	; (20e44 <date_time_core_now+0x50>)
   20e2e:	fb91 f1f5 	sdiv	r1, r1, r5
   20e32:	1852      	adds	r2, r2, r1
   20e34:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   20e38:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   20e3c:	e7eb      	b.n	20e16 <date_time_core_now+0x22>
   20e3e:	bf00      	nop
   20e40:	00030464 	.word	0x00030464
   20e44:	000f4240 	.word	0x000f4240

00020e48 <date_time_core_is_valid>:
	return date_time_last_update_uptime;
}

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   20e48:	4b03      	ldr	r3, [pc, #12]	; (20e58 <date_time_core_is_valid+0x10>)
   20e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20e4e:	4313      	orrs	r3, r2
}
   20e50:	bf14      	ite	ne
   20e52:	2001      	movne	r0, #1
   20e54:	2000      	moveq	r0, #0
   20e56:	4770      	bx	lr
   20e58:	2000cba0 	.word	0x2000cba0

00020e5c <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   20e5c:	b5d0      	push	{r4, r6, r7, lr}
	if (date_time_last_update_uptime == 0) {
   20e5e:	4c11      	ldr	r4, [pc, #68]	; (20ea4 <date_time_core_current_check+0x48>)
   20e60:	e9d4 2300 	ldrd	r2, r3, [r4]
   20e64:	4313      	orrs	r3, r2
   20e66:	d018      	beq.n	20e9a <date_time_core_current_check+0x3e>
	return z_impl_k_uptime_ticks();
   20e68:	f00b fe05 	bl	2ca76 <z_impl_k_uptime_ticks>
   20e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20e70:	460a      	mov	r2, r1
   20e72:	fba0 0103 	umull	r0, r1, r0, r3
   20e76:	fb03 1102 	mla	r1, r3, r2, r1
   20e7a:	0bc3      	lsrs	r3, r0, #15
   20e7c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   20e80:	0bca      	lsrs	r2, r1, #15
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   20e82:	e9d4 1000 	ldrd	r1, r0, [r4]
   20e86:	1a5e      	subs	r6, r3, r1
   20e88:	f04f 0300 	mov.w	r3, #0
   20e8c:	eb62 0700 	sbc.w	r7, r2, r0
   20e90:	4a05      	ldr	r2, [pc, #20]	; (20ea8 <date_time_core_current_check+0x4c>)
   20e92:	4296      	cmp	r6, r2
   20e94:	eb77 0303 	sbcs.w	r3, r7, r3
   20e98:	db02      	blt.n	20ea0 <date_time_core_current_check+0x44>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   20e9a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   20e9e:	bdd0      	pop	{r4, r6, r7, pc}
	return 0;
   20ea0:	2000      	movs	r0, #0
   20ea2:	e7fc      	b.n	20e9e <date_time_core_current_check+0x42>
   20ea4:	2000cba0 	.word	0x2000cba0
   20ea8:	0036ee80 	.word	0x0036ee80

00020eac <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   20eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20eb0:	b08e      	sub	sp, #56	; 0x38
   20eb2:	4607      	mov	r7, r0
   20eb4:	460e      	mov	r6, r1
   20eb6:	4690      	mov	r8, r2
	struct timespec tp = { 0 };
   20eb8:	2100      	movs	r1, #0
   20eba:	2210      	movs	r2, #16
   20ebc:	4668      	mov	r0, sp
   20ebe:	f00b fe95 	bl	2cbec <memset>
	struct tm ltm = { 0 };
   20ec2:	2224      	movs	r2, #36	; 0x24
   20ec4:	2100      	movs	r1, #0
   20ec6:	a805      	add	r0, sp, #20
   20ec8:	f00b fe90 	bl	2cbec <memset>
   20ecc:	f00b fdd3 	bl	2ca76 <z_impl_k_uptime_ticks>
   20ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20ed4:	fba0 4503 	umull	r4, r5, r0, r3
   20ed8:	fb03 5501 	mla	r5, r3, r1, r5
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   20edc:	4a1a      	ldr	r2, [pc, #104]	; (20f48 <date_time_core_store+0x9c>)
   20ede:	0be3      	lsrs	r3, r4, #15
   20ee0:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
   20ee4:	0be9      	lsrs	r1, r5, #15
   20ee6:	e9c2 3100 	strd	r3, r1, [r2]

	date_time_core_schedule_update();
   20eea:	f7ff ff6d 	bl	20dc8 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   20eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20ef2:	2300      	movs	r3, #0
   20ef4:	4638      	mov	r0, r7
   20ef6:	4631      	mov	r1, r6
   20ef8:	f7f8 f882 	bl	19000 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   20efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   20f00:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   20f04:	2300      	movs	r3, #0
   20f06:	4638      	mov	r0, r7
   20f08:	4631      	mov	r1, r6
   20f0a:	f7f8 f879 	bl	19000 <__aeabi_ldivmod>
   20f0e:	4b0f      	ldr	r3, [pc, #60]	; (20f4c <date_time_core_store+0xa0>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   20f10:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   20f12:	4353      	muls	r3, r2
	ret = clock_settime(CLOCK_REALTIME, &tp);
   20f14:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   20f16:	9302      	str	r3, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   20f18:	f7f8 fc3e 	bl	19798 <clock_settime>
	if (ret != 0) {
   20f1c:	4602      	mov	r2, r0
   20f1e:	b148      	cbz	r0, 20f34 <date_time_core_store+0x88>
		LOG_ERR("Could not set system time, %d", ret);
   20f20:	480b      	ldr	r0, [pc, #44]	; (20f50 <date_time_core_store+0xa4>)
   20f22:	2145      	movs	r1, #69	; 0x45
   20f24:	f009 fe7d 	bl	2ac22 <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   20f28:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   20f2a:	f7ff ff15 	bl	20d58 <date_time_core_notify_event>
}
   20f2e:	b00e      	add	sp, #56	; 0x38
   20f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   20f34:	a905      	add	r1, sp, #20
   20f36:	4668      	mov	r0, sp
   20f38:	f007 fdba 	bl	28ab0 <gmtime_r>
	date_time_modem_store(&ltm);
   20f3c:	a805      	add	r0, sp, #20
   20f3e:	f000 f983 	bl	21248 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   20f42:	4640      	mov	r0, r8
   20f44:	e7f1      	b.n	20f2a <date_time_core_store+0x7e>
   20f46:	bf00      	nop
   20f48:	2000cba0 	.word	0x2000cba0
   20f4c:	000f4240 	.word	0x000f4240
   20f50:	00030488 	.word	0x00030488

00020f54 <date_time_update_thread>:
{
   20f54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   20f56:	2400      	movs	r4, #0
   20f58:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   20f5a:	4e15      	ldr	r6, [pc, #84]	; (20fb0 <date_time_update_thread+0x5c>)
   20f5c:	f04f 32ff 	mov.w	r2, #4294967295
   20f60:	f04f 33ff 	mov.w	r3, #4294967295
   20f64:	4630      	mov	r0, r6
   20f66:	f005 fba3 	bl	266b0 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   20f6a:	f7ff ff77 	bl	20e5c <date_time_core_current_check>
		if (err == 0) {
   20f6e:	b928      	cbnz	r0, 20f7c <date_time_update_thread+0x28>
			date_time_core_schedule_update();
   20f70:	f7ff ff2a 	bl	20dc8 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   20f74:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   20f76:	f7ff feef 	bl	20d58 <date_time_core_notify_event>
   20f7a:	e7ef      	b.n	20f5c <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   20f7c:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   20f7e:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   20f82:	f000 f927 	bl	211d4 <date_time_modem_get>
		if (err == 0) {
   20f86:	4602      	mov	r2, r0
   20f88:	b920      	cbnz	r0, 20f94 <date_time_update_thread+0x40>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   20f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   20f8e:	f7ff ff8d 	bl	20eac <date_time_core_store>
			continue;
   20f92:	e7e3      	b.n	20f5c <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   20f94:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   20f96:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   20f9a:	f000 f80b 	bl	20fb4 <date_time_ntp_get>
		if (err == 0) {
   20f9e:	b918      	cbnz	r0, 20fa8 <date_time_update_thread+0x54>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   20fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20fa4:	2201      	movs	r2, #1
   20fa6:	e7f2      	b.n	20f8e <date_time_update_thread+0x3a>
		date_time_core_schedule_update();
   20fa8:	f7ff ff0e 	bl	20dc8 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   20fac:	2003      	movs	r0, #3
   20fae:	e7e2      	b.n	20f76 <date_time_update_thread+0x22>
   20fb0:	2000ca68 	.word	0x2000ca68

00020fb4 <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   20fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20fb8:	b09a      	sub	sp, #104	; 0x68
   20fba:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   20fbc:	a806      	add	r0, sp, #24
   20fbe:	f7ff f805 	bl	1ffcc <lte_lc_nw_reg_status_get>
	if (err) {
   20fc2:	4605      	mov	r5, r0
   20fc4:	b138      	cbz	r0, 20fd6 <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   20fc6:	4602      	mov	r2, r0
   20fc8:	2157      	movs	r1, #87	; 0x57
   20fca:	4832      	ldr	r0, [pc, #200]	; (21094 <date_time_ntp_get+0xe0>)
   20fcc:	f009 fe29 	bl	2ac22 <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   20fd0:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   20fd4:	e04d      	b.n	21072 <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   20fd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   20fda:	2b08      	cmp	r3, #8
   20fdc:	d003      	beq.n	20fe6 <date_time_ntp_get+0x32>
   20fde:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   20fe2:	2b01      	cmp	r3, #1
   20fe4:	d1f4      	bne.n	20fd0 <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   20fe6:	4f2c      	ldr	r7, [pc, #176]	; (21098 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   20fe8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 210ac <date_time_ntp_get+0xf8>
	err = sntp_query(&sntp_ctx, timeout, time);
   20fec:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 210a8 <date_time_ntp_get+0xf4>
		LOG_WRN("sntp_query, error: %d", err);
   20ff0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 210b0 <date_time_ntp_get+0xfc>
	struct addrinfo hints = {
   20ff4:	2250      	movs	r2, #80	; 0x50
   20ff6:	2100      	movs	r1, #0
   20ff8:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   20ffa:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   20ffe:	f00b fdf5 	bl	2cbec <memset>
   21002:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21006:	aa06      	add	r2, sp, #24
   21008:	9307      	str	r3, [sp, #28]
   2100a:	4641      	mov	r1, r8
   2100c:	466b      	mov	r3, sp
   2100e:	4620      	mov	r0, r4
   21010:	f009 fe48 	bl	2aca4 <zsock_getaddrinfo>
	if (err) {
   21014:	4602      	mov	r2, r0
   21016:	b160      	cbz	r0, 21032 <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   21018:	2157      	movs	r1, #87	; 0x57
   2101a:	4820      	ldr	r0, [pc, #128]	; (2109c <date_time_ntp_get+0xe8>)
   2101c:	f009 fe01 	bl	2ac22 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   21020:	2d01      	cmp	r5, #1
   21022:	d104      	bne.n	2102e <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   21024:	2157      	movs	r1, #87	; 0x57
   21026:	481e      	ldr	r0, [pc, #120]	; (210a0 <date_time_ntp_get+0xec>)
   21028:	f009 fdfb 	bl	2ac22 <z_log_minimal_printk>
   2102c:	e7d0      	b.n	20fd0 <date_time_ntp_get+0x1c>
   2102e:	2501      	movs	r5, #1
   21030:	e7e0      	b.n	20ff4 <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   21032:	9b00      	ldr	r3, [sp, #0]
   21034:	a801      	add	r0, sp, #4
   21036:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2103a:	f009 fdff 	bl	2ac3c <sntp_init>
	if (err) {
   2103e:	4604      	mov	r4, r0
   21040:	b1d8      	cbz	r0, 2107a <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   21042:	2157      	movs	r1, #87	; 0x57
   21044:	4602      	mov	r2, r0
   21046:	4817      	ldr	r0, [pc, #92]	; (210a4 <date_time_ntp_get+0xf0>)
		LOG_WRN("sntp_query, error: %d", err);
   21048:	f009 fdeb 	bl	2ac22 <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2104c:	9800      	ldr	r0, [sp, #0]
   2104e:	f009 fe2b 	bl	2aca8 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   21052:	a801      	add	r0, sp, #4
   21054:	f009 fe21 	bl	2ac9a <sntp_close>
		if (err) {
   21058:	2c00      	cmp	r4, #0
   2105a:	d1e1      	bne.n	21020 <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   2105c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   21060:	4b11      	ldr	r3, [pc, #68]	; (210a8 <date_time_ntp_get+0xf4>)
   21062:	681a      	ldr	r2, [r3, #0]
   21064:	6858      	ldr	r0, [r3, #4]
   21066:	fba2 2301 	umull	r2, r3, r2, r1
   2106a:	fb01 3300 	mla	r3, r1, r0, r3
   2106e:	e9c6 2300 	strd	r2, r3, [r6]
}
   21072:	4620      	mov	r0, r4
   21074:	b01a      	add	sp, #104	; 0x68
   21076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   2107a:	464a      	mov	r2, r9
   2107c:	f241 3188 	movw	r1, #5000	; 0x1388
   21080:	a801      	add	r0, sp, #4
   21082:	f7f8 fa65 	bl	19550 <sntp_query>
	if (err) {
   21086:	4604      	mov	r4, r0
   21088:	2800      	cmp	r0, #0
   2108a:	d0df      	beq.n	2104c <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   2108c:	4602      	mov	r2, r0
   2108e:	2157      	movs	r1, #87	; 0x57
   21090:	4650      	mov	r0, sl
   21092:	e7d9      	b.n	21048 <date_time_ntp_get+0x94>
   21094:	000304b7 	.word	0x000304b7
   21098:	0002e04c 	.word	0x0002e04c
   2109c:	000304fa 	.word	0x000304fa
   210a0:	0003054b 	.word	0x0003054b
   210a4:	00030516 	.word	0x00030516
   210a8:	2000cba8 	.word	0x2000cba8
   210ac:	000304f6 	.word	0x000304f6
   210b0:	00030530 	.word	0x00030530

000210b4 <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   210b4:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   210b6:	4604      	mov	r4, r0
{
   210b8:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   210ba:	b180      	cbz	r0, 210de <date_time_at_xtime_handler+0x2a>
		return;
	}
	modem_valid_network_time = true;
   210bc:	2201      	movs	r2, #1
   210be:	4b40      	ldr	r3, [pc, #256]	; (211c0 <date_time_at_xtime_handler+0x10c>)
   210c0:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   210c2:	f7ff fecb 	bl	20e5c <date_time_core_current_check>
	if (err == 0) {
   210c6:	b150      	cbz	r0, 210de <date_time_at_xtime_handler+0x2a>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   210c8:	212c      	movs	r1, #44	; 0x2c
   210ca:	4620      	mov	r0, r4
   210cc:	f00b fea6 	bl	2ce1c <strchr>
	if (time_str_start == NULL) {
   210d0:	4605      	mov	r5, r0
   210d2:	b930      	cbnz	r0, 210e2 <date_time_at_xtime_handler+0x2e>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   210d4:	4622      	mov	r2, r4
   210d6:	2145      	movs	r1, #69	; 0x45
   210d8:	483a      	ldr	r0, [pc, #232]	; (211c4 <date_time_at_xtime_handler+0x110>)
	if (strlen(time_str_start) < 17) {
		LOG_ERR("%%XTIME notification too short: %s", notif);
		return;
	}
	if (*(time_str_start + 1) != '"') {
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   210da:	f009 fda2 	bl	2ac22 <z_log_minimal_printk>
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   210de:	b00d      	add	sp, #52	; 0x34
   210e0:	bd30      	pop	{r4, r5, pc}
	if (strlen(time_str_start) < 17) {
   210e2:	f7f8 fa2b 	bl	1953c <strlen>
   210e6:	2810      	cmp	r0, #16
   210e8:	d803      	bhi.n	210f2 <date_time_at_xtime_handler+0x3e>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   210ea:	4622      	mov	r2, r4
   210ec:	2145      	movs	r1, #69	; 0x45
   210ee:	4836      	ldr	r0, [pc, #216]	; (211c8 <date_time_at_xtime_handler+0x114>)
   210f0:	e7f3      	b.n	210da <date_time_at_xtime_handler+0x26>
	if (*(time_str_start + 1) != '"') {
   210f2:	786b      	ldrb	r3, [r5, #1]
   210f4:	2b22      	cmp	r3, #34	; 0x22
   210f6:	d003      	beq.n	21100 <date_time_at_xtime_handler+0x4c>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   210f8:	4622      	mov	r2, r4
   210fa:	2145      	movs	r1, #69	; 0x45
   210fc:	4833      	ldr	r0, [pc, #204]	; (211cc <date_time_at_xtime_handler+0x118>)
   210fe:	e7ec      	b.n	210da <date_time_at_xtime_handler+0x26>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   21100:	aa01      	add	r2, sp, #4
   21102:	2306      	movs	r3, #6
   21104:	210c      	movs	r1, #12
   21106:	1ca8      	adds	r0, r5, #2
   21108:	f009 fb7c 	bl	2a804 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   2110c:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   2110e:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   21110:	d804      	bhi.n	2111c <date_time_at_xtime_handler+0x68>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   21112:	4623      	mov	r3, r4
   21114:	2145      	movs	r1, #69	; 0x45
   21116:	482e      	ldr	r0, [pc, #184]	; (211d0 <date_time_at_xtime_handler+0x11c>)
   21118:	f009 fd83 	bl	2ac22 <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   2111c:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   21120:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   21124:	f001 000f 	and.w	r0, r1, #15
   21128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2112c:	0909      	lsrs	r1, r1, #4
   2112e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   21132:	b2c9      	uxtb	r1, r1
   21134:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   21136:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   2113a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   2113e:	f001 000f 	and.w	r0, r1, #15
   21142:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21146:	0909      	lsrs	r1, r1, #4
   21148:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   2114c:	b2c9      	uxtb	r1, r1
   2114e:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   21150:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   21154:	f001 000f 	and.w	r0, r1, #15
   21158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2115c:	0909      	lsrs	r1, r1, #4
   2115e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   21162:	b2c9      	uxtb	r1, r1
   21164:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   21166:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   2116a:	f001 000f 	and.w	r0, r1, #15
   2116e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   21172:	0909      	lsrs	r1, r1, #4
   21174:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   21178:	b2c9      	uxtb	r1, r1
   2117a:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   2117c:	f002 010f 	and.w	r1, r2, #15
   21180:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   21184:	0912      	lsrs	r2, r2, #4
   21186:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   2118a:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   2118c:	3264      	adds	r2, #100	; 0x64
   2118e:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   21190:	f003 020f 	and.w	r2, r3, #15
   21194:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   21198:	091b      	lsrs	r3, r3, #4
   2119a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   2119e:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   211a0:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   211a2:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   211a4:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   211a6:	f7f9 fe77 	bl	1ae98 <timeutil_timegm64>
   211aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   211ae:	460a      	mov	r2, r1
   211b0:	fba0 0103 	umull	r0, r1, r0, r3
   211b4:	fb03 1102 	mla	r1, r3, r2, r1
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   211b8:	2200      	movs	r2, #0
   211ba:	f7ff fe77 	bl	20eac <date_time_core_store>
   211be:	e78e      	b.n	210de <date_time_at_xtime_handler+0x2a>
   211c0:	2000d5f9 	.word	0x2000d5f9
   211c4:	00030590 	.word	0x00030590
   211c8:	000305c2 	.word	0x000305c2
   211cc:	000305ea 	.word	0x000305ea
   211d0:	00030626 	.word	0x00030626

000211d4 <date_time_modem_get>:
{
   211d4:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   211d6:	4b18      	ldr	r3, [pc, #96]	; (21238 <date_time_modem_get+0x64>)
{
   211d8:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   211da:	781b      	ldrb	r3, [r3, #0]
{
   211dc:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   211de:	b1a3      	cbz	r3, 2120a <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   211e0:	ab06      	add	r3, sp, #24
   211e2:	9302      	str	r3, [sp, #8]
   211e4:	ab07      	add	r3, sp, #28
   211e6:	9301      	str	r3, [sp, #4]
   211e8:	ad05      	add	r5, sp, #20
   211ea:	ab08      	add	r3, sp, #32
   211ec:	9300      	str	r3, [sp, #0]
   211ee:	aa0a      	add	r2, sp, #40	; 0x28
   211f0:	4912      	ldr	r1, [pc, #72]	; (2123c <date_time_modem_get+0x68>)
   211f2:	4813      	ldr	r0, [pc, #76]	; (21240 <date_time_modem_get+0x6c>)
   211f4:	9503      	str	r5, [sp, #12]
   211f6:	ab09      	add	r3, sp, #36	; 0x24
   211f8:	f004 f956 	bl	254a8 <nrf_modem_at_scanf>
	if (rc != 6) {
   211fc:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   211fe:	4602      	mov	r2, r0
	if (rc != 6) {
   21200:	d006      	beq.n	21210 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   21202:	2157      	movs	r1, #87	; 0x57
   21204:	480f      	ldr	r0, [pc, #60]	; (21244 <date_time_modem_get+0x70>)
   21206:	f009 fd0c 	bl	2ac22 <z_log_minimal_printk>
		return -ENODATA;
   2120a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2120e:	e011      	b.n	21234 <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   21210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   21212:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   21214:	3364      	adds	r3, #100	; 0x64
   21216:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   21218:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2121a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	date_time.tm_mon = date_time.tm_mon - 1;
   2121e:	3b01      	subs	r3, #1
   21220:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   21222:	f7f9 fe39 	bl	1ae98 <timeutil_timegm64>
   21226:	fba0 2305 	umull	r2, r3, r0, r5
	return 0;
   2122a:	2000      	movs	r0, #0
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2122c:	fb05 3301 	mla	r3, r5, r1, r3
   21230:	e9c4 2300 	strd	r2, r3, [r4]
}
   21234:	b00f      	add	sp, #60	; 0x3c
   21236:	bd30      	pop	{r4, r5, pc}
   21238:	2000d5f9 	.word	0x2000d5f9
   2123c:	0003065d 	.word	0x0003065d
   21240:	00030677 	.word	0x00030677
   21244:	00030680 	.word	0x00030680

00021248 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   21248:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   2124a:	4b11      	ldr	r3, [pc, #68]	; (21290 <date_time_modem_store+0x48>)
{
   2124c:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   2124e:	781b      	ldrb	r3, [r3, #0]
   21250:	b9db      	cbnz	r3, 2128a <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   21252:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   21256:	2464      	movs	r4, #100	; 0x64
   21258:	fb91 f5f4 	sdiv	r5, r1, r4
   2125c:	9303      	str	r3, [sp, #12]
   2125e:	6803      	ldr	r3, [r0, #0]
   21260:	3201      	adds	r2, #1
   21262:	9302      	str	r3, [sp, #8]
   21264:	6843      	ldr	r3, [r0, #4]
   21266:	fb04 1115 	mls	r1, r4, r5, r1
   2126a:	9301      	str	r3, [sp, #4]
   2126c:	6883      	ldr	r3, [r0, #8]
   2126e:	9300      	str	r3, [sp, #0]
   21270:	68c3      	ldr	r3, [r0, #12]
   21272:	4808      	ldr	r0, [pc, #32]	; (21294 <date_time_modem_store+0x4c>)
   21274:	f004 f88a 	bl	2538c <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   21278:	4602      	mov	r2, r0
   2127a:	b130      	cbz	r0, 2128a <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   2127c:	2145      	movs	r1, #69	; 0x45
   2127e:	4806      	ldr	r0, [pc, #24]	; (21298 <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   21280:	b005      	add	sp, #20
   21282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   21286:	f009 bccc 	b.w	2ac22 <z_log_minimal_printk>
}
   2128a:	b005      	add	sp, #20
   2128c:	bd30      	pop	{r4, r5, pc}
   2128e:	bf00      	nop
   21290:	2000d5f9 	.word	0x2000d5f9
   21294:	00030715 	.word	0x00030715
   21298:	00030742 	.word	0x00030742

0002129c <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   2129c:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   2129e:	4806      	ldr	r0, [pc, #24]	; (212b8 <date_time_modem_xtime_subscribe+0x1c>)
   212a0:	f004 f874 	bl	2538c <nrf_modem_at_printf>

	if (err) {
   212a4:	4602      	mov	r2, r0
   212a6:	b128      	cbz	r0, 212b4 <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   212a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   212ac:	2145      	movs	r1, #69	; 0x45
   212ae:	4803      	ldr	r0, [pc, #12]	; (212bc <date_time_modem_xtime_subscribe+0x20>)
   212b0:	f009 bcb7 	b.w	2ac22 <z_log_minimal_printk>
}
   212b4:	bd08      	pop	{r3, pc}
   212b6:	bf00      	nop
   212b8:	00030765 	.word	0x00030765
   212bc:	00030771 	.word	0x00030771

000212c0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   212c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212c4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   212c6:	4c21      	ldr	r4, [pc, #132]	; (2134c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   212c8:	4e21      	ldr	r6, [pc, #132]	; (21350 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212ca:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   212ce:	f8df 9088 	ldr.w	r9, [pc, #136]	; 21358 <check_ext_api_requests+0x98>
{
   212d2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212d4:	45a8      	cmp	r8, r5
   212d6:	d803      	bhi.n	212e0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   212d8:	2000      	movs	r0, #0
   212da:	b005      	add	sp, #20
   212dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   212e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   212e6:	681f      	ldr	r7, [r3, #0]
   212e8:	ab01      	add	r3, sp, #4
   212ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   212ee:	220c      	movs	r2, #12
   212f0:	4619      	mov	r1, r3
   212f2:	4638      	mov	r0, r7
   212f4:	f00b fc5f 	bl	2cbb6 <memcmp>
   212f8:	b990      	cbnz	r0, 21320 <check_ext_api_requests+0x60>
   212fa:	b18f      	cbz	r7, 21320 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   212fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   212fe:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   21300:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   21302:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21304:	4291      	cmp	r1, r2
   21306:	d10b      	bne.n	21320 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   21308:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2130a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2130c:	4291      	cmp	r1, r2
   2130e:	d807      	bhi.n	21320 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   21310:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   21312:	4291      	cmp	r1, r2
   21314:	d904      	bls.n	21320 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   21316:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21318:	695b      	ldr	r3, [r3, #20]
   2131a:	ea32 0303 	bics.w	r3, r2, r3
   2131e:	d00a      	beq.n	21336 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   21320:	6a27      	ldr	r7, [r4, #32]
   21322:	b167      	cbz	r7, 2133e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   21324:	480b      	ldr	r0, [pc, #44]	; (21354 <check_ext_api_requests+0x94>)
   21326:	f009 fabd 	bl	2a8a4 <printk>
			k_panic();
   2132a:	4040      	eors	r0, r0
   2132c:	f380 8811 	msr	BASEPRI, r0
   21330:	f04f 0004 	mov.w	r0, #4
   21334:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   21336:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21338:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2133a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2133c:	e7ca      	b.n	212d4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2133e:	4648      	mov	r0, r9
   21340:	f009 fab0 	bl	2a8a4 <printk>
			*ext_api_req->ext_api = NULL;
   21344:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21346:	601f      	str	r7, [r3, #0]
   21348:	e7f5      	b.n	21336 <check_ext_api_requests+0x76>
   2134a:	bf00      	nop
   2134c:	0001843c 	.word	0x0001843c
   21350:	0002dd20 	.word	0x0002dd20
   21354:	000307b9 	.word	0x000307b9
   21358:	000307e2 	.word	0x000307e2

0002135c <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   2135c:	4b01      	ldr	r3, [pc, #4]	; (21364 <SystemInit+0x8>)
   2135e:	4a02      	ldr	r2, [pc, #8]	; (21368 <SystemInit+0xc>)
   21360:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   21362:	4770      	bx	lr
   21364:	2000c658 	.word	0x2000c658
   21368:	03d09000 	.word	0x03d09000

0002136c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2136c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2136e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   21370:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   21372:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   21376:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   21378:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   2137c:	d010      	beq.n	213a0 <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2137e:	fa05 f204 	lsl.w	r2, r5, r4
   21382:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21386:	e8d0 6fef 	ldaex	r6, [r0]
   2138a:	429e      	cmp	r6, r3
   2138c:	d104      	bne.n	21398 <nrfx_flag32_alloc+0x2c>
   2138e:	e8c0 2fec 	stlex	ip, r2, [r0]
   21392:	f1bc 0f00 	cmp.w	ip, #0
   21396:	d1f6      	bne.n	21386 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21398:	d1ea      	bne.n	21370 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2139a:	4802      	ldr	r0, [pc, #8]	; (213a4 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
   2139c:	700c      	strb	r4, [r1, #0]
}
   2139e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   213a0:	4801      	ldr	r0, [pc, #4]	; (213a8 <nrfx_flag32_alloc+0x3c>)
   213a2:	e7fc      	b.n	2139e <nrfx_flag32_alloc+0x32>
   213a4:	0bad0000 	.word	0x0bad0000
   213a8:	0bad0002 	.word	0x0bad0002

000213ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   213ac:	6803      	ldr	r3, [r0, #0]
{
   213ae:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   213b0:	40cb      	lsrs	r3, r1
   213b2:	07db      	lsls	r3, r3, #31
   213b4:	d411      	bmi.n	213da <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   213b6:	2301      	movs	r3, #1
   213b8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   213bc:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   213be:	ea41 0203 	orr.w	r2, r1, r3
   213c2:	e8d0 4fef 	ldaex	r4, [r0]
   213c6:	429c      	cmp	r4, r3
   213c8:	d104      	bne.n	213d4 <nrfx_flag32_free+0x28>
   213ca:	e8c0 2fec 	stlex	ip, r2, [r0]
   213ce:	f1bc 0f00 	cmp.w	ip, #0
   213d2:	d1f6      	bne.n	213c2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   213d4:	d1f2      	bne.n	213bc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   213d6:	4802      	ldr	r0, [pc, #8]	; (213e0 <nrfx_flag32_free+0x34>)
}
   213d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   213da:	4802      	ldr	r0, [pc, #8]	; (213e4 <nrfx_flag32_free+0x38>)
   213dc:	e7fc      	b.n	213d8 <nrfx_flag32_free+0x2c>
   213de:	bf00      	nop
   213e0:	0bad0000 	.word	0x0bad0000
   213e4:	0bad0004 	.word	0x0bad0004

000213e8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   213e8:	b508      	push	{r3, lr}
    switch (domain)
   213ea:	b170      	cbz	r0, 2140a <nrf_clock_is_running.constprop.0+0x22>
   213ec:	2801      	cmp	r0, #1
   213ee:	d018      	beq.n	21422 <nrf_clock_is_running.constprop.0+0x3a>
            NRFX_ASSERT(0);
   213f0:	f44f 724f 	mov.w	r2, #828	; 0x33c
   213f4:	4910      	ldr	r1, [pc, #64]	; (21438 <nrf_clock_is_running.constprop.0+0x50>)
   213f6:	4811      	ldr	r0, [pc, #68]	; (2143c <nrf_clock_is_running.constprop.0+0x54>)
   213f8:	f009 fa54 	bl	2a8a4 <printk>
   213fc:	480e      	ldr	r0, [pc, #56]	; (21438 <nrf_clock_is_running.constprop.0+0x50>)
   213fe:	f44f 714f 	mov.w	r1, #828	; 0x33c
   21402:	f009 fbe8 	bl	2abd6 <assert_post_action>
            return false;
   21406:	2000      	movs	r0, #0
   21408:	e00a      	b.n	21420 <nrf_clock_is_running.constprop.0+0x38>
            if (p_clk_src != NULL)
   2140a:	4a0d      	ldr	r2, [pc, #52]	; (21440 <nrf_clock_is_running.constprop.0+0x58>)
   2140c:	b121      	cbz	r1, 21418 <nrf_clock_is_running.constprop.0+0x30>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2140e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   21412:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   21416:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21418:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2141c:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   21420:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   21422:	4a07      	ldr	r2, [pc, #28]	; (21440 <nrf_clock_is_running.constprop.0+0x58>)
   21424:	b121      	cbz	r1, 21430 <nrf_clock_is_running.constprop.0+0x48>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21426:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   2142a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2142e:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21430:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   21434:	e7f2      	b.n	2141c <nrf_clock_is_running.constprop.0+0x34>
   21436:	bf00      	nop
   21438:	00030815 	.word	0x00030815
   2143c:	0002e574 	.word	0x0002e574
   21440:	40005000 	.word	0x40005000

00021444 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21444:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21446:	4604      	mov	r4, r0
   21448:	b940      	cbnz	r0, 2145c <nrfx_clock_init+0x18>
   2144a:	4909      	ldr	r1, [pc, #36]	; (21470 <nrfx_clock_init+0x2c>)
   2144c:	4809      	ldr	r0, [pc, #36]	; (21474 <nrfx_clock_init+0x30>)
   2144e:	22bd      	movs	r2, #189	; 0xbd
   21450:	f009 fa28 	bl	2a8a4 <printk>
   21454:	21bd      	movs	r1, #189	; 0xbd
   21456:	4806      	ldr	r0, [pc, #24]	; (21470 <nrfx_clock_init+0x2c>)
   21458:	f009 fbbd 	bl	2abd6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2145c:	4b06      	ldr	r3, [pc, #24]	; (21478 <nrfx_clock_init+0x34>)
   2145e:	791a      	ldrb	r2, [r3, #4]
   21460:	b922      	cbnz	r2, 2146c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21462:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21464:	4805      	ldr	r0, [pc, #20]	; (2147c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   21466:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21468:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2146a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2146c:	4804      	ldr	r0, [pc, #16]	; (21480 <nrfx_clock_init+0x3c>)
    return err_code;
   2146e:	e7fc      	b.n	2146a <nrfx_clock_init+0x26>
   21470:	00030849 	.word	0x00030849
   21474:	0002e574 	.word	0x0002e574
   21478:	2000d0a0 	.word	0x2000d0a0
   2147c:	0bad0000 	.word	0x0bad0000
   21480:	0bad000c 	.word	0x0bad000c

00021484 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21484:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21486:	4b0b      	ldr	r3, [pc, #44]	; (214b4 <nrfx_clock_enable+0x30>)
   21488:	791b      	ldrb	r3, [r3, #4]
   2148a:	b943      	cbnz	r3, 2149e <nrfx_clock_enable+0x1a>
   2148c:	490a      	ldr	r1, [pc, #40]	; (214b8 <nrfx_clock_enable+0x34>)
   2148e:	480b      	ldr	r0, [pc, #44]	; (214bc <nrfx_clock_enable+0x38>)
   21490:	22d6      	movs	r2, #214	; 0xd6
   21492:	f009 fa07 	bl	2a8a4 <printk>
   21496:	21d6      	movs	r1, #214	; 0xd6
   21498:	4807      	ldr	r0, [pc, #28]	; (214b8 <nrfx_clock_enable+0x34>)
   2149a:	f009 fb9c 	bl	2abd6 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2149e:	2005      	movs	r0, #5
   214a0:	f7fa fe3c 	bl	1c11c <arch_irq_is_enabled>
   214a4:	b920      	cbnz	r0, 214b0 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   214a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   214aa:	2005      	movs	r0, #5
   214ac:	f7fa be12 	b.w	1c0d4 <arch_irq_enable>
   214b0:	bd08      	pop	{r3, pc}
   214b2:	bf00      	nop
   214b4:	2000d0a0 	.word	0x2000d0a0
   214b8:	00030849 	.word	0x00030849
   214bc:	0002e574 	.word	0x0002e574

000214c0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214c0:	4b21      	ldr	r3, [pc, #132]	; (21548 <nrfx_clock_start+0x88>)
{
   214c2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214c4:	791b      	ldrb	r3, [r3, #4]
{
   214c6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214c8:	b953      	cbnz	r3, 214e0 <nrfx_clock_start+0x20>
   214ca:	4920      	ldr	r1, [pc, #128]	; (2154c <nrfx_clock_start+0x8c>)
   214cc:	4820      	ldr	r0, [pc, #128]	; (21550 <nrfx_clock_start+0x90>)
   214ce:	f44f 7289 	mov.w	r2, #274	; 0x112
   214d2:	f009 f9e7 	bl	2a8a4 <printk>
   214d6:	f44f 7189 	mov.w	r1, #274	; 0x112
   214da:	481c      	ldr	r0, [pc, #112]	; (2154c <nrfx_clock_start+0x8c>)
   214dc:	f009 fb7b 	bl	2abd6 <assert_post_action>
    switch (domain)
   214e0:	b16c      	cbz	r4, 214fe <nrfx_clock_start+0x3e>
   214e2:	2c01      	cmp	r4, #1
   214e4:	d026      	beq.n	21534 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   214e6:	f44f 72a2 	mov.w	r2, #324	; 0x144
   214ea:	4918      	ldr	r1, [pc, #96]	; (2154c <nrfx_clock_start+0x8c>)
   214ec:	4818      	ldr	r0, [pc, #96]	; (21550 <nrfx_clock_start+0x90>)
   214ee:	f009 f9d9 	bl	2a8a4 <printk>
   214f2:	f44f 71a2 	mov.w	r1, #324	; 0x144
   214f6:	4815      	ldr	r0, [pc, #84]	; (2154c <nrfx_clock_start+0x8c>)
   214f8:	f009 fb6d 	bl	2abd6 <assert_post_action>
            break;
    }
}
   214fc:	e016      	b.n	2152c <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   214fe:	4620      	mov	r0, r4
   21500:	f10d 0107 	add.w	r1, sp, #7
   21504:	f7ff ff70 	bl	213e8 <nrf_clock_is_running.constprop.0>
   21508:	4b12      	ldr	r3, [pc, #72]	; (21554 <nrfx_clock_start+0x94>)
   2150a:	b188      	cbz	r0, 21530 <nrfx_clock_start+0x70>
   2150c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21510:	2a02      	cmp	r2, #2
   21512:	d10d      	bne.n	21530 <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21514:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21518:	2200      	movs	r2, #0
   2151a:	4b0f      	ldr	r3, [pc, #60]	; (21558 <nrfx_clock_start+0x98>)
   2151c:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2151e:	2202      	movs	r2, #2
   21520:	681b      	ldr	r3, [r3, #0]
   21522:	4b0c      	ldr	r3, [pc, #48]	; (21554 <nrfx_clock_start+0x94>)
   21524:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21528:	2201      	movs	r2, #1
   2152a:	609a      	str	r2, [r3, #8]
}
   2152c:	b002      	add	sp, #8
   2152e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   21530:	2201      	movs	r2, #1
   21532:	e7ef      	b.n	21514 <nrfx_clock_start+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21534:	2200      	movs	r2, #0
   21536:	4b09      	ldr	r3, [pc, #36]	; (2155c <nrfx_clock_start+0x9c>)
   21538:	601a      	str	r2, [r3, #0]
   2153a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2153c:	4b05      	ldr	r3, [pc, #20]	; (21554 <nrfx_clock_start+0x94>)
   2153e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21542:	601c      	str	r4, [r3, #0]
}
   21544:	e7f2      	b.n	2152c <nrfx_clock_start+0x6c>
   21546:	bf00      	nop
   21548:	2000d0a0 	.word	0x2000d0a0
   2154c:	00030849 	.word	0x00030849
   21550:	0002e574 	.word	0x0002e574
   21554:	40005000 	.word	0x40005000
   21558:	40005104 	.word	0x40005104
   2155c:	40005100 	.word	0x40005100

00021560 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21560:	4b2c      	ldr	r3, [pc, #176]	; (21614 <nrfx_clock_stop+0xb4>)
{
   21562:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21564:	791b      	ldrb	r3, [r3, #4]
{
   21566:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21568:	b953      	cbnz	r3, 21580 <nrfx_clock_stop+0x20>
   2156a:	492b      	ldr	r1, [pc, #172]	; (21618 <nrfx_clock_stop+0xb8>)
   2156c:	482b      	ldr	r0, [pc, #172]	; (2161c <nrfx_clock_stop+0xbc>)
   2156e:	f240 124b 	movw	r2, #331	; 0x14b
   21572:	f009 f997 	bl	2a8a4 <printk>
   21576:	f240 114b 	movw	r1, #331	; 0x14b
   2157a:	4827      	ldr	r0, [pc, #156]	; (21618 <nrfx_clock_stop+0xb8>)
   2157c:	f009 fb2b 	bl	2abd6 <assert_post_action>
    switch (domain)
   21580:	b174      	cbz	r4, 215a0 <nrfx_clock_stop+0x40>
   21582:	2c01      	cmp	r4, #1
   21584:	d026      	beq.n	215d4 <nrfx_clock_stop+0x74>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21586:	4924      	ldr	r1, [pc, #144]	; (21618 <nrfx_clock_stop+0xb8>)
   21588:	4824      	ldr	r0, [pc, #144]	; (2161c <nrfx_clock_stop+0xbc>)
   2158a:	f240 1267 	movw	r2, #359	; 0x167
   2158e:	f009 f989 	bl	2a8a4 <printk>
   21592:	f240 1167 	movw	r1, #359	; 0x167
   21596:	4820      	ldr	r0, [pc, #128]	; (21618 <nrfx_clock_stop+0xb8>)
   21598:	f009 fb1d 	bl	2abd6 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2159c:	b002      	add	sp, #8
   2159e:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   215a0:	2202      	movs	r2, #2
   215a2:	4b1f      	ldr	r3, [pc, #124]	; (21620 <nrfx_clock_stop+0xc0>)
   215a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215a8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215aa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215ae:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
   215b6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215b8:	4b1a      	ldr	r3, [pc, #104]	; (21624 <nrfx_clock_stop+0xc4>)
   215ba:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   215bc:	2100      	movs	r1, #0
   215be:	4608      	mov	r0, r1
   215c0:	f7ff ff12 	bl	213e8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   215c4:	2800      	cmp	r0, #0
   215c6:	d0e9      	beq.n	2159c <nrfx_clock_stop+0x3c>
   215c8:	2001      	movs	r0, #1
   215ca:	f00a f94a 	bl	2b862 <nrfx_busy_wait>
   215ce:	3c01      	subs	r4, #1
   215d0:	d1f4      	bne.n	215bc <nrfx_clock_stop+0x5c>
   215d2:	e7e3      	b.n	2159c <nrfx_clock_stop+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215d4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   215d6:	4b12      	ldr	r3, [pc, #72]	; (21620 <nrfx_clock_stop+0xc0>)
   215d8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   215e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   215e4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215e6:	4b10      	ldr	r3, [pc, #64]	; (21628 <nrfx_clock_stop+0xc8>)
   215e8:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   215ea:	f88d 4007 	strb.w	r4, [sp, #7]
   215ee:	f242 7410 	movw	r4, #10000	; 0x2710
   215f2:	2001      	movs	r0, #1
   215f4:	f10d 0107 	add.w	r1, sp, #7
   215f8:	f7ff fef6 	bl	213e8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   215fc:	2800      	cmp	r0, #0
   215fe:	d0cd      	beq.n	2159c <nrfx_clock_stop+0x3c>
   21600:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21604:	2801      	cmp	r0, #1
   21606:	d1c9      	bne.n	2159c <nrfx_clock_stop+0x3c>
   21608:	f00a f92b 	bl	2b862 <nrfx_busy_wait>
   2160c:	3c01      	subs	r4, #1
   2160e:	d1f0      	bne.n	215f2 <nrfx_clock_stop+0x92>
   21610:	e7c4      	b.n	2159c <nrfx_clock_stop+0x3c>
   21612:	bf00      	nop
   21614:	2000d0a0 	.word	0x2000d0a0
   21618:	00030849 	.word	0x00030849
   2161c:	0002e574 	.word	0x0002e574
   21620:	40005000 	.word	0x40005000
   21624:	4000500c 	.word	0x4000500c
   21628:	40005004 	.word	0x40005004

0002162c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2162c:	4b15      	ldr	r3, [pc, #84]	; (21684 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2162e:	b507      	push	{r0, r1, r2, lr}
   21630:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   21632:	b14a      	cbz	r2, 21648 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21634:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   21636:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21638:	6018      	str	r0, [r3, #0]
   2163a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2163c:	4b12      	ldr	r3, [pc, #72]	; (21688 <nrfx_power_clock_irq_handler+0x5c>)
   2163e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21642:	4b12      	ldr	r3, [pc, #72]	; (2168c <nrfx_power_clock_irq_handler+0x60>)
   21644:	681b      	ldr	r3, [r3, #0]
   21646:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21648:	4b11      	ldr	r3, [pc, #68]	; (21690 <nrfx_power_clock_irq_handler+0x64>)
   2164a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2164c:	b17a      	cbz	r2, 2166e <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2164e:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   21650:	f10d 0107 	add.w	r1, sp, #7
   21654:	6018      	str	r0, [r3, #0]
   21656:	681b      	ldr	r3, [r3, #0]
   21658:	f7ff fec6 	bl	213e8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2165c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21660:	2202      	movs	r2, #2
   21662:	2901      	cmp	r1, #1
   21664:	4b08      	ldr	r3, [pc, #32]	; (21688 <nrfx_power_clock_irq_handler+0x5c>)
   21666:	d105      	bne.n	21674 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21668:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2166c:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2166e:	b003      	add	sp, #12
   21670:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   21674:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21678:	4b04      	ldr	r3, [pc, #16]	; (2168c <nrfx_power_clock_irq_handler+0x60>)
   2167a:	2001      	movs	r0, #1
   2167c:	681b      	ldr	r3, [r3, #0]
   2167e:	4798      	blx	r3
}
   21680:	e7f5      	b.n	2166e <nrfx_power_clock_irq_handler+0x42>
   21682:	bf00      	nop
   21684:	40005100 	.word	0x40005100
   21688:	40005000 	.word	0x40005000
   2168c:	2000d0a0 	.word	0x2000d0a0
   21690:	40005104 	.word	0x40005104

00021694 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   21694:	4b05      	ldr	r3, [pc, #20]	; (216ac <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21696:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   21698:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2169c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   216a0:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   216a4:	4258      	negs	r0, r3
   216a6:	4158      	adcs	r0, r3
   216a8:	4770      	bx	lr
   216aa:	bf00      	nop
   216ac:	2000c65c 	.word	0x2000c65c

000216b0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   216b0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   216b2:	4c0d      	ldr	r4, [pc, #52]	; (216e8 <call_handler+0x38>)
   216b4:	f100 0308 	add.w	r3, r0, #8
   216b8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   216bc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   216be:	05da      	lsls	r2, r3, #23
{
   216c0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   216c2:	d507      	bpl.n	216d4 <call_handler+0x24>
   216c4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   216c8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   216cc:	6852      	ldr	r2, [r2, #4]
   216ce:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   216d2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   216d4:	68a3      	ldr	r3, [r4, #8]
   216d6:	b12b      	cbz	r3, 216e4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   216d8:	4631      	mov	r1, r6
   216da:	4628      	mov	r0, r5
   216dc:	68e2      	ldr	r2, [r4, #12]
    }
}
   216de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   216e2:	4718      	bx	r3
}
   216e4:	bd70      	pop	{r4, r5, r6, pc}
   216e6:	bf00      	nop
   216e8:	2000c65c 	.word	0x2000c65c

000216ec <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   216ec:	4b19      	ldr	r3, [pc, #100]	; (21754 <release_handler+0x68>)
   216ee:	3008      	adds	r0, #8
   216f0:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
   216f4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   216f6:	05d1      	lsls	r1, r2, #23
   216f8:	d51d      	bpl.n	21736 <release_handler+0x4a>
   216fa:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   216fe:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   21702:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21706:	2000      	movs	r0, #0
   21708:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2170c:	f834 2b02 	ldrh.w	r2, [r4], #2
   21710:	f412 7f80 	tst.w	r2, #256	; 0x100
   21714:	d003      	beq.n	2171e <release_handler+0x32>
   21716:	f3c2 2243 	ubfx	r2, r2, #9, #4
   2171a:	4291      	cmp	r1, r2
   2171c:	d00b      	beq.n	21736 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2171e:	3001      	adds	r0, #1
   21720:	2820      	cmp	r0, #32
   21722:	d1f3      	bne.n	2170c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21724:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21726:	480c      	ldr	r0, [pc, #48]	; (21758 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   21728:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2172c:	f7ff fe3e 	bl	213ac <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21730:	4b0a      	ldr	r3, [pc, #40]	; (2175c <release_handler+0x70>)
   21732:	4298      	cmp	r0, r3
   21734:	d100      	bne.n	21738 <release_handler+0x4c>
}
   21736:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21738:	4909      	ldr	r1, [pc, #36]	; (21760 <release_handler+0x74>)
   2173a:	480a      	ldr	r0, [pc, #40]	; (21764 <release_handler+0x78>)
   2173c:	f44f 7299 	mov.w	r2, #306	; 0x132
   21740:	f009 f8b0 	bl	2a8a4 <printk>
}
   21744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21748:	f44f 7199 	mov.w	r1, #306	; 0x132
   2174c:	4804      	ldr	r0, [pc, #16]	; (21760 <release_handler+0x74>)
   2174e:	f009 ba42 	b.w	2abd6 <assert_post_action>
   21752:	bf00      	nop
   21754:	2000c65c 	.word	0x2000c65c
   21758:	2000c6b0 	.word	0x2000c6b0
   2175c:	0bad0000 	.word	0x0bad0000
   21760:	00030886 	.word	0x00030886
   21764:	0002e574 	.word	0x0002e574

00021768 <pin_handler_trigger_uninit>:
{
   21768:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2176a:	4c0c      	ldr	r4, [pc, #48]	; (2179c <pin_handler_trigger_uninit+0x34>)
   2176c:	f100 0508 	add.w	r5, r0, #8
   21770:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   21774:	069a      	lsls	r2, r3, #26
   21776:	d50a      	bpl.n	2178e <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21778:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2177a:	0b5b      	lsrs	r3, r3, #13
   2177c:	009b      	lsls	r3, r3, #2
   2177e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21782:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21786:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   2178a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
   2178e:	f7ff ffad 	bl	216ec <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   21792:	2300      	movs	r3, #0
   21794:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21798:	bd38      	pop	{r3, r4, r5, pc}
   2179a:	bf00      	nop
   2179c:	2000c65c 	.word	0x2000c65c

000217a0 <nrf_gpio_pin_port_decode>:
{
   217a0:	b510      	push	{r4, lr}
   217a2:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   217a4:	6800      	ldr	r0, [r0, #0]
   217a6:	f00a f85e 	bl	2b866 <nrf_gpio_pin_present_check>
   217aa:	b950      	cbnz	r0, 217c2 <nrf_gpio_pin_port_decode+0x22>
   217ac:	490e      	ldr	r1, [pc, #56]	; (217e8 <nrf_gpio_pin_port_decode+0x48>)
   217ae:	480f      	ldr	r0, [pc, #60]	; (217ec <nrf_gpio_pin_port_decode+0x4c>)
   217b0:	f240 2229 	movw	r2, #553	; 0x229
   217b4:	f009 f876 	bl	2a8a4 <printk>
   217b8:	f240 2129 	movw	r1, #553	; 0x229
   217bc:	480a      	ldr	r0, [pc, #40]	; (217e8 <nrf_gpio_pin_port_decode+0x48>)
   217be:	f009 fa0a 	bl	2abd6 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   217c2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   217c4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   217c8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   217ca:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   217cc:	d00a      	beq.n	217e4 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   217ce:	4906      	ldr	r1, [pc, #24]	; (217e8 <nrf_gpio_pin_port_decode+0x48>)
   217d0:	4806      	ldr	r0, [pc, #24]	; (217ec <nrf_gpio_pin_port_decode+0x4c>)
   217d2:	f240 222e 	movw	r2, #558	; 0x22e
   217d6:	f009 f865 	bl	2a8a4 <printk>
   217da:	f240 212e 	movw	r1, #558	; 0x22e
   217de:	4802      	ldr	r0, [pc, #8]	; (217e8 <nrf_gpio_pin_port_decode+0x48>)
   217e0:	f009 f9f9 	bl	2abd6 <assert_post_action>
}
   217e4:	4802      	ldr	r0, [pc, #8]	; (217f0 <nrf_gpio_pin_port_decode+0x50>)
   217e6:	bd10      	pop	{r4, pc}
   217e8:	0002ef16 	.word	0x0002ef16
   217ec:	0002e574 	.word	0x0002e574
   217f0:	40842500 	.word	0x40842500

000217f4 <nrfx_gpiote_input_configure>:
{
   217f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   217f6:	4604      	mov	r4, r0
   217f8:	4616      	mov	r6, r2
   217fa:	461d      	mov	r5, r3
   217fc:	b085      	sub	sp, #20
    if (p_input_config)
   217fe:	b1f1      	cbz	r1, 2183e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   21800:	f7ff ff48 	bl	21694 <pin_is_task_output>
   21804:	b110      	cbz	r0, 2180c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   21806:	484a      	ldr	r0, [pc, #296]	; (21930 <nrfx_gpiote_input_configure+0x13c>)
}
   21808:	b005      	add	sp, #20
   2180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2180c:	460b      	mov	r3, r1
   2180e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21812:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   21816:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2181a:	f10d 020f 	add.w	r2, sp, #15
   2181e:	f10d 010e 	add.w	r1, sp, #14
   21822:	4620      	mov	r0, r4
   21824:	f00a f82f 	bl	2b886 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21828:	4a42      	ldr	r2, [pc, #264]	; (21934 <nrfx_gpiote_input_configure+0x140>)
   2182a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2182e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21832:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21836:	f043 0301 	orr.w	r3, r3, #1
   2183a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2183e:	b196      	cbz	r6, 21866 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21840:	4b3c      	ldr	r3, [pc, #240]	; (21934 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21842:	7830      	ldrb	r0, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21844:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21846:	f104 0608 	add.w	r6, r4, #8
   2184a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   2184e:	078f      	lsls	r7, r1, #30
   21850:	d50c      	bpl.n	2186c <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   21852:	2a00      	cmp	r2, #0
   21854:	d1d7      	bne.n	21806 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21856:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   2185a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2185e:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
   21862:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
   21866:	bbcd      	cbnz	r5, 218dc <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   21868:	4833      	ldr	r0, [pc, #204]	; (21938 <nrfx_gpiote_input_configure+0x144>)
   2186a:	e7cd      	b.n	21808 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2186c:	f021 0120 	bic.w	r1, r1, #32
   21870:	04c9      	lsls	r1, r1, #19
   21872:	0cc9      	lsrs	r1, r1, #19
   21874:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   21878:	2a00      	cmp	r2, #0
   2187a:	d0ec      	beq.n	21856 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   2187c:	2803      	cmp	r0, #3
   2187e:	d8c2      	bhi.n	21806 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21880:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21884:	4662      	mov	r2, ip
   21886:	0092      	lsls	r2, r2, #2
   21888:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2188c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21890:	b920      	cbnz	r0, 2189c <nrfx_gpiote_input_configure+0xa8>
    p_reg->CONFIG[idx] = 0;
   21892:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   21896:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
   2189a:	e7dc      	b.n	21856 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2189c:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   218a0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   218a4:	f027 0703 	bic.w	r7, r7, #3
   218a8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   218ac:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
   218b0:	f041 0120 	orr.w	r1, r1, #32
   218b4:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
   218b8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   218bc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   218c0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   218c4:	0227      	lsls	r7, r4, #8
   218c6:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   218ca:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
   218ce:	ea47 070e 	orr.w	r7, r7, lr
   218d2:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   218d6:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   218da:	e7bc      	b.n	21856 <nrfx_gpiote_input_configure+0x62>
    release_handler(pin);
   218dc:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   218de:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   218e2:	f7ff ff03 	bl	216ec <release_handler>
    if (!handler)
   218e6:	2e00      	cmp	r6, #0
   218e8:	d0be      	beq.n	21868 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   218ea:	4d12      	ldr	r5, [pc, #72]	; (21934 <nrfx_gpiote_input_configure+0x140>)
   218ec:	682b      	ldr	r3, [r5, #0]
   218ee:	429e      	cmp	r6, r3
   218f0:	d104      	bne.n	218fc <nrfx_gpiote_input_configure+0x108>
   218f2:	686b      	ldr	r3, [r5, #4]
   218f4:	429f      	cmp	r7, r3
   218f6:	d101      	bne.n	218fc <nrfx_gpiote_input_configure+0x108>
   218f8:	2200      	movs	r2, #0
   218fa:	e00a      	b.n	21912 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   218fc:	480f      	ldr	r0, [pc, #60]	; (2193c <nrfx_gpiote_input_configure+0x148>)
   218fe:	f10d 010f 	add.w	r1, sp, #15
   21902:	f7ff fd33 	bl	2136c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21906:	4b0c      	ldr	r3, [pc, #48]	; (21938 <nrfx_gpiote_input_configure+0x144>)
   21908:	4298      	cmp	r0, r3
   2190a:	f47f af7d 	bne.w	21808 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   2190e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   21912:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21916:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   21918:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2191a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   2191e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21922:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2192a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   2192e:	e79b      	b.n	21868 <nrfx_gpiote_input_configure+0x74>
   21930:	0bad0004 	.word	0x0bad0004
   21934:	2000c65c 	.word	0x2000c65c
   21938:	0bad0000 	.word	0x0bad0000
   2193c:	2000c6b0 	.word	0x2000c6b0

00021940 <nrfx_gpiote_output_configure>:
{
   21940:	b5f0      	push	{r4, r5, r6, r7, lr}
   21942:	4604      	mov	r4, r0
   21944:	4615      	mov	r5, r2
   21946:	b085      	sub	sp, #20
    if (p_config)
   21948:	b309      	cbz	r1, 2198e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2194a:	4e33      	ldr	r6, [pc, #204]	; (21a18 <nrfx_gpiote_output_configure+0xd8>)
   2194c:	f100 0708 	add.w	r7, r0, #8
   21950:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21954:	0798      	lsls	r0, r3, #30
   21956:	d401      	bmi.n	2195c <nrfx_gpiote_output_configure+0x1c>
   21958:	069a      	lsls	r2, r3, #26
   2195a:	d45a      	bmi.n	21a12 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2195c:	f013 0f1c 	tst.w	r3, #28
   21960:	d002      	beq.n	21968 <nrfx_gpiote_output_configure+0x28>
   21962:	784b      	ldrb	r3, [r1, #1]
   21964:	2b01      	cmp	r3, #1
   21966:	d054      	beq.n	21a12 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21968:	2301      	movs	r3, #1
   2196a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2196e:	2300      	movs	r3, #0
   21970:	1c4a      	adds	r2, r1, #1
   21972:	e9cd 1300 	strd	r1, r3, [sp]
   21976:	4620      	mov	r0, r4
   21978:	1c8b      	adds	r3, r1, #2
   2197a:	f10d 010f 	add.w	r1, sp, #15
   2197e:	f009 ff82 	bl	2b886 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21982:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   21986:	f043 0303 	orr.w	r3, r3, #3
   2198a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2198e:	b915      	cbnz	r5, 21996 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   21990:	4822      	ldr	r0, [pc, #136]	; (21a1c <nrfx_gpiote_output_configure+0xdc>)
}
   21992:	b005      	add	sp, #20
   21994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21996:	4e20      	ldr	r6, [pc, #128]	; (21a18 <nrfx_gpiote_output_configure+0xd8>)
   21998:	f104 0708 	add.w	r7, r4, #8
   2199c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   219a0:	0783      	lsls	r3, r0, #30
   219a2:	d536      	bpl.n	21a12 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   219a4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   219a8:	2300      	movs	r3, #0
   219aa:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   219ac:	f020 0020 	bic.w	r0, r0, #32
   219b0:	0089      	lsls	r1, r1, #2
   219b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   219b6:	04c0      	lsls	r0, r0, #19
   219b8:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   219bc:	0cc0      	lsrs	r0, r0, #19
   219be:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   219c2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   219c6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   219ca:	786a      	ldrb	r2, [r5, #1]
   219cc:	2a00      	cmp	r2, #0
   219ce:	d0df      	beq.n	21990 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   219d0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   219d4:	78ad      	ldrb	r5, [r5, #2]
   219d6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   219da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   219de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   219e2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   219e6:	0223      	lsls	r3, r4, #8
   219e8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   219ec:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   219ee:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   219f2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   219f6:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   219f8:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   219fa:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   219fe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21a02:	432b      	orrs	r3, r5
   21a04:	f040 0020 	orr.w	r0, r0, #32
   21a08:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21a0c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21a10:	e7be      	b.n	21990 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   21a12:	4803      	ldr	r0, [pc, #12]	; (21a20 <nrfx_gpiote_output_configure+0xe0>)
   21a14:	e7bd      	b.n	21992 <nrfx_gpiote_output_configure+0x52>
   21a16:	bf00      	nop
   21a18:	2000c65c 	.word	0x2000c65c
   21a1c:	0bad0000 	.word	0x0bad0000
   21a20:	0bad0004 	.word	0x0bad0004

00021a24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21a24:	4b01      	ldr	r3, [pc, #4]	; (21a2c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   21a26:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   21a2a:	4770      	bx	lr
   21a2c:	2000c65c 	.word	0x2000c65c

00021a30 <nrfx_gpiote_channel_get>:
{
   21a30:	b538      	push	{r3, r4, r5, lr}
   21a32:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   21a34:	460d      	mov	r5, r1
   21a36:	b951      	cbnz	r1, 21a4e <nrfx_gpiote_channel_get+0x1e>
   21a38:	490a      	ldr	r1, [pc, #40]	; (21a64 <nrfx_gpiote_channel_get+0x34>)
   21a3a:	480b      	ldr	r0, [pc, #44]	; (21a68 <nrfx_gpiote_channel_get+0x38>)
   21a3c:	f240 2235 	movw	r2, #565	; 0x235
   21a40:	f008 ff30 	bl	2a8a4 <printk>
   21a44:	f240 2135 	movw	r1, #565	; 0x235
   21a48:	4806      	ldr	r0, [pc, #24]	; (21a64 <nrfx_gpiote_channel_get+0x34>)
   21a4a:	f009 f8c4 	bl	2abd6 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21a4e:	4b07      	ldr	r3, [pc, #28]	; (21a6c <nrfx_gpiote_channel_get+0x3c>)
   21a50:	3408      	adds	r4, #8
   21a52:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   21a56:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21a58:	bf43      	ittte	mi
   21a5a:	0b5b      	lsrmi	r3, r3, #13
   21a5c:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   21a5e:	4804      	ldrmi	r0, [pc, #16]	; (21a70 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
   21a60:	4804      	ldrpl	r0, [pc, #16]	; (21a74 <nrfx_gpiote_channel_get+0x44>)
}
   21a62:	bd38      	pop	{r3, r4, r5, pc}
   21a64:	00030886 	.word	0x00030886
   21a68:	0002e574 	.word	0x0002e574
   21a6c:	2000c65c 	.word	0x2000c65c
   21a70:	0bad0000 	.word	0x0bad0000
   21a74:	0bad0004 	.word	0x0bad0004

00021a78 <nrfx_gpiote_init>:
{
   21a78:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21a7a:	4c0e      	ldr	r4, [pc, #56]	; (21ab4 <nrfx_gpiote_init+0x3c>)
   21a7c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   21a80:	b9b5      	cbnz	r5, 21ab0 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   21a82:	2240      	movs	r2, #64	; 0x40
   21a84:	4629      	mov	r1, r5
   21a86:	f104 0010 	add.w	r0, r4, #16
   21a8a:	f00b f8af 	bl	2cbec <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21a8e:	2031      	movs	r0, #49	; 0x31
   21a90:	f7fa fb20 	bl	1c0d4 <arch_irq_enable>
    p_reg->INTENSET = mask;
   21a94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21a98:	4b07      	ldr	r3, [pc, #28]	; (21ab8 <nrfx_gpiote_init+0x40>)
    return err_code;
   21a9a:	4808      	ldr	r0, [pc, #32]	; (21abc <nrfx_gpiote_init+0x44>)
   21a9c:	601d      	str	r5, [r3, #0]
   21a9e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   21aa0:	4b07      	ldr	r3, [pc, #28]	; (21ac0 <nrfx_gpiote_init+0x48>)
   21aa2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21aa6:	2301      	movs	r3, #1
   21aa8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   21aac:	6563      	str	r3, [r4, #84]	; 0x54
}
   21aae:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   21ab0:	4804      	ldr	r0, [pc, #16]	; (21ac4 <nrfx_gpiote_init+0x4c>)
   21ab2:	e7fc      	b.n	21aae <nrfx_gpiote_init+0x36>
   21ab4:	2000c65c 	.word	0x2000c65c
   21ab8:	4003117c 	.word	0x4003117c
   21abc:	0bad0000 	.word	0x0bad0000
   21ac0:	40031000 	.word	0x40031000
   21ac4:	0bad0005 	.word	0x0bad0005

00021ac8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21ac8:	4b03      	ldr	r3, [pc, #12]	; (21ad8 <nrfx_gpiote_is_init+0x10>)
   21aca:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   21ace:	3800      	subs	r0, #0
   21ad0:	bf18      	it	ne
   21ad2:	2001      	movne	r0, #1
   21ad4:	4770      	bx	lr
   21ad6:	bf00      	nop
   21ad8:	2000c65c 	.word	0x2000c65c

00021adc <nrfx_gpiote_channel_free>:
{
   21adc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21ade:	4801      	ldr	r0, [pc, #4]	; (21ae4 <nrfx_gpiote_channel_free+0x8>)
   21ae0:	f7ff bc64 	b.w	213ac <nrfx_flag32_free>
   21ae4:	2000c6ac 	.word	0x2000c6ac

00021ae8 <nrfx_gpiote_channel_alloc>:
{
   21ae8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21aea:	4801      	ldr	r0, [pc, #4]	; (21af0 <nrfx_gpiote_channel_alloc+0x8>)
   21aec:	f7ff bc3e 	b.w	2136c <nrfx_flag32_alloc>
   21af0:	2000c6ac 	.word	0x2000c6ac

00021af4 <nrfx_gpiote_trigger_enable>:
{
   21af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   21af6:	4d2f      	ldr	r5, [pc, #188]	; (21bb4 <nrfx_gpiote_trigger_enable+0xc0>)
   21af8:	f100 0708 	add.w	r7, r0, #8
   21afc:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
{
   21b00:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   21b02:	f013 0f1c 	tst.w	r3, #28
{
   21b06:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   21b08:	d10a      	bne.n	21b20 <nrfx_gpiote_trigger_enable+0x2c>
   21b0a:	492b      	ldr	r1, [pc, #172]	; (21bb8 <nrfx_gpiote_trigger_enable+0xc4>)
   21b0c:	482b      	ldr	r0, [pc, #172]	; (21bbc <nrfx_gpiote_trigger_enable+0xc8>)
   21b0e:	f240 32df 	movw	r2, #991	; 0x3df
   21b12:	f008 fec7 	bl	2a8a4 <printk>
   21b16:	f240 31df 	movw	r1, #991	; 0x3df
   21b1a:	4827      	ldr	r0, [pc, #156]	; (21bb8 <nrfx_gpiote_trigger_enable+0xc4>)
   21b1c:	f009 f85b 	bl	2abd6 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21b20:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21b24:	0683      	lsls	r3, r0, #26
   21b26:	d51f      	bpl.n	21b68 <nrfx_gpiote_trigger_enable+0x74>
   21b28:	f010 0302 	ands.w	r3, r0, #2
   21b2c:	d11c      	bne.n	21b68 <nrfx_gpiote_trigger_enable+0x74>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21b2e:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   21b30:	4608      	mov	r0, r1
   21b32:	f009 fea4 	bl	2b87e <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   21b36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   21b3a:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21b3e:	6003      	str	r3, [r0, #0]
   21b40:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21b42:	008b      	lsls	r3, r1, #2
   21b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21b48:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21b4c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21b50:	f042 0201 	orr.w	r2, r2, #1
   21b54:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   21b58:	b126      	cbz	r6, 21b64 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21b5a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   21b5c:	4a18      	ldr	r2, [pc, #96]	; (21bc0 <nrfx_gpiote_trigger_enable+0xcc>)
   21b5e:	408b      	lsls	r3, r1
   21b60:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21b64:	b003      	add	sp, #12
   21b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   21b68:	b956      	cbnz	r6, 21b80 <nrfx_gpiote_trigger_enable+0x8c>
   21b6a:	4913      	ldr	r1, [pc, #76]	; (21bb8 <nrfx_gpiote_trigger_enable+0xc4>)
   21b6c:	4813      	ldr	r0, [pc, #76]	; (21bbc <nrfx_gpiote_trigger_enable+0xc8>)
   21b6e:	f240 32ee 	movw	r2, #1006	; 0x3ee
   21b72:	f008 fe97 	bl	2a8a4 <printk>
   21b76:	f240 31ee 	movw	r1, #1006	; 0x3ee
   21b7a:	480f      	ldr	r0, [pc, #60]	; (21bb8 <nrfx_gpiote_trigger_enable+0xc4>)
   21b7c:	f009 f82b 	bl	2abd6 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21b80:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   21b84:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   21b88:	2b04      	cmp	r3, #4
   21b8a:	d00f      	beq.n	21bac <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21b8c:	2b05      	cmp	r3, #5
   21b8e:	d00f      	beq.n	21bb0 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21b90:	a801      	add	r0, sp, #4
   21b92:	9401      	str	r4, [sp, #4]
   21b94:	f7ff fe04 	bl	217a0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21b98:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   21b9a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21b9c:	40d9      	lsrs	r1, r3
   21b9e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21ba2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21ba4:	4620      	mov	r0, r4
   21ba6:	f009 feb9 	bl	2b91c <nrf_gpio_cfg_sense_set>
}
   21baa:	e7db      	b.n	21b64 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   21bac:	2103      	movs	r1, #3
   21bae:	e7f9      	b.n	21ba4 <nrfx_gpiote_trigger_enable+0xb0>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   21bb0:	2102      	movs	r1, #2
   21bb2:	e7f7      	b.n	21ba4 <nrfx_gpiote_trigger_enable+0xb0>
   21bb4:	2000c65c 	.word	0x2000c65c
   21bb8:	00030886 	.word	0x00030886
   21bbc:	0002e574 	.word	0x0002e574
   21bc0:	40031000 	.word	0x40031000

00021bc4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21bc4:	4b0e      	ldr	r3, [pc, #56]	; (21c00 <nrfx_gpiote_trigger_disable+0x3c>)
   21bc6:	f100 0208 	add.w	r2, r0, #8
   21bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21bce:	0699      	lsls	r1, r3, #26
   21bd0:	d513      	bpl.n	21bfa <nrfx_gpiote_trigger_disable+0x36>
   21bd2:	079a      	lsls	r2, r3, #30
   21bd4:	d411      	bmi.n	21bfa <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21bd6:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21bd8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21bda:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21bdc:	4909      	ldr	r1, [pc, #36]	; (21c04 <nrfx_gpiote_trigger_disable+0x40>)
   21bde:	009b      	lsls	r3, r3, #2
   21be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21be4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21be8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21bec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21bf0:	f022 0203 	bic.w	r2, r2, #3
   21bf4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21bf8:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21bfa:	2100      	movs	r1, #0
   21bfc:	f009 be8e 	b.w	2b91c <nrf_gpio_cfg_sense_set>
   21c00:	2000c65c 	.word	0x2000c65c
   21c04:	40031000 	.word	0x40031000

00021c08 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21c08:	4b0d      	ldr	r3, [pc, #52]	; (21c40 <nrfx_gpiote_pin_uninit+0x38>)
   21c0a:	f100 0208 	add.w	r2, r0, #8
   21c0e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
   21c12:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   21c14:	07db      	lsls	r3, r3, #31
{
   21c16:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21c18:	d510      	bpl.n	21c3c <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   21c1a:	f7ff ffd3 	bl	21bc4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21c1e:	4620      	mov	r0, r4
   21c20:	f7ff fda2 	bl	21768 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21c24:	a801      	add	r0, sp, #4
   21c26:	9401      	str	r4, [sp, #4]
   21c28:	f7ff fdba 	bl	217a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21c2c:	2202      	movs	r2, #2
   21c2e:	9b01      	ldr	r3, [sp, #4]
   21c30:	3380      	adds	r3, #128	; 0x80
   21c32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21c36:	4803      	ldr	r0, [pc, #12]	; (21c44 <nrfx_gpiote_pin_uninit+0x3c>)
}
   21c38:	b002      	add	sp, #8
   21c3a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21c3c:	4802      	ldr	r0, [pc, #8]	; (21c48 <nrfx_gpiote_pin_uninit+0x40>)
   21c3e:	e7fb      	b.n	21c38 <nrfx_gpiote_pin_uninit+0x30>
   21c40:	2000c65c 	.word	0x2000c65c
   21c44:	0bad0000 	.word	0x0bad0000
   21c48:	0bad0004 	.word	0x0bad0004

00021c4c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   21c50:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21c52:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21c54:	4634      	mov	r4, r6
{
   21c56:	4b52      	ldr	r3, [pc, #328]	; (21da0 <nrfx_gpiote_irq_handler+0x154>)
    return p_reg->INTENSET & mask;
   21c58:	4852      	ldr	r0, [pc, #328]	; (21da4 <nrfx_gpiote_irq_handler+0x158>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21c5a:	4953      	ldr	r1, [pc, #332]	; (21da8 <nrfx_gpiote_irq_handler+0x15c>)
{
   21c5c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21c5e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21c60:	b135      	cbz	r5, 21c70 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   21c62:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   21c66:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21c68:	bf1e      	ittt	ne
   21c6a:	601c      	strne	r4, [r3, #0]
   21c6c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   21c6e:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   21c70:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21c72:	428b      	cmp	r3, r1
        mask <<= 1;
   21c74:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21c78:	d1f1      	bne.n	21c5e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21c7a:	4b4c      	ldr	r3, [pc, #304]	; (21dac <nrfx_gpiote_irq_handler+0x160>)
   21c7c:	681a      	ldr	r2, [r3, #0]
   21c7e:	4698      	mov	r8, r3
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21c80:	b182      	cbz	r2, 21ca4 <nrfx_gpiote_irq_handler+0x58>
        *p_masks = gpio_regs[i]->LATCH;
   21c82:	4f4b      	ldr	r7, [pc, #300]	; (21db0 <nrfx_gpiote_irq_handler+0x164>)
   21c84:	6a3b      	ldr	r3, [r7, #32]
   21c86:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21c88:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   21c8a:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   21c8e:	9c02      	ldr	r4, [sp, #8]
   21c90:	b954      	cbnz	r4, 21ca8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21c92:	f8c8 4000 	str.w	r4, [r8]
   21c96:	f8d8 3000 	ldr.w	r3, [r8]
        *p_masks = gpio_regs[i]->LATCH;
   21c9a:	6a3b      	ldr	r3, [r7, #32]
   21c9c:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21c9e:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   21ca0:	2b00      	cmp	r3, #0
   21ca2:	d1f2      	bne.n	21c8a <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
   21ca4:	2401      	movs	r4, #1
   21ca6:	e076      	b.n	21d96 <nrfx_gpiote_irq_handler+0x14a>
                uint32_t pin = NRF_CTZ(latch[i]);
   21ca8:	fa94 f4a4 	rbit	r4, r4
   21cac:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21cb0:	4a40      	ldr	r2, [pc, #256]	; (21db4 <nrfx_gpiote_irq_handler+0x168>)
   21cb2:	f104 0308 	add.w	r3, r4, #8
   21cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21cba:	08e5      	lsrs	r5, r4, #3
   21cbc:	089a      	lsrs	r2, r3, #2
   21cbe:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   21cc2:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   21cc6:	ab02      	add	r3, sp, #8
   21cc8:	fa09 f001 	lsl.w	r0, r9, r1
   21ccc:	5d59      	ldrb	r1, [r3, r5]
   21cce:	9201      	str	r2, [sp, #4]
   21cd0:	ea21 0100 	bic.w	r1, r1, r0
   21cd4:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21cd6:	a803      	add	r0, sp, #12
   21cd8:	9403      	str	r4, [sp, #12]
   21cda:	f7ff fd61 	bl	217a0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21cde:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   21ce0:	9a01      	ldr	r2, [sp, #4]
   21ce2:	3180      	adds	r1, #128	; 0x80
   21ce4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   21ce8:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21cea:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21cec:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   21cf0:	d521      	bpl.n	21d36 <nrfx_gpiote_irq_handler+0xea>
        call_handler(pin, trigger);
   21cf2:	4659      	mov	r1, fp
   21cf4:	4620      	mov	r0, r4
   21cf6:	f7ff fcdb 	bl	216b0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21cfa:	a803      	add	r0, sp, #12
   21cfc:	9403      	str	r4, [sp, #12]
   21cfe:	f7ff fd4f 	bl	217a0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21d02:	9b03      	ldr	r3, [sp, #12]
   21d04:	b2ed      	uxtb	r5, r5
   21d06:	3380      	adds	r3, #128	; 0x80
   21d08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21d0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21d10:	429d      	cmp	r5, r3
   21d12:	d107      	bne.n	21d24 <nrfx_gpiote_irq_handler+0xd8>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21d14:	2100      	movs	r1, #0
   21d16:	4620      	mov	r0, r4
   21d18:	f009 fe00 	bl	2b91c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21d1c:	4629      	mov	r1, r5
   21d1e:	4620      	mov	r0, r4
   21d20:	f009 fdfc 	bl	2b91c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21d24:	a803      	add	r0, sp, #12
   21d26:	9403      	str	r4, [sp, #12]
   21d28:	f7ff fd3a 	bl	217a0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   21d2c:	9b03      	ldr	r3, [sp, #12]
   21d2e:	fa09 f303 	lsl.w	r3, r9, r3
   21d32:	6203      	str	r3, [r0, #32]
   21d34:	e7ab      	b.n	21c8e <nrfx_gpiote_irq_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21d36:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21d38:	bf0c      	ite	eq
   21d3a:	2103      	moveq	r1, #3
   21d3c:	2102      	movne	r1, #2
   21d3e:	4620      	mov	r0, r4
   21d40:	f009 fdec 	bl	2b91c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21d44:	f1bb 0f03 	cmp.w	fp, #3
   21d48:	d004      	beq.n	21d54 <nrfx_gpiote_irq_handler+0x108>
   21d4a:	2d02      	cmp	r5, #2
   21d4c:	d107      	bne.n	21d5e <nrfx_gpiote_irq_handler+0x112>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21d4e:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21d52:	d1e7      	bne.n	21d24 <nrfx_gpiote_irq_handler+0xd8>
            call_handler(pin, trigger);
   21d54:	4651      	mov	r1, sl
   21d56:	4620      	mov	r0, r4
   21d58:	f7ff fcaa 	bl	216b0 <call_handler>
   21d5c:	e7e2      	b.n	21d24 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21d5e:	2d03      	cmp	r5, #3
   21d60:	d1e0      	bne.n	21d24 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21d62:	f1bb 0f02 	cmp.w	fp, #2
   21d66:	e7f4      	b.n	21d52 <nrfx_gpiote_irq_handler+0x106>
        uint32_t ch = NRF_CTZ(mask);
   21d68:	fa96 f3a6 	rbit	r3, r6
   21d6c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21d70:	fa04 f203 	lsl.w	r2, r4, r3
   21d74:	009b      	lsls	r3, r3, #2
   21d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21d7a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21d7e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21d82:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21d86:	f3c0 2004 	ubfx	r0, r0, #8, #5
   21d8a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   21d8e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21d92:	f7ff fc8d 	bl	216b0 <call_handler>
    while (mask)
   21d96:	2e00      	cmp	r6, #0
   21d98:	d1e6      	bne.n	21d68 <nrfx_gpiote_irq_handler+0x11c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   21d9a:	b005      	add	sp, #20
   21d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21da0:	40031100 	.word	0x40031100
   21da4:	40031000 	.word	0x40031000
   21da8:	40031120 	.word	0x40031120
   21dac:	4003117c 	.word	0x4003117c
   21db0:	40842500 	.word	0x40842500
   21db4:	2000c65c 	.word	0x2000c65c

00021db8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   21db8:	b570      	push	{r4, r5, r6, lr}
   21dba:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   21dbc:	460d      	mov	r5, r1
   21dbe:	b941      	cbnz	r1, 21dd2 <nrfx_ipc_init+0x1a>
   21dc0:	490b      	ldr	r1, [pc, #44]	; (21df0 <nrfx_ipc_init+0x38>)
   21dc2:	480c      	ldr	r0, [pc, #48]	; (21df4 <nrfx_ipc_init+0x3c>)
   21dc4:	2234      	movs	r2, #52	; 0x34
   21dc6:	f008 fd6d 	bl	2a8a4 <printk>
   21dca:	2134      	movs	r1, #52	; 0x34
   21dcc:	4808      	ldr	r0, [pc, #32]	; (21df0 <nrfx_ipc_init+0x38>)
   21dce:	f008 ff02 	bl	2abd6 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21dd2:	4c09      	ldr	r4, [pc, #36]	; (21df8 <nrfx_ipc_init+0x40>)
   21dd4:	7923      	ldrb	r3, [r4, #4]
   21dd6:	b943      	cbnz	r3, 21dea <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   21dd8:	202a      	movs	r0, #42	; 0x2a
   21dda:	f7fa f97b 	bl	1c0d4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21dde:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   21de0:	4806      	ldr	r0, [pc, #24]	; (21dfc <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21de2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   21de4:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   21de6:	60a6      	str	r6, [r4, #8]
}
   21de8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   21dea:	4805      	ldr	r0, [pc, #20]	; (21e00 <nrfx_ipc_init+0x48>)
   21dec:	e7fc      	b.n	21de8 <nrfx_ipc_init+0x30>
   21dee:	bf00      	nop
   21df0:	000308c4 	.word	0x000308c4
   21df4:	0002e574 	.word	0x0002e574
   21df8:	2000d0a8 	.word	0x2000d0a8
   21dfc:	0bad0000 	.word	0x0bad0000
   21e00:	0bad000c 	.word	0x0bad000c

00021e04 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   21e04:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   21e06:	4604      	mov	r4, r0
   21e08:	b940      	cbnz	r0, 21e1c <nrfx_ipc_config_load+0x18>
   21e0a:	4919      	ldr	r1, [pc, #100]	; (21e70 <nrfx_ipc_config_load+0x6c>)
   21e0c:	4819      	ldr	r0, [pc, #100]	; (21e74 <nrfx_ipc_config_load+0x70>)
   21e0e:	2246      	movs	r2, #70	; 0x46
   21e10:	f008 fd48 	bl	2a8a4 <printk>
   21e14:	2146      	movs	r1, #70	; 0x46
   21e16:	4816      	ldr	r0, [pc, #88]	; (21e70 <nrfx_ipc_config_load+0x6c>)
   21e18:	f008 fedd 	bl	2abd6 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21e1c:	4b16      	ldr	r3, [pc, #88]	; (21e78 <nrfx_ipc_config_load+0x74>)
   21e1e:	791b      	ldrb	r3, [r3, #4]
   21e20:	2b01      	cmp	r3, #1
   21e22:	d008      	beq.n	21e36 <nrfx_ipc_config_load+0x32>
   21e24:	4912      	ldr	r1, [pc, #72]	; (21e70 <nrfx_ipc_config_load+0x6c>)
   21e26:	4813      	ldr	r0, [pc, #76]	; (21e74 <nrfx_ipc_config_load+0x70>)
   21e28:	2247      	movs	r2, #71	; 0x47
   21e2a:	f008 fd3b 	bl	2a8a4 <printk>
   21e2e:	2147      	movs	r1, #71	; 0x47
   21e30:	480f      	ldr	r0, [pc, #60]	; (21e70 <nrfx_ipc_config_load+0x6c>)
   21e32:	f008 fed0 	bl	2abd6 <assert_post_action>
{
   21e36:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   21e38:	4a10      	ldr	r2, [pc, #64]	; (21e7c <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   21e3a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   21e3e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21e42:	3301      	adds	r3, #1
   21e44:	2b08      	cmp	r3, #8
   21e46:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   21e4a:	d1f6      	bne.n	21e3a <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   21e4c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21e4e:	4a0b      	ldr	r2, [pc, #44]	; (21e7c <nrfx_ipc_config_load+0x78>)
   21e50:	f104 0120 	add.w	r1, r4, #32
   21e54:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   21e58:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21e5c:	3301      	adds	r3, #1
   21e5e:	2b08      	cmp	r3, #8
   21e60:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   21e64:	d1f6      	bne.n	21e54 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   21e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   21e68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21e6c:	bd38      	pop	{r3, r4, r5, pc}
   21e6e:	bf00      	nop
   21e70:	000308c4 	.word	0x000308c4
   21e74:	0002e574 	.word	0x0002e574
   21e78:	2000d0a8 	.word	0x2000d0a8
   21e7c:	4002a000 	.word	0x4002a000

00021e80 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   21e80:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21e82:	4c1b      	ldr	r4, [pc, #108]	; (21ef0 <nrfx_ipc_uninit+0x70>)
   21e84:	7922      	ldrb	r2, [r4, #4]
   21e86:	2a01      	cmp	r2, #1
   21e88:	d008      	beq.n	21e9c <nrfx_ipc_uninit+0x1c>
   21e8a:	491a      	ldr	r1, [pc, #104]	; (21ef4 <nrfx_ipc_uninit+0x74>)
   21e8c:	481a      	ldr	r0, [pc, #104]	; (21ef8 <nrfx_ipc_uninit+0x78>)
   21e8e:	2259      	movs	r2, #89	; 0x59
   21e90:	f008 fd08 	bl	2a8a4 <printk>
   21e94:	2159      	movs	r1, #89	; 0x59
   21e96:	4817      	ldr	r0, [pc, #92]	; (21ef4 <nrfx_ipc_uninit+0x74>)
   21e98:	f008 fe9d 	bl	2abd6 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   21e9c:	2300      	movs	r3, #0
   21e9e:	4a17      	ldr	r2, [pc, #92]	; (21efc <nrfx_ipc_uninit+0x7c>)
   21ea0:	4917      	ldr	r1, [pc, #92]	; (21f00 <nrfx_ipc_uninit+0x80>)
   21ea2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21ea6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   21eaa:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   21eae:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   21eb2:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   21eb6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   21eba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   21ebe:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21ec2:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   21ec6:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   21eca:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   21ece:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   21ed2:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   21ed6:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   21eda:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   21ede:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   21ee2:	f04f 32ff 	mov.w	r2, #4294967295
   21ee6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   21eea:	7123      	strb	r3, [r4, #4]
}
   21eec:	bd10      	pop	{r4, pc}
   21eee:	bf00      	nop
   21ef0:	2000d0a8 	.word	0x2000d0a8
   21ef4:	000308c4 	.word	0x000308c4
   21ef8:	0002e574 	.word	0x0002e574
   21efc:	4002a004 	.word	0x4002a004
   21f00:	4002a000 	.word	0x4002a000

00021f04 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   21f04:	4b16      	ldr	r3, [pc, #88]	; (21f60 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   21f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21f0a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   21f0e:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   21f12:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   21f14:	4f13      	ldr	r7, [pc, #76]	; (21f64 <nrfx_ipc_irq_handler+0x60>)
   21f16:	f8df 9058 	ldr.w	r9, [pc, #88]	; 21f70 <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   21f1a:	b935      	cbnz	r5, 21f2a <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   21f1c:	4b12      	ldr	r3, [pc, #72]	; (21f68 <nrfx_ipc_irq_handler+0x64>)
   21f1e:	4630      	mov	r0, r6
}
   21f20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   21f24:	681a      	ldr	r2, [r3, #0]
   21f26:	6899      	ldr	r1, [r3, #8]
   21f28:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   21f2a:	fa95 f4a5 	rbit	r4, r5
   21f2e:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   21f32:	fa08 f304 	lsl.w	r3, r8, r4
   21f36:	2c07      	cmp	r4, #7
   21f38:	ea25 0503 	bic.w	r5, r5, r3
   21f3c:	dd0a      	ble.n	21f54 <nrfx_ipc_irq_handler+0x50>
   21f3e:	4639      	mov	r1, r7
   21f40:	4648      	mov	r0, r9
   21f42:	f240 12e7 	movw	r2, #487	; 0x1e7
   21f46:	f008 fcad 	bl	2a8a4 <printk>
   21f4a:	f240 11e7 	movw	r1, #487	; 0x1e7
   21f4e:	4638      	mov	r0, r7
   21f50:	f008 fe41 	bl	2abd6 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f54:	2200      	movs	r2, #0
   21f56:	4b05      	ldr	r3, [pc, #20]	; (21f6c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   21f58:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21f5a:	511a      	str	r2, [r3, r4]
}
   21f5c:	e7dd      	b.n	21f1a <nrfx_ipc_irq_handler+0x16>
   21f5e:	bf00      	nop
   21f60:	4002a000 	.word	0x4002a000
   21f64:	000308ff 	.word	0x000308ff
   21f68:	2000d0a8 	.word	0x2000d0a8
   21f6c:	4002a100 	.word	0x4002a100
   21f70:	0002e574 	.word	0x0002e574

00021f74 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f74:	6803      	ldr	r3, [r0, #0]
{
   21f76:	b510      	push	{r4, lr}
    switch (port)
   21f78:	095a      	lsrs	r2, r3, #5
   21f7a:	bf0c      	ite	eq
   21f7c:	f04f 32ff 	moveq.w	r2, #4294967295
   21f80:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   21f82:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21f86:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f8a:	07db      	lsls	r3, r3, #31
{
   21f8c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f8e:	d40a      	bmi.n	21fa6 <nrf_gpio_pin_port_decode+0x32>
   21f90:	490e      	ldr	r1, [pc, #56]	; (21fcc <nrf_gpio_pin_port_decode+0x58>)
   21f92:	480f      	ldr	r0, [pc, #60]	; (21fd0 <nrf_gpio_pin_port_decode+0x5c>)
   21f94:	f240 2229 	movw	r2, #553	; 0x229
   21f98:	f008 fc84 	bl	2a8a4 <printk>
   21f9c:	f240 2129 	movw	r1, #553	; 0x229
   21fa0:	480a      	ldr	r0, [pc, #40]	; (21fcc <nrf_gpio_pin_port_decode+0x58>)
   21fa2:	f008 fe18 	bl	2abd6 <assert_post_action>
    uint32_t pin_number = *p_pin;
   21fa6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   21fa8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21fac:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   21fae:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21fb0:	d00a      	beq.n	21fc8 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   21fb2:	4906      	ldr	r1, [pc, #24]	; (21fcc <nrf_gpio_pin_port_decode+0x58>)
   21fb4:	4806      	ldr	r0, [pc, #24]	; (21fd0 <nrf_gpio_pin_port_decode+0x5c>)
   21fb6:	f240 222e 	movw	r2, #558	; 0x22e
   21fba:	f008 fc73 	bl	2a8a4 <printk>
   21fbe:	f240 212e 	movw	r1, #558	; 0x22e
   21fc2:	4802      	ldr	r0, [pc, #8]	; (21fcc <nrf_gpio_pin_port_decode+0x58>)
   21fc4:	f008 fe07 	bl	2abd6 <assert_post_action>
}
   21fc8:	4802      	ldr	r0, [pc, #8]	; (21fd4 <nrf_gpio_pin_port_decode+0x60>)
   21fca:	bd10      	pop	{r4, pc}
   21fcc:	0002ef16 	.word	0x0002ef16
   21fd0:	0002e574 	.word	0x0002e574
   21fd4:	40842500 	.word	0x40842500

00021fd8 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   21fd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21fdc:	4606      	mov	r6, r0
   21fde:	4692      	mov	sl, r2
   21fe0:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   21fe2:	460c      	mov	r4, r1
   21fe4:	b951      	cbnz	r1, 21ffc <nrfx_spim_init+0x24>
   21fe6:	4958      	ldr	r1, [pc, #352]	; (22148 <nrfx_spim_init+0x170>)
   21fe8:	4858      	ldr	r0, [pc, #352]	; (2214c <nrfx_spim_init+0x174>)
   21fea:	f44f 72bf 	mov.w	r2, #382	; 0x17e
   21fee:	f008 fc59 	bl	2a8a4 <printk>
   21ff2:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   21ff6:	4854      	ldr	r0, [pc, #336]	; (22148 <nrfx_spim_init+0x170>)
   21ff8:	f008 fded 	bl	2abd6 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   21ffc:	7931      	ldrb	r1, [r6, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   21ffe:	4d54      	ldr	r5, [pc, #336]	; (22150 <nrfx_spim_init+0x178>)
   22000:	ea4f 1841 	mov.w	r8, r1, lsl #5
   22004:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   22008:	7f0b      	ldrb	r3, [r1, #28]
   2200a:	2b00      	cmp	r3, #0
   2200c:	f040 8099 	bne.w	22142 <nrfx_spim_init+0x16a>
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   22010:	7be2      	ldrb	r2, [r4, #15]
   22012:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   22014:	7920      	ldrb	r0, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   22016:	f362 0300 	bfi	r3, r2, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
   2201a:	f360 0341 	bfi	r3, r0, #1, #1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2201e:	6837      	ldr	r7, [r6, #0]
    p_cb->handler = handler;
   22020:	f845 a008 	str.w	sl, [r5, r8]
    p_cb->p_context = p_context;
   22024:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->ss_active_high = p_config->ss_active_high;
   22028:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
   2202a:	78e3      	ldrb	r3, [r4, #3]
   2202c:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
   2202e:	f8d6 9000 	ldr.w	r9, [r6]
    if (!p_config->skip_gpio_cfg)
   22032:	2a00      	cmp	r2, #0
   22034:	d141      	bne.n	220ba <nrfx_spim_init+0xe2>
        nrf_gpio_pin_write(p_config->sck_pin,
   22036:	7b21      	ldrb	r1, [r4, #12]
   22038:	7820      	ldrb	r0, [r4, #0]
   2203a:	2901      	cmp	r1, #1
   2203c:	bf94      	ite	ls
   2203e:	2100      	movls	r1, #0
   22040:	2101      	movhi	r1, #1
   22042:	f009 fcae 	bl	2b9a2 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   22046:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22048:	a801      	add	r0, sp, #4
   2204a:	9301      	str	r3, [sp, #4]
   2204c:	f7ff ff92 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22050:	2201      	movs	r2, #1
   22052:	9b01      	ldr	r3, [sp, #4]
   22054:	3380      	adds	r3, #128	; 0x80
   22056:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2205a:	7860      	ldrb	r0, [r4, #1]
   2205c:	28ff      	cmp	r0, #255	; 0xff
   2205e:	d00b      	beq.n	22078 <nrfx_spim_init+0xa0>
        nrf_gpio_pin_clear(pin_number);
   22060:	f009 fc6b 	bl	2b93a <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   22064:	7863      	ldrb	r3, [r4, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22066:	a801      	add	r0, sp, #4
   22068:	9301      	str	r3, [sp, #4]
   2206a:	f7ff ff83 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2206e:	2203      	movs	r2, #3
   22070:	9b01      	ldr	r3, [sp, #4]
   22072:	3380      	adds	r3, #128	; 0x80
   22074:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   22078:	78a3      	ldrb	r3, [r4, #2]
   2207a:	2bff      	cmp	r3, #255	; 0xff
   2207c:	d00b      	beq.n	22096 <nrfx_spim_init+0xbe>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2207e:	a801      	add	r0, sp, #4
            nrf_gpio_cfg(p_config->miso_pin,
   22080:	f894 a00e 	ldrb.w	sl, [r4, #14]
   22084:	9301      	str	r3, [sp, #4]
   22086:	f7ff ff75 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2208a:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2208c:	ea4f 028a 	mov.w	r2, sl, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   22090:	3380      	adds	r3, #128	; 0x80
   22092:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22096:	78e0      	ldrb	r0, [r4, #3]
   22098:	28ff      	cmp	r0, #255	; 0xff
   2209a:	d00e      	beq.n	220ba <nrfx_spim_init+0xe2>
                               p_config->ss_active_high ? 0 : 1);
   2209c:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   2209e:	f081 0101 	eor.w	r1, r1, #1
   220a2:	f009 fc7e 	bl	2b9a2 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   220a6:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   220a8:	a801      	add	r0, sp, #4
   220aa:	9301      	str	r3, [sp, #4]
   220ac:	f7ff ff62 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   220b0:	2203      	movs	r2, #3
   220b2:	9b01      	ldr	r3, [sp, #4]
   220b4:	3380      	adds	r3, #128	; 0x80
   220b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   220ba:	7c23      	ldrb	r3, [r4, #16]
   220bc:	b993      	cbnz	r3, 220e4 <nrfx_spim_init+0x10c>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   220be:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   220c0:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   220c2:	2bff      	cmp	r3, #255	; 0xff
   220c4:	bf18      	it	ne
   220c6:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   220c8:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   220ca:	bf08      	it	eq
   220cc:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   220d0:	2bff      	cmp	r3, #255	; 0xff
   220d2:	bf08      	it	eq
   220d4:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   220d8:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   220dc:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   220e0:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   220e4:	68a3      	ldr	r3, [r4, #8]
   220e6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   220ea:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   220ec:	7b22      	ldrb	r2, [r4, #12]
   220ee:	3b00      	subs	r3, #0
   220f0:	bf18      	it	ne
   220f2:	2301      	movne	r3, #1
    switch (spi_mode)
   220f4:	2a02      	cmp	r2, #2
   220f6:	d01e      	beq.n	22136 <nrfx_spim_init+0x15e>
   220f8:	2a03      	cmp	r2, #3
   220fa:	d01f      	beq.n	2213c <nrfx_spim_init+0x164>
   220fc:	2a01      	cmp	r2, #1
   220fe:	d101      	bne.n	22104 <nrfx_spim_init+0x12c>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   22100:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   22104:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   22108:	79a3      	ldrb	r3, [r4, #6]
   2210a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2210e:	2307      	movs	r3, #7
   22110:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   22114:	f855 3008 	ldr.w	r3, [r5, r8]
   22118:	b123      	cbz	r3, 22124 <nrfx_spim_init+0x14c>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2211a:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2211c:	f340 3007 	sbfx	r0, r0, #12, #8
   22120:	f7f9 ffd8 	bl	1c0d4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   22124:	2300      	movs	r3, #0
   22126:	4445      	add	r5, r8
   22128:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2212a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2212c:	4809      	ldr	r0, [pc, #36]	; (22154 <nrfx_spim_init+0x17c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2212e:	772b      	strb	r3, [r5, #28]
}
   22130:	b002      	add	sp, #8
   22132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   22136:	f043 0304 	orr.w	r3, r3, #4
        break;
   2213a:	e7e3      	b.n	22104 <nrfx_spim_init+0x12c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2213c:	f043 0306 	orr.w	r3, r3, #6
        break;
   22140:	e7e0      	b.n	22104 <nrfx_spim_init+0x12c>
        return err_code;
   22142:	4805      	ldr	r0, [pc, #20]	; (22158 <nrfx_spim_init+0x180>)
   22144:	e7f4      	b.n	22130 <nrfx_spim_init+0x158>
   22146:	bf00      	nop
   22148:	00030931 	.word	0x00030931
   2214c:	0002e574 	.word	0x0002e574
   22150:	2000d0b4 	.word	0x2000d0b4
   22154:	0bad0000 	.word	0x0bad0000
   22158:	0bad0005 	.word	0x0bad0005

0002215c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   2215c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2215e:	4c29      	ldr	r4, [pc, #164]	; (22204 <nrfx_spim_uninit+0xa8>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22160:	7903      	ldrb	r3, [r0, #4]
{
   22162:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22164:	015e      	lsls	r6, r3, #5
   22166:	eb04 1343 	add.w	r3, r4, r3, lsl #5
   2216a:	7f1b      	ldrb	r3, [r3, #28]
   2216c:	b953      	cbnz	r3, 22184 <nrfx_spim_uninit+0x28>
   2216e:	4926      	ldr	r1, [pc, #152]	; (22208 <nrfx_spim_uninit+0xac>)
   22170:	4826      	ldr	r0, [pc, #152]	; (2220c <nrfx_spim_uninit+0xb0>)
   22172:	f240 220f 	movw	r2, #527	; 0x20f
   22176:	f008 fb95 	bl	2a8a4 <printk>
   2217a:	f240 210f 	movw	r1, #527	; 0x20f
   2217e:	4822      	ldr	r0, [pc, #136]	; (22208 <nrfx_spim_uninit+0xac>)
   22180:	f008 fd29 	bl	2abd6 <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   22184:	59a3      	ldr	r3, [r4, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   22186:	682d      	ldr	r5, [r5, #0]
    if (p_cb->handler)
   22188:	19a7      	adds	r7, r4, r6
   2218a:	b1b3      	cbz	r3, 221ba <nrfx_spim_uninit+0x5e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2218c:	f345 3007 	sbfx	r0, r5, #12, #8
   22190:	f7f9 ffb0 	bl	1c0f4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   22194:	4b1e      	ldr	r3, [pc, #120]	; (22210 <nrfx_spim_uninit+0xb4>)
   22196:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   2219a:	7f7b      	ldrb	r3, [r7, #29]
   2219c:	b16b      	cbz	r3, 221ba <nrfx_spim_uninit+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2219e:	2301      	movs	r3, #1
   221a0:	2764      	movs	r7, #100	; 0x64
   221a2:	616b      	str	r3, [r5, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   221a4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   221a8:	b923      	cbnz	r3, 221b4 <nrfx_spim_uninit+0x58>
   221aa:	2001      	movs	r0, #1
   221ac:	f009 fb59 	bl	2b862 <nrfx_busy_wait>
   221b0:	3f01      	subs	r7, #1
   221b2:	d1f7      	bne.n	221a4 <nrfx_spim_uninit+0x48>
    p_cb->transfer_in_progress = false;
   221b4:	2200      	movs	r2, #0
   221b6:	19a3      	adds	r3, r4, r6
   221b8:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   221ba:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   221bc:	19a7      	adds	r7, r4, r6
   221be:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
   221c2:	7fbb      	ldrb	r3, [r7, #30]
   221c4:	07db      	lsls	r3, r3, #31
   221c6:	d417      	bmi.n	221f8 <nrfx_spim_uninit+0x9c>
    return p_reg->PSEL.SCK;
   221c8:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   221cc:	f009 fbc1 	bl	2b952 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   221d0:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   221d4:	f009 fbbd 	bl	2b952 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   221d8:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   221dc:	f009 fbb9 	bl	2b952 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   221e0:	7ffb      	ldrb	r3, [r7, #31]
   221e2:	2bff      	cmp	r3, #255	; 0xff
   221e4:	d008      	beq.n	221f8 <nrfx_spim_uninit+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221e6:	a801      	add	r0, sp, #4
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   221e8:	9301      	str	r3, [sp, #4]
   221ea:	f7ff fec3 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221ee:	2202      	movs	r2, #2
   221f0:	9b01      	ldr	r3, [sp, #4]
   221f2:	3380      	adds	r3, #128	; 0x80
   221f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   221f8:	2300      	movs	r3, #0
   221fa:	4434      	add	r4, r6
   221fc:	7723      	strb	r3, [r4, #28]
}
   221fe:	b003      	add	sp, #12
   22200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22202:	bf00      	nop
   22204:	2000d0b4 	.word	0x2000d0b4
   22208:	00030931 	.word	0x00030931
   2220c:	0002e574 	.word	0x0002e574
   22210:	00080152 	.word	0x00080152

00022214 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   22214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22218:	4d61      	ldr	r5, [pc, #388]	; (223a0 <nrfx_spim_xfer+0x18c>)
   2221a:	7903      	ldrb	r3, [r0, #4]
{
   2221c:	4680      	mov	r8, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2221e:	eb05 1943 	add.w	r9, r5, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22222:	015f      	lsls	r7, r3, #5
   22224:	f899 301c 	ldrb.w	r3, [r9, #28]
{
   22228:	460c      	mov	r4, r1
   2222a:	4616      	mov	r6, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2222c:	b953      	cbnz	r3, 22244 <nrfx_spim_xfer+0x30>
   2222e:	495d      	ldr	r1, [pc, #372]	; (223a4 <nrfx_spim_xfer+0x190>)
   22230:	485d      	ldr	r0, [pc, #372]	; (223a8 <nrfx_spim_xfer+0x194>)
   22232:	f240 22de 	movw	r2, #734	; 0x2de
   22236:	f008 fb35 	bl	2a8a4 <printk>
   2223a:	f240 21de 	movw	r1, #734	; 0x2de
   2223e:	4859      	ldr	r0, [pc, #356]	; (223a4 <nrfx_spim_xfer+0x190>)
   22240:	f008 fcc9 	bl	2abd6 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   22244:	6823      	ldr	r3, [r4, #0]
   22246:	b963      	cbnz	r3, 22262 <nrfx_spim_xfer+0x4e>
   22248:	6863      	ldr	r3, [r4, #4]
   2224a:	b153      	cbz	r3, 22262 <nrfx_spim_xfer+0x4e>
   2224c:	4955      	ldr	r1, [pc, #340]	; (223a4 <nrfx_spim_xfer+0x190>)
   2224e:	4856      	ldr	r0, [pc, #344]	; (223a8 <nrfx_spim_xfer+0x194>)
   22250:	f240 22df 	movw	r2, #735	; 0x2df
   22254:	f008 fb26 	bl	2a8a4 <printk>
   22258:	f240 21df 	movw	r1, #735	; 0x2df
   2225c:	4851      	ldr	r0, [pc, #324]	; (223a4 <nrfx_spim_xfer+0x190>)
   2225e:	f008 fcba 	bl	2abd6 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   22262:	68a3      	ldr	r3, [r4, #8]
   22264:	b963      	cbnz	r3, 22280 <nrfx_spim_xfer+0x6c>
   22266:	68e3      	ldr	r3, [r4, #12]
   22268:	b153      	cbz	r3, 22280 <nrfx_spim_xfer+0x6c>
   2226a:	494e      	ldr	r1, [pc, #312]	; (223a4 <nrfx_spim_xfer+0x190>)
   2226c:	484e      	ldr	r0, [pc, #312]	; (223a8 <nrfx_spim_xfer+0x194>)
   2226e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
   22272:	f008 fb17 	bl	2a8a4 <printk>
   22276:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   2227a:	484a      	ldr	r0, [pc, #296]	; (223a4 <nrfx_spim_xfer+0x190>)
   2227c:	f008 fcab 	bl	2abd6 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   22280:	f898 3004 	ldrb.w	r3, [r8, #4]
   22284:	b93b      	cbnz	r3, 22296 <nrfx_spim_xfer+0x82>
   22286:	68e3      	ldr	r3, [r4, #12]
   22288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2228c:	d203      	bcs.n	22296 <nrfx_spim_xfer+0x82>
   2228e:	6863      	ldr	r3, [r4, #4]
   22290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22294:	d30a      	bcc.n	222ac <nrfx_spim_xfer+0x98>
   22296:	4943      	ldr	r1, [pc, #268]	; (223a4 <nrfx_spim_xfer+0x190>)
   22298:	4843      	ldr	r0, [pc, #268]	; (223a8 <nrfx_spim_xfer+0x194>)
   2229a:	f240 22e1 	movw	r2, #737	; 0x2e1
   2229e:	f008 fb01 	bl	2a8a4 <printk>
   222a2:	f240 21e1 	movw	r1, #737	; 0x2e1
   222a6:	483f      	ldr	r0, [pc, #252]	; (223a4 <nrfx_spim_xfer+0x190>)
   222a8:	f008 fc95 	bl	2abd6 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   222ac:	f016 0a08 	ands.w	sl, r6, #8
   222b0:	d00e      	beq.n	222d0 <nrfx_spim_xfer+0xbc>
   222b2:	19eb      	adds	r3, r5, r7
   222b4:	7fdb      	ldrb	r3, [r3, #31]
   222b6:	2bff      	cmp	r3, #255	; 0xff
   222b8:	d00a      	beq.n	222d0 <nrfx_spim_xfer+0xbc>
   222ba:	493a      	ldr	r1, [pc, #232]	; (223a4 <nrfx_spim_xfer+0x190>)
   222bc:	483a      	ldr	r0, [pc, #232]	; (223a8 <nrfx_spim_xfer+0x194>)
   222be:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   222c2:	f008 faef 	bl	2a8a4 <printk>
   222c6:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   222ca:	4836      	ldr	r0, [pc, #216]	; (223a4 <nrfx_spim_xfer+0x190>)
   222cc:	f008 fc83 	bl	2abd6 <assert_post_action>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   222d0:	19eb      	adds	r3, r5, r7
   222d2:	7f5a      	ldrb	r2, [r3, #29]
   222d4:	2a00      	cmp	r2, #0
   222d6:	d160      	bne.n	2239a <nrfx_spim_xfer+0x186>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   222d8:	59ea      	ldr	r2, [r5, r7]
   222da:	b122      	cbz	r2, 222e6 <nrfx_spim_xfer+0xd2>
   222dc:	f016 0f14 	tst.w	r6, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   222e0:	bf04      	itt	eq
   222e2:	2201      	moveq	r2, #1
   222e4:	775a      	strbeq	r2, [r3, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   222e6:	eb05 0c07 	add.w	ip, r5, r7
   222ea:	f10c 0c0c 	add.w	ip, ip, #12
   222ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   222f2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   222f6:	2101      	movs	r1, #1
   222f8:	4648      	mov	r0, r9
   222fa:	f009 fb39 	bl	2b970 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   222fe:	6821      	ldr	r1, [r4, #0]
   22300:	b121      	cbz	r1, 2230c <nrfx_spim_xfer+0xf8>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22302:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   22306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2230a:	d106      	bne.n	2231a <nrfx_spim_xfer+0x106>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2230c:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2230e:	b152      	cbz	r2, 22326 <nrfx_spim_xfer+0x112>
   22310:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   22314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22318:	d005      	beq.n	22326 <nrfx_spim_xfer+0x112>
        p_cb->transfer_in_progress = false;
   2231a:	2300      	movs	r3, #0
   2231c:	443d      	add	r5, r7
        return err_code;
   2231e:	4823      	ldr	r0, [pc, #140]	; (223ac <nrfx_spim_xfer+0x198>)
        p_cb->transfer_in_progress = false;
   22320:	776b      	strb	r3, [r5, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   22322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   22326:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2232a:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2232c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22330:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   22334:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22336:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2233a:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   2233c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22340:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   22344:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   22348:	f016 0201 	ands.w	r2, r6, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2234c:	bf18      	it	ne
   2234e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   22350:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   22354:	f016 0202 	ands.w	r2, r6, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   22358:	bf18      	it	ne
   2235a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   2235c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   22360:	f1ba 0f00 	cmp.w	sl, #0
   22364:	d101      	bne.n	2236a <nrfx_spim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22366:	2201      	movs	r2, #1
   22368:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   2236a:	59ea      	ldr	r2, [r5, r7]
   2236c:	b962      	cbnz	r2, 22388 <nrfx_spim_xfer+0x174>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2236e:	f1ba 0f00 	cmp.w	sl, #0
   22372:	d103      	bne.n	2237c <nrfx_spim_xfer+0x168>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22374:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22378:	2a00      	cmp	r2, #0
   2237a:	d0fb      	beq.n	22374 <nrfx_spim_xfer+0x160>
        set_ss_pin_state(p_cb, false);
   2237c:	2100      	movs	r1, #0
   2237e:	4648      	mov	r0, r9
   22380:	f009 faf6 	bl	2b970 <set_ss_pin_state>
    return err_code;
   22384:	480a      	ldr	r0, [pc, #40]	; (223b0 <nrfx_spim_xfer+0x19c>)
}
   22386:	e7cc      	b.n	22322 <nrfx_spim_xfer+0x10e>
    if (!enable)
   22388:	2240      	movs	r2, #64	; 0x40
   2238a:	f016 0f04 	tst.w	r6, #4
    p_reg->INTENCLR = mask;
   2238e:	bf14      	ite	ne
   22390:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   22394:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   22398:	e7f4      	b.n	22384 <nrfx_spim_xfer+0x170>
        return err_code;
   2239a:	4806      	ldr	r0, [pc, #24]	; (223b4 <nrfx_spim_xfer+0x1a0>)
   2239c:	e7c1      	b.n	22322 <nrfx_spim_xfer+0x10e>
   2239e:	bf00      	nop
   223a0:	2000d0b4 	.word	0x2000d0b4
   223a4:	00030931 	.word	0x00030931
   223a8:	0002e574 	.word	0x0002e574
   223ac:	0bad000a 	.word	0x0bad000a
   223b0:	0bad0000 	.word	0x0bad0000
   223b4:	0bad000b 	.word	0x0bad000b

000223b8 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223b8:	4b12      	ldr	r3, [pc, #72]	; (22404 <nrfx_spim_3_irq_handler+0x4c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   223ba:	b510      	push	{r4, lr}
   223bc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   223c0:	b1fa      	cbz	r2, 22402 <nrfx_spim_3_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223c2:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   223c4:	4c10      	ldr	r4, [pc, #64]	; (22408 <nrfx_spim_3_irq_handler+0x50>)
   223c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   223ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   223ce:	6823      	ldr	r3, [r4, #0]
   223d0:	b953      	cbnz	r3, 223e8 <nrfx_spim_3_irq_handler+0x30>
   223d2:	490e      	ldr	r1, [pc, #56]	; (2240c <nrfx_spim_3_irq_handler+0x54>)
   223d4:	480e      	ldr	r0, [pc, #56]	; (22410 <nrfx_spim_3_irq_handler+0x58>)
   223d6:	f240 323b 	movw	r2, #827	; 0x33b
   223da:	f008 fa63 	bl	2a8a4 <printk>
   223de:	f240 313b 	movw	r1, #827	; 0x33b
   223e2:	480a      	ldr	r0, [pc, #40]	; (2240c <nrfx_spim_3_irq_handler+0x54>)
   223e4:	f008 fbf7 	bl	2abd6 <assert_post_action>
    set_ss_pin_state(p_cb, false);
   223e8:	2100      	movs	r1, #0
   223ea:	4807      	ldr	r0, [pc, #28]	; (22408 <nrfx_spim_3_irq_handler+0x50>)
   223ec:	f009 fac0 	bl	2b970 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   223f0:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   223f2:	4808      	ldr	r0, [pc, #32]	; (22414 <nrfx_spim_3_irq_handler+0x5c>)
    p_cb->transfer_in_progress = false;
   223f4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   223f6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   223f8:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   223fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22400:	4718      	bx	r3
}
   22402:	bd10      	pop	{r4, pc}
   22404:	4000b000 	.word	0x4000b000
   22408:	2000d0b4 	.word	0x2000d0b4
   2240c:	00030931 	.word	0x00030931
   22410:	0002e574 	.word	0x0002e574
   22414:	2000d0bc 	.word	0x2000d0bc

00022418 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22418:	6803      	ldr	r3, [r0, #0]
{
   2241a:	b510      	push	{r4, lr}
    switch (port)
   2241c:	095a      	lsrs	r2, r3, #5
   2241e:	bf0c      	ite	eq
   22420:	f04f 32ff 	moveq.w	r2, #4294967295
   22424:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   22426:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2242a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2242e:	07db      	lsls	r3, r3, #31
{
   22430:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22432:	d40a      	bmi.n	2244a <nrf_gpio_pin_port_decode+0x32>
   22434:	490e      	ldr	r1, [pc, #56]	; (22470 <nrf_gpio_pin_port_decode+0x58>)
   22436:	480f      	ldr	r0, [pc, #60]	; (22474 <nrf_gpio_pin_port_decode+0x5c>)
   22438:	f240 2229 	movw	r2, #553	; 0x229
   2243c:	f008 fa32 	bl	2a8a4 <printk>
   22440:	f240 2129 	movw	r1, #553	; 0x229
   22444:	480a      	ldr	r0, [pc, #40]	; (22470 <nrf_gpio_pin_port_decode+0x58>)
   22446:	f008 fbc6 	bl	2abd6 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2244a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2244c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22450:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22452:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22454:	d00a      	beq.n	2246c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   22456:	4906      	ldr	r1, [pc, #24]	; (22470 <nrf_gpio_pin_port_decode+0x58>)
   22458:	4806      	ldr	r0, [pc, #24]	; (22474 <nrf_gpio_pin_port_decode+0x5c>)
   2245a:	f240 222e 	movw	r2, #558	; 0x22e
   2245e:	f008 fa21 	bl	2a8a4 <printk>
   22462:	f240 212e 	movw	r1, #558	; 0x22e
   22466:	4802      	ldr	r0, [pc, #8]	; (22470 <nrf_gpio_pin_port_decode+0x58>)
   22468:	f008 fbb5 	bl	2abd6 <assert_post_action>
}
   2246c:	4802      	ldr	r0, [pc, #8]	; (22478 <nrf_gpio_pin_port_decode+0x60>)
   2246e:	bd10      	pop	{r4, pc}
   22470:	0002ef16 	.word	0x0002ef16
   22474:	0002e574 	.word	0x0002e574
   22478:	40842500 	.word	0x40842500

0002247c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2247c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   22480:	4607      	mov	r7, r0
   22482:	4690      	mov	r8, r2
   22484:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   22486:	460c      	mov	r4, r1
   22488:	b951      	cbnz	r1, 224a0 <nrfx_twim_init+0x24>
   2248a:	492f      	ldr	r1, [pc, #188]	; (22548 <nrfx_twim_init+0xcc>)
   2248c:	482f      	ldr	r0, [pc, #188]	; (2254c <nrfx_twim_init+0xd0>)
   2248e:	f240 1215 	movw	r2, #277	; 0x115
   22492:	f008 fa07 	bl	2a8a4 <printk>
   22496:	f240 1115 	movw	r1, #277	; 0x115
   2249a:	482b      	ldr	r0, [pc, #172]	; (22548 <nrfx_twim_init+0xcc>)
   2249c:	f008 fb9b 	bl	2abd6 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   224a0:	f04f 0c34 	mov.w	ip, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   224a4:	793e      	ldrb	r6, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   224a6:	4d2a      	ldr	r5, [pc, #168]	; (22550 <nrfx_twim_init+0xd4>)
   224a8:	fb0c fc06 	mul.w	ip, ip, r6
   224ac:	eb05 010c 	add.w	r1, r5, ip
   224b0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   224b4:	2800      	cmp	r0, #0
   224b6:	d144      	bne.n	22542 <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   224b8:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   224ba:	f8d7 a000 	ldr.w	sl, [r7]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   224be:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   224c2:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   224c4:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   224c6:	f845 800c 	str.w	r8, [r5, ip]
    p_cb->p_context       = p_context;
   224ca:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   224ce:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   224d2:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   224d6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   224da:	b1eb      	cbz	r3, 22518 <nrfx_twim_init+0x9c>
   224dc:	7be3      	ldrb	r3, [r4, #15]
   224de:	b92b      	cbnz	r3, 224ec <nrfx_twim_init+0x70>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   224e0:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   224e4:	f8ca 2508 	str.w	r2, [sl, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   224e8:	f8ca 350c 	str.w	r3, [sl, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   224ec:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   224ee:	f8ca 3524 	str.w	r3, [sl, #1316]	; 0x524

    if (p_cb->handler)
   224f2:	2334      	movs	r3, #52	; 0x34
   224f4:	4373      	muls	r3, r6
   224f6:	58eb      	ldr	r3, [r5, r3]
   224f8:	b123      	cbz	r3, 22504 <nrfx_twim_init+0x88>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   224fa:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   224fc:	f340 3007 	sbfx	r0, r0, #12, #8
   22500:	f7f9 fde8 	bl	1c0d4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22504:	2334      	movs	r3, #52	; 0x34
   22506:	fb03 5506 	mla	r5, r3, r6, r5
   2250a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2250c:	4811      	ldr	r0, [pc, #68]	; (22554 <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2250e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   22512:	b002      	add	sp, #8
   22514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   22518:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2251a:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   2251c:	f240 680c 	movw	r8, #1548	; 0x60c
   22520:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22522:	f7ff ff79 	bl	22418 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22526:	9b01      	ldr	r3, [sp, #4]
   22528:	3380      	adds	r3, #128	; 0x80
   2252a:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   2252e:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22530:	a801      	add	r0, sp, #4
   22532:	9301      	str	r3, [sp, #4]
   22534:	f7ff ff70 	bl	22418 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22538:	9b01      	ldr	r3, [sp, #4]
   2253a:	3380      	adds	r3, #128	; 0x80
   2253c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22540:	e7cc      	b.n	224dc <nrfx_twim_init+0x60>
        return err_code;
   22542:	4805      	ldr	r0, [pc, #20]	; (22558 <nrfx_twim_init+0xdc>)
   22544:	e7e5      	b.n	22512 <nrfx_twim_init+0x96>
   22546:	bf00      	nop
   22548:	0003096d 	.word	0x0003096d
   2254c:	0002e574 	.word	0x0002e574
   22550:	2000d0d4 	.word	0x2000d0d4
   22554:	0bad0000 	.word	0x0bad0000
   22558:	0bad0005 	.word	0x0bad0005

0002255c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2255c:	2234      	movs	r2, #52	; 0x34
{
   2255e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   22560:	4d0f      	ldr	r5, [pc, #60]	; (225a0 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22562:	7904      	ldrb	r4, [r0, #4]
{
   22564:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   22566:	fb02 5204 	mla	r2, r2, r4, r5
   2256a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2256e:	2a01      	cmp	r2, #1
   22570:	d00a      	beq.n	22588 <nrfx_twim_enable+0x2c>
   22572:	490c      	ldr	r1, [pc, #48]	; (225a4 <nrfx_twim_enable+0x48>)
   22574:	480c      	ldr	r0, [pc, #48]	; (225a8 <nrfx_twim_enable+0x4c>)
   22576:	f240 1279 	movw	r2, #377	; 0x179
   2257a:	f008 f993 	bl	2a8a4 <printk>
   2257e:	f240 1179 	movw	r1, #377	; 0x179
   22582:	4808      	ldr	r0, [pc, #32]	; (225a4 <nrfx_twim_enable+0x48>)
   22584:	f008 fb27 	bl	2abd6 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22588:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   2258a:	6833      	ldr	r3, [r6, #0]
   2258c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22590:	2334      	movs	r3, #52	; 0x34
   22592:	fb03 5404 	mla	r4, r3, r4, r5
   22596:	2302      	movs	r3, #2
   22598:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2259c:	bd70      	pop	{r4, r5, r6, pc}
   2259e:	bf00      	nop
   225a0:	2000d0d4 	.word	0x2000d0d4
   225a4:	0003096d 	.word	0x0003096d
   225a8:	0002e574 	.word	0x0002e574

000225ac <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   225ac:	2234      	movs	r2, #52	; 0x34
{
   225ae:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   225b0:	4d14      	ldr	r5, [pc, #80]	; (22604 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   225b2:	7904      	ldrb	r4, [r0, #4]
{
   225b4:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   225b6:	fb02 5204 	mla	r2, r2, r4, r5
   225ba:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   225be:	b952      	cbnz	r2, 225d6 <nrfx_twim_disable+0x2a>
   225c0:	4911      	ldr	r1, [pc, #68]	; (22608 <nrfx_twim_disable+0x5c>)
   225c2:	4812      	ldr	r0, [pc, #72]	; (2260c <nrfx_twim_disable+0x60>)
   225c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
   225c8:	f008 f96c 	bl	2a8a4 <printk>
   225cc:	f44f 71c2 	mov.w	r1, #388	; 0x184
   225d0:	480d      	ldr	r0, [pc, #52]	; (22608 <nrfx_twim_disable+0x5c>)
   225d2:	f008 fb00 	bl	2abd6 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   225d6:	2334      	movs	r3, #52	; 0x34
   225d8:	2100      	movs	r1, #0
   225da:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   225de:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
   225e0:	480b      	ldr	r0, [pc, #44]	; (22610 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   225e2:	6099      	str	r1, [r3, #8]
   225e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   225e8:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   225ec:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   225f0:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   225f4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   225f8:	2201      	movs	r2, #1
    p_cb->busy = false;
   225fa:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   225fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   22602:	bd70      	pop	{r4, r5, r6, pc}
   22604:	2000d0d4 	.word	0x2000d0d4
   22608:	0003096d 	.word	0x0003096d
   2260c:	0002e574 	.word	0x0002e574
   22610:	019c0202 	.word	0x019c0202

00022614 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   22614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   22618:	7903      	ldrb	r3, [r0, #4]
{
   2261a:	4680      	mov	r8, r0
   2261c:	460d      	mov	r5, r1
   2261e:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   22620:	b93b      	cbnz	r3, 22632 <nrfx_twim_xfer+0x1e>
   22622:	684b      	ldr	r3, [r1, #4]
   22624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22628:	d203      	bcs.n	22632 <nrfx_twim_xfer+0x1e>
   2262a:	688b      	ldr	r3, [r1, #8]
   2262c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22630:	d30a      	bcc.n	22648 <nrfx_twim_xfer+0x34>
   22632:	49bc      	ldr	r1, [pc, #752]	; (22924 <nrfx_twim_xfer+0x310>)
   22634:	48bc      	ldr	r0, [pc, #752]	; (22928 <nrfx_twim_xfer+0x314>)
   22636:	f240 2299 	movw	r2, #665	; 0x299
   2263a:	f008 f933 	bl	2a8a4 <printk>
   2263e:	f240 2199 	movw	r1, #665	; 0x299
   22642:	48b8      	ldr	r0, [pc, #736]	; (22924 <nrfx_twim_xfer+0x310>)
   22644:	f008 fac7 	bl	2abd6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   22648:	2434      	movs	r4, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2264a:	f898 9004 	ldrb.w	r9, [r8, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2264e:	4eb7      	ldr	r6, [pc, #732]	; (2292c <nrfx_twim_xfer+0x318>)
   22650:	fb04 f409 	mul.w	r4, r4, r9
   22654:	5933      	ldr	r3, [r6, r4]
   22656:	b9fb      	cbnz	r3, 22698 <nrfx_twim_xfer+0x84>
   22658:	782b      	ldrb	r3, [r5, #0]
   2265a:	2b02      	cmp	r3, #2
   2265c:	d00e      	beq.n	2267c <nrfx_twim_xfer+0x68>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2265e:	782b      	ldrb	r3, [r5, #0]
   22660:	2b03      	cmp	r3, #3
   22662:	d119      	bne.n	22698 <nrfx_twim_xfer+0x84>
   22664:	f240 22a2 	movw	r2, #674	; 0x2a2
   22668:	49ae      	ldr	r1, [pc, #696]	; (22924 <nrfx_twim_xfer+0x310>)
   2266a:	48af      	ldr	r0, [pc, #700]	; (22928 <nrfx_twim_xfer+0x314>)
   2266c:	f008 f91a 	bl	2a8a4 <printk>
   22670:	f240 21a2 	movw	r1, #674	; 0x2a2
   22674:	48ab      	ldr	r0, [pc, #684]	; (22924 <nrfx_twim_xfer+0x310>)
   22676:	f008 faae 	bl	2abd6 <assert_post_action>
   2267a:	e00d      	b.n	22698 <nrfx_twim_xfer+0x84>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2267c:	f240 22a1 	movw	r2, #673	; 0x2a1
   22680:	49a8      	ldr	r1, [pc, #672]	; (22924 <nrfx_twim_xfer+0x310>)
   22682:	48a9      	ldr	r0, [pc, #676]	; (22928 <nrfx_twim_xfer+0x314>)
   22684:	f008 f90e 	bl	2a8a4 <printk>
   22688:	f240 21a1 	movw	r1, #673	; 0x2a1
   2268c:	48a5      	ldr	r0, [pc, #660]	; (22924 <nrfx_twim_xfer+0x310>)
   2268e:	f008 faa2 	bl	2abd6 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   22692:	5933      	ldr	r3, [r6, r4]
   22694:	2b00      	cmp	r3, #0
   22696:	d0e2      	beq.n	2265e <nrfx_twim_xfer+0x4a>
    p_cb->error = false;
   22698:	2334      	movs	r3, #52	; 0x34
   2269a:	2200      	movs	r2, #0
   2269c:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   226a0:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->error = false;
   226a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   226a8:	686b      	ldr	r3, [r5, #4]
   226aa:	b153      	cbz	r3, 226c2 <nrfx_twim_xfer+0xae>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   226ac:	68eb      	ldr	r3, [r5, #12]
   226ae:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   226b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   226b6:	d004      	beq.n	226c2 <nrfx_twim_xfer+0xae>
        return err_code;
   226b8:	f8df 8278 	ldr.w	r8, [pc, #632]	; 22934 <nrfx_twim_xfer+0x320>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   226bc:	4640      	mov	r0, r8
   226be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   226c2:	f04f 0c34 	mov.w	ip, #52	; 0x34
   226c6:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
   226ca:	4b99      	ldr	r3, [pc, #612]	; (22930 <nrfx_twim_xfer+0x31c>)
   226cc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   226d0:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   226d4:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   226d8:	b133      	cbz	r3, 226e8 <nrfx_twim_xfer+0xd4>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   226da:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   226de:	f8df 8258 	ldr.w	r8, [pc, #600]	; 22938 <nrfx_twim_xfer+0x324>
    p_reg->INTENSET = mask;
   226e2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   226e6:	e7e9      	b.n	226bc <nrfx_twim_xfer+0xa8>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   226e8:	f017 0f14 	tst.w	r7, #20
   226ec:	bf0c      	ite	eq
   226ee:	2301      	moveq	r3, #1
   226f0:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   226f2:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   226f4:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   226f8:	f10c 0e0c 	add.w	lr, ip, #12
   226fc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   22700:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   22704:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
   22708:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   2270c:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   22710:	f3c7 1300 	ubfx	r3, r7, #4, #1
   22714:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   22718:	786b      	ldrb	r3, [r5, #1]
   2271a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2271e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   22722:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22726:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2272a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2272e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   22732:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   22736:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2273a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2273e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   22742:	bf18      	it	ne
   22744:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   22746:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2274a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2274e:	bf18      	it	ne
   22750:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   22752:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   22756:	782b      	ldrb	r3, [r5, #0]
   22758:	2b03      	cmp	r3, #3
   2275a:	f200 80df 	bhi.w	2291c <nrfx_twim_xfer+0x308>
   2275e:	e8df f003 	tbb	[pc, r3]
   22762:	caae      	.short	0xcaae
   22764:	0293      	.short	0x0293
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   22766:	06f9      	lsls	r1, r7, #27
   22768:	d50a      	bpl.n	22780 <nrfx_twim_xfer+0x16c>
   2276a:	496e      	ldr	r1, [pc, #440]	; (22924 <nrfx_twim_xfer+0x310>)
   2276c:	486e      	ldr	r0, [pc, #440]	; (22928 <nrfx_twim_xfer+0x314>)
   2276e:	f240 12dd 	movw	r2, #477	; 0x1dd
   22772:	f008 f897 	bl	2a8a4 <printk>
   22776:	f240 11dd 	movw	r1, #477	; 0x1dd
   2277a:	486a      	ldr	r0, [pc, #424]	; (22924 <nrfx_twim_xfer+0x310>)
   2277c:	f008 fa2b 	bl	2abd6 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   22780:	073a      	lsls	r2, r7, #28
   22782:	d50a      	bpl.n	2279a <nrfx_twim_xfer+0x186>
   22784:	4967      	ldr	r1, [pc, #412]	; (22924 <nrfx_twim_xfer+0x310>)
   22786:	4868      	ldr	r0, [pc, #416]	; (22928 <nrfx_twim_xfer+0x314>)
   22788:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   2278c:	f008 f88a 	bl	2a8a4 <printk>
   22790:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   22794:	4863      	ldr	r0, [pc, #396]	; (22924 <nrfx_twim_xfer+0x310>)
   22796:	f008 fa1e 	bl	2abd6 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2279a:	077b      	lsls	r3, r7, #29
   2279c:	d50a      	bpl.n	227b4 <nrfx_twim_xfer+0x1a0>
   2279e:	4961      	ldr	r1, [pc, #388]	; (22924 <nrfx_twim_xfer+0x310>)
   227a0:	4861      	ldr	r0, [pc, #388]	; (22928 <nrfx_twim_xfer+0x314>)
   227a2:	f240 12df 	movw	r2, #479	; 0x1df
   227a6:	f008 f87d 	bl	2a8a4 <printk>
   227aa:	f240 11df 	movw	r1, #479	; 0x1df
   227ae:	485d      	ldr	r0, [pc, #372]	; (22924 <nrfx_twim_xfer+0x310>)
   227b0:	f008 fa11 	bl	2abd6 <assert_post_action>
   227b4:	692a      	ldr	r2, [r5, #16]
   227b6:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   227ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   227be:	f47f af7b 	bne.w	226b8 <nrfx_twim_xfer+0xa4>
    p_reg->SHORTS = mask;
   227c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   227c6:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   227c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   227cc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   227ce:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   227d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227d6:	2300      	movs	r3, #0
   227d8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   227dc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   227e0:	2101      	movs	r1, #1
   227e2:	6221      	str	r1, [r4, #32]
   227e4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227e6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   227ea:	2900      	cmp	r1, #0
   227ec:	d0fb      	beq.n	227e6 <nrfx_twim_xfer+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227ee:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   227f2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   227f6:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   227f8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   227fc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22800:	2334      	movs	r3, #52	; 0x34
   22802:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22806:	fb03 6309 	mla	r3, r3, r9, r6
   2280a:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2280c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   2280e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 2293c <nrfx_twim_xfer+0x328>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   22812:	0738      	lsls	r0, r7, #28
   22814:	d407      	bmi.n	22826 <nrfx_twim_xfer+0x212>
   22816:	782a      	ldrb	r2, [r5, #0]
   22818:	2a03      	cmp	r2, #3
   2281a:	d004      	beq.n	22826 <nrfx_twim_xfer+0x212>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2281c:	2201      	movs	r2, #1
   2281e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   22820:	686b      	ldr	r3, [r5, #4]
   22822:	b903      	cbnz	r3, 22826 <nrfx_twim_xfer+0x212>
   22824:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   22826:	2334      	movs	r3, #52	; 0x34
   22828:	fb03 f309 	mul.w	r3, r3, r9
   2282c:	18f2      	adds	r2, r6, r3
   2282e:	58f3      	ldr	r3, [r6, r3]
   22830:	2b00      	cmp	r3, #0
   22832:	f040 8087 	bne.w	22944 <nrfx_twim_xfer+0x330>
                transmission_finished = true;
   22836:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22838:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   2283c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22840:	2900      	cmp	r1, #0
   22842:	f040 8097 	bne.w	22974 <nrfx_twim_xfer+0x360>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   22846:	3a00      	subs	r2, #0
   22848:	bf18      	it	ne
   2284a:	2201      	movne	r2, #1
   2284c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22850:	2900      	cmp	r1, #0
   22852:	f000 8095 	beq.w	22980 <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22856:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2285a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2285e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   22862:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   22866:	b110      	cbz	r0, 2286e <nrfx_twim_xfer+0x25a>
   22868:	f411 7f00 	tst.w	r1, #512	; 0x200
   2286c:	d104      	bne.n	22878 <nrfx_twim_xfer+0x264>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2286e:	6225      	str	r5, [r4, #32]
   22870:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22872:	2800      	cmp	r0, #0
   22874:	d0e0      	beq.n	22838 <nrfx_twim_xfer+0x224>
                    transmission_finished = false;
   22876:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22878:	05c9      	lsls	r1, r1, #23
   2287a:	f140 8081 	bpl.w	22980 <nrfx_twim_xfer+0x36c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2287e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22882:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   22886:	e7d7      	b.n	22838 <nrfx_twim_xfer+0x224>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22888:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2288a:	68ea      	ldr	r2, [r5, #12]
   2288c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22890:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22894:	692b      	ldr	r3, [r5, #16]
   22896:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2289a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2289e:	f47f af0b 	bne.w	226b8 <nrfx_twim_xfer+0xa4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   228a2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   228a4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   228a8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   228ac:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   228b0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   228b4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   228b6:	2202      	movs	r2, #2
   228b8:	fb03 6309 	mla	r3, r3, r9, r6
   228bc:	e012      	b.n	228e4 <nrfx_twim_xfer+0x2d0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   228be:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   228c0:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   228c2:	f017 0f20 	tst.w	r7, #32
   228c6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   228ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   228ce:	f04f 0334 	mov.w	r3, #52	; 0x34
   228d2:	d00b      	beq.n	228ec <nrfx_twim_xfer+0x2d8>
    p_reg->SHORTS = mask;
   228d4:	f44f 7280 	mov.w	r2, #256	; 0x100
   228d8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   228dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   228e0:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   228e4:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228e6:	2301      	movs	r3, #1
   228e8:	6223      	str	r3, [r4, #32]
   228ea:	e78f      	b.n	2280c <nrfx_twim_xfer+0x1f8>
    p_reg->SHORTS = mask;
   228ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   228f0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   228f4:	e7df      	b.n	228b6 <nrfx_twim_xfer+0x2a2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   228f6:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   228f8:	68ea      	ldr	r2, [r5, #12]
   228fa:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   228fe:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   22906:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2290a:	2334      	movs	r3, #52	; 0x34
   2290c:	2202      	movs	r2, #2
   2290e:	fb03 6309 	mla	r3, r3, r9, r6
   22912:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22914:	2301      	movs	r3, #1
   22916:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   22918:	2300      	movs	r3, #0
   2291a:	e778      	b.n	2280e <nrfx_twim_xfer+0x1fa>
    switch (p_xfer_desc->type)
   2291c:	2308      	movs	r3, #8
   2291e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 22940 <nrfx_twim_xfer+0x32c>
   22922:	e776      	b.n	22812 <nrfx_twim_xfer+0x1fe>
   22924:	0003096d 	.word	0x0003096d
   22928:	0002e574 	.word	0x0002e574
   2292c:	2000d0d4 	.word	0x2000d0d4
   22930:	019c0202 	.word	0x019c0202
   22934:	0bad000a 	.word	0x0bad000a
   22938:	0bad000b 	.word	0x0bad000b
   2293c:	0bad0000 	.word	0x0bad0000
   22940:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   22944:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   22946:	bf44      	itt	mi
   22948:	2300      	movmi	r3, #0
   2294a:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2294c:	067b      	lsls	r3, r7, #25
   2294e:	d406      	bmi.n	2295e <nrfx_twim_xfer+0x34a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   22950:	2334      	movs	r3, #52	; 0x34
   22952:	fb03 6309 	mla	r3, r3, r9, r6
   22956:	689a      	ldr	r2, [r3, #8]
   22958:	f042 0202 	orr.w	r2, r2, #2
   2295c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2295e:	2334      	movs	r3, #52	; 0x34
   22960:	fb03 6609 	mla	r6, r3, r9, r6
   22964:	68b3      	ldr	r3, [r6, #8]
   22966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2296a:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2296c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   2296e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   22972:	e6a3      	b.n	226bc <nrfx_twim_xfer+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22974:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   22978:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   2297c:	2201      	movs	r2, #1
   2297e:	e765      	b.n	2284c <nrfx_twim_xfer+0x238>
        } while (!transmission_finished);
   22980:	2a00      	cmp	r2, #0
   22982:	f43f af59 	beq.w	22838 <nrfx_twim_xfer+0x224>
        p_cb->busy = false;
   22986:	2134      	movs	r1, #52	; 0x34
   22988:	2000      	movs	r0, #0
   2298a:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
   2298e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22992:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   22996:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   2299a:	b18b      	cbz	r3, 229c0 <nrfx_twim_xfer+0x3ac>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2299c:	4a0f      	ldr	r2, [pc, #60]	; (229dc <nrfx_twim_xfer+0x3c8>)
   2299e:	4910      	ldr	r1, [pc, #64]	; (229e0 <nrfx_twim_xfer+0x3cc>)
   229a0:	f013 0f01 	tst.w	r3, #1
   229a4:	bf14      	ite	ne
   229a6:	4690      	movne	r8, r2
   229a8:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   229aa:	3201      	adds	r2, #1
   229ac:	f013 0f02 	tst.w	r3, #2
   229b0:	bf18      	it	ne
   229b2:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   229b4:	f013 0f04 	tst.w	r3, #4
   229b8:	4b0a      	ldr	r3, [pc, #40]	; (229e4 <nrfx_twim_xfer+0x3d0>)
   229ba:	bf18      	it	ne
   229bc:	4698      	movne	r8, r3
   229be:	e67d      	b.n	226bc <nrfx_twim_xfer+0xa8>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   229c0:	067b      	lsls	r3, r7, #25
   229c2:	f53f ae7b 	bmi.w	226bc <nrfx_twim_xfer+0xa8>
                !xfer_completeness_check(p_twim, p_cb))
   229c6:	4620      	mov	r0, r4
   229c8:	fb09 6101 	mla	r1, r9, r1, r6
   229cc:	f008 fff9 	bl	2b9c2 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   229d0:	4b03      	ldr	r3, [pc, #12]	; (229e0 <nrfx_twim_xfer+0x3cc>)
   229d2:	2800      	cmp	r0, #0
   229d4:	bf08      	it	eq
   229d6:	4698      	moveq	r8, r3
   229d8:	e670      	b.n	226bc <nrfx_twim_xfer+0xa8>
   229da:	bf00      	nop
   229dc:	0bae0000 	.word	0x0bae0000
   229e0:	0bad0001 	.word	0x0bad0001
   229e4:	0bae0002 	.word	0x0bae0002

000229e8 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   229e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   229ea:	4c62      	ldr	r4, [pc, #392]	; (22b74 <nrfx_twim_2_irq_handler+0x18c>)
{
   229ec:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   229ee:	6823      	ldr	r3, [r4, #0]
   229f0:	b953      	cbnz	r3, 22a08 <nrfx_twim_2_irq_handler+0x20>
   229f2:	4961      	ldr	r1, [pc, #388]	; (22b78 <nrfx_twim_2_irq_handler+0x190>)
   229f4:	4861      	ldr	r0, [pc, #388]	; (22b7c <nrfx_twim_2_irq_handler+0x194>)
   229f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   229fa:	f007 ff53 	bl	2a8a4 <printk>
   229fe:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   22a02:	485d      	ldr	r0, [pc, #372]	; (22b78 <nrfx_twim_2_irq_handler+0x190>)
   22a04:	f008 f8e7 	bl	2abd6 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a08:	4b5d      	ldr	r3, [pc, #372]	; (22b80 <nrfx_twim_2_irq_handler+0x198>)
   22a0a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   22a0e:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22a10:	b1fa      	cbz	r2, 22a52 <nrfx_twim_2_irq_handler+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a12:	2200      	movs	r2, #0
   22a14:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   22a18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a1c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22a20:	b9ba      	cbnz	r2, 22a52 <nrfx_twim_2_irq_handler+0x6a>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   22a22:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22a24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22a28:	2202      	movs	r2, #2
   22a2a:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22a2c:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   22a2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a32:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   22a36:	b11a      	cbz	r2, 22a40 <nrfx_twim_2_irq_handler+0x58>
    return p_reg->SHORTS;
   22a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   22a3c:	059e      	lsls	r6, r3, #22
   22a3e:	d403      	bmi.n	22a48 <nrfx_twim_2_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a40:	2201      	movs	r2, #1
   22a42:	4b4f      	ldr	r3, [pc, #316]	; (22b80 <nrfx_twim_2_irq_handler+0x198>)
   22a44:	621a      	str	r2, [r3, #32]
   22a46:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   22a48:	2301      	movs	r3, #1
   22a4a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   22a4e:	b007      	add	sp, #28
   22a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a52:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22a56:	2b00      	cmp	r3, #0
   22a58:	d054      	beq.n	22b04 <nrfx_twim_2_irq_handler+0x11c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a5a:	2300      	movs	r3, #0
   22a5c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   22a60:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   22a64:	6a23      	ldr	r3, [r4, #32]
   22a66:	065d      	lsls	r5, r3, #25
   22a68:	d40a      	bmi.n	22a80 <nrfx_twim_2_irq_handler+0x98>
   22a6a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22a6e:	b93b      	cbnz	r3, 22a80 <nrfx_twim_2_irq_handler+0x98>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   22a70:	4940      	ldr	r1, [pc, #256]	; (22b74 <nrfx_twim_2_irq_handler+0x18c>)
   22a72:	4843      	ldr	r0, [pc, #268]	; (22b80 <nrfx_twim_2_irq_handler+0x198>)
   22a74:	f008 ffa5 	bl	2b9c2 <xfer_completeness_check>
   22a78:	f080 0001 	eor.w	r0, r0, #1
   22a7c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   22a80:	6a23      	ldr	r3, [r4, #32]
   22a82:	f013 0704 	ands.w	r7, r3, #4
   22a86:	d122      	bne.n	22ace <nrfx_twim_2_irq_handler+0xe6>
            event.xfer_desc = p_cb->xfer_desc;
   22a88:	4e3e      	ldr	r6, [pc, #248]	; (22b84 <nrfx_twim_2_irq_handler+0x19c>)
   22a8a:	ad01      	add	r5, sp, #4
   22a8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22a90:	6833      	ldr	r3, [r6, #0]
   22a92:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   22a96:	602b      	str	r3, [r5, #0]
   22a98:	4b39      	ldr	r3, [pc, #228]	; (22b80 <nrfx_twim_2_irq_handler+0x198>)
   22a9a:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   22a9e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   22aa2:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   22aa6:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   22aaa:	f1bc 0f00 	cmp.w	ip, #0
   22aae:	d002      	beq.n	22ab6 <nrfx_twim_2_irq_handler+0xce>
   22ab0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   22ab4:	b15a      	cbz	r2, 22ace <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
   22ab6:	2200      	movs	r2, #0
   22ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   22abc:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22abe:	4a32      	ldr	r2, [pc, #200]	; (22b88 <nrfx_twim_2_irq_handler+0x1a0>)
   22ac0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   22ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22ac8:	4b30      	ldr	r3, [pc, #192]	; (22b8c <nrfx_twim_2_irq_handler+0x1a4>)
   22aca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   22ace:	4a2c      	ldr	r2, [pc, #176]	; (22b80 <nrfx_twim_2_irq_handler+0x198>)
   22ad0:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   22ad4:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   22ad6:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   22ada:	d53c      	bpl.n	22b56 <nrfx_twim_2_irq_handler+0x16e>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   22adc:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   22ade:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   22ae2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22ae6:	b90b      	cbnz	r3, 22aec <nrfx_twim_2_irq_handler+0x104>
        p_cb->busy = false;
   22ae8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   22aec:	6a23      	ldr	r3, [r4, #32]
   22aee:	075b      	lsls	r3, r3, #29
   22af0:	d503      	bpl.n	22afa <nrfx_twim_2_irq_handler+0x112>
   22af2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22af6:	2b00      	cmp	r3, #0
   22af8:	d0a9      	beq.n	22a4e <nrfx_twim_2_irq_handler+0x66>
        p_cb->handler(&event, p_cb->p_context);
   22afa:	e9d4 3100 	ldrd	r3, r1, [r4]
   22afe:	4668      	mov	r0, sp
   22b00:	4798      	blx	r3
}
   22b02:	e7a4      	b.n	22a4e <nrfx_twim_2_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b04:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   22b08:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   22b0c:	7b23      	ldrb	r3, [r4, #12]
   22b0e:	b983      	cbnz	r3, 22b32 <nrfx_twim_2_irq_handler+0x14a>
            event.xfer_desc = p_cb->xfer_desc;
   22b10:	4f1c      	ldr	r7, [pc, #112]	; (22b84 <nrfx_twim_2_irq_handler+0x19c>)
   22b12:	ae01      	add	r6, sp, #4
   22b14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22b16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22b18:	683b      	ldr	r3, [r7, #0]
   22b1a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   22b1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22b20:	2b00      	cmp	r3, #0
   22b22:	d1d4      	bne.n	22ace <nrfx_twim_2_irq_handler+0xe6>
    p_reg->SHORTS = mask;
   22b24:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   22b28:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22b2a:	4b17      	ldr	r3, [pc, #92]	; (22b88 <nrfx_twim_2_irq_handler+0x1a0>)
   22b2c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   22b30:	e7c8      	b.n	22ac4 <nrfx_twim_2_irq_handler+0xdc>
    p_reg->SHORTS = mask;
   22b32:	f44f 7300 	mov.w	r3, #512	; 0x200
   22b36:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   22b3a:	f240 2302 	movw	r3, #514	; 0x202
   22b3e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22b40:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   22b44:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22b48:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   22b4a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b4e:	2301      	movs	r3, #1
   22b50:	60ab      	str	r3, [r5, #8]
   22b52:	622b      	str	r3, [r5, #32]
            return;
   22b54:	e77b      	b.n	22a4e <nrfx_twim_2_irq_handler+0x66>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   22b56:	0759      	lsls	r1, r3, #29
   22b58:	d501      	bpl.n	22b5e <nrfx_twim_2_irq_handler+0x176>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   22b5a:	2302      	movs	r3, #2
   22b5c:	e7bf      	b.n	22ade <nrfx_twim_2_irq_handler+0xf6>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   22b5e:	07da      	lsls	r2, r3, #31
   22b60:	d501      	bpl.n	22b66 <nrfx_twim_2_irq_handler+0x17e>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   22b62:	2303      	movs	r3, #3
   22b64:	e7bb      	b.n	22ade <nrfx_twim_2_irq_handler+0xf6>
    else if (p_cb->error)
   22b66:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22b6a:	2b00      	cmp	r3, #0
   22b6c:	d0b7      	beq.n	22ade <nrfx_twim_2_irq_handler+0xf6>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   22b6e:	2304      	movs	r3, #4
   22b70:	e7b5      	b.n	22ade <nrfx_twim_2_irq_handler+0xf6>
   22b72:	bf00      	nop
   22b74:	2000d0d4 	.word	0x2000d0d4
   22b78:	0003096d 	.word	0x0003096d
   22b7c:	0002e574 	.word	0x0002e574
   22b80:	4000a000 	.word	0x4000a000
   22b84:	2000d0e0 	.word	0x2000d0e0
   22b88:	019c0202 	.word	0x019c0202
   22b8c:	e000e100 	.word	0xe000e100

00022b90 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22b90:	6803      	ldr	r3, [r0, #0]
{
   22b92:	b510      	push	{r4, lr}
    switch (port)
   22b94:	095a      	lsrs	r2, r3, #5
   22b96:	bf0c      	ite	eq
   22b98:	f04f 32ff 	moveq.w	r2, #4294967295
   22b9c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   22b9e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22ba2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22ba6:	07db      	lsls	r3, r3, #31
{
   22ba8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22baa:	d40a      	bmi.n	22bc2 <nrf_gpio_pin_port_decode+0x32>
   22bac:	490e      	ldr	r1, [pc, #56]	; (22be8 <nrf_gpio_pin_port_decode+0x58>)
   22bae:	480f      	ldr	r0, [pc, #60]	; (22bec <nrf_gpio_pin_port_decode+0x5c>)
   22bb0:	f240 2229 	movw	r2, #553	; 0x229
   22bb4:	f007 fe76 	bl	2a8a4 <printk>
   22bb8:	f240 2129 	movw	r1, #553	; 0x229
   22bbc:	480a      	ldr	r0, [pc, #40]	; (22be8 <nrf_gpio_pin_port_decode+0x58>)
   22bbe:	f008 f80a 	bl	2abd6 <assert_post_action>
    uint32_t pin_number = *p_pin;
   22bc2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   22bc4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22bc8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22bca:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22bcc:	d00a      	beq.n	22be4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   22bce:	4906      	ldr	r1, [pc, #24]	; (22be8 <nrf_gpio_pin_port_decode+0x58>)
   22bd0:	4806      	ldr	r0, [pc, #24]	; (22bec <nrf_gpio_pin_port_decode+0x5c>)
   22bd2:	f240 222e 	movw	r2, #558	; 0x22e
   22bd6:	f007 fe65 	bl	2a8a4 <printk>
   22bda:	f240 212e 	movw	r1, #558	; 0x22e
   22bde:	4802      	ldr	r0, [pc, #8]	; (22be8 <nrf_gpio_pin_port_decode+0x58>)
   22be0:	f007 fff9 	bl	2abd6 <assert_post_action>
}
   22be4:	4802      	ldr	r0, [pc, #8]	; (22bf0 <nrf_gpio_pin_port_decode+0x60>)
   22be6:	bd10      	pop	{r4, pc}
   22be8:	0002ef16 	.word	0x0002ef16
   22bec:	0002e574 	.word	0x0002e574
   22bf0:	40842500 	.word	0x40842500

00022bf4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   22bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22bf6:	460c      	mov	r4, r1
   22bf8:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   22bfa:	f008 ff12 	bl	2ba22 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   22bfe:	4620      	mov	r0, r4
   22c00:	f008 ff0f 	bl	2ba22 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c04:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   22c06:	f240 650d 	movw	r5, #1549	; 0x60d
   22c0a:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c0c:	f7ff ffc0 	bl	22b90 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22c10:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22c12:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   22c14:	3380      	adds	r3, #128	; 0x80
   22c16:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c1a:	a801      	add	r0, sp, #4
   22c1c:	9401      	str	r4, [sp, #4]
   22c1e:	f7ff ffb7 	bl	22b90 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22c22:	9b01      	ldr	r3, [sp, #4]
   22c24:	3380      	adds	r3, #128	; 0x80
   22c26:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   22c2a:	2004      	movs	r0, #4
   22c2c:	f008 fe19 	bl	2b862 <nrfx_busy_wait>
   22c30:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c32:	a801      	add	r0, sp, #4
   22c34:	9401      	str	r4, [sp, #4]
   22c36:	f7ff ffab 	bl	22b90 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22c3a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   22c3c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22c3e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   22c40:	07db      	lsls	r3, r3, #31
   22c42:	d414      	bmi.n	22c6e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c44:	a801      	add	r0, sp, #4
   22c46:	9601      	str	r6, [sp, #4]
   22c48:	f7ff ffa2 	bl	22b90 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22c4c:	9b01      	ldr	r3, [sp, #4]
   22c4e:	3d01      	subs	r5, #1
   22c50:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   22c54:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   22c56:	2004      	movs	r0, #4
   22c58:	f008 fe03 	bl	2b862 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   22c5c:	4630      	mov	r0, r6
   22c5e:	f008 fee0 	bl	2ba22 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   22c62:	2004      	movs	r0, #4
   22c64:	f008 fdfd 	bl	2b862 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   22c68:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   22c6c:	d1e1      	bne.n	22c32 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c6e:	a801      	add	r0, sp, #4
   22c70:	9401      	str	r4, [sp, #4]
   22c72:	f7ff ff8d 	bl	22b90 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22c76:	2301      	movs	r3, #1
   22c78:	9a01      	ldr	r2, [sp, #4]
   22c7a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   22c7c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   22c7e:	2004      	movs	r0, #4
   22c80:	f008 fdef 	bl	2b862 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   22c84:	4620      	mov	r0, r4
   22c86:	f008 fecc 	bl	2ba22 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   22c8a:	2004      	movs	r0, #4
   22c8c:	f008 fde9 	bl	2b862 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22c90:	a801      	add	r0, sp, #4
   22c92:	9401      	str	r4, [sp, #4]
   22c94:	f7ff ff7c 	bl	22b90 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22c98:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   22c9a:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   22c9c:	4803      	ldr	r0, [pc, #12]	; (22cac <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22c9e:	40d3      	lsrs	r3, r2
   22ca0:	f003 0301 	and.w	r3, r3, #1
   22ca4:	1ac0      	subs	r0, r0, r3
   22ca6:	b003      	add	sp, #12
   22ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22caa:	bf00      	nop
   22cac:	0bad0001 	.word	0x0bad0001

00022cb0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22cb0:	2303      	movs	r3, #3
static void _DoInit(void) {
   22cb2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22cb4:	4c13      	ldr	r4, [pc, #76]	; (22d04 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22cb6:	4a14      	ldr	r2, [pc, #80]	; (22d08 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22cb8:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22cba:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22cbc:	4b13      	ldr	r3, [pc, #76]	; (22d0c <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
   22cbe:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22cc0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22cc6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22cc8:	2300      	movs	r3, #0
   22cca:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   22ccc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22cce:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   22cd0:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22cd2:	4a0f      	ldr	r2, [pc, #60]	; (22d10 <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22cd4:	490f      	ldr	r1, [pc, #60]	; (22d14 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   22cd6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22cd8:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
   22cda:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22cdc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   22cde:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22ce0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22ce2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22ce4:	f00a f8a7 	bl	2ce36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22ce8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   22cec:	490a      	ldr	r1, [pc, #40]	; (22d18 <_DoInit+0x68>)
   22cee:	4620      	mov	r0, r4
   22cf0:	f00a f8a1 	bl	2ce36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22cf4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   22cf8:	2320      	movs	r3, #32
   22cfa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22cfc:	f3bf 8f5f 	dmb	sy
}
   22d00:	bd10      	pop	{r4, pc}
   22d02:	bf00      	nop
   22d04:	2000d108 	.word	0x2000d108
   22d08:	000309a9 	.word	0x000309a9
   22d0c:	2000d60a 	.word	0x2000d60a
   22d10:	2000d5fa 	.word	0x2000d5fa
   22d14:	000309b2 	.word	0x000309b2
   22d18:	000309b6 	.word	0x000309b6

00022d1c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   22d1e:	2318      	movs	r3, #24
   22d20:	4c17      	ldr	r4, [pc, #92]	; (22d80 <SEGGER_RTT_WriteNoLock+0x64>)
   22d22:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   22d26:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   22d2a:	4425      	add	r5, r4
  switch (pRing->Flags) {
   22d2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22d2e:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   22d30:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22d32:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   22d34:	d00f      	beq.n	22d56 <SEGGER_RTT_WriteNoLock+0x3a>
   22d36:	2c02      	cmp	r4, #2
   22d38:	d01a      	beq.n	22d70 <SEGGER_RTT_WriteNoLock+0x54>
   22d3a:	b9f4      	cbnz	r4, 22d7a <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   22d3c:	4628      	mov	r0, r5
   22d3e:	f008 fe7c 	bl	2ba3a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   22d42:	4286      	cmp	r6, r0
   22d44:	d805      	bhi.n	22d52 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   22d46:	4632      	mov	r2, r6
   22d48:	4639      	mov	r1, r7
   22d4a:	4628      	mov	r0, r5
   22d4c:	f008 fe83 	bl	2ba56 <_WriteNoCheck>
   22d50:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   22d52:	4620      	mov	r0, r4
   22d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   22d56:	4628      	mov	r0, r5
   22d58:	f008 fe6f 	bl	2ba3a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   22d5c:	4286      	cmp	r6, r0
   22d5e:	4634      	mov	r4, r6
   22d60:	bf28      	it	cs
   22d62:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   22d64:	4639      	mov	r1, r7
   22d66:	4622      	mov	r2, r4
   22d68:	4628      	mov	r0, r5
   22d6a:	f008 fe74 	bl	2ba56 <_WriteNoCheck>
    break;
   22d6e:	e7f0      	b.n	22d52 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22d70:	4628      	mov	r0, r5
}
   22d72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22d76:	f008 be8d 	b.w	2ba94 <_WriteBlocking>
  switch (pRing->Flags) {
   22d7a:	2400      	movs	r4, #0
  return Status;
   22d7c:	e7e9      	b.n	22d52 <SEGGER_RTT_WriteNoLock+0x36>
   22d7e:	bf00      	nop
   22d80:	2000d108 	.word	0x2000d108

00022d84 <rpc_handle_data_message>:
   22d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d88:	4680      	mov	r8, r0
   22d8a:	4604      	mov	r4, r0
   22d8c:	2700      	movs	r7, #0
   22d8e:	f858 6b08 	ldr.w	r6, [r8], #8
   22d92:	4d0c      	ldr	r5, [pc, #48]	; (22dc4 <rpc_handle_data_message+0x40>)
   22d94:	b2f6      	uxtb	r6, r6
   22d96:	782b      	ldrb	r3, [r5, #0]
   22d98:	42b3      	cmp	r3, r6
   22d9a:	d00a      	beq.n	22db2 <rpc_handle_data_message+0x2e>
   22d9c:	3701      	adds	r7, #1
   22d9e:	2f04      	cmp	r7, #4
   22da0:	f105 050c 	add.w	r5, r5, #12
   22da4:	d1f7      	bne.n	22d96 <rpc_handle_data_message+0x12>
   22da6:	68a0      	ldr	r0, [r4, #8]
   22da8:	b150      	cbz	r0, 22dc0 <rpc_handle_data_message+0x3c>
   22daa:	f008 feea 	bl	2bb82 <rpc_transport_peer_data_free>
   22dae:	2000      	movs	r0, #0
   22db0:	e006      	b.n	22dc0 <rpc_handle_data_message+0x3c>
   22db2:	6821      	ldr	r1, [r4, #0]
   22db4:	4640      	mov	r0, r8
   22db6:	686b      	ldr	r3, [r5, #4]
   22db8:	0c09      	lsrs	r1, r1, #16
   22dba:	4798      	blx	r3
   22dbc:	2802      	cmp	r0, #2
   22dbe:	d0ed      	beq.n	22d9c <rpc_handle_data_message+0x18>
   22dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22dc4:	0002e054 	.word	0x0002e054

00022dc8 <trace_write>:
   22dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dcc:	4f53      	ldr	r7, [pc, #332]	; (22f1c <trace_write+0x154>)
   22dce:	4605      	mov	r5, r0
   22dd0:	2100      	movs	r1, #0
   22dd2:	6838      	ldr	r0, [r7, #0]
   22dd4:	f7fb fd54 	bl	1e880 <nrf_modem_os_sem_take>
   22dd8:	4604      	mov	r4, r0
   22dda:	2800      	cmp	r0, #0
   22ddc:	d14c      	bne.n	22e78 <trace_write+0xb0>
   22dde:	782b      	ldrb	r3, [r5, #0]
   22de0:	f8d5 8008 	ldr.w	r8, [r5, #8]
   22de4:	2b62      	cmp	r3, #98	; 0x62
   22de6:	d043      	beq.n	22e70 <trace_write+0xa8>
   22de8:	2b63      	cmp	r3, #99	; 0x63
   22dea:	d043      	beq.n	22e74 <trace_write+0xac>
   22dec:	2b61      	cmp	r3, #97	; 0x61
   22dee:	d102      	bne.n	22df6 <trace_write+0x2e>
   22df0:	4b4b      	ldr	r3, [pc, #300]	; (22f20 <trace_write+0x158>)
   22df2:	881c      	ldrh	r4, [r3, #0]
   22df4:	b2a4      	uxth	r4, r4
   22df6:	6838      	ldr	r0, [r7, #0]
   22df8:	f7fb fd24 	bl	1e844 <nrf_modem_os_sem_give>
   22dfc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   22e00:	6929      	ldr	r1, [r5, #16]
   22e02:	eba8 080a 	sub.w	r8, r8, sl
   22e06:	eba1 030a 	sub.w	r3, r1, sl
   22e0a:	b29b      	uxth	r3, r3
   22e0c:	fa14 f488 	uxtah	r4, r4, r8
   22e10:	fbb4 f2f3 	udiv	r2, r4, r3
   22e14:	fb03 4412 	mls	r4, r3, r2, r4
   22e18:	686a      	ldr	r2, [r5, #4]
   22e1a:	eba2 020a 	sub.w	r2, r2, sl
   22e1e:	fa13 f282 	uxtah	r2, r3, r2
   22e22:	1b12      	subs	r2, r2, r4
   22e24:	fb92 f0f3 	sdiv	r0, r2, r3
   22e28:	fb03 2210 	mls	r2, r3, r0, r2
   22e2c:	fa1f f982 	uxth.w	r9, r2
   22e30:	fa14 f282 	uxtah	r2, r4, r2
   22e34:	4293      	cmp	r3, r2
   22e36:	44a2      	add	sl, r4
   22e38:	da22      	bge.n	22e80 <trace_write+0xb8>
   22e3a:	eba1 030a 	sub.w	r3, r1, sl
   22e3e:	b29b      	uxth	r3, r3
   22e40:	eba9 0403 	sub.w	r4, r9, r3
   22e44:	4699      	mov	r9, r3
   22e46:	b2a4      	uxth	r4, r4
   22e48:	f1b9 0f00 	cmp.w	r9, #0
   22e4c:	d064      	beq.n	22f18 <trace_write+0x150>
   22e4e:	2005      	movs	r0, #5
   22e50:	f7fb fd70 	bl	1e934 <nrf_modem_os_alloc>
   22e54:	4680      	mov	r8, r0
   22e56:	2800      	cmp	r0, #0
   22e58:	d05e      	beq.n	22f18 <trace_write+0x150>
   22e5a:	b19c      	cbz	r4, 22e84 <trace_write+0xbc>
   22e5c:	2005      	movs	r0, #5
   22e5e:	f7fb fd69 	bl	1e934 <nrf_modem_os_alloc>
   22e62:	4606      	mov	r6, r0
   22e64:	b970      	cbnz	r0, 22e84 <trace_write+0xbc>
   22e66:	4640      	mov	r0, r8
   22e68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e6c:	f7fb bd6a 	b.w	1e944 <nrf_modem_os_free>
   22e70:	4b2c      	ldr	r3, [pc, #176]	; (22f24 <trace_write+0x15c>)
   22e72:	e7be      	b.n	22df2 <trace_write+0x2a>
   22e74:	4b2c      	ldr	r3, [pc, #176]	; (22f28 <trace_write+0x160>)
   22e76:	e7bc      	b.n	22df2 <trace_write+0x2a>
   22e78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e7c:	f7fb bd4a 	b.w	1e914 <nrf_modem_os_trace_irq_set>
   22e80:	2400      	movs	r4, #0
   22e82:	e7e1      	b.n	22e48 <trace_write+0x80>
   22e84:	2100      	movs	r1, #0
   22e86:	6838      	ldr	r0, [r7, #0]
   22e88:	f7fb fcfa 	bl	1e880 <nrf_modem_os_sem_take>
   22e8c:	b140      	cbz	r0, 22ea0 <trace_write+0xd8>
   22e8e:	f7fb fd41 	bl	1e914 <nrf_modem_os_trace_irq_set>
   22e92:	4640      	mov	r0, r8
   22e94:	f7fb fd56 	bl	1e944 <nrf_modem_os_free>
   22e98:	2c00      	cmp	r4, #0
   22e9a:	d03d      	beq.n	22f18 <trace_write+0x150>
   22e9c:	4630      	mov	r0, r6
   22e9e:	e7e3      	b.n	22e68 <trace_write+0xa0>
   22ea0:	782b      	ldrb	r3, [r5, #0]
   22ea2:	2b62      	cmp	r3, #98	; 0x62
   22ea4:	d034      	beq.n	22f10 <trace_write+0x148>
   22ea6:	2b63      	cmp	r3, #99	; 0x63
   22ea8:	d034      	beq.n	22f14 <trace_write+0x14c>
   22eaa:	2b61      	cmp	r3, #97	; 0x61
   22eac:	d107      	bne.n	22ebe <trace_write+0xf6>
   22eae:	4a1c      	ldr	r2, [pc, #112]	; (22f20 <trace_write+0x158>)
   22eb0:	8813      	ldrh	r3, [r2, #0]
   22eb2:	eb04 0109 	add.w	r1, r4, r9
   22eb6:	fa11 f383 	uxtah	r3, r1, r3
   22eba:	b29b      	uxth	r3, r3
   22ebc:	8013      	strh	r3, [r2, #0]
   22ebe:	6838      	ldr	r0, [r7, #0]
   22ec0:	f06f 0b10 	mvn.w	fp, #16
   22ec4:	f06f 0741 	mvn.w	r7, #65	; 0x41
   22ec8:	f7fb fcbc 	bl	1e844 <nrf_modem_os_sem_give>
   22ecc:	f888 b000 	strb.w	fp, [r8]
   22ed0:	f888 7001 	strb.w	r7, [r8, #1]
   22ed4:	782b      	ldrb	r3, [r5, #0]
   22ed6:	2105      	movs	r1, #5
   22ed8:	4640      	mov	r0, r8
   22eda:	f888 3004 	strb.w	r3, [r8, #4]
   22ede:	f8a8 9002 	strh.w	r9, [r8, #2]
   22ee2:	f008 f8ff 	bl	2b0e4 <nrf_modem_os_trace_put>
   22ee6:	4649      	mov	r1, r9
   22ee8:	4650      	mov	r0, sl
   22eea:	f008 f8fb 	bl	2b0e4 <nrf_modem_os_trace_put>
   22eee:	b19c      	cbz	r4, 22f18 <trace_write+0x150>
   22ef0:	f886 b000 	strb.w	fp, [r6]
   22ef4:	7077      	strb	r7, [r6, #1]
   22ef6:	782b      	ldrb	r3, [r5, #0]
   22ef8:	2105      	movs	r1, #5
   22efa:	4630      	mov	r0, r6
   22efc:	7133      	strb	r3, [r6, #4]
   22efe:	8074      	strh	r4, [r6, #2]
   22f00:	f008 f8f0 	bl	2b0e4 <nrf_modem_os_trace_put>
   22f04:	4621      	mov	r1, r4
   22f06:	68e8      	ldr	r0, [r5, #12]
   22f08:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f0c:	f008 b8ea 	b.w	2b0e4 <nrf_modem_os_trace_put>
   22f10:	4a04      	ldr	r2, [pc, #16]	; (22f24 <trace_write+0x15c>)
   22f12:	e7cd      	b.n	22eb0 <trace_write+0xe8>
   22f14:	4a04      	ldr	r2, [pc, #16]	; (22f28 <trace_write+0x160>)
   22f16:	e7cb      	b.n	22eb0 <trace_write+0xe8>
   22f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f1c:	2000d1c0 	.word	0x2000d1c0
   22f20:	2000d470 	.word	0x2000d470
   22f24:	2000d46c 	.word	0x2000d46c
   22f28:	2000d46e 	.word	0x2000d46e

00022f2c <ipc_trace_init>:
   22f2c:	2300      	movs	r3, #0
   22f2e:	4a08      	ldr	r2, [pc, #32]	; (22f50 <ipc_trace_init+0x24>)
   22f30:	b510      	push	{r4, lr}
   22f32:	8013      	strh	r3, [r2, #0]
   22f34:	4a07      	ldr	r2, [pc, #28]	; (22f54 <ipc_trace_init+0x28>)
   22f36:	4604      	mov	r4, r0
   22f38:	8013      	strh	r3, [r2, #0]
   22f3a:	4a07      	ldr	r2, [pc, #28]	; (22f58 <ipc_trace_init+0x2c>)
   22f3c:	4807      	ldr	r0, [pc, #28]	; (22f5c <ipc_trace_init+0x30>)
   22f3e:	8013      	strh	r3, [r2, #0]
   22f40:	2201      	movs	r2, #1
   22f42:	4611      	mov	r1, r2
   22f44:	f7fb fc4c 	bl	1e7e0 <nrf_modem_os_sem_init>
   22f48:	4b05      	ldr	r3, [pc, #20]	; (22f60 <ipc_trace_init+0x34>)
   22f4a:	601c      	str	r4, [r3, #0]
   22f4c:	bd10      	pop	{r4, pc}
   22f4e:	bf00      	nop
   22f50:	2000d470 	.word	0x2000d470
   22f54:	2000d46c 	.word	0x2000d46c
   22f58:	2000d46e 	.word	0x2000d46e
   22f5c:	2000d1c0 	.word	0x2000d1c0
   22f60:	2000d1bc 	.word	0x2000d1bc

00022f64 <nrf_modem_trace_irq_handler>:
   22f64:	b508      	push	{r3, lr}
   22f66:	4b10      	ldr	r3, [pc, #64]	; (22fa8 <nrf_modem_trace_irq_handler+0x44>)
   22f68:	781b      	ldrb	r3, [r3, #0]
   22f6a:	b90b      	cbnz	r3, 22f70 <nrf_modem_trace_irq_handler+0xc>
   22f6c:	f7fb fcda 	bl	1e924 <nrf_modem_os_trace_irq_clear>
   22f70:	4b0e      	ldr	r3, [pc, #56]	; (22fac <nrf_modem_trace_irq_handler+0x48>)
   22f72:	6818      	ldr	r0, [r3, #0]
   22f74:	6842      	ldr	r2, [r0, #4]
   22f76:	6883      	ldr	r3, [r0, #8]
   22f78:	429a      	cmp	r2, r3
   22f7a:	d001      	beq.n	22f80 <nrf_modem_trace_irq_handler+0x1c>
   22f7c:	f7ff ff24 	bl	22dc8 <trace_write>
   22f80:	4b0b      	ldr	r3, [pc, #44]	; (22fb0 <nrf_modem_trace_irq_handler+0x4c>)
   22f82:	6818      	ldr	r0, [r3, #0]
   22f84:	6882      	ldr	r2, [r0, #8]
   22f86:	6843      	ldr	r3, [r0, #4]
   22f88:	429a      	cmp	r2, r3
   22f8a:	d001      	beq.n	22f90 <nrf_modem_trace_irq_handler+0x2c>
   22f8c:	f7ff ff1c 	bl	22dc8 <trace_write>
   22f90:	4b08      	ldr	r3, [pc, #32]	; (22fb4 <nrf_modem_trace_irq_handler+0x50>)
   22f92:	6818      	ldr	r0, [r3, #0]
   22f94:	6882      	ldr	r2, [r0, #8]
   22f96:	6843      	ldr	r3, [r0, #4]
   22f98:	429a      	cmp	r2, r3
   22f9a:	d003      	beq.n	22fa4 <nrf_modem_trace_irq_handler+0x40>
   22f9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22fa0:	f7ff bf12 	b.w	22dc8 <trace_write>
   22fa4:	bd08      	pop	{r3, pc}
   22fa6:	bf00      	nop
   22fa8:	2000da0a 	.word	0x2000da0a
   22fac:	2000d1b8 	.word	0x2000d1b8
   22fb0:	2000d1b0 	.word	0x2000d1b0
   22fb4:	2000d1b4 	.word	0x2000d1b4

00022fb8 <ipc_trace_handle>:
   22fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22fbc:	4b43      	ldr	r3, [pc, #268]	; (230cc <ipc_trace_handle+0x114>)
   22fbe:	681b      	ldr	r3, [r3, #0]
   22fc0:	6919      	ldr	r1, [r3, #16]
   22fc2:	f8d3 a014 	ldr.w	sl, [r3, #20]
   22fc6:	7c1a      	ldrb	r2, [r3, #16]
   22fc8:	2200      	movs	r2, #0
   22fca:	741a      	strb	r2, [r3, #16]
   22fcc:	7c58      	ldrb	r0, [r3, #17]
   22fce:	745a      	strb	r2, [r3, #17]
   22fd0:	7c98      	ldrb	r0, [r3, #18]
   22fd2:	749a      	strb	r2, [r3, #18]
   22fd4:	7cd8      	ldrb	r0, [r3, #19]
   22fd6:	74da      	strb	r2, [r3, #19]
   22fd8:	7d18      	ldrb	r0, [r3, #20]
   22fda:	751a      	strb	r2, [r3, #20]
   22fdc:	7d58      	ldrb	r0, [r3, #21]
   22fde:	755a      	strb	r2, [r3, #21]
   22fe0:	7d98      	ldrb	r0, [r3, #22]
   22fe2:	759a      	strb	r2, [r3, #22]
   22fe4:	7dd8      	ldrb	r0, [r3, #23]
   22fe6:	75da      	strb	r2, [r3, #23]
   22fe8:	2900      	cmp	r1, #0
   22fea:	d033      	beq.n	23054 <ipc_trace_handle+0x9c>
   22fec:	3901      	subs	r1, #1
   22fee:	2903      	cmp	r1, #3
   22ff0:	d830      	bhi.n	23054 <ipc_trace_handle+0x9c>
   22ff2:	e8df f001 	tbb	[pc, r1]
   22ff6:	6502      	.short	0x6502
   22ff8:	534c      	.short	0x534c
   22ffa:	4a35      	ldr	r2, [pc, #212]	; (230d0 <ipc_trace_handle+0x118>)
   22ffc:	7811      	ldrb	r1, [r2, #0]
   22ffe:	b109      	cbz	r1, 23004 <ipc_trace_handle+0x4c>
   23000:	2100      	movs	r1, #0
   23002:	7011      	strb	r1, [r2, #0]
   23004:	2200      	movs	r2, #0
   23006:	4691      	mov	r9, r2
   23008:	4617      	mov	r7, r2
   2300a:	4614      	mov	r4, r2
   2300c:	4d31      	ldr	r5, [pc, #196]	; (230d4 <ipc_trace_handle+0x11c>)
   2300e:	4932      	ldr	r1, [pc, #200]	; (230d8 <ipc_trace_handle+0x120>)
   23010:	4832      	ldr	r0, [pc, #200]	; (230dc <ipc_trace_handle+0x124>)
   23012:	f8d5 e000 	ldr.w	lr, [r5]
   23016:	f8d1 8000 	ldr.w	r8, [r1]
   2301a:	6806      	ldr	r6, [r0, #0]
   2301c:	f8da b008 	ldr.w	fp, [sl, #8]
   23020:	9501      	str	r5, [sp, #4]
   23022:	45a3      	cmp	fp, r4
   23024:	d119      	bne.n	2305a <ipc_trace_handle+0xa2>
   23026:	b107      	cbz	r7, 2302a <ipc_trace_handle+0x72>
   23028:	6006      	str	r6, [r0, #0]
   2302a:	f1b9 0f00 	cmp.w	r9, #0
   2302e:	d001      	beq.n	23034 <ipc_trace_handle+0x7c>
   23030:	f8c1 8000 	str.w	r8, [r1]
   23034:	b112      	cbz	r2, 2303c <ipc_trace_handle+0x84>
   23036:	9a01      	ldr	r2, [sp, #4]
   23038:	f8c2 e000 	str.w	lr, [r2]
   2303c:	7a1a      	ldrb	r2, [r3, #8]
   2303e:	2101      	movs	r1, #1
   23040:	2200      	movs	r2, #0
   23042:	7219      	strb	r1, [r3, #8]
   23044:	7a59      	ldrb	r1, [r3, #9]
   23046:	725a      	strb	r2, [r3, #9]
   23048:	7a99      	ldrb	r1, [r3, #10]
   2304a:	729a      	strb	r2, [r3, #10]
   2304c:	7ada      	ldrb	r2, [r3, #11]
   2304e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   23052:	72da      	strb	r2, [r3, #11]
   23054:	b003      	add	sp, #12
   23056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2305a:	1ca5      	adds	r5, r4, #2
   2305c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   23060:	686d      	ldr	r5, [r5, #4]
   23062:	f895 c000 	ldrb.w	ip, [r5]
   23066:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   2306a:	d009      	beq.n	23080 <ipc_trace_handle+0xc8>
   2306c:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   23070:	d00a      	beq.n	23088 <ipc_trace_handle+0xd0>
   23072:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   23076:	bf04      	itt	eq
   23078:	462e      	moveq	r6, r5
   2307a:	2701      	moveq	r7, #1
   2307c:	3401      	adds	r4, #1
   2307e:	e7d0      	b.n	23022 <ipc_trace_handle+0x6a>
   23080:	46a8      	mov	r8, r5
   23082:	f04f 0901 	mov.w	r9, #1
   23086:	e7f9      	b.n	2307c <ipc_trace_handle+0xc4>
   23088:	46ae      	mov	lr, r5
   2308a:	2201      	movs	r2, #1
   2308c:	e7f6      	b.n	2307c <ipc_trace_handle+0xc4>
   2308e:	2101      	movs	r1, #1
   23090:	4a0f      	ldr	r2, [pc, #60]	; (230d0 <ipc_trace_handle+0x118>)
   23092:	7011      	strb	r1, [r2, #0]
   23094:	7a1a      	ldrb	r2, [r3, #8]
   23096:	2103      	movs	r1, #3
   23098:	2200      	movs	r2, #0
   2309a:	e7d2      	b.n	23042 <ipc_trace_handle+0x8a>
   2309c:	7a19      	ldrb	r1, [r3, #8]
   2309e:	2104      	movs	r1, #4
   230a0:	7219      	strb	r1, [r3, #8]
   230a2:	7a59      	ldrb	r1, [r3, #9]
   230a4:	725a      	strb	r2, [r3, #9]
   230a6:	7a99      	ldrb	r1, [r3, #10]
   230a8:	729a      	strb	r2, [r3, #10]
   230aa:	7ad9      	ldrb	r1, [r3, #11]
   230ac:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   230b0:	72d9      	strb	r1, [r3, #11]
   230b2:	4b07      	ldr	r3, [pc, #28]	; (230d0 <ipc_trace_handle+0x118>)
   230b4:	701a      	strb	r2, [r3, #0]
   230b6:	b003      	add	sp, #12
   230b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230bc:	f7ff bf52 	b.w	22f64 <nrf_modem_trace_irq_handler>
   230c0:	b003      	add	sp, #12
   230c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230c6:	f7fb bc25 	b.w	1e914 <nrf_modem_os_trace_irq_set>
   230ca:	bf00      	nop
   230cc:	2000d1bc 	.word	0x2000d1bc
   230d0:	2000da0a 	.word	0x2000da0a
   230d4:	2000d1b4 	.word	0x2000d1b4
   230d8:	2000d1b0 	.word	0x2000d1b0
   230dc:	2000d1b8 	.word	0x2000d1b8

000230e0 <rpc_trace_coredump_in_progress>:
   230e0:	4b01      	ldr	r3, [pc, #4]	; (230e8 <rpc_trace_coredump_in_progress+0x8>)
   230e2:	7818      	ldrb	r0, [r3, #0]
   230e4:	4770      	bx	lr
   230e6:	bf00      	nop
   230e8:	2000da0a 	.word	0x2000da0a

000230ec <handle_modem_rpc_msg>:
   230ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230f0:	4606      	mov	r6, r0
   230f2:	460f      	mov	r7, r1
   230f4:	2500      	movs	r5, #0
   230f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2316c <handle_modem_rpc_msg+0x80>
   230fa:	6833      	ldr	r3, [r6, #0]
   230fc:	42ab      	cmp	r3, r5
   230fe:	d801      	bhi.n	23104 <handle_modem_rpc_msg+0x18>
   23100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23104:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   23108:	68a3      	ldr	r3, [r4, #8]
   2310a:	b1fb      	cbz	r3, 2314c <handle_modem_rpc_msg+0x60>
   2310c:	6863      	ldr	r3, [r4, #4]
   2310e:	b2db      	uxtb	r3, r3
   23110:	2b01      	cmp	r3, #1
   23112:	d11b      	bne.n	2314c <handle_modem_rpc_msg+0x60>
   23114:	6862      	ldr	r2, [r4, #4]
   23116:	f8b8 3000 	ldrh.w	r3, [r8]
   2311a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2311e:	d115      	bne.n	2314c <handle_modem_rpc_msg+0x60>
   23120:	2f02      	cmp	r7, #2
   23122:	68a0      	ldr	r0, [r4, #8]
   23124:	d114      	bne.n	23150 <handle_modem_rpc_msg+0x64>
   23126:	f7ff fe2d 	bl	22d84 <rpc_handle_data_message>
   2312a:	2802      	cmp	r0, #2
   2312c:	d00e      	beq.n	2314c <handle_modem_rpc_msg+0x60>
   2312e:	2801      	cmp	r0, #1
   23130:	d113      	bne.n	2315a <handle_modem_rpc_msg+0x6e>
   23132:	6863      	ldr	r3, [r4, #4]
   23134:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23138:	f043 0302 	orr.w	r3, r3, #2
   2313c:	6063      	str	r3, [r4, #4]
   2313e:	f8b8 3000 	ldrh.w	r3, [r8]
   23142:	3301      	adds	r3, #1
   23144:	f8a8 3000 	strh.w	r3, [r8]
   23148:	f7fb fbd4 	bl	1e8f4 <nrf_modem_os_application_irq_set>
   2314c:	3501      	adds	r5, #1
   2314e:	e7d4      	b.n	230fa <handle_modem_rpc_msg+0xe>
   23150:	6801      	ldr	r1, [r0, #0]
   23152:	0c09      	lsrs	r1, r1, #16
   23154:	f008 fcd1 	bl	2bafa <rpc_handle_ctrl_message>
   23158:	e7e7      	b.n	2312a <handle_modem_rpc_msg+0x3e>
   2315a:	2800      	cmp	r0, #0
   2315c:	d1ef      	bne.n	2313e <handle_modem_rpc_msg+0x52>
   2315e:	6863      	ldr	r3, [r4, #4]
   23160:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23164:	f043 0303 	orr.w	r3, r3, #3
   23168:	e7e8      	b.n	2313c <handle_modem_rpc_msg+0x50>
   2316a:	bf00      	nop
   2316c:	2000d472 	.word	0x2000d472

00023170 <rpc_transport_ipc_msg_alloc>:
   23170:	b570      	push	{r4, r5, r6, lr}
   23172:	4616      	mov	r6, r2
   23174:	2400      	movs	r4, #0
   23176:	6803      	ldr	r3, [r0, #0]
   23178:	42a3      	cmp	r3, r4
   2317a:	d101      	bne.n	23180 <rpc_transport_ipc_msg_alloc+0x10>
   2317c:	2300      	movs	r3, #0
   2317e:	e01c      	b.n	231ba <rpc_transport_ipc_msg_alloc+0x4a>
   23180:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   23184:	6855      	ldr	r5, [r2, #4]
   23186:	b2ed      	uxtb	r5, r5
   23188:	2d03      	cmp	r5, #3
   2318a:	d118      	bne.n	231be <rpc_transport_ipc_msg_alloc+0x4e>
   2318c:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   23190:	6093      	str	r3, [r2, #8]
   23192:	6851      	ldr	r1, [r2, #4]
   23194:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   23198:	6051      	str	r1, [r2, #4]
   2319a:	490c      	ldr	r1, [pc, #48]	; (231cc <rpc_transport_ipc_msg_alloc+0x5c>)
   2319c:	8808      	ldrh	r0, [r1, #0]
   2319e:	1c44      	adds	r4, r0, #1
   231a0:	800c      	strh	r4, [r1, #0]
   231a2:	6851      	ldr	r1, [r2, #4]
   231a4:	b289      	uxth	r1, r1
   231a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   231aa:	6051      	str	r1, [r2, #4]
   231ac:	4618      	mov	r0, r3
   231ae:	2240      	movs	r2, #64	; 0x40
   231b0:	2100      	movs	r1, #0
   231b2:	f009 fd1b 	bl	2cbec <memset>
   231b6:	4603      	mov	r3, r0
   231b8:	6046      	str	r6, [r0, #4]
   231ba:	4618      	mov	r0, r3
   231bc:	bd70      	pop	{r4, r5, r6, pc}
   231be:	b915      	cbnz	r5, 231c6 <rpc_transport_ipc_msg_alloc+0x56>
   231c0:	6895      	ldr	r5, [r2, #8]
   231c2:	2d00      	cmp	r5, #0
   231c4:	d0e2      	beq.n	2318c <rpc_transport_ipc_msg_alloc+0x1c>
   231c6:	3401      	adds	r4, #1
   231c8:	e7d6      	b.n	23178 <rpc_transport_ipc_msg_alloc+0x8>
   231ca:	bf00      	nop
   231cc:	2000d474 	.word	0x2000d474

000231d0 <rpc_transport_ipc_data_msg_send>:
   231d0:	b508      	push	{r3, lr}
   231d2:	4b0b      	ldr	r3, [pc, #44]	; (23200 <rpc_transport_ipc_data_msg_send+0x30>)
   231d4:	681b      	ldr	r3, [r3, #0]
   231d6:	1ac0      	subs	r0, r0, r3
   231d8:	4b0a      	ldr	r3, [pc, #40]	; (23204 <rpc_transport_ipc_data_msg_send+0x34>)
   231da:	f3c0 1089 	ubfx	r0, r0, #6, #10
   231de:	681b      	ldr	r3, [r3, #0]
   231e0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   231e4:	6843      	ldr	r3, [r0, #4]
   231e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   231ea:	f043 0301 	orr.w	r3, r3, #1
   231ee:	6043      	str	r3, [r0, #4]
   231f0:	2003      	movs	r0, #3
   231f2:	f007 ff62 	bl	2b0ba <nrf_modem_os_busywait>
   231f6:	2201      	movs	r2, #1
   231f8:	4b03      	ldr	r3, [pc, #12]	; (23208 <rpc_transport_ipc_data_msg_send+0x38>)
   231fa:	601a      	str	r2, [r3, #0]
   231fc:	bd08      	pop	{r3, pc}
   231fe:	bf00      	nop
   23200:	2000d1dc 	.word	0x2000d1dc
   23204:	2000d1e0 	.word	0x2000d1e0
   23208:	4002a00c 	.word	0x4002a00c

0002320c <rpc_transport_ipc_ctrl_msg_send>:
   2320c:	b508      	push	{r3, lr}
   2320e:	4b0b      	ldr	r3, [pc, #44]	; (2323c <rpc_transport_ipc_ctrl_msg_send+0x30>)
   23210:	681b      	ldr	r3, [r3, #0]
   23212:	1ac0      	subs	r0, r0, r3
   23214:	4b0a      	ldr	r3, [pc, #40]	; (23240 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   23216:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2321a:	681b      	ldr	r3, [r3, #0]
   2321c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23220:	6843      	ldr	r3, [r0, #4]
   23222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23226:	f043 0301 	orr.w	r3, r3, #1
   2322a:	6043      	str	r3, [r0, #4]
   2322c:	2003      	movs	r0, #3
   2322e:	f007 ff44 	bl	2b0ba <nrf_modem_os_busywait>
   23232:	2201      	movs	r2, #1
   23234:	4b03      	ldr	r3, [pc, #12]	; (23244 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   23236:	601a      	str	r2, [r3, #0]
   23238:	bd08      	pop	{r3, pc}
   2323a:	bf00      	nop
   2323c:	2000d1d4 	.word	0x2000d1d4
   23240:	2000d1d8 	.word	0x2000d1d8
   23244:	4002a004 	.word	0x4002a004

00023248 <rpc_transport_ipc_data_msg_alloc>:
   23248:	4b05      	ldr	r3, [pc, #20]	; (23260 <rpc_transport_ipc_data_msg_alloc+0x18>)
   2324a:	781b      	ldrb	r3, [r3, #0]
   2324c:	b933      	cbnz	r3, 2325c <rpc_transport_ipc_data_msg_alloc+0x14>
   2324e:	4b05      	ldr	r3, [pc, #20]	; (23264 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   23250:	2202      	movs	r2, #2
   23252:	6819      	ldr	r1, [r3, #0]
   23254:	4b04      	ldr	r3, [pc, #16]	; (23268 <rpc_transport_ipc_data_msg_alloc+0x20>)
   23256:	6818      	ldr	r0, [r3, #0]
   23258:	f7ff bf8a 	b.w	23170 <rpc_transport_ipc_msg_alloc>
   2325c:	2000      	movs	r0, #0
   2325e:	4770      	bx	lr
   23260:	2000da0c 	.word	0x2000da0c
   23264:	2000d1dc 	.word	0x2000d1dc
   23268:	2000d1e0 	.word	0x2000d1e0

0002326c <rpc_transport_ipc_ctrl_msg_alloc>:
   2326c:	230a      	movs	r3, #10
   2326e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23270:	4c0c      	ldr	r4, [pc, #48]	; (232a4 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   23272:	4d0d      	ldr	r5, [pc, #52]	; (232a8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   23274:	9301      	str	r3, [sp, #4]
   23276:	2201      	movs	r2, #1
   23278:	6821      	ldr	r1, [r4, #0]
   2327a:	6828      	ldr	r0, [r5, #0]
   2327c:	f7ff ff78 	bl	23170 <rpc_transport_ipc_msg_alloc>
   23280:	b968      	cbnz	r0, 2329e <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   23282:	f007 ff22 	bl	2b0ca <nrf_modem_os_is_in_isr>
   23286:	b918      	cbnz	r0, 23290 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   23288:	a901      	add	r1, sp, #4
   2328a:	f7fb f9f1 	bl	1e670 <nrf_modem_os_timedwait>
   2328e:	e7f2      	b.n	23276 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   23290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   23294:	9b01      	ldr	r3, [sp, #4]
   23296:	4358      	muls	r0, r3
   23298:	f007 ff0f 	bl	2b0ba <nrf_modem_os_busywait>
   2329c:	e7eb      	b.n	23276 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2329e:	b003      	add	sp, #12
   232a0:	bd30      	pop	{r4, r5, pc}
   232a2:	bf00      	nop
   232a4:	2000d1d4 	.word	0x2000d1d4
   232a8:	2000d1d8 	.word	0x2000d1d8

000232ac <rpc_transport_ipc_data_alloc>:
   232ac:	4b03      	ldr	r3, [pc, #12]	; (232bc <rpc_transport_ipc_data_alloc+0x10>)
   232ae:	781b      	ldrb	r3, [r3, #0]
   232b0:	b90b      	cbnz	r3, 232b6 <rpc_transport_ipc_data_alloc+0xa>
   232b2:	f7fb bb4d 	b.w	1e950 <nrf_modem_os_shm_tx_alloc>
   232b6:	2000      	movs	r0, #0
   232b8:	4770      	bx	lr
   232ba:	bf00      	nop
   232bc:	2000da0c 	.word	0x2000da0c

000232c0 <nrf_modem_application_irq_handler>:
   232c0:	b510      	push	{r4, lr}
   232c2:	4c06      	ldr	r4, [pc, #24]	; (232dc <nrf_modem_application_irq_handler+0x1c>)
   232c4:	f7fb fb1e 	bl	1e904 <nrf_modem_os_application_irq_clear>
   232c8:	6820      	ldr	r0, [r4, #0]
   232ca:	2101      	movs	r1, #1
   232cc:	f7ff ff0e 	bl	230ec <handle_modem_rpc_msg>
   232d0:	6860      	ldr	r0, [r4, #4]
   232d2:	2102      	movs	r1, #2
   232d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   232d8:	f7ff bf08 	b.w	230ec <handle_modem_rpc_msg>
   232dc:	2000d1c8 	.word	0x2000d1c8

000232e0 <rpc_transport_ipc_msg_free>:
   232e0:	2300      	movs	r3, #0
   232e2:	4911      	ldr	r1, [pc, #68]	; (23328 <rpc_transport_ipc_msg_free+0x48>)
   232e4:	b530      	push	{r4, r5, lr}
   232e6:	680a      	ldr	r2, [r1, #0]
   232e8:	6814      	ldr	r4, [r2, #0]
   232ea:	42a3      	cmp	r3, r4
   232ec:	d10b      	bne.n	23306 <rpc_transport_ipc_msg_free+0x26>
   232ee:	2300      	movs	r3, #0
   232f0:	684a      	ldr	r2, [r1, #4]
   232f2:	6811      	ldr	r1, [r2, #0]
   232f4:	428b      	cmp	r3, r1
   232f6:	d015      	beq.n	23324 <rpc_transport_ipc_msg_free+0x44>
   232f8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   232fc:	68a4      	ldr	r4, [r4, #8]
   232fe:	42a0      	cmp	r0, r4
   23300:	d008      	beq.n	23314 <rpc_transport_ipc_msg_free+0x34>
   23302:	3301      	adds	r3, #1
   23304:	e7f6      	b.n	232f4 <rpc_transport_ipc_msg_free+0x14>
   23306:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2330a:	68ad      	ldr	r5, [r5, #8]
   2330c:	42a8      	cmp	r0, r5
   2330e:	d001      	beq.n	23314 <rpc_transport_ipc_msg_free+0x34>
   23310:	3301      	adds	r3, #1
   23312:	e7ea      	b.n	232ea <rpc_transport_ipc_msg_free+0xa>
   23314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   23318:	685a      	ldr	r2, [r3, #4]
   2331a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2331e:	f042 0203 	orr.w	r2, r2, #3
   23322:	605a      	str	r2, [r3, #4]
   23324:	bd30      	pop	{r4, r5, pc}
   23326:	bf00      	nop
   23328:	2000d1c8 	.word	0x2000d1c8

0002332c <rpc_transport_ipc_init>:
   2332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23330:	2200      	movs	r2, #0
   23332:	b095      	sub	sp, #84	; 0x54
   23334:	4605      	mov	r5, r0
   23336:	494d      	ldr	r1, [pc, #308]	; (2346c <rpc_transport_ipc_init+0x140>)
   23338:	7900      	ldrb	r0, [r0, #4]
   2333a:	f7fe fd3d 	bl	21db8 <nrfx_ipc_init>
   2333e:	2238      	movs	r2, #56	; 0x38
   23340:	2100      	movs	r1, #0
   23342:	a803      	add	r0, sp, #12
   23344:	f009 fc52 	bl	2cbec <memset>
   23348:	2302      	movs	r3, #2
   2334a:	9304      	str	r3, [sp, #16]
   2334c:	2308      	movs	r3, #8
   2334e:	9306      	str	r3, [sp, #24]
   23350:	2320      	movs	r3, #32
   23352:	9308      	str	r3, [sp, #32]
   23354:	2301      	movs	r3, #1
   23356:	930b      	str	r3, [sp, #44]	; 0x2c
   23358:	2304      	movs	r3, #4
   2335a:	930d      	str	r3, [sp, #52]	; 0x34
   2335c:	2310      	movs	r3, #16
   2335e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   23362:	930f      	str	r3, [sp, #60]	; 0x3c
   23364:	2380      	movs	r3, #128	; 0x80
   23366:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   2336a:	23d5      	movs	r3, #213	; 0xd5
   2336c:	a803      	add	r0, sp, #12
   2336e:	9313      	str	r3, [sp, #76]	; 0x4c
   23370:	f7fe fd48 	bl	21e04 <nrfx_ipc_config_load>
   23374:	682b      	ldr	r3, [r5, #0]
   23376:	2100      	movs	r1, #0
   23378:	685a      	ldr	r2, [r3, #4]
   2337a:	6818      	ldr	r0, [r3, #0]
   2337c:	f009 fc36 	bl	2cbec <memset>
   23380:	682a      	ldr	r2, [r5, #0]
   23382:	6814      	ldr	r4, [r2, #0]
   23384:	69d3      	ldr	r3, [r2, #28]
   23386:	f104 0660 	add.w	r6, r4, #96	; 0x60
   2338a:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   2338e:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   23392:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   23396:	f104 0920 	add.w	r9, r4, #32
   2339a:	2b00      	cmp	r3, #0
   2339c:	d060      	beq.n	23460 <rpc_transport_ipc_init+0x134>
   2339e:	f104 0840 	add.w	r8, r4, #64	; 0x40
   233a2:	4933      	ldr	r1, [pc, #204]	; (23470 <rpc_transport_ipc_init+0x144>)
   233a4:	f8c1 9000 	str.w	r9, [r1]
   233a8:	b13b      	cbz	r3, 233ba <rpc_transport_ipc_init+0x8e>
   233aa:	6992      	ldr	r2, [r2, #24]
   233ac:	4640      	mov	r0, r8
   233ae:	f8c8 2004 	str.w	r2, [r8, #4]
   233b2:	f8c8 3000 	str.w	r3, [r8]
   233b6:	f7ff fdb9 	bl	22f2c <ipc_trace_init>
   233ba:	6828      	ldr	r0, [r5, #0]
   233bc:	2300      	movs	r3, #0
   233be:	6902      	ldr	r2, [r0, #16]
   233c0:	2101      	movs	r1, #1
   233c2:	6062      	str	r2, [r4, #4]
   233c4:	6942      	ldr	r2, [r0, #20]
   233c6:	70a1      	strb	r1, [r4, #2]
   233c8:	60a2      	str	r2, [r4, #8]
   233ca:	4a2a      	ldr	r2, [pc, #168]	; (23474 <rpc_transport_ipc_init+0x148>)
   233cc:	7023      	strb	r3, [r4, #0]
   233ce:	6017      	str	r7, [r2, #0]
   233d0:	4a29      	ldr	r2, [pc, #164]	; (23478 <rpc_transport_ipc_init+0x14c>)
   233d2:	7063      	strb	r3, [r4, #1]
   233d4:	6016      	str	r6, [r2, #0]
   233d6:	2208      	movs	r2, #8
   233d8:	70e3      	strb	r3, [r4, #3]
   233da:	60e6      	str	r6, [r4, #12]
   233dc:	6127      	str	r7, [r4, #16]
   233de:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   233e2:	f8c4 9014 	str.w	r9, [r4, #20]
   233e6:	f8c4 8018 	str.w	r8, [r4, #24]
   233ea:	707b      	strb	r3, [r7, #1]
   233ec:	70bb      	strb	r3, [r7, #2]
   233ee:	70fb      	strb	r3, [r7, #3]
   233f0:	2714      	movs	r7, #20
   233f2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   233f6:	4a21      	ldr	r2, [pc, #132]	; (2347c <rpc_transport_ipc_init+0x150>)
   233f8:	4d21      	ldr	r5, [pc, #132]	; (23480 <rpc_transport_ipc_init+0x154>)
   233fa:	f8c2 b000 	str.w	fp, [r2]
   233fe:	4a21      	ldr	r2, [pc, #132]	; (23484 <rpc_transport_ipc_init+0x158>)
   23400:	7073      	strb	r3, [r6, #1]
   23402:	f8c2 a000 	str.w	sl, [r2]
   23406:	4a20      	ldr	r2, [pc, #128]	; (23488 <rpc_transport_ipc_init+0x15c>)
   23408:	70b3      	strb	r3, [r6, #2]
   2340a:	70f3      	strb	r3, [r6, #3]
   2340c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   23410:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   23414:	4c1d      	ldr	r4, [pc, #116]	; (2348c <rpc_transport_ipc_init+0x160>)
   23416:	7029      	strb	r1, [r5, #0]
   23418:	491d      	ldr	r1, [pc, #116]	; (23490 <rpc_transport_ipc_init+0x164>)
   2341a:	6023      	str	r3, [r4, #0]
   2341c:	9302      	str	r3, [sp, #8]
   2341e:	600b      	str	r3, [r1, #0]
   23420:	680b      	ldr	r3, [r1, #0]
   23422:	4e1c      	ldr	r6, [pc, #112]	; (23494 <rpc_transport_ipc_init+0x168>)
   23424:	9302      	str	r3, [sp, #8]
   23426:	9b02      	ldr	r3, [sp, #8]
   23428:	2000      	movs	r0, #0
   2342a:	a901      	add	r1, sp, #4
   2342c:	9701      	str	r7, [sp, #4]
   2342e:	f7fb f91f 	bl	1e670 <nrf_modem_os_timedwait>
   23432:	9b01      	ldr	r3, [sp, #4]
   23434:	3b14      	subs	r3, #20
   23436:	441e      	add	r6, r3
   23438:	782b      	ldrb	r3, [r5, #0]
   2343a:	2b01      	cmp	r3, #1
   2343c:	d104      	bne.n	23448 <rpc_transport_ipc_init+0x11c>
   2343e:	2e00      	cmp	r6, #0
   23440:	d1f2      	bne.n	23428 <rpc_transport_ipc_init+0xfc>
   23442:	f06f 0373 	mvn.w	r3, #115	; 0x73
   23446:	6023      	str	r3, [r4, #0]
   23448:	6824      	ldr	r4, [r4, #0]
   2344a:	b95c      	cbnz	r4, 23464 <rpc_transport_ipc_init+0x138>
   2344c:	4b12      	ldr	r3, [pc, #72]	; (23498 <rpc_transport_ipc_init+0x16c>)
   2344e:	701c      	strb	r4, [r3, #0]
   23450:	4b12      	ldr	r3, [pc, #72]	; (2349c <rpc_transport_ipc_init+0x170>)
   23452:	801c      	strh	r4, [r3, #0]
   23454:	4b12      	ldr	r3, [pc, #72]	; (234a0 <rpc_transport_ipc_init+0x174>)
   23456:	801c      	strh	r4, [r3, #0]
   23458:	4620      	mov	r0, r4
   2345a:	b015      	add	sp, #84	; 0x54
   2345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23460:	4698      	mov	r8, r3
   23462:	e79e      	b.n	233a2 <rpc_transport_ipc_init+0x76>
   23464:	f7fe fd0c 	bl	21e80 <nrfx_ipc_uninit>
   23468:	e7f6      	b.n	23458 <rpc_transport_ipc_init+0x12c>
   2346a:	bf00      	nop
   2346c:	000234a5 	.word	0x000234a5
   23470:	2000d1d0 	.word	0x2000d1d0
   23474:	2000d1e0 	.word	0x2000d1e0
   23478:	2000d1d8 	.word	0x2000d1d8
   2347c:	2000d1dc 	.word	0x2000d1dc
   23480:	2000da0b 	.word	0x2000da0b
   23484:	2000d1d4 	.word	0x2000d1d4
   23488:	4002a000 	.word	0x4002a000
   2348c:	2000d1c4 	.word	0x2000d1c4
   23490:	40005610 	.word	0x40005610
   23494:	000249f0 	.word	0x000249f0
   23498:	2000da0c 	.word	0x2000da0c
   2349c:	2000d474 	.word	0x2000d474
   234a0:	2000d472 	.word	0x2000d472

000234a4 <ipc_irq_handler>:
   234a4:	b570      	push	{r4, r5, r6, lr}
   234a6:	4604      	mov	r4, r0
   234a8:	0620      	lsls	r0, r4, #24
   234aa:	d50c      	bpl.n	234c6 <ipc_irq_handler+0x22>
   234ac:	f7ff fd84 	bl	22fb8 <ipc_trace_handle>
   234b0:	f7ff fe16 	bl	230e0 <rpc_trace_coredump_in_progress>
   234b4:	b138      	cbz	r0, 234c6 <ipc_irq_handler+0x22>
   234b6:	22e0      	movs	r2, #224	; 0xe0
   234b8:	4b3e      	ldr	r3, [pc, #248]	; (235b4 <ipc_irq_handler+0x110>)
   234ba:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   234be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   234c2:	605a      	str	r2, [r3, #4]
   234c4:	bd70      	pop	{r4, r5, r6, pc}
   234c6:	07e1      	lsls	r1, r4, #31
   234c8:	d548      	bpl.n	2355c <ipc_irq_handler+0xb8>
   234ca:	f248 0202 	movw	r2, #32770	; 0x8002
   234ce:	4b3a      	ldr	r3, [pc, #232]	; (235b8 <ipc_irq_handler+0x114>)
   234d0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   234d4:	4293      	cmp	r3, r2
   234d6:	d035      	beq.n	23544 <ipc_irq_handler+0xa0>
   234d8:	d81b      	bhi.n	23512 <ipc_irq_handler+0x6e>
   234da:	f243 0232 	movw	r2, #12338	; 0x3032
   234de:	4293      	cmp	r3, r2
   234e0:	d036      	beq.n	23550 <ipc_irq_handler+0xac>
   234e2:	d80b      	bhi.n	234fc <ipc_irq_handler+0x58>
   234e4:	3b01      	subs	r3, #1
   234e6:	2b01      	cmp	r3, #1
   234e8:	d8ec      	bhi.n	234c4 <ipc_irq_handler+0x20>
   234ea:	2203      	movs	r2, #3
   234ec:	200e      	movs	r0, #14
   234ee:	4b33      	ldr	r3, [pc, #204]	; (235bc <ipc_irq_handler+0x118>)
   234f0:	701a      	strb	r2, [r3, #0]
   234f2:	4b33      	ldr	r3, [pc, #204]	; (235c0 <ipc_irq_handler+0x11c>)
   234f4:	6018      	str	r0, [r3, #0]
   234f6:	f009 f885 	bl	2c604 <rpc_transport_ipc_fault_handler>
   234fa:	e7e3      	b.n	234c4 <ipc_irq_handler+0x20>
   234fc:	f248 0201 	movw	r2, #32769	; 0x8001
   23500:	4293      	cmp	r3, r2
   23502:	d1df      	bne.n	234c4 <ipc_irq_handler+0x20>
   23504:	2203      	movs	r2, #3
   23506:	4b2d      	ldr	r3, [pc, #180]	; (235bc <ipc_irq_handler+0x118>)
   23508:	701a      	strb	r2, [r3, #0]
   2350a:	2216      	movs	r2, #22
   2350c:	4b2c      	ldr	r3, [pc, #176]	; (235c0 <ipc_irq_handler+0x11c>)
   2350e:	601a      	str	r2, [r3, #0]
   23510:	e7d8      	b.n	234c4 <ipc_irq_handler+0x20>
   23512:	4a2c      	ldr	r2, [pc, #176]	; (235c4 <ipc_irq_handler+0x120>)
   23514:	4293      	cmp	r3, r2
   23516:	d80c      	bhi.n	23532 <ipc_irq_handler+0x8e>
   23518:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   2351c:	d80c      	bhi.n	23538 <ipc_irq_handler+0x94>
   2351e:	f248 0203 	movw	r2, #32771	; 0x8003
   23522:	4293      	cmp	r3, r2
   23524:	d1ce      	bne.n	234c4 <ipc_irq_handler+0x20>
   23526:	2203      	movs	r2, #3
   23528:	4b24      	ldr	r3, [pc, #144]	; (235bc <ipc_irq_handler+0x118>)
   2352a:	701a      	strb	r2, [r3, #0]
   2352c:	220c      	movs	r2, #12
   2352e:	4b24      	ldr	r3, [pc, #144]	; (235c0 <ipc_irq_handler+0x11c>)
   23530:	e7ed      	b.n	2350e <ipc_irq_handler+0x6a>
   23532:	4a25      	ldr	r2, [pc, #148]	; (235c8 <ipc_irq_handler+0x124>)
   23534:	4293      	cmp	r3, r2
   23536:	d1c5      	bne.n	234c4 <ipc_irq_handler+0x20>
   23538:	2103      	movs	r1, #3
   2353a:	4a20      	ldr	r2, [pc, #128]	; (235bc <ipc_irq_handler+0x118>)
   2353c:	7011      	strb	r1, [r2, #0]
   2353e:	4a20      	ldr	r2, [pc, #128]	; (235c0 <ipc_irq_handler+0x11c>)
   23540:	6013      	str	r3, [r2, #0]
   23542:	e7bf      	b.n	234c4 <ipc_irq_handler+0x20>
   23544:	2203      	movs	r2, #3
   23546:	4b1d      	ldr	r3, [pc, #116]	; (235bc <ipc_irq_handler+0x118>)
   23548:	701a      	strb	r2, [r3, #0]
   2354a:	225f      	movs	r2, #95	; 0x5f
   2354c:	4b1c      	ldr	r3, [pc, #112]	; (235c0 <ipc_irq_handler+0x11c>)
   2354e:	e7de      	b.n	2350e <ipc_irq_handler+0x6a>
   23550:	2203      	movs	r2, #3
   23552:	4b1a      	ldr	r3, [pc, #104]	; (235bc <ipc_irq_handler+0x118>)
   23554:	701a      	strb	r2, [r3, #0]
   23556:	2205      	movs	r2, #5
   23558:	4b19      	ldr	r3, [pc, #100]	; (235c0 <ipc_irq_handler+0x11c>)
   2355a:	e7d8      	b.n	2350e <ipc_irq_handler+0x6a>
   2355c:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   23560:	d003      	beq.n	2356a <ipc_irq_handler+0xc6>
   23562:	2202      	movs	r2, #2
   23564:	4b15      	ldr	r3, [pc, #84]	; (235bc <ipc_irq_handler+0x118>)
   23566:	701a      	strb	r2, [r3, #0]
   23568:	e7ac      	b.n	234c4 <ipc_irq_handler+0x20>
   2356a:	0762      	lsls	r2, r4, #29
   2356c:	d505      	bpl.n	2357a <ipc_irq_handler+0xd6>
   2356e:	4b13      	ldr	r3, [pc, #76]	; (235bc <ipc_irq_handler+0x118>)
   23570:	781a      	ldrb	r2, [r3, #0]
   23572:	461e      	mov	r6, r3
   23574:	b93a      	cbnz	r2, 23586 <ipc_irq_handler+0xe2>
   23576:	f7fb f9bd 	bl	1e8f4 <nrf_modem_os_application_irq_set>
   2357a:	06e3      	lsls	r3, r4, #27
   2357c:	d5a2      	bpl.n	234c4 <ipc_irq_handler+0x20>
   2357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23582:	f7fb b9b7 	b.w	1e8f4 <nrf_modem_os_application_irq_set>
   23586:	2a01      	cmp	r2, #1
   23588:	d1f7      	bne.n	2357a <ipc_irq_handler+0xd6>
   2358a:	4a10      	ldr	r2, [pc, #64]	; (235cc <ipc_irq_handler+0x128>)
   2358c:	4810      	ldr	r0, [pc, #64]	; (235d0 <ipc_irq_handler+0x12c>)
   2358e:	6812      	ldr	r2, [r2, #0]
   23590:	6891      	ldr	r1, [r2, #8]
   23592:	6041      	str	r1, [r0, #4]
   23594:	6852      	ldr	r2, [r2, #4]
   23596:	6002      	str	r2, [r0, #0]
   23598:	b121      	cbz	r1, 235a4 <ipc_irq_handler+0x100>
   2359a:	b11a      	cbz	r2, 235a4 <ipc_irq_handler+0x100>
   2359c:	6809      	ldr	r1, [r1, #0]
   2359e:	b109      	cbz	r1, 235a4 <ipc_irq_handler+0x100>
   235a0:	6812      	ldr	r2, [r2, #0]
   235a2:	b92a      	cbnz	r2, 235b0 <ipc_irq_handler+0x10c>
   235a4:	2303      	movs	r3, #3
   235a6:	2205      	movs	r2, #5
   235a8:	7033      	strb	r3, [r6, #0]
   235aa:	4b05      	ldr	r3, [pc, #20]	; (235c0 <ipc_irq_handler+0x11c>)
   235ac:	601a      	str	r2, [r3, #0]
   235ae:	e7e4      	b.n	2357a <ipc_irq_handler+0xd6>
   235b0:	701d      	strb	r5, [r3, #0]
   235b2:	e7e2      	b.n	2357a <ipc_irq_handler+0xd6>
   235b4:	e000e100 	.word	0xe000e100
   235b8:	4002a000 	.word	0x4002a000
   235bc:	2000da0b 	.word	0x2000da0b
   235c0:	2000d1c4 	.word	0x2000d1c4
   235c4:	04400004 	.word	0x04400004
   235c8:	05500001 	.word	0x05500001
   235cc:	2000d1d0 	.word	0x2000d1d0
   235d0:	2000d1c8 	.word	0x2000d1c8

000235d4 <interface_init>:
   235d4:	b508      	push	{r3, lr}
   235d6:	f44f 72b0 	mov.w	r2, #352	; 0x160
   235da:	2100      	movs	r1, #0
   235dc:	4802      	ldr	r0, [pc, #8]	; (235e8 <interface_init+0x14>)
   235de:	f009 fb05 	bl	2cbec <memset>
   235e2:	2000      	movs	r0, #0
   235e4:	bd08      	pop	{r3, pc}
   235e6:	bf00      	nop
   235e8:	2000d1e4 	.word	0x2000d1e4

000235ec <interface_socket_allocate>:
   235ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235ee:	4606      	mov	r6, r0
   235f0:	2400      	movs	r4, #0
   235f2:	272c      	movs	r7, #44	; 0x2c
   235f4:	4b0f      	ldr	r3, [pc, #60]	; (23634 <interface_socket_allocate+0x48>)
   235f6:	fb07 f004 	mul.w	r0, r7, r4
   235fa:	181d      	adds	r5, r3, r0
   235fc:	5818      	ldr	r0, [r3, r0]
   235fe:	b988      	cbnz	r0, 23624 <interface_socket_allocate+0x38>
   23600:	f04f 37ff 	mov.w	r7, #4294967295
   23604:	2301      	movs	r3, #1
   23606:	4628      	mov	r0, r5
   23608:	61af      	str	r7, [r5, #24]
   2360a:	602b      	str	r3, [r5, #0]
   2360c:	f008 fae8 	bl	2bbe0 <packet_handler_alloc_and_init>
   23610:	b168      	cbz	r0, 2362e <interface_socket_allocate+0x42>
   23612:	4628      	mov	r0, r5
   23614:	f008 fafb 	bl	2bc0e <socket_free>
   23618:	200c      	movs	r0, #12
   2361a:	f007 fd50 	bl	2b0be <nrf_modem_os_errno_set>
   2361e:	f04f 34ff 	mov.w	r4, #4294967295
   23622:	e005      	b.n	23630 <interface_socket_allocate+0x44>
   23624:	3401      	adds	r4, #1
   23626:	2c08      	cmp	r4, #8
   23628:	d1e5      	bne.n	235f6 <interface_socket_allocate+0xa>
   2362a:	2069      	movs	r0, #105	; 0x69
   2362c:	e7f5      	b.n	2361a <interface_socket_allocate+0x2e>
   2362e:	6035      	str	r5, [r6, #0]
   23630:	4620      	mov	r0, r4
   23632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23634:	2000d1e4 	.word	0x2000d1e4

00023638 <interface_socket_free>:
   23638:	2807      	cmp	r0, #7
   2363a:	d805      	bhi.n	23648 <interface_socket_free+0x10>
   2363c:	222c      	movs	r2, #44	; 0x2c
   2363e:	4b03      	ldr	r3, [pc, #12]	; (2364c <interface_socket_free+0x14>)
   23640:	fb02 3000 	mla	r0, r2, r0, r3
   23644:	f008 bae3 	b.w	2bc0e <socket_free>
   23648:	4770      	bx	lr
   2364a:	bf00      	nop
   2364c:	2000d1e4 	.word	0x2000d1e4

00023650 <interface_socket_packet_handler_update>:
   23650:	2807      	cmp	r0, #7
   23652:	b570      	push	{r4, r5, r6, lr}
   23654:	d812      	bhi.n	2367c <interface_socket_packet_handler_update+0x2c>
   23656:	232c      	movs	r3, #44	; 0x2c
   23658:	4358      	muls	r0, r3
   2365a:	4c09      	ldr	r4, [pc, #36]	; (23680 <interface_socket_packet_handler_update+0x30>)
   2365c:	5823      	ldr	r3, [r4, r0]
   2365e:	1825      	adds	r5, r4, r0
   23660:	b163      	cbz	r3, 2367c <interface_socket_packet_handler_update+0x2c>
   23662:	4628      	mov	r0, r5
   23664:	69ee      	ldr	r6, [r5, #28]
   23666:	f008 fabb 	bl	2bbe0 <packet_handler_alloc_and_init>
   2366a:	4604      	mov	r4, r0
   2366c:	b920      	cbnz	r0, 23678 <interface_socket_packet_handler_update+0x28>
   2366e:	4630      	mov	r0, r6
   23670:	f008 ffaa 	bl	2c5c8 <packet_handler_delete>
   23674:	4620      	mov	r0, r4
   23676:	bd70      	pop	{r4, r5, r6, pc}
   23678:	61ee      	str	r6, [r5, #28]
   2367a:	e7fb      	b.n	23674 <interface_socket_packet_handler_update+0x24>
   2367c:	2402      	movs	r4, #2
   2367e:	e7f9      	b.n	23674 <interface_socket_packet_handler_update+0x24>
   23680:	2000d1e4 	.word	0x2000d1e4

00023684 <interface_socket_wait>:
   23684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23688:	4615      	mov	r5, r2
   2368a:	222c      	movs	r2, #44	; 0x2c
   2368c:	4350      	muls	r0, r2
   2368e:	461e      	mov	r6, r3
   23690:	4b0e      	ldr	r3, [pc, #56]	; (236cc <interface_socket_wait+0x48>)
   23692:	460c      	mov	r4, r1
   23694:	181f      	adds	r7, r3, r0
   23696:	581b      	ldr	r3, [r3, r0]
   23698:	402b      	ands	r3, r5
   2369a:	428b      	cmp	r3, r1
   2369c:	d102      	bne.n	236a4 <interface_socket_wait+0x20>
   2369e:	2000      	movs	r0, #0
   236a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236a4:	687b      	ldr	r3, [r7, #4]
   236a6:	2b00      	cmp	r3, #0
   236a8:	d1f9      	bne.n	2369e <interface_socket_wait+0x1a>
   236aa:	46b8      	mov	r8, r7
   236ac:	f8d8 3000 	ldr.w	r3, [r8]
   236b0:	402b      	ands	r3, r5
   236b2:	42a3      	cmp	r3, r4
   236b4:	d0f3      	beq.n	2369e <interface_socket_wait+0x1a>
   236b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   236ba:	2b00      	cmp	r3, #0
   236bc:	d1ef      	bne.n	2369e <interface_socket_wait+0x1a>
   236be:	4631      	mov	r1, r6
   236c0:	4638      	mov	r0, r7
   236c2:	f7fa ffd5 	bl	1e670 <nrf_modem_os_timedwait>
   236c6:	2800      	cmp	r0, #0
   236c8:	d0f0      	beq.n	236ac <interface_socket_wait+0x28>
   236ca:	e7e9      	b.n	236a0 <interface_socket_wait+0x1c>
   236cc:	2000d1e4 	.word	0x2000d1e4

000236d0 <interface_sockets_aux_state_set>:
   236d0:	4a0d      	ldr	r2, [pc, #52]	; (23708 <interface_sockets_aux_state_set+0x38>)
   236d2:	b570      	push	{r4, r5, r6, lr}
   236d4:	2300      	movs	r3, #0
   236d6:	4611      	mov	r1, r2
   236d8:	252c      	movs	r5, #44	; 0x2c
   236da:	fb05 f403 	mul.w	r4, r5, r3
   236de:	590c      	ldr	r4, [r1, r4]
   236e0:	b15c      	cbz	r4, 236fa <interface_sockets_aux_state_set+0x2a>
   236e2:	68d4      	ldr	r4, [r2, #12]
   236e4:	f024 0608 	bic.w	r6, r4, #8
   236e8:	2e02      	cmp	r6, #2
   236ea:	d001      	beq.n	236f0 <interface_sockets_aux_state_set+0x20>
   236ec:	2c05      	cmp	r4, #5
   236ee:	d104      	bne.n	236fa <interface_sockets_aux_state_set+0x2a>
   236f0:	fb05 f603 	mul.w	r6, r5, r3
   236f4:	598c      	ldr	r4, [r1, r6]
   236f6:	4304      	orrs	r4, r0
   236f8:	518c      	str	r4, [r1, r6]
   236fa:	3301      	adds	r3, #1
   236fc:	2b08      	cmp	r3, #8
   236fe:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   23702:	d1ea      	bne.n	236da <interface_sockets_aux_state_set+0xa>
   23704:	bd70      	pop	{r4, r5, r6, pc}
   23706:	bf00      	nop
   23708:	2000d1e4 	.word	0x2000d1e4

0002370c <interface_sockets_aux_state_clear>:
   2370c:	4a0d      	ldr	r2, [pc, #52]	; (23744 <interface_sockets_aux_state_clear+0x38>)
   2370e:	b570      	push	{r4, r5, r6, lr}
   23710:	2300      	movs	r3, #0
   23712:	4611      	mov	r1, r2
   23714:	252c      	movs	r5, #44	; 0x2c
   23716:	43c0      	mvns	r0, r0
   23718:	fb05 f403 	mul.w	r4, r5, r3
   2371c:	590c      	ldr	r4, [r1, r4]
   2371e:	b15c      	cbz	r4, 23738 <interface_sockets_aux_state_clear+0x2c>
   23720:	68d4      	ldr	r4, [r2, #12]
   23722:	f024 0608 	bic.w	r6, r4, #8
   23726:	2e02      	cmp	r6, #2
   23728:	d001      	beq.n	2372e <interface_sockets_aux_state_clear+0x22>
   2372a:	2c05      	cmp	r4, #5
   2372c:	d104      	bne.n	23738 <interface_sockets_aux_state_clear+0x2c>
   2372e:	fb05 f603 	mul.w	r6, r5, r3
   23732:	598c      	ldr	r4, [r1, r6]
   23734:	4004      	ands	r4, r0
   23736:	518c      	str	r4, [r1, r6]
   23738:	3301      	adds	r3, #1
   2373a:	2b08      	cmp	r3, #8
   2373c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   23740:	d1ea      	bne.n	23718 <interface_sockets_aux_state_clear+0xc>
   23742:	bd70      	pop	{r4, r5, r6, pc}
   23744:	2000d1e4 	.word	0x2000d1e4

00023748 <interface_from_internal_id_search>:
   23748:	4b0a      	ldr	r3, [pc, #40]	; (23774 <interface_from_internal_id_search+0x2c>)
   2374a:	4602      	mov	r2, r0
   2374c:	b530      	push	{r4, r5, lr}
   2374e:	2000      	movs	r0, #0
   23750:	461c      	mov	r4, r3
   23752:	212c      	movs	r1, #44	; 0x2c
   23754:	fb01 f500 	mul.w	r5, r1, r0
   23758:	5965      	ldr	r5, [r4, r5]
   2375a:	b115      	cbz	r5, 23762 <interface_from_internal_id_search+0x1a>
   2375c:	699d      	ldr	r5, [r3, #24]
   2375e:	4295      	cmp	r5, r2
   23760:	d006      	beq.n	23770 <interface_from_internal_id_search+0x28>
   23762:	3001      	adds	r0, #1
   23764:	2808      	cmp	r0, #8
   23766:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   2376a:	d1f3      	bne.n	23754 <interface_from_internal_id_search+0xc>
   2376c:	f04f 30ff 	mov.w	r0, #4294967295
   23770:	bd30      	pop	{r4, r5, pc}
   23772:	bf00      	nop
   23774:	2000d1e4 	.word	0x2000d1e4

00023778 <interface_socket_from_handle_get>:
   23778:	2807      	cmp	r0, #7
   2377a:	d808      	bhi.n	2378e <interface_socket_from_handle_get+0x16>
   2377c:	232c      	movs	r3, #44	; 0x2c
   2377e:	4343      	muls	r3, r0
   23780:	4a04      	ldr	r2, [pc, #16]	; (23794 <interface_socket_from_handle_get+0x1c>)
   23782:	18d0      	adds	r0, r2, r3
   23784:	58d3      	ldr	r3, [r2, r3]
   23786:	2b00      	cmp	r3, #0
   23788:	bf08      	it	eq
   2378a:	2000      	moveq	r0, #0
   2378c:	4770      	bx	lr
   2378e:	2000      	movs	r0, #0
   23790:	4770      	bx	lr
   23792:	bf00      	nop
   23794:	2000d1e4 	.word	0x2000d1e4

00023798 <interface_socket_setopt>:
   23798:	2807      	cmp	r0, #7
   2379a:	b538      	push	{r3, r4, r5, lr}
   2379c:	d82c      	bhi.n	237f8 <interface_socket_setopt+0x60>
   2379e:	242c      	movs	r4, #44	; 0x2c
   237a0:	4360      	muls	r0, r4
   237a2:	4d16      	ldr	r5, [pc, #88]	; (237fc <interface_socket_setopt+0x64>)
   237a4:	182c      	adds	r4, r5, r0
   237a6:	5828      	ldr	r0, [r5, r0]
   237a8:	b330      	cbz	r0, 237f8 <interface_socket_setopt+0x60>
   237aa:	2901      	cmp	r1, #1
   237ac:	d005      	beq.n	237ba <interface_socket_setopt+0x22>
   237ae:	206d      	movs	r0, #109	; 0x6d
   237b0:	f007 fc85 	bl	2b0be <nrf_modem_os_errno_set>
   237b4:	f04f 30ff 	mov.w	r0, #4294967295
   237b8:	e01b      	b.n	237f2 <interface_socket_setopt+0x5a>
   237ba:	f1a2 0114 	sub.w	r1, r2, #20
   237be:	2901      	cmp	r1, #1
   237c0:	d8f5      	bhi.n	237ae <interface_socket_setopt+0x16>
   237c2:	9904      	ldr	r1, [sp, #16]
   237c4:	2908      	cmp	r1, #8
   237c6:	d115      	bne.n	237f4 <interface_socket_setopt+0x5c>
   237c8:	b1a3      	cbz	r3, 237f4 <interface_socket_setopt+0x5c>
   237ca:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   237ce:	6858      	ldr	r0, [r3, #4]
   237d0:	2100      	movs	r1, #0
   237d2:	fbb0 f0f5 	udiv	r0, r0, r5
   237d6:	681b      	ldr	r3, [r3, #0]
   237d8:	fbe5 0103 	umlal	r0, r1, r5, r3
   237dc:	2901      	cmp	r1, #1
   237de:	bf08      	it	eq
   237e0:	2800      	cmpeq	r0, #0
   237e2:	d301      	bcc.n	237e8 <interface_socket_setopt+0x50>
   237e4:	2021      	movs	r0, #33	; 0x21
   237e6:	e7e3      	b.n	237b0 <interface_socket_setopt+0x18>
   237e8:	2a14      	cmp	r2, #20
   237ea:	bf0c      	ite	eq
   237ec:	6220      	streq	r0, [r4, #32]
   237ee:	6260      	strne	r0, [r4, #36]	; 0x24
   237f0:	2000      	movs	r0, #0
   237f2:	bd38      	pop	{r3, r4, r5, pc}
   237f4:	2016      	movs	r0, #22
   237f6:	e7db      	b.n	237b0 <interface_socket_setopt+0x18>
   237f8:	2009      	movs	r0, #9
   237fa:	e7d9      	b.n	237b0 <interface_socket_setopt+0x18>
   237fc:	2000d1e4 	.word	0x2000d1e4

00023800 <interface_socket_getopt>:
   23800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23802:	4606      	mov	r6, r0
   23804:	2e07      	cmp	r6, #7
   23806:	4618      	mov	r0, r3
   23808:	4615      	mov	r5, r2
   2380a:	9b08      	ldr	r3, [sp, #32]
   2380c:	d841      	bhi.n	23892 <interface_socket_getopt+0x92>
   2380e:	242c      	movs	r4, #44	; 0x2c
   23810:	4374      	muls	r4, r6
   23812:	4f21      	ldr	r7, [pc, #132]	; (23898 <interface_socket_getopt+0x98>)
   23814:	593a      	ldr	r2, [r7, r4]
   23816:	193e      	adds	r6, r7, r4
   23818:	2a00      	cmp	r2, #0
   2381a:	d03a      	beq.n	23892 <interface_socket_getopt+0x92>
   2381c:	2901      	cmp	r1, #1
   2381e:	d005      	beq.n	2382c <interface_socket_getopt+0x2c>
   23820:	206d      	movs	r0, #109	; 0x6d
   23822:	f007 fc4c 	bl	2b0be <nrf_modem_os_errno_set>
   23826:	f04f 30ff 	mov.w	r0, #4294967295
   2382a:	e012      	b.n	23852 <interface_socket_getopt+0x52>
   2382c:	b100      	cbz	r0, 23830 <interface_socket_getopt+0x30>
   2382e:	b90b      	cbnz	r3, 23834 <interface_socket_getopt+0x34>
   23830:	2016      	movs	r0, #22
   23832:	e7f6      	b.n	23822 <interface_socket_getopt+0x22>
   23834:	2d04      	cmp	r5, #4
   23836:	d10e      	bne.n	23856 <interface_socket_getopt+0x56>
   23838:	681a      	ldr	r2, [r3, #0]
   2383a:	2a00      	cmp	r2, #0
   2383c:	d0f8      	beq.n	23830 <interface_socket_getopt+0x30>
   2383e:	2a04      	cmp	r2, #4
   23840:	bf28      	it	cs
   23842:	2204      	movcs	r2, #4
   23844:	3404      	adds	r4, #4
   23846:	601a      	str	r2, [r3, #0]
   23848:	1939      	adds	r1, r7, r4
   2384a:	f009 f9c2 	bl	2cbd2 <memcpy>
   2384e:	2000      	movs	r0, #0
   23850:	6070      	str	r0, [r6, #4]
   23852:	b003      	add	sp, #12
   23854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23856:	f1a5 0214 	sub.w	r2, r5, #20
   2385a:	2a01      	cmp	r2, #1
   2385c:	d8e0      	bhi.n	23820 <interface_socket_getopt+0x20>
   2385e:	681a      	ldr	r2, [r3, #0]
   23860:	2a00      	cmp	r2, #0
   23862:	d0e5      	beq.n	23830 <interface_socket_getopt+0x30>
   23864:	2a08      	cmp	r2, #8
   23866:	bf28      	it	cs
   23868:	2208      	movcs	r2, #8
   2386a:	601a      	str	r2, [r3, #0]
   2386c:	e9d6 4308 	ldrd	r4, r3, [r6, #32]
   23870:	2d14      	cmp	r5, #20
   23872:	bf18      	it	ne
   23874:	461c      	movne	r4, r3
   23876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2387a:	fbb4 f1f3 	udiv	r1, r4, r3
   2387e:	9100      	str	r1, [sp, #0]
   23880:	fb03 4111 	mls	r1, r3, r1, r4
   23884:	434b      	muls	r3, r1
   23886:	4669      	mov	r1, sp
   23888:	9301      	str	r3, [sp, #4]
   2388a:	f009 f9a2 	bl	2cbd2 <memcpy>
   2388e:	2000      	movs	r0, #0
   23890:	e7df      	b.n	23852 <interface_socket_getopt+0x52>
   23892:	2009      	movs	r0, #9
   23894:	e7c5      	b.n	23822 <interface_socket_getopt+0x22>
   23896:	bf00      	nop
   23898:	2000d1e4 	.word	0x2000d1e4

0002389c <interface_socket_fcntl>:
   2389c:	2807      	cmp	r0, #7
   2389e:	b510      	push	{r4, lr}
   238a0:	d82c      	bhi.n	238fc <interface_socket_fcntl+0x60>
   238a2:	232c      	movs	r3, #44	; 0x2c
   238a4:	4343      	muls	r3, r0
   238a6:	4c16      	ldr	r4, [pc, #88]	; (23900 <interface_socket_fcntl+0x64>)
   238a8:	58e0      	ldr	r0, [r4, r3]
   238aa:	b338      	cbz	r0, 238fc <interface_socket_fcntl+0x60>
   238ac:	2901      	cmp	r1, #1
   238ae:	d11d      	bne.n	238ec <interface_socket_fcntl+0x50>
   238b0:	f012 0001 	ands.w	r0, r2, #1
   238b4:	58e2      	ldr	r2, [r4, r3]
   238b6:	d004      	beq.n	238c2 <interface_socket_fcntl+0x26>
   238b8:	2000      	movs	r0, #0
   238ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   238be:	50e2      	str	r2, [r4, r3]
   238c0:	bd10      	pop	{r4, pc}
   238c2:	0092      	lsls	r2, r2, #2
   238c4:	d407      	bmi.n	238d6 <interface_socket_fcntl+0x3a>
   238c6:	58e2      	ldr	r2, [r4, r3]
   238c8:	b292      	uxth	r2, r2
   238ca:	2a0a      	cmp	r2, #10
   238cc:	d003      	beq.n	238d6 <interface_socket_fcntl+0x3a>
   238ce:	58e2      	ldr	r2, [r4, r3]
   238d0:	b292      	uxth	r2, r2
   238d2:	2a0b      	cmp	r2, #11
   238d4:	d105      	bne.n	238e2 <interface_socket_fcntl+0x46>
   238d6:	200b      	movs	r0, #11
   238d8:	f007 fbf1 	bl	2b0be <nrf_modem_os_errno_set>
   238dc:	f04f 30ff 	mov.w	r0, #4294967295
   238e0:	e7ee      	b.n	238c0 <interface_socket_fcntl+0x24>
   238e2:	58e2      	ldr	r2, [r4, r3]
   238e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   238e8:	50e2      	str	r2, [r4, r3]
   238ea:	e7e9      	b.n	238c0 <interface_socket_fcntl+0x24>
   238ec:	2902      	cmp	r1, #2
   238ee:	d103      	bne.n	238f8 <interface_socket_fcntl+0x5c>
   238f0:	58e0      	ldr	r0, [r4, r3]
   238f2:	f3c0 7000 	ubfx	r0, r0, #28, #1
   238f6:	e7e3      	b.n	238c0 <interface_socket_fcntl+0x24>
   238f8:	2016      	movs	r0, #22
   238fa:	e7ed      	b.n	238d8 <interface_socket_fcntl+0x3c>
   238fc:	2009      	movs	r0, #9
   238fe:	e7eb      	b.n	238d8 <interface_socket_fcntl+0x3c>
   23900:	2000d1e4 	.word	0x2000d1e4

00023904 <rpc_error_to_nrf_errno>:
   23904:	286a      	cmp	r0, #106	; 0x6a
   23906:	bf9a      	itte	ls
   23908:	4b01      	ldrls	r3, [pc, #4]	; (23910 <rpc_error_to_nrf_errno+0xc>)
   2390a:	5c18      	ldrbls	r0, [r3, r0]
   2390c:	205f      	movhi	r0, #95	; 0x5f
   2390e:	4770      	bx	lr
   23910:	000309cf 	.word	0x000309cf

00023914 <rpc_error_to_nrf_gai_errno>:
   23914:	2805      	cmp	r0, #5
   23916:	d013      	beq.n	23940 <rpc_error_to_nrf_gai_errno+0x2c>
   23918:	d807      	bhi.n	2392a <rpc_error_to_nrf_gai_errno+0x16>
   2391a:	b170      	cbz	r0, 2393a <rpc_error_to_nrf_gai_errno+0x26>
   2391c:	4b0b      	ldr	r3, [pc, #44]	; (2394c <rpc_error_to_nrf_gai_errno+0x38>)
   2391e:	5c1b      	ldrb	r3, [r3, r0]
   23920:	4a0b      	ldr	r2, [pc, #44]	; (23950 <rpc_error_to_nrf_gai_errno+0x3c>)
   23922:	f240 1015 	movw	r0, #277	; 0x115
   23926:	6013      	str	r3, [r2, #0]
   23928:	4770      	bx	lr
   2392a:	2806      	cmp	r0, #6
   2392c:	d00b      	beq.n	23946 <rpc_error_to_nrf_gai_errno+0x32>
   2392e:	280d      	cmp	r0, #13
   23930:	d009      	beq.n	23946 <rpc_error_to_nrf_gai_errno+0x32>
   23932:	286a      	cmp	r0, #106	; 0x6a
   23934:	d9f2      	bls.n	2391c <rpc_error_to_nrf_gai_errno+0x8>
   23936:	235f      	movs	r3, #95	; 0x5f
   23938:	e7f2      	b.n	23920 <rpc_error_to_nrf_gai_errno+0xc>
   2393a:	4b05      	ldr	r3, [pc, #20]	; (23950 <rpc_error_to_nrf_gai_errno+0x3c>)
   2393c:	6018      	str	r0, [r3, #0]
   2393e:	4770      	bx	lr
   23940:	f44f 708a 	mov.w	r0, #276	; 0x114
   23944:	4770      	bx	lr
   23946:	f240 1011 	movw	r0, #273	; 0x111
   2394a:	4770      	bx	lr
   2394c:	000309cf 	.word	0x000309cf
   23950:	2000d34c 	.word	0x2000d34c

00023954 <ip_interface_init>:
   23954:	b510      	push	{r4, lr}
   23956:	2400      	movs	r4, #0
   23958:	4b06      	ldr	r3, [pc, #24]	; (23974 <ip_interface_init+0x20>)
   2395a:	2220      	movs	r2, #32
   2395c:	601c      	str	r4, [r3, #0]
   2395e:	4b06      	ldr	r3, [pc, #24]	; (23978 <ip_interface_init+0x24>)
   23960:	4621      	mov	r1, r4
   23962:	4806      	ldr	r0, [pc, #24]	; (2397c <ip_interface_init+0x28>)
   23964:	601c      	str	r4, [r3, #0]
   23966:	f009 f941 	bl	2cbec <memset>
   2396a:	2201      	movs	r2, #1
   2396c:	4b04      	ldr	r3, [pc, #16]	; (23980 <ip_interface_init+0x2c>)
   2396e:	4620      	mov	r0, r4
   23970:	701a      	strb	r2, [r3, #0]
   23972:	bd10      	pop	{r4, pc}
   23974:	2000d358 	.word	0x2000d358
   23978:	2000d354 	.word	0x2000d354
   2397c:	2000d35c 	.word	0x2000d35c
   23980:	2000da0e 	.word	0x2000da0e

00023984 <ip_interface_open>:
   23984:	b5f0      	push	{r4, r5, r6, r7, lr}
   23986:	2302      	movs	r3, #2
   23988:	460d      	mov	r5, r1
   2398a:	4611      	mov	r1, r2
   2398c:	2200      	movs	r2, #0
   2398e:	f04f 34ff 	mov.w	r4, #4294967295
   23992:	b085      	sub	sp, #20
   23994:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23998:	4b35      	ldr	r3, [pc, #212]	; (23a70 <ip_interface_open+0xec>)
   2399a:	4606      	mov	r6, r0
   2399c:	781b      	ldrb	r3, [r3, #0]
   2399e:	9403      	str	r4, [sp, #12]
   239a0:	b92b      	cbnz	r3, 239ae <ip_interface_open+0x2a>
   239a2:	2075      	movs	r0, #117	; 0x75
   239a4:	f007 fb8b 	bl	2b0be <nrf_modem_os_errno_set>
   239a8:	4620      	mov	r0, r4
   239aa:	b005      	add	sp, #20
   239ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239ae:	f020 0308 	bic.w	r3, r0, #8
   239b2:	2b02      	cmp	r3, #2
   239b4:	d003      	beq.n	239be <ip_interface_open+0x3a>
   239b6:	2805      	cmp	r0, #5
   239b8:	d001      	beq.n	239be <ip_interface_open+0x3a>
   239ba:	206a      	movs	r0, #106	; 0x6a
   239bc:	e7f2      	b.n	239a4 <ip_interface_open+0x20>
   239be:	1e6b      	subs	r3, r5, #1
   239c0:	2b02      	cmp	r3, #2
   239c2:	d814      	bhi.n	239ee <ip_interface_open+0x6a>
   239c4:	4628      	mov	r0, r5
   239c6:	aa02      	add	r2, sp, #8
   239c8:	f008 f952 	bl	2bc70 <protocol_verify>
   239cc:	4607      	mov	r7, r0
   239ce:	2800      	cmp	r0, #0
   239d0:	d14b      	bne.n	23a6a <ip_interface_open+0xe6>
   239d2:	4629      	mov	r1, r5
   239d4:	4a27      	ldr	r2, [pc, #156]	; (23a74 <ip_interface_open+0xf0>)
   239d6:	a801      	add	r0, sp, #4
   239d8:	f7ff fe08 	bl	235ec <interface_socket_allocate>
   239dc:	9b01      	ldr	r3, [sp, #4]
   239de:	4604      	mov	r4, r0
   239e0:	b95b      	cbnz	r3, 239fa <ip_interface_open+0x76>
   239e2:	2669      	movs	r6, #105	; 0x69
   239e4:	4620      	mov	r0, r4
   239e6:	f7ff fe27 	bl	23638 <interface_socket_free>
   239ea:	4630      	mov	r0, r6
   239ec:	e000      	b.n	239f0 <ip_interface_open+0x6c>
   239ee:	2016      	movs	r0, #22
   239f0:	f007 fb65 	bl	2b0be <nrf_modem_os_errno_set>
   239f4:	f04f 34ff 	mov.w	r4, #4294967295
   239f8:	e7d6      	b.n	239a8 <ip_interface_open+0x24>
   239fa:	9a02      	ldr	r2, [sp, #8]
   239fc:	e9c3 6503 	strd	r6, r5, [r3, #12]
   23a00:	615a      	str	r2, [r3, #20]
   23a02:	f04f 31ff 	mov.w	r1, #4294967295
   23a06:	f247 0201 	movw	r2, #28673	; 0x7001
   23a0a:	463b      	mov	r3, r7
   23a0c:	f008 f978 	bl	2bd00 <ip_interface_request_create>
   23a10:	4602      	mov	r2, r0
   23a12:	2800      	cmp	r0, #0
   23a14:	d0e5      	beq.n	239e2 <ip_interface_open+0x5e>
   23a16:	6883      	ldr	r3, [r0, #8]
   23a18:	3e02      	subs	r6, #2
   23a1a:	2e08      	cmp	r6, #8
   23a1c:	f103 030c 	add.w	r3, r3, #12
   23a20:	6083      	str	r3, [r0, #8]
   23a22:	bf98      	it	ls
   23a24:	4b14      	ldrls	r3, [pc, #80]	; (23a78 <ip_interface_open+0xf4>)
   23a26:	f247 0101 	movw	r1, #28673	; 0x7001
   23a2a:	bf98      	it	ls
   23a2c:	579f      	ldrsbls	r7, [r3, r6]
   23a2e:	9b02      	ldr	r3, [sp, #8]
   23a30:	6147      	str	r7, [r0, #20]
   23a32:	61c3      	str	r3, [r0, #28]
   23a34:	6185      	str	r5, [r0, #24]
   23a36:	2004      	movs	r0, #4
   23a38:	f008 f8c6 	bl	2bbc8 <rpc_client_request_send>
   23a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23a40:	2102      	movs	r1, #2
   23a42:	4620      	mov	r0, r4
   23a44:	ab03      	add	r3, sp, #12
   23a46:	f008 f96e 	bl	2bd26 <ip_interface_wait>
   23a4a:	4606      	mov	r6, r0
   23a4c:	2800      	cmp	r0, #0
   23a4e:	d1c9      	bne.n	239e4 <ip_interface_open+0x60>
   23a50:	3d02      	subs	r5, #2
   23a52:	2d01      	cmp	r5, #1
   23a54:	d8a8      	bhi.n	239a8 <ip_interface_open+0x24>
   23a56:	9b01      	ldr	r3, [sp, #4]
   23a58:	681a      	ldr	r2, [r3, #0]
   23a5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   23a5e:	601a      	str	r2, [r3, #0]
   23a60:	681a      	ldr	r2, [r3, #0]
   23a62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   23a66:	601a      	str	r2, [r3, #0]
   23a68:	e79e      	b.n	239a8 <ip_interface_open+0x24>
   23a6a:	4604      	mov	r4, r0
   23a6c:	e79c      	b.n	239a8 <ip_interface_open+0x24>
   23a6e:	bf00      	nop
   23a70:	2000da0e 	.word	0x2000da0e
   23a74:	0002bc59 	.word	0x0002bc59
   23a78:	000309c1 	.word	0x000309c1

00023a7c <ip_interface_close>:
   23a7c:	f04f 33ff 	mov.w	r3, #4294967295
   23a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23a82:	4605      	mov	r5, r0
   23a84:	9301      	str	r3, [sp, #4]
   23a86:	f7ff fe77 	bl	23778 <interface_socket_from_handle_get>
   23a8a:	4604      	mov	r4, r0
   23a8c:	b388      	cbz	r0, 23af2 <ip_interface_close+0x76>
   23a8e:	f247 0209 	movw	r2, #28681	; 0x7009
   23a92:	6981      	ldr	r1, [r0, #24]
   23a94:	2300      	movs	r3, #0
   23a96:	4628      	mov	r0, r5
   23a98:	f008 f932 	bl	2bd00 <ip_interface_request_create>
   23a9c:	4602      	mov	r2, r0
   23a9e:	b370      	cbz	r0, 23afe <ip_interface_close+0x82>
   23aa0:	6823      	ldr	r3, [r4, #0]
   23aa2:	f247 0109 	movw	r1, #28681	; 0x7009
   23aa6:	0c1b      	lsrs	r3, r3, #16
   23aa8:	041b      	lsls	r3, r3, #16
   23aaa:	f043 030d 	orr.w	r3, r3, #13
   23aae:	6023      	str	r3, [r4, #0]
   23ab0:	6823      	ldr	r3, [r4, #0]
   23ab2:	2004      	movs	r0, #4
   23ab4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23ab8:	6023      	str	r3, [r4, #0]
   23aba:	6823      	ldr	r3, [r4, #0]
   23abc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23ac0:	6023      	str	r3, [r4, #0]
   23ac2:	4c10      	ldr	r4, [pc, #64]	; (23b04 <ip_interface_close+0x88>)
   23ac4:	f008 f880 	bl	2bbc8 <rpc_client_request_send>
   23ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23acc:	210e      	movs	r1, #14
   23ace:	4628      	mov	r0, r5
   23ad0:	ab01      	add	r3, sp, #4
   23ad2:	f008 f928 	bl	2bd26 <ip_interface_wait>
   23ad6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   23ada:	b120      	cbz	r0, 23ae6 <ip_interface_close+0x6a>
   23adc:	f008 f87b 	bl	2bbd6 <rpc_client_message_free>
   23ae0:	2300      	movs	r3, #0
   23ae2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   23ae6:	4628      	mov	r0, r5
   23ae8:	f7ff fda6 	bl	23638 <interface_socket_free>
   23aec:	2000      	movs	r0, #0
   23aee:	b003      	add	sp, #12
   23af0:	bd30      	pop	{r4, r5, pc}
   23af2:	2009      	movs	r0, #9
   23af4:	f007 fae3 	bl	2b0be <nrf_modem_os_errno_set>
   23af8:	f04f 30ff 	mov.w	r0, #4294967295
   23afc:	e7f7      	b.n	23aee <ip_interface_close+0x72>
   23afe:	200c      	movs	r0, #12
   23b00:	e7f8      	b.n	23af4 <ip_interface_close+0x78>
   23b02:	bf00      	nop
   23b04:	2000d35c 	.word	0x2000d35c

00023b08 <ip_interface_sendto>:
   23b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b0c:	2700      	movs	r7, #0
   23b0e:	469a      	mov	sl, r3
   23b10:	f04f 36ff 	mov.w	r6, #4294967295
   23b14:	2364      	movs	r3, #100	; 0x64
   23b16:	b089      	sub	sp, #36	; 0x24
   23b18:	4681      	mov	r9, r0
   23b1a:	4615      	mov	r5, r2
   23b1c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   23b20:	9102      	str	r1, [sp, #8]
   23b22:	f8ad 7010 	strh.w	r7, [sp, #16]
   23b26:	f8ad 7012 	strh.w	r7, [sp, #18]
   23b2a:	9605      	str	r6, [sp, #20]
   23b2c:	9307      	str	r3, [sp, #28]
   23b2e:	f7ff fe23 	bl	23778 <interface_socket_from_handle_get>
   23b32:	4604      	mov	r4, r0
   23b34:	b930      	cbnz	r0, 23b44 <ip_interface_sendto+0x3c>
   23b36:	2009      	movs	r0, #9
   23b38:	f007 fac1 	bl	2b0be <nrf_modem_os_errno_set>
   23b3c:	4630      	mov	r0, r6
   23b3e:	b009      	add	sp, #36	; 0x24
   23b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b44:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   23b48:	dd01      	ble.n	23b4e <ip_interface_sendto+0x46>
   23b4a:	207a      	movs	r0, #122	; 0x7a
   23b4c:	e7f4      	b.n	23b38 <ip_interface_sendto+0x30>
   23b4e:	f1ba 0f00 	cmp.w	sl, #0
   23b52:	d004      	beq.n	23b5e <ip_interface_sendto+0x56>
   23b54:	f1ba 0f02 	cmp.w	sl, #2
   23b58:	d006      	beq.n	23b68 <ip_interface_sendto+0x60>
   23b5a:	205f      	movs	r0, #95	; 0x5f
   23b5c:	e7ec      	b.n	23b38 <ip_interface_sendto+0x30>
   23b5e:	6807      	ldr	r7, [r0, #0]
   23b60:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   23b64:	f3c7 7700 	ubfx	r7, r7, #28, #1
   23b68:	2d00      	cmp	r5, #0
   23b6a:	dd07      	ble.n	23b7c <ip_interface_sendto+0x74>
   23b6c:	9b02      	ldr	r3, [sp, #8]
   23b6e:	b92b      	cbnz	r3, 23b7c <ip_interface_sendto+0x74>
   23b70:	200e      	movs	r0, #14
   23b72:	f007 faa4 	bl	2b0be <nrf_modem_os_errno_set>
   23b76:	f04f 36ff 	mov.w	r6, #4294967295
   23b7a:	e7df      	b.n	23b3c <ip_interface_sendto+0x34>
   23b7c:	6923      	ldr	r3, [r4, #16]
   23b7e:	f1bb 0f00 	cmp.w	fp, #0
   23b82:	d012      	beq.n	23baa <ip_interface_sendto+0xa2>
   23b84:	2b01      	cmp	r3, #1
   23b86:	d101      	bne.n	23b8c <ip_interface_sendto+0x84>
   23b88:	207f      	movs	r0, #127	; 0x7f
   23b8a:	e7f2      	b.n	23b72 <ip_interface_sendto+0x6a>
   23b8c:	68e2      	ldr	r2, [r4, #12]
   23b8e:	f8db 3004 	ldr.w	r3, [fp, #4]
   23b92:	429a      	cmp	r2, r3
   23b94:	d001      	beq.n	23b9a <ip_interface_sendto+0x92>
   23b96:	206a      	movs	r0, #106	; 0x6a
   23b98:	e7eb      	b.n	23b72 <ip_interface_sendto+0x6a>
   23b9a:	f89b 3000 	ldrb.w	r3, [fp]
   23b9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23ba0:	4293      	cmp	r3, r2
   23ba2:	f000 80c5 	beq.w	23d30 <ip_interface_sendto+0x228>
   23ba6:	2016      	movs	r0, #22
   23ba8:	e7e3      	b.n	23b72 <ip_interface_sendto+0x6a>
   23baa:	2b02      	cmp	r3, #2
   23bac:	d10f      	bne.n	23bce <ip_interface_sendto+0xc6>
   23bae:	6963      	ldr	r3, [r4, #20]
   23bb0:	2b02      	cmp	r3, #2
   23bb2:	d103      	bne.n	23bbc <ip_interface_sendto+0xb4>
   23bb4:	6823      	ldr	r3, [r4, #0]
   23bb6:	b29b      	uxth	r3, r3
   23bb8:	2b05      	cmp	r3, #5
   23bba:	e005      	b.n	23bc8 <ip_interface_sendto+0xc0>
   23bbc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   23bc0:	d10d      	bne.n	23bde <ip_interface_sendto+0xd6>
   23bc2:	6823      	ldr	r3, [r4, #0]
   23bc4:	b29b      	uxth	r3, r3
   23bc6:	2b0c      	cmp	r3, #12
   23bc8:	d009      	beq.n	23bde <ip_interface_sendto+0xd6>
   23bca:	2080      	movs	r0, #128	; 0x80
   23bcc:	e7d1      	b.n	23b72 <ip_interface_sendto+0x6a>
   23bce:	2b01      	cmp	r3, #1
   23bd0:	d105      	bne.n	23bde <ip_interface_sendto+0xd6>
   23bd2:	6963      	ldr	r3, [r4, #20]
   23bd4:	2b01      	cmp	r3, #1
   23bd6:	d0ed      	beq.n	23bb4 <ip_interface_sendto+0xac>
   23bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   23bdc:	e7f0      	b.n	23bc0 <ip_interface_sendto+0xb8>
   23bde:	f247 0806 	movw	r8, #28678	; 0x7006
   23be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23be4:	2b00      	cmp	r3, #0
   23be6:	bf08      	it	eq
   23be8:	f04f 33ff 	moveq.w	r3, #4294967295
   23bec:	9306      	str	r3, [sp, #24]
   23bee:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   23bf2:	9303      	str	r3, [sp, #12]
   23bf4:	6823      	ldr	r3, [r4, #0]
   23bf6:	0319      	lsls	r1, r3, #12
   23bf8:	d501      	bpl.n	23bfe <ip_interface_sendto+0xf6>
   23bfa:	68a0      	ldr	r0, [r4, #8]
   23bfc:	e7b9      	b.n	23b72 <ip_interface_sendto+0x6a>
   23bfe:	6820      	ldr	r0, [r4, #0]
   23c00:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   23c04:	d107      	bne.n	23c16 <ip_interface_sendto+0x10e>
   23c06:	b90f      	cbnz	r7, 23c0c <ip_interface_sendto+0x104>
   23c08:	200b      	movs	r0, #11
   23c0a:	e7b2      	b.n	23b72 <ip_interface_sendto+0x6a>
   23c0c:	a906      	add	r1, sp, #24
   23c0e:	f7fa fd2f 	bl	1e670 <nrf_modem_os_timedwait>
   23c12:	2874      	cmp	r0, #116	; 0x74
   23c14:	d0f8      	beq.n	23c08 <ip_interface_sendto+0x100>
   23c16:	6823      	ldr	r3, [r4, #0]
   23c18:	039a      	lsls	r2, r3, #14
   23c1a:	d5eb      	bpl.n	23bf4 <ip_interface_sendto+0xec>
   23c1c:	4628      	mov	r0, r5
   23c1e:	f007 ffcd 	bl	2bbbc <rpc_client_request_alloc>
   23c22:	4606      	mov	r6, r0
   23c24:	2800      	cmp	r0, #0
   23c26:	d133      	bne.n	23c90 <ip_interface_sendto+0x188>
   23c28:	b927      	cbnz	r7, 23c34 <ip_interface_sendto+0x12c>
   23c2a:	a907      	add	r1, sp, #28
   23c2c:	2000      	movs	r0, #0
   23c2e:	f7fa fd1f 	bl	1e670 <nrf_modem_os_timedwait>
   23c32:	e7e9      	b.n	23c08 <ip_interface_sendto+0x100>
   23c34:	a906      	add	r1, sp, #24
   23c36:	f7fa fd1b 	bl	1e670 <nrf_modem_os_timedwait>
   23c3a:	2800      	cmp	r0, #0
   23c3c:	d0ee      	beq.n	23c1c <ip_interface_sendto+0x114>
   23c3e:	e7e3      	b.n	23c08 <ip_interface_sendto+0x100>
   23c40:	a905      	add	r1, sp, #20
   23c42:	f7fa fd15 	bl	1e670 <nrf_modem_os_timedwait>
   23c46:	e05b      	b.n	23d00 <ip_interface_sendto+0x1f8>
   23c48:	f007 ffc5 	bl	2bbd6 <rpc_client_message_free>
   23c4c:	2300      	movs	r3, #0
   23c4e:	4a3a      	ldr	r2, [pc, #232]	; (23d38 <ip_interface_sendto+0x230>)
   23c50:	2e01      	cmp	r6, #1
   23c52:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   23c56:	d001      	beq.n	23c5c <ip_interface_sendto+0x154>
   23c58:	2e12      	cmp	r6, #18
   23c5a:	d10e      	bne.n	23c7a <ip_interface_sendto+0x172>
   23c5c:	4b37      	ldr	r3, [pc, #220]	; (23d3c <ip_interface_sendto+0x234>)
   23c5e:	781b      	ldrb	r3, [r3, #0]
   23c60:	b147      	cbz	r7, 23c74 <ip_interface_sendto+0x16c>
   23c62:	2b00      	cmp	r3, #0
   23c64:	d1c6      	bne.n	23bf4 <ip_interface_sendto+0xec>
   23c66:	2000      	movs	r0, #0
   23c68:	a906      	add	r1, sp, #24
   23c6a:	f7fa fd01 	bl	1e670 <nrf_modem_os_timedwait>
   23c6e:	2800      	cmp	r0, #0
   23c70:	d0c0      	beq.n	23bf4 <ip_interface_sendto+0xec>
   23c72:	e7c9      	b.n	23c08 <ip_interface_sendto+0x100>
   23c74:	2b00      	cmp	r3, #0
   23c76:	d1c7      	bne.n	23c08 <ip_interface_sendto+0x100>
   23c78:	e7d7      	b.n	23c2a <ip_interface_sendto+0x122>
   23c7a:	2e03      	cmp	r6, #3
   23c7c:	d102      	bne.n	23c84 <ip_interface_sendto+0x17c>
   23c7e:	2f00      	cmp	r7, #0
   23c80:	d1f1      	bne.n	23c66 <ip_interface_sendto+0x15e>
   23c82:	e7d2      	b.n	23c2a <ip_interface_sendto+0x122>
   23c84:	2e6a      	cmp	r6, #106	; 0x6a
   23c86:	bf96      	itet	ls
   23c88:	4b2d      	ldrls	r3, [pc, #180]	; (23d40 <ip_interface_sendto+0x238>)
   23c8a:	205f      	movhi	r0, #95	; 0x5f
   23c8c:	5d98      	ldrbls	r0, [r3, r6]
   23c8e:	e770      	b.n	23b72 <ip_interface_sendto+0x6a>
   23c90:	230c      	movs	r3, #12
   23c92:	2200      	movs	r2, #0
   23c94:	7203      	strb	r3, [r0, #8]
   23c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23c98:	7242      	strb	r2, [r0, #9]
   23c9a:	7282      	strb	r2, [r0, #10]
   23c9c:	72c2      	strb	r2, [r0, #11]
   23c9e:	f8c0 a014 	str.w	sl, [r0, #20]
   23ca2:	b11b      	cbz	r3, 23cac <ip_interface_sendto+0x1a4>
   23ca4:	ea4a 0303 	orr.w	r3, sl, r3
   23ca8:	6173      	str	r3, [r6, #20]
   23caa:	62a2      	str	r2, [r4, #40]	; 0x28
   23cac:	f1bb 0f00 	cmp.w	fp, #0
   23cb0:	d015      	beq.n	23cde <ip_interface_sendto+0x1d6>
   23cb2:	f106 031c 	add.w	r3, r6, #28
   23cb6:	9301      	str	r3, [sp, #4]
   23cb8:	f10d 0312 	add.w	r3, sp, #18
   23cbc:	9300      	str	r3, [sp, #0]
   23cbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23cc0:	ab04      	add	r3, sp, #16
   23cc2:	4659      	mov	r1, fp
   23cc4:	68e0      	ldr	r0, [r4, #12]
   23cc6:	f007 fff1 	bl	2bcac <ip_addr_parse>
   23cca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   23cce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   23cd2:	8332      	strh	r2, [r6, #24]
   23cd4:	68b2      	ldr	r2, [r6, #8]
   23cd6:	8373      	strh	r3, [r6, #26]
   23cd8:	3304      	adds	r3, #4
   23cda:	4413      	add	r3, r2
   23cdc:	60b3      	str	r3, [r6, #8]
   23cde:	69a3      	ldr	r3, [r4, #24]
   23ce0:	6075      	str	r5, [r6, #4]
   23ce2:	6133      	str	r3, [r6, #16]
   23ce4:	9b03      	ldr	r3, [sp, #12]
   23ce6:	60f3      	str	r3, [r6, #12]
   23ce8:	9b02      	ldr	r3, [sp, #8]
   23cea:	b123      	cbz	r3, 23cf6 <ip_interface_sendto+0x1ee>
   23cec:	462a      	mov	r2, r5
   23cee:	4619      	mov	r1, r3
   23cf0:	6830      	ldr	r0, [r6, #0]
   23cf2:	f008 ff6e 	bl	2cbd2 <memcpy>
   23cf6:	4632      	mov	r2, r6
   23cf8:	4641      	mov	r1, r8
   23cfa:	2004      	movs	r0, #4
   23cfc:	f007 ff64 	bl	2bbc8 <rpc_client_request_send>
   23d00:	4b0d      	ldr	r3, [pc, #52]	; (23d38 <ip_interface_sendto+0x230>)
   23d02:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   23d06:	2800      	cmp	r0, #0
   23d08:	d09a      	beq.n	23c40 <ip_interface_sendto+0x138>
   23d0a:	6946      	ldr	r6, [r0, #20]
   23d0c:	2e00      	cmp	r6, #0
   23d0e:	d19b      	bne.n	23c48 <ip_interface_sendto+0x140>
   23d10:	6823      	ldr	r3, [r4, #0]
   23d12:	011b      	lsls	r3, r3, #4
   23d14:	bf49      	itett	mi
   23d16:	6823      	ldrmi	r3, [r4, #0]
   23d18:	6985      	ldrpl	r5, [r0, #24]
   23d1a:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   23d1e:	6023      	strmi	r3, [r4, #0]
   23d20:	f007 ff59 	bl	2bbd6 <rpc_client_message_free>
   23d24:	2300      	movs	r3, #0
   23d26:	4a04      	ldr	r2, [pc, #16]	; (23d38 <ip_interface_sendto+0x230>)
   23d28:	462e      	mov	r6, r5
   23d2a:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   23d2e:	e705      	b.n	23b3c <ip_interface_sendto+0x34>
   23d30:	f247 0807 	movw	r8, #28679	; 0x7007
   23d34:	e755      	b.n	23be2 <ip_interface_sendto+0xda>
   23d36:	bf00      	nop
   23d38:	2000d35c 	.word	0x2000d35c
   23d3c:	2000da0d 	.word	0x2000da0d
   23d40:	000309cf 	.word	0x000309cf

00023d44 <ip_interface_socketoption_get>:
   23d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d48:	461f      	mov	r7, r3
   23d4a:	f04f 33ff 	mov.w	r3, #4294967295
   23d4e:	b085      	sub	sp, #20
   23d50:	9303      	str	r3, [sp, #12]
   23d52:	680b      	ldr	r3, [r1, #0]
   23d54:	4606      	mov	r6, r0
   23d56:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   23d5a:	025d      	lsls	r5, r3, #9
   23d5c:	460c      	mov	r4, r1
   23d5e:	4691      	mov	r9, r2
   23d60:	d461      	bmi.n	23e26 <ip_interface_socketoption_get+0xe2>
   23d62:	680b      	ldr	r3, [r1, #0]
   23d64:	0219      	lsls	r1, r3, #8
   23d66:	d45e      	bmi.n	23e26 <ip_interface_socketoption_get+0xe2>
   23d68:	6823      	ldr	r3, [r4, #0]
   23d6a:	01da      	lsls	r2, r3, #7
   23d6c:	d45b      	bmi.n	23e26 <ip_interface_socketoption_get+0xe2>
   23d6e:	6823      	ldr	r3, [r4, #0]
   23d70:	019b      	lsls	r3, r3, #6
   23d72:	d458      	bmi.n	23e26 <ip_interface_socketoption_get+0xe2>
   23d74:	6823      	ldr	r3, [r4, #0]
   23d76:	f247 0204 	movw	r2, #28676	; 0x7004
   23d7a:	9301      	str	r3, [sp, #4]
   23d7c:	6823      	ldr	r3, [r4, #0]
   23d7e:	69a1      	ldr	r1, [r4, #24]
   23d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23d84:	6023      	str	r3, [r4, #0]
   23d86:	f8d8 3000 	ldr.w	r3, [r8]
   23d8a:	f007 ffb9 	bl	2bd00 <ip_interface_request_create>
   23d8e:	4605      	mov	r5, r0
   23d90:	2800      	cmp	r0, #0
   23d92:	d045      	beq.n	23e20 <ip_interface_socketoption_get+0xdc>
   23d94:	6883      	ldr	r3, [r0, #8]
   23d96:	4602      	mov	r2, r0
   23d98:	3308      	adds	r3, #8
   23d9a:	6083      	str	r3, [r0, #8]
   23d9c:	f8c0 9014 	str.w	r9, [r0, #20]
   23da0:	f247 0104 	movw	r1, #28676	; 0x7004
   23da4:	f8d0 9000 	ldr.w	r9, [r0]
   23da8:	6187      	str	r7, [r0, #24]
   23daa:	2004      	movs	r0, #4
   23dac:	f007 ff0c 	bl	2bbc8 <rpc_client_request_send>
   23db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   23db4:	4630      	mov	r0, r6
   23db6:	4611      	mov	r1, r2
   23db8:	ab03      	add	r3, sp, #12
   23dba:	f007 ffb4 	bl	2bd26 <ip_interface_wait>
   23dbe:	4683      	mov	fp, r0
   23dc0:	b9b8      	cbnz	r0, 23df2 <ip_interface_socketoption_get+0xae>
   23dc2:	4f1a      	ldr	r7, [pc, #104]	; (23e2c <ip_interface_socketoption_get+0xe8>)
   23dc4:	f8d8 0000 	ldr.w	r0, [r8]
   23dc8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   23dcc:	b1e9      	cbz	r1, 23e0a <ip_interface_socketoption_get+0xc6>
   23dce:	684a      	ldr	r2, [r1, #4]
   23dd0:	4282      	cmp	r2, r0
   23dd2:	bf28      	it	cs
   23dd4:	4602      	movcs	r2, r0
   23dd6:	f8c8 2000 	str.w	r2, [r8]
   23dda:	6809      	ldr	r1, [r1, #0]
   23ddc:	b191      	cbz	r1, 23e04 <ip_interface_socketoption_get+0xc0>
   23dde:	4650      	mov	r0, sl
   23de0:	f008 fef7 	bl	2cbd2 <memcpy>
   23de4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   23de8:	f007 fef5 	bl	2bbd6 <rpc_client_message_free>
   23dec:	2200      	movs	r2, #0
   23dee:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   23df2:	4648      	mov	r0, r9
   23df4:	f007 fef2 	bl	2bbdc <rpc_client_data_free>
   23df8:	9b01      	ldr	r3, [sp, #4]
   23dfa:	6023      	str	r3, [r4, #0]
   23dfc:	4658      	mov	r0, fp
   23dfe:	b005      	add	sp, #20
   23e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e04:	f04f 0b16 	mov.w	fp, #22
   23e08:	e7ec      	b.n	23de4 <ip_interface_socketoption_get+0xa0>
   23e0a:	686a      	ldr	r2, [r5, #4]
   23e0c:	4649      	mov	r1, r9
   23e0e:	4282      	cmp	r2, r0
   23e10:	bf28      	it	cs
   23e12:	4602      	movcs	r2, r0
   23e14:	4650      	mov	r0, sl
   23e16:	f8c8 2000 	str.w	r2, [r8]
   23e1a:	f008 feda 	bl	2cbd2 <memcpy>
   23e1e:	e7e8      	b.n	23df2 <ip_interface_socketoption_get+0xae>
   23e20:	f04f 0b0c 	mov.w	fp, #12
   23e24:	e7e8      	b.n	23df8 <ip_interface_socketoption_get+0xb4>
   23e26:	f04f 0b0b 	mov.w	fp, #11
   23e2a:	e7e7      	b.n	23dfc <ip_interface_socketoption_get+0xb8>
   23e2c:	2000d35c 	.word	0x2000d35c

00023e30 <ip_interface_bind>:
   23e30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23e34:	f04f 33ff 	mov.w	r3, #4294967295
   23e38:	4607      	mov	r7, r0
   23e3a:	4690      	mov	r8, r2
   23e3c:	460e      	mov	r6, r1
   23e3e:	9303      	str	r3, [sp, #12]
   23e40:	2900      	cmp	r1, #0
   23e42:	d04d      	beq.n	23ee0 <ip_interface_bind+0xb0>
   23e44:	2a00      	cmp	r2, #0
   23e46:	d04b      	beq.n	23ee0 <ip_interface_bind+0xb0>
   23e48:	f7ff fc96 	bl	23778 <interface_socket_from_handle_get>
   23e4c:	4605      	mov	r5, r0
   23e4e:	2800      	cmp	r0, #0
   23e50:	d048      	beq.n	23ee4 <ip_interface_bind+0xb4>
   23e52:	6803      	ldr	r3, [r0, #0]
   23e54:	b29b      	uxth	r3, r3
   23e56:	2b02      	cmp	r3, #2
   23e58:	d144      	bne.n	23ee4 <ip_interface_bind+0xb4>
   23e5a:	6981      	ldr	r1, [r0, #24]
   23e5c:	2300      	movs	r3, #0
   23e5e:	f247 0205 	movw	r2, #28677	; 0x7005
   23e62:	4638      	mov	r0, r7
   23e64:	f007 ff4c 	bl	2bd00 <ip_interface_request_create>
   23e68:	4604      	mov	r4, r0
   23e6a:	2800      	cmp	r0, #0
   23e6c:	d03c      	beq.n	23ee8 <ip_interface_bind+0xb8>
   23e6e:	6883      	ldr	r3, [r0, #8]
   23e70:	4642      	mov	r2, r8
   23e72:	3304      	adds	r3, #4
   23e74:	6083      	str	r3, [r0, #8]
   23e76:	f100 0318 	add.w	r3, r0, #24
   23e7a:	9301      	str	r3, [sp, #4]
   23e7c:	f10d 030a 	add.w	r3, sp, #10
   23e80:	9300      	str	r3, [sp, #0]
   23e82:	4631      	mov	r1, r6
   23e84:	68e8      	ldr	r0, [r5, #12]
   23e86:	ab02      	add	r3, sp, #8
   23e88:	f007 ff10 	bl	2bcac <ip_addr_parse>
   23e8c:	bb08      	cbnz	r0, 23ed2 <ip_interface_bind+0xa2>
   23e8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   23e92:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   23e96:	82a3      	strh	r3, [r4, #20]
   23e98:	68a3      	ldr	r3, [r4, #8]
   23e9a:	4e14      	ldr	r6, [pc, #80]	; (23eec <ip_interface_bind+0xbc>)
   23e9c:	4413      	add	r3, r2
   23e9e:	60a3      	str	r3, [r4, #8]
   23ea0:	682b      	ldr	r3, [r5, #0]
   23ea2:	82e2      	strh	r2, [r4, #22]
   23ea4:	4033      	ands	r3, r6
   23ea6:	f043 0303 	orr.w	r3, r3, #3
   23eaa:	4622      	mov	r2, r4
   23eac:	f247 0105 	movw	r1, #28677	; 0x7005
   23eb0:	2004      	movs	r0, #4
   23eb2:	602b      	str	r3, [r5, #0]
   23eb4:	f007 fe88 	bl	2bbc8 <rpc_client_request_send>
   23eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23ebc:	2104      	movs	r1, #4
   23ebe:	4638      	mov	r0, r7
   23ec0:	ab03      	add	r3, sp, #12
   23ec2:	f007 ff30 	bl	2bd26 <ip_interface_wait>
   23ec6:	b140      	cbz	r0, 23eda <ip_interface_bind+0xaa>
   23ec8:	682b      	ldr	r3, [r5, #0]
   23eca:	4033      	ands	r3, r6
   23ecc:	f043 0302 	orr.w	r3, r3, #2
   23ed0:	602b      	str	r3, [r5, #0]
   23ed2:	f007 f8f4 	bl	2b0be <nrf_modem_os_errno_set>
   23ed6:	f04f 30ff 	mov.w	r0, #4294967295
   23eda:	b004      	add	sp, #16
   23edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ee0:	2016      	movs	r0, #22
   23ee2:	e7f6      	b.n	23ed2 <ip_interface_bind+0xa2>
   23ee4:	2009      	movs	r0, #9
   23ee6:	e7f4      	b.n	23ed2 <ip_interface_bind+0xa2>
   23ee8:	200c      	movs	r0, #12
   23eea:	e7f2      	b.n	23ed2 <ip_interface_bind+0xa2>
   23eec:	ffff0000 	.word	0xffff0000

00023ef0 <ip_interface_listen>:
   23ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23ef2:	4605      	mov	r5, r0
   23ef4:	f7ff fc40 	bl	23778 <interface_socket_from_handle_get>
   23ef8:	4604      	mov	r4, r0
   23efa:	2800      	cmp	r0, #0
   23efc:	d03a      	beq.n	23f74 <ip_interface_listen+0x84>
   23efe:	6803      	ldr	r3, [r0, #0]
   23f00:	b29b      	uxth	r3, r3
   23f02:	2b04      	cmp	r3, #4
   23f04:	d003      	beq.n	23f0e <ip_interface_listen+0x1e>
   23f06:	6803      	ldr	r3, [r0, #0]
   23f08:	b29b      	uxth	r3, r3
   23f0a:	2b0b      	cmp	r3, #11
   23f0c:	d134      	bne.n	23f78 <ip_interface_listen+0x88>
   23f0e:	2100      	movs	r1, #0
   23f10:	4628      	mov	r0, r5
   23f12:	4a1c      	ldr	r2, [pc, #112]	; (23f84 <ip_interface_listen+0x94>)
   23f14:	f7ff fb9c 	bl	23650 <interface_socket_packet_handler_update>
   23f18:	4603      	mov	r3, r0
   23f1a:	bb78      	cbnz	r0, 23f7c <ip_interface_listen+0x8c>
   23f1c:	f247 0208 	movw	r2, #28680	; 0x7008
   23f20:	4628      	mov	r0, r5
   23f22:	69a1      	ldr	r1, [r4, #24]
   23f24:	f007 feec 	bl	2bd00 <ip_interface_request_create>
   23f28:	4602      	mov	r2, r0
   23f2a:	b348      	cbz	r0, 23f80 <ip_interface_listen+0x90>
   23f2c:	6883      	ldr	r3, [r0, #8]
   23f2e:	4e16      	ldr	r6, [pc, #88]	; (23f88 <ip_interface_listen+0x98>)
   23f30:	3304      	adds	r3, #4
   23f32:	6083      	str	r3, [r0, #8]
   23f34:	6823      	ldr	r3, [r4, #0]
   23f36:	f247 0108 	movw	r1, #28680	; 0x7008
   23f3a:	4033      	ands	r3, r6
   23f3c:	f043 0306 	orr.w	r3, r3, #6
   23f40:	2004      	movs	r0, #4
   23f42:	6023      	str	r3, [r4, #0]
   23f44:	f007 fe40 	bl	2bbc8 <rpc_client_request_send>
   23f48:	f04f 33ff 	mov.w	r3, #4294967295
   23f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23f50:	9301      	str	r3, [sp, #4]
   23f52:	2107      	movs	r1, #7
   23f54:	4628      	mov	r0, r5
   23f56:	ab01      	add	r3, sp, #4
   23f58:	f007 fee5 	bl	2bd26 <ip_interface_wait>
   23f5c:	b140      	cbz	r0, 23f70 <ip_interface_listen+0x80>
   23f5e:	6823      	ldr	r3, [r4, #0]
   23f60:	4033      	ands	r3, r6
   23f62:	f043 0304 	orr.w	r3, r3, #4
   23f66:	6023      	str	r3, [r4, #0]
   23f68:	f007 f8a9 	bl	2b0be <nrf_modem_os_errno_set>
   23f6c:	f04f 30ff 	mov.w	r0, #4294967295
   23f70:	b002      	add	sp, #8
   23f72:	bd70      	pop	{r4, r5, r6, pc}
   23f74:	2009      	movs	r0, #9
   23f76:	e7f7      	b.n	23f68 <ip_interface_listen+0x78>
   23f78:	2016      	movs	r0, #22
   23f7a:	e7f5      	b.n	23f68 <ip_interface_listen+0x78>
   23f7c:	200b      	movs	r0, #11
   23f7e:	e7f3      	b.n	23f68 <ip_interface_listen+0x78>
   23f80:	200c      	movs	r0, #12
   23f82:	e7f1      	b.n	23f68 <ip_interface_listen+0x78>
   23f84:	0002bc59 	.word	0x0002bc59
   23f88:	ffff0000 	.word	0xffff0000

00023f8c <ip_interface_accept>:
   23f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f90:	2500      	movs	r5, #0
   23f92:	4680      	mov	r8, r0
   23f94:	460f      	mov	r7, r1
   23f96:	4691      	mov	r9, r2
   23f98:	9500      	str	r5, [sp, #0]
   23f9a:	f7ff fbed 	bl	23778 <interface_socket_from_handle_get>
   23f9e:	4604      	mov	r4, r0
   23fa0:	2800      	cmp	r0, #0
   23fa2:	f000 80c7 	beq.w	24134 <ip_interface_accept+0x1a8>
   23fa6:	6903      	ldr	r3, [r0, #16]
   23fa8:	2b01      	cmp	r3, #1
   23faa:	f040 80c6 	bne.w	2413a <ip_interface_accept+0x1ae>
   23fae:	6803      	ldr	r3, [r0, #0]
   23fb0:	b29b      	uxth	r3, r3
   23fb2:	2b07      	cmp	r3, #7
   23fb4:	f040 80c3 	bne.w	2413e <ip_interface_accept+0x1b2>
   23fb8:	f04f 33ff 	mov.w	r3, #4294967295
   23fbc:	9301      	str	r3, [sp, #4]
   23fbe:	6803      	ldr	r3, [r0, #0]
   23fc0:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   23fc4:	d15c      	bne.n	24080 <ip_interface_accept+0xf4>
   23fc6:	6803      	ldr	r3, [r0, #0]
   23fc8:	03db      	lsls	r3, r3, #15
   23fca:	d45d      	bmi.n	24088 <ip_interface_accept+0xfc>
   23fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   23fd0:	4640      	mov	r0, r8
   23fd2:	4611      	mov	r1, r2
   23fd4:	ab01      	add	r3, sp, #4
   23fd6:	f007 fea6 	bl	2bd26 <ip_interface_wait>
   23fda:	4606      	mov	r6, r0
   23fdc:	6825      	ldr	r5, [r4, #0]
   23fde:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   23fe2:	d053      	beq.n	2408c <ip_interface_accept+0x100>
   23fe4:	4668      	mov	r0, sp
   23fe6:	4a58      	ldr	r2, [pc, #352]	; (24148 <ip_interface_accept+0x1bc>)
   23fe8:	6921      	ldr	r1, [r4, #16]
   23fea:	f7ff faff 	bl	235ec <interface_socket_allocate>
   23fee:	9b00      	ldr	r3, [sp, #0]
   23ff0:	4605      	mov	r5, r0
   23ff2:	2b00      	cmp	r3, #0
   23ff4:	f000 80a5 	beq.w	24142 <ip_interface_accept+0x1b6>
   23ff8:	6962      	ldr	r2, [r4, #20]
   23ffa:	4640      	mov	r0, r8
   23ffc:	615a      	str	r2, [r3, #20]
   23ffe:	68e2      	ldr	r2, [r4, #12]
   24000:	69a1      	ldr	r1, [r4, #24]
   24002:	60da      	str	r2, [r3, #12]
   24004:	6922      	ldr	r2, [r4, #16]
   24006:	611a      	str	r2, [r3, #16]
   24008:	f247 020c 	movw	r2, #28684	; 0x700c
   2400c:	2300      	movs	r3, #0
   2400e:	f007 fe77 	bl	2bd00 <ip_interface_request_create>
   24012:	4602      	mov	r2, r0
   24014:	2800      	cmp	r0, #0
   24016:	f000 8094 	beq.w	24142 <ip_interface_accept+0x1b6>
   2401a:	6823      	ldr	r3, [r4, #0]
   2401c:	f8df b130 	ldr.w	fp, [pc, #304]	; 24150 <ip_interface_accept+0x1c4>
   24020:	f247 010c 	movw	r1, #28684	; 0x700c
   24024:	ea03 030b 	and.w	r3, r3, fp
   24028:	f043 0308 	orr.w	r3, r3, #8
   2402c:	2004      	movs	r0, #4
   2402e:	6023      	str	r3, [r4, #0]
   24030:	f007 fdca 	bl	2bbc8 <rpc_client_request_send>
   24034:	6823      	ldr	r3, [r4, #0]
   24036:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2403a:	ea23 030a 	bic.w	r3, r3, sl
   2403e:	6023      	str	r3, [r4, #0]
   24040:	2109      	movs	r1, #9
   24042:	ab01      	add	r3, sp, #4
   24044:	4640      	mov	r0, r8
   24046:	f007 fe6e 	bl	2bd26 <ip_interface_wait>
   2404a:	6823      	ldr	r3, [r4, #0]
   2404c:	4606      	mov	r6, r0
   2404e:	ea43 030a 	orr.w	r3, r3, sl
   24052:	6023      	str	r3, [r4, #0]
   24054:	b1e0      	cbz	r0, 24090 <ip_interface_accept+0x104>
   24056:	6823      	ldr	r3, [r4, #0]
   24058:	ea03 030b 	and.w	r3, r3, fp
   2405c:	f043 0307 	orr.w	r3, r3, #7
   24060:	6023      	str	r3, [r4, #0]
   24062:	6823      	ldr	r3, [r4, #0]
   24064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   24068:	6023      	str	r3, [r4, #0]
   2406a:	9b00      	ldr	r3, [sp, #0]
   2406c:	b113      	cbz	r3, 24074 <ip_interface_accept+0xe8>
   2406e:	4628      	mov	r0, r5
   24070:	f7ff fae2 	bl	23638 <interface_socket_free>
   24074:	4630      	mov	r0, r6
   24076:	f007 f822 	bl	2b0be <nrf_modem_os_errno_set>
   2407a:	f04f 30ff 	mov.w	r0, #4294967295
   2407e:	e046      	b.n	2410e <ip_interface_accept+0x182>
   24080:	260b      	movs	r6, #11
   24082:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   24086:	e7a9      	b.n	23fdc <ip_interface_accept+0x50>
   24088:	2616      	movs	r6, #22
   2408a:	e7a7      	b.n	23fdc <ip_interface_accept+0x50>
   2408c:	2e00      	cmp	r6, #0
   2408e:	d1ec      	bne.n	2406a <ip_interface_accept+0xde>
   24090:	4e2e      	ldr	r6, [pc, #184]	; (2414c <ip_interface_accept+0x1c0>)
   24092:	9800      	ldr	r0, [sp, #0]
   24094:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   24098:	699a      	ldr	r2, [r3, #24]
   2409a:	6182      	str	r2, [r0, #24]
   2409c:	b1c7      	cbz	r7, 240d0 <ip_interface_accept+0x144>
   2409e:	68c2      	ldr	r2, [r0, #12]
   240a0:	2a0a      	cmp	r2, #10
   240a2:	d137      	bne.n	24114 <ip_interface_accept+0x188>
   240a4:	f8d9 1000 	ldr.w	r1, [r9]
   240a8:	2924      	cmp	r1, #36	; 0x24
   240aa:	d111      	bne.n	240d0 <ip_interface_accept+0x144>
   240ac:	7039      	strb	r1, [r7, #0]
   240ae:	607a      	str	r2, [r7, #4]
   240b0:	7f1a      	ldrb	r2, [r3, #28]
   240b2:	7f59      	ldrb	r1, [r3, #29]
   240b4:	3710      	adds	r7, #16
   240b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   240ba:	f827 2c08 	strh.w	r2, [r7, #-8]
   240be:	f103 0220 	add.w	r2, r3, #32
   240c2:	3330      	adds	r3, #48	; 0x30
   240c4:	f852 1b04 	ldr.w	r1, [r2], #4
   240c8:	429a      	cmp	r2, r3
   240ca:	f847 1b04 	str.w	r1, [r7], #4
   240ce:	d1f9      	bne.n	240c4 <ip_interface_accept+0x138>
   240d0:	6802      	ldr	r2, [r0, #0]
   240d2:	491f      	ldr	r1, [pc, #124]	; (24150 <ip_interface_accept+0x1c4>)
   240d4:	400a      	ands	r2, r1
   240d6:	f042 0205 	orr.w	r2, r2, #5
   240da:	6002      	str	r2, [r0, #0]
   240dc:	6802      	ldr	r2, [r0, #0]
   240de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   240e2:	6002      	str	r2, [r0, #0]
   240e4:	6802      	ldr	r2, [r0, #0]
   240e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   240ea:	6002      	str	r2, [r0, #0]
   240ec:	6823      	ldr	r3, [r4, #0]
   240ee:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   240f2:	400b      	ands	r3, r1
   240f4:	f043 0307 	orr.w	r3, r3, #7
   240f8:	6023      	str	r3, [r4, #0]
   240fa:	6823      	ldr	r3, [r4, #0]
   240fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   24100:	6023      	str	r3, [r4, #0]
   24102:	f007 fd68 	bl	2bbd6 <rpc_client_message_free>
   24106:	2300      	movs	r3, #0
   24108:	4628      	mov	r0, r5
   2410a:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   2410e:	b003      	add	sp, #12
   24110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24114:	2a02      	cmp	r2, #2
   24116:	d1db      	bne.n	240d0 <ip_interface_accept+0x144>
   24118:	f8d9 1000 	ldr.w	r1, [r9]
   2411c:	2910      	cmp	r1, #16
   2411e:	d1d7      	bne.n	240d0 <ip_interface_accept+0x144>
   24120:	7039      	strb	r1, [r7, #0]
   24122:	607a      	str	r2, [r7, #4]
   24124:	7f1a      	ldrb	r2, [r3, #28]
   24126:	7f59      	ldrb	r1, [r3, #29]
   24128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2412c:	813a      	strh	r2, [r7, #8]
   2412e:	6a1b      	ldr	r3, [r3, #32]
   24130:	60fb      	str	r3, [r7, #12]
   24132:	e7cd      	b.n	240d0 <ip_interface_accept+0x144>
   24134:	2609      	movs	r6, #9
   24136:	4605      	mov	r5, r0
   24138:	e797      	b.n	2406a <ip_interface_accept+0xde>
   2413a:	265f      	movs	r6, #95	; 0x5f
   2413c:	e795      	b.n	2406a <ip_interface_accept+0xde>
   2413e:	2616      	movs	r6, #22
   24140:	e793      	b.n	2406a <ip_interface_accept+0xde>
   24142:	260c      	movs	r6, #12
   24144:	e791      	b.n	2406a <ip_interface_accept+0xde>
   24146:	bf00      	nop
   24148:	0002bc59 	.word	0x0002bc59
   2414c:	2000d35c 	.word	0x2000d35c
   24150:	ffff0000 	.word	0xffff0000

00024154 <ip_interface_setopt>:
   24154:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   24158:	2901      	cmp	r1, #1
   2415a:	4606      	mov	r6, r0
   2415c:	4690      	mov	r8, r2
   2415e:	461d      	mov	r5, r3
   24160:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   24162:	d008      	beq.n	24176 <ip_interface_setopt+0x22>
   24164:	206d      	movs	r0, #109	; 0x6d
   24166:	f006 ffaa 	bl	2b0be <nrf_modem_os_errno_set>
   2416a:	f04f 34ff 	mov.w	r4, #4294967295
   2416e:	4620      	mov	r0, r4
   24170:	b004      	add	sp, #16
   24172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24176:	f7ff faff 	bl	23778 <interface_socket_from_handle_get>
   2417a:	4604      	mov	r4, r0
   2417c:	b908      	cbnz	r0, 24182 <ip_interface_setopt+0x2e>
   2417e:	2009      	movs	r0, #9
   24180:	e7f1      	b.n	24166 <ip_interface_setopt+0x12>
   24182:	f1a8 0319 	sub.w	r3, r8, #25
   24186:	2b1e      	cmp	r3, #30
   24188:	f200 8086 	bhi.w	24298 <ip_interface_setopt+0x144>
   2418c:	e8df f003 	tbb	[pc, r3]
   24190:	84848410 	.word	0x84848410
   24194:	51493d84 	.word	0x51493d84
   24198:	84848484 	.word	0x84848484
   2419c:	59848484 	.word	0x59848484
   241a0:	84848484 	.word	0x84848484
   241a4:	84848484 	.word	0x84848484
   241a8:	73666184 	.word	0x73666184
   241ac:	7976      	.short	0x7976
   241ae:	7c          	.byte	0x7c
   241af:	00          	.byte	0x00
   241b0:	b90d      	cbnz	r5, 241b6 <ip_interface_setopt+0x62>
   241b2:	200e      	movs	r0, #14
   241b4:	e7d7      	b.n	24166 <ip_interface_setopt+0x12>
   241b6:	4628      	mov	r0, r5
   241b8:	f7f5 f9c0 	bl	1953c <strlen>
   241bc:	42b8      	cmp	r0, r7
   241be:	d1f8      	bne.n	241b2 <ip_interface_setopt+0x5e>
   241c0:	6823      	ldr	r3, [r4, #0]
   241c2:	b29b      	uxth	r3, r3
   241c4:	2b02      	cmp	r3, #2
   241c6:	d1da      	bne.n	2417e <ip_interface_setopt+0x2a>
   241c8:	4628      	mov	r0, r5
   241ca:	4937      	ldr	r1, [pc, #220]	; (242a8 <ip_interface_setopt+0x154>)
   241cc:	f008 fe6d 	bl	2ceaa <strstr>
   241d0:	b108      	cbz	r0, 241d6 <ip_interface_setopt+0x82>
   241d2:	4285      	cmp	r5, r0
   241d4:	d001      	beq.n	241da <ip_interface_setopt+0x86>
   241d6:	2016      	movs	r0, #22
   241d8:	e7c5      	b.n	24166 <ip_interface_setopt+0x12>
   241da:	4833      	ldr	r0, [pc, #204]	; (242a8 <ip_interface_setopt+0x154>)
   241dc:	f7f5 f9ae 	bl	1953c <strlen>
   241e0:	220a      	movs	r2, #10
   241e2:	2100      	movs	r1, #0
   241e4:	4428      	add	r0, r5
   241e6:	f005 fbf7 	bl	299d8 <strtoul>
   241ea:	2304      	movs	r3, #4
   241ec:	9301      	str	r3, [sp, #4]
   241ee:	ab03      	add	r3, sp, #12
   241f0:	4621      	mov	r1, r4
   241f2:	9003      	str	r0, [sp, #12]
   241f4:	9300      	str	r3, [sp, #0]
   241f6:	2208      	movs	r2, #8
   241f8:	f243 0310 	movw	r3, #12304	; 0x3010
   241fc:	4630      	mov	r0, r6
   241fe:	f007 ff3a 	bl	2c076 <ip_interface_socketoption_send>
   24202:	4604      	mov	r4, r0
   24204:	2800      	cmp	r0, #0
   24206:	d0b2      	beq.n	2416e <ip_interface_setopt+0x1a>
   24208:	e7ad      	b.n	24166 <ip_interface_setopt+0x12>
   2420a:	4602      	mov	r2, r0
   2420c:	4633      	mov	r3, r6
   2420e:	f248 0101 	movw	r1, #32769	; 0x8001
   24212:	f44f 7000 	mov.w	r0, #512	; 0x200
   24216:	e9cd 5700 	strd	r5, r7, [sp]
   2421a:	f007 ff77 	bl	2c10c <setopt_check_and_send_int>
   2421e:	4604      	mov	r4, r0
   24220:	e7a5      	b.n	2416e <ip_interface_setopt+0x1a>
   24222:	4602      	mov	r2, r0
   24224:	4633      	mov	r3, r6
   24226:	f244 0110 	movw	r1, #16400	; 0x4010
   2422a:	2004      	movs	r0, #4
   2422c:	e9cd 5700 	strd	r5, r7, [sp]
   24230:	e7f3      	b.n	2421a <ip_interface_setopt+0xc6>
   24232:	4602      	mov	r2, r0
   24234:	4633      	mov	r3, r6
   24236:	f246 0110 	movw	r1, #24592	; 0x6010
   2423a:	2006      	movs	r0, #6
   2423c:	e9cd 5700 	strd	r5, r7, [sp]
   24240:	e7eb      	b.n	2421a <ip_interface_setopt+0xc6>
   24242:	4602      	mov	r2, r0
   24244:	4633      	mov	r3, r6
   24246:	f241 0104 	movw	r1, #4100	; 0x1004
   2424a:	2008      	movs	r0, #8
   2424c:	e9cd 5700 	strd	r5, r7, [sp]
   24250:	e7e3      	b.n	2421a <ip_interface_setopt+0xc6>
   24252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   24256:	62a3      	str	r3, [r4, #40]	; 0x28
   24258:	2400      	movs	r4, #0
   2425a:	e788      	b.n	2416e <ip_interface_setopt+0x1a>
   2425c:	2400      	movs	r4, #0
   2425e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   24262:	4622      	mov	r2, r4
   24264:	6283      	str	r3, [r0, #40]	; 0x28
   24266:	4621      	mov	r1, r4
   24268:	4623      	mov	r3, r4
   2426a:	4630      	mov	r0, r6
   2426c:	e9cd 4400 	strd	r4, r4, [sp]
   24270:	f7ff fc4a 	bl	23b08 <ip_interface_sendto>
   24274:	e77b      	b.n	2416e <ip_interface_setopt+0x1a>
   24276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2427a:	e7ec      	b.n	24256 <ip_interface_setopt+0x102>
   2427c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   24280:	e7e9      	b.n	24256 <ip_interface_setopt+0x102>
   24282:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24286:	e7e6      	b.n	24256 <ip_interface_setopt+0x102>
   24288:	4602      	mov	r2, r0
   2428a:	4633      	mov	r3, r6
   2428c:	f245 0106 	movw	r1, #20486	; 0x5006
   24290:	2001      	movs	r0, #1
   24292:	e9cd 5700 	strd	r5, r7, [sp]
   24296:	e7c0      	b.n	2421a <ip_interface_setopt+0xc6>
   24298:	462b      	mov	r3, r5
   2429a:	4642      	mov	r2, r8
   2429c:	2101      	movs	r1, #1
   2429e:	4630      	mov	r0, r6
   242a0:	9700      	str	r7, [sp, #0]
   242a2:	f7ff fa79 	bl	23798 <interface_socket_setopt>
   242a6:	e7ba      	b.n	2421e <ip_interface_setopt+0xca>
   242a8:	000309bd 	.word	0x000309bd

000242ac <ip_interface_getaddrinfo>:
   242ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b0:	b087      	sub	sp, #28
   242b2:	9301      	str	r3, [sp, #4]
   242b4:	4b72      	ldr	r3, [pc, #456]	; (24480 <ip_interface_getaddrinfo+0x1d4>)
   242b6:	4680      	mov	r8, r0
   242b8:	781b      	ldrb	r3, [r3, #0]
   242ba:	460f      	mov	r7, r1
   242bc:	4614      	mov	r4, r2
   242be:	b93b      	cbnz	r3, 242d0 <ip_interface_getaddrinfo+0x24>
   242c0:	2075      	movs	r0, #117	; 0x75
   242c2:	f006 fefc 	bl	2b0be <nrf_modem_os_errno_set>
   242c6:	f240 1015 	movw	r0, #277	; 0x115
   242ca:	b007      	add	sp, #28
   242cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242d0:	4d6c      	ldr	r5, [pc, #432]	; (24484 <ip_interface_getaddrinfo+0x1d8>)
   242d2:	682e      	ldr	r6, [r5, #0]
   242d4:	2e00      	cmp	r6, #0
   242d6:	f040 80d0 	bne.w	2447a <ip_interface_getaddrinfo+0x1ce>
   242da:	2301      	movs	r3, #1
   242dc:	486a      	ldr	r0, [pc, #424]	; (24488 <ip_interface_getaddrinfo+0x1dc>)
   242de:	496b      	ldr	r1, [pc, #428]	; (2448c <ip_interface_getaddrinfo+0x1e0>)
   242e0:	4a6b      	ldr	r2, [pc, #428]	; (24490 <ip_interface_getaddrinfo+0x1e4>)
   242e2:	602b      	str	r3, [r5, #0]
   242e4:	6003      	str	r3, [r0, #0]
   242e6:	4b6b      	ldr	r3, [pc, #428]	; (24494 <ip_interface_getaddrinfo+0x1e8>)
   242e8:	468a      	mov	sl, r1
   242ea:	4691      	mov	r9, r2
   242ec:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 244a4 <ip_interface_getaddrinfo+0x1f8>
   242f0:	600e      	str	r6, [r1, #0]
   242f2:	6016      	str	r6, [r2, #0]
   242f4:	801e      	strh	r6, [r3, #0]
   242f6:	9002      	str	r0, [sp, #8]
   242f8:	b194      	cbz	r4, 24320 <ip_interface_getaddrinfo+0x74>
   242fa:	68e2      	ldr	r2, [r4, #12]
   242fc:	b182      	cbz	r2, 24320 <ip_interface_getaddrinfo+0x74>
   242fe:	f8cb 2000 	str.w	r2, [fp]
   24302:	b93f      	cbnz	r7, 24314 <ip_interface_getaddrinfo+0x68>
   24304:	68a0      	ldr	r0, [r4, #8]
   24306:	2803      	cmp	r0, #3
   24308:	d146      	bne.n	24398 <ip_interface_getaddrinfo+0xec>
   2430a:	2300      	movs	r3, #0
   2430c:	f44f 7089 	mov.w	r0, #274	; 0x112
   24310:	602b      	str	r3, [r5, #0]
   24312:	e7da      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   24314:	6822      	ldr	r2, [r4, #0]
   24316:	04d1      	lsls	r1, r2, #19
   24318:	d508      	bpl.n	2432c <ip_interface_getaddrinfo+0x80>
   2431a:	0552      	lsls	r2, r2, #21
   2431c:	d406      	bmi.n	2432c <ip_interface_getaddrinfo+0x80>
   2431e:	e7f1      	b.n	24304 <ip_interface_getaddrinfo+0x58>
   24320:	2201      	movs	r2, #1
   24322:	f8cb 2000 	str.w	r2, [fp]
   24326:	b187      	cbz	r7, 2434a <ip_interface_getaddrinfo+0x9e>
   24328:	2c00      	cmp	r4, #0
   2432a:	d1f3      	bne.n	24314 <ip_interface_getaddrinfo+0x68>
   2432c:	220a      	movs	r2, #10
   2432e:	2100      	movs	r1, #0
   24330:	4638      	mov	r0, r7
   24332:	f005 fa2d 	bl	29790 <strtol>
   24336:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2433a:	1e41      	subs	r1, r0, #1
   2433c:	4291      	cmp	r1, r2
   2433e:	4b55      	ldr	r3, [pc, #340]	; (24494 <ip_interface_getaddrinfo+0x1e8>)
   24340:	d8e3      	bhi.n	2430a <ip_interface_getaddrinfo+0x5e>
   24342:	0202      	lsls	r2, r0, #8
   24344:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   24348:	8018      	strh	r0, [r3, #0]
   2434a:	2c00      	cmp	r4, #0
   2434c:	d1da      	bne.n	24304 <ip_interface_getaddrinfo+0x58>
   2434e:	f1b8 0f00 	cmp.w	r8, #0
   24352:	d003      	beq.n	2435c <ip_interface_getaddrinfo+0xb0>
   24354:	4640      	mov	r0, r8
   24356:	f7f5 f8f1 	bl	1953c <strlen>
   2435a:	4606      	mov	r6, r0
   2435c:	2f00      	cmp	r7, #0
   2435e:	d03c      	beq.n	243da <ip_interface_getaddrinfo+0x12e>
   24360:	2c00      	cmp	r4, #0
   24362:	d03a      	beq.n	243da <ip_interface_getaddrinfo+0x12e>
   24364:	6823      	ldr	r3, [r4, #0]
   24366:	04db      	lsls	r3, r3, #19
   24368:	d537      	bpl.n	243da <ip_interface_getaddrinfo+0x12e>
   2436a:	213a      	movs	r1, #58	; 0x3a
   2436c:	4638      	mov	r0, r7
   2436e:	f008 fd55 	bl	2ce1c <strchr>
   24372:	bb48      	cbnz	r0, 243c8 <ip_interface_getaddrinfo+0x11c>
   24374:	4601      	mov	r1, r0
   24376:	220a      	movs	r2, #10
   24378:	4638      	mov	r0, r7
   2437a:	f005 fb2d 	bl	299d8 <strtoul>
   2437e:	4601      	mov	r1, r0
   24380:	4633      	mov	r3, r6
   24382:	f247 020d 	movw	r2, #28685	; 0x700d
   24386:	4608      	mov	r0, r1
   24388:	f007 fcba 	bl	2bd00 <ip_interface_request_create>
   2438c:	4607      	mov	r7, r0
   2438e:	bb38      	cbnz	r0, 243e0 <ip_interface_getaddrinfo+0x134>
   24390:	6028      	str	r0, [r5, #0]
   24392:	f240 100f 	movw	r0, #271	; 0x10f
   24396:	e798      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   24398:	6863      	ldr	r3, [r4, #4]
   2439a:	2b0a      	cmp	r3, #10
   2439c:	d007      	beq.n	243ae <ip_interface_getaddrinfo+0x102>
   2439e:	f033 0302 	bics.w	r3, r3, #2
   243a2:	d004      	beq.n	243ae <ip_interface_getaddrinfo+0x102>
   243a4:	2300      	movs	r3, #0
   243a6:	f44f 7087 	mov.w	r0, #270	; 0x10e
   243aa:	602b      	str	r3, [r5, #0]
   243ac:	e78d      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   243ae:	2301      	movs	r3, #1
   243b0:	68e1      	ldr	r1, [r4, #12]
   243b2:	aa05      	add	r2, sp, #20
   243b4:	9305      	str	r3, [sp, #20]
   243b6:	f007 fc5b 	bl	2bc70 <protocol_verify>
   243ba:	2800      	cmp	r0, #0
   243bc:	d0c7      	beq.n	2434e <ip_interface_getaddrinfo+0xa2>
   243be:	2300      	movs	r3, #0
   243c0:	f240 1013 	movw	r0, #275	; 0x113
   243c4:	602b      	str	r3, [r5, #0]
   243c6:	e780      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   243c8:	9003      	str	r0, [sp, #12]
   243ca:	4833      	ldr	r0, [pc, #204]	; (24498 <ip_interface_getaddrinfo+0x1ec>)
   243cc:	f7f5 f8b6 	bl	1953c <strlen>
   243d0:	9b03      	ldr	r3, [sp, #12]
   243d2:	220a      	movs	r2, #10
   243d4:	2100      	movs	r1, #0
   243d6:	4418      	add	r0, r3
   243d8:	e7cf      	b.n	2437a <ip_interface_getaddrinfo+0xce>
   243da:	f04f 31ff 	mov.w	r1, #4294967295
   243de:	e7cf      	b.n	24380 <ip_interface_getaddrinfo+0xd4>
   243e0:	2c00      	cmp	r4, #0
   243e2:	d03a      	beq.n	2445a <ip_interface_getaddrinfo+0x1ae>
   243e4:	68a3      	ldr	r3, [r4, #8]
   243e6:	9a02      	ldr	r2, [sp, #8]
   243e8:	2b02      	cmp	r3, #2
   243ea:	6013      	str	r3, [r2, #0]
   243ec:	6862      	ldr	r2, [r4, #4]
   243ee:	bf08      	it	eq
   243f0:	f8cb 3000 	streq.w	r3, [fp]
   243f4:	3a02      	subs	r2, #2
   243f6:	2a08      	cmp	r2, #8
   243f8:	bf8e      	itee	hi
   243fa:	2200      	movhi	r2, #0
   243fc:	4927      	ldrls	r1, [pc, #156]	; (2449c <ip_interface_getaddrinfo+0x1f0>)
   243fe:	568a      	ldrsbls	r2, [r1, r2]
   24400:	6182      	str	r2, [r0, #24]
   24402:	68e2      	ldr	r2, [r4, #12]
   24404:	61c3      	str	r3, [r0, #28]
   24406:	2300      	movs	r3, #0
   24408:	6202      	str	r2, [r0, #32]
   2440a:	7503      	strb	r3, [r0, #20]
   2440c:	7543      	strb	r3, [r0, #21]
   2440e:	7583      	strb	r3, [r0, #22]
   24410:	75c3      	strb	r3, [r0, #23]
   24412:	68bb      	ldr	r3, [r7, #8]
   24414:	3310      	adds	r3, #16
   24416:	60bb      	str	r3, [r7, #8]
   24418:	f1b8 0f00 	cmp.w	r8, #0
   2441c:	d005      	beq.n	2442a <ip_interface_getaddrinfo+0x17e>
   2441e:	6838      	ldr	r0, [r7, #0]
   24420:	b118      	cbz	r0, 2442a <ip_interface_getaddrinfo+0x17e>
   24422:	4632      	mov	r2, r6
   24424:	4641      	mov	r1, r8
   24426:	f008 fbd4 	bl	2cbd2 <memcpy>
   2442a:	463a      	mov	r2, r7
   2442c:	f247 010d 	movw	r1, #28685	; 0x700d
   24430:	2004      	movs	r0, #4
   24432:	f007 fbc9 	bl	2bbc8 <rpc_client_request_send>
   24436:	f04f 33ff 	mov.w	r3, #4294967295
   2443a:	9305      	str	r3, [sp, #20]
   2443c:	4638      	mov	r0, r7
   2443e:	a905      	add	r1, sp, #20
   24440:	f7fa f916 	bl	1e670 <nrf_modem_os_timedwait>
   24444:	682b      	ldr	r3, [r5, #0]
   24446:	2b01      	cmp	r3, #1
   24448:	d0f8      	beq.n	2443c <ip_interface_getaddrinfo+0x190>
   2444a:	f8d9 0000 	ldr.w	r0, [r9]
   2444e:	b950      	cbnz	r0, 24466 <ip_interface_getaddrinfo+0x1ba>
   24450:	f8da 3000 	ldr.w	r3, [sl]
   24454:	9a01      	ldr	r2, [sp, #4]
   24456:	6013      	str	r3, [r2, #0]
   24458:	e737      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   2445a:	2210      	movs	r2, #16
   2445c:	4621      	mov	r1, r4
   2445e:	3014      	adds	r0, #20
   24460:	f008 fbc4 	bl	2cbec <memset>
   24464:	e7d5      	b.n	24412 <ip_interface_getaddrinfo+0x166>
   24466:	2300      	movs	r3, #0
   24468:	602b      	str	r3, [r5, #0]
   2446a:	4b0d      	ldr	r3, [pc, #52]	; (244a0 <ip_interface_getaddrinfo+0x1f4>)
   2446c:	6818      	ldr	r0, [r3, #0]
   2446e:	b108      	cbz	r0, 24474 <ip_interface_getaddrinfo+0x1c8>
   24470:	f006 fe25 	bl	2b0be <nrf_modem_os_errno_set>
   24474:	f8d9 0000 	ldr.w	r0, [r9]
   24478:	e727      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   2447a:	f44f 708a 	mov.w	r0, #276	; 0x114
   2447e:	e724      	b.n	242ca <ip_interface_getaddrinfo+0x1e>
   24480:	2000da0e 	.word	0x2000da0e
   24484:	2000d354 	.word	0x2000d354
   24488:	2000d348 	.word	0x2000d348
   2448c:	2000d358 	.word	0x2000d358
   24490:	2000d350 	.word	0x2000d350
   24494:	2000d476 	.word	0x2000d476
   24498:	00030a68 	.word	0x00030a68
   2449c:	000309c1 	.word	0x000309c1
   244a0:	2000d34c 	.word	0x2000d34c
   244a4:	2000d344 	.word	0x2000d344

000244a8 <ip_interface_freeaddrinfo>:
   244a8:	b538      	push	{r3, r4, r5, lr}
   244aa:	4d0a      	ldr	r5, [pc, #40]	; (244d4 <ip_interface_freeaddrinfo+0x2c>)
   244ac:	4604      	mov	r4, r0
   244ae:	682a      	ldr	r2, [r5, #0]
   244b0:	2a02      	cmp	r2, #2
   244b2:	d10e      	bne.n	244d2 <ip_interface_freeaddrinfo+0x2a>
   244b4:	b148      	cbz	r0, 244ca <ip_interface_freeaddrinfo+0x22>
   244b6:	6940      	ldr	r0, [r0, #20]
   244b8:	f7fa fa44 	bl	1e944 <nrf_modem_os_free>
   244bc:	69a0      	ldr	r0, [r4, #24]
   244be:	b108      	cbz	r0, 244c4 <ip_interface_freeaddrinfo+0x1c>
   244c0:	f7fa fa40 	bl	1e944 <nrf_modem_os_free>
   244c4:	4620      	mov	r0, r4
   244c6:	f7fa fa3d 	bl	1e944 <nrf_modem_os_free>
   244ca:	2300      	movs	r3, #0
   244cc:	4a02      	ldr	r2, [pc, #8]	; (244d8 <ip_interface_freeaddrinfo+0x30>)
   244ce:	602b      	str	r3, [r5, #0]
   244d0:	6013      	str	r3, [r2, #0]
   244d2:	bd38      	pop	{r3, r4, r5, pc}
   244d4:	2000d354 	.word	0x2000d354
   244d8:	2000d350 	.word	0x2000d350

000244dc <rpc_ip_event_handler>:
   244dc:	f248 030f 	movw	r3, #32783	; 0x800f
   244e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244e4:	4299      	cmp	r1, r3
   244e6:	4604      	mov	r4, r0
   244e8:	460e      	mov	r6, r1
   244ea:	b089      	sub	sp, #36	; 0x24
   244ec:	f000 80a4 	beq.w	24638 <rpc_ip_event_handler+0x15c>
   244f0:	f249 0304 	movw	r3, #36868	; 0x9004
   244f4:	4299      	cmp	r1, r3
   244f6:	f000 80ab 	beq.w	24650 <rpc_ip_event_handler+0x174>
   244fa:	f248 030d 	movw	r3, #32781	; 0x800d
   244fe:	4299      	cmp	r1, r3
   24500:	f040 80b8 	bne.w	24674 <rpc_ip_event_handler+0x198>
   24504:	4bbc      	ldr	r3, [pc, #752]	; (247f8 <rpc_ip_event_handler+0x31c>)
   24506:	681a      	ldr	r2, [r3, #0]
   24508:	9303      	str	r3, [sp, #12]
   2450a:	2a01      	cmp	r2, #1
   2450c:	d12d      	bne.n	2456a <rpc_ip_event_handler+0x8e>
   2450e:	6940      	ldr	r0, [r0, #20]
   24510:	2800      	cmp	r0, #0
   24512:	f040 808c 	bne.w	2462e <rpc_ip_event_handler+0x152>
   24516:	f8d4 a018 	ldr.w	sl, [r4, #24]
   2451a:	f8d4 8000 	ldr.w	r8, [r4]
   2451e:	ea4f 134a 	mov.w	r3, sl, lsl #5
   24522:	4618      	mov	r0, r3
   24524:	9301      	str	r3, [sp, #4]
   24526:	f7fa fa05 	bl	1e934 <nrf_modem_os_alloc>
   2452a:	4607      	mov	r7, r0
   2452c:	b310      	cbz	r0, 24574 <rpc_ip_event_handler+0x98>
   2452e:	2024      	movs	r0, #36	; 0x24
   24530:	fb00 f00a 	mul.w	r0, r0, sl
   24534:	f7fa f9fe 	bl	1e934 <nrf_modem_os_alloc>
   24538:	4605      	mov	r5, r0
   2453a:	b1e8      	cbz	r0, 24578 <rpc_ip_event_handler+0x9c>
   2453c:	2604      	movs	r6, #4
   2453e:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   24542:	f107 0920 	add.w	r9, r7, #32
   24546:	9302      	str	r3, [sp, #8]
   24548:	9b02      	ldr	r3, [sp, #8]
   2454a:	42ab      	cmp	r3, r5
   2454c:	d118      	bne.n	24580 <rpc_ip_event_handler+0xa4>
   2454e:	f1ba 0f00 	cmp.w	sl, #0
   24552:	d005      	beq.n	24560 <rpc_ip_event_handler+0x84>
   24554:	9b01      	ldr	r3, [sp, #4]
   24556:	443b      	add	r3, r7
   24558:	4699      	mov	r9, r3
   2455a:	2300      	movs	r3, #0
   2455c:	f849 3c04 	str.w	r3, [r9, #-4]
   24560:	4ba6      	ldr	r3, [pc, #664]	; (247fc <rpc_ip_event_handler+0x320>)
   24562:	601f      	str	r7, [r3, #0]
   24564:	2302      	movs	r3, #2
   24566:	9a03      	ldr	r2, [sp, #12]
   24568:	6013      	str	r3, [r2, #0]
   2456a:	6820      	ldr	r0, [r4, #0]
   2456c:	2800      	cmp	r0, #0
   2456e:	f040 81c7 	bne.w	24900 <rpc_ip_event_handler+0x424>
   24572:	e1c7      	b.n	24904 <rpc_ip_event_handler+0x428>
   24574:	f7fa f9e6 	bl	1e944 <nrf_modem_os_free>
   24578:	220c      	movs	r2, #12
   2457a:	4ba1      	ldr	r3, [pc, #644]	; (24800 <rpc_ip_event_handler+0x324>)
   2457c:	601a      	str	r2, [r3, #0]
   2457e:	e7ef      	b.n	24560 <rpc_ip_event_handler+0x84>
   24580:	f858 2006 	ldr.w	r2, [r8, r6]
   24584:	eb08 0106 	add.w	r1, r8, r6
   24588:	f849 2c20 	str.w	r2, [r9, #-32]
   2458c:	eb08 0206 	add.w	r2, r8, r6
   24590:	6852      	ldr	r2, [r2, #4]
   24592:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   24596:	3a01      	subs	r2, #1
   24598:	2a04      	cmp	r2, #4
   2459a:	bf8c      	ite	hi
   2459c:	2200      	movhi	r2, #0
   2459e:	4b99      	ldrls	r3, [pc, #612]	; (24804 <rpc_ip_event_handler+0x328>)
   245a0:	f106 0614 	add.w	r6, r6, #20
   245a4:	bf98      	it	ls
   245a6:	569a      	ldrsbls	r2, [r3, r2]
   245a8:	4b97      	ldr	r3, [pc, #604]	; (24808 <rpc_ip_event_handler+0x32c>)
   245aa:	f849 2c1c 	str.w	r2, [r9, #-28]
   245ae:	681a      	ldr	r2, [r3, #0]
   245b0:	4b96      	ldr	r3, [pc, #600]	; (2480c <rpc_ip_event_handler+0x330>)
   245b2:	f849 2c18 	str.w	r2, [r9, #-24]
   245b6:	681a      	ldr	r2, [r3, #0]
   245b8:	f849 2c14 	str.w	r2, [r9, #-20]
   245bc:	8a0a      	ldrh	r2, [r1, #16]
   245be:	4994      	ldr	r1, [pc, #592]	; (24810 <rpc_ip_event_handler+0x334>)
   245c0:	2a04      	cmp	r2, #4
   245c2:	8808      	ldrh	r0, [r1, #0]
   245c4:	f849 2c10 	str.w	r2, [r9, #-16]
   245c8:	f849 5c0c 	str.w	r5, [r9, #-12]
   245cc:	eb08 0106 	add.w	r1, r8, r6
   245d0:	d121      	bne.n	24616 <rpc_ip_event_handler+0x13a>
   245d2:	2202      	movs	r2, #2
   245d4:	606a      	str	r2, [r5, #4]
   245d6:	2210      	movs	r2, #16
   245d8:	8128      	strh	r0, [r5, #8]
   245da:	702a      	strb	r2, [r5, #0]
   245dc:	680a      	ldr	r2, [r1, #0]
   245de:	60ea      	str	r2, [r5, #12]
   245e0:	f859 2c10 	ldr.w	r2, [r9, #-16]
   245e4:	f10b 0001 	add.w	r0, fp, #1
   245e8:	4416      	add	r6, r2
   245ea:	f7fa f9a3 	bl	1e934 <nrf_modem_os_alloc>
   245ee:	f849 0c08 	str.w	r0, [r9, #-8]
   245f2:	b148      	cbz	r0, 24608 <rpc_ip_event_handler+0x12c>
   245f4:	465a      	mov	r2, fp
   245f6:	eb08 0106 	add.w	r1, r8, r6
   245fa:	f008 faea 	bl	2cbd2 <memcpy>
   245fe:	2100      	movs	r1, #0
   24600:	f859 2c08 	ldr.w	r2, [r9, #-8]
   24604:	f802 100b 	strb.w	r1, [r2, fp]
   24608:	f849 9c04 	str.w	r9, [r9, #-4]
   2460c:	445e      	add	r6, fp
   2460e:	f109 0920 	add.w	r9, r9, #32
   24612:	3508      	adds	r5, #8
   24614:	e798      	b.n	24548 <rpc_ip_event_handler+0x6c>
   24616:	230a      	movs	r3, #10
   24618:	f04f 0c24 	mov.w	ip, #36	; 0x24
   2461c:	8128      	strh	r0, [r5, #8]
   2461e:	606b      	str	r3, [r5, #4]
   24620:	f885 c000 	strb.w	ip, [r5]
   24624:	f105 0010 	add.w	r0, r5, #16
   24628:	f008 fad3 	bl	2cbd2 <memcpy>
   2462c:	e7d8      	b.n	245e0 <rpc_ip_event_handler+0x104>
   2462e:	f7ff f971 	bl	23914 <rpc_error_to_nrf_gai_errno>
   24632:	4b73      	ldr	r3, [pc, #460]	; (24800 <rpc_ip_event_handler+0x324>)
   24634:	6018      	str	r0, [r3, #0]
   24636:	e795      	b.n	24564 <rpc_ip_event_handler+0x88>
   24638:	6943      	ldr	r3, [r0, #20]
   2463a:	2b6a      	cmp	r3, #106	; 0x6a
   2463c:	bf8e      	itee	hi
   2463e:	235f      	movhi	r3, #95	; 0x5f
   24640:	4a74      	ldrls	r2, [pc, #464]	; (24814 <rpc_ip_event_handler+0x338>)
   24642:	5cd3      	ldrbls	r3, [r2, r3]
   24644:	4a74      	ldr	r2, [pc, #464]	; (24818 <rpc_ip_event_handler+0x33c>)
   24646:	6013      	str	r3, [r2, #0]
   24648:	4b74      	ldr	r3, [pc, #464]	; (2481c <rpc_ip_event_handler+0x340>)
   2464a:	2201      	movs	r2, #1
   2464c:	701a      	strb	r2, [r3, #0]
   2464e:	e159      	b.n	24904 <rpc_ip_event_handler+0x428>
   24650:	6903      	ldr	r3, [r0, #16]
   24652:	2b03      	cmp	r3, #3
   24654:	d807      	bhi.n	24666 <rpc_ip_event_handler+0x18a>
   24656:	e8df f003 	tbb	[pc, r3]
   2465a:	0802      	.short	0x0802
   2465c:	0802      	.short	0x0802
   2465e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   24662:	f7ff f835 	bl	236d0 <interface_sockets_aux_state_set>
   24666:	4b6e      	ldr	r3, [pc, #440]	; (24820 <rpc_ip_event_handler+0x344>)
   24668:	e7ef      	b.n	2464a <rpc_ip_event_handler+0x16e>
   2466a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   2466e:	f7ff f84d 	bl	2370c <interface_sockets_aux_state_clear>
   24672:	e7f8      	b.n	24666 <rpc_ip_event_handler+0x18a>
   24674:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   24678:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   2467c:	68c0      	ldr	r0, [r0, #12]
   2467e:	d13b      	bne.n	246f8 <rpc_ip_event_handler+0x21c>
   24680:	f7ff f862 	bl	23748 <interface_from_internal_id_search>
   24684:	4607      	mov	r7, r0
   24686:	4638      	mov	r0, r7
   24688:	f7ff f876 	bl	23778 <interface_socket_from_handle_get>
   2468c:	4605      	mov	r5, r0
   2468e:	2800      	cmp	r0, #0
   24690:	f43f af6b 	beq.w	2456a <rpc_ip_event_handler+0x8e>
   24694:	4601      	mov	r1, r0
   24696:	4633      	mov	r3, r6
   24698:	4622      	mov	r2, r4
   2469a:	4638      	mov	r0, r7
   2469c:	f000 fd56 	bl	2514c <tls_rpc_ip_event_handler>
   246a0:	2800      	cmp	r0, #0
   246a2:	f000 812f 	beq.w	24904 <rpc_ip_event_handler+0x428>
   246a6:	f248 030c 	movw	r3, #32780	; 0x800c
   246aa:	429e      	cmp	r6, r3
   246ac:	d826      	bhi.n	246fc <rpc_ip_event_handler+0x220>
   246ae:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   246b2:	f67f af5a 	bls.w	2456a <rpc_ip_event_handler+0x8e>
   246b6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   246ba:	3e01      	subs	r6, #1
   246bc:	2e0b      	cmp	r6, #11
   246be:	f63f af54 	bhi.w	2456a <rpc_ip_event_handler+0x8e>
   246c2:	a301      	add	r3, pc, #4	; (adr r3, 246c8 <rpc_ip_event_handler+0x1ec>)
   246c4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   246c8:	0002478d 	.word	0x0002478d
   246cc:	00024841 	.word	0x00024841
   246d0:	0002495d 	.word	0x0002495d
   246d4:	0002497b 	.word	0x0002497b
   246d8:	00024825 	.word	0x00024825
   246dc:	0002490d 	.word	0x0002490d
   246e0:	0002490d 	.word	0x0002490d
   246e4:	00024885 	.word	0x00024885
   246e8:	000247a7 	.word	0x000247a7
   246ec:	0002456b 	.word	0x0002456b
   246f0:	0002456b 	.word	0x0002456b
   246f4:	000248af 	.word	0x000248af
   246f8:	0c07      	lsrs	r7, r0, #16
   246fa:	e7c4      	b.n	24686 <rpc_ip_event_handler+0x1aa>
   246fc:	f249 0302 	movw	r3, #36866	; 0x9002
   24700:	429e      	cmp	r6, r3
   24702:	f000 80cc 	beq.w	2489e <rpc_ip_event_handler+0x3c2>
   24706:	f249 0303 	movw	r3, #36867	; 0x9003
   2470a:	429e      	cmp	r6, r3
   2470c:	d05b      	beq.n	247c6 <rpc_ip_event_handler+0x2ea>
   2470e:	f249 0301 	movw	r3, #36865	; 0x9001
   24712:	429e      	cmp	r6, r3
   24714:	f47f af29 	bne.w	2456a <rpc_ip_event_handler+0x8e>
   24718:	682e      	ldr	r6, [r5, #0]
   2471a:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   2471e:	f000 80ee 	beq.w	248fe <rpc_ip_event_handler+0x422>
   24722:	68a3      	ldr	r3, [r4, #8]
   24724:	2b04      	cmp	r3, #4
   24726:	f240 80e7 	bls.w	248f8 <rpc_ip_event_handler+0x41c>
   2472a:	8a63      	ldrh	r3, [r4, #18]
   2472c:	2b00      	cmp	r3, #0
   2472e:	f000 80e4 	beq.w	248fa <rpc_ip_event_handler+0x41e>
   24732:	2b10      	cmp	r3, #16
   24734:	f040 80cc 	bne.w	248d0 <rpc_ip_event_handler+0x3f4>
   24738:	2024      	movs	r0, #36	; 0x24
   2473a:	f7fa f8fb 	bl	1e934 <nrf_modem_os_alloc>
   2473e:	b318      	cbz	r0, 24788 <rpc_ip_event_handler+0x2ac>
   24740:	230a      	movs	r3, #10
   24742:	6043      	str	r3, [r0, #4]
   24744:	2324      	movs	r3, #36	; 0x24
   24746:	7003      	strb	r3, [r0, #0]
   24748:	7c62      	ldrb	r2, [r4, #17]
   2474a:	7c23      	ldrb	r3, [r4, #16]
   2474c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   24750:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24754:	8103      	strh	r3, [r0, #8]
   24756:	f100 0210 	add.w	r2, r0, #16
   2475a:	f104 0314 	add.w	r3, r4, #20
   2475e:	f853 6b04 	ldr.w	r6, [r3], #4
   24762:	428b      	cmp	r3, r1
   24764:	f842 6b04 	str.w	r6, [r2], #4
   24768:	d1f9      	bne.n	2475e <rpc_ip_event_handler+0x282>
   2476a:	2324      	movs	r3, #36	; 0x24
   2476c:	6822      	ldr	r2, [r4, #0]
   2476e:	9307      	str	r3, [sp, #28]
   24770:	9204      	str	r2, [sp, #16]
   24772:	6862      	ldr	r2, [r4, #4]
   24774:	a904      	add	r1, sp, #16
   24776:	e9cd 2005 	strd	r2, r0, [sp, #20]
   2477a:	69e8      	ldr	r0, [r5, #28]
   2477c:	6803      	ldr	r3, [r0, #0]
   2477e:	685b      	ldr	r3, [r3, #4]
   24780:	4798      	blx	r3
   24782:	3001      	adds	r0, #1
   24784:	f040 808f 	bne.w	248a6 <rpc_ip_event_handler+0x3ca>
   24788:	2002      	movs	r0, #2
   2478a:	e0bc      	b.n	24906 <rpc_ip_event_handler+0x42a>
   2478c:	682b      	ldr	r3, [r5, #0]
   2478e:	2b01      	cmp	r3, #1
   24790:	f040 80b8 	bne.w	24904 <rpc_ip_event_handler+0x428>
   24794:	6960      	ldr	r0, [r4, #20]
   24796:	2800      	cmp	r0, #0
   24798:	f040 80e9 	bne.w	2496e <rpc_ip_event_handler+0x492>
   2479c:	2302      	movs	r3, #2
   2479e:	602b      	str	r3, [r5, #0]
   247a0:	69a3      	ldr	r3, [r4, #24]
   247a2:	61ab      	str	r3, [r5, #24]
   247a4:	e0af      	b.n	24906 <rpc_ip_event_handler+0x42a>
   247a6:	682b      	ldr	r3, [r5, #0]
   247a8:	b29b      	uxth	r3, r3
   247aa:	2b0d      	cmp	r3, #13
   247ac:	f040 80aa 	bne.w	24904 <rpc_ip_event_handler+0x428>
   247b0:	6960      	ldr	r0, [r4, #20]
   247b2:	2800      	cmp	r0, #0
   247b4:	f040 80db 	bne.w	2496e <rpc_ip_event_handler+0x492>
   247b8:	682b      	ldr	r3, [r5, #0]
   247ba:	0c1b      	lsrs	r3, r3, #16
   247bc:	041b      	lsls	r3, r3, #16
   247be:	f043 030e 	orr.w	r3, r3, #14
   247c2:	602b      	str	r3, [r5, #0]
   247c4:	e09f      	b.n	24906 <rpc_ip_event_handler+0x42a>
   247c6:	682b      	ldr	r3, [r5, #0]
   247c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   247cc:	602b      	str	r3, [r5, #0]
   247ce:	682b      	ldr	r3, [r5, #0]
   247d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   247d4:	602b      	str	r3, [r5, #0]
   247d6:	6923      	ldr	r3, [r4, #16]
   247d8:	2b6c      	cmp	r3, #108	; 0x6c
   247da:	d107      	bne.n	247ec <rpc_ip_event_handler+0x310>
   247dc:	682b      	ldr	r3, [r5, #0]
   247de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   247e2:	602b      	str	r3, [r5, #0]
   247e4:	2380      	movs	r3, #128	; 0x80
   247e6:	606b      	str	r3, [r5, #4]
   247e8:	60ab      	str	r3, [r5, #8]
   247ea:	e08b      	b.n	24904 <rpc_ip_event_handler+0x428>
   247ec:	2b6a      	cmp	r3, #106	; 0x6a
   247ee:	bf96      	itet	ls
   247f0:	4a08      	ldrls	r2, [pc, #32]	; (24814 <rpc_ip_event_handler+0x338>)
   247f2:	235f      	movhi	r3, #95	; 0x5f
   247f4:	5cd3      	ldrbls	r3, [r2, r3]
   247f6:	e7f6      	b.n	247e6 <rpc_ip_event_handler+0x30a>
   247f8:	2000d354 	.word	0x2000d354
   247fc:	2000d358 	.word	0x2000d358
   24800:	2000d350 	.word	0x2000d350
   24804:	000309ca 	.word	0x000309ca
   24808:	2000d348 	.word	0x2000d348
   2480c:	2000d344 	.word	0x2000d344
   24810:	2000d476 	.word	0x2000d476
   24814:	000309cf 	.word	0x000309cf
   24818:	2000d37c 	.word	0x2000d37c
   2481c:	2000da0f 	.word	0x2000da0f
   24820:	2000da0d 	.word	0x2000da0d
   24824:	682b      	ldr	r3, [r5, #0]
   24826:	b29b      	uxth	r3, r3
   24828:	2b03      	cmp	r3, #3
   2482a:	d16b      	bne.n	24904 <rpc_ip_event_handler+0x428>
   2482c:	6960      	ldr	r0, [r4, #20]
   2482e:	2800      	cmp	r0, #0
   24830:	f040 809d 	bne.w	2496e <rpc_ip_event_handler+0x492>
   24834:	682b      	ldr	r3, [r5, #0]
   24836:	0c1b      	lsrs	r3, r3, #16
   24838:	041b      	lsls	r3, r3, #16
   2483a:	f043 0304 	orr.w	r3, r3, #4
   2483e:	e7c0      	b.n	247c2 <rpc_ip_event_handler+0x2e6>
   24840:	682b      	ldr	r3, [r5, #0]
   24842:	0099      	lsls	r1, r3, #2
   24844:	d55e      	bpl.n	24904 <rpc_ip_event_handler+0x428>
   24846:	682b      	ldr	r3, [r5, #0]
   24848:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2484c:	602b      	str	r3, [r5, #0]
   2484e:	6960      	ldr	r0, [r4, #20]
   24850:	b968      	cbnz	r0, 2486e <rpc_ip_event_handler+0x392>
   24852:	682b      	ldr	r3, [r5, #0]
   24854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   24858:	602b      	str	r3, [r5, #0]
   2485a:	682b      	ldr	r3, [r5, #0]
   2485c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24860:	602b      	str	r3, [r5, #0]
   24862:	682b      	ldr	r3, [r5, #0]
   24864:	0c1b      	lsrs	r3, r3, #16
   24866:	041b      	lsls	r3, r3, #16
   24868:	f043 0305 	orr.w	r3, r3, #5
   2486c:	e7a9      	b.n	247c2 <rpc_ip_event_handler+0x2e6>
   2486e:	286a      	cmp	r0, #106	; 0x6a
   24870:	bf8e      	itee	hi
   24872:	235f      	movhi	r3, #95	; 0x5f
   24874:	4b4c      	ldrls	r3, [pc, #304]	; (249a8 <rpc_ip_event_handler+0x4cc>)
   24876:	5c1b      	ldrbls	r3, [r3, r0]
   24878:	606b      	str	r3, [r5, #4]
   2487a:	682b      	ldr	r3, [r5, #0]
   2487c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24880:	602b      	str	r3, [r5, #0]
   24882:	e03f      	b.n	24904 <rpc_ip_event_handler+0x428>
   24884:	682b      	ldr	r3, [r5, #0]
   24886:	b29b      	uxth	r3, r3
   24888:	2b06      	cmp	r3, #6
   2488a:	d13b      	bne.n	24904 <rpc_ip_event_handler+0x428>
   2488c:	6960      	ldr	r0, [r4, #20]
   2488e:	2800      	cmp	r0, #0
   24890:	d16d      	bne.n	2496e <rpc_ip_event_handler+0x492>
   24892:	682b      	ldr	r3, [r5, #0]
   24894:	0c1b      	lsrs	r3, r3, #16
   24896:	041b      	lsls	r3, r3, #16
   24898:	f043 0307 	orr.w	r3, r3, #7
   2489c:	e791      	b.n	247c2 <rpc_ip_event_handler+0x2e6>
   2489e:	682b      	ldr	r3, [r5, #0]
   248a0:	b29b      	uxth	r3, r3
   248a2:	2b07      	cmp	r3, #7
   248a4:	d12e      	bne.n	24904 <rpc_ip_event_handler+0x428>
   248a6:	682b      	ldr	r3, [r5, #0]
   248a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   248ac:	e7e8      	b.n	24880 <rpc_ip_event_handler+0x3a4>
   248ae:	682b      	ldr	r3, [r5, #0]
   248b0:	b29b      	uxth	r3, r3
   248b2:	2b08      	cmp	r3, #8
   248b4:	d126      	bne.n	24904 <rpc_ip_event_handler+0x428>
   248b6:	6963      	ldr	r3, [r4, #20]
   248b8:	2b00      	cmp	r3, #0
   248ba:	d16d      	bne.n	24998 <rpc_ip_event_handler+0x4bc>
   248bc:	4b3b      	ldr	r3, [pc, #236]	; (249ac <rpc_ip_event_handler+0x4d0>)
   248be:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   248c2:	682b      	ldr	r3, [r5, #0]
   248c4:	0c1b      	lsrs	r3, r3, #16
   248c6:	041b      	lsls	r3, r3, #16
   248c8:	f043 0309 	orr.w	r3, r3, #9
   248cc:	602b      	str	r3, [r5, #0]
   248ce:	e032      	b.n	24936 <rpc_ip_event_handler+0x45a>
   248d0:	2b04      	cmp	r3, #4
   248d2:	d114      	bne.n	248fe <rpc_ip_event_handler+0x422>
   248d4:	2010      	movs	r0, #16
   248d6:	f7fa f82d 	bl	1e934 <nrf_modem_os_alloc>
   248da:	2800      	cmp	r0, #0
   248dc:	f43f af54 	beq.w	24788 <rpc_ip_event_handler+0x2ac>
   248e0:	2302      	movs	r3, #2
   248e2:	6043      	str	r3, [r0, #4]
   248e4:	2310      	movs	r3, #16
   248e6:	7003      	strb	r3, [r0, #0]
   248e8:	7c22      	ldrb	r2, [r4, #16]
   248ea:	7c61      	ldrb	r1, [r4, #17]
   248ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   248f0:	8102      	strh	r2, [r0, #8]
   248f2:	6962      	ldr	r2, [r4, #20]
   248f4:	60c2      	str	r2, [r0, #12]
   248f6:	e739      	b.n	2476c <rpc_ip_event_handler+0x290>
   248f8:	2300      	movs	r3, #0
   248fa:	4618      	mov	r0, r3
   248fc:	e736      	b.n	2476c <rpc_ip_event_handler+0x290>
   248fe:	6820      	ldr	r0, [r4, #0]
   24900:	f007 f96c 	bl	2bbdc <rpc_client_data_free>
   24904:	2000      	movs	r0, #0
   24906:	b009      	add	sp, #36	; 0x24
   24908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2490c:	4b27      	ldr	r3, [pc, #156]	; (249ac <rpc_ip_event_handler+0x4d0>)
   2490e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   24912:	6963      	ldr	r3, [r4, #20]
   24914:	b17b      	cbz	r3, 24936 <rpc_ip_event_handler+0x45a>
   24916:	2b6b      	cmp	r3, #107	; 0x6b
   24918:	d10f      	bne.n	2493a <rpc_ip_event_handler+0x45e>
   2491a:	6928      	ldr	r0, [r5, #16]
   2491c:	220c      	movs	r2, #12
   2491e:	2801      	cmp	r0, #1
   24920:	682b      	ldr	r3, [r5, #0]
   24922:	d104      	bne.n	2492e <rpc_ip_event_handler+0x452>
   24924:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   24928:	602b      	str	r3, [r5, #0]
   2492a:	606a      	str	r2, [r5, #4]
   2492c:	e7eb      	b.n	24906 <rpc_ip_event_handler+0x42a>
   2492e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24932:	602b      	str	r3, [r5, #0]
   24934:	606a      	str	r2, [r5, #4]
   24936:	2001      	movs	r0, #1
   24938:	e7e5      	b.n	24906 <rpc_ip_event_handler+0x42a>
   2493a:	f023 0002 	bic.w	r0, r3, #2
   2493e:	2801      	cmp	r0, #1
   24940:	d102      	bne.n	24948 <rpc_ip_event_handler+0x46c>
   24942:	230c      	movs	r3, #12
   24944:	606b      	str	r3, [r5, #4]
   24946:	e7de      	b.n	24906 <rpc_ip_event_handler+0x42a>
   24948:	2b6a      	cmp	r3, #106	; 0x6a
   2494a:	bf8e      	itee	hi
   2494c:	235f      	movhi	r3, #95	; 0x5f
   2494e:	4a16      	ldrls	r2, [pc, #88]	; (249a8 <rpc_ip_event_handler+0x4cc>)
   24950:	5cd3      	ldrbls	r3, [r2, r3]
   24952:	606b      	str	r3, [r5, #4]
   24954:	682b      	ldr	r3, [r5, #0]
   24956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2495a:	e7b7      	b.n	248cc <rpc_ip_event_handler+0x3f0>
   2495c:	682b      	ldr	r3, [r5, #0]
   2495e:	025a      	lsls	r2, r3, #9
   24960:	d5d0      	bpl.n	24904 <rpc_ip_event_handler+0x428>
   24962:	6960      	ldr	r0, [r4, #20]
   24964:	b918      	cbnz	r0, 2496e <rpc_ip_event_handler+0x492>
   24966:	682b      	ldr	r3, [r5, #0]
   24968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2496c:	e729      	b.n	247c2 <rpc_ip_event_handler+0x2e6>
   2496e:	286a      	cmp	r0, #106	; 0x6a
   24970:	d817      	bhi.n	249a2 <rpc_ip_event_handler+0x4c6>
   24972:	4b0d      	ldr	r3, [pc, #52]	; (249a8 <rpc_ip_event_handler+0x4cc>)
   24974:	5c1b      	ldrb	r3, [r3, r0]
   24976:	606b      	str	r3, [r5, #4]
   24978:	e7c4      	b.n	24904 <rpc_ip_event_handler+0x428>
   2497a:	682b      	ldr	r3, [r5, #0]
   2497c:	01db      	lsls	r3, r3, #7
   2497e:	d5c1      	bpl.n	24904 <rpc_ip_event_handler+0x428>
   24980:	6963      	ldr	r3, [r4, #20]
   24982:	b94b      	cbnz	r3, 24998 <rpc_ip_event_handler+0x4bc>
   24984:	6820      	ldr	r0, [r4, #0]
   24986:	b118      	cbz	r0, 24990 <rpc_ip_event_handler+0x4b4>
   24988:	2001      	movs	r0, #1
   2498a:	4b08      	ldr	r3, [pc, #32]	; (249ac <rpc_ip_event_handler+0x4d0>)
   2498c:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   24990:	682b      	ldr	r3, [r5, #0]
   24992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   24996:	e714      	b.n	247c2 <rpc_ip_event_handler+0x2e6>
   24998:	2b6a      	cmp	r3, #106	; 0x6a
   2499a:	d802      	bhi.n	249a2 <rpc_ip_event_handler+0x4c6>
   2499c:	4a02      	ldr	r2, [pc, #8]	; (249a8 <rpc_ip_event_handler+0x4cc>)
   2499e:	5cd3      	ldrb	r3, [r2, r3]
   249a0:	e7e9      	b.n	24976 <rpc_ip_event_handler+0x49a>
   249a2:	235f      	movs	r3, #95	; 0x5f
   249a4:	e7e7      	b.n	24976 <rpc_ip_event_handler+0x49a>
   249a6:	bf00      	nop
   249a8:	000309cf 	.word	0x000309cf
   249ac:	2000d35c 	.word	0x2000d35c

000249b0 <secure_socket_dtls_timeout_check>:
   249b0:	281f      	cmp	r0, #31
   249b2:	dc0b      	bgt.n	249cc <secure_socket_dtls_timeout_check+0x1c>
   249b4:	2800      	cmp	r0, #0
   249b6:	dd10      	ble.n	249da <secure_socket_dtls_timeout_check+0x2a>
   249b8:	2301      	movs	r3, #1
   249ba:	fa03 f000 	lsl.w	r0, r3, r0
   249be:	4b09      	ldr	r3, [pc, #36]	; (249e4 <secure_socket_dtls_timeout_check+0x34>)
   249c0:	4003      	ands	r3, r0
   249c2:	2b00      	cmp	r3, #0
   249c4:	bf0c      	ite	eq
   249c6:	2016      	moveq	r0, #22
   249c8:	2000      	movne	r0, #0
   249ca:	4770      	bx	lr
   249cc:	283f      	cmp	r0, #63	; 0x3f
   249ce:	d006      	beq.n	249de <secure_socket_dtls_timeout_check+0x2e>
   249d0:	287b      	cmp	r0, #123	; 0x7b
   249d2:	bf14      	ite	ne
   249d4:	2016      	movne	r0, #22
   249d6:	2000      	moveq	r0, #0
   249d8:	4770      	bx	lr
   249da:	2016      	movs	r0, #22
   249dc:	4770      	bx	lr
   249de:	2000      	movs	r0, #0
   249e0:	4770      	bx	lr
   249e2:	bf00      	nop
   249e4:	8000808a 	.word	0x8000808a

000249e8 <hostname_free>:
   249e8:	b538      	push	{r3, r4, r5, lr}
   249ea:	4c07      	ldr	r4, [pc, #28]	; (24a08 <hostname_free+0x20>)
   249ec:	4605      	mov	r5, r0
   249ee:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   249f2:	b138      	cbz	r0, 24a04 <hostname_free+0x1c>
   249f4:	f7f9 ffa6 	bl	1e944 <nrf_modem_os_free>
   249f8:	2300      	movs	r3, #0
   249fa:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   249fe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   24a02:	6063      	str	r3, [r4, #4]
   24a04:	bd38      	pop	{r3, r4, r5, pc}
   24a06:	bf00      	nop
   24a08:	2000d380 	.word	0x2000d380

00024a0c <secure_socket_attach_initiate>:
   24a0c:	f04f 33ff 	mov.w	r3, #4294967295
   24a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24a14:	f8df 8094 	ldr.w	r8, [pc, #148]	; 24aac <secure_socket_attach_initiate+0xa0>
   24a18:	9301      	str	r3, [sp, #4]
   24a1a:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   24a1e:	460d      	mov	r5, r1
   24a20:	4616      	mov	r6, r2
   24a22:	f8d9 3004 	ldr.w	r3, [r9, #4]
   24a26:	f247 0281 	movw	r2, #28801	; 0x7081
   24a2a:	6989      	ldr	r1, [r1, #24]
   24a2c:	4607      	mov	r7, r0
   24a2e:	f007 f967 	bl	2bd00 <ip_interface_request_create>
   24a32:	4604      	mov	r4, r0
   24a34:	b398      	cbz	r0, 24a9e <secure_socket_attach_initiate+0x92>
   24a36:	f8d9 2004 	ldr.w	r2, [r9, #4]
   24a3a:	b122      	cbz	r2, 24a46 <secure_socket_attach_initiate+0x3a>
   24a3c:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   24a40:	6800      	ldr	r0, [r0, #0]
   24a42:	f008 f8c6 	bl	2cbd2 <memcpy>
   24a46:	2324      	movs	r3, #36	; 0x24
   24a48:	4a17      	ldr	r2, [pc, #92]	; (24aa8 <secure_socket_attach_initiate+0x9c>)
   24a4a:	fb03 2307 	mla	r3, r3, r7, r2
   24a4e:	f104 0214 	add.w	r2, r4, #20
   24a52:	f103 0124 	add.w	r1, r3, #36	; 0x24
   24a56:	f853 0b04 	ldr.w	r0, [r3], #4
   24a5a:	428b      	cmp	r3, r1
   24a5c:	f842 0b04 	str.w	r0, [r2], #4
   24a60:	d1f9      	bne.n	24a56 <secure_socket_attach_initiate+0x4a>
   24a62:	68a3      	ldr	r3, [r4, #8]
   24a64:	4622      	mov	r2, r4
   24a66:	3324      	adds	r3, #36	; 0x24
   24a68:	60a3      	str	r3, [r4, #8]
   24a6a:	682b      	ldr	r3, [r5, #0]
   24a6c:	f247 0181 	movw	r1, #28801	; 0x7081
   24a70:	0c1b      	lsrs	r3, r3, #16
   24a72:	041b      	lsls	r3, r3, #16
   24a74:	f043 030a 	orr.w	r3, r3, #10
   24a78:	602b      	str	r3, [r5, #0]
   24a7a:	2004      	movs	r0, #4
   24a7c:	f007 f8a4 	bl	2bbc8 <rpc_client_request_send>
   24a80:	682b      	ldr	r3, [r5, #0]
   24a82:	00db      	lsls	r3, r3, #3
   24a84:	d40d      	bmi.n	24aa2 <secure_socket_attach_initiate+0x96>
   24a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24a8a:	210b      	movs	r1, #11
   24a8c:	4638      	mov	r0, r7
   24a8e:	ab01      	add	r3, sp, #4
   24a90:	f007 f949 	bl	2bd26 <ip_interface_wait>
   24a94:	b100      	cbz	r0, 24a98 <secure_socket_attach_initiate+0x8c>
   24a96:	602e      	str	r6, [r5, #0]
   24a98:	b003      	add	sp, #12
   24a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24a9e:	200c      	movs	r0, #12
   24aa0:	e7fa      	b.n	24a98 <secure_socket_attach_initiate+0x8c>
   24aa2:	2077      	movs	r0, #119	; 0x77
   24aa4:	e7f8      	b.n	24a98 <secure_socket_attach_initiate+0x8c>
   24aa6:	bf00      	nop
   24aa8:	2000da11 	.word	0x2000da11
   24aac:	2000d380 	.word	0x2000d380

00024ab0 <tls_interface_init>:
   24ab0:	2201      	movs	r2, #1
   24ab2:	4b02      	ldr	r3, [pc, #8]	; (24abc <tls_interface_init+0xc>)
   24ab4:	2000      	movs	r0, #0
   24ab6:	701a      	strb	r2, [r3, #0]
   24ab8:	4770      	bx	lr
   24aba:	bf00      	nop
   24abc:	2000da10 	.word	0x2000da10

00024ac0 <tls_interface_open>:
   24ac0:	b538      	push	{r3, r4, r5, lr}
   24ac2:	4b21      	ldr	r3, [pc, #132]	; (24b48 <tls_interface_open+0x88>)
   24ac4:	4615      	mov	r5, r2
   24ac6:	781b      	ldrb	r3, [r3, #0]
   24ac8:	b92b      	cbnz	r3, 24ad6 <tls_interface_open+0x16>
   24aca:	2075      	movs	r0, #117	; 0x75
   24acc:	f006 faf7 	bl	2b0be <nrf_modem_os_errno_set>
   24ad0:	f04f 34ff 	mov.w	r4, #4294967295
   24ad4:	e031      	b.n	24b3a <tls_interface_open+0x7a>
   24ad6:	1e4b      	subs	r3, r1, #1
   24ad8:	2b01      	cmp	r3, #1
   24ada:	d809      	bhi.n	24af0 <tls_interface_open+0x30>
   24adc:	b952      	cbnz	r2, 24af4 <tls_interface_open+0x34>
   24ade:	2901      	cmp	r1, #1
   24ae0:	bf0b      	itete	eq
   24ae2:	2201      	moveq	r2, #1
   24ae4:	2202      	movne	r2, #2
   24ae6:	f44f 7582 	moveq.w	r5, #260	; 0x104
   24aea:	f44f 7587 	movne.w	r5, #270	; 0x10e
   24aee:	e007      	b.n	24b00 <tls_interface_open+0x40>
   24af0:	206b      	movs	r0, #107	; 0x6b
   24af2:	e7eb      	b.n	24acc <tls_interface_open+0xc>
   24af4:	2901      	cmp	r1, #1
   24af6:	d122      	bne.n	24b3e <tls_interface_open+0x7e>
   24af8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   24afc:	d1f8      	bne.n	24af0 <tls_interface_open+0x30>
   24afe:	460a      	mov	r2, r1
   24b00:	f7fe ff40 	bl	23984 <ip_interface_open>
   24b04:	1e04      	subs	r4, r0, #0
   24b06:	dbe3      	blt.n	24ad0 <tls_interface_open+0x10>
   24b08:	2224      	movs	r2, #36	; 0x24
   24b0a:	4910      	ldr	r1, [pc, #64]	; (24b4c <tls_interface_open+0x8c>)
   24b0c:	4b10      	ldr	r3, [pc, #64]	; (24b50 <tls_interface_open+0x90>)
   24b0e:	fb02 1204 	mla	r2, r2, r4, r1
   24b12:	f103 0124 	add.w	r1, r3, #36	; 0x24
   24b16:	f853 0b04 	ldr.w	r0, [r3], #4
   24b1a:	428b      	cmp	r3, r1
   24b1c:	f842 0b04 	str.w	r0, [r2], #4
   24b20:	d1f9      	bne.n	24b16 <tls_interface_open+0x56>
   24b22:	4620      	mov	r0, r4
   24b24:	f7fe fe28 	bl	23778 <interface_socket_from_handle_get>
   24b28:	6803      	ldr	r3, [r0, #0]
   24b2a:	6145      	str	r5, [r0, #20]
   24b2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24b30:	6003      	str	r3, [r0, #0]
   24b32:	6803      	ldr	r3, [r0, #0]
   24b34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24b38:	6003      	str	r3, [r0, #0]
   24b3a:	4620      	mov	r0, r4
   24b3c:	bd38      	pop	{r3, r4, r5, pc}
   24b3e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   24b42:	d1d5      	bne.n	24af0 <tls_interface_open+0x30>
   24b44:	2202      	movs	r2, #2
   24b46:	e7db      	b.n	24b00 <tls_interface_open+0x40>
   24b48:	2000da10 	.word	0x2000da10
   24b4c:	2000da11 	.word	0x2000da11
   24b50:	00030a3a 	.word	0x00030a3a

00024b54 <tls_interface_sendto>:
   24b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b58:	b085      	sub	sp, #20
   24b5a:	4606      	mov	r6, r0
   24b5c:	4691      	mov	r9, r2
   24b5e:	461f      	mov	r7, r3
   24b60:	9103      	str	r1, [sp, #12]
   24b62:	f7fe fe09 	bl	23778 <interface_socket_from_handle_get>
   24b66:	4605      	mov	r5, r0
   24b68:	2800      	cmp	r0, #0
   24b6a:	d06c      	beq.n	24c46 <tls_interface_sendto+0xf2>
   24b6c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   24b70:	07bb      	lsls	r3, r7, #30
   24b72:	bf48      	it	mi
   24b74:	2300      	movmi	r3, #0
   24b76:	f04f 0400 	mov.w	r4, #0
   24b7a:	f04f 3bff 	mov.w	fp, #4294967295
   24b7e:	bf58      	it	pl
   24b80:	6803      	ldrpl	r3, [r0, #0]
   24b82:	fb0a fa06 	mul.w	sl, sl, r6
   24b86:	bf5c      	itt	pl
   24b88:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   24b8c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   24b90:	9302      	str	r3, [sp, #8]
   24b92:	6829      	ldr	r1, [r5, #0]
   24b94:	eba9 0804 	sub.w	r8, r9, r4
   24b98:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   24b9c:	b289      	uxth	r1, r1
   24b9e:	bfa8      	it	ge
   24ba0:	f44f 6800 	movge.w	r8, #2048	; 0x800
   24ba4:	290c      	cmp	r1, #12
   24ba6:	d110      	bne.n	24bca <tls_interface_sendto+0x76>
   24ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24baa:	9903      	ldr	r1, [sp, #12]
   24bac:	9301      	str	r3, [sp, #4]
   24bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24bb0:	4642      	mov	r2, r8
   24bb2:	9300      	str	r3, [sp, #0]
   24bb4:	4630      	mov	r0, r6
   24bb6:	463b      	mov	r3, r7
   24bb8:	4421      	add	r1, r4
   24bba:	f7fe ffa5 	bl	23b08 <ip_interface_sendto>
   24bbe:	f1b0 0b00 	subs.w	fp, r0, #0
   24bc2:	da32      	bge.n	24c2a <tls_interface_sendto+0xd6>
   24bc4:	f04f 34ff 	mov.w	r4, #4294967295
   24bc8:	e034      	b.n	24c34 <tls_interface_sendto+0xe0>
   24bca:	6828      	ldr	r0, [r5, #0]
   24bcc:	b280      	uxth	r0, r0
   24bce:	280b      	cmp	r0, #11
   24bd0:	d109      	bne.n	24be6 <tls_interface_sendto+0x92>
   24bd2:	4b21      	ldr	r3, [pc, #132]	; (24c58 <tls_interface_sendto+0x104>)
   24bd4:	f813 200a 	ldrb.w	r2, [r3, sl]
   24bd8:	2a02      	cmp	r2, #2
   24bda:	d031      	beq.n	24c40 <tls_interface_sendto+0xec>
   24bdc:	692a      	ldr	r2, [r5, #16]
   24bde:	2a01      	cmp	r2, #1
   24be0:	d133      	bne.n	24c4a <tls_interface_sendto+0xf6>
   24be2:	206d      	movs	r0, #109	; 0x6d
   24be4:	e02c      	b.n	24c40 <tls_interface_sendto+0xec>
   24be6:	4628      	mov	r0, r5
   24be8:	f007 fb06 	bl	2c1f8 <attach_trigger_condition_verify>
   24bec:	b388      	cbz	r0, 24c52 <tls_interface_sendto+0xfe>
   24bee:	4b1a      	ldr	r3, [pc, #104]	; (24c58 <tls_interface_sendto+0x104>)
   24bf0:	f813 100a 	ldrb.w	r1, [r3, sl]
   24bf4:	2902      	cmp	r1, #2
   24bf6:	d110      	bne.n	24c1a <tls_interface_sendto+0xc6>
   24bf8:	4629      	mov	r1, r5
   24bfa:	4630      	mov	r0, r6
   24bfc:	f007 fb13 	bl	2c226 <secure_client_socket>
   24c00:	b970      	cbnz	r0, 24c20 <tls_interface_sendto+0xcc>
   24c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24c04:	9903      	ldr	r1, [sp, #12]
   24c06:	9301      	str	r3, [sp, #4]
   24c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24c0a:	4642      	mov	r2, r8
   24c0c:	9300      	str	r3, [sp, #0]
   24c0e:	4630      	mov	r0, r6
   24c10:	463b      	mov	r3, r7
   24c12:	4421      	add	r1, r4
   24c14:	f7fe ff78 	bl	23b08 <ip_interface_sendto>
   24c18:	4683      	mov	fp, r0
   24c1a:	f1bb 0f00 	cmp.w	fp, #0
   24c1e:	e7d0      	b.n	24bc2 <tls_interface_sendto+0x6e>
   24c20:	f1bb 3fff 	cmp.w	fp, #4294967295
   24c24:	d00a      	beq.n	24c3c <tls_interface_sendto+0xe8>
   24c26:	2800      	cmp	r0, #0
   24c28:	dc0a      	bgt.n	24c40 <tls_interface_sendto+0xec>
   24c2a:	9b02      	ldr	r3, [sp, #8]
   24c2c:	445c      	add	r4, fp
   24c2e:	b10b      	cbz	r3, 24c34 <tls_interface_sendto+0xe0>
   24c30:	45a1      	cmp	r9, r4
   24c32:	dcae      	bgt.n	24b92 <tls_interface_sendto+0x3e>
   24c34:	4620      	mov	r0, r4
   24c36:	b005      	add	sp, #20
   24c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c3c:	2800      	cmp	r0, #0
   24c3e:	ddc1      	ble.n	24bc4 <tls_interface_sendto+0x70>
   24c40:	f006 fa3d 	bl	2b0be <nrf_modem_os_errno_set>
   24c44:	e7be      	b.n	24bc4 <tls_interface_sendto+0x70>
   24c46:	2009      	movs	r0, #9
   24c48:	e7fa      	b.n	24c40 <tls_interface_sendto+0xec>
   24c4a:	f1bb 3fff 	cmp.w	fp, #4294967295
   24c4e:	d1ec      	bne.n	24c2a <tls_interface_sendto+0xd6>
   24c50:	e7b8      	b.n	24bc4 <tls_interface_sendto+0x70>
   24c52:	2080      	movs	r0, #128	; 0x80
   24c54:	e7f4      	b.n	24c40 <tls_interface_sendto+0xec>
   24c56:	bf00      	nop
   24c58:	2000da11 	.word	0x2000da11

00024c5c <tls_interface_recvfrom>:
   24c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c60:	460d      	mov	r5, r1
   24c62:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   24c66:	4604      	mov	r4, r0
   24c68:	4616      	mov	r6, r2
   24c6a:	461f      	mov	r7, r3
   24c6c:	f7fe fd84 	bl	23778 <interface_socket_from_handle_get>
   24c70:	4601      	mov	r1, r0
   24c72:	b320      	cbz	r0, 24cbe <tls_interface_recvfrom+0x62>
   24c74:	6803      	ldr	r3, [r0, #0]
   24c76:	b29b      	uxth	r3, r3
   24c78:	2b0c      	cmp	r3, #12
   24c7a:	d003      	beq.n	24c84 <tls_interface_recvfrom+0x28>
   24c7c:	6803      	ldr	r3, [r0, #0]
   24c7e:	b29b      	uxth	r3, r3
   24c80:	2b0d      	cmp	r3, #13
   24c82:	d109      	bne.n	24c98 <tls_interface_recvfrom+0x3c>
   24c84:	463b      	mov	r3, r7
   24c86:	4632      	mov	r2, r6
   24c88:	4629      	mov	r1, r5
   24c8a:	4620      	mov	r0, r4
   24c8c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   24c90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c94:	f007 b857 	b.w	2bd46 <ip_interface_recvfrom>
   24c98:	f007 faae 	bl	2c1f8 <attach_trigger_condition_verify>
   24c9c:	b198      	cbz	r0, 24cc6 <tls_interface_recvfrom+0x6a>
   24c9e:	2324      	movs	r3, #36	; 0x24
   24ca0:	4363      	muls	r3, r4
   24ca2:	4a0a      	ldr	r2, [pc, #40]	; (24ccc <tls_interface_recvfrom+0x70>)
   24ca4:	5cd3      	ldrb	r3, [r2, r3]
   24ca6:	2b02      	cmp	r3, #2
   24ca8:	d10d      	bne.n	24cc6 <tls_interface_recvfrom+0x6a>
   24caa:	4620      	mov	r0, r4
   24cac:	f007 fabb 	bl	2c226 <secure_client_socket>
   24cb0:	2800      	cmp	r0, #0
   24cb2:	d0e7      	beq.n	24c84 <tls_interface_recvfrom+0x28>
   24cb4:	dc04      	bgt.n	24cc0 <tls_interface_recvfrom+0x64>
   24cb6:	f04f 30ff 	mov.w	r0, #4294967295
   24cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24cbe:	2009      	movs	r0, #9
   24cc0:	f006 f9fd 	bl	2b0be <nrf_modem_os_errno_set>
   24cc4:	e7f7      	b.n	24cb6 <tls_interface_recvfrom+0x5a>
   24cc6:	200b      	movs	r0, #11
   24cc8:	e7fa      	b.n	24cc0 <tls_interface_recvfrom+0x64>
   24cca:	bf00      	nop
   24ccc:	2000da11 	.word	0x2000da11

00024cd0 <tls_interface_bind>:
   24cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cd2:	4604      	mov	r4, r0
   24cd4:	460e      	mov	r6, r1
   24cd6:	4617      	mov	r7, r2
   24cd8:	f7fe fd4e 	bl	23778 <interface_socket_from_handle_get>
   24cdc:	4605      	mov	r5, r0
   24cde:	b1d8      	cbz	r0, 24d18 <tls_interface_bind+0x48>
   24ce0:	6803      	ldr	r3, [r0, #0]
   24ce2:	b29b      	uxth	r3, r3
   24ce4:	2b02      	cmp	r3, #2
   24ce6:	d119      	bne.n	24d1c <tls_interface_bind+0x4c>
   24ce8:	463a      	mov	r2, r7
   24cea:	4631      	mov	r1, r6
   24cec:	4620      	mov	r0, r4
   24cee:	f7ff f89f 	bl	23e30 <ip_interface_bind>
   24cf2:	b950      	cbnz	r0, 24d0a <tls_interface_bind+0x3a>
   24cf4:	2324      	movs	r3, #36	; 0x24
   24cf6:	4363      	muls	r3, r4
   24cf8:	4a09      	ldr	r2, [pc, #36]	; (24d20 <tls_interface_bind+0x50>)
   24cfa:	5cd3      	ldrb	r3, [r2, r3]
   24cfc:	2b01      	cmp	r3, #1
   24cfe:	d10a      	bne.n	24d16 <tls_interface_bind+0x46>
   24d00:	2204      	movs	r2, #4
   24d02:	4629      	mov	r1, r5
   24d04:	4620      	mov	r0, r4
   24d06:	f7ff fe81 	bl	24a0c <secure_socket_attach_initiate>
   24d0a:	2800      	cmp	r0, #0
   24d0c:	dd03      	ble.n	24d16 <tls_interface_bind+0x46>
   24d0e:	f006 f9d6 	bl	2b0be <nrf_modem_os_errno_set>
   24d12:	f04f 30ff 	mov.w	r0, #4294967295
   24d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d18:	2009      	movs	r0, #9
   24d1a:	e7f8      	b.n	24d0e <tls_interface_bind+0x3e>
   24d1c:	205f      	movs	r0, #95	; 0x5f
   24d1e:	e7f6      	b.n	24d0e <tls_interface_bind+0x3e>
   24d20:	2000da11 	.word	0x2000da11

00024d24 <tls_interface_connect>:
   24d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d26:	4605      	mov	r5, r0
   24d28:	460e      	mov	r6, r1
   24d2a:	4617      	mov	r7, r2
   24d2c:	f7fe fd24 	bl	23778 <interface_socket_from_handle_get>
   24d30:	4604      	mov	r4, r0
   24d32:	b1f0      	cbz	r0, 24d72 <tls_interface_connect+0x4e>
   24d34:	2324      	movs	r3, #36	; 0x24
   24d36:	436b      	muls	r3, r5
   24d38:	4a10      	ldr	r2, [pc, #64]	; (24d7c <tls_interface_connect+0x58>)
   24d3a:	5cd3      	ldrb	r3, [r2, r3]
   24d3c:	2b02      	cmp	r3, #2
   24d3e:	d11a      	bne.n	24d76 <tls_interface_connect+0x52>
   24d40:	6803      	ldr	r3, [r0, #0]
   24d42:	b29b      	uxth	r3, r3
   24d44:	2b02      	cmp	r3, #2
   24d46:	d003      	beq.n	24d50 <tls_interface_connect+0x2c>
   24d48:	6803      	ldr	r3, [r0, #0]
   24d4a:	b29b      	uxth	r3, r3
   24d4c:	2b04      	cmp	r3, #4
   24d4e:	d112      	bne.n	24d76 <tls_interface_connect+0x52>
   24d50:	463a      	mov	r2, r7
   24d52:	4631      	mov	r1, r6
   24d54:	4628      	mov	r0, r5
   24d56:	f007 f8f8 	bl	2bf4a <ip_interface_connect>
   24d5a:	b918      	cbnz	r0, 24d64 <tls_interface_connect+0x40>
   24d5c:	4621      	mov	r1, r4
   24d5e:	4628      	mov	r0, r5
   24d60:	f007 fa61 	bl	2c226 <secure_client_socket>
   24d64:	2800      	cmp	r0, #0
   24d66:	dd03      	ble.n	24d70 <tls_interface_connect+0x4c>
   24d68:	f006 f9a9 	bl	2b0be <nrf_modem_os_errno_set>
   24d6c:	f04f 30ff 	mov.w	r0, #4294967295
   24d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24d72:	2009      	movs	r0, #9
   24d74:	e7f8      	b.n	24d68 <tls_interface_connect+0x44>
   24d76:	205f      	movs	r0, #95	; 0x5f
   24d78:	e7f6      	b.n	24d68 <tls_interface_connect+0x44>
   24d7a:	bf00      	nop
   24d7c:	2000da11 	.word	0x2000da11

00024d80 <tls_interface_listen>:
   24d80:	b538      	push	{r3, r4, r5, lr}
   24d82:	460d      	mov	r5, r1
   24d84:	4604      	mov	r4, r0
   24d86:	f7fe fcf7 	bl	23778 <interface_socket_from_handle_get>
   24d8a:	4601      	mov	r1, r0
   24d8c:	2800      	cmp	r0, #0
   24d8e:	d033      	beq.n	24df8 <tls_interface_listen+0x78>
   24d90:	6803      	ldr	r3, [r0, #0]
   24d92:	00db      	lsls	r3, r3, #3
   24d94:	d432      	bmi.n	24dfc <tls_interface_listen+0x7c>
   24d96:	6903      	ldr	r3, [r0, #16]
   24d98:	2b01      	cmp	r3, #1
   24d9a:	d12f      	bne.n	24dfc <tls_interface_listen+0x7c>
   24d9c:	6803      	ldr	r3, [r0, #0]
   24d9e:	b29b      	uxth	r3, r3
   24da0:	2b04      	cmp	r3, #4
   24da2:	d105      	bne.n	24db0 <tls_interface_listen+0x30>
   24da4:	2324      	movs	r3, #36	; 0x24
   24da6:	4363      	muls	r3, r4
   24da8:	4a15      	ldr	r2, [pc, #84]	; (24e00 <tls_interface_listen+0x80>)
   24daa:	5cd3      	ldrb	r3, [r2, r3]
   24dac:	2b02      	cmp	r3, #2
   24dae:	d009      	beq.n	24dc4 <tls_interface_listen+0x44>
   24db0:	680b      	ldr	r3, [r1, #0]
   24db2:	b29b      	uxth	r3, r3
   24db4:	2b0b      	cmp	r3, #11
   24db6:	d121      	bne.n	24dfc <tls_interface_listen+0x7c>
   24db8:	2324      	movs	r3, #36	; 0x24
   24dba:	4363      	muls	r3, r4
   24dbc:	4a10      	ldr	r2, [pc, #64]	; (24e00 <tls_interface_listen+0x80>)
   24dbe:	5cd3      	ldrb	r3, [r2, r3]
   24dc0:	2b01      	cmp	r3, #1
   24dc2:	d11b      	bne.n	24dfc <tls_interface_listen+0x7c>
   24dc4:	2324      	movs	r3, #36	; 0x24
   24dc6:	2001      	movs	r0, #1
   24dc8:	4363      	muls	r3, r4
   24dca:	4a0d      	ldr	r2, [pc, #52]	; (24e00 <tls_interface_listen+0x80>)
   24dcc:	54d0      	strb	r0, [r2, r3]
   24dce:	680b      	ldr	r3, [r1, #0]
   24dd0:	2b0b      	cmp	r3, #11
   24dd2:	d10a      	bne.n	24dea <tls_interface_listen+0x6a>
   24dd4:	4629      	mov	r1, r5
   24dd6:	4620      	mov	r0, r4
   24dd8:	f7ff f88a 	bl	23ef0 <ip_interface_listen>
   24ddc:	2800      	cmp	r0, #0
   24dde:	dd03      	ble.n	24de8 <tls_interface_listen+0x68>
   24de0:	f006 f96d 	bl	2b0be <nrf_modem_os_errno_set>
   24de4:	f04f 30ff 	mov.w	r0, #4294967295
   24de8:	bd38      	pop	{r3, r4, r5, pc}
   24dea:	4620      	mov	r0, r4
   24dec:	680a      	ldr	r2, [r1, #0]
   24dee:	f7ff fe0d 	bl	24a0c <secure_socket_attach_initiate>
   24df2:	2800      	cmp	r0, #0
   24df4:	d0ee      	beq.n	24dd4 <tls_interface_listen+0x54>
   24df6:	e7f1      	b.n	24ddc <tls_interface_listen+0x5c>
   24df8:	2009      	movs	r0, #9
   24dfa:	e7f1      	b.n	24de0 <tls_interface_listen+0x60>
   24dfc:	205f      	movs	r0, #95	; 0x5f
   24dfe:	e7ef      	b.n	24de0 <tls_interface_listen+0x60>
   24e00:	2000da11 	.word	0x2000da11

00024e04 <tls_interface_accept>:
   24e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24e08:	4605      	mov	r5, r0
   24e0a:	460e      	mov	r6, r1
   24e0c:	4617      	mov	r7, r2
   24e0e:	4698      	mov	r8, r3
   24e10:	f04f 34ff 	mov.w	r4, #4294967295
   24e14:	f7fe fcb0 	bl	23778 <interface_socket_from_handle_get>
   24e18:	9401      	str	r4, [sp, #4]
   24e1a:	2800      	cmp	r0, #0
   24e1c:	d04b      	beq.n	24eb6 <tls_interface_accept+0xb2>
   24e1e:	6803      	ldr	r3, [r0, #0]
   24e20:	b29b      	uxth	r3, r3
   24e22:	2b07      	cmp	r3, #7
   24e24:	d147      	bne.n	24eb6 <tls_interface_accept+0xb2>
   24e26:	6803      	ldr	r3, [r0, #0]
   24e28:	00db      	lsls	r3, r3, #3
   24e2a:	d506      	bpl.n	24e3a <tls_interface_accept+0x36>
   24e2c:	205f      	movs	r0, #95	; 0x5f
   24e2e:	f006 f946 	bl	2b0be <nrf_modem_os_errno_set>
   24e32:	4620      	mov	r0, r4
   24e34:	b002      	add	sp, #8
   24e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e3a:	4643      	mov	r3, r8
   24e3c:	463a      	mov	r2, r7
   24e3e:	4631      	mov	r1, r6
   24e40:	4628      	mov	r0, r5
   24e42:	f7ff f8a3 	bl	23f8c <ip_interface_accept>
   24e46:	1e04      	subs	r4, r0, #0
   24e48:	db2f      	blt.n	24eaa <tls_interface_accept+0xa6>
   24e4a:	f7fe fc95 	bl	23778 <interface_socket_from_handle_get>
   24e4e:	2124      	movs	r1, #36	; 0x24
   24e50:	6803      	ldr	r3, [r0, #0]
   24e52:	4a1a      	ldr	r2, [pc, #104]	; (24ebc <tls_interface_accept+0xb8>)
   24e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24e58:	6003      	str	r3, [r0, #0]
   24e5a:	6803      	ldr	r3, [r0, #0]
   24e5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24e60:	6003      	str	r3, [r0, #0]
   24e62:	fb01 2305 	mla	r3, r1, r5, r2
   24e66:	fb01 2104 	mla	r1, r1, r4, r2
   24e6a:	f103 0524 	add.w	r5, r3, #36	; 0x24
   24e6e:	f853 6b04 	ldr.w	r6, [r3], #4
   24e72:	42ab      	cmp	r3, r5
   24e74:	f841 6b04 	str.w	r6, [r1], #4
   24e78:	d1f9      	bne.n	24e6e <tls_interface_accept+0x6a>
   24e7a:	2324      	movs	r3, #36	; 0x24
   24e7c:	2102      	movs	r1, #2
   24e7e:	4363      	muls	r3, r4
   24e80:	54d1      	strb	r1, [r2, r3]
   24e82:	6803      	ldr	r3, [r0, #0]
   24e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24e88:	0c1b      	lsrs	r3, r3, #16
   24e8a:	041b      	lsls	r3, r3, #16
   24e8c:	f043 030b 	orr.w	r3, r3, #11
   24e90:	6003      	str	r3, [r0, #0]
   24e92:	210c      	movs	r1, #12
   24e94:	4620      	mov	r0, r4
   24e96:	ab01      	add	r3, sp, #4
   24e98:	f006 ff45 	bl	2bd26 <ip_interface_wait>
   24e9c:	4605      	mov	r5, r0
   24e9e:	2800      	cmp	r0, #0
   24ea0:	d0c7      	beq.n	24e32 <tls_interface_accept+0x2e>
   24ea2:	4620      	mov	r0, r4
   24ea4:	f7fe fdea 	bl	23a7c <ip_interface_close>
   24ea8:	462c      	mov	r4, r5
   24eaa:	4620      	mov	r0, r4
   24eac:	f006 f907 	bl	2b0be <nrf_modem_os_errno_set>
   24eb0:	f04f 34ff 	mov.w	r4, #4294967295
   24eb4:	e7bd      	b.n	24e32 <tls_interface_accept+0x2e>
   24eb6:	2409      	movs	r4, #9
   24eb8:	e7f7      	b.n	24eaa <tls_interface_accept+0xa6>
   24eba:	bf00      	nop
   24ebc:	2000da11 	.word	0x2000da11

00024ec0 <tls_interface_setopt>:
   24ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24ec2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   24ec6:	4606      	mov	r6, r0
   24ec8:	4615      	mov	r5, r2
   24eca:	461f      	mov	r7, r3
   24ecc:	9c08      	ldr	r4, [sp, #32]
   24ece:	d004      	beq.n	24eda <tls_interface_setopt+0x1a>
   24ed0:	b003      	add	sp, #12
   24ed2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24ed6:	f7ff b93d 	b.w	24154 <ip_interface_setopt>
   24eda:	b923      	cbnz	r3, 24ee6 <tls_interface_setopt+0x26>
   24edc:	2a05      	cmp	r2, #5
   24ede:	d100      	bne.n	24ee2 <tls_interface_setopt+0x22>
   24ee0:	b10c      	cbz	r4, 24ee6 <tls_interface_setopt+0x26>
   24ee2:	200e      	movs	r0, #14
   24ee4:	e077      	b.n	24fd6 <tls_interface_setopt+0x116>
   24ee6:	4630      	mov	r0, r6
   24ee8:	f7fe fc46 	bl	23778 <interface_socket_from_handle_get>
   24eec:	4601      	mov	r1, r0
   24eee:	2800      	cmp	r0, #0
   24ef0:	f000 8087 	beq.w	25002 <tls_interface_setopt+0x142>
   24ef4:	6803      	ldr	r3, [r0, #0]
   24ef6:	b29b      	uxth	r3, r3
   24ef8:	2b02      	cmp	r3, #2
   24efa:	d007      	beq.n	24f0c <tls_interface_setopt+0x4c>
   24efc:	6803      	ldr	r3, [r0, #0]
   24efe:	b29b      	uxth	r3, r3
   24f00:	2b04      	cmp	r3, #4
   24f02:	d003      	beq.n	24f0c <tls_interface_setopt+0x4c>
   24f04:	6803      	ldr	r3, [r0, #0]
   24f06:	b29b      	uxth	r3, r3
   24f08:	2b05      	cmp	r3, #5
   24f0a:	d17a      	bne.n	25002 <tls_interface_setopt+0x142>
   24f0c:	3d01      	subs	r5, #1
   24f0e:	2d08      	cmp	r5, #8
   24f10:	d879      	bhi.n	25006 <tls_interface_setopt+0x146>
   24f12:	e8df f005 	tbb	[pc, r5]
   24f16:	2605      	.short	0x2605
   24f18:	55433818 	.word	0x55433818
   24f1c:	6578      	.short	0x6578
   24f1e:	71          	.byte	0x71
   24f1f:	00          	.byte	0x00
   24f20:	2c04      	cmp	r4, #4
   24f22:	d174      	bne.n	2500e <tls_interface_setopt+0x14e>
   24f24:	6838      	ldr	r0, [r7, #0]
   24f26:	b930      	cbnz	r0, 24f36 <tls_interface_setopt+0x76>
   24f28:	2324      	movs	r3, #36	; 0x24
   24f2a:	2202      	movs	r2, #2
   24f2c:	435e      	muls	r6, r3
   24f2e:	4b39      	ldr	r3, [pc, #228]	; (25014 <tls_interface_setopt+0x154>)
   24f30:	559a      	strb	r2, [r3, r6]
   24f32:	b003      	add	sp, #12
   24f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f36:	2801      	cmp	r0, #1
   24f38:	d169      	bne.n	2500e <tls_interface_setopt+0x14e>
   24f3a:	2324      	movs	r3, #36	; 0x24
   24f3c:	435e      	muls	r6, r3
   24f3e:	4b35      	ldr	r3, [pc, #212]	; (25014 <tls_interface_setopt+0x154>)
   24f40:	5598      	strb	r0, [r3, r6]
   24f42:	2000      	movs	r0, #0
   24f44:	e7f5      	b.n	24f32 <tls_interface_setopt+0x72>
   24f46:	2c01      	cmp	r4, #1
   24f48:	d161      	bne.n	2500e <tls_interface_setopt+0x14e>
   24f4a:	2f00      	cmp	r7, #0
   24f4c:	d0c9      	beq.n	24ee2 <tls_interface_setopt+0x22>
   24f4e:	2024      	movs	r0, #36	; 0x24
   24f50:	783b      	ldrb	r3, [r7, #0]
   24f52:	4a30      	ldr	r2, [pc, #192]	; (25014 <tls_interface_setopt+0x154>)
   24f54:	3b00      	subs	r3, #0
   24f56:	bf18      	it	ne
   24f58:	2301      	movne	r3, #1
   24f5a:	fb00 2606 	mla	r6, r0, r6, r2
   24f5e:	7073      	strb	r3, [r6, #1]
   24f60:	e7ef      	b.n	24f42 <tls_interface_setopt+0x82>
   24f62:	2c03      	cmp	r4, #3
   24f64:	d953      	bls.n	2500e <tls_interface_setopt+0x14e>
   24f66:	f014 0503 	ands.w	r5, r4, #3
   24f6a:	d150      	bne.n	2500e <tls_interface_setopt+0x14e>
   24f6c:	2324      	movs	r3, #36	; 0x24
   24f6e:	435e      	muls	r6, r3
   24f70:	4828      	ldr	r0, [pc, #160]	; (25014 <tls_interface_setopt+0x154>)
   24f72:	08a2      	lsrs	r2, r4, #2
   24f74:	1983      	adds	r3, r0, r6
   24f76:	70da      	strb	r2, [r3, #3]
   24f78:	4639      	mov	r1, r7
   24f7a:	4622      	mov	r2, r4
   24f7c:	3604      	adds	r6, #4
   24f7e:	4430      	add	r0, r6
   24f80:	f007 fe27 	bl	2cbd2 <memcpy>
   24f84:	e7dd      	b.n	24f42 <tls_interface_setopt+0x82>
   24f86:	2c04      	cmp	r4, #4
   24f88:	d141      	bne.n	2500e <tls_interface_setopt+0x14e>
   24f8a:	683b      	ldr	r3, [r7, #0]
   24f8c:	2b02      	cmp	r3, #2
   24f8e:	d83e      	bhi.n	2500e <tls_interface_setopt+0x14e>
   24f90:	2024      	movs	r0, #36	; 0x24
   24f92:	4a20      	ldr	r2, [pc, #128]	; (25014 <tls_interface_setopt+0x154>)
   24f94:	fb00 2606 	mla	r6, r0, r6, r2
   24f98:	70b3      	strb	r3, [r6, #2]
   24f9a:	e7d2      	b.n	24f42 <tls_interface_setopt+0x82>
   24f9c:	4630      	mov	r0, r6
   24f9e:	f7ff fd23 	bl	249e8 <hostname_free>
   24fa2:	2c00      	cmp	r4, #0
   24fa4:	d0cd      	beq.n	24f42 <tls_interface_setopt+0x82>
   24fa6:	4620      	mov	r0, r4
   24fa8:	f7f9 fcc4 	bl	1e934 <nrf_modem_os_alloc>
   24fac:	4b1a      	ldr	r3, [pc, #104]	; (25018 <tls_interface_setopt+0x158>)
   24fae:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   24fb2:	b350      	cbz	r0, 2500a <tls_interface_setopt+0x14a>
   24fb4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   24fb8:	4622      	mov	r2, r4
   24fba:	4639      	mov	r1, r7
   24fbc:	6074      	str	r4, [r6, #4]
   24fbe:	e7df      	b.n	24f80 <tls_interface_setopt+0xc0>
   24fc0:	f247 0301 	movw	r3, #28673	; 0x7001
   24fc4:	e9cd 7400 	strd	r7, r4, [sp]
   24fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
   24fcc:	4630      	mov	r0, r6
   24fce:	f007 f852 	bl	2c076 <ip_interface_socketoption_send>
   24fd2:	2800      	cmp	r0, #0
   24fd4:	d0b5      	beq.n	24f42 <tls_interface_setopt+0x82>
   24fd6:	f006 f872 	bl	2b0be <nrf_modem_os_errno_set>
   24fda:	f04f 30ff 	mov.w	r0, #4294967295
   24fde:	e7a8      	b.n	24f32 <tls_interface_setopt+0x72>
   24fe0:	2c04      	cmp	r4, #4
   24fe2:	d114      	bne.n	2500e <tls_interface_setopt+0x14e>
   24fe4:	6838      	ldr	r0, [r7, #0]
   24fe6:	f7ff fce3 	bl	249b0 <secure_socket_dtls_timeout_check>
   24fea:	2800      	cmp	r0, #0
   24fec:	d1f3      	bne.n	24fd6 <tls_interface_setopt+0x116>
   24fee:	f247 0302 	movw	r3, #28674	; 0x7002
   24ff2:	e9cd 7400 	strd	r7, r4, [sp]
   24ff6:	e7e7      	b.n	24fc8 <tls_interface_setopt+0x108>
   24ff8:	f247 0303 	movw	r3, #28675	; 0x7003
   24ffc:	e9cd 7400 	strd	r7, r4, [sp]
   25000:	e7e2      	b.n	24fc8 <tls_interface_setopt+0x108>
   25002:	2009      	movs	r0, #9
   25004:	e7e7      	b.n	24fd6 <tls_interface_setopt+0x116>
   25006:	206d      	movs	r0, #109	; 0x6d
   25008:	e7e5      	b.n	24fd6 <tls_interface_setopt+0x116>
   2500a:	200c      	movs	r0, #12
   2500c:	e7e3      	b.n	24fd6 <tls_interface_setopt+0x116>
   2500e:	2016      	movs	r0, #22
   25010:	e7e1      	b.n	24fd6 <tls_interface_setopt+0x116>
   25012:	bf00      	nop
   25014:	2000da11 	.word	0x2000da11
   25018:	2000d380 	.word	0x2000d380

0002501c <tls_interface_getopt>:
   2501c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2501e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   25022:	b085      	sub	sp, #20
   25024:	4606      	mov	r6, r0
   25026:	4617      	mov	r7, r2
   25028:	461d      	mov	r5, r3
   2502a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2502c:	d004      	beq.n	25038 <tls_interface_getopt+0x1c>
   2502e:	b005      	add	sp, #20
   25030:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25034:	f007 b885 	b.w	2c142 <ip_interface_getopt>
   25038:	b103      	cbz	r3, 2503c <tls_interface_getopt+0x20>
   2503a:	b92c      	cbnz	r4, 25048 <tls_interface_getopt+0x2c>
   2503c:	200e      	movs	r0, #14
   2503e:	f006 f83e 	bl	2b0be <nrf_modem_os_errno_set>
   25042:	f04f 30ff 	mov.w	r0, #4294967295
   25046:	e051      	b.n	250ec <tls_interface_getopt+0xd0>
   25048:	6823      	ldr	r3, [r4, #0]
   2504a:	b90b      	cbnz	r3, 25050 <tls_interface_getopt+0x34>
   2504c:	2016      	movs	r0, #22
   2504e:	e7f6      	b.n	2503e <tls_interface_getopt+0x22>
   25050:	f7fe fb92 	bl	23778 <interface_socket_from_handle_get>
   25054:	4601      	mov	r1, r0
   25056:	2800      	cmp	r0, #0
   25058:	d068      	beq.n	2512c <tls_interface_getopt+0x110>
   2505a:	1e7a      	subs	r2, r7, #1
   2505c:	2a07      	cmp	r2, #7
   2505e:	d871      	bhi.n	25144 <tls_interface_getopt+0x128>
   25060:	e8df f002 	tbb	[pc, r2]
   25064:	461a2904 	.word	0x461a2904
   25068:	5f705370 	.word	0x5f705370
   2506c:	6823      	ldr	r3, [r4, #0]
   2506e:	2124      	movs	r1, #36	; 0x24
   25070:	2b04      	cmp	r3, #4
   25072:	bf88      	it	hi
   25074:	2304      	movhi	r3, #4
   25076:	fb01 f606 	mul.w	r6, r1, r6
   2507a:	bf88      	it	hi
   2507c:	6023      	strhi	r3, [r4, #0]
   2507e:	4b32      	ldr	r3, [pc, #200]	; (25148 <tls_interface_getopt+0x12c>)
   25080:	a903      	add	r1, sp, #12
   25082:	5d9b      	ldrb	r3, [r3, r6]
   25084:	1e5a      	subs	r2, r3, #1
   25086:	4253      	negs	r3, r2
   25088:	4153      	adcs	r3, r2
   2508a:	6822      	ldr	r2, [r4, #0]
   2508c:	9303      	str	r3, [sp, #12]
   2508e:	4628      	mov	r0, r5
   25090:	f007 fd9f 	bl	2cbd2 <memcpy>
   25094:	2000      	movs	r0, #0
   25096:	e029      	b.n	250ec <tls_interface_getopt+0xd0>
   25098:	6823      	ldr	r3, [r4, #0]
   2509a:	2b00      	cmp	r3, #0
   2509c:	d0d6      	beq.n	2504c <tls_interface_getopt+0x30>
   2509e:	2124      	movs	r1, #36	; 0x24
   250a0:	2b01      	cmp	r3, #1
   250a2:	bf88      	it	hi
   250a4:	2301      	movhi	r3, #1
   250a6:	4828      	ldr	r0, [pc, #160]	; (25148 <tls_interface_getopt+0x12c>)
   250a8:	bf88      	it	hi
   250aa:	6023      	strhi	r3, [r4, #0]
   250ac:	fb01 0106 	mla	r1, r1, r6, r0
   250b0:	6822      	ldr	r2, [r4, #0]
   250b2:	3101      	adds	r1, #1
   250b4:	e7eb      	b.n	2508e <tls_interface_getopt+0x72>
   250b6:	2324      	movs	r3, #36	; 0x24
   250b8:	4923      	ldr	r1, [pc, #140]	; (25148 <tls_interface_getopt+0x12c>)
   250ba:	6822      	ldr	r2, [r4, #0]
   250bc:	fb03 1306 	mla	r3, r3, r6, r1
   250c0:	78d8      	ldrb	r0, [r3, #3]
   250c2:	0793      	lsls	r3, r2, #30
   250c4:	bf14      	ite	ne
   250c6:	2300      	movne	r3, #0
   250c8:	0893      	lsreq	r3, r2, #2
   250ca:	4283      	cmp	r3, r0
   250cc:	bf28      	it	cs
   250ce:	4603      	movcs	r3, r0
   250d0:	009f      	lsls	r7, r3, #2
   250d2:	b143      	cbz	r3, 250e6 <tls_interface_getopt+0xca>
   250d4:	2024      	movs	r0, #36	; 0x24
   250d6:	fb00 1106 	mla	r1, r0, r6, r1
   250da:	42ba      	cmp	r2, r7
   250dc:	bf88      	it	hi
   250de:	6027      	strhi	r7, [r4, #0]
   250e0:	6822      	ldr	r2, [r4, #0]
   250e2:	3104      	adds	r1, #4
   250e4:	e7d3      	b.n	2508e <tls_interface_getopt+0x72>
   250e6:	2800      	cmp	r0, #0
   250e8:	d1b0      	bne.n	2504c <tls_interface_getopt+0x30>
   250ea:	6020      	str	r0, [r4, #0]
   250ec:	b005      	add	sp, #20
   250ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   250f0:	6823      	ldr	r3, [r4, #0]
   250f2:	2124      	movs	r1, #36	; 0x24
   250f4:	2b04      	cmp	r3, #4
   250f6:	bf88      	it	hi
   250f8:	2304      	movhi	r3, #4
   250fa:	4813      	ldr	r0, [pc, #76]	; (25148 <tls_interface_getopt+0x12c>)
   250fc:	bf88      	it	hi
   250fe:	6023      	strhi	r3, [r4, #0]
   25100:	fb01 0106 	mla	r1, r1, r6, r0
   25104:	6822      	ldr	r2, [r4, #0]
   25106:	3102      	adds	r1, #2
   25108:	e7c1      	b.n	2508e <tls_interface_getopt+0x72>
   2510a:	f247 0301 	movw	r3, #28673	; 0x7001
   2510e:	e9cd 5400 	strd	r5, r4, [sp]
   25112:	f44f 7280 	mov.w	r2, #256	; 0x100
   25116:	4630      	mov	r0, r6
   25118:	f7fe fe14 	bl	23d44 <ip_interface_socketoption_get>
   2511c:	2800      	cmp	r0, #0
   2511e:	d0e5      	beq.n	250ec <tls_interface_getopt+0xd0>
   25120:	e78d      	b.n	2503e <tls_interface_getopt+0x22>
   25122:	6823      	ldr	r3, [r4, #0]
   25124:	2b04      	cmp	r3, #4
   25126:	d903      	bls.n	25130 <tls_interface_getopt+0x114>
   25128:	2304      	movs	r3, #4
   2512a:	6023      	str	r3, [r4, #0]
   2512c:	2009      	movs	r0, #9
   2512e:	e786      	b.n	2503e <tls_interface_getopt+0x22>
   25130:	6828      	ldr	r0, [r5, #0]
   25132:	f7ff fc3d 	bl	249b0 <secure_socket_dtls_timeout_check>
   25136:	2800      	cmp	r0, #0
   25138:	d181      	bne.n	2503e <tls_interface_getopt+0x22>
   2513a:	f247 0302 	movw	r3, #28674	; 0x7002
   2513e:	e9cd 5400 	strd	r5, r4, [sp]
   25142:	e7e6      	b.n	25112 <tls_interface_getopt+0xf6>
   25144:	206d      	movs	r0, #109	; 0x6d
   25146:	e77a      	b.n	2503e <tls_interface_getopt+0x22>
   25148:	2000da11 	.word	0x2000da11

0002514c <tls_rpc_ip_event_handler>:
   2514c:	b570      	push	{r4, r5, r6, lr}
   2514e:	460c      	mov	r4, r1
   25150:	f248 0181 	movw	r1, #32897	; 0x8081
   25154:	428b      	cmp	r3, r1
   25156:	4606      	mov	r6, r0
   25158:	d035      	beq.n	251c6 <tls_rpc_ip_event_handler+0x7a>
   2515a:	f249 0182 	movw	r1, #36994	; 0x9082
   2515e:	428b      	cmp	r3, r1
   25160:	d040      	beq.n	251e4 <tls_rpc_ip_event_handler+0x98>
   25162:	f248 0102 	movw	r1, #32770	; 0x8002
   25166:	428b      	cmp	r3, r1
   25168:	d161      	bne.n	2522e <tls_rpc_ip_event_handler+0xe2>
   2516a:	2c00      	cmp	r4, #0
   2516c:	d05f      	beq.n	2522e <tls_rpc_ip_event_handler+0xe2>
   2516e:	6963      	ldr	r3, [r4, #20]
   25170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   25174:	d002      	beq.n	2517c <tls_rpc_ip_event_handler+0x30>
   25176:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2517a:	d158      	bne.n	2522e <tls_rpc_ip_event_handler+0xe2>
   2517c:	6823      	ldr	r3, [r4, #0]
   2517e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   25182:	6023      	str	r3, [r4, #0]
   25184:	6955      	ldr	r5, [r2, #20]
   25186:	2d00      	cmp	r5, #0
   25188:	d14d      	bne.n	25226 <tls_rpc_ip_event_handler+0xda>
   2518a:	6823      	ldr	r3, [r4, #0]
   2518c:	0c1b      	lsrs	r3, r3, #16
   2518e:	041b      	lsls	r3, r3, #16
   25190:	f043 0305 	orr.w	r3, r3, #5
   25194:	6023      	str	r3, [r4, #0]
   25196:	6823      	ldr	r3, [r4, #0]
   25198:	00db      	lsls	r3, r3, #3
   2519a:	d401      	bmi.n	251a0 <tls_rpc_ip_event_handler+0x54>
   2519c:	2000      	movs	r0, #0
   2519e:	e020      	b.n	251e2 <tls_rpc_ip_event_handler+0x96>
   251a0:	2324      	movs	r3, #36	; 0x24
   251a2:	4373      	muls	r3, r6
   251a4:	4a23      	ldr	r2, [pc, #140]	; (25234 <tls_rpc_ip_event_handler+0xe8>)
   251a6:	5cd3      	ldrb	r3, [r2, r3]
   251a8:	2b02      	cmp	r3, #2
   251aa:	d1f7      	bne.n	2519c <tls_rpc_ip_event_handler+0x50>
   251ac:	4621      	mov	r1, r4
   251ae:	4630      	mov	r0, r6
   251b0:	f007 f839 	bl	2c226 <secure_client_socket>
   251b4:	2800      	cmp	r0, #0
   251b6:	d0f1      	beq.n	2519c <tls_rpc_ip_event_handler+0x50>
   251b8:	2877      	cmp	r0, #119	; 0x77
   251ba:	d0ef      	beq.n	2519c <tls_rpc_ip_event_handler+0x50>
   251bc:	6060      	str	r0, [r4, #4]
   251be:	6823      	ldr	r3, [r4, #0]
   251c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   251c4:	e02d      	b.n	25222 <tls_rpc_ip_event_handler+0xd6>
   251c6:	2c00      	cmp	r4, #0
   251c8:	d0e8      	beq.n	2519c <tls_rpc_ip_event_handler+0x50>
   251ca:	6823      	ldr	r3, [r4, #0]
   251cc:	b29b      	uxth	r3, r3
   251ce:	2b0a      	cmp	r3, #10
   251d0:	d1e4      	bne.n	2519c <tls_rpc_ip_event_handler+0x50>
   251d2:	6950      	ldr	r0, [r2, #20]
   251d4:	bb40      	cbnz	r0, 25228 <tls_rpc_ip_event_handler+0xdc>
   251d6:	6823      	ldr	r3, [r4, #0]
   251d8:	0c1b      	lsrs	r3, r3, #16
   251da:	041b      	lsls	r3, r3, #16
   251dc:	f043 030b 	orr.w	r3, r3, #11
   251e0:	6023      	str	r3, [r4, #0]
   251e2:	bd70      	pop	{r4, r5, r6, pc}
   251e4:	2c00      	cmp	r4, #0
   251e6:	d0d9      	beq.n	2519c <tls_rpc_ip_event_handler+0x50>
   251e8:	6823      	ldr	r3, [r4, #0]
   251ea:	b29b      	uxth	r3, r3
   251ec:	2b0b      	cmp	r3, #11
   251ee:	d1d5      	bne.n	2519c <tls_rpc_ip_event_handler+0x50>
   251f0:	6915      	ldr	r5, [r2, #16]
   251f2:	b9c5      	cbnz	r5, 25226 <tls_rpc_ip_event_handler+0xda>
   251f4:	6823      	ldr	r3, [r4, #0]
   251f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   251fa:	6023      	str	r3, [r4, #0]
   251fc:	f7ff fbf4 	bl	249e8 <hostname_free>
   25200:	6823      	ldr	r3, [r4, #0]
   25202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   25206:	6023      	str	r3, [r4, #0]
   25208:	6823      	ldr	r3, [r4, #0]
   2520a:	0c1b      	lsrs	r3, r3, #16
   2520c:	041b      	lsls	r3, r3, #16
   2520e:	f043 030c 	orr.w	r3, r3, #12
   25212:	6023      	str	r3, [r4, #0]
   25214:	6823      	ldr	r3, [r4, #0]
   25216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2521a:	6023      	str	r3, [r4, #0]
   2521c:	6823      	ldr	r3, [r4, #0]
   2521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25222:	6023      	str	r3, [r4, #0]
   25224:	e7ba      	b.n	2519c <tls_rpc_ip_event_handler+0x50>
   25226:	4628      	mov	r0, r5
   25228:	f7fe fb6c 	bl	23904 <rpc_error_to_nrf_errno>
   2522c:	e7c6      	b.n	251bc <tls_rpc_ip_event_handler+0x70>
   2522e:	2001      	movs	r0, #1
   25230:	e7d7      	b.n	251e2 <tls_rpc_ip_event_handler+0x96>
   25232:	bf00      	nop
   25234:	2000da11 	.word	0x2000da11

00025238 <at_cmd_send>:
   25238:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2523a:	4615      	mov	r5, r2
   2523c:	f06f 0258 	mvn.w	r2, #88	; 0x58
   25240:	2300      	movs	r3, #0
   25242:	7302      	strb	r2, [r0, #12]
   25244:	2204      	movs	r2, #4
   25246:	4c0d      	ldr	r4, [pc, #52]	; (2527c <at_cmd_send+0x44>)
   25248:	7343      	strb	r3, [r0, #13]
   2524a:	7383      	strb	r3, [r0, #14]
   2524c:	73c3      	strb	r3, [r0, #15]
   2524e:	7202      	strb	r2, [r0, #8]
   25250:	7243      	strb	r3, [r0, #9]
   25252:	7283      	strb	r3, [r0, #10]
   25254:	72c3      	strb	r3, [r0, #11]
   25256:	4602      	mov	r2, r0
   25258:	b289      	uxth	r1, r1
   2525a:	2003      	movs	r0, #3
   2525c:	7023      	strb	r3, [r4, #0]
   2525e:	f006 fcb3 	bl	2bbc8 <rpc_client_request_send>
   25262:	f04f 33ff 	mov.w	r3, #4294967295
   25266:	9301      	str	r3, [sp, #4]
   25268:	7823      	ldrb	r3, [r4, #0]
   2526a:	42ab      	cmp	r3, r5
   2526c:	d101      	bne.n	25272 <at_cmd_send+0x3a>
   2526e:	b003      	add	sp, #12
   25270:	bd30      	pop	{r4, r5, pc}
   25272:	a901      	add	r1, sp, #4
   25274:	2000      	movs	r0, #0
   25276:	f7f9 f9fb 	bl	1e670 <nrf_modem_os_timedwait>
   2527a:	e7f5      	b.n	25268 <at_cmd_send+0x30>
   2527c:	2000db31 	.word	0x2000db31

00025280 <at_response_match>:
   25280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25282:	4605      	mov	r5, r0
   25284:	2400      	movs	r4, #0
   25286:	4f10      	ldr	r7, [pc, #64]	; (252c8 <at_response_match+0x48>)
   25288:	f857 6b04 	ldr.w	r6, [r7], #4
   2528c:	4628      	mov	r0, r5
   2528e:	4631      	mov	r1, r6
   25290:	f007 fe0b 	bl	2ceaa <strstr>
   25294:	b928      	cbnz	r0, 252a2 <at_response_match+0x22>
   25296:	3401      	adds	r4, #1
   25298:	2c04      	cmp	r4, #4
   2529a:	d1f5      	bne.n	25288 <at_response_match+0x8>
   2529c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   252a0:	e00e      	b.n	252c0 <at_response_match+0x40>
   252a2:	2c01      	cmp	r4, #1
   252a4:	d0fa      	beq.n	2529c <at_response_match+0x1c>
   252a6:	1ea3      	subs	r3, r4, #2
   252a8:	2b01      	cmp	r3, #1
   252aa:	d80a      	bhi.n	252c2 <at_response_match+0x42>
   252ac:	4630      	mov	r0, r6
   252ae:	f7f4 f945 	bl	1953c <strlen>
   252b2:	220a      	movs	r2, #10
   252b4:	2100      	movs	r1, #0
   252b6:	4428      	add	r0, r5
   252b8:	f004 fa6a 	bl	29790 <strtol>
   252bc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   252c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   252c2:	2000      	movs	r0, #0
   252c4:	e7fc      	b.n	252c0 <at_response_match+0x40>
   252c6:	bf00      	nop
   252c8:	0002e084 	.word	0x0002e084

000252cc <at_vprintf>:
   252cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   252d0:	4607      	mov	r7, r0
   252d2:	460e      	mov	r6, r1
   252d4:	481d      	ldr	r0, [pc, #116]	; (2534c <at_vprintf+0x80>)
   252d6:	2100      	movs	r1, #0
   252d8:	4690      	mov	r8, r2
   252da:	461d      	mov	r5, r3
   252dc:	9301      	str	r3, [sp, #4]
   252de:	f004 fdbf 	bl	29e60 <vsniprintf>
   252e2:	3001      	adds	r0, #1
   252e4:	f006 fc6a 	bl	2bbbc <rpc_client_request_alloc>
   252e8:	4604      	mov	r4, r0
   252ea:	b360      	cbz	r0, 25346 <at_vprintf+0x7a>
   252ec:	9501      	str	r5, [sp, #4]
   252ee:	462b      	mov	r3, r5
   252f0:	6841      	ldr	r1, [r0, #4]
   252f2:	4642      	mov	r2, r8
   252f4:	6800      	ldr	r0, [r0, #0]
   252f6:	f004 fdb3 	bl	29e60 <vsniprintf>
   252fa:	2202      	movs	r2, #2
   252fc:	2101      	movs	r1, #1
   252fe:	4620      	mov	r0, r4
   25300:	f7ff ff9a 	bl	25238 <at_cmd_send>
   25304:	4d12      	ldr	r5, [pc, #72]	; (25350 <at_vprintf+0x84>)
   25306:	b97f      	cbnz	r7, 25328 <at_vprintf+0x5c>
   25308:	682b      	ldr	r3, [r5, #0]
   2530a:	6818      	ldr	r0, [r3, #0]
   2530c:	f7ff ffb8 	bl	25280 <at_response_match>
   25310:	4604      	mov	r4, r0
   25312:	682b      	ldr	r3, [r5, #0]
   25314:	6818      	ldr	r0, [r3, #0]
   25316:	f006 fc61 	bl	2bbdc <rpc_client_data_free>
   2531a:	6828      	ldr	r0, [r5, #0]
   2531c:	f006 fc5b 	bl	2bbd6 <rpc_client_message_free>
   25320:	4620      	mov	r0, r4
   25322:	b002      	add	sp, #8
   25324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25328:	682c      	ldr	r4, [r5, #0]
   2532a:	4638      	mov	r0, r7
   2532c:	6862      	ldr	r2, [r4, #4]
   2532e:	6821      	ldr	r1, [r4, #0]
   25330:	42b2      	cmp	r2, r6
   25332:	bf28      	it	cs
   25334:	4632      	movcs	r2, r6
   25336:	f007 fc4c 	bl	2cbd2 <memcpy>
   2533a:	6863      	ldr	r3, [r4, #4]
   2533c:	42b3      	cmp	r3, r6
   2533e:	d9e3      	bls.n	25308 <at_vprintf+0x3c>
   25340:	f06f 0406 	mvn.w	r4, #6
   25344:	e7e5      	b.n	25312 <at_vprintf+0x46>
   25346:	f06f 040b 	mvn.w	r4, #11
   2534a:	e7e9      	b.n	25320 <at_vprintf+0x54>
   2534c:	0002dd44 	.word	0x0002dd44
   25350:	2000d3d0 	.word	0x2000d3d0

00025354 <nrf_modem_at_init>:
   25354:	2201      	movs	r2, #1
   25356:	b508      	push	{r3, lr}
   25358:	4611      	mov	r1, r2
   2535a:	4808      	ldr	r0, [pc, #32]	; (2537c <nrf_modem_at_init+0x28>)
   2535c:	f7f9 fa40 	bl	1e7e0 <nrf_modem_os_sem_init>
   25360:	2000      	movs	r0, #0
   25362:	f006 fc2b 	bl	2bbbc <rpc_client_request_alloc>
   25366:	b128      	cbz	r0, 25374 <nrf_modem_at_init+0x20>
   25368:	2201      	movs	r2, #1
   2536a:	2105      	movs	r1, #5
   2536c:	f7ff ff64 	bl	25238 <at_cmd_send>
   25370:	2000      	movs	r0, #0
   25372:	bd08      	pop	{r3, pc}
   25374:	f06f 000b 	mvn.w	r0, #11
   25378:	e7fb      	b.n	25372 <nrf_modem_at_init+0x1e>
   2537a:	bf00      	nop
   2537c:	2000d3c0 	.word	0x2000d3c0

00025380 <nrf_modem_at_notif_handler_set>:
   25380:	4b01      	ldr	r3, [pc, #4]	; (25388 <nrf_modem_at_notif_handler_set+0x8>)
   25382:	6018      	str	r0, [r3, #0]
   25384:	2000      	movs	r0, #0
   25386:	4770      	bx	lr
   25388:	2000d3cc 	.word	0x2000d3cc

0002538c <nrf_modem_at_printf>:
   2538c:	b40f      	push	{r0, r1, r2, r3}
   2538e:	4b11      	ldr	r3, [pc, #68]	; (253d4 <nrf_modem_at_printf+0x48>)
   25390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25392:	781b      	ldrb	r3, [r3, #0]
   25394:	9c06      	ldr	r4, [sp, #24]
   25396:	b1bb      	cbz	r3, 253c8 <nrf_modem_at_printf+0x3c>
   25398:	b1cc      	cbz	r4, 253ce <nrf_modem_at_printf+0x42>
   2539a:	4d0f      	ldr	r5, [pc, #60]	; (253d8 <nrf_modem_at_printf+0x4c>)
   2539c:	f04f 31ff 	mov.w	r1, #4294967295
   253a0:	6828      	ldr	r0, [r5, #0]
   253a2:	f7f9 fa6d 	bl	1e880 <nrf_modem_os_sem_take>
   253a6:	2100      	movs	r1, #0
   253a8:	4622      	mov	r2, r4
   253aa:	ab07      	add	r3, sp, #28
   253ac:	4608      	mov	r0, r1
   253ae:	9301      	str	r3, [sp, #4]
   253b0:	f7ff ff8c 	bl	252cc <at_vprintf>
   253b4:	4604      	mov	r4, r0
   253b6:	6828      	ldr	r0, [r5, #0]
   253b8:	f7f9 fa44 	bl	1e844 <nrf_modem_os_sem_give>
   253bc:	4620      	mov	r0, r4
   253be:	b003      	add	sp, #12
   253c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   253c4:	b004      	add	sp, #16
   253c6:	4770      	bx	lr
   253c8:	f04f 34ff 	mov.w	r4, #4294967295
   253cc:	e7f6      	b.n	253bc <nrf_modem_at_printf+0x30>
   253ce:	f06f 040d 	mvn.w	r4, #13
   253d2:	e7f3      	b.n	253bc <nrf_modem_at_printf+0x30>
   253d4:	2000db37 	.word	0x2000db37
   253d8:	2000d3c0 	.word	0x2000d3c0

000253dc <nrf_modem_at_cmd>:
   253dc:	b40c      	push	{r2, r3}
   253de:	4b2e      	ldr	r3, [pc, #184]	; (25498 <nrf_modem_at_cmd+0xbc>)
   253e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   253e4:	781b      	ldrb	r3, [r3, #0]
   253e6:	4605      	mov	r5, r0
   253e8:	460f      	mov	r7, r1
   253ea:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   253ee:	2b00      	cmp	r3, #0
   253f0:	d049      	beq.n	25486 <nrf_modem_at_cmd+0xaa>
   253f2:	2800      	cmp	r0, #0
   253f4:	d04a      	beq.n	2548c <nrf_modem_at_cmd+0xb0>
   253f6:	f1b8 0f00 	cmp.w	r8, #0
   253fa:	d047      	beq.n	2548c <nrf_modem_at_cmd+0xb0>
   253fc:	2900      	cmp	r1, #0
   253fe:	d048      	beq.n	25492 <nrf_modem_at_cmd+0xb6>
   25400:	4b26      	ldr	r3, [pc, #152]	; (2549c <nrf_modem_at_cmd+0xc0>)
   25402:	681a      	ldr	r2, [r3, #0]
   25404:	4699      	mov	r9, r3
   25406:	b1d2      	cbz	r2, 2543e <nrf_modem_at_cmd+0x62>
   25408:	4e25      	ldr	r6, [pc, #148]	; (254a0 <nrf_modem_at_cmd+0xc4>)
   2540a:	6833      	ldr	r3, [r6, #0]
   2540c:	b1bb      	cbz	r3, 2543e <nrf_modem_at_cmd+0x62>
   2540e:	2400      	movs	r4, #0
   25410:	f8d9 3000 	ldr.w	r3, [r9]
   25414:	429c      	cmp	r4, r3
   25416:	d212      	bcs.n	2543e <nrf_modem_at_cmd+0x62>
   25418:	6833      	ldr	r3, [r6, #0]
   2541a:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   2541e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   25422:	f7f4 f88b 	bl	1953c <strlen>
   25426:	6833      	ldr	r3, [r6, #0]
   25428:	4602      	mov	r2, r0
   2542a:	4641      	mov	r1, r8
   2542c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   25430:	f007 fd09 	bl	2ce46 <strncmp>
   25434:	b9a8      	cbnz	r0, 25462 <nrf_modem_at_cmd+0x86>
   25436:	6833      	ldr	r3, [r6, #0]
   25438:	4453      	add	r3, sl
   2543a:	685b      	ldr	r3, [r3, #4]
   2543c:	b99b      	cbnz	r3, 25466 <nrf_modem_at_cmd+0x8a>
   2543e:	4e19      	ldr	r6, [pc, #100]	; (254a4 <nrf_modem_at_cmd+0xc8>)
   25440:	f04f 31ff 	mov.w	r1, #4294967295
   25444:	6830      	ldr	r0, [r6, #0]
   25446:	f7f9 fa1b 	bl	1e880 <nrf_modem_os_sem_take>
   2544a:	ab0b      	add	r3, sp, #44	; 0x2c
   2544c:	4642      	mov	r2, r8
   2544e:	4639      	mov	r1, r7
   25450:	4628      	mov	r0, r5
   25452:	9301      	str	r3, [sp, #4]
   25454:	f7ff ff3a 	bl	252cc <at_vprintf>
   25458:	4604      	mov	r4, r0
   2545a:	6830      	ldr	r0, [r6, #0]
   2545c:	f7f9 f9f2 	bl	1e844 <nrf_modem_os_sem_give>
   25460:	e00b      	b.n	2547a <nrf_modem_at_cmd+0x9e>
   25462:	3401      	adds	r4, #1
   25464:	e7d4      	b.n	25410 <nrf_modem_at_cmd+0x34>
   25466:	4642      	mov	r2, r8
   25468:	4639      	mov	r1, r7
   2546a:	4628      	mov	r0, r5
   2546c:	4798      	blx	r3
   2546e:	1e04      	subs	r4, r0, #0
   25470:	db03      	blt.n	2547a <nrf_modem_at_cmd+0x9e>
   25472:	4628      	mov	r0, r5
   25474:	f7ff ff04 	bl	25280 <at_response_match>
   25478:	4604      	mov	r4, r0
   2547a:	4620      	mov	r0, r4
   2547c:	b002      	add	sp, #8
   2547e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25482:	b002      	add	sp, #8
   25484:	4770      	bx	lr
   25486:	f04f 34ff 	mov.w	r4, #4294967295
   2548a:	e7f6      	b.n	2547a <nrf_modem_at_cmd+0x9e>
   2548c:	f06f 040d 	mvn.w	r4, #13
   25490:	e7f3      	b.n	2547a <nrf_modem_at_cmd+0x9e>
   25492:	f06f 0415 	mvn.w	r4, #21
   25496:	e7f0      	b.n	2547a <nrf_modem_at_cmd+0x9e>
   25498:	2000db37 	.word	0x2000db37
   2549c:	2000d3c8 	.word	0x2000d3c8
   254a0:	2000d3c4 	.word	0x2000d3c4
   254a4:	2000d3c0 	.word	0x2000d3c0

000254a8 <nrf_modem_at_scanf>:
   254a8:	b40e      	push	{r1, r2, r3}
   254aa:	4b23      	ldr	r3, [pc, #140]	; (25538 <nrf_modem_at_scanf+0x90>)
   254ac:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   254ae:	781b      	ldrb	r3, [r3, #0]
   254b0:	4605      	mov	r5, r0
   254b2:	9f07      	ldr	r7, [sp, #28]
   254b4:	2b00      	cmp	r3, #0
   254b6:	d039      	beq.n	2552c <nrf_modem_at_scanf+0x84>
   254b8:	2800      	cmp	r0, #0
   254ba:	d03a      	beq.n	25532 <nrf_modem_at_scanf+0x8a>
   254bc:	2f00      	cmp	r7, #0
   254be:	d038      	beq.n	25532 <nrf_modem_at_scanf+0x8a>
   254c0:	4e1e      	ldr	r6, [pc, #120]	; (2553c <nrf_modem_at_scanf+0x94>)
   254c2:	f04f 31ff 	mov.w	r1, #4294967295
   254c6:	6830      	ldr	r0, [r6, #0]
   254c8:	f7f9 f9da 	bl	1e880 <nrf_modem_os_sem_take>
   254cc:	4628      	mov	r0, r5
   254ce:	f7f4 f835 	bl	1953c <strlen>
   254d2:	3001      	adds	r0, #1
   254d4:	f006 fb72 	bl	2bbbc <rpc_client_request_alloc>
   254d8:	4604      	mov	r4, r0
   254da:	b320      	cbz	r0, 25526 <nrf_modem_at_scanf+0x7e>
   254dc:	4629      	mov	r1, r5
   254de:	6800      	ldr	r0, [r0, #0]
   254e0:	4d17      	ldr	r5, [pc, #92]	; (25540 <nrf_modem_at_scanf+0x98>)
   254e2:	f007 fca8 	bl	2ce36 <strcpy>
   254e6:	4620      	mov	r0, r4
   254e8:	2202      	movs	r2, #2
   254ea:	2101      	movs	r1, #1
   254ec:	f7ff fea4 	bl	25238 <at_cmd_send>
   254f0:	682b      	ldr	r3, [r5, #0]
   254f2:	aa08      	add	r2, sp, #32
   254f4:	4639      	mov	r1, r7
   254f6:	6818      	ldr	r0, [r3, #0]
   254f8:	9201      	str	r2, [sp, #4]
   254fa:	f004 fce3 	bl	29ec4 <vsiscanf>
   254fe:	682b      	ldr	r3, [r5, #0]
   25500:	1e04      	subs	r4, r0, #0
   25502:	6818      	ldr	r0, [r3, #0]
   25504:	bf08      	it	eq
   25506:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   2550a:	f006 fb67 	bl	2bbdc <rpc_client_data_free>
   2550e:	6828      	ldr	r0, [r5, #0]
   25510:	f006 fb61 	bl	2bbd6 <rpc_client_message_free>
   25514:	6830      	ldr	r0, [r6, #0]
   25516:	f7f9 f995 	bl	1e844 <nrf_modem_os_sem_give>
   2551a:	4620      	mov	r0, r4
   2551c:	b002      	add	sp, #8
   2551e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25522:	b003      	add	sp, #12
   25524:	4770      	bx	lr
   25526:	f06f 040b 	mvn.w	r4, #11
   2552a:	e7f3      	b.n	25514 <nrf_modem_at_scanf+0x6c>
   2552c:	f04f 34ff 	mov.w	r4, #4294967295
   25530:	e7f3      	b.n	2551a <nrf_modem_at_scanf+0x72>
   25532:	f06f 040d 	mvn.w	r4, #13
   25536:	e7f0      	b.n	2551a <nrf_modem_at_scanf+0x72>
   25538:	2000db37 	.word	0x2000db37
   2553c:	2000d3c0 	.word	0x2000d3c0
   25540:	2000d3d0 	.word	0x2000d3d0

00025544 <rpc_at_event_handler>:
   25544:	b570      	push	{r4, r5, r6, lr}
   25546:	68c3      	ldr	r3, [r0, #12]
   25548:	4605      	mov	r5, r0
   2554a:	2ba7      	cmp	r3, #167	; 0xa7
   2554c:	d003      	beq.n	25556 <rpc_at_event_handler+0x12>
   2554e:	6828      	ldr	r0, [r5, #0]
   25550:	f006 fb44 	bl	2bbdc <rpc_client_data_free>
   25554:	e008      	b.n	25568 <rpc_at_event_handler+0x24>
   25556:	2903      	cmp	r1, #3
   25558:	d008      	beq.n	2556c <rpc_at_event_handler+0x28>
   2555a:	2904      	cmp	r1, #4
   2555c:	d019      	beq.n	25592 <rpc_at_event_handler+0x4e>
   2555e:	2902      	cmp	r1, #2
   25560:	d102      	bne.n	25568 <rpc_at_event_handler+0x24>
   25562:	2201      	movs	r2, #1
   25564:	4b0e      	ldr	r3, [pc, #56]	; (255a0 <rpc_at_event_handler+0x5c>)
   25566:	701a      	strb	r2, [r3, #0]
   25568:	2000      	movs	r0, #0
   2556a:	e00a      	b.n	25582 <rpc_at_event_handler+0x3e>
   2556c:	4e0d      	ldr	r6, [pc, #52]	; (255a4 <rpc_at_event_handler+0x60>)
   2556e:	6833      	ldr	r3, [r6, #0]
   25570:	b143      	cbz	r3, 25584 <rpc_at_event_handler+0x40>
   25572:	2400      	movs	r4, #0
   25574:	6800      	ldr	r0, [r0, #0]
   25576:	4798      	blx	r3
   25578:	6828      	ldr	r0, [r5, #0]
   2557a:	6034      	str	r4, [r6, #0]
   2557c:	f006 fb2e 	bl	2bbdc <rpc_client_data_free>
   25580:	b2e0      	uxtb	r0, r4
   25582:	bd70      	pop	{r4, r5, r6, pc}
   25584:	2202      	movs	r2, #2
   25586:	4b08      	ldr	r3, [pc, #32]	; (255a8 <rpc_at_event_handler+0x64>)
   25588:	2401      	movs	r4, #1
   2558a:	6018      	str	r0, [r3, #0]
   2558c:	4b04      	ldr	r3, [pc, #16]	; (255a0 <rpc_at_event_handler+0x5c>)
   2558e:	701a      	strb	r2, [r3, #0]
   25590:	e7f6      	b.n	25580 <rpc_at_event_handler+0x3c>
   25592:	4b06      	ldr	r3, [pc, #24]	; (255ac <rpc_at_event_handler+0x68>)
   25594:	681b      	ldr	r3, [r3, #0]
   25596:	2b00      	cmp	r3, #0
   25598:	d0d9      	beq.n	2554e <rpc_at_event_handler+0xa>
   2559a:	6800      	ldr	r0, [r0, #0]
   2559c:	4798      	blx	r3
   2559e:	e7d6      	b.n	2554e <rpc_at_event_handler+0xa>
   255a0:	2000db31 	.word	0x2000db31
   255a4:	2000d3d4 	.word	0x2000d3d4
   255a8:	2000d3d0 	.word	0x2000d3d0
   255ac:	2000d3cc 	.word	0x2000d3cc

000255b0 <rpc_dfu_event_handler>:
   255b0:	b510      	push	{r4, lr}
   255b2:	4604      	mov	r4, r0
   255b4:	6800      	ldr	r0, [r0, #0]
   255b6:	b108      	cbz	r0, 255bc <rpc_dfu_event_handler+0xc>
   255b8:	f006 fb10 	bl	2bbdc <rpc_client_data_free>
   255bc:	4b05      	ldr	r3, [pc, #20]	; (255d4 <rpc_dfu_event_handler+0x24>)
   255be:	68e2      	ldr	r2, [r4, #12]
   255c0:	429a      	cmp	r2, r3
   255c2:	bf05      	ittet	eq
   255c4:	2001      	moveq	r0, #1
   255c6:	4b04      	ldreq	r3, [pc, #16]	; (255d8 <rpc_dfu_event_handler+0x28>)
   255c8:	2000      	movne	r0, #0
   255ca:	7018      	strbeq	r0, [r3, #0]
   255cc:	bf04      	itt	eq
   255ce:	4b03      	ldreq	r3, [pc, #12]	; (255dc <rpc_dfu_event_handler+0x2c>)
   255d0:	601c      	streq	r4, [r3, #0]
   255d2:	bd10      	pop	{r4, pc}
   255d4:	15abe11a 	.word	0x15abe11a
   255d8:	2000db32 	.word	0x2000db32
   255dc:	2000d3d8 	.word	0x2000d3d8

000255e0 <rpc_gnss_event_handler>:
   255e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255e4:	6804      	ldr	r4, [r0, #0]
   255e6:	4607      	mov	r7, r0
   255e8:	460d      	mov	r5, r1
   255ea:	2c00      	cmp	r4, #0
   255ec:	f000 8086 	beq.w	256fc <rpc_gnss_event_handler+0x11c>
   255f0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   255f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   255f8:	d142      	bne.n	25680 <rpc_gnss_event_handler+0xa0>
   255fa:	4b5f      	ldr	r3, [pc, #380]	; (25778 <rpc_gnss_event_handler+0x198>)
   255fc:	781a      	ldrb	r2, [r3, #0]
   255fe:	4698      	mov	r8, r3
   25600:	2a01      	cmp	r2, #1
   25602:	d131      	bne.n	25668 <rpc_gnss_event_handler+0x88>
   25604:	4a5d      	ldr	r2, [pc, #372]	; (2577c <rpc_gnss_event_handler+0x19c>)
   25606:	6821      	ldr	r1, [r4, #0]
   25608:	8812      	ldrh	r2, [r2, #0]
   2560a:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   2560e:	d12b      	bne.n	25668 <rpc_gnss_event_handler+0x88>
   25610:	6862      	ldr	r2, [r4, #4]
   25612:	bb6a      	cbnz	r2, 25670 <rpc_gnss_event_handler+0x90>
   25614:	4b5a      	ldr	r3, [pc, #360]	; (25780 <rpc_gnss_event_handler+0x1a0>)
   25616:	681e      	ldr	r6, [r3, #0]
   25618:	b31e      	cbz	r6, 25662 <rpc_gnss_event_handler+0x82>
   2561a:	f242 0309 	movw	r3, #8201	; 0x2009
   2561e:	429d      	cmp	r5, r3
   25620:	d11f      	bne.n	25662 <rpc_gnss_event_handler+0x82>
   25622:	4630      	mov	r0, r6
   25624:	8923      	ldrh	r3, [r4, #8]
   25626:	2280      	movs	r2, #128	; 0x80
   25628:	f840 3b04 	str.w	r3, [r0], #4
   2562c:	f104 010a 	add.w	r1, r4, #10
   25630:	f007 facf 	bl	2cbd2 <memcpy>
   25634:	2280      	movs	r2, #128	; 0x80
   25636:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   2563a:	f106 0084 	add.w	r0, r6, #132	; 0x84
   2563e:	f007 fac8 	bl	2cbd2 <memcpy>
   25642:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   25646:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   2564a:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   2564e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   25652:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   25656:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   2565a:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   2565e:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   25662:	2300      	movs	r3, #0
   25664:	f888 3000 	strb.w	r3, [r8]
   25668:	6838      	ldr	r0, [r7, #0]
   2566a:	f006 fab7 	bl	2bbdc <rpc_client_data_free>
   2566e:	e045      	b.n	256fc <rpc_gnss_event_handler+0x11c>
   25670:	f647 71ff 	movw	r1, #32767	; 0x7fff
   25674:	428a      	cmp	r2, r1
   25676:	bf0c      	ite	eq
   25678:	2203      	moveq	r2, #3
   2567a:	2202      	movne	r2, #2
   2567c:	701a      	strb	r2, [r3, #0]
   2567e:	e7f3      	b.n	25668 <rpc_gnss_event_handler+0x88>
   25680:	4e40      	ldr	r6, [pc, #256]	; (25784 <rpc_gnss_event_handler+0x1a4>)
   25682:	6833      	ldr	r3, [r6, #0]
   25684:	2b00      	cmp	r3, #0
   25686:	d0ef      	beq.n	25668 <rpc_gnss_event_handler+0x88>
   25688:	f244 0204 	movw	r2, #16388	; 0x4004
   2568c:	4291      	cmp	r1, r2
   2568e:	d80b      	bhi.n	256a8 <rpc_gnss_event_handler+0xc8>
   25690:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   25694:	d9e8      	bls.n	25668 <rpc_gnss_event_handler+0x88>
   25696:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   2569a:	3a02      	subs	r2, #2
   2569c:	2a02      	cmp	r2, #2
   2569e:	d80b      	bhi.n	256b8 <rpc_gnss_event_handler+0xd8>
   256a0:	e8df f002 	tbb	[pc, r2]
   256a4:	4f45      	.short	0x4f45
   256a6:	59          	.byte	0x59
   256a7:	00          	.byte	0x00
   256a8:	f244 1301 	movw	r3, #16641	; 0x4101
   256ac:	4299      	cmp	r1, r3
   256ae:	d003      	beq.n	256b8 <rpc_gnss_event_handler+0xd8>
   256b0:	f244 2301 	movw	r3, #16897	; 0x4201
   256b4:	4299      	cmp	r1, r3
   256b6:	d1d7      	bne.n	25668 <rpc_gnss_event_handler+0x88>
   256b8:	4f33      	ldr	r7, [pc, #204]	; (25788 <rpc_gnss_event_handler+0x1a8>)
   256ba:	6838      	ldr	r0, [r7, #0]
   256bc:	b108      	cbz	r0, 256c2 <rpc_gnss_event_handler+0xe2>
   256be:	f006 fa8d 	bl	2bbdc <rpc_client_data_free>
   256c2:	f244 2301 	movw	r3, #16897	; 0x4201
   256c6:	429d      	cmp	r5, r3
   256c8:	4b30      	ldr	r3, [pc, #192]	; (2578c <rpc_gnss_event_handler+0x1ac>)
   256ca:	d11a      	bne.n	25702 <rpc_gnss_event_handler+0x122>
   256cc:	2202      	movs	r2, #2
   256ce:	603c      	str	r4, [r7, #0]
   256d0:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   256d4:	701a      	strb	r2, [r3, #0]
   256d6:	07e3      	lsls	r3, r4, #31
   256d8:	d502      	bpl.n	256e0 <rpc_gnss_event_handler+0x100>
   256da:	2002      	movs	r0, #2
   256dc:	6833      	ldr	r3, [r6, #0]
   256de:	4798      	blx	r3
   256e0:	4d2b      	ldr	r5, [pc, #172]	; (25790 <rpc_gnss_event_handler+0x1b0>)
   256e2:	f014 0418 	ands.w	r4, r4, #24
   256e6:	6833      	ldr	r3, [r6, #0]
   256e8:	782a      	ldrb	r2, [r5, #0]
   256ea:	d01a      	beq.n	25722 <rpc_gnss_event_handler+0x142>
   256ec:	b91a      	cbnz	r2, 256f6 <rpc_gnss_event_handler+0x116>
   256ee:	2005      	movs	r0, #5
   256f0:	4798      	blx	r3
   256f2:	2301      	movs	r3, #1
   256f4:	702b      	strb	r3, [r5, #0]
   256f6:	2001      	movs	r0, #1
   256f8:	6833      	ldr	r3, [r6, #0]
   256fa:	4798      	blx	r3
   256fc:	2000      	movs	r0, #0
   256fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25702:	f244 1201 	movw	r2, #16641	; 0x4101
   25706:	4295      	cmp	r5, r2
   25708:	bf0b      	itete	eq
   2570a:	2201      	moveq	r2, #1
   2570c:	2200      	movne	r2, #0
   2570e:	603c      	streq	r4, [r7, #0]
   25710:	603c      	strne	r4, [r7, #0]
   25712:	bf0b      	itete	eq
   25714:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   25718:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   2571c:	701a      	strbeq	r2, [r3, #0]
   2571e:	701a      	strbne	r2, [r3, #0]
   25720:	e7d9      	b.n	256d6 <rpc_gnss_event_handler+0xf6>
   25722:	2a00      	cmp	r2, #0
   25724:	d0e7      	beq.n	256f6 <rpc_gnss_event_handler+0x116>
   25726:	2006      	movs	r0, #6
   25728:	4798      	blx	r3
   2572a:	702c      	strb	r4, [r5, #0]
   2572c:	e7e3      	b.n	256f6 <rpc_gnss_event_handler+0x116>
   2572e:	4c19      	ldr	r4, [pc, #100]	; (25794 <rpc_gnss_event_handler+0x1b4>)
   25730:	6820      	ldr	r0, [r4, #0]
   25732:	b108      	cbz	r0, 25738 <rpc_gnss_event_handler+0x158>
   25734:	f006 fa52 	bl	2bbdc <rpc_client_data_free>
   25738:	683b      	ldr	r3, [r7, #0]
   2573a:	2003      	movs	r0, #3
   2573c:	6023      	str	r3, [r4, #0]
   2573e:	6833      	ldr	r3, [r6, #0]
   25740:	e7db      	b.n	256fa <rpc_gnss_event_handler+0x11a>
   25742:	4c15      	ldr	r4, [pc, #84]	; (25798 <rpc_gnss_event_handler+0x1b8>)
   25744:	6820      	ldr	r0, [r4, #0]
   25746:	b108      	cbz	r0, 2574c <rpc_gnss_event_handler+0x16c>
   25748:	f006 fa48 	bl	2bbdc <rpc_client_data_free>
   2574c:	683b      	ldr	r3, [r7, #0]
   2574e:	2004      	movs	r0, #4
   25750:	6023      	str	r3, [r4, #0]
   25752:	6833      	ldr	r3, [r6, #0]
   25754:	e7d1      	b.n	256fa <rpc_gnss_event_handler+0x11a>
   25756:	7822      	ldrb	r2, [r4, #0]
   25758:	2a03      	cmp	r2, #3
   2575a:	d885      	bhi.n	25668 <rpc_gnss_event_handler+0x88>
   2575c:	e8df f002 	tbb	[pc, r2]
   25760:	09070502 	.word	0x09070502
   25764:	2007      	movs	r0, #7
   25766:	4798      	blx	r3
   25768:	e77e      	b.n	25668 <rpc_gnss_event_handler+0x88>
   2576a:	2008      	movs	r0, #8
   2576c:	e7fb      	b.n	25766 <rpc_gnss_event_handler+0x186>
   2576e:	2009      	movs	r0, #9
   25770:	e7f9      	b.n	25766 <rpc_gnss_event_handler+0x186>
   25772:	200a      	movs	r0, #10
   25774:	e7f7      	b.n	25766 <rpc_gnss_event_handler+0x186>
   25776:	bf00      	nop
   25778:	2000db35 	.word	0x2000db35
   2577c:	2000d478 	.word	0x2000d478
   25780:	2000d3ec 	.word	0x2000d3ec
   25784:	2000d3dc 	.word	0x2000d3dc
   25788:	2000d3e0 	.word	0x2000d3e0
   2578c:	2000db34 	.word	0x2000db34
   25790:	2000db33 	.word	0x2000db33
   25794:	2000d3e8 	.word	0x2000d3e8
   25798:	2000d3e4 	.word	0x2000d3e4

0002579c <full_dfu_ipc_irq_handler>:
   2579c:	2301      	movs	r3, #1
   2579e:	4a03      	ldr	r2, [pc, #12]	; (257ac <full_dfu_ipc_irq_handler+0x10>)
   257a0:	6013      	str	r3, [r2, #0]
   257a2:	07c2      	lsls	r2, r0, #31
   257a4:	bf44      	itt	mi
   257a6:	4a02      	ldrmi	r2, [pc, #8]	; (257b0 <full_dfu_ipc_irq_handler+0x14>)
   257a8:	7013      	strbmi	r3, [r2, #0]
   257aa:	4770      	bx	lr
   257ac:	2000d3f0 	.word	0x2000d3f0
   257b0:	2000db36 	.word	0x2000db36

000257b4 <modem_ipc_wait_for_event>:
   257b4:	b538      	push	{r3, r4, r5, lr}
   257b6:	2300      	movs	r3, #0
   257b8:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   257bc:	4c0b      	ldr	r4, [pc, #44]	; (257ec <modem_ipc_wait_for_event+0x38>)
   257be:	6023      	str	r3, [r4, #0]
   257c0:	6823      	ldr	r3, [r4, #0]
   257c2:	b92b      	cbnz	r3, 257d0 <modem_ipc_wait_for_event+0x1c>
   257c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   257c8:	f005 fc77 	bl	2b0ba <nrf_modem_os_busywait>
   257cc:	3d01      	subs	r5, #1
   257ce:	d1f7      	bne.n	257c0 <modem_ipc_wait_for_event+0xc>
   257d0:	6823      	ldr	r3, [r4, #0]
   257d2:	b913      	cbnz	r3, 257da <modem_ipc_wait_for_event+0x26>
   257d4:	f06f 0073 	mvn.w	r0, #115	; 0x73
   257d8:	e006      	b.n	257e8 <modem_ipc_wait_for_event+0x34>
   257da:	4b05      	ldr	r3, [pc, #20]	; (257f0 <modem_ipc_wait_for_event+0x3c>)
   257dc:	781b      	ldrb	r3, [r3, #0]
   257de:	2b01      	cmp	r3, #1
   257e0:	bf14      	ite	ne
   257e2:	2000      	movne	r0, #0
   257e4:	f06f 0004 	mvneq.w	r0, #4
   257e8:	bd38      	pop	{r3, r4, r5, pc}
   257ea:	bf00      	nop
   257ec:	2000d3f0 	.word	0x2000d3f0
   257f0:	2000db36 	.word	0x2000db36

000257f4 <nrf_modem_full_dfu_setup>:
   257f4:	2200      	movs	r2, #0
   257f6:	2300      	movs	r3, #0
   257f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   257fa:	4d2b      	ldr	r5, [pc, #172]	; (258a8 <nrf_modem_full_dfu_setup+0xb4>)
   257fc:	4e2b      	ldr	r6, [pc, #172]	; (258ac <nrf_modem_full_dfu_setup+0xb8>)
   257fe:	e9c5 2302 	strd	r2, r3, [r5, #8]
   25802:	e9c5 2304 	strd	r2, r3, [r5, #16]
   25806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2580a:	4b29      	ldr	r3, [pc, #164]	; (258b0 <nrf_modem_full_dfu_setup+0xbc>)
   2580c:	2400      	movs	r4, #0
   2580e:	601a      	str	r2, [r3, #0]
   25810:	f100 031c 	add.w	r3, r0, #28
   25814:	6033      	str	r3, [r6, #0]
   25816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2581a:	6043      	str	r3, [r0, #4]
   2581c:	231c      	movs	r3, #28
   2581e:	7203      	strb	r3, [r0, #8]
   25820:	2320      	movs	r3, #32
   25822:	2701      	movs	r7, #1
   25824:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   25828:	7243      	strb	r3, [r0, #9]
   2582a:	4b22      	ldr	r3, [pc, #136]	; (258b4 <nrf_modem_full_dfu_setup+0xc0>)
   2582c:	7004      	strb	r4, [r0, #0]
   2582e:	7044      	strb	r4, [r0, #1]
   25830:	70c2      	strb	r2, [r0, #3]
   25832:	7284      	strb	r4, [r0, #10]
   25834:	72c4      	strb	r4, [r0, #11]
   25836:	7087      	strb	r7, [r0, #2]
   25838:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   2583c:	702c      	strb	r4, [r5, #0]
   2583e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   25842:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   25846:	4b1c      	ldr	r3, [pc, #112]	; (258b8 <nrf_modem_full_dfu_setup+0xc4>)
   25848:	b093      	sub	sp, #76	; 0x4c
   2584a:	4622      	mov	r2, r4
   2584c:	4620      	mov	r0, r4
   2584e:	491b      	ldr	r1, [pc, #108]	; (258bc <nrf_modem_full_dfu_setup+0xc8>)
   25850:	701c      	strb	r4, [r3, #0]
   25852:	f7fc fab1 	bl	21db8 <nrfx_ipc_init>
   25856:	4621      	mov	r1, r4
   25858:	2240      	movs	r2, #64	; 0x40
   2585a:	a801      	add	r0, sp, #4
   2585c:	f007 f9c6 	bl	2cbec <memset>
   25860:	2302      	movs	r3, #2
   25862:	9302      	str	r3, [sp, #8]
   25864:	2304      	movs	r3, #4
   25866:	930b      	str	r3, [sp, #44]	; 0x2c
   25868:	2305      	movs	r3, #5
   2586a:	a801      	add	r0, sp, #4
   2586c:	9311      	str	r3, [sp, #68]	; 0x44
   2586e:	9709      	str	r7, [sp, #36]	; 0x24
   25870:	f7fc fac8 	bl	21e04 <nrfx_ipc_config_load>
   25874:	4b12      	ldr	r3, [pc, #72]	; (258c0 <nrf_modem_full_dfu_setup+0xcc>)
   25876:	9400      	str	r4, [sp, #0]
   25878:	6836      	ldr	r6, [r6, #0]
   2587a:	601c      	str	r4, [r3, #0]
   2587c:	681b      	ldr	r3, [r3, #0]
   2587e:	9300      	str	r3, [sp, #0]
   25880:	9b00      	ldr	r3, [sp, #0]
   25882:	f7ff ff97 	bl	257b4 <modem_ipc_wait_for_event>
   25886:	4604      	mov	r4, r0
   25888:	b130      	cbz	r0, 25898 <nrf_modem_full_dfu_setup+0xa4>
   2588a:	2303      	movs	r3, #3
   2588c:	702b      	strb	r3, [r5, #0]
   2588e:	f7fc faf7 	bl	21e80 <nrfx_ipc_uninit>
   25892:	4620      	mov	r0, r4
   25894:	b013      	add	sp, #76	; 0x4c
   25896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25898:	6832      	ldr	r2, [r6, #0]
   2589a:	4b0a      	ldr	r3, [pc, #40]	; (258c4 <nrf_modem_full_dfu_setup+0xd0>)
   2589c:	429a      	cmp	r2, r3
   2589e:	d0f8      	beq.n	25892 <nrf_modem_full_dfu_setup+0x9e>
   258a0:	f06f 0404 	mvn.w	r4, #4
   258a4:	e7f3      	b.n	2588e <nrf_modem_full_dfu_setup+0x9a>
   258a6:	bf00      	nop
   258a8:	2000cbb8 	.word	0x2000cbb8
   258ac:	2000d3f4 	.word	0x2000d3f4
   258b0:	2000d3f8 	.word	0x2000d3f8
   258b4:	4002a000 	.word	0x4002a000
   258b8:	2000db36 	.word	0x2000db36
   258bc:	0002579d 	.word	0x0002579d
   258c0:	40005610 	.word	0x40005610
   258c4:	a5000001 	.word	0xa5000001

000258c8 <packet_handler_create>:
   258c8:	2801      	cmp	r0, #1
   258ca:	b570      	push	{r4, r5, r6, lr}
   258cc:	4604      	mov	r4, r0
   258ce:	460e      	mov	r6, r1
   258d0:	4615      	mov	r5, r2
   258d2:	d00f      	beq.n	258f4 <packet_handler_create+0x2c>
   258d4:	1e84      	subs	r4, r0, #2
   258d6:	2c01      	cmp	r4, #1
   258d8:	d810      	bhi.n	258fc <packet_handler_create+0x34>
   258da:	2010      	movs	r0, #16
   258dc:	f7f9 f82a 	bl	1e934 <nrf_modem_os_alloc>
   258e0:	2400      	movs	r4, #0
   258e2:	b130      	cbz	r0, 258f2 <packet_handler_create+0x2a>
   258e4:	2218      	movs	r2, #24
   258e6:	4b08      	ldr	r3, [pc, #32]	; (25908 <packet_handler_create+0x40>)
   258e8:	6085      	str	r5, [r0, #8]
   258ea:	fb02 3404 	mla	r4, r2, r4, r3
   258ee:	e9c0 4600 	strd	r4, r6, [r0]
   258f2:	bd70      	pop	{r4, r5, r6, pc}
   258f4:	2014      	movs	r0, #20
   258f6:	f7f9 f81d 	bl	1e934 <nrf_modem_os_alloc>
   258fa:	e7f2      	b.n	258e2 <packet_handler_create+0x1a>
   258fc:	200c      	movs	r0, #12
   258fe:	f7f9 f819 	bl	1e934 <nrf_modem_os_alloc>
   25902:	2402      	movs	r4, #2
   25904:	e7ed      	b.n	258e2 <packet_handler_create+0x1a>
   25906:	bf00      	nop
   25908:	0002e094 	.word	0x0002e094

0002590c <modem_off>:
   2590c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2590e:	2501      	movs	r5, #1
   25910:	4c07      	ldr	r4, [pc, #28]	; (25930 <modem_off+0x24>)
   25912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   25916:	6065      	str	r5, [r4, #4]
   25918:	f005 fbcf 	bl	2b0ba <nrf_modem_os_busywait>
   2591c:	2300      	movs	r3, #0
   2591e:	6063      	str	r3, [r4, #4]
   25920:	9301      	str	r3, [sp, #4]
   25922:	6025      	str	r5, [r4, #0]
   25924:	6823      	ldr	r3, [r4, #0]
   25926:	9301      	str	r3, [sp, #4]
   25928:	9b01      	ldr	r3, [sp, #4]
   2592a:	b003      	add	sp, #12
   2592c:	bd30      	pop	{r4, r5, pc}
   2592e:	bf00      	nop
   25930:	40005610 	.word	0x40005610

00025934 <nrf_modem_init>:
   25934:	b570      	push	{r4, r5, r6, lr}
   25936:	460d      	mov	r5, r1
   25938:	b300      	cbz	r0, 2597c <nrf_modem_init+0x48>
   2593a:	4e15      	ldr	r6, [pc, #84]	; (25990 <nrf_modem_init+0x5c>)
   2593c:	7832      	ldrb	r2, [r6, #0]
   2593e:	bb02      	cbnz	r2, 25982 <nrf_modem_init+0x4e>
   25940:	2901      	cmp	r1, #1
   25942:	d113      	bne.n	2596c <nrf_modem_init+0x38>
   25944:	68c1      	ldr	r1, [r0, #12]
   25946:	6842      	ldr	r2, [r0, #4]
   25948:	440a      	add	r2, r1
   2594a:	6941      	ldr	r1, [r0, #20]
   2594c:	440a      	add	r2, r1
   2594e:	69c1      	ldr	r1, [r0, #28]
   25950:	440a      	add	r2, r1
   25952:	f242 011b 	movw	r1, #8219	; 0x201b
   25956:	428a      	cmp	r2, r1
   25958:	d916      	bls.n	25988 <nrf_modem_init+0x54>
   2595a:	6800      	ldr	r0, [r0, #0]
   2595c:	f7ff ff4a 	bl	257f4 <nrf_modem_full_dfu_setup>
   25960:	4604      	mov	r4, r0
   25962:	b130      	cbz	r0, 25972 <nrf_modem_init+0x3e>
   25964:	f7ff ffd2 	bl	2590c <modem_off>
   25968:	4620      	mov	r0, r4
   2596a:	bd70      	pop	{r4, r5, r6, pc}
   2596c:	f006 fe4c 	bl	2c608 <nrf_modem_platform_init>
   25970:	e7f6      	b.n	25960 <nrf_modem_init+0x2c>
   25972:	4b08      	ldr	r3, [pc, #32]	; (25994 <nrf_modem_init+0x60>)
   25974:	701d      	strb	r5, [r3, #0]
   25976:	2301      	movs	r3, #1
   25978:	7033      	strb	r3, [r6, #0]
   2597a:	e7f5      	b.n	25968 <nrf_modem_init+0x34>
   2597c:	f06f 040d 	mvn.w	r4, #13
   25980:	e7f2      	b.n	25968 <nrf_modem_init+0x34>
   25982:	f04f 34ff 	mov.w	r4, #4294967295
   25986:	e7ef      	b.n	25968 <nrf_modem_init+0x34>
   25988:	f06f 040b 	mvn.w	r4, #11
   2598c:	e7ec      	b.n	25968 <nrf_modem_init+0x34>
   2598e:	bf00      	nop
   25990:	2000db37 	.word	0x2000db37
   25994:	2000db38 	.word	0x2000db38

00025998 <nrf_modem_platform_af_method_table_get>:
   25998:	2805      	cmp	r0, #5
   2599a:	b508      	push	{r3, lr}
   2599c:	d016      	beq.n	259cc <nrf_modem_platform_af_method_table_get+0x34>
   2599e:	f020 0008 	bic.w	r0, r0, #8
   259a2:	2802      	cmp	r0, #2
   259a4:	d117      	bne.n	259d6 <nrf_modem_platform_af_method_table_get+0x3e>
   259a6:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   259aa:	d207      	bcs.n	259bc <nrf_modem_platform_af_method_table_get+0x24>
   259ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   259b0:	d213      	bcs.n	259da <nrf_modem_platform_af_method_table_get+0x42>
   259b2:	3a01      	subs	r2, #1
   259b4:	2a01      	cmp	r2, #1
   259b6:	d804      	bhi.n	259c2 <nrf_modem_platform_af_method_table_get+0x2a>
   259b8:	4809      	ldr	r0, [pc, #36]	; (259e0 <nrf_modem_platform_af_method_table_get+0x48>)
   259ba:	bd08      	pop	{r3, pc}
   259bc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   259c0:	d00b      	beq.n	259da <nrf_modem_platform_af_method_table_get+0x42>
   259c2:	207b      	movs	r0, #123	; 0x7b
   259c4:	f005 fb7b 	bl	2b0be <nrf_modem_os_errno_set>
   259c8:	2000      	movs	r0, #0
   259ca:	e7f6      	b.n	259ba <nrf_modem_platform_af_method_table_get+0x22>
   259cc:	2903      	cmp	r1, #3
   259ce:	4805      	ldr	r0, [pc, #20]	; (259e4 <nrf_modem_platform_af_method_table_get+0x4c>)
   259d0:	bf18      	it	ne
   259d2:	2000      	movne	r0, #0
   259d4:	e7f1      	b.n	259ba <nrf_modem_platform_af_method_table_get+0x22>
   259d6:	2016      	movs	r0, #22
   259d8:	e7f4      	b.n	259c4 <nrf_modem_platform_af_method_table_get+0x2c>
   259da:	4803      	ldr	r0, [pc, #12]	; (259e8 <nrf_modem_platform_af_method_table_get+0x50>)
   259dc:	e7ed      	b.n	259ba <nrf_modem_platform_af_method_table_get+0x22>
   259de:	bf00      	nop
   259e0:	0002e0dc 	.word	0x0002e0dc
   259e4:	0002e12c 	.word	0x0002e12c
   259e8:	0002e104 	.word	0x0002e104

000259ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   259ec:	4b0e      	ldr	r3, [pc, #56]	; (25a28 <z_sys_init_run_level+0x3c>)
{
   259ee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   259f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   259f4:	3001      	adds	r0, #1
   259f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   259fa:	42a6      	cmp	r6, r4
   259fc:	d800      	bhi.n	25a00 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   259fe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   25a00:	e9d4 3500 	ldrd	r3, r5, [r4]
   25a04:	4628      	mov	r0, r5
   25a06:	4798      	blx	r3
		if (dev != NULL) {
   25a08:	b165      	cbz	r5, 25a24 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   25a0a:	68eb      	ldr	r3, [r5, #12]
   25a0c:	b130      	cbz	r0, 25a1c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   25a0e:	2800      	cmp	r0, #0
   25a10:	bfb8      	it	lt
   25a12:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   25a14:	28ff      	cmp	r0, #255	; 0xff
   25a16:	bfa8      	it	ge
   25a18:	20ff      	movge	r0, #255	; 0xff
   25a1a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   25a1c:	785a      	ldrb	r2, [r3, #1]
   25a1e:	f042 0201 	orr.w	r2, r2, #1
   25a22:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25a24:	3408      	adds	r4, #8
   25a26:	e7e8      	b.n	259fa <z_sys_init_run_level+0xe>
   25a28:	0002e154 	.word	0x0002e154

00025a2c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   25a2c:	4b01      	ldr	r3, [pc, #4]	; (25a34 <z_impl_z_errno+0x8>)
   25a2e:	6898      	ldr	r0, [r3, #8]
}
   25a30:	3064      	adds	r0, #100	; 0x64
   25a32:	4770      	bx	lr
   25a34:	2000d3fc 	.word	0x2000d3fc

00025a38 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25a3a:	4604      	mov	r4, r0
   25a3c:	460e      	mov	r6, r1
	__asm__ volatile(
   25a3e:	f04f 0320 	mov.w	r3, #32
   25a42:	f3ef 8711 	mrs	r7, BASEPRI
   25a46:	f383 8812 	msr	BASEPRI_MAX, r3
   25a4a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25a4e:	f002 f8c1 	bl	27bd4 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25a52:	2200      	movs	r2, #0
   25a54:	2c04      	cmp	r4, #4
   25a56:	bf98      	it	ls
   25a58:	4b1d      	ldrls	r3, [pc, #116]	; (25ad0 <z_fatal_error+0x98>)
   25a5a:	4605      	mov	r5, r0
	switch (reason) {
   25a5c:	bf94      	ite	ls
   25a5e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   25a62:	4b1c      	ldrhi	r3, [pc, #112]	; (25ad4 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25a64:	9200      	str	r2, [sp, #0]
   25a66:	2145      	movs	r1, #69	; 0x45
   25a68:	4622      	mov	r2, r4
   25a6a:	481b      	ldr	r0, [pc, #108]	; (25ad8 <z_fatal_error+0xa0>)
   25a6c:	f005 f8d9 	bl	2ac22 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25a70:	b13e      	cbz	r6, 25a82 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25a72:	69f3      	ldr	r3, [r6, #28]
   25a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25a78:	b11b      	cbz	r3, 25a82 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   25a7a:	2145      	movs	r1, #69	; 0x45
   25a7c:	4817      	ldr	r0, [pc, #92]	; (25adc <z_fatal_error+0xa4>)
   25a7e:	f005 f8d0 	bl	2ac22 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25a82:	b135      	cbz	r5, 25a92 <z_fatal_error+0x5a>
   25a84:	4628      	mov	r0, r5
   25a86:	f006 ff79 	bl	2c97c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25a8a:	4603      	mov	r3, r0
   25a8c:	b108      	cbz	r0, 25a92 <z_fatal_error+0x5a>
   25a8e:	7802      	ldrb	r2, [r0, #0]
   25a90:	b902      	cbnz	r2, 25a94 <z_fatal_error+0x5c>
		thread_name = "unknown";
   25a92:	4b13      	ldr	r3, [pc, #76]	; (25ae0 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25a94:	462a      	mov	r2, r5
   25a96:	2145      	movs	r1, #69	; 0x45
   25a98:	4812      	ldr	r0, [pc, #72]	; (25ae4 <z_fatal_error+0xac>)
   25a9a:	f005 f8c2 	bl	2ac22 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   25a9e:	4631      	mov	r1, r6
   25aa0:	4620      	mov	r0, r4
   25aa2:	f7fb f931 	bl	20d08 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   25aa6:	2c04      	cmp	r4, #4
   25aa8:	d108      	bne.n	25abc <z_fatal_error+0x84>
   25aaa:	490f      	ldr	r1, [pc, #60]	; (25ae8 <z_fatal_error+0xb0>)
   25aac:	480f      	ldr	r0, [pc, #60]	; (25aec <z_fatal_error+0xb4>)
   25aae:	228f      	movs	r2, #143	; 0x8f
   25ab0:	f004 fef8 	bl	2a8a4 <printk>
   25ab4:	218f      	movs	r1, #143	; 0x8f
   25ab6:	480c      	ldr	r0, [pc, #48]	; (25ae8 <z_fatal_error+0xb0>)
   25ab8:	f005 f88d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   25abc:	f387 8811 	msr	BASEPRI, r7
   25ac0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25ac4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25ac6:	b003      	add	sp, #12
   25ac8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25acc:	f7f6 bef0 	b.w	1c8b0 <z_impl_k_thread_abort>
   25ad0:	0002e16c 	.word	0x0002e16c
   25ad4:	00030a76 	.word	0x00030a76
   25ad8:	00030a8c 	.word	0x00030a8c
   25adc:	00030ab9 	.word	0x00030ab9
   25ae0:	00030a84 	.word	0x00030a84
   25ae4:	00030adf 	.word	0x00030adf
   25ae8:	00030afc 	.word	0x00030afc
   25aec:	0002e574 	.word	0x0002e574

00025af0 <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   25af0:	2300      	movs	r3, #0
   25af2:	2201      	movs	r2, #1
{
   25af4:	b510      	push	{r4, lr}
   25af6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   25af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   25afc:	220f      	movs	r2, #15
   25afe:	9301      	str	r3, [sp, #4]
   25b00:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25b04:	2318      	movs	r3, #24
   25b06:	4a0b      	ldr	r2, [pc, #44]	; (25b34 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
   25b08:	4c0b      	ldr	r4, [pc, #44]	; (25b38 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25b0a:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   25b0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   25b12:	490a      	ldr	r1, [pc, #40]	; (25b3c <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
   25b14:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
   25b18:	fb02 1100 	mla	r1, r2, r0, r1
   25b1c:	9300      	str	r3, [sp, #0]
   25b1e:	4620      	mov	r0, r4
   25b20:	4b07      	ldr	r3, [pc, #28]	; (25b40 <init_idle_thread+0x50>)
   25b22:	f000 f9cd 	bl	25ec0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25b26:	7b63      	ldrb	r3, [r4, #13]
   25b28:	f023 0304 	bic.w	r3, r3, #4
   25b2c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   25b2e:	b006      	add	sp, #24
   25b30:	bd10      	pop	{r4, pc}
   25b32:	bf00      	nop
   25b34:	2000d3fc 	.word	0x2000d3fc
   25b38:	2000cbd0 	.word	0x2000cbd0
   25b3c:	20010478 	.word	0x20010478
   25b40:	0002613d 	.word	0x0002613d

00025b44 <bg_thread_main>:
	z_sys_post_kernel = true;
   25b44:	2201      	movs	r2, #1
{
   25b46:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   25b48:	4b09      	ldr	r3, [pc, #36]	; (25b70 <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   25b4a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   25b4c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   25b4e:	f7ff ff4d 	bl	259ec <z_sys_init_run_level>
	boot_banner();
   25b52:	f002 ff87 	bl	28a64 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   25b56:	2003      	movs	r0, #3
   25b58:	f7ff ff48 	bl	259ec <z_sys_init_run_level>
	z_init_static_threads();
   25b5c:	f000 fa4a 	bl	25ff4 <z_init_static_threads>
	main();
   25b60:	f7f4 fd6c 	bl	1a63c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25b64:	4a03      	ldr	r2, [pc, #12]	; (25b74 <bg_thread_main+0x30>)
   25b66:	7b13      	ldrb	r3, [r2, #12]
   25b68:	f023 0301 	bic.w	r3, r3, #1
   25b6c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25b6e:	bd08      	pop	{r3, pc}
   25b70:	2000db39 	.word	0x2000db39
   25b74:	2000cc50 	.word	0x2000cc50

00025b78 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   25b78:	4802      	ldr	r0, [pc, #8]	; (25b84 <z_bss_zero+0xc>)
   25b7a:	4a03      	ldr	r2, [pc, #12]	; (25b88 <z_bss_zero+0x10>)
   25b7c:	2100      	movs	r1, #0
   25b7e:	1a12      	subs	r2, r2, r0
   25b80:	f007 b834 	b.w	2cbec <memset>
   25b84:	2000cac0 	.word	0x2000cac0
   25b88:	2000db54 	.word	0x2000db54

00025b8c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25b8c:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   25b8e:	4b30      	ldr	r3, [pc, #192]	; (25c50 <z_cstart+0xc4>)
   25b90:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   25b92:	f503 6800 	add.w	r8, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25b96:	f388 8808 	msr	MSP, r8
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   25b9a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25b9e:	2400      	movs	r4, #0
   25ba0:	23e0      	movs	r3, #224	; 0xe0
   25ba2:	4d2c      	ldr	r5, [pc, #176]	; (25c54 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   25ba4:	4e2c      	ldr	r6, [pc, #176]	; (25c58 <z_cstart+0xcc>)
   25ba6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25baa:	77ec      	strb	r4, [r5, #31]
   25bac:	762c      	strb	r4, [r5, #24]
   25bae:	766c      	strb	r4, [r5, #25]
   25bb0:	76ac      	strb	r4, [r5, #26]
   25bb2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25bb8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 25c6c <z_cstart+0xe0>
   25bbc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25bc0:	626b      	str	r3, [r5, #36]	; 0x24
   25bc2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25bc6:	f7f6 fdd9 	bl	1c77c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25bca:	f7f6 fa37 	bl	1c03c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25bce:	f04f 33ff 	mov.w	r3, #4294967295
   25bd2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25bd4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   25bd6:	f7f7 f823 	bl	1cc20 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25bda:	f7f6 fe7b 	bl	1c8d4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   25bde:	f240 1301 	movw	r3, #257	; 0x101
   25be2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   25be6:	ab06      	add	r3, sp, #24
   25be8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   25bea:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25bee:	f006 fe9f 	bl	2c930 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   25bf2:	4620      	mov	r0, r4
   25bf4:	f7ff fefa 	bl	259ec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   25bf8:	2001      	movs	r0, #1
   25bfa:	f7ff fef7 	bl	259ec <z_sys_init_run_level>
	z_sched_init();
   25bfe:	f001 fe99 	bl	27934 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25c02:	4b16      	ldr	r3, [pc, #88]	; (25c5c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   25c04:	4d16      	ldr	r5, [pc, #88]	; (25c60 <z_cstart+0xd4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25c06:	9305      	str	r3, [sp, #20]
   25c08:	2301      	movs	r3, #1
   25c0a:	4916      	ldr	r1, [pc, #88]	; (25c64 <z_cstart+0xd8>)
   25c0c:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
   25c10:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25c14:	4628      	mov	r0, r5
   25c16:	464b      	mov	r3, r9
   25c18:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25c1c:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
   25c1e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25c20:	f000 f94e 	bl	25ec0 <z_setup_new_thread>
   25c24:	4607      	mov	r7, r0
   25c26:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   25c28:	4628      	mov	r0, r5
   25c2a:	f022 0204 	bic.w	r2, r2, #4
   25c2e:	736a      	strb	r2, [r5, #13]
   25c30:	f001 fb78 	bl	27324 <z_ready_thread>
		init_idle_thread(i);
   25c34:	4620      	mov	r0, r4
   25c36:	f7ff ff5b 	bl	25af0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   25c3a:	4b0b      	ldr	r3, [pc, #44]	; (25c68 <z_cstart+0xdc>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25c3c:	464a      	mov	r2, r9
   25c3e:	4639      	mov	r1, r7
   25c40:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   25c42:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
   25c44:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   25c46:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25c4a:	f7f6 fb3b 	bl	1c2c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25c4e:	bf00      	nop
   25c50:	200105b8 	.word	0x200105b8
   25c54:	e000ed00 	.word	0xe000ed00
   25c58:	2000d3fc 	.word	0x2000d3fc
   25c5c:	00030b68 	.word	0x00030b68
   25c60:	2000cc50 	.word	0x2000cc50
   25c64:	2000e4d8 	.word	0x2000e4d8
   25c68:	2000cbd0 	.word	0x2000cbd0
   25c6c:	00025b45 	.word	0x00025b45

00025c70 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25c72:	4d0d      	ldr	r5, [pc, #52]	; (25ca8 <statics_init+0x38>)
   25c74:	4c0d      	ldr	r4, [pc, #52]	; (25cac <statics_init+0x3c>)
   25c76:	462f      	mov	r7, r5
   25c78:	4e0d      	ldr	r6, [pc, #52]	; (25cb0 <statics_init+0x40>)
   25c7a:	42ac      	cmp	r4, r5
   25c7c:	d908      	bls.n	25c90 <statics_init+0x20>
   25c7e:	4631      	mov	r1, r6
   25c80:	480c      	ldr	r0, [pc, #48]	; (25cb4 <statics_init+0x44>)
   25c82:	2218      	movs	r2, #24
   25c84:	f004 fe0e 	bl	2a8a4 <printk>
   25c88:	2118      	movs	r1, #24
   25c8a:	4630      	mov	r0, r6
   25c8c:	f004 ffa3 	bl	2abd6 <assert_post_action>
   25c90:	42bc      	cmp	r4, r7
   25c92:	d301      	bcc.n	25c98 <statics_init+0x28>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   25c94:	2000      	movs	r0, #0
   25c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25c98:	4620      	mov	r0, r4
   25c9a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25c9e:	f006 fe52 	bl	2c946 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25ca2:	3418      	adds	r4, #24
   25ca4:	e7e9      	b.n	25c7a <statics_init+0xa>
   25ca6:	bf00      	nop
   25ca8:	2000c998 	.word	0x2000c998
   25cac:	2000c950 	.word	0x2000c950
   25cb0:	00030b70 	.word	0x00030b70
   25cb4:	0002e574 	.word	0x0002e574

00025cb8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cbc:	b087      	sub	sp, #28
   25cbe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   25cc2:	4606      	mov	r6, r0
   25cc4:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25cc6:	4640      	mov	r0, r8
   25cc8:	4649      	mov	r1, r9
{
   25cca:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25ccc:	f006 fed9 	bl	2ca82 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25cd0:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   25cd8:	f04f 0320 	mov.w	r3, #32
   25cdc:	f3ef 8411 	mrs	r4, BASEPRI
   25ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   25ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ce8:	4628      	mov	r0, r5
   25cea:	f000 fa03 	bl	260f4 <z_spin_lock_valid>
   25cee:	b940      	cbnz	r0, 25d02 <k_heap_aligned_alloc+0x4a>
   25cf0:	4935      	ldr	r1, [pc, #212]	; (25dc8 <k_heap_aligned_alloc+0x110>)
   25cf2:	4836      	ldr	r0, [pc, #216]	; (25dcc <k_heap_aligned_alloc+0x114>)
   25cf4:	2281      	movs	r2, #129	; 0x81
   25cf6:	f004 fdd5 	bl	2a8a4 <printk>
   25cfa:	2181      	movs	r1, #129	; 0x81
   25cfc:	4832      	ldr	r0, [pc, #200]	; (25dc8 <k_heap_aligned_alloc+0x110>)
   25cfe:	f004 ff6a 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25d02:	4628      	mov	r0, r5
   25d04:	f000 fa12 	bl	2612c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25d08:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   25d0c:	b15b      	cbz	r3, 25d26 <k_heap_aligned_alloc+0x6e>
   25d0e:	ea58 0309 	orrs.w	r3, r8, r9
   25d12:	d008      	beq.n	25d26 <k_heap_aligned_alloc+0x6e>
   25d14:	492e      	ldr	r1, [pc, #184]	; (25dd0 <k_heap_aligned_alloc+0x118>)
   25d16:	482d      	ldr	r0, [pc, #180]	; (25dcc <k_heap_aligned_alloc+0x114>)
   25d18:	2249      	movs	r2, #73	; 0x49
   25d1a:	f004 fdc3 	bl	2a8a4 <printk>
   25d1e:	2149      	movs	r1, #73	; 0x49
   25d20:	482b      	ldr	r0, [pc, #172]	; (25dd0 <k_heap_aligned_alloc+0x118>)
   25d22:	f004 ff58 	bl	2abd6 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d26:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 25dc8 <k_heap_aligned_alloc+0x110>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25d2a:	f106 090c 	add.w	r9, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   25d2e:	4652      	mov	r2, sl
   25d30:	4659      	mov	r1, fp
   25d32:	4630      	mov	r0, r6
   25d34:	f7f5 f96a 	bl	1b00c <sys_heap_aligned_alloc>
   25d38:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   25d3a:	f002 fad5 	bl	282e8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   25d3e:	b1a7      	cbz	r7, 25d6a <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d40:	4628      	mov	r0, r5
   25d42:	f000 f9e5 	bl	26110 <z_spin_unlock_valid>
   25d46:	b940      	cbnz	r0, 25d5a <k_heap_aligned_alloc+0xa2>
   25d48:	491f      	ldr	r1, [pc, #124]	; (25dc8 <k_heap_aligned_alloc+0x110>)
   25d4a:	4820      	ldr	r0, [pc, #128]	; (25dcc <k_heap_aligned_alloc+0x114>)
   25d4c:	22ac      	movs	r2, #172	; 0xac
   25d4e:	f004 fda9 	bl	2a8a4 <printk>
   25d52:	21ac      	movs	r1, #172	; 0xac
   25d54:	481c      	ldr	r0, [pc, #112]	; (25dc8 <k_heap_aligned_alloc+0x110>)
   25d56:	f004 ff3e 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   25d5a:	f384 8811 	msr	BASEPRI, r4
   25d5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25d62:	4638      	mov	r0, r7
   25d64:	b007      	add	sp, #28
   25d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   25d6a:	9b04      	ldr	r3, [sp, #16]
   25d6c:	1a1b      	subs	r3, r3, r0
   25d6e:	9302      	str	r3, [sp, #8]
   25d70:	9b05      	ldr	r3, [sp, #20]
   25d72:	eb63 0301 	sbc.w	r3, r3, r1
   25d76:	9303      	str	r3, [sp, #12]
   25d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25d7c:	2a01      	cmp	r2, #1
   25d7e:	f173 0300 	sbcs.w	r3, r3, #0
   25d82:	dbdd      	blt.n	25d40 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25d88:	4621      	mov	r1, r4
   25d8a:	e9cd 2300 	strd	r2, r3, [sp]
   25d8e:	4628      	mov	r0, r5
   25d90:	464a      	mov	r2, r9
   25d92:	f001 fc2f 	bl	275f4 <z_pend_curr>
	__asm__ volatile(
   25d96:	f04f 0320 	mov.w	r3, #32
   25d9a:	f3ef 8411 	mrs	r4, BASEPRI
   25d9e:	f383 8812 	msr	BASEPRI_MAX, r3
   25da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25da6:	4628      	mov	r0, r5
   25da8:	f000 f9a4 	bl	260f4 <z_spin_lock_valid>
   25dac:	b940      	cbnz	r0, 25dc0 <k_heap_aligned_alloc+0x108>
   25dae:	4641      	mov	r1, r8
   25db0:	4806      	ldr	r0, [pc, #24]	; (25dcc <k_heap_aligned_alloc+0x114>)
   25db2:	2281      	movs	r2, #129	; 0x81
   25db4:	f004 fd76 	bl	2a8a4 <printk>
   25db8:	2181      	movs	r1, #129	; 0x81
   25dba:	4640      	mov	r0, r8
   25dbc:	f004 ff0b 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25dc0:	4628      	mov	r0, r5
   25dc2:	f000 f9b3 	bl	2612c <z_spin_lock_set_owner>
	return k;
   25dc6:	e7b2      	b.n	25d2e <k_heap_aligned_alloc+0x76>
   25dc8:	0002e5ae 	.word	0x0002e5ae
   25dcc:	0002e574 	.word	0x0002e574
   25dd0:	00030b70 	.word	0x00030b70

00025dd4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   25dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25dd6:	4604      	mov	r4, r0
   25dd8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25dda:	f100 0514 	add.w	r5, r0, #20
   25dde:	f04f 0320 	mov.w	r3, #32
   25de2:	f3ef 8711 	mrs	r7, BASEPRI
   25de6:	f383 8812 	msr	BASEPRI_MAX, r3
   25dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25dee:	4628      	mov	r0, r5
   25df0:	f000 f980 	bl	260f4 <z_spin_lock_valid>
   25df4:	b940      	cbnz	r0, 25e08 <k_heap_free+0x34>
   25df6:	4916      	ldr	r1, [pc, #88]	; (25e50 <k_heap_free+0x7c>)
   25df8:	4816      	ldr	r0, [pc, #88]	; (25e54 <k_heap_free+0x80>)
   25dfa:	2281      	movs	r2, #129	; 0x81
   25dfc:	f004 fd52 	bl	2a8a4 <printk>
   25e00:	2181      	movs	r1, #129	; 0x81
   25e02:	4813      	ldr	r0, [pc, #76]	; (25e50 <k_heap_free+0x7c>)
   25e04:	f004 fee7 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   25e08:	4628      	mov	r0, r5
   25e0a:	f000 f98f 	bl	2612c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   25e0e:	4620      	mov	r0, r4
   25e10:	4631      	mov	r1, r6
   25e12:	f7f5 f8c3 	bl	1af9c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   25e16:	f104 000c 	add.w	r0, r4, #12
   25e1a:	f006 fe18 	bl	2ca4e <z_unpend_all>
   25e1e:	b128      	cbz	r0, 25e2c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   25e20:	4639      	mov	r1, r7
   25e22:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25e24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   25e28:	f001 b844 	b.w	26eb4 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e2c:	4628      	mov	r0, r5
   25e2e:	f000 f96f 	bl	26110 <z_spin_unlock_valid>
   25e32:	b940      	cbnz	r0, 25e46 <k_heap_free+0x72>
   25e34:	4906      	ldr	r1, [pc, #24]	; (25e50 <k_heap_free+0x7c>)
   25e36:	4807      	ldr	r0, [pc, #28]	; (25e54 <k_heap_free+0x80>)
   25e38:	22ac      	movs	r2, #172	; 0xac
   25e3a:	f004 fd33 	bl	2a8a4 <printk>
   25e3e:	21ac      	movs	r1, #172	; 0xac
   25e40:	4803      	ldr	r0, [pc, #12]	; (25e50 <k_heap_free+0x7c>)
   25e42:	f004 fec8 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   25e46:	f387 8811 	msr	BASEPRI, r7
   25e4a:	f3bf 8f6f 	isb	sy
}
   25e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25e50:	0002e5ae 	.word	0x0002e5ae
   25e54:	0002e574 	.word	0x0002e574

00025e58 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   25e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25e5c:	4d14      	ldr	r5, [pc, #80]	; (25eb0 <init_mem_slab_module+0x58>)
   25e5e:	4c15      	ldr	r4, [pc, #84]	; (25eb4 <init_mem_slab_module+0x5c>)
   25e60:	46a8      	mov	r8, r5
   25e62:	4e15      	ldr	r6, [pc, #84]	; (25eb8 <init_mem_slab_module+0x60>)
   25e64:	42ac      	cmp	r4, r5
   25e66:	d908      	bls.n	25e7a <init_mem_slab_module+0x22>
   25e68:	4631      	mov	r1, r6
   25e6a:	4814      	ldr	r0, [pc, #80]	; (25ebc <init_mem_slab_module+0x64>)
   25e6c:	223c      	movs	r2, #60	; 0x3c
   25e6e:	f004 fd19 	bl	2a8a4 <printk>
   25e72:	213c      	movs	r1, #60	; 0x3c
   25e74:	4630      	mov	r0, r6
   25e76:	f004 feae 	bl	2abd6 <assert_post_action>
   25e7a:	4544      	cmp	r4, r8
   25e7c:	d302      	bcc.n	25e84 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
   25e7e:	2000      	movs	r0, #0
	return rc;
}
   25e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25e84:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   25e88:	ea42 0301 	orr.w	r3, r2, r1
   25e8c:	f013 0303 	ands.w	r3, r3, #3
   25e90:	d10b      	bne.n	25eaa <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   25e92:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   25e94:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25e96:	4283      	cmp	r3, r0
   25e98:	d101      	bne.n	25e9e <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25e9a:	3420      	adds	r4, #32
   25e9c:	e7e2      	b.n	25e64 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   25e9e:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25ea0:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   25ea2:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   25ea4:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   25ea6:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   25ea8:	e7f5      	b.n	25e96 <init_mem_slab_module+0x3e>
		return -EINVAL;
   25eaa:	f06f 0015 	mvn.w	r0, #21
	return rc;
   25eae:	e7e7      	b.n	25e80 <init_mem_slab_module+0x28>
   25eb0:	2000c950 	.word	0x2000c950
   25eb4:	2000c950 	.word	0x2000c950
   25eb8:	00030b92 	.word	0x00030b92
   25ebc:	0002e574 	.word	0x0002e574

00025ec0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25ec4:	b085      	sub	sp, #20
   25ec6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   25eca:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   25ecc:	f1b9 0f0f 	cmp.w	r9, #15
{
   25ed0:	460f      	mov	r7, r1
   25ed2:	4615      	mov	r5, r2
   25ed4:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   25ed6:	d12e      	bne.n	25f36 <z_setup_new_thread+0x76>
   25ed8:	4b1f      	ldr	r3, [pc, #124]	; (25f58 <z_setup_new_thread+0x98>)
   25eda:	4598      	cmp	r8, r3
   25edc:	d12f      	bne.n	25f3e <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25ede:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   25ee2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   25ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   25ee8:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   25eea:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25eec:	2304      	movs	r3, #4
   25eee:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25ef2:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25ef4:	9302      	str	r3, [sp, #8]
   25ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25ef8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25efc:	9301      	str	r3, [sp, #4]
   25efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   25f00:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   25f02:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f06:	9300      	str	r3, [sp, #0]
   25f08:	462a      	mov	r2, r5
   25f0a:	4643      	mov	r3, r8
   25f0c:	4639      	mov	r1, r7
   25f0e:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25f10:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   25f14:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   25f16:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   25f1a:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   25f1c:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25f1e:	f7f6 f9b5 	bl	1c28c <arch_new_thread>
	if (!_current) {
   25f22:	4b0e      	ldr	r3, [pc, #56]	; (25f5c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   25f24:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   25f26:	689b      	ldr	r3, [r3, #8]
   25f28:	b103      	cbz	r3, 25f2c <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   25f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   25f2c:	4628      	mov	r0, r5
   25f2e:	6763      	str	r3, [r4, #116]	; 0x74
   25f30:	b005      	add	sp, #20
   25f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   25f36:	f109 0310 	add.w	r3, r9, #16
   25f3a:	2b1e      	cmp	r3, #30
   25f3c:	d9cf      	bls.n	25ede <z_setup_new_thread+0x1e>
   25f3e:	f240 12ff 	movw	r2, #511	; 0x1ff
   25f42:	4907      	ldr	r1, [pc, #28]	; (25f60 <z_setup_new_thread+0xa0>)
   25f44:	4807      	ldr	r0, [pc, #28]	; (25f64 <z_setup_new_thread+0xa4>)
   25f46:	f004 fcad 	bl	2a8a4 <printk>
   25f4a:	f240 11ff 	movw	r1, #511	; 0x1ff
   25f4e:	4804      	ldr	r0, [pc, #16]	; (25f60 <z_setup_new_thread+0xa0>)
   25f50:	f004 fe41 	bl	2abd6 <assert_post_action>
   25f54:	e7c3      	b.n	25ede <z_setup_new_thread+0x1e>
   25f56:	bf00      	nop
   25f58:	0002613d 	.word	0x0002613d
   25f5c:	2000d3fc 	.word	0x2000d3fc
   25f60:	00030bb7 	.word	0x00030bb7
   25f64:	0002e574 	.word	0x0002e574

00025f68 <z_impl_k_thread_create>:
{
   25f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25f6c:	b087      	sub	sp, #28
   25f6e:	4604      	mov	r4, r0
   25f70:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   25f74:	460d      	mov	r5, r1
   25f76:	4690      	mov	r8, r2
   25f78:	4699      	mov	r9, r3
   25f7a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25f7e:	b153      	cbz	r3, 25f96 <z_impl_k_thread_create+0x2e>
   25f80:	4919      	ldr	r1, [pc, #100]	; (25fe8 <z_impl_k_thread_create+0x80>)
   25f82:	481a      	ldr	r0, [pc, #104]	; (25fec <z_impl_k_thread_create+0x84>)
   25f84:	f44f 721a 	mov.w	r2, #616	; 0x268
   25f88:	f004 fc8c 	bl	2a8a4 <printk>
   25f8c:	f44f 711a 	mov.w	r1, #616	; 0x268
   25f90:	4815      	ldr	r0, [pc, #84]	; (25fe8 <z_impl_k_thread_create+0x80>)
   25f92:	f004 fe20 	bl	2abd6 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25f96:	2300      	movs	r3, #0
   25f98:	9305      	str	r3, [sp, #20]
   25f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25f9c:	4642      	mov	r2, r8
   25f9e:	9304      	str	r3, [sp, #16]
   25fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25fa2:	4629      	mov	r1, r5
   25fa4:	9303      	str	r3, [sp, #12]
   25fa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25fa8:	4620      	mov	r0, r4
   25faa:	9302      	str	r3, [sp, #8]
   25fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25fae:	9301      	str	r3, [sp, #4]
   25fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25fb2:	9300      	str	r3, [sp, #0]
   25fb4:	464b      	mov	r3, r9
   25fb6:	f7ff ff83 	bl	25ec0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25fba:	1c7b      	adds	r3, r7, #1
   25fbc:	bf08      	it	eq
   25fbe:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   25fc2:	d005      	beq.n	25fd0 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25fc4:	ea56 0307 	orrs.w	r3, r6, r7
   25fc8:	d106      	bne.n	25fd8 <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   25fca:	4620      	mov	r0, r4
   25fcc:	f001 f9e0 	bl	27390 <z_sched_start>
}
   25fd0:	4620      	mov	r0, r4
   25fd2:	b007      	add	sp, #28
   25fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25fd8:	4632      	mov	r2, r6
   25fda:	463b      	mov	r3, r7
   25fdc:	4904      	ldr	r1, [pc, #16]	; (25ff0 <z_impl_k_thread_create+0x88>)
   25fde:	f104 0018 	add.w	r0, r4, #24
   25fe2:	f001 ff63 	bl	27eac <z_add_timeout>
   25fe6:	e7f3      	b.n	25fd0 <z_impl_k_thread_create+0x68>
   25fe8:	00030bb7 	.word	0x00030bb7
   25fec:	0002e574 	.word	0x0002e574
   25ff0:	00027415 	.word	0x00027415

00025ff4 <z_init_static_threads>:
{
   25ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   25ff8:	4f39      	ldr	r7, [pc, #228]	; (260e0 <z_init_static_threads+0xec>)
   25ffa:	4d3a      	ldr	r5, [pc, #232]	; (260e4 <z_init_static_threads+0xf0>)
   25ffc:	463e      	mov	r6, r7
   25ffe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 260ec <z_init_static_threads+0xf8>
{
   26002:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   26004:	42bd      	cmp	r5, r7
   26006:	d90a      	bls.n	2601e <z_init_static_threads+0x2a>
   26008:	4641      	mov	r1, r8
   2600a:	4837      	ldr	r0, [pc, #220]	; (260e8 <z_init_static_threads+0xf4>)
   2600c:	f240 22cf 	movw	r2, #719	; 0x2cf
   26010:	f004 fc48 	bl	2a8a4 <printk>
   26014:	f240 21cf 	movw	r1, #719	; 0x2cf
   26018:	4640      	mov	r0, r8
   2601a:	f004 fddc 	bl	2abd6 <assert_post_action>
   2601e:	42b5      	cmp	r5, r6
   26020:	f105 0430 	add.w	r4, r5, #48	; 0x30
   26024:	d31d      	bcc.n	26062 <z_init_static_threads+0x6e>
	k_sched_lock();
   26026:	f000 ff7b 	bl	26f20 <k_sched_lock>
   2602a:	f240 38e7 	movw	r8, #999	; 0x3e7
   2602e:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   26032:	4c2c      	ldr	r4, [pc, #176]	; (260e4 <z_init_static_threads+0xf0>)
   26034:	4d2d      	ldr	r5, [pc, #180]	; (260ec <z_init_static_threads+0xf8>)
   26036:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 260e8 <z_init_static_threads+0xf4>
   2603a:	42b4      	cmp	r4, r6
   2603c:	d90a      	bls.n	26054 <z_init_static_threads+0x60>
   2603e:	4629      	mov	r1, r5
   26040:	4650      	mov	r0, sl
   26042:	f240 22ee 	movw	r2, #750	; 0x2ee
   26046:	f004 fc2d 	bl	2a8a4 <printk>
   2604a:	f240 21ee 	movw	r1, #750	; 0x2ee
   2604e:	4628      	mov	r0, r5
   26050:	f004 fdc1 	bl	2abd6 <assert_post_action>
   26054:	42b4      	cmp	r4, r6
   26056:	d321      	bcc.n	2609c <z_init_static_threads+0xa8>
}
   26058:	b006      	add	sp, #24
   2605a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   2605e:	f001 bbcf 	b.w	27800 <k_sched_unlock>
		z_setup_new_thread(
   26062:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26066:	9305      	str	r3, [sp, #20]
   26068:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2606c:	9304      	str	r3, [sp, #16]
   2606e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   26072:	9303      	str	r3, [sp, #12]
   26074:	f854 3c18 	ldr.w	r3, [r4, #-24]
   26078:	9302      	str	r3, [sp, #8]
   2607a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2607e:	9301      	str	r3, [sp, #4]
   26080:	f854 3c20 	ldr.w	r3, [r4, #-32]
   26084:	9300      	str	r3, [sp, #0]
   26086:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2608a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2608e:	f7ff ff17 	bl	25ec0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   26092:	f854 3c30 	ldr.w	r3, [r4, #-48]
   26096:	655d      	str	r5, [r3, #84]	; 0x54
   26098:	4625      	mov	r5, r4
   2609a:	e7b3      	b.n	26004 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2609c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2609e:	1c5a      	adds	r2, r3, #1
   260a0:	d00f      	beq.n	260c2 <z_init_static_threads+0xce>
   260a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   260a6:	4640      	mov	r0, r8
   260a8:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
   260aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   260ae:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   260b2:	4549      	cmp	r1, r9
   260b4:	bf08      	it	eq
   260b6:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   260b8:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   260ba:	d104      	bne.n	260c6 <z_init_static_threads+0xd2>
	z_sched_start(thread);
   260bc:	4638      	mov	r0, r7
   260be:	f001 f967 	bl	27390 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   260c2:	3430      	adds	r4, #48	; 0x30
   260c4:	e7b9      	b.n	2603a <z_init_static_threads+0x46>
   260c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   260ca:	2300      	movs	r3, #0
   260cc:	f7f2 ffe8 	bl	190a0 <__aeabi_uldivmod>
   260d0:	4602      	mov	r2, r0
   260d2:	460b      	mov	r3, r1
   260d4:	f107 0018 	add.w	r0, r7, #24
   260d8:	4905      	ldr	r1, [pc, #20]	; (260f0 <z_init_static_threads+0xfc>)
   260da:	f001 fee7 	bl	27eac <z_add_timeout>
   260de:	e7f0      	b.n	260c2 <z_init_static_threads+0xce>
   260e0:	2000c950 	.word	0x2000c950
   260e4:	2000c920 	.word	0x2000c920
   260e8:	0002e574 	.word	0x0002e574
   260ec:	00030bb7 	.word	0x00030bb7
   260f0:	00027415 	.word	0x00027415

000260f4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   260f4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   260f6:	b138      	cbz	r0, 26108 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   260f8:	4b04      	ldr	r3, [pc, #16]	; (2610c <z_spin_lock_valid+0x18>)
   260fa:	f000 0003 	and.w	r0, r0, #3
   260fe:	7d1b      	ldrb	r3, [r3, #20]
   26100:	1ac0      	subs	r0, r0, r3
   26102:	bf18      	it	ne
   26104:	2001      	movne	r0, #1
   26106:	4770      	bx	lr
			return false;
		}
	}
	return true;
   26108:	2001      	movs	r0, #1
}
   2610a:	4770      	bx	lr
   2610c:	2000d3fc 	.word	0x2000d3fc

00026110 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   26110:	4905      	ldr	r1, [pc, #20]	; (26128 <z_spin_unlock_valid+0x18>)
{
   26112:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   26114:	688a      	ldr	r2, [r1, #8]
   26116:	7d08      	ldrb	r0, [r1, #20]
   26118:	6819      	ldr	r1, [r3, #0]
   2611a:	4302      	orrs	r2, r0
   2611c:	2000      	movs	r0, #0
   2611e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   26120:	bf04      	itt	eq
   26122:	6018      	streq	r0, [r3, #0]
	return true;
   26124:	2001      	moveq	r0, #1
}
   26126:	4770      	bx	lr
   26128:	2000d3fc 	.word	0x2000d3fc

0002612c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   2612c:	4a02      	ldr	r2, [pc, #8]	; (26138 <z_spin_lock_set_owner+0xc>)
   2612e:	7d11      	ldrb	r1, [r2, #20]
   26130:	6893      	ldr	r3, [r2, #8]
   26132:	430b      	orrs	r3, r1
   26134:	6003      	str	r3, [r0, #0]
}
   26136:	4770      	bx	lr
   26138:	2000d3fc 	.word	0x2000d3fc

0002613c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   2613c:	4c10      	ldr	r4, [pc, #64]	; (26180 <idle+0x44>)
{
   2613e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   26140:	68a2      	ldr	r2, [r4, #8]
   26142:	f992 200e 	ldrsb.w	r2, [r2, #14]
   26146:	2a00      	cmp	r2, #0
   26148:	da08      	bge.n	2615c <idle+0x20>
   2614a:	490e      	ldr	r1, [pc, #56]	; (26184 <idle+0x48>)
   2614c:	480e      	ldr	r0, [pc, #56]	; (26188 <idle+0x4c>)
   2614e:	2227      	movs	r2, #39	; 0x27
   26150:	f004 fba8 	bl	2a8a4 <printk>
   26154:	2127      	movs	r1, #39	; 0x27
   26156:	480b      	ldr	r0, [pc, #44]	; (26184 <idle+0x48>)
   26158:	f004 fd3d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2615c:	f04f 0220 	mov.w	r2, #32
   26160:	f3ef 8311 	mrs	r3, BASEPRI
   26164:	f382 8812 	msr	BASEPRI_MAX, r2
   26168:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2616c:	f001 ff94 	bl	28098 <z_get_next_timeout_expiry>
   26170:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   26172:	f7f5 fed7 	bl	1bf24 <pm_system_suspend>
   26176:	2800      	cmp	r0, #0
   26178:	d1f0      	bne.n	2615c <idle+0x20>
	arch_cpu_idle();
   2617a:	f7f5 ff65 	bl	1c048 <arch_cpu_idle>
}
   2617e:	e7ed      	b.n	2615c <idle+0x20>
   26180:	2000d3fc 	.word	0x2000d3fc
   26184:	00030bda 	.word	0x00030bda
   26188:	0002e574 	.word	0x0002e574

0002618c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2618c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26190:	4604      	mov	r4, r0
   26192:	4616      	mov	r6, r2
   26194:	461f      	mov	r7, r3
   26196:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2619a:	b143      	cbz	r3, 261ae <z_impl_k_mutex_lock+0x22>
   2619c:	4962      	ldr	r1, [pc, #392]	; (26328 <z_impl_k_mutex_lock+0x19c>)
   2619e:	4863      	ldr	r0, [pc, #396]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   261a0:	2265      	movs	r2, #101	; 0x65
   261a2:	f004 fb7f 	bl	2a8a4 <printk>
   261a6:	2165      	movs	r1, #101	; 0x65
   261a8:	485f      	ldr	r0, [pc, #380]	; (26328 <z_impl_k_mutex_lock+0x19c>)
   261aa:	f004 fd14 	bl	2abd6 <assert_post_action>
   261ae:	f04f 0320 	mov.w	r3, #32
   261b2:	f3ef 8811 	mrs	r8, BASEPRI
   261b6:	f383 8812 	msr	BASEPRI_MAX, r3
   261ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261be:	485c      	ldr	r0, [pc, #368]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   261c0:	f7ff ff98 	bl	260f4 <z_spin_lock_valid>
   261c4:	b940      	cbnz	r0, 261d8 <z_impl_k_mutex_lock+0x4c>
   261c6:	495b      	ldr	r1, [pc, #364]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   261c8:	4858      	ldr	r0, [pc, #352]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   261ca:	2281      	movs	r2, #129	; 0x81
   261cc:	f004 fb6a 	bl	2a8a4 <printk>
   261d0:	2181      	movs	r1, #129	; 0x81
   261d2:	4858      	ldr	r0, [pc, #352]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   261d4:	f004 fcff 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   261d8:	4855      	ldr	r0, [pc, #340]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   261da:	f7ff ffa7 	bl	2612c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   261de:	68e3      	ldr	r3, [r4, #12]
   261e0:	4a55      	ldr	r2, [pc, #340]	; (26338 <z_impl_k_mutex_lock+0x1ac>)
   261e2:	b1d3      	cbz	r3, 2621a <z_impl_k_mutex_lock+0x8e>
   261e4:	68a0      	ldr	r0, [r4, #8]
   261e6:	6891      	ldr	r1, [r2, #8]
   261e8:	4288      	cmp	r0, r1
   261ea:	d033      	beq.n	26254 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   261ec:	ea56 0307 	orrs.w	r3, r6, r7
   261f0:	d132      	bne.n	26258 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261f2:	484f      	ldr	r0, [pc, #316]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   261f4:	f7ff ff8c 	bl	26110 <z_spin_unlock_valid>
   261f8:	b940      	cbnz	r0, 2620c <z_impl_k_mutex_lock+0x80>
   261fa:	494e      	ldr	r1, [pc, #312]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   261fc:	484b      	ldr	r0, [pc, #300]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   261fe:	22ac      	movs	r2, #172	; 0xac
   26200:	f004 fb50 	bl	2a8a4 <printk>
   26204:	21ac      	movs	r1, #172	; 0xac
   26206:	484b      	ldr	r0, [pc, #300]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   26208:	f004 fce5 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2620c:	f388 8811 	msr	BASEPRI, r8
   26210:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   26214:	f06f 000f 	mvn.w	r0, #15
   26218:	e019      	b.n	2624e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   2621a:	6891      	ldr	r1, [r2, #8]
   2621c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   26220:	3301      	adds	r3, #1
   26222:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   26224:	6893      	ldr	r3, [r2, #8]
   26226:	4842      	ldr	r0, [pc, #264]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   26228:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2622a:	60a3      	str	r3, [r4, #8]
   2622c:	f7ff ff70 	bl	26110 <z_spin_unlock_valid>
   26230:	b940      	cbnz	r0, 26244 <z_impl_k_mutex_lock+0xb8>
   26232:	4940      	ldr	r1, [pc, #256]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   26234:	483d      	ldr	r0, [pc, #244]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   26236:	22ac      	movs	r2, #172	; 0xac
   26238:	f004 fb34 	bl	2a8a4 <printk>
   2623c:	21ac      	movs	r1, #172	; 0xac
   2623e:	483d      	ldr	r0, [pc, #244]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   26240:	f004 fcc9 	bl	2abd6 <assert_post_action>
   26244:	f388 8811 	msr	BASEPRI, r8
   26248:	f3bf 8f6f 	isb	sy
		return 0;
   2624c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2624e:	b002      	add	sp, #8
   26250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   26254:	6921      	ldr	r1, [r4, #16]
   26256:	e7e3      	b.n	26220 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   26258:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2625c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   26260:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   26264:	4299      	cmp	r1, r3
   26266:	bfa8      	it	ge
   26268:	4619      	movge	r1, r3
   2626a:	4291      	cmp	r1, r2
   2626c:	bfb8      	it	lt
   2626e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   26270:	428b      	cmp	r3, r1
   26272:	dd3f      	ble.n	262f4 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
   26274:	f001 f9e4 	bl	27640 <z_set_prio>
   26278:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2627a:	4622      	mov	r2, r4
   2627c:	4641      	mov	r1, r8
   2627e:	e9cd 6700 	strd	r6, r7, [sp]
   26282:	482b      	ldr	r0, [pc, #172]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   26284:	f001 f9b6 	bl	275f4 <z_pend_curr>
	if (got_mutex == 0) {
   26288:	2800      	cmp	r0, #0
   2628a:	d0e0      	beq.n	2624e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   2628c:	f04f 0320 	mov.w	r3, #32
   26290:	f3ef 8611 	mrs	r6, BASEPRI
   26294:	f383 8812 	msr	BASEPRI_MAX, r3
   26298:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2629c:	4824      	ldr	r0, [pc, #144]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   2629e:	f7ff ff29 	bl	260f4 <z_spin_lock_valid>
   262a2:	b940      	cbnz	r0, 262b6 <z_impl_k_mutex_lock+0x12a>
   262a4:	4923      	ldr	r1, [pc, #140]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   262a6:	4821      	ldr	r0, [pc, #132]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   262a8:	2281      	movs	r2, #129	; 0x81
   262aa:	f004 fafb 	bl	2a8a4 <printk>
   262ae:	2181      	movs	r1, #129	; 0x81
   262b0:	4820      	ldr	r0, [pc, #128]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   262b2:	f004 fc90 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   262b6:	481e      	ldr	r0, [pc, #120]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   262b8:	f7ff ff38 	bl	2612c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   262bc:	6823      	ldr	r3, [r4, #0]
   262be:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   262c0:	429c      	cmp	r4, r3
   262c2:	d00a      	beq.n	262da <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   262c4:	b14b      	cbz	r3, 262da <z_impl_k_mutex_lock+0x14e>
   262c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   262ca:	4299      	cmp	r1, r3
   262cc:	bfa8      	it	ge
   262ce:	4619      	movge	r1, r3
   262d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   262d4:	4299      	cmp	r1, r3
   262d6:	bfb8      	it	lt
   262d8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   262da:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   262dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   262e0:	4299      	cmp	r1, r3
   262e2:	d109      	bne.n	262f8 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
   262e4:	b16d      	cbz	r5, 26302 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
   262e6:	4631      	mov	r1, r6
   262e8:	4811      	ldr	r0, [pc, #68]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   262ea:	f000 fde3 	bl	26eb4 <z_reschedule>
	return -EAGAIN;
   262ee:	f06f 000a 	mvn.w	r0, #10
   262f2:	e7ac      	b.n	2624e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   262f4:	2500      	movs	r5, #0
   262f6:	e7c0      	b.n	2627a <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
   262f8:	f001 f9a2 	bl	27640 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   262fc:	2800      	cmp	r0, #0
   262fe:	d1f2      	bne.n	262e6 <z_impl_k_mutex_lock+0x15a>
   26300:	e7f0      	b.n	262e4 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26302:	480b      	ldr	r0, [pc, #44]	; (26330 <z_impl_k_mutex_lock+0x1a4>)
   26304:	f7ff ff04 	bl	26110 <z_spin_unlock_valid>
   26308:	b940      	cbnz	r0, 2631c <z_impl_k_mutex_lock+0x190>
   2630a:	490a      	ldr	r1, [pc, #40]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   2630c:	4807      	ldr	r0, [pc, #28]	; (2632c <z_impl_k_mutex_lock+0x1a0>)
   2630e:	22ac      	movs	r2, #172	; 0xac
   26310:	f004 fac8 	bl	2a8a4 <printk>
   26314:	21ac      	movs	r1, #172	; 0xac
   26316:	4807      	ldr	r0, [pc, #28]	; (26334 <z_impl_k_mutex_lock+0x1a8>)
   26318:	f004 fc5d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2631c:	f386 8811 	msr	BASEPRI, r6
   26320:	f3bf 8f6f 	isb	sy
   26324:	e7e3      	b.n	262ee <z_impl_k_mutex_lock+0x162>
   26326:	bf00      	nop
   26328:	00030bfb 	.word	0x00030bfb
   2632c:	0002e574 	.word	0x0002e574
   26330:	2000d424 	.word	0x2000d424
   26334:	0002e5ae 	.word	0x0002e5ae
   26338:	2000d3fc 	.word	0x2000d3fc

0002633c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2633c:	b538      	push	{r3, r4, r5, lr}
   2633e:	4604      	mov	r4, r0
   26340:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   26344:	b143      	cbz	r3, 26358 <z_impl_k_mutex_unlock+0x1c>
   26346:	4945      	ldr	r1, [pc, #276]	; (2645c <z_impl_k_mutex_unlock+0x120>)
   26348:	4845      	ldr	r0, [pc, #276]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   2634a:	22c7      	movs	r2, #199	; 0xc7
   2634c:	f004 faaa 	bl	2a8a4 <printk>
   26350:	21c7      	movs	r1, #199	; 0xc7
   26352:	4842      	ldr	r0, [pc, #264]	; (2645c <z_impl_k_mutex_unlock+0x120>)
   26354:	f004 fc3f 	bl	2abd6 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   26358:	68a3      	ldr	r3, [r4, #8]
   2635a:	2b00      	cmp	r3, #0
   2635c:	d078      	beq.n	26450 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2635e:	4d41      	ldr	r5, [pc, #260]	; (26464 <z_impl_k_mutex_unlock+0x128>)
   26360:	68aa      	ldr	r2, [r5, #8]
   26362:	4293      	cmp	r3, r2
   26364:	d177      	bne.n	26456 <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   26366:	68e3      	ldr	r3, [r4, #12]
   26368:	b943      	cbnz	r3, 2637c <z_impl_k_mutex_unlock+0x40>
   2636a:	493c      	ldr	r1, [pc, #240]	; (2645c <z_impl_k_mutex_unlock+0x120>)
   2636c:	483c      	ldr	r0, [pc, #240]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   2636e:	22df      	movs	r2, #223	; 0xdf
   26370:	f004 fa98 	bl	2a8a4 <printk>
   26374:	21df      	movs	r1, #223	; 0xdf
   26376:	4839      	ldr	r0, [pc, #228]	; (2645c <z_impl_k_mutex_unlock+0x120>)
   26378:	f004 fc2d 	bl	2abd6 <assert_post_action>
   2637c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   26380:	b143      	cbz	r3, 26394 <z_impl_k_mutex_unlock+0x58>
   26382:	4939      	ldr	r1, [pc, #228]	; (26468 <z_impl_k_mutex_unlock+0x12c>)
   26384:	4836      	ldr	r0, [pc, #216]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   26386:	22fd      	movs	r2, #253	; 0xfd
   26388:	f004 fa8c 	bl	2a8a4 <printk>
   2638c:	21fd      	movs	r1, #253	; 0xfd
   2638e:	4836      	ldr	r0, [pc, #216]	; (26468 <z_impl_k_mutex_unlock+0x12c>)
   26390:	f004 fc21 	bl	2abd6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26394:	68ab      	ldr	r3, [r5, #8]
   26396:	7bdb      	ldrb	r3, [r3, #15]
   26398:	2b01      	cmp	r3, #1
   2639a:	d108      	bne.n	263ae <z_impl_k_mutex_unlock+0x72>
   2639c:	4932      	ldr	r1, [pc, #200]	; (26468 <z_impl_k_mutex_unlock+0x12c>)
   2639e:	4830      	ldr	r0, [pc, #192]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   263a0:	22fe      	movs	r2, #254	; 0xfe
   263a2:	f004 fa7f 	bl	2a8a4 <printk>
   263a6:	21fe      	movs	r1, #254	; 0xfe
   263a8:	482f      	ldr	r0, [pc, #188]	; (26468 <z_impl_k_mutex_unlock+0x12c>)
   263aa:	f004 fc14 	bl	2abd6 <assert_post_action>

	--_current->base.sched_locked;
   263ae:	68aa      	ldr	r2, [r5, #8]
   263b0:	7bd3      	ldrb	r3, [r2, #15]
   263b2:	3b01      	subs	r3, #1
   263b4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   263b6:	68e3      	ldr	r3, [r4, #12]
   263b8:	2b01      	cmp	r3, #1
   263ba:	d905      	bls.n	263c8 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   263bc:	3b01      	subs	r3, #1
   263be:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   263c0:	f001 fa1e 	bl	27800 <k_sched_unlock>

	return 0;
   263c4:	2000      	movs	r0, #0
}
   263c6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   263c8:	f04f 0320 	mov.w	r3, #32
   263cc:	f3ef 8511 	mrs	r5, BASEPRI
   263d0:	f383 8812 	msr	BASEPRI_MAX, r3
   263d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263d8:	4824      	ldr	r0, [pc, #144]	; (2646c <z_impl_k_mutex_unlock+0x130>)
   263da:	f7ff fe8b 	bl	260f4 <z_spin_lock_valid>
   263de:	b940      	cbnz	r0, 263f2 <z_impl_k_mutex_unlock+0xb6>
   263e0:	4923      	ldr	r1, [pc, #140]	; (26470 <z_impl_k_mutex_unlock+0x134>)
   263e2:	481f      	ldr	r0, [pc, #124]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   263e4:	2281      	movs	r2, #129	; 0x81
   263e6:	f004 fa5d 	bl	2a8a4 <printk>
   263ea:	2181      	movs	r1, #129	; 0x81
   263ec:	4820      	ldr	r0, [pc, #128]	; (26470 <z_impl_k_mutex_unlock+0x134>)
   263ee:	f004 fbf2 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   263f2:	481e      	ldr	r0, [pc, #120]	; (2646c <z_impl_k_mutex_unlock+0x130>)
   263f4:	f7ff fe9a 	bl	2612c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   263f8:	68a0      	ldr	r0, [r4, #8]
   263fa:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   263fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26400:	4299      	cmp	r1, r3
   26402:	d001      	beq.n	26408 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
   26404:	f001 f91c 	bl	27640 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   26408:	4620      	mov	r0, r4
   2640a:	f001 fa55 	bl	278b8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2640e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   26410:	b158      	cbz	r0, 2642a <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
   26412:	f990 200e 	ldrsb.w	r2, [r0, #14]
   26416:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   26418:	2200      	movs	r2, #0
   2641a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2641c:	f000 ff82 	bl	27324 <z_ready_thread>
		z_reschedule(&lock, key);
   26420:	4629      	mov	r1, r5
   26422:	4812      	ldr	r0, [pc, #72]	; (2646c <z_impl_k_mutex_unlock+0x130>)
   26424:	f000 fd46 	bl	26eb4 <z_reschedule>
   26428:	e7ca      	b.n	263c0 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   2642a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2642c:	480f      	ldr	r0, [pc, #60]	; (2646c <z_impl_k_mutex_unlock+0x130>)
   2642e:	f7ff fe6f 	bl	26110 <z_spin_unlock_valid>
   26432:	b940      	cbnz	r0, 26446 <z_impl_k_mutex_unlock+0x10a>
   26434:	490e      	ldr	r1, [pc, #56]	; (26470 <z_impl_k_mutex_unlock+0x134>)
   26436:	480a      	ldr	r0, [pc, #40]	; (26460 <z_impl_k_mutex_unlock+0x124>)
   26438:	22ac      	movs	r2, #172	; 0xac
   2643a:	f004 fa33 	bl	2a8a4 <printk>
   2643e:	21ac      	movs	r1, #172	; 0xac
   26440:	480b      	ldr	r0, [pc, #44]	; (26470 <z_impl_k_mutex_unlock+0x134>)
   26442:	f004 fbc8 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26446:	f385 8811 	msr	BASEPRI, r5
   2644a:	f3bf 8f6f 	isb	sy
   2644e:	e7b7      	b.n	263c0 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   26450:	f06f 0015 	mvn.w	r0, #21
   26454:	e7b7      	b.n	263c6 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   26456:	f04f 30ff 	mov.w	r0, #4294967295
   2645a:	e7b4      	b.n	263c6 <z_impl_k_mutex_unlock+0x8a>
   2645c:	00030bfb 	.word	0x00030bfb
   26460:	0002e574 	.word	0x0002e574
   26464:	2000d3fc 	.word	0x2000d3fc
   26468:	00030c1d 	.word	0x00030c1d
   2646c:	2000d424 	.word	0x2000d424
   26470:	0002e5ae 	.word	0x0002e5ae

00026474 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   26474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26478:	4604      	mov	r4, r0
   2647a:	460d      	mov	r5, r1
   2647c:	4690      	mov	r8, r2
   2647e:	4699      	mov	r9, r3
   26480:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26484:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26488:	f04f 0320 	mov.w	r3, #32
   2648c:	f3ef 8711 	mrs	r7, BASEPRI
   26490:	f383 8812 	msr	BASEPRI_MAX, r3
   26494:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26498:	4630      	mov	r0, r6
   2649a:	f7ff fe2b 	bl	260f4 <z_spin_lock_valid>
   2649e:	b940      	cbnz	r0, 264b2 <queue_insert+0x3e>
   264a0:	4936      	ldr	r1, [pc, #216]	; (2657c <queue_insert+0x108>)
   264a2:	4837      	ldr	r0, [pc, #220]	; (26580 <queue_insert+0x10c>)
   264a4:	2281      	movs	r2, #129	; 0x81
   264a6:	f004 f9fd 	bl	2a8a4 <printk>
   264aa:	2181      	movs	r1, #129	; 0x81
   264ac:	4833      	ldr	r0, [pc, #204]	; (2657c <queue_insert+0x108>)
   264ae:	f004 fb92 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   264b2:	4630      	mov	r0, r6
   264b4:	f7ff fe3a 	bl	2612c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   264b8:	f1ba 0f00 	cmp.w	sl, #0
   264bc:	d000      	beq.n	264c0 <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   264be:	6865      	ldr	r5, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   264c0:	f104 000c 	add.w	r0, r4, #12
   264c4:	f001 f9f8 	bl	278b8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   264c8:	b158      	cbz	r0, 264e2 <queue_insert+0x6e>
   264ca:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   264cc:	f8c0 8014 	str.w	r8, [r0, #20]
   264d0:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   264d2:	f000 ff27 	bl	27324 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   264d6:	4630      	mov	r0, r6
   264d8:	4639      	mov	r1, r7
   264da:	f000 fceb 	bl	26eb4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   264de:	2000      	movs	r0, #0
   264e0:	e019      	b.n	26516 <queue_insert+0xa2>
	if (alloc) {
   264e2:	f1b9 0f00 	cmp.w	r9, #0
   264e6:	d028      	beq.n	2653a <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   264e8:	2108      	movs	r1, #8
   264ea:	f002 faa3 	bl	28a34 <z_thread_aligned_alloc>
		if (anode == NULL) {
   264ee:	b9a0      	cbnz	r0, 2651a <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264f0:	4630      	mov	r0, r6
   264f2:	f7ff fe0d 	bl	26110 <z_spin_unlock_valid>
   264f6:	b940      	cbnz	r0, 2650a <queue_insert+0x96>
   264f8:	4920      	ldr	r1, [pc, #128]	; (2657c <queue_insert+0x108>)
   264fa:	4821      	ldr	r0, [pc, #132]	; (26580 <queue_insert+0x10c>)
   264fc:	22ac      	movs	r2, #172	; 0xac
   264fe:	f004 f9d1 	bl	2a8a4 <printk>
   26502:	21ac      	movs	r1, #172	; 0xac
   26504:	481d      	ldr	r0, [pc, #116]	; (2657c <queue_insert+0x108>)
   26506:	f004 fb66 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2650a:	f387 8811 	msr	BASEPRI, r7
   2650e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26512:	f06f 000b 	mvn.w	r0, #11
}
   26516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2651a:	2301      	movs	r3, #1
		anode->data = data;
   2651c:	f8c0 8004 	str.w	r8, [r0, #4]
   26520:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   26522:	6803      	ldr	r3, [r0, #0]
   26524:	f003 0303 	and.w	r3, r3, #3
   26528:	b95d      	cbnz	r5, 26542 <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2652a:	6822      	ldr	r2, [r4, #0]
   2652c:	4313      	orrs	r3, r2
   2652e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26530:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   26532:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26534:	b973      	cbnz	r3, 26554 <queue_insert+0xe0>
	list->tail = node;
   26536:	6060      	str	r0, [r4, #4]
}
   26538:	e00c      	b.n	26554 <queue_insert+0xe0>
}
   2653a:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2653c:	f8c8 9000 	str.w	r9, [r8]
}
   26540:	e7ef      	b.n	26522 <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26542:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   26544:	f032 0203 	bics.w	r2, r2, #3
   26548:	d110      	bne.n	2656c <queue_insert+0xf8>
Z_GENLIST_APPEND(sflist, sfnode)
   2654a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2654c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2654e:	b93a      	cbnz	r2, 26560 <queue_insert+0xec>
	list->head = node;
   26550:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26554:	2104      	movs	r1, #4
   26556:	f104 0014 	add.w	r0, r4, #20
   2655a:	f006 faf0 	bl	2cb3e <z_handle_obj_poll_events>
   2655e:	e7ba      	b.n	264d6 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26560:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26562:	f003 0303 	and.w	r3, r3, #3
   26566:	4303      	orrs	r3, r0
   26568:	6013      	str	r3, [r2, #0]
   2656a:	e7e4      	b.n	26536 <queue_insert+0xc2>
   2656c:	4313      	orrs	r3, r2
   2656e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26570:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26572:	f003 0303 	and.w	r3, r3, #3
   26576:	4303      	orrs	r3, r0
   26578:	602b      	str	r3, [r5, #0]
}
   2657a:	e7eb      	b.n	26554 <queue_insert+0xe0>
   2657c:	0002e5ae 	.word	0x0002e5ae
   26580:	0002e574 	.word	0x0002e574

00026584 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   26584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26588:	4605      	mov	r5, r0
   2658a:	4690      	mov	r8, r2
   2658c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2658e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26592:	f04f 0320 	mov.w	r3, #32
   26596:	f3ef 8711 	mrs	r7, BASEPRI
   2659a:	f383 8812 	msr	BASEPRI_MAX, r3
   2659e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265a2:	4630      	mov	r0, r6
   265a4:	f7ff fda6 	bl	260f4 <z_spin_lock_valid>
   265a8:	b940      	cbnz	r0, 265bc <z_impl_k_queue_get+0x38>
   265aa:	4921      	ldr	r1, [pc, #132]	; (26630 <z_impl_k_queue_get+0xac>)
   265ac:	4821      	ldr	r0, [pc, #132]	; (26634 <z_impl_k_queue_get+0xb0>)
   265ae:	2281      	movs	r2, #129	; 0x81
   265b0:	f004 f978 	bl	2a8a4 <printk>
   265b4:	2181      	movs	r1, #129	; 0x81
   265b6:	481e      	ldr	r0, [pc, #120]	; (26630 <z_impl_k_queue_get+0xac>)
   265b8:	f004 fb0d 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   265bc:	4630      	mov	r0, r6
   265be:	f7ff fdb5 	bl	2612c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   265c2:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   265c4:	b314      	cbz	r4, 2660c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   265c6:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   265c8:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   265ca:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   265ce:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   265d0:	4620      	mov	r0, r4
   265d2:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   265d6:	602b      	str	r3, [r5, #0]
	list->tail = node;
   265d8:	bf08      	it	eq
   265da:	606b      	streq	r3, [r5, #4]
   265dc:	f006 f9e0 	bl	2c9a0 <z_queue_node_peek>
   265e0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265e2:	4630      	mov	r0, r6
   265e4:	f7ff fd94 	bl	26110 <z_spin_unlock_valid>
   265e8:	b940      	cbnz	r0, 265fc <z_impl_k_queue_get+0x78>
   265ea:	4911      	ldr	r1, [pc, #68]	; (26630 <z_impl_k_queue_get+0xac>)
   265ec:	4811      	ldr	r0, [pc, #68]	; (26634 <z_impl_k_queue_get+0xb0>)
   265ee:	22ac      	movs	r2, #172	; 0xac
   265f0:	f004 f958 	bl	2a8a4 <printk>
   265f4:	21ac      	movs	r1, #172	; 0xac
   265f6:	480e      	ldr	r0, [pc, #56]	; (26630 <z_impl_k_queue_get+0xac>)
   265f8:	f004 faed 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   265fc:	f387 8811 	msr	BASEPRI, r7
   26600:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26604:	4620      	mov	r0, r4
   26606:	b003      	add	sp, #12
   26608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2660c:	ea58 0309 	orrs.w	r3, r8, r9
   26610:	d0e7      	beq.n	265e2 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   26612:	4639      	mov	r1, r7
   26614:	4630      	mov	r0, r6
   26616:	e9cd 8900 	strd	r8, r9, [sp]
   2661a:	f105 020c 	add.w	r2, r5, #12
   2661e:	f000 ffe9 	bl	275f4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   26622:	2800      	cmp	r0, #0
   26624:	d1ee      	bne.n	26604 <z_impl_k_queue_get+0x80>
   26626:	4b04      	ldr	r3, [pc, #16]	; (26638 <z_impl_k_queue_get+0xb4>)
   26628:	689b      	ldr	r3, [r3, #8]
   2662a:	695c      	ldr	r4, [r3, #20]
   2662c:	e7ea      	b.n	26604 <z_impl_k_queue_get+0x80>
   2662e:	bf00      	nop
   26630:	0002e5ae 	.word	0x0002e5ae
   26634:	0002e574 	.word	0x0002e574
   26638:	2000d3fc 	.word	0x2000d3fc

0002663c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2663c:	b538      	push	{r3, r4, r5, lr}
   2663e:	4604      	mov	r4, r0
	__asm__ volatile(
   26640:	f04f 0320 	mov.w	r3, #32
   26644:	f3ef 8511 	mrs	r5, BASEPRI
   26648:	f383 8812 	msr	BASEPRI_MAX, r3
   2664c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26650:	4814      	ldr	r0, [pc, #80]	; (266a4 <z_impl_k_sem_give+0x68>)
   26652:	f7ff fd4f 	bl	260f4 <z_spin_lock_valid>
   26656:	b940      	cbnz	r0, 2666a <z_impl_k_sem_give+0x2e>
   26658:	4913      	ldr	r1, [pc, #76]	; (266a8 <z_impl_k_sem_give+0x6c>)
   2665a:	4814      	ldr	r0, [pc, #80]	; (266ac <z_impl_k_sem_give+0x70>)
   2665c:	2281      	movs	r2, #129	; 0x81
   2665e:	f004 f921 	bl	2a8a4 <printk>
   26662:	2181      	movs	r1, #129	; 0x81
   26664:	4810      	ldr	r0, [pc, #64]	; (266a8 <z_impl_k_sem_give+0x6c>)
   26666:	f004 fab6 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2666a:	480e      	ldr	r0, [pc, #56]	; (266a4 <z_impl_k_sem_give+0x68>)
   2666c:	f7ff fd5e 	bl	2612c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   26670:	4620      	mov	r0, r4
   26672:	f001 f921 	bl	278b8 <z_unpend_first_thread>

	if (thread != NULL) {
   26676:	b148      	cbz	r0, 2668c <z_impl_k_sem_give+0x50>
   26678:	2200      	movs	r2, #0
   2667a:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2667c:	f000 fe52 	bl	27324 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   26680:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   26682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   26686:	4807      	ldr	r0, [pc, #28]	; (266a4 <z_impl_k_sem_give+0x68>)
   26688:	f000 bc14 	b.w	26eb4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2668c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   26690:	429a      	cmp	r2, r3
   26692:	bf18      	it	ne
   26694:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   26696:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   26698:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2669a:	f104 0010 	add.w	r0, r4, #16
   2669e:	f006 fa4e 	bl	2cb3e <z_handle_obj_poll_events>
}
   266a2:	e7ed      	b.n	26680 <z_impl_k_sem_give+0x44>
   266a4:	2000d428 	.word	0x2000d428
   266a8:	0002e5ae 	.word	0x0002e5ae
   266ac:	0002e574 	.word	0x0002e574

000266b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   266b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266b2:	4604      	mov	r4, r0
   266b4:	4616      	mov	r6, r2
   266b6:	461f      	mov	r7, r3
   266b8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   266bc:	b15b      	cbz	r3, 266d6 <z_impl_k_sem_take+0x26>
   266be:	ea56 0307 	orrs.w	r3, r6, r7
   266c2:	d008      	beq.n	266d6 <z_impl_k_sem_take+0x26>
   266c4:	492b      	ldr	r1, [pc, #172]	; (26774 <z_impl_k_sem_take+0xc4>)
   266c6:	482c      	ldr	r0, [pc, #176]	; (26778 <z_impl_k_sem_take+0xc8>)
   266c8:	2279      	movs	r2, #121	; 0x79
   266ca:	f004 f8eb 	bl	2a8a4 <printk>
   266ce:	2179      	movs	r1, #121	; 0x79
   266d0:	4828      	ldr	r0, [pc, #160]	; (26774 <z_impl_k_sem_take+0xc4>)
   266d2:	f004 fa80 	bl	2abd6 <assert_post_action>
   266d6:	f04f 0320 	mov.w	r3, #32
   266da:	f3ef 8511 	mrs	r5, BASEPRI
   266de:	f383 8812 	msr	BASEPRI_MAX, r3
   266e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   266e6:	4825      	ldr	r0, [pc, #148]	; (2677c <z_impl_k_sem_take+0xcc>)
   266e8:	f7ff fd04 	bl	260f4 <z_spin_lock_valid>
   266ec:	b940      	cbnz	r0, 26700 <z_impl_k_sem_take+0x50>
   266ee:	4924      	ldr	r1, [pc, #144]	; (26780 <z_impl_k_sem_take+0xd0>)
   266f0:	4821      	ldr	r0, [pc, #132]	; (26778 <z_impl_k_sem_take+0xc8>)
   266f2:	2281      	movs	r2, #129	; 0x81
   266f4:	f004 f8d6 	bl	2a8a4 <printk>
   266f8:	2181      	movs	r1, #129	; 0x81
   266fa:	4821      	ldr	r0, [pc, #132]	; (26780 <z_impl_k_sem_take+0xd0>)
   266fc:	f004 fa6b 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26700:	481e      	ldr	r0, [pc, #120]	; (2677c <z_impl_k_sem_take+0xcc>)
   26702:	f7ff fd13 	bl	2612c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   26706:	68a3      	ldr	r3, [r4, #8]
   26708:	b1ab      	cbz	r3, 26736 <z_impl_k_sem_take+0x86>
		sem->count--;
   2670a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2670c:	481b      	ldr	r0, [pc, #108]	; (2677c <z_impl_k_sem_take+0xcc>)
   2670e:	60a3      	str	r3, [r4, #8]
   26710:	f7ff fcfe 	bl	26110 <z_spin_unlock_valid>
   26714:	b940      	cbnz	r0, 26728 <z_impl_k_sem_take+0x78>
   26716:	491a      	ldr	r1, [pc, #104]	; (26780 <z_impl_k_sem_take+0xd0>)
   26718:	4817      	ldr	r0, [pc, #92]	; (26778 <z_impl_k_sem_take+0xc8>)
   2671a:	22ac      	movs	r2, #172	; 0xac
   2671c:	f004 f8c2 	bl	2a8a4 <printk>
   26720:	21ac      	movs	r1, #172	; 0xac
   26722:	4817      	ldr	r0, [pc, #92]	; (26780 <z_impl_k_sem_take+0xd0>)
   26724:	f004 fa57 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26728:	f385 8811 	msr	BASEPRI, r5
   2672c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   26730:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   26732:	b003      	add	sp, #12
   26734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26736:	ea56 0307 	orrs.w	r3, r6, r7
   2673a:	d113      	bne.n	26764 <z_impl_k_sem_take+0xb4>
   2673c:	480f      	ldr	r0, [pc, #60]	; (2677c <z_impl_k_sem_take+0xcc>)
   2673e:	f7ff fce7 	bl	26110 <z_spin_unlock_valid>
   26742:	b940      	cbnz	r0, 26756 <z_impl_k_sem_take+0xa6>
   26744:	490e      	ldr	r1, [pc, #56]	; (26780 <z_impl_k_sem_take+0xd0>)
   26746:	480c      	ldr	r0, [pc, #48]	; (26778 <z_impl_k_sem_take+0xc8>)
   26748:	22ac      	movs	r2, #172	; 0xac
   2674a:	f004 f8ab 	bl	2a8a4 <printk>
   2674e:	21ac      	movs	r1, #172	; 0xac
   26750:	480b      	ldr	r0, [pc, #44]	; (26780 <z_impl_k_sem_take+0xd0>)
   26752:	f004 fa40 	bl	2abd6 <assert_post_action>
   26756:	f385 8811 	msr	BASEPRI, r5
   2675a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2675e:	f06f 000f 	mvn.w	r0, #15
   26762:	e7e6      	b.n	26732 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   26764:	4622      	mov	r2, r4
   26766:	4629      	mov	r1, r5
   26768:	e9cd 6700 	strd	r6, r7, [sp]
   2676c:	4803      	ldr	r0, [pc, #12]	; (2677c <z_impl_k_sem_take+0xcc>)
   2676e:	f000 ff41 	bl	275f4 <z_pend_curr>
	return ret;
   26772:	e7de      	b.n	26732 <z_impl_k_sem_take+0x82>
   26774:	00030c48 	.word	0x00030c48
   26778:	0002e574 	.word	0x0002e574
   2677c:	2000d428 	.word	0x2000d428
   26780:	0002e5ae 	.word	0x0002e5ae

00026784 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   26784:	b570      	push	{r4, r5, r6, lr}
   26786:	4604      	mov	r4, r0
	__asm__ volatile(
   26788:	f04f 0320 	mov.w	r3, #32
   2678c:	f3ef 8511 	mrs	r5, BASEPRI
   26790:	f383 8812 	msr	BASEPRI_MAX, r3
   26794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26798:	4812      	ldr	r0, [pc, #72]	; (267e4 <z_impl_k_sem_reset+0x60>)
   2679a:	f7ff fcab 	bl	260f4 <z_spin_lock_valid>
   2679e:	b940      	cbnz	r0, 267b2 <z_impl_k_sem_reset+0x2e>
   267a0:	4911      	ldr	r1, [pc, #68]	; (267e8 <z_impl_k_sem_reset+0x64>)
   267a2:	4812      	ldr	r0, [pc, #72]	; (267ec <z_impl_k_sem_reset+0x68>)
   267a4:	2281      	movs	r2, #129	; 0x81
   267a6:	f004 f87d 	bl	2a8a4 <printk>
   267aa:	2181      	movs	r1, #129	; 0x81
   267ac:	480e      	ldr	r0, [pc, #56]	; (267e8 <z_impl_k_sem_reset+0x64>)
   267ae:	f004 fa12 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   267b2:	480c      	ldr	r0, [pc, #48]	; (267e4 <z_impl_k_sem_reset+0x60>)
   267b4:	f7ff fcba 	bl	2612c <z_spin_lock_set_owner>
   267b8:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   267bc:	4620      	mov	r0, r4
   267be:	f001 f87b 	bl	278b8 <z_unpend_first_thread>
		if (thread == NULL) {
   267c2:	b118      	cbz	r0, 267cc <z_impl_k_sem_reset+0x48>
   267c4:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   267c6:	f000 fdad 	bl	27324 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   267ca:	e7f7      	b.n	267bc <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   267cc:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   267ce:	2102      	movs	r1, #2
   267d0:	f104 0010 	add.w	r0, r4, #16
   267d4:	f006 f9b3 	bl	2cb3e <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   267d8:	4629      	mov	r1, r5
}
   267da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   267de:	4801      	ldr	r0, [pc, #4]	; (267e4 <z_impl_k_sem_reset+0x60>)
   267e0:	f000 bb68 	b.w	26eb4 <z_reschedule>
   267e4:	2000d428 	.word	0x2000d428
   267e8:	0002e5ae 	.word	0x0002e5ae
   267ec:	0002e574 	.word	0x0002e574

000267f0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   267f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267f4:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267f6:	4e73      	ldr	r6, [pc, #460]	; (269c4 <work_queue_main+0x1d4>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   267f8:	4f73      	ldr	r7, [pc, #460]	; (269c8 <work_queue_main+0x1d8>)
{
   267fa:	b085      	sub	sp, #20
   267fc:	f04f 0320 	mov.w	r3, #32
   26800:	f3ef 8811 	mrs	r8, BASEPRI
   26804:	f383 8812 	msr	BASEPRI_MAX, r3
   26808:	f3bf 8f6f 	isb	sy
   2680c:	4630      	mov	r0, r6
   2680e:	f7ff fc71 	bl	260f4 <z_spin_lock_valid>
   26812:	b940      	cbnz	r0, 26826 <work_queue_main+0x36>
   26814:	496d      	ldr	r1, [pc, #436]	; (269cc <work_queue_main+0x1dc>)
   26816:	486e      	ldr	r0, [pc, #440]	; (269d0 <work_queue_main+0x1e0>)
   26818:	2281      	movs	r2, #129	; 0x81
   2681a:	f004 f843 	bl	2a8a4 <printk>
   2681e:	2181      	movs	r1, #129	; 0x81
   26820:	486a      	ldr	r0, [pc, #424]	; (269cc <work_queue_main+0x1dc>)
   26822:	f004 f9d8 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26826:	4630      	mov	r0, r6
   26828:	f7ff fc80 	bl	2612c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   2682c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   26830:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   26834:	b9ad      	cbnz	r5, 26862 <work_queue_main+0x72>
	*flagp &= ~BIT(bit);
   26836:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2683a:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   2683c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   26840:	f100 8082 	bmi.w	26948 <work_queue_main+0x158>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   26844:	2300      	movs	r3, #0
   26846:	f04f 32ff 	mov.w	r2, #4294967295
   2684a:	9302      	str	r3, [sp, #8]
   2684c:	f04f 33ff 	mov.w	r3, #4294967295
   26850:	4641      	mov	r1, r8
   26852:	e9cd 2300 	strd	r2, r3, [sp]
   26856:	4630      	mov	r0, r6
   26858:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2685c:	f001 faaa 	bl	27db4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   26860:	e7cc      	b.n	267fc <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26862:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   26866:	682a      	ldr	r2, [r5, #0]
   26868:	428d      	cmp	r5, r1
	list->head = node;
   2686a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2686e:	d101      	bne.n	26874 <work_queue_main+0x84>
	list->tail = node;
   26870:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   26874:	f043 0302 	orr.w	r3, r3, #2
   26878:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2687c:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2687e:	4630      	mov	r0, r6
   26880:	f023 0304 	bic.w	r3, r3, #4
   26884:	f043 0301 	orr.w	r3, r3, #1
   26888:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2688a:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2688e:	f7ff fc3f 	bl	26110 <z_spin_unlock_valid>
   26892:	b940      	cbnz	r0, 268a6 <work_queue_main+0xb6>
   26894:	494d      	ldr	r1, [pc, #308]	; (269cc <work_queue_main+0x1dc>)
   26896:	484e      	ldr	r0, [pc, #312]	; (269d0 <work_queue_main+0x1e0>)
   26898:	22ac      	movs	r2, #172	; 0xac
   2689a:	f004 f803 	bl	2a8a4 <printk>
   2689e:	21ac      	movs	r1, #172	; 0xac
   268a0:	484a      	ldr	r0, [pc, #296]	; (269cc <work_queue_main+0x1dc>)
   268a2:	f004 f998 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   268a6:	f388 8811 	msr	BASEPRI, r8
   268aa:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   268ae:	f1b9 0f00 	cmp.w	r9, #0
   268b2:	d10a      	bne.n	268ca <work_queue_main+0xda>
   268b4:	4947      	ldr	r1, [pc, #284]	; (269d4 <work_queue_main+0x1e4>)
   268b6:	4846      	ldr	r0, [pc, #280]	; (269d0 <work_queue_main+0x1e0>)
   268b8:	f44f 7222 	mov.w	r2, #648	; 0x288
   268bc:	f003 fff2 	bl	2a8a4 <printk>
   268c0:	f44f 7122 	mov.w	r1, #648	; 0x288
   268c4:	4843      	ldr	r0, [pc, #268]	; (269d4 <work_queue_main+0x1e4>)
   268c6:	f004 f986 	bl	2abd6 <assert_post_action>
		handler(work);
   268ca:	4628      	mov	r0, r5
   268cc:	47c8      	blx	r9
	__asm__ volatile(
   268ce:	f04f 0320 	mov.w	r3, #32
   268d2:	f3ef 8a11 	mrs	sl, BASEPRI
   268d6:	f383 8812 	msr	BASEPRI_MAX, r3
   268da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   268de:	4630      	mov	r0, r6
   268e0:	f7ff fc08 	bl	260f4 <z_spin_lock_valid>
   268e4:	b940      	cbnz	r0, 268f8 <work_queue_main+0x108>
   268e6:	4939      	ldr	r1, [pc, #228]	; (269cc <work_queue_main+0x1dc>)
   268e8:	4839      	ldr	r0, [pc, #228]	; (269d0 <work_queue_main+0x1e0>)
   268ea:	2281      	movs	r2, #129	; 0x81
   268ec:	f003 ffda 	bl	2a8a4 <printk>
   268f0:	2181      	movs	r1, #129	; 0x81
   268f2:	4836      	ldr	r0, [pc, #216]	; (269cc <work_queue_main+0x1dc>)
   268f4:	f004 f96f 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   268f8:	4630      	mov	r0, r6
   268fa:	f7ff fc17 	bl	2612c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   268fe:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26900:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   26902:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26906:	d429      	bmi.n	2695c <work_queue_main+0x16c>
	*flagp &= ~BIT(bit);
   26908:	60ea      	str	r2, [r5, #12]
   2690a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2690e:	4630      	mov	r0, r6
   26910:	f023 0302 	bic.w	r3, r3, #2
   26914:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   26918:	f3c3 2500 	ubfx	r5, r3, #8, #1
   2691c:	f7ff fbf8 	bl	26110 <z_spin_unlock_valid>
   26920:	b940      	cbnz	r0, 26934 <work_queue_main+0x144>
   26922:	492a      	ldr	r1, [pc, #168]	; (269cc <work_queue_main+0x1dc>)
   26924:	482a      	ldr	r0, [pc, #168]	; (269d0 <work_queue_main+0x1e0>)
   26926:	22ac      	movs	r2, #172	; 0xac
   26928:	f003 ffbc 	bl	2a8a4 <printk>
   2692c:	21ac      	movs	r1, #172	; 0xac
   2692e:	4827      	ldr	r0, [pc, #156]	; (269cc <work_queue_main+0x1dc>)
   26930:	f004 f951 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26934:	f38a 8811 	msr	BASEPRI, sl
   26938:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2693c:	2d00      	cmp	r5, #0
   2693e:	f47f af5d 	bne.w	267fc <work_queue_main+0xc>
	z_impl_k_yield();
   26942:	f001 f803 	bl	2794c <z_impl_k_yield>
}
   26946:	e759      	b.n	267fc <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26948:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2694c:	2200      	movs	r2, #0
   2694e:	2101      	movs	r1, #1
   26950:	4628      	mov	r0, r5
   26952:	f001 f9e9 	bl	27d28 <z_sched_wake>
   26956:	2800      	cmp	r0, #0
   26958:	d1f8      	bne.n	2694c <work_queue_main+0x15c>
   2695a:	e773      	b.n	26844 <work_queue_main+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2695c:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2695e:	f023 0303 	bic.w	r3, r3, #3
   26962:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26964:	2800      	cmp	r0, #0
   26966:	d0d0      	beq.n	2690a <work_queue_main+0x11a>
	return node->next;
   26968:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2696a:	f04f 0900 	mov.w	r9, #0
   2696e:	2b00      	cmp	r3, #0
   26970:	bf38      	it	cc
   26972:	2300      	movcc	r3, #0
	parent->next = child;
   26974:	46cb      	mov	fp, r9
   26976:	4698      	mov	r8, r3
		if (wc->work == work) {
   26978:	6843      	ldr	r3, [r0, #4]
   2697a:	4602      	mov	r2, r0
   2697c:	429d      	cmp	r5, r3
   2697e:	d10d      	bne.n	2699c <work_queue_main+0x1ac>
Z_GENLIST_REMOVE(slist, snode)
   26980:	6802      	ldr	r2, [r0, #0]
   26982:	f1b9 0f00 	cmp.w	r9, #0
   26986:	d115      	bne.n	269b4 <work_queue_main+0x1c4>
   26988:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2698a:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2698c:	4283      	cmp	r3, r0
   2698e:	d100      	bne.n	26992 <work_queue_main+0x1a2>
	list->tail = node;
   26990:	607a      	str	r2, [r7, #4]
	parent->next = child;
   26992:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   26996:	f7ff fe51 	bl	2663c <z_impl_k_sem_give>
}
   2699a:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2699c:	f1b8 0f00 	cmp.w	r8, #0
   269a0:	d0b3      	beq.n	2690a <work_queue_main+0x11a>
	return node->next;
   269a2:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   269a6:	4640      	mov	r0, r8
   269a8:	2b00      	cmp	r3, #0
   269aa:	bf38      	it	cc
   269ac:	2300      	movcc	r3, #0
   269ae:	4691      	mov	r9, r2
   269b0:	4698      	mov	r8, r3
   269b2:	e7e1      	b.n	26978 <work_queue_main+0x188>
	parent->next = child;
   269b4:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   269b8:	687b      	ldr	r3, [r7, #4]
   269ba:	4283      	cmp	r3, r0
	list->tail = node;
   269bc:	bf08      	it	eq
   269be:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   269c2:	e7e6      	b.n	26992 <work_queue_main+0x1a2>
   269c4:	2000d42c 	.word	0x2000d42c
   269c8:	2000d430 	.word	0x2000d430
   269cc:	0002e5ae 	.word	0x0002e5ae
   269d0:	0002e574 	.word	0x0002e574
   269d4:	00030c68 	.word	0x00030c68

000269d8 <submit_to_queue_locked>:
{
   269d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   269da:	68c3      	ldr	r3, [r0, #12]
{
   269dc:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   269de:	079a      	lsls	r2, r3, #30
{
   269e0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   269e2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   269e6:	d42a      	bmi.n	26a3e <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   269e8:	075f      	lsls	r7, r3, #29
   269ea:	d42a      	bmi.n	26a42 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   269ec:	680a      	ldr	r2, [r1, #0]
   269ee:	b90a      	cbnz	r2, 269f4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   269f0:	6882      	ldr	r2, [r0, #8]
   269f2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   269f4:	07d8      	lsls	r0, r3, #31
   269f6:	d527      	bpl.n	26a48 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   269f8:	68a3      	ldr	r3, [r4, #8]
   269fa:	b953      	cbnz	r3, 26a12 <submit_to_queue_locked+0x3a>
   269fc:	4923      	ldr	r1, [pc, #140]	; (26a8c <submit_to_queue_locked+0xb4>)
   269fe:	4824      	ldr	r0, [pc, #144]	; (26a90 <submit_to_queue_locked+0xb8>)
   26a00:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   26a04:	f003 ff4e 	bl	2a8a4 <printk>
   26a08:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   26a0c:	481f      	ldr	r0, [pc, #124]	; (26a8c <submit_to_queue_locked+0xb4>)
   26a0e:	f004 f8e2 	bl	2abd6 <assert_post_action>
			ret = 2;
   26a12:	2502      	movs	r5, #2
			*queuep = work->queue;
   26a14:	68a3      	ldr	r3, [r4, #8]
   26a16:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   26a18:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   26a1a:	b38f      	cbz	r7, 26a80 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26a1c:	4b1d      	ldr	r3, [pc, #116]	; (26a94 <submit_to_queue_locked+0xbc>)
   26a1e:	689b      	ldr	r3, [r3, #8]
   26a20:	42bb      	cmp	r3, r7
   26a22:	d113      	bne.n	26a4c <submit_to_queue_locked+0x74>
   26a24:	f005 ffa1 	bl	2c96a <k_is_in_isr>
   26a28:	f080 0001 	eor.w	r0, r0, #1
   26a2c:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   26a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26a32:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   26a34:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26a38:	d525      	bpl.n	26a86 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   26a3a:	b14a      	cbz	r2, 26a50 <submit_to_queue_locked+0x78>
   26a3c:	b950      	cbnz	r0, 26a54 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   26a3e:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   26a42:	2300      	movs	r3, #0
   26a44:	6033      	str	r3, [r6, #0]
	return ret;
   26a46:	e015      	b.n	26a74 <submit_to_queue_locked+0x9c>
		ret = 1;
   26a48:	2501      	movs	r5, #1
   26a4a:	e7e5      	b.n	26a18 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26a4c:	2000      	movs	r0, #0
   26a4e:	e7ee      	b.n	26a2e <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   26a50:	071b      	lsls	r3, r3, #28
   26a52:	d4f4      	bmi.n	26a3e <submit_to_queue_locked+0x66>
	parent->next = child;
   26a54:	2300      	movs	r3, #0
   26a56:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   26a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   26a5c:	b963      	cbnz	r3, 26a78 <submit_to_queue_locked+0xa0>
	list->head = node;
   26a5e:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   26a62:	4638      	mov	r0, r7
   26a64:	f005 ffc3 	bl	2c9ee <notify_queue_locked>
	*flagp |= BIT(bit);
   26a68:	68e3      	ldr	r3, [r4, #12]
   26a6a:	f043 0304 	orr.w	r3, r3, #4
   26a6e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   26a70:	6833      	ldr	r3, [r6, #0]
   26a72:	60a3      	str	r3, [r4, #8]
}
   26a74:	4628      	mov	r0, r5
   26a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   26a78:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26a7a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   26a7e:	e7f0      	b.n	26a62 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   26a80:	f06f 0515 	mvn.w	r5, #21
   26a84:	e7dd      	b.n	26a42 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   26a86:	f06f 0512 	mvn.w	r5, #18
   26a8a:	e7da      	b.n	26a42 <submit_to_queue_locked+0x6a>
   26a8c:	00030c68 	.word	0x00030c68
   26a90:	0002e574 	.word	0x0002e574
   26a94:	2000d3fc 	.word	0x2000d3fc

00026a98 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   26a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26a9a:	4604      	mov	r4, r0
	__asm__ volatile(
   26a9c:	f04f 0320 	mov.w	r3, #32
   26aa0:	f3ef 8511 	mrs	r5, BASEPRI
   26aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   26aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26aac:	4819      	ldr	r0, [pc, #100]	; (26b14 <work_timeout+0x7c>)
   26aae:	f7ff fb21 	bl	260f4 <z_spin_lock_valid>
   26ab2:	b940      	cbnz	r0, 26ac6 <work_timeout+0x2e>
   26ab4:	4918      	ldr	r1, [pc, #96]	; (26b18 <work_timeout+0x80>)
   26ab6:	4819      	ldr	r0, [pc, #100]	; (26b1c <work_timeout+0x84>)
   26ab8:	2281      	movs	r2, #129	; 0x81
   26aba:	f003 fef3 	bl	2a8a4 <printk>
   26abe:	2181      	movs	r1, #129	; 0x81
   26ac0:	4815      	ldr	r0, [pc, #84]	; (26b18 <work_timeout+0x80>)
   26ac2:	f004 f888 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26ac6:	4813      	ldr	r0, [pc, #76]	; (26b14 <work_timeout+0x7c>)
   26ac8:	f7ff fb30 	bl	2612c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   26acc:	2300      	movs	r3, #0
   26ace:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   26ad0:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   26ad4:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26ad8:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   26ada:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26ade:	d506      	bpl.n	26aee <work_timeout+0x56>
		queue = dw->queue;
   26ae0:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   26ae2:	a901      	add	r1, sp, #4
   26ae4:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   26ae8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   26aea:	f7ff ff75 	bl	269d8 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26aee:	4809      	ldr	r0, [pc, #36]	; (26b14 <work_timeout+0x7c>)
   26af0:	f7ff fb0e 	bl	26110 <z_spin_unlock_valid>
   26af4:	b940      	cbnz	r0, 26b08 <work_timeout+0x70>
   26af6:	4908      	ldr	r1, [pc, #32]	; (26b18 <work_timeout+0x80>)
   26af8:	4808      	ldr	r0, [pc, #32]	; (26b1c <work_timeout+0x84>)
   26afa:	22ac      	movs	r2, #172	; 0xac
   26afc:	f003 fed2 	bl	2a8a4 <printk>
   26b00:	21ac      	movs	r1, #172	; 0xac
   26b02:	4805      	ldr	r0, [pc, #20]	; (26b18 <work_timeout+0x80>)
   26b04:	f004 f867 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26b08:	f385 8811 	msr	BASEPRI, r5
   26b0c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   26b10:	b003      	add	sp, #12
   26b12:	bd30      	pop	{r4, r5, pc}
   26b14:	2000d42c 	.word	0x2000d42c
   26b18:	0002e5ae 	.word	0x0002e5ae
   26b1c:	0002e574 	.word	0x0002e574

00026b20 <k_work_submit_to_queue>:
{
   26b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   26b22:	460c      	mov	r4, r1
{
   26b24:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   26b26:	b951      	cbnz	r1, 26b3e <k_work_submit_to_queue+0x1e>
   26b28:	4921      	ldr	r1, [pc, #132]	; (26bb0 <k_work_submit_to_queue+0x90>)
   26b2a:	4822      	ldr	r0, [pc, #136]	; (26bb4 <k_work_submit_to_queue+0x94>)
   26b2c:	f240 1269 	movw	r2, #361	; 0x169
   26b30:	f003 feb8 	bl	2a8a4 <printk>
   26b34:	f240 1169 	movw	r1, #361	; 0x169
   26b38:	481d      	ldr	r0, [pc, #116]	; (26bb0 <k_work_submit_to_queue+0x90>)
   26b3a:	f004 f84c 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26b3e:	f04f 0320 	mov.w	r3, #32
   26b42:	f3ef 8511 	mrs	r5, BASEPRI
   26b46:	f383 8812 	msr	BASEPRI_MAX, r3
   26b4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b4e:	481a      	ldr	r0, [pc, #104]	; (26bb8 <k_work_submit_to_queue+0x98>)
   26b50:	f7ff fad0 	bl	260f4 <z_spin_lock_valid>
   26b54:	b940      	cbnz	r0, 26b68 <k_work_submit_to_queue+0x48>
   26b56:	4919      	ldr	r1, [pc, #100]	; (26bbc <k_work_submit_to_queue+0x9c>)
   26b58:	4816      	ldr	r0, [pc, #88]	; (26bb4 <k_work_submit_to_queue+0x94>)
   26b5a:	2281      	movs	r2, #129	; 0x81
   26b5c:	f003 fea2 	bl	2a8a4 <printk>
   26b60:	2181      	movs	r1, #129	; 0x81
   26b62:	4816      	ldr	r0, [pc, #88]	; (26bbc <k_work_submit_to_queue+0x9c>)
   26b64:	f004 f837 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26b68:	4813      	ldr	r0, [pc, #76]	; (26bb8 <k_work_submit_to_queue+0x98>)
   26b6a:	f7ff fadf 	bl	2612c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   26b6e:	4620      	mov	r0, r4
   26b70:	a901      	add	r1, sp, #4
   26b72:	f7ff ff31 	bl	269d8 <submit_to_queue_locked>
   26b76:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b78:	480f      	ldr	r0, [pc, #60]	; (26bb8 <k_work_submit_to_queue+0x98>)
   26b7a:	f7ff fac9 	bl	26110 <z_spin_unlock_valid>
   26b7e:	b940      	cbnz	r0, 26b92 <k_work_submit_to_queue+0x72>
   26b80:	490e      	ldr	r1, [pc, #56]	; (26bbc <k_work_submit_to_queue+0x9c>)
   26b82:	480c      	ldr	r0, [pc, #48]	; (26bb4 <k_work_submit_to_queue+0x94>)
   26b84:	22ac      	movs	r2, #172	; 0xac
   26b86:	f003 fe8d 	bl	2a8a4 <printk>
   26b8a:	21ac      	movs	r1, #172	; 0xac
   26b8c:	480b      	ldr	r0, [pc, #44]	; (26bbc <k_work_submit_to_queue+0x9c>)
   26b8e:	f004 f822 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26b92:	f385 8811 	msr	BASEPRI, r5
   26b96:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   26b9a:	2c00      	cmp	r4, #0
   26b9c:	dd04      	ble.n	26ba8 <k_work_submit_to_queue+0x88>
	return z_impl_k_is_preempt_thread();
   26b9e:	f001 f81f 	bl	27be0 <z_impl_k_is_preempt_thread>
   26ba2:	b108      	cbz	r0, 26ba8 <k_work_submit_to_queue+0x88>
	z_impl_k_yield();
   26ba4:	f000 fed2 	bl	2794c <z_impl_k_yield>
}
   26ba8:	4620      	mov	r0, r4
   26baa:	b003      	add	sp, #12
   26bac:	bd30      	pop	{r4, r5, pc}
   26bae:	bf00      	nop
   26bb0:	00030c68 	.word	0x00030c68
   26bb4:	0002e574 	.word	0x0002e574
   26bb8:	2000d42c 	.word	0x2000d42c
   26bbc:	0002e5ae 	.word	0x0002e5ae

00026bc0 <k_work_submit>:
{
   26bc0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26bc2:	4801      	ldr	r0, [pc, #4]	; (26bc8 <k_work_submit+0x8>)
   26bc4:	f7ff bfac 	b.w	26b20 <k_work_submit_to_queue>
   26bc8:	2000ccd8 	.word	0x2000ccd8

00026bcc <k_work_queue_start>:
{
   26bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26bd0:	b088      	sub	sp, #32
   26bd2:	460e      	mov	r6, r1
   26bd4:	4617      	mov	r7, r2
   26bd6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   26bd8:	4604      	mov	r4, r0
{
   26bda:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   26bdc:	b950      	cbnz	r0, 26bf4 <k_work_queue_start+0x28>
   26bde:	492d      	ldr	r1, [pc, #180]	; (26c94 <k_work_queue_start+0xc8>)
   26be0:	482d      	ldr	r0, [pc, #180]	; (26c98 <k_work_queue_start+0xcc>)
   26be2:	f240 22b5 	movw	r2, #693	; 0x2b5
   26be6:	f003 fe5d 	bl	2a8a4 <printk>
   26bea:	f240 21b5 	movw	r1, #693	; 0x2b5
   26bee:	4829      	ldr	r0, [pc, #164]	; (26c94 <k_work_queue_start+0xc8>)
   26bf0:	f003 fff1 	bl	2abd6 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   26bf4:	b956      	cbnz	r6, 26c0c <k_work_queue_start+0x40>
   26bf6:	4927      	ldr	r1, [pc, #156]	; (26c94 <k_work_queue_start+0xc8>)
   26bf8:	4827      	ldr	r0, [pc, #156]	; (26c98 <k_work_queue_start+0xcc>)
   26bfa:	f240 22b6 	movw	r2, #694	; 0x2b6
   26bfe:	f003 fe51 	bl	2a8a4 <printk>
   26c02:	f240 21b6 	movw	r1, #694	; 0x2b6
   26c06:	4823      	ldr	r0, [pc, #140]	; (26c94 <k_work_queue_start+0xc8>)
   26c08:	f003 ffe5 	bl	2abd6 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   26c0c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26c10:	07db      	lsls	r3, r3, #31
   26c12:	d50a      	bpl.n	26c2a <k_work_queue_start+0x5e>
   26c14:	491f      	ldr	r1, [pc, #124]	; (26c94 <k_work_queue_start+0xc8>)
   26c16:	4820      	ldr	r0, [pc, #128]	; (26c98 <k_work_queue_start+0xcc>)
   26c18:	f240 22b7 	movw	r2, #695	; 0x2b7
   26c1c:	f003 fe42 	bl	2a8a4 <printk>
   26c20:	f240 21b7 	movw	r1, #695	; 0x2b7
   26c24:	481b      	ldr	r0, [pc, #108]	; (26c94 <k_work_queue_start+0xc8>)
   26c26:	f003 ffd6 	bl	2abd6 <assert_post_action>
	list->head = NULL;
   26c2a:	2300      	movs	r3, #0
	list->tail = NULL;
   26c2c:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   26c30:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   26c34:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   26c38:	f104 0390 	add.w	r3, r4, #144	; 0x90
   26c3c:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   26c40:	b32d      	cbz	r5, 26c8e <k_work_queue_start+0xc2>
   26c42:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26c44:	f240 1101 	movw	r1, #257	; 0x101
   26c48:	2b00      	cmp	r3, #0
   26c4a:	bf08      	it	eq
   26c4c:	2101      	moveq	r1, #1
	*flagp = flags;
   26c4e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26c52:	f04f 32ff 	mov.w	r2, #4294967295
   26c56:	f04f 33ff 	mov.w	r3, #4294967295
   26c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   26c5e:	2200      	movs	r2, #0
   26c60:	4631      	mov	r1, r6
   26c62:	e9cd 8203 	strd	r8, r2, [sp, #12]
   26c66:	e9cd 2201 	strd	r2, r2, [sp, #4]
   26c6a:	4620      	mov	r0, r4
   26c6c:	463a      	mov	r2, r7
   26c6e:	4b0b      	ldr	r3, [pc, #44]	; (26c9c <k_work_queue_start+0xd0>)
   26c70:	9400      	str	r4, [sp, #0]
   26c72:	f7ff f979 	bl	25f68 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   26c76:	b125      	cbz	r5, 26c82 <k_work_queue_start+0xb6>
   26c78:	6829      	ldr	r1, [r5, #0]
   26c7a:	b111      	cbz	r1, 26c82 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   26c7c:	4620      	mov	r0, r4
   26c7e:	f005 fe7a 	bl	2c976 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26c82:	4620      	mov	r0, r4
}
   26c84:	b008      	add	sp, #32
   26c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26c8a:	f005 be79 	b.w	2c980 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26c8e:	2101      	movs	r1, #1
   26c90:	e7dd      	b.n	26c4e <k_work_queue_start+0x82>
   26c92:	bf00      	nop
   26c94:	00030c68 	.word	0x00030c68
   26c98:	0002e574 	.word	0x0002e574
   26c9c:	000267f1 	.word	0x000267f1

00026ca0 <k_work_delayable_busy_get>:
{
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
}

int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
{
   26ca0:	b538      	push	{r3, r4, r5, lr}
   26ca2:	4604      	mov	r4, r0
	__asm__ volatile(
   26ca4:	f04f 0320 	mov.w	r3, #32
   26ca8:	f3ef 8511 	mrs	r5, BASEPRI
   26cac:	f383 8812 	msr	BASEPRI_MAX, r3
   26cb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26cb4:	4812      	ldr	r0, [pc, #72]	; (26d00 <k_work_delayable_busy_get+0x60>)
   26cb6:	f7ff fa1d 	bl	260f4 <z_spin_lock_valid>
   26cba:	b940      	cbnz	r0, 26cce <k_work_delayable_busy_get+0x2e>
   26cbc:	4911      	ldr	r1, [pc, #68]	; (26d04 <k_work_delayable_busy_get+0x64>)
   26cbe:	4812      	ldr	r0, [pc, #72]	; (26d08 <k_work_delayable_busy_get+0x68>)
   26cc0:	2281      	movs	r2, #129	; 0x81
   26cc2:	f003 fdef 	bl	2a8a4 <printk>
   26cc6:	2181      	movs	r1, #129	; 0x81
   26cc8:	480e      	ldr	r0, [pc, #56]	; (26d04 <k_work_delayable_busy_get+0x64>)
   26cca:	f003 ff84 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26cce:	480c      	ldr	r0, [pc, #48]	; (26d00 <k_work_delayable_busy_get+0x60>)
   26cd0:	f7ff fa2c 	bl	2612c <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   26cd4:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cd6:	480a      	ldr	r0, [pc, #40]	; (26d00 <k_work_delayable_busy_get+0x60>)
   26cd8:	f004 040f 	and.w	r4, r4, #15
   26cdc:	f7ff fa18 	bl	26110 <z_spin_unlock_valid>
   26ce0:	b940      	cbnz	r0, 26cf4 <k_work_delayable_busy_get+0x54>
   26ce2:	4908      	ldr	r1, [pc, #32]	; (26d04 <k_work_delayable_busy_get+0x64>)
   26ce4:	4808      	ldr	r0, [pc, #32]	; (26d08 <k_work_delayable_busy_get+0x68>)
   26ce6:	22ac      	movs	r2, #172	; 0xac
   26ce8:	f003 fddc 	bl	2a8a4 <printk>
   26cec:	21ac      	movs	r1, #172	; 0xac
   26cee:	4805      	ldr	r0, [pc, #20]	; (26d04 <k_work_delayable_busy_get+0x64>)
   26cf0:	f003 ff71 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26cf4:	f385 8811 	msr	BASEPRI, r5
   26cf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_delayable_busy_get_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   26cfc:	4620      	mov	r0, r4
   26cfe:	bd38      	pop	{r3, r4, r5, pc}
   26d00:	2000d42c 	.word	0x2000d42c
   26d04:	0002e5ae 	.word	0x0002e5ae
   26d08:	0002e574 	.word	0x0002e574

00026d0c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   26d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26d0e:	4616      	mov	r6, r2
   26d10:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   26d12:	460c      	mov	r4, r1
{
   26d14:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   26d16:	b951      	cbnz	r1, 26d2e <k_work_schedule_for_queue+0x22>
   26d18:	4929      	ldr	r1, [pc, #164]	; (26dc0 <k_work_schedule_for_queue+0xb4>)
   26d1a:	482a      	ldr	r0, [pc, #168]	; (26dc4 <k_work_schedule_for_queue+0xb8>)
   26d1c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   26d20:	f003 fdc0 	bl	2a8a4 <printk>
   26d24:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   26d28:	4825      	ldr	r0, [pc, #148]	; (26dc0 <k_work_schedule_for_queue+0xb4>)
   26d2a:	f003 ff54 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26d2e:	f04f 0320 	mov.w	r3, #32
   26d32:	f3ef 8511 	mrs	r5, BASEPRI
   26d36:	f383 8812 	msr	BASEPRI_MAX, r3
   26d3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d3e:	4822      	ldr	r0, [pc, #136]	; (26dc8 <k_work_schedule_for_queue+0xbc>)
   26d40:	f7ff f9d8 	bl	260f4 <z_spin_lock_valid>
   26d44:	b940      	cbnz	r0, 26d58 <k_work_schedule_for_queue+0x4c>
   26d46:	4921      	ldr	r1, [pc, #132]	; (26dcc <k_work_schedule_for_queue+0xc0>)
   26d48:	481e      	ldr	r0, [pc, #120]	; (26dc4 <k_work_schedule_for_queue+0xb8>)
   26d4a:	2281      	movs	r2, #129	; 0x81
   26d4c:	f003 fdaa 	bl	2a8a4 <printk>
   26d50:	2181      	movs	r1, #129	; 0x81
   26d52:	481e      	ldr	r0, [pc, #120]	; (26dcc <k_work_schedule_for_queue+0xc0>)
   26d54:	f003 ff3f 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26d58:	481b      	ldr	r0, [pc, #108]	; (26dc8 <k_work_schedule_for_queue+0xbc>)
   26d5a:	f7ff f9e7 	bl	2612c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   26d5e:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26d60:	f013 0f0e 	tst.w	r3, #14
   26d64:	d129      	bne.n	26dba <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26d66:	ea56 0207 	orrs.w	r2, r6, r7
   26d6a:	d118      	bne.n	26d9e <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   26d6c:	4620      	mov	r0, r4
   26d6e:	a901      	add	r1, sp, #4
   26d70:	f7ff fe32 	bl	269d8 <submit_to_queue_locked>
   26d74:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d76:	4814      	ldr	r0, [pc, #80]	; (26dc8 <k_work_schedule_for_queue+0xbc>)
   26d78:	f7ff f9ca 	bl	26110 <z_spin_unlock_valid>
   26d7c:	b940      	cbnz	r0, 26d90 <k_work_schedule_for_queue+0x84>
   26d7e:	4913      	ldr	r1, [pc, #76]	; (26dcc <k_work_schedule_for_queue+0xc0>)
   26d80:	4810      	ldr	r0, [pc, #64]	; (26dc4 <k_work_schedule_for_queue+0xb8>)
   26d82:	22ac      	movs	r2, #172	; 0xac
   26d84:	f003 fd8e 	bl	2a8a4 <printk>
   26d88:	21ac      	movs	r1, #172	; 0xac
   26d8a:	4810      	ldr	r0, [pc, #64]	; (26dcc <k_work_schedule_for_queue+0xc0>)
   26d8c:	f003 ff23 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26d90:	f385 8811 	msr	BASEPRI, r5
   26d94:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26d98:	4620      	mov	r0, r4
   26d9a:	b003      	add	sp, #12
   26d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   26d9e:	f043 0308 	orr.w	r3, r3, #8
   26da2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26da4:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26da6:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   26daa:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26dac:	4632      	mov	r2, r6
   26dae:	463b      	mov	r3, r7
   26db0:	4907      	ldr	r1, [pc, #28]	; (26dd0 <k_work_schedule_for_queue+0xc4>)
   26db2:	f001 f87b 	bl	27eac <z_add_timeout>
	return ret;
   26db6:	2401      	movs	r4, #1
   26db8:	e7dd      	b.n	26d76 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   26dba:	2400      	movs	r4, #0
   26dbc:	e7db      	b.n	26d76 <k_work_schedule_for_queue+0x6a>
   26dbe:	bf00      	nop
   26dc0:	00030c68 	.word	0x00030c68
   26dc4:	0002e574 	.word	0x0002e574
   26dc8:	2000d42c 	.word	0x2000d42c
   26dcc:	0002e5ae 	.word	0x0002e5ae
   26dd0:	00026a99 	.word	0x00026a99

00026dd4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26dd4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26dd6:	4801      	ldr	r0, [pc, #4]	; (26ddc <k_work_schedule+0x8>)
   26dd8:	f7ff bf98 	b.w	26d0c <k_work_schedule_for_queue>
   26ddc:	2000ccd8 	.word	0x2000ccd8

00026de0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   26de0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   26de2:	4c08      	ldr	r4, [pc, #32]	; (26e04 <z_reset_time_slice+0x24>)
   26de4:	6823      	ldr	r3, [r4, #0]
   26de6:	b15b      	cbz	r3, 26e00 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26de8:	f7f7 fba2 	bl	1e530 <sys_clock_elapsed>
   26dec:	4603      	mov	r3, r0
   26dee:	6820      	ldr	r0, [r4, #0]
   26df0:	4a05      	ldr	r2, [pc, #20]	; (26e08 <z_reset_time_slice+0x28>)
   26df2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   26df4:	2100      	movs	r1, #0
	}
}
   26df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26dfa:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   26dfc:	f001 b982 	b.w	28104 <z_set_timeout_expiry>
}
   26e00:	bd10      	pop	{r4, pc}
   26e02:	bf00      	nop
   26e04:	2000d444 	.word	0x2000d444
   26e08:	2000d3fc 	.word	0x2000d3fc

00026e0c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   26e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e0e:	4604      	mov	r4, r0
   26e10:	460d      	mov	r5, r1
	__asm__ volatile(
   26e12:	f04f 0320 	mov.w	r3, #32
   26e16:	f3ef 8611 	mrs	r6, BASEPRI
   26e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   26e1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e22:	481e      	ldr	r0, [pc, #120]	; (26e9c <k_sched_time_slice_set+0x90>)
   26e24:	f7ff f966 	bl	260f4 <z_spin_lock_valid>
   26e28:	b940      	cbnz	r0, 26e3c <k_sched_time_slice_set+0x30>
   26e2a:	491d      	ldr	r1, [pc, #116]	; (26ea0 <k_sched_time_slice_set+0x94>)
   26e2c:	481d      	ldr	r0, [pc, #116]	; (26ea4 <k_sched_time_slice_set+0x98>)
   26e2e:	2281      	movs	r2, #129	; 0x81
   26e30:	f003 fd38 	bl	2a8a4 <printk>
   26e34:	2181      	movs	r1, #129	; 0x81
   26e36:	481a      	ldr	r0, [pc, #104]	; (26ea0 <k_sched_time_slice_set+0x94>)
   26e38:	f003 fecd 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26e3c:	4817      	ldr	r0, [pc, #92]	; (26e9c <k_sched_time_slice_set+0x90>)
   26e3e:	f7ff f975 	bl	2612c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26e42:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   26e46:	2200      	movs	r2, #0
   26e48:	f240 30e7 	movw	r0, #999	; 0x3e7
   26e4c:	2100      	movs	r1, #0
   26e4e:	4b16      	ldr	r3, [pc, #88]	; (26ea8 <k_sched_time_slice_set+0x9c>)
   26e50:	fbe7 0104 	umlal	r0, r1, r7, r4
   26e54:	611a      	str	r2, [r3, #16]
   26e56:	2300      	movs	r3, #0
   26e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26e5c:	f7f2 f920 	bl	190a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26e60:	2c00      	cmp	r4, #0
   26e62:	4b12      	ldr	r3, [pc, #72]	; (26eac <k_sched_time_slice_set+0xa0>)
   26e64:	dc16      	bgt.n	26e94 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   26e66:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   26e68:	4b11      	ldr	r3, [pc, #68]	; (26eb0 <k_sched_time_slice_set+0xa4>)
   26e6a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   26e6c:	f7ff ffb8 	bl	26de0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e70:	480a      	ldr	r0, [pc, #40]	; (26e9c <k_sched_time_slice_set+0x90>)
   26e72:	f7ff f94d 	bl	26110 <z_spin_unlock_valid>
   26e76:	b940      	cbnz	r0, 26e8a <k_sched_time_slice_set+0x7e>
   26e78:	4909      	ldr	r1, [pc, #36]	; (26ea0 <k_sched_time_slice_set+0x94>)
   26e7a:	480a      	ldr	r0, [pc, #40]	; (26ea4 <k_sched_time_slice_set+0x98>)
   26e7c:	22ac      	movs	r2, #172	; 0xac
   26e7e:	f003 fd11 	bl	2a8a4 <printk>
   26e82:	21ac      	movs	r1, #172	; 0xac
   26e84:	4806      	ldr	r0, [pc, #24]	; (26ea0 <k_sched_time_slice_set+0x94>)
   26e86:	f003 fea6 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26e8a:	f386 8811 	msr	BASEPRI, r6
   26e8e:	f3bf 8f6f 	isb	sy
	}
}
   26e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   26e94:	2802      	cmp	r0, #2
   26e96:	bfb8      	it	lt
   26e98:	2002      	movlt	r0, #2
   26e9a:	e7e4      	b.n	26e66 <k_sched_time_slice_set+0x5a>
   26e9c:	2000d43c 	.word	0x2000d43c
   26ea0:	0002e5ae 	.word	0x0002e5ae
   26ea4:	0002e574 	.word	0x0002e574
   26ea8:	2000d3fc 	.word	0x2000d3fc
   26eac:	2000d444 	.word	0x2000d444
   26eb0:	2000d440 	.word	0x2000d440

00026eb4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26eb4:	b510      	push	{r4, lr}
   26eb6:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26eb8:	460c      	mov	r4, r1
   26eba:	b9c1      	cbnz	r1, 26eee <z_reschedule+0x3a>
   26ebc:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   26ec0:	b9aa      	cbnz	r2, 26eee <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   26ec2:	4a14      	ldr	r2, [pc, #80]	; (26f14 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   26ec4:	69d1      	ldr	r1, [r2, #28]
   26ec6:	6892      	ldr	r2, [r2, #8]
   26ec8:	4291      	cmp	r1, r2
   26eca:	d010      	beq.n	26eee <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ecc:	f7ff f920 	bl	26110 <z_spin_unlock_valid>
   26ed0:	b940      	cbnz	r0, 26ee4 <z_reschedule+0x30>
   26ed2:	4911      	ldr	r1, [pc, #68]	; (26f18 <z_reschedule+0x64>)
   26ed4:	4811      	ldr	r0, [pc, #68]	; (26f1c <z_reschedule+0x68>)
   26ed6:	22c3      	movs	r2, #195	; 0xc3
   26ed8:	f003 fce4 	bl	2a8a4 <printk>
   26edc:	21c3      	movs	r1, #195	; 0xc3
   26ede:	480e      	ldr	r0, [pc, #56]	; (26f18 <z_reschedule+0x64>)
   26ee0:	f003 fe79 	bl	2abd6 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   26ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   26ee8:	2000      	movs	r0, #0
   26eea:	f7f5 b979 	b.w	1c1e0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eee:	4618      	mov	r0, r3
   26ef0:	f7ff f90e 	bl	26110 <z_spin_unlock_valid>
   26ef4:	b940      	cbnz	r0, 26f08 <z_reschedule+0x54>
   26ef6:	4908      	ldr	r1, [pc, #32]	; (26f18 <z_reschedule+0x64>)
   26ef8:	4808      	ldr	r0, [pc, #32]	; (26f1c <z_reschedule+0x68>)
   26efa:	22ac      	movs	r2, #172	; 0xac
   26efc:	f003 fcd2 	bl	2a8a4 <printk>
   26f00:	21ac      	movs	r1, #172	; 0xac
   26f02:	4805      	ldr	r0, [pc, #20]	; (26f18 <z_reschedule+0x64>)
   26f04:	f003 fe67 	bl	2abd6 <assert_post_action>
   26f08:	f384 8811 	msr	BASEPRI, r4
   26f0c:	f3bf 8f6f 	isb	sy
   26f10:	bd10      	pop	{r4, pc}
   26f12:	bf00      	nop
   26f14:	2000d3fc 	.word	0x2000d3fc
   26f18:	0002e5ae 	.word	0x0002e5ae
   26f1c:	0002e574 	.word	0x0002e574

00026f20 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   26f20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26f22:	f04f 0320 	mov.w	r3, #32
   26f26:	f3ef 8511 	mrs	r5, BASEPRI
   26f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   26f2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f32:	4820      	ldr	r0, [pc, #128]	; (26fb4 <k_sched_lock+0x94>)
   26f34:	f7ff f8de 	bl	260f4 <z_spin_lock_valid>
   26f38:	b940      	cbnz	r0, 26f4c <k_sched_lock+0x2c>
   26f3a:	491f      	ldr	r1, [pc, #124]	; (26fb8 <k_sched_lock+0x98>)
   26f3c:	481f      	ldr	r0, [pc, #124]	; (26fbc <k_sched_lock+0x9c>)
   26f3e:	2281      	movs	r2, #129	; 0x81
   26f40:	f003 fcb0 	bl	2a8a4 <printk>
   26f44:	2181      	movs	r1, #129	; 0x81
   26f46:	481c      	ldr	r0, [pc, #112]	; (26fb8 <k_sched_lock+0x98>)
   26f48:	f003 fe45 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   26f4c:	4819      	ldr	r0, [pc, #100]	; (26fb4 <k_sched_lock+0x94>)
   26f4e:	f7ff f8ed 	bl	2612c <z_spin_lock_set_owner>
   26f52:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26f56:	b143      	cbz	r3, 26f6a <k_sched_lock+0x4a>
   26f58:	4919      	ldr	r1, [pc, #100]	; (26fc0 <k_sched_lock+0xa0>)
   26f5a:	4818      	ldr	r0, [pc, #96]	; (26fbc <k_sched_lock+0x9c>)
   26f5c:	22fd      	movs	r2, #253	; 0xfd
   26f5e:	f003 fca1 	bl	2a8a4 <printk>
   26f62:	21fd      	movs	r1, #253	; 0xfd
   26f64:	4816      	ldr	r0, [pc, #88]	; (26fc0 <k_sched_lock+0xa0>)
   26f66:	f003 fe36 	bl	2abd6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26f6a:	4c16      	ldr	r4, [pc, #88]	; (26fc4 <k_sched_lock+0xa4>)
   26f6c:	68a2      	ldr	r2, [r4, #8]
   26f6e:	7bd2      	ldrb	r2, [r2, #15]
   26f70:	2a01      	cmp	r2, #1
   26f72:	d108      	bne.n	26f86 <k_sched_lock+0x66>
   26f74:	4912      	ldr	r1, [pc, #72]	; (26fc0 <k_sched_lock+0xa0>)
   26f76:	4811      	ldr	r0, [pc, #68]	; (26fbc <k_sched_lock+0x9c>)
   26f78:	22fe      	movs	r2, #254	; 0xfe
   26f7a:	f003 fc93 	bl	2a8a4 <printk>
   26f7e:	21fe      	movs	r1, #254	; 0xfe
   26f80:	480f      	ldr	r0, [pc, #60]	; (26fc0 <k_sched_lock+0xa0>)
   26f82:	f003 fe28 	bl	2abd6 <assert_post_action>
	--_current->base.sched_locked;
   26f86:	68a2      	ldr	r2, [r4, #8]
   26f88:	7bd3      	ldrb	r3, [r2, #15]
   26f8a:	3b01      	subs	r3, #1
   26f8c:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f8e:	4809      	ldr	r0, [pc, #36]	; (26fb4 <k_sched_lock+0x94>)
   26f90:	f7ff f8be 	bl	26110 <z_spin_unlock_valid>
   26f94:	b940      	cbnz	r0, 26fa8 <k_sched_lock+0x88>
   26f96:	4908      	ldr	r1, [pc, #32]	; (26fb8 <k_sched_lock+0x98>)
   26f98:	4808      	ldr	r0, [pc, #32]	; (26fbc <k_sched_lock+0x9c>)
   26f9a:	22ac      	movs	r2, #172	; 0xac
   26f9c:	f003 fc82 	bl	2a8a4 <printk>
   26fa0:	21ac      	movs	r1, #172	; 0xac
   26fa2:	4805      	ldr	r0, [pc, #20]	; (26fb8 <k_sched_lock+0x98>)
   26fa4:	f003 fe17 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   26fa8:	f385 8811 	msr	BASEPRI, r5
   26fac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26fb0:	bd38      	pop	{r3, r4, r5, pc}
   26fb2:	bf00      	nop
   26fb4:	2000d43c 	.word	0x2000d43c
   26fb8:	0002e5ae 	.word	0x0002e5ae
   26fbc:	0002e574 	.word	0x0002e574
   26fc0:	00030c1d 	.word	0x00030c1d
   26fc4:	2000d3fc 	.word	0x2000d3fc

00026fc8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26fc8:	4b0b      	ldr	r3, [pc, #44]	; (26ff8 <z_priq_dumb_remove+0x30>)
{
   26fca:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26fcc:	4299      	cmp	r1, r3
{
   26fce:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26fd0:	d10a      	bne.n	26fe8 <z_priq_dumb_remove+0x20>
   26fd2:	490a      	ldr	r1, [pc, #40]	; (26ffc <z_priq_dumb_remove+0x34>)
   26fd4:	480a      	ldr	r0, [pc, #40]	; (27000 <z_priq_dumb_remove+0x38>)
   26fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
   26fda:	f003 fc63 	bl	2a8a4 <printk>
   26fde:	f240 31e7 	movw	r1, #999	; 0x3e7
   26fe2:	4806      	ldr	r0, [pc, #24]	; (26ffc <z_priq_dumb_remove+0x34>)
   26fe4:	f003 fdf7 	bl	2abd6 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26fe8:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   26fec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26fee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26ff0:	2300      	movs	r3, #0
	node->prev = NULL;
   26ff2:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   26ff6:	bd10      	pop	{r4, pc}
   26ff8:	2000cbd0 	.word	0x2000cbd0
   26ffc:	00030c89 	.word	0x00030c89
   27000:	0002e574 	.word	0x0002e574

00027004 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   27004:	6883      	ldr	r3, [r0, #8]
{
   27006:	b510      	push	{r4, lr}
   27008:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2700a:	b953      	cbnz	r3, 27022 <unpend_thread_no_timeout+0x1e>
   2700c:	490a      	ldr	r1, [pc, #40]	; (27038 <unpend_thread_no_timeout+0x34>)
   2700e:	480b      	ldr	r0, [pc, #44]	; (2703c <unpend_thread_no_timeout+0x38>)
   27010:	f240 2283 	movw	r2, #643	; 0x283
   27014:	f003 fc46 	bl	2a8a4 <printk>
   27018:	f240 2183 	movw	r1, #643	; 0x283
   2701c:	4806      	ldr	r0, [pc, #24]	; (27038 <unpend_thread_no_timeout+0x34>)
   2701e:	f003 fdda 	bl	2abd6 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27022:	4621      	mov	r1, r4
   27024:	68a0      	ldr	r0, [r4, #8]
   27026:	f7ff ffcf 	bl	26fc8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2702a:	7b63      	ldrb	r3, [r4, #13]
   2702c:	f023 0302 	bic.w	r3, r3, #2
   27030:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27032:	2300      	movs	r3, #0
   27034:	60a3      	str	r3, [r4, #8]
}
   27036:	bd10      	pop	{r4, pc}
   27038:	00030c89 	.word	0x00030c89
   2703c:	0002e574 	.word	0x0002e574

00027040 <z_unpend_thread>:
{
   27040:	b538      	push	{r3, r4, r5, lr}
   27042:	4604      	mov	r4, r0
	__asm__ volatile(
   27044:	f04f 0320 	mov.w	r3, #32
   27048:	f3ef 8511 	mrs	r5, BASEPRI
   2704c:	f383 8812 	msr	BASEPRI_MAX, r3
   27050:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27054:	4814      	ldr	r0, [pc, #80]	; (270a8 <z_unpend_thread+0x68>)
   27056:	f7ff f84d 	bl	260f4 <z_spin_lock_valid>
   2705a:	b940      	cbnz	r0, 2706e <z_unpend_thread+0x2e>
   2705c:	4913      	ldr	r1, [pc, #76]	; (270ac <z_unpend_thread+0x6c>)
   2705e:	4814      	ldr	r0, [pc, #80]	; (270b0 <z_unpend_thread+0x70>)
   27060:	2281      	movs	r2, #129	; 0x81
   27062:	f003 fc1f 	bl	2a8a4 <printk>
   27066:	2181      	movs	r1, #129	; 0x81
   27068:	4810      	ldr	r0, [pc, #64]	; (270ac <z_unpend_thread+0x6c>)
   2706a:	f003 fdb4 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2706e:	480e      	ldr	r0, [pc, #56]	; (270a8 <z_unpend_thread+0x68>)
   27070:	f7ff f85c 	bl	2612c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   27074:	4620      	mov	r0, r4
   27076:	f7ff ffc5 	bl	27004 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2707a:	480b      	ldr	r0, [pc, #44]	; (270a8 <z_unpend_thread+0x68>)
   2707c:	f7ff f848 	bl	26110 <z_spin_unlock_valid>
   27080:	b940      	cbnz	r0, 27094 <z_unpend_thread+0x54>
   27082:	490a      	ldr	r1, [pc, #40]	; (270ac <z_unpend_thread+0x6c>)
   27084:	480a      	ldr	r0, [pc, #40]	; (270b0 <z_unpend_thread+0x70>)
   27086:	22ac      	movs	r2, #172	; 0xac
   27088:	f003 fc0c 	bl	2a8a4 <printk>
   2708c:	21ac      	movs	r1, #172	; 0xac
   2708e:	4807      	ldr	r0, [pc, #28]	; (270ac <z_unpend_thread+0x6c>)
   27090:	f003 fda1 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27094:	f385 8811 	msr	BASEPRI, r5
   27098:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2709c:	f104 0018 	add.w	r0, r4, #24
}
   270a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   270a4:	f000 bfbc 	b.w	28020 <z_abort_timeout>
   270a8:	2000d43c 	.word	0x2000d43c
   270ac:	0002e5ae 	.word	0x0002e5ae
   270b0:	0002e574 	.word	0x0002e574

000270b4 <update_cache>:
{
   270b4:	b538      	push	{r3, r4, r5, lr}
   270b6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   270b8:	4812      	ldr	r0, [pc, #72]	; (27104 <update_cache+0x50>)
   270ba:	f005 fcbe 	bl	2ca3a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   270be:	4d12      	ldr	r5, [pc, #72]	; (27108 <update_cache+0x54>)
   270c0:	4604      	mov	r4, r0
   270c2:	b900      	cbnz	r0, 270c6 <update_cache+0x12>
   270c4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   270c6:	b9aa      	cbnz	r2, 270f4 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   270c8:	68ab      	ldr	r3, [r5, #8]
   270ca:	b943      	cbnz	r3, 270de <update_cache+0x2a>
   270cc:	490f      	ldr	r1, [pc, #60]	; (2710c <update_cache+0x58>)
   270ce:	4810      	ldr	r0, [pc, #64]	; (27110 <update_cache+0x5c>)
   270d0:	2289      	movs	r2, #137	; 0x89
   270d2:	f003 fbe7 	bl	2a8a4 <printk>
   270d6:	2189      	movs	r1, #137	; 0x89
   270d8:	480c      	ldr	r0, [pc, #48]	; (2710c <update_cache+0x58>)
   270da:	f003 fd7c 	bl	2abd6 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   270de:	68ab      	ldr	r3, [r5, #8]
   270e0:	7b5a      	ldrb	r2, [r3, #13]
   270e2:	06d2      	lsls	r2, r2, #27
   270e4:	d106      	bne.n	270f4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   270e6:	69a2      	ldr	r2, [r4, #24]
   270e8:	b922      	cbnz	r2, 270f4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   270ea:	89da      	ldrh	r2, [r3, #14]
   270ec:	2a7f      	cmp	r2, #127	; 0x7f
   270ee:	d901      	bls.n	270f4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   270f0:	61eb      	str	r3, [r5, #28]
}
   270f2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   270f4:	68ab      	ldr	r3, [r5, #8]
   270f6:	42a3      	cmp	r3, r4
   270f8:	d001      	beq.n	270fe <update_cache+0x4a>
			z_reset_time_slice();
   270fa:	f7ff fe71 	bl	26de0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   270fe:	61ec      	str	r4, [r5, #28]
}
   27100:	e7f7      	b.n	270f2 <update_cache+0x3e>
   27102:	bf00      	nop
   27104:	2000d41c 	.word	0x2000d41c
   27108:	2000d3fc 	.word	0x2000d3fc
   2710c:	00030c89 	.word	0x00030c89
   27110:	0002e574 	.word	0x0002e574

00027114 <move_thread_to_end_of_prio_q>:
{
   27114:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   27116:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2711a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2711c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2711e:	7b43      	ldrb	r3, [r0, #13]
   27120:	da06      	bge.n	27130 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   27126:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27128:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2712a:	481f      	ldr	r0, [pc, #124]	; (271a8 <move_thread_to_end_of_prio_q+0x94>)
   2712c:	f7ff ff4c 	bl	26fc8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   27130:	7b63      	ldrb	r3, [r4, #13]
   27132:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27136:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27138:	4b1c      	ldr	r3, [pc, #112]	; (271ac <move_thread_to_end_of_prio_q+0x98>)
   2713a:	429c      	cmp	r4, r3
   2713c:	d108      	bne.n	27150 <move_thread_to_end_of_prio_q+0x3c>
   2713e:	491c      	ldr	r1, [pc, #112]	; (271b0 <move_thread_to_end_of_prio_q+0x9c>)
   27140:	481c      	ldr	r0, [pc, #112]	; (271b4 <move_thread_to_end_of_prio_q+0xa0>)
   27142:	22ba      	movs	r2, #186	; 0xba
   27144:	f003 fbae 	bl	2a8a4 <printk>
   27148:	21ba      	movs	r1, #186	; 0xba
   2714a:	4819      	ldr	r0, [pc, #100]	; (271b0 <move_thread_to_end_of_prio_q+0x9c>)
   2714c:	f003 fd43 	bl	2abd6 <assert_post_action>
	return list->head == list;
   27150:	4a19      	ldr	r2, [pc, #100]	; (271b8 <move_thread_to_end_of_prio_q+0xa4>)
   27152:	4611      	mov	r1, r2
   27154:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27158:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2715a:	428b      	cmp	r3, r1
   2715c:	bf08      	it	eq
   2715e:	2300      	moveq	r3, #0
   27160:	2b00      	cmp	r3, #0
   27162:	bf38      	it	cc
   27164:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27166:	b1cb      	cbz	r3, 2719c <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
   27168:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2716c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   27170:	4286      	cmp	r6, r0
   27172:	d00f      	beq.n	27194 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
   27174:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   27176:	2800      	cmp	r0, #0
   27178:	dd0c      	ble.n	27194 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
   2717a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2717c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   27180:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   27182:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   27184:	6890      	ldr	r0, [r2, #8]
   27186:	1b03      	subs	r3, r0, r4
   27188:	4258      	negs	r0, r3
   2718a:	4158      	adcs	r0, r3
}
   2718c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   27190:	f7ff bf90 	b.w	270b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   27194:	42ab      	cmp	r3, r5
   27196:	d001      	beq.n	2719c <move_thread_to_end_of_prio_q+0x88>
   27198:	681b      	ldr	r3, [r3, #0]
   2719a:	e7e4      	b.n	27166 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
   2719c:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   271a0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   271a2:	6254      	str	r4, [r2, #36]	; 0x24
}
   271a4:	e7ee      	b.n	27184 <move_thread_to_end_of_prio_q+0x70>
   271a6:	bf00      	nop
   271a8:	2000d41c 	.word	0x2000d41c
   271ac:	2000cbd0 	.word	0x2000cbd0
   271b0:	00030c89 	.word	0x00030c89
   271b4:	0002e574 	.word	0x0002e574
   271b8:	2000d3fc 	.word	0x2000d3fc

000271bc <z_time_slice>:
{
   271bc:	b570      	push	{r4, r5, r6, lr}
   271be:	4604      	mov	r4, r0
	__asm__ volatile(
   271c0:	f04f 0320 	mov.w	r3, #32
   271c4:	f3ef 8511 	mrs	r5, BASEPRI
   271c8:	f383 8812 	msr	BASEPRI_MAX, r3
   271cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271d0:	4825      	ldr	r0, [pc, #148]	; (27268 <z_time_slice+0xac>)
   271d2:	f7fe ff8f 	bl	260f4 <z_spin_lock_valid>
   271d6:	b940      	cbnz	r0, 271ea <z_time_slice+0x2e>
   271d8:	4924      	ldr	r1, [pc, #144]	; (2726c <z_time_slice+0xb0>)
   271da:	4825      	ldr	r0, [pc, #148]	; (27270 <z_time_slice+0xb4>)
   271dc:	2281      	movs	r2, #129	; 0x81
   271de:	f003 fb61 	bl	2a8a4 <printk>
   271e2:	2181      	movs	r1, #129	; 0x81
   271e4:	4821      	ldr	r0, [pc, #132]	; (2726c <z_time_slice+0xb0>)
   271e6:	f003 fcf6 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   271ea:	481f      	ldr	r0, [pc, #124]	; (27268 <z_time_slice+0xac>)
   271ec:	f7fe ff9e 	bl	2612c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   271f0:	4b20      	ldr	r3, [pc, #128]	; (27274 <z_time_slice+0xb8>)
   271f2:	4a21      	ldr	r2, [pc, #132]	; (27278 <z_time_slice+0xbc>)
   271f4:	6898      	ldr	r0, [r3, #8]
   271f6:	6811      	ldr	r1, [r2, #0]
   271f8:	4288      	cmp	r0, r1
   271fa:	4619      	mov	r1, r3
   271fc:	d113      	bne.n	27226 <z_time_slice+0x6a>
			z_reset_time_slice();
   271fe:	f7ff fdef 	bl	26de0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27202:	4819      	ldr	r0, [pc, #100]	; (27268 <z_time_slice+0xac>)
   27204:	f7fe ff84 	bl	26110 <z_spin_unlock_valid>
   27208:	b940      	cbnz	r0, 2721c <z_time_slice+0x60>
   2720a:	4918      	ldr	r1, [pc, #96]	; (2726c <z_time_slice+0xb0>)
   2720c:	4818      	ldr	r0, [pc, #96]	; (27270 <z_time_slice+0xb4>)
   2720e:	22ac      	movs	r2, #172	; 0xac
   27210:	f003 fb48 	bl	2a8a4 <printk>
   27214:	21ac      	movs	r1, #172	; 0xac
   27216:	4815      	ldr	r0, [pc, #84]	; (2726c <z_time_slice+0xb0>)
   27218:	f003 fcdd 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2721c:	f385 8811 	msr	BASEPRI, r5
   27220:	f3bf 8f6f 	isb	sy
}
   27224:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   27226:	2600      	movs	r6, #0
   27228:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2722a:	4a14      	ldr	r2, [pc, #80]	; (2727c <z_time_slice+0xc0>)
   2722c:	6812      	ldr	r2, [r2, #0]
   2722e:	b1ba      	cbz	r2, 27260 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   27230:	89c2      	ldrh	r2, [r0, #14]
   27232:	2a7f      	cmp	r2, #127	; 0x7f
   27234:	d814      	bhi.n	27260 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   27236:	7b42      	ldrb	r2, [r0, #13]
   27238:	06d2      	lsls	r2, r2, #27
   2723a:	d111      	bne.n	27260 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2723c:	4a10      	ldr	r2, [pc, #64]	; (27280 <z_time_slice+0xc4>)
   2723e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   27242:	6812      	ldr	r2, [r2, #0]
   27244:	4296      	cmp	r6, r2
   27246:	db0b      	blt.n	27260 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   27248:	4a0e      	ldr	r2, [pc, #56]	; (27284 <z_time_slice+0xc8>)
   2724a:	4290      	cmp	r0, r2
   2724c:	d008      	beq.n	27260 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   2724e:	691a      	ldr	r2, [r3, #16]
   27250:	42a2      	cmp	r2, r4
   27252:	dc02      	bgt.n	2725a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   27254:	f7ff ff5e 	bl	27114 <move_thread_to_end_of_prio_q>
   27258:	e7d1      	b.n	271fe <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   2725a:	1b12      	subs	r2, r2, r4
   2725c:	611a      	str	r2, [r3, #16]
   2725e:	e7d0      	b.n	27202 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   27260:	2300      	movs	r3, #0
   27262:	610b      	str	r3, [r1, #16]
   27264:	e7cd      	b.n	27202 <z_time_slice+0x46>
   27266:	bf00      	nop
   27268:	2000d43c 	.word	0x2000d43c
   2726c:	0002e5ae 	.word	0x0002e5ae
   27270:	0002e574 	.word	0x0002e574
   27274:	2000d3fc 	.word	0x2000d3fc
   27278:	2000d438 	.word	0x2000d438
   2727c:	2000d444 	.word	0x2000d444
   27280:	2000d440 	.word	0x2000d440
   27284:	2000cbd0 	.word	0x2000cbd0

00027288 <ready_thread>:
{
   27288:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2728a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2728e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   27290:	2a00      	cmp	r2, #0
   27292:	7b43      	ldrb	r3, [r0, #13]
   27294:	db3d      	blt.n	27312 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27296:	06da      	lsls	r2, r3, #27
   27298:	d13b      	bne.n	27312 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
   2729a:	6985      	ldr	r5, [r0, #24]
   2729c:	2d00      	cmp	r5, #0
   2729e:	d138      	bne.n	27312 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
   272a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   272a4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   272a6:	4b1b      	ldr	r3, [pc, #108]	; (27314 <ready_thread+0x8c>)
   272a8:	4298      	cmp	r0, r3
   272aa:	d108      	bne.n	272be <ready_thread+0x36>
   272ac:	491a      	ldr	r1, [pc, #104]	; (27318 <ready_thread+0x90>)
   272ae:	481b      	ldr	r0, [pc, #108]	; (2731c <ready_thread+0x94>)
   272b0:	22ba      	movs	r2, #186	; 0xba
   272b2:	f003 faf7 	bl	2a8a4 <printk>
   272b6:	21ba      	movs	r1, #186	; 0xba
   272b8:	4817      	ldr	r0, [pc, #92]	; (27318 <ready_thread+0x90>)
   272ba:	f003 fc8c 	bl	2abd6 <assert_post_action>
	return list->head == list;
   272be:	4918      	ldr	r1, [pc, #96]	; (27320 <ready_thread+0x98>)
   272c0:	460b      	mov	r3, r1
   272c2:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272c6:	4298      	cmp	r0, r3
   272c8:	bf18      	it	ne
   272ca:	4605      	movne	r5, r0
   272cc:	2d00      	cmp	r5, #0
   272ce:	461a      	mov	r2, r3
   272d0:	462b      	mov	r3, r5
   272d2:	bf38      	it	cc
   272d4:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   272d6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   272d8:	b1b3      	cbz	r3, 27308 <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
   272da:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   272de:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   272e2:	4286      	cmp	r6, r0
   272e4:	d00c      	beq.n	27300 <ready_thread+0x78>
		return b2 - b1;
   272e6:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   272e8:	2800      	cmp	r0, #0
   272ea:	dd09      	ble.n	27300 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
   272ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   272ee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   272f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   272f4:	605c      	str	r4, [r3, #4]
		update_cache(0);
   272f6:	2000      	movs	r0, #0
}
   272f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   272fc:	f7ff beda 	b.w	270b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   27300:	42ab      	cmp	r3, r5
   27302:	d001      	beq.n	27308 <ready_thread+0x80>
   27304:	681b      	ldr	r3, [r3, #0]
   27306:	e7e7      	b.n	272d8 <ready_thread+0x50>
	node->prev = tail;
   27308:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2730c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2730e:	624c      	str	r4, [r1, #36]	; 0x24
}
   27310:	e7f1      	b.n	272f6 <ready_thread+0x6e>
}
   27312:	bd70      	pop	{r4, r5, r6, pc}
   27314:	2000cbd0 	.word	0x2000cbd0
   27318:	00030c89 	.word	0x00030c89
   2731c:	0002e574 	.word	0x0002e574
   27320:	2000d3fc 	.word	0x2000d3fc

00027324 <z_ready_thread>:
{
   27324:	b538      	push	{r3, r4, r5, lr}
   27326:	4604      	mov	r4, r0
	__asm__ volatile(
   27328:	f04f 0320 	mov.w	r3, #32
   2732c:	f3ef 8511 	mrs	r5, BASEPRI
   27330:	f383 8812 	msr	BASEPRI_MAX, r3
   27334:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27338:	4812      	ldr	r0, [pc, #72]	; (27384 <z_ready_thread+0x60>)
   2733a:	f7fe fedb 	bl	260f4 <z_spin_lock_valid>
   2733e:	b940      	cbnz	r0, 27352 <z_ready_thread+0x2e>
   27340:	4911      	ldr	r1, [pc, #68]	; (27388 <z_ready_thread+0x64>)
   27342:	4812      	ldr	r0, [pc, #72]	; (2738c <z_ready_thread+0x68>)
   27344:	2281      	movs	r2, #129	; 0x81
   27346:	f003 faad 	bl	2a8a4 <printk>
   2734a:	2181      	movs	r1, #129	; 0x81
   2734c:	480e      	ldr	r0, [pc, #56]	; (27388 <z_ready_thread+0x64>)
   2734e:	f003 fc42 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27352:	480c      	ldr	r0, [pc, #48]	; (27384 <z_ready_thread+0x60>)
   27354:	f7fe feea 	bl	2612c <z_spin_lock_set_owner>
			ready_thread(thread);
   27358:	4620      	mov	r0, r4
   2735a:	f7ff ff95 	bl	27288 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2735e:	4809      	ldr	r0, [pc, #36]	; (27384 <z_ready_thread+0x60>)
   27360:	f7fe fed6 	bl	26110 <z_spin_unlock_valid>
   27364:	b940      	cbnz	r0, 27378 <z_ready_thread+0x54>
   27366:	4908      	ldr	r1, [pc, #32]	; (27388 <z_ready_thread+0x64>)
   27368:	4808      	ldr	r0, [pc, #32]	; (2738c <z_ready_thread+0x68>)
   2736a:	22ac      	movs	r2, #172	; 0xac
   2736c:	f003 fa9a 	bl	2a8a4 <printk>
   27370:	21ac      	movs	r1, #172	; 0xac
   27372:	4805      	ldr	r0, [pc, #20]	; (27388 <z_ready_thread+0x64>)
   27374:	f003 fc2f 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27378:	f385 8811 	msr	BASEPRI, r5
   2737c:	f3bf 8f6f 	isb	sy
}
   27380:	bd38      	pop	{r3, r4, r5, pc}
   27382:	bf00      	nop
   27384:	2000d43c 	.word	0x2000d43c
   27388:	0002e5ae 	.word	0x0002e5ae
   2738c:	0002e574 	.word	0x0002e574

00027390 <z_sched_start>:
{
   27390:	b538      	push	{r3, r4, r5, lr}
   27392:	4604      	mov	r4, r0
	__asm__ volatile(
   27394:	f04f 0320 	mov.w	r3, #32
   27398:	f3ef 8511 	mrs	r5, BASEPRI
   2739c:	f383 8812 	msr	BASEPRI_MAX, r3
   273a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273a4:	4818      	ldr	r0, [pc, #96]	; (27408 <z_sched_start+0x78>)
   273a6:	f7fe fea5 	bl	260f4 <z_spin_lock_valid>
   273aa:	b940      	cbnz	r0, 273be <z_sched_start+0x2e>
   273ac:	4917      	ldr	r1, [pc, #92]	; (2740c <z_sched_start+0x7c>)
   273ae:	4818      	ldr	r0, [pc, #96]	; (27410 <z_sched_start+0x80>)
   273b0:	2281      	movs	r2, #129	; 0x81
   273b2:	f003 fa77 	bl	2a8a4 <printk>
   273b6:	2181      	movs	r1, #129	; 0x81
   273b8:	4814      	ldr	r0, [pc, #80]	; (2740c <z_sched_start+0x7c>)
   273ba:	f003 fc0c 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   273be:	4812      	ldr	r0, [pc, #72]	; (27408 <z_sched_start+0x78>)
   273c0:	f7fe feb4 	bl	2612c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   273c4:	7b63      	ldrb	r3, [r4, #13]
   273c6:	075a      	lsls	r2, r3, #29
   273c8:	d411      	bmi.n	273ee <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273ca:	480f      	ldr	r0, [pc, #60]	; (27408 <z_sched_start+0x78>)
   273cc:	f7fe fea0 	bl	26110 <z_spin_unlock_valid>
   273d0:	b940      	cbnz	r0, 273e4 <z_sched_start+0x54>
   273d2:	490e      	ldr	r1, [pc, #56]	; (2740c <z_sched_start+0x7c>)
   273d4:	480e      	ldr	r0, [pc, #56]	; (27410 <z_sched_start+0x80>)
   273d6:	22ac      	movs	r2, #172	; 0xac
   273d8:	f003 fa64 	bl	2a8a4 <printk>
   273dc:	21ac      	movs	r1, #172	; 0xac
   273de:	480b      	ldr	r0, [pc, #44]	; (2740c <z_sched_start+0x7c>)
   273e0:	f003 fbf9 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   273e4:	f385 8811 	msr	BASEPRI, r5
   273e8:	f3bf 8f6f 	isb	sy
}
   273ec:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   273ee:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   273f2:	4620      	mov	r0, r4
   273f4:	7363      	strb	r3, [r4, #13]
   273f6:	f7ff ff47 	bl	27288 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   273fa:	4629      	mov	r1, r5
}
   273fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   27400:	4801      	ldr	r0, [pc, #4]	; (27408 <z_sched_start+0x78>)
   27402:	f7ff bd57 	b.w	26eb4 <z_reschedule>
   27406:	bf00      	nop
   27408:	2000d43c 	.word	0x2000d43c
   2740c:	0002e5ae 	.word	0x0002e5ae
   27410:	0002e574 	.word	0x0002e574

00027414 <z_thread_timeout>:
{
   27414:	b570      	push	{r4, r5, r6, lr}
   27416:	4604      	mov	r4, r0
	__asm__ volatile(
   27418:	f04f 0320 	mov.w	r3, #32
   2741c:	f3ef 8611 	mrs	r6, BASEPRI
   27420:	f383 8812 	msr	BASEPRI_MAX, r3
   27424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27428:	481b      	ldr	r0, [pc, #108]	; (27498 <z_thread_timeout+0x84>)
   2742a:	f7fe fe63 	bl	260f4 <z_spin_lock_valid>
   2742e:	b940      	cbnz	r0, 27442 <z_thread_timeout+0x2e>
   27430:	491a      	ldr	r1, [pc, #104]	; (2749c <z_thread_timeout+0x88>)
   27432:	481b      	ldr	r0, [pc, #108]	; (274a0 <z_thread_timeout+0x8c>)
   27434:	2281      	movs	r2, #129	; 0x81
   27436:	f003 fa35 	bl	2a8a4 <printk>
   2743a:	2181      	movs	r1, #129	; 0x81
   2743c:	4817      	ldr	r0, [pc, #92]	; (2749c <z_thread_timeout+0x88>)
   2743e:	f003 fbca 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27442:	4815      	ldr	r0, [pc, #84]	; (27498 <z_thread_timeout+0x84>)
   27444:	f7fe fe72 	bl	2612c <z_spin_lock_set_owner>
		if (!killed) {
   27448:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2744c:	f013 0f28 	tst.w	r3, #40	; 0x28
   27450:	d110      	bne.n	27474 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   27452:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   27456:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2745a:	b113      	cbz	r3, 27462 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   2745c:	4628      	mov	r0, r5
   2745e:	f7ff fdd1 	bl	27004 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27462:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   27466:	4628      	mov	r0, r5
   27468:	f023 0314 	bic.w	r3, r3, #20
   2746c:	f804 3c0b 	strb.w	r3, [r4, #-11]
   27470:	f7ff ff0a 	bl	27288 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27474:	4808      	ldr	r0, [pc, #32]	; (27498 <z_thread_timeout+0x84>)
   27476:	f7fe fe4b 	bl	26110 <z_spin_unlock_valid>
   2747a:	b940      	cbnz	r0, 2748e <z_thread_timeout+0x7a>
   2747c:	4907      	ldr	r1, [pc, #28]	; (2749c <z_thread_timeout+0x88>)
   2747e:	4808      	ldr	r0, [pc, #32]	; (274a0 <z_thread_timeout+0x8c>)
   27480:	22ac      	movs	r2, #172	; 0xac
   27482:	f003 fa0f 	bl	2a8a4 <printk>
   27486:	21ac      	movs	r1, #172	; 0xac
   27488:	4804      	ldr	r0, [pc, #16]	; (2749c <z_thread_timeout+0x88>)
   2748a:	f003 fba4 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2748e:	f386 8811 	msr	BASEPRI, r6
   27492:	f3bf 8f6f 	isb	sy
}
   27496:	bd70      	pop	{r4, r5, r6, pc}
   27498:	2000d43c 	.word	0x2000d43c
   2749c:	0002e5ae 	.word	0x0002e5ae
   274a0:	0002e574 	.word	0x0002e574

000274a4 <unready_thread>:
{
   274a4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   274a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   274aa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   274ac:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   274ae:	7b43      	ldrb	r3, [r0, #13]
   274b0:	da06      	bge.n	274c0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   274b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   274b6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   274b8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   274ba:	4806      	ldr	r0, [pc, #24]	; (274d4 <unready_thread+0x30>)
   274bc:	f7ff fd84 	bl	26fc8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   274c0:	4b05      	ldr	r3, [pc, #20]	; (274d8 <unready_thread+0x34>)
   274c2:	6898      	ldr	r0, [r3, #8]
   274c4:	1b03      	subs	r3, r0, r4
   274c6:	4258      	negs	r0, r3
   274c8:	4158      	adcs	r0, r3
}
   274ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   274ce:	f7ff bdf1 	b.w	270b4 <update_cache>
   274d2:	bf00      	nop
   274d4:	2000d41c 	.word	0x2000d41c
   274d8:	2000d3fc 	.word	0x2000d3fc

000274dc <add_to_waitq_locked>:
{
   274dc:	b538      	push	{r3, r4, r5, lr}
   274de:	4604      	mov	r4, r0
   274e0:	460d      	mov	r5, r1
	unready_thread(thread);
   274e2:	f7ff ffdf 	bl	274a4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   274e6:	7b63      	ldrb	r3, [r4, #13]
   274e8:	f043 0302 	orr.w	r3, r3, #2
   274ec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   274ee:	b315      	cbz	r5, 27536 <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   274f0:	4b17      	ldr	r3, [pc, #92]	; (27550 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   274f2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   274f4:	429c      	cmp	r4, r3
   274f6:	d108      	bne.n	2750a <add_to_waitq_locked+0x2e>
   274f8:	4916      	ldr	r1, [pc, #88]	; (27554 <add_to_waitq_locked+0x78>)
   274fa:	4817      	ldr	r0, [pc, #92]	; (27558 <add_to_waitq_locked+0x7c>)
   274fc:	22ba      	movs	r2, #186	; 0xba
   274fe:	f003 f9d1 	bl	2a8a4 <printk>
   27502:	21ba      	movs	r1, #186	; 0xba
   27504:	4813      	ldr	r0, [pc, #76]	; (27554 <add_to_waitq_locked+0x78>)
   27506:	f003 fb66 	bl	2abd6 <assert_post_action>
	return list->head == list;
   2750a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2750c:	429d      	cmp	r5, r3
   2750e:	bf08      	it	eq
   27510:	2300      	moveq	r3, #0
   27512:	2b00      	cmp	r3, #0
   27514:	bf38      	it	cc
   27516:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27518:	b19b      	cbz	r3, 27542 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
   2751a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2751e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27522:	4291      	cmp	r1, r2
   27524:	d008      	beq.n	27538 <add_to_waitq_locked+0x5c>
		return b2 - b1;
   27526:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   27528:	2a00      	cmp	r2, #0
   2752a:	dd05      	ble.n	27538 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
   2752c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2752e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27532:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27534:	605c      	str	r4, [r3, #4]
}
   27536:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   27538:	686a      	ldr	r2, [r5, #4]
   2753a:	4293      	cmp	r3, r2
   2753c:	d001      	beq.n	27542 <add_to_waitq_locked+0x66>
   2753e:	681b      	ldr	r3, [r3, #0]
   27540:	e7ea      	b.n	27518 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
   27542:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   27544:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   27548:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2754a:	606c      	str	r4, [r5, #4]
   2754c:	e7f3      	b.n	27536 <add_to_waitq_locked+0x5a>
   2754e:	bf00      	nop
   27550:	2000cbd0 	.word	0x2000cbd0
   27554:	00030c89 	.word	0x00030c89
   27558:	0002e574 	.word	0x0002e574

0002755c <pend>:
{
   2755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27560:	4604      	mov	r4, r0
   27562:	460d      	mov	r5, r1
   27564:	4616      	mov	r6, r2
   27566:	461f      	mov	r7, r3
	__asm__ volatile(
   27568:	f04f 0320 	mov.w	r3, #32
   2756c:	f3ef 8811 	mrs	r8, BASEPRI
   27570:	f383 8812 	msr	BASEPRI_MAX, r3
   27574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27578:	481a      	ldr	r0, [pc, #104]	; (275e4 <pend+0x88>)
   2757a:	f7fe fdbb 	bl	260f4 <z_spin_lock_valid>
   2757e:	b940      	cbnz	r0, 27592 <pend+0x36>
   27580:	4919      	ldr	r1, [pc, #100]	; (275e8 <pend+0x8c>)
   27582:	481a      	ldr	r0, [pc, #104]	; (275ec <pend+0x90>)
   27584:	2281      	movs	r2, #129	; 0x81
   27586:	f003 f98d 	bl	2a8a4 <printk>
   2758a:	2181      	movs	r1, #129	; 0x81
   2758c:	4816      	ldr	r0, [pc, #88]	; (275e8 <pend+0x8c>)
   2758e:	f003 fb22 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27592:	4814      	ldr	r0, [pc, #80]	; (275e4 <pend+0x88>)
   27594:	f7fe fdca 	bl	2612c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   27598:	4620      	mov	r0, r4
   2759a:	4629      	mov	r1, r5
   2759c:	f7ff ff9e 	bl	274dc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275a0:	4810      	ldr	r0, [pc, #64]	; (275e4 <pend+0x88>)
   275a2:	f7fe fdb5 	bl	26110 <z_spin_unlock_valid>
   275a6:	b940      	cbnz	r0, 275ba <pend+0x5e>
   275a8:	490f      	ldr	r1, [pc, #60]	; (275e8 <pend+0x8c>)
   275aa:	4810      	ldr	r0, [pc, #64]	; (275ec <pend+0x90>)
   275ac:	22ac      	movs	r2, #172	; 0xac
   275ae:	f003 f979 	bl	2a8a4 <printk>
   275b2:	21ac      	movs	r1, #172	; 0xac
   275b4:	480c      	ldr	r0, [pc, #48]	; (275e8 <pend+0x8c>)
   275b6:	f003 fb0e 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   275ba:	f388 8811 	msr	BASEPRI, r8
   275be:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   275c2:	1c7b      	adds	r3, r7, #1
   275c4:	bf08      	it	eq
   275c6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   275ca:	d008      	beq.n	275de <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   275cc:	4632      	mov	r2, r6
   275ce:	463b      	mov	r3, r7
   275d0:	f104 0018 	add.w	r0, r4, #24
   275d4:	4906      	ldr	r1, [pc, #24]	; (275f0 <pend+0x94>)
}
   275d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   275da:	f000 bc67 	b.w	27eac <z_add_timeout>
   275de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   275e2:	bf00      	nop
   275e4:	2000d43c 	.word	0x2000d43c
   275e8:	0002e5ae 	.word	0x0002e5ae
   275ec:	0002e574 	.word	0x0002e574
   275f0:	00027415 	.word	0x00027415

000275f4 <z_pend_curr>:
{
   275f4:	b538      	push	{r3, r4, r5, lr}
   275f6:	4605      	mov	r5, r0
	pending_current = _current;
   275f8:	4b0d      	ldr	r3, [pc, #52]	; (27630 <z_pend_curr+0x3c>)
{
   275fa:	460c      	mov	r4, r1
	pending_current = _current;
   275fc:	6898      	ldr	r0, [r3, #8]
   275fe:	4b0d      	ldr	r3, [pc, #52]	; (27634 <z_pend_curr+0x40>)
{
   27600:	4611      	mov	r1, r2
	pending_current = _current;
   27602:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   27604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27608:	f7ff ffa8 	bl	2755c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2760c:	4628      	mov	r0, r5
   2760e:	f7fe fd7f 	bl	26110 <z_spin_unlock_valid>
   27612:	b940      	cbnz	r0, 27626 <z_pend_curr+0x32>
   27614:	4908      	ldr	r1, [pc, #32]	; (27638 <z_pend_curr+0x44>)
   27616:	4809      	ldr	r0, [pc, #36]	; (2763c <z_pend_curr+0x48>)
   27618:	22c3      	movs	r2, #195	; 0xc3
   2761a:	f003 f943 	bl	2a8a4 <printk>
   2761e:	21c3      	movs	r1, #195	; 0xc3
   27620:	4805      	ldr	r0, [pc, #20]	; (27638 <z_pend_curr+0x44>)
   27622:	f003 fad8 	bl	2abd6 <assert_post_action>
   27626:	4620      	mov	r0, r4
}
   27628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2762c:	f7f4 bdd8 	b.w	1c1e0 <arch_swap>
   27630:	2000d3fc 	.word	0x2000d3fc
   27634:	2000d438 	.word	0x2000d438
   27638:	0002e5ae 	.word	0x0002e5ae
   2763c:	0002e574 	.word	0x0002e574

00027640 <z_set_prio>:
{
   27640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27642:	4604      	mov	r4, r0
   27644:	460e      	mov	r6, r1
	__asm__ volatile(
   27646:	f04f 0320 	mov.w	r3, #32
   2764a:	f3ef 8711 	mrs	r7, BASEPRI
   2764e:	f383 8812 	msr	BASEPRI_MAX, r3
   27652:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27656:	4837      	ldr	r0, [pc, #220]	; (27734 <z_set_prio+0xf4>)
   27658:	f7fe fd4c 	bl	260f4 <z_spin_lock_valid>
   2765c:	b940      	cbnz	r0, 27670 <z_set_prio+0x30>
   2765e:	4936      	ldr	r1, [pc, #216]	; (27738 <z_set_prio+0xf8>)
   27660:	4836      	ldr	r0, [pc, #216]	; (2773c <z_set_prio+0xfc>)
   27662:	2281      	movs	r2, #129	; 0x81
   27664:	f003 f91e 	bl	2a8a4 <printk>
   27668:	2181      	movs	r1, #129	; 0x81
   2766a:	4833      	ldr	r0, [pc, #204]	; (27738 <z_set_prio+0xf8>)
   2766c:	f003 fab3 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27670:	4830      	ldr	r0, [pc, #192]	; (27734 <z_set_prio+0xf4>)
   27672:	f7fe fd5b 	bl	2612c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27676:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   27678:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2767a:	06da      	lsls	r2, r3, #27
   2767c:	d156      	bne.n	2772c <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
   2767e:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   27680:	2d00      	cmp	r5, #0
   27682:	d153      	bne.n	2772c <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27688:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2768a:	4621      	mov	r1, r4
   2768c:	482c      	ldr	r0, [pc, #176]	; (27740 <z_set_prio+0x100>)
   2768e:	f7ff fc9b 	bl	26fc8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   27692:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   27694:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   27696:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2769a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2769c:	4b29      	ldr	r3, [pc, #164]	; (27744 <z_set_prio+0x104>)
   2769e:	429c      	cmp	r4, r3
   276a0:	d108      	bne.n	276b4 <z_set_prio+0x74>
   276a2:	4929      	ldr	r1, [pc, #164]	; (27748 <z_set_prio+0x108>)
   276a4:	4825      	ldr	r0, [pc, #148]	; (2773c <z_set_prio+0xfc>)
   276a6:	22ba      	movs	r2, #186	; 0xba
   276a8:	f003 f8fc 	bl	2a8a4 <printk>
   276ac:	21ba      	movs	r1, #186	; 0xba
   276ae:	4826      	ldr	r0, [pc, #152]	; (27748 <z_set_prio+0x108>)
   276b0:	f003 fa91 	bl	2abd6 <assert_post_action>
	return list->head == list;
   276b4:	4925      	ldr	r1, [pc, #148]	; (2774c <z_set_prio+0x10c>)
   276b6:	460b      	mov	r3, r1
   276b8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276bc:	4298      	cmp	r0, r3
   276be:	bf18      	it	ne
   276c0:	4605      	movne	r5, r0
   276c2:	2d00      	cmp	r5, #0
   276c4:	461a      	mov	r2, r3
   276c6:	462b      	mov	r3, r5
   276c8:	bf38      	it	cc
   276ca:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   276cc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   276ce:	b343      	cbz	r3, 27722 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
   276d0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   276d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   276d8:	4286      	cmp	r6, r0
   276da:	d01e      	beq.n	2771a <z_set_prio+0xda>
		return b2 - b1;
   276dc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   276de:	2800      	cmp	r0, #0
   276e0:	dd1b      	ble.n	2771a <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
   276e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   276e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   276e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   276ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   276ec:	2001      	movs	r0, #1
   276ee:	f7ff fce1 	bl	270b4 <update_cache>
   276f2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276f4:	480f      	ldr	r0, [pc, #60]	; (27734 <z_set_prio+0xf4>)
   276f6:	f7fe fd0b 	bl	26110 <z_spin_unlock_valid>
   276fa:	b940      	cbnz	r0, 2770e <z_set_prio+0xce>
   276fc:	490e      	ldr	r1, [pc, #56]	; (27738 <z_set_prio+0xf8>)
   276fe:	480f      	ldr	r0, [pc, #60]	; (2773c <z_set_prio+0xfc>)
   27700:	22ac      	movs	r2, #172	; 0xac
   27702:	f003 f8cf 	bl	2a8a4 <printk>
   27706:	21ac      	movs	r1, #172	; 0xac
   27708:	480b      	ldr	r0, [pc, #44]	; (27738 <z_set_prio+0xf8>)
   2770a:	f003 fa64 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2770e:	f387 8811 	msr	BASEPRI, r7
   27712:	f3bf 8f6f 	isb	sy
}
   27716:	4620      	mov	r0, r4
   27718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2771a:	42ab      	cmp	r3, r5
   2771c:	d001      	beq.n	27722 <z_set_prio+0xe2>
   2771e:	681b      	ldr	r3, [r3, #0]
   27720:	e7d5      	b.n	276ce <z_set_prio+0x8e>
	node->prev = tail;
   27722:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   27726:	602c      	str	r4, [r5, #0]
	list->tail = node;
   27728:	624c      	str	r4, [r1, #36]	; 0x24
}
   2772a:	e7df      	b.n	276ec <z_set_prio+0xac>
			thread->base.prio = prio;
   2772c:	73a6      	strb	r6, [r4, #14]
   2772e:	2400      	movs	r4, #0
   27730:	e7e0      	b.n	276f4 <z_set_prio+0xb4>
   27732:	bf00      	nop
   27734:	2000d43c 	.word	0x2000d43c
   27738:	0002e5ae 	.word	0x0002e5ae
   2773c:	0002e574 	.word	0x0002e574
   27740:	2000d41c 	.word	0x2000d41c
   27744:	2000cbd0 	.word	0x2000cbd0
   27748:	00030c89 	.word	0x00030c89
   2774c:	2000d3fc 	.word	0x2000d3fc

00027750 <z_impl_k_thread_suspend>:
{
   27750:	b570      	push	{r4, r5, r6, lr}
   27752:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   27754:	3018      	adds	r0, #24
   27756:	f000 fc63 	bl	28020 <z_abort_timeout>
	__asm__ volatile(
   2775a:	f04f 0320 	mov.w	r3, #32
   2775e:	f3ef 8611 	mrs	r6, BASEPRI
   27762:	f383 8812 	msr	BASEPRI_MAX, r3
   27766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2776a:	4820      	ldr	r0, [pc, #128]	; (277ec <z_impl_k_thread_suspend+0x9c>)
   2776c:	f7fe fcc2 	bl	260f4 <z_spin_lock_valid>
   27770:	b940      	cbnz	r0, 27784 <z_impl_k_thread_suspend+0x34>
   27772:	491f      	ldr	r1, [pc, #124]	; (277f0 <z_impl_k_thread_suspend+0xa0>)
   27774:	481f      	ldr	r0, [pc, #124]	; (277f4 <z_impl_k_thread_suspend+0xa4>)
   27776:	2281      	movs	r2, #129	; 0x81
   27778:	f003 f894 	bl	2a8a4 <printk>
   2777c:	2181      	movs	r1, #129	; 0x81
   2777e:	481c      	ldr	r0, [pc, #112]	; (277f0 <z_impl_k_thread_suspend+0xa0>)
   27780:	f003 fa29 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27784:	4819      	ldr	r0, [pc, #100]	; (277ec <z_impl_k_thread_suspend+0x9c>)
   27786:	f7fe fcd1 	bl	2612c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2778a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2778e:	7b63      	ldrb	r3, [r4, #13]
   27790:	2a00      	cmp	r2, #0
   27792:	da06      	bge.n	277a2 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   27798:	4621      	mov	r1, r4
   2779a:	4817      	ldr	r0, [pc, #92]	; (277f8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2779c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2779e:	f7ff fc13 	bl	26fc8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   277a2:	4d16      	ldr	r5, [pc, #88]	; (277fc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   277a4:	7b63      	ldrb	r3, [r4, #13]
   277a6:	68a8      	ldr	r0, [r5, #8]
   277a8:	f043 0310 	orr.w	r3, r3, #16
   277ac:	7363      	strb	r3, [r4, #13]
   277ae:	1b03      	subs	r3, r0, r4
   277b0:	4258      	negs	r0, r3
   277b2:	4158      	adcs	r0, r3
   277b4:	f7ff fc7e 	bl	270b4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   277b8:	480c      	ldr	r0, [pc, #48]	; (277ec <z_impl_k_thread_suspend+0x9c>)
   277ba:	f7fe fca9 	bl	26110 <z_spin_unlock_valid>
   277be:	b940      	cbnz	r0, 277d2 <z_impl_k_thread_suspend+0x82>
   277c0:	490b      	ldr	r1, [pc, #44]	; (277f0 <z_impl_k_thread_suspend+0xa0>)
   277c2:	480c      	ldr	r0, [pc, #48]	; (277f4 <z_impl_k_thread_suspend+0xa4>)
   277c4:	22ac      	movs	r2, #172	; 0xac
   277c6:	f003 f86d 	bl	2a8a4 <printk>
   277ca:	21ac      	movs	r1, #172	; 0xac
   277cc:	4808      	ldr	r0, [pc, #32]	; (277f0 <z_impl_k_thread_suspend+0xa0>)
   277ce:	f003 fa02 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   277d2:	f386 8811 	msr	BASEPRI, r6
   277d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   277da:	68ab      	ldr	r3, [r5, #8]
   277dc:	42a3      	cmp	r3, r4
   277de:	d103      	bne.n	277e8 <z_impl_k_thread_suspend+0x98>
}
   277e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   277e4:	f005 b91f 	b.w	2ca26 <z_reschedule_unlocked>
}
   277e8:	bd70      	pop	{r4, r5, r6, pc}
   277ea:	bf00      	nop
   277ec:	2000d43c 	.word	0x2000d43c
   277f0:	0002e5ae 	.word	0x0002e5ae
   277f4:	0002e574 	.word	0x0002e574
   277f8:	2000d41c 	.word	0x2000d41c
   277fc:	2000d3fc 	.word	0x2000d3fc

00027800 <k_sched_unlock>:
{
   27800:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27802:	f04f 0320 	mov.w	r3, #32
   27806:	f3ef 8511 	mrs	r5, BASEPRI
   2780a:	f383 8812 	msr	BASEPRI_MAX, r3
   2780e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27812:	4824      	ldr	r0, [pc, #144]	; (278a4 <k_sched_unlock+0xa4>)
   27814:	f7fe fc6e 	bl	260f4 <z_spin_lock_valid>
   27818:	b940      	cbnz	r0, 2782c <k_sched_unlock+0x2c>
   2781a:	4923      	ldr	r1, [pc, #140]	; (278a8 <k_sched_unlock+0xa8>)
   2781c:	4823      	ldr	r0, [pc, #140]	; (278ac <k_sched_unlock+0xac>)
   2781e:	2281      	movs	r2, #129	; 0x81
   27820:	f003 f840 	bl	2a8a4 <printk>
   27824:	2181      	movs	r1, #129	; 0x81
   27826:	4820      	ldr	r0, [pc, #128]	; (278a8 <k_sched_unlock+0xa8>)
   27828:	f003 f9d5 	bl	2abd6 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2782c:	4c20      	ldr	r4, [pc, #128]	; (278b0 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   2782e:	481d      	ldr	r0, [pc, #116]	; (278a4 <k_sched_unlock+0xa4>)
   27830:	f7fe fc7c 	bl	2612c <z_spin_lock_set_owner>
   27834:	68a2      	ldr	r2, [r4, #8]
   27836:	7bd2      	ldrb	r2, [r2, #15]
   27838:	b952      	cbnz	r2, 27850 <k_sched_unlock+0x50>
   2783a:	491e      	ldr	r1, [pc, #120]	; (278b4 <k_sched_unlock+0xb4>)
   2783c:	481b      	ldr	r0, [pc, #108]	; (278ac <k_sched_unlock+0xac>)
   2783e:	f240 3285 	movw	r2, #901	; 0x385
   27842:	f003 f82f 	bl	2a8a4 <printk>
   27846:	f240 3185 	movw	r1, #901	; 0x385
   2784a:	481a      	ldr	r0, [pc, #104]	; (278b4 <k_sched_unlock+0xb4>)
   2784c:	f003 f9c3 	bl	2abd6 <assert_post_action>
   27850:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   27854:	b153      	cbz	r3, 2786c <k_sched_unlock+0x6c>
   27856:	4917      	ldr	r1, [pc, #92]	; (278b4 <k_sched_unlock+0xb4>)
   27858:	4814      	ldr	r0, [pc, #80]	; (278ac <k_sched_unlock+0xac>)
   2785a:	f240 3286 	movw	r2, #902	; 0x386
   2785e:	f003 f821 	bl	2a8a4 <printk>
   27862:	f240 3186 	movw	r1, #902	; 0x386
   27866:	4813      	ldr	r0, [pc, #76]	; (278b4 <k_sched_unlock+0xb4>)
   27868:	f003 f9b5 	bl	2abd6 <assert_post_action>
		++_current->base.sched_locked;
   2786c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2786e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   27870:	7bd3      	ldrb	r3, [r2, #15]
   27872:	3301      	adds	r3, #1
   27874:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   27876:	f7ff fc1d 	bl	270b4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2787a:	480a      	ldr	r0, [pc, #40]	; (278a4 <k_sched_unlock+0xa4>)
   2787c:	f7fe fc48 	bl	26110 <z_spin_unlock_valid>
   27880:	b940      	cbnz	r0, 27894 <k_sched_unlock+0x94>
   27882:	4909      	ldr	r1, [pc, #36]	; (278a8 <k_sched_unlock+0xa8>)
   27884:	4809      	ldr	r0, [pc, #36]	; (278ac <k_sched_unlock+0xac>)
   27886:	22ac      	movs	r2, #172	; 0xac
   27888:	f003 f80c 	bl	2a8a4 <printk>
   2788c:	21ac      	movs	r1, #172	; 0xac
   2788e:	4806      	ldr	r0, [pc, #24]	; (278a8 <k_sched_unlock+0xa8>)
   27890:	f003 f9a1 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27894:	f385 8811 	msr	BASEPRI, r5
   27898:	f3bf 8f6f 	isb	sy
}
   2789c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   278a0:	f005 b8c1 	b.w	2ca26 <z_reschedule_unlocked>
   278a4:	2000d43c 	.word	0x2000d43c
   278a8:	0002e5ae 	.word	0x0002e5ae
   278ac:	0002e574 	.word	0x0002e574
   278b0:	2000d3fc 	.word	0x2000d3fc
   278b4:	00030c89 	.word	0x00030c89

000278b8 <z_unpend_first_thread>:
{
   278b8:	b538      	push	{r3, r4, r5, lr}
   278ba:	4604      	mov	r4, r0
	__asm__ volatile(
   278bc:	f04f 0320 	mov.w	r3, #32
   278c0:	f3ef 8511 	mrs	r5, BASEPRI
   278c4:	f383 8812 	msr	BASEPRI_MAX, r3
   278c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   278cc:	4816      	ldr	r0, [pc, #88]	; (27928 <z_unpend_first_thread+0x70>)
   278ce:	f7fe fc11 	bl	260f4 <z_spin_lock_valid>
   278d2:	b940      	cbnz	r0, 278e6 <z_unpend_first_thread+0x2e>
   278d4:	4915      	ldr	r1, [pc, #84]	; (2792c <z_unpend_first_thread+0x74>)
   278d6:	4816      	ldr	r0, [pc, #88]	; (27930 <z_unpend_first_thread+0x78>)
   278d8:	2281      	movs	r2, #129	; 0x81
   278da:	f002 ffe3 	bl	2a8a4 <printk>
   278de:	2181      	movs	r1, #129	; 0x81
   278e0:	4812      	ldr	r0, [pc, #72]	; (2792c <z_unpend_first_thread+0x74>)
   278e2:	f003 f978 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   278e6:	4810      	ldr	r0, [pc, #64]	; (27928 <z_unpend_first_thread+0x70>)
   278e8:	f7fe fc20 	bl	2612c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   278ec:	4620      	mov	r0, r4
   278ee:	f005 f8a4 	bl	2ca3a <z_priq_dumb_best>
		if (thread != NULL) {
   278f2:	4604      	mov	r4, r0
   278f4:	b128      	cbz	r0, 27902 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   278f6:	f7ff fb85 	bl	27004 <unpend_thread_no_timeout>
   278fa:	f104 0018 	add.w	r0, r4, #24
   278fe:	f000 fb8f 	bl	28020 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27902:	4809      	ldr	r0, [pc, #36]	; (27928 <z_unpend_first_thread+0x70>)
   27904:	f7fe fc04 	bl	26110 <z_spin_unlock_valid>
   27908:	b940      	cbnz	r0, 2791c <z_unpend_first_thread+0x64>
   2790a:	4908      	ldr	r1, [pc, #32]	; (2792c <z_unpend_first_thread+0x74>)
   2790c:	4808      	ldr	r0, [pc, #32]	; (27930 <z_unpend_first_thread+0x78>)
   2790e:	22ac      	movs	r2, #172	; 0xac
   27910:	f002 ffc8 	bl	2a8a4 <printk>
   27914:	21ac      	movs	r1, #172	; 0xac
   27916:	4805      	ldr	r0, [pc, #20]	; (2792c <z_unpend_first_thread+0x74>)
   27918:	f003 f95d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2791c:	f385 8811 	msr	BASEPRI, r5
   27920:	f3bf 8f6f 	isb	sy
}
   27924:	4620      	mov	r0, r4
   27926:	bd38      	pop	{r3, r4, r5, pc}
   27928:	2000d43c 	.word	0x2000d43c
   2792c:	0002e5ae 	.word	0x0002e5ae
   27930:	0002e574 	.word	0x0002e574

00027934 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   27934:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   27936:	4b04      	ldr	r3, [pc, #16]	; (27948 <z_sched_init+0x14>)
   27938:	4608      	mov	r0, r1
   2793a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2793e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   27942:	f7ff ba63 	b.w	26e0c <k_sched_time_slice_set>
   27946:	bf00      	nop
   27948:	2000d3fc 	.word	0x2000d3fc

0002794c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2794e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27952:	b153      	cbz	r3, 2796a <z_impl_k_yield+0x1e>
   27954:	4939      	ldr	r1, [pc, #228]	; (27a3c <z_impl_k_yield+0xf0>)
   27956:	483a      	ldr	r0, [pc, #232]	; (27a40 <z_impl_k_yield+0xf4>)
   27958:	f240 42dc 	movw	r2, #1244	; 0x4dc
   2795c:	f002 ffa2 	bl	2a8a4 <printk>
   27960:	f240 41dc 	movw	r1, #1244	; 0x4dc
   27964:	4835      	ldr	r0, [pc, #212]	; (27a3c <z_impl_k_yield+0xf0>)
   27966:	f003 f936 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2796a:	f04f 0320 	mov.w	r3, #32
   2796e:	f3ef 8611 	mrs	r6, BASEPRI
   27972:	f383 8812 	msr	BASEPRI_MAX, r3
   27976:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2797a:	4832      	ldr	r0, [pc, #200]	; (27a44 <z_impl_k_yield+0xf8>)
   2797c:	f7fe fbba 	bl	260f4 <z_spin_lock_valid>
   27980:	b940      	cbnz	r0, 27994 <z_impl_k_yield+0x48>
   27982:	4931      	ldr	r1, [pc, #196]	; (27a48 <z_impl_k_yield+0xfc>)
   27984:	482e      	ldr	r0, [pc, #184]	; (27a40 <z_impl_k_yield+0xf4>)
   27986:	2281      	movs	r2, #129	; 0x81
   27988:	f002 ff8c 	bl	2a8a4 <printk>
   2798c:	2181      	movs	r1, #129	; 0x81
   2798e:	482e      	ldr	r0, [pc, #184]	; (27a48 <z_impl_k_yield+0xfc>)
   27990:	f003 f921 	bl	2abd6 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   27994:	4d2d      	ldr	r5, [pc, #180]	; (27a4c <z_impl_k_yield+0x100>)
	z_spin_lock_set_owner(l);
   27996:	482b      	ldr	r0, [pc, #172]	; (27a44 <z_impl_k_yield+0xf8>)
   27998:	f7fe fbc8 	bl	2612c <z_spin_lock_set_owner>
   2799c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   2799e:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   279a2:	7b4b      	ldrb	r3, [r1, #13]
   279a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   279a8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   279aa:	f7ff fb0d 	bl	26fc8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   279ae:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   279b0:	7b63      	ldrb	r3, [r4, #13]
   279b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   279b6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   279b8:	4b25      	ldr	r3, [pc, #148]	; (27a50 <z_impl_k_yield+0x104>)
   279ba:	429c      	cmp	r4, r3
   279bc:	d108      	bne.n	279d0 <z_impl_k_yield+0x84>
   279be:	491f      	ldr	r1, [pc, #124]	; (27a3c <z_impl_k_yield+0xf0>)
   279c0:	481f      	ldr	r0, [pc, #124]	; (27a40 <z_impl_k_yield+0xf4>)
   279c2:	22ba      	movs	r2, #186	; 0xba
   279c4:	f002 ff6e 	bl	2a8a4 <printk>
   279c8:	21ba      	movs	r1, #186	; 0xba
   279ca:	481c      	ldr	r0, [pc, #112]	; (27a3c <z_impl_k_yield+0xf0>)
   279cc:	f003 f903 	bl	2abd6 <assert_post_action>
	return list->head == list;
   279d0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   279d2:	4820      	ldr	r0, [pc, #128]	; (27a54 <z_impl_k_yield+0x108>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   279d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   279d6:	4283      	cmp	r3, r0
   279d8:	bf08      	it	eq
   279da:	2300      	moveq	r3, #0
   279dc:	2b00      	cmp	r3, #0
   279de:	bf38      	it	cc
   279e0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   279e2:	b333      	cbz	r3, 27a32 <z_impl_k_yield+0xe6>
	int32_t b1 = thread_1->base.prio;
   279e4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   279e8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   279ec:	4297      	cmp	r7, r2
   279ee:	d01c      	beq.n	27a2a <z_impl_k_yield+0xde>
		return b2 - b1;
   279f0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   279f2:	2a00      	cmp	r2, #0
   279f4:	dd19      	ble.n	27a2a <z_impl_k_yield+0xde>
	sys_dnode_t *const prev = successor->prev;
   279f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   279f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   279fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   279fe:	605c      	str	r4, [r3, #4]
	update_cache(1);
   27a00:	2001      	movs	r0, #1
   27a02:	f7ff fb57 	bl	270b4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a06:	480f      	ldr	r0, [pc, #60]	; (27a44 <z_impl_k_yield+0xf8>)
   27a08:	f7fe fb82 	bl	26110 <z_spin_unlock_valid>
   27a0c:	b940      	cbnz	r0, 27a20 <z_impl_k_yield+0xd4>
   27a0e:	490e      	ldr	r1, [pc, #56]	; (27a48 <z_impl_k_yield+0xfc>)
   27a10:	480b      	ldr	r0, [pc, #44]	; (27a40 <z_impl_k_yield+0xf4>)
   27a12:	22c3      	movs	r2, #195	; 0xc3
   27a14:	f002 ff46 	bl	2a8a4 <printk>
   27a18:	21c3      	movs	r1, #195	; 0xc3
   27a1a:	480b      	ldr	r0, [pc, #44]	; (27a48 <z_impl_k_yield+0xfc>)
   27a1c:	f003 f8db 	bl	2abd6 <assert_post_action>
   27a20:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27a26:	f7f4 bbdb 	b.w	1c1e0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   27a2a:	428b      	cmp	r3, r1
   27a2c:	d001      	beq.n	27a32 <z_impl_k_yield+0xe6>
   27a2e:	681b      	ldr	r3, [r3, #0]
   27a30:	e7d7      	b.n	279e2 <z_impl_k_yield+0x96>
	node->prev = tail;
   27a32:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   27a36:	600c      	str	r4, [r1, #0]
	list->tail = node;
   27a38:	626c      	str	r4, [r5, #36]	; 0x24
}
   27a3a:	e7e1      	b.n	27a00 <z_impl_k_yield+0xb4>
   27a3c:	00030c89 	.word	0x00030c89
   27a40:	0002e574 	.word	0x0002e574
   27a44:	2000d43c 	.word	0x2000d43c
   27a48:	0002e5ae 	.word	0x0002e5ae
   27a4c:	2000d3fc 	.word	0x2000d3fc
   27a50:	2000cbd0 	.word	0x2000cbd0
   27a54:	2000d41c 	.word	0x2000d41c

00027a58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   27a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a5c:	4604      	mov	r4, r0
   27a5e:	460d      	mov	r5, r1
   27a60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27a64:	b153      	cbz	r3, 27a7c <z_tick_sleep+0x24>
   27a66:	493c      	ldr	r1, [pc, #240]	; (27b58 <z_tick_sleep+0x100>)
   27a68:	483c      	ldr	r0, [pc, #240]	; (27b5c <z_tick_sleep+0x104>)
   27a6a:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   27a6e:	f002 ff19 	bl	2a8a4 <printk>
   27a72:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   27a76:	4838      	ldr	r0, [pc, #224]	; (27b58 <z_tick_sleep+0x100>)
   27a78:	f003 f8ad 	bl	2abd6 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   27a7c:	ea54 0305 	orrs.w	r3, r4, r5
   27a80:	d104      	bne.n	27a8c <z_tick_sleep+0x34>
	z_impl_k_yield();
   27a82:	f7ff ff63 	bl	2794c <z_impl_k_yield>
		k_yield();
		return 0;
   27a86:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   27a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   27a8c:	f06f 0301 	mvn.w	r3, #1
   27a90:	1b1e      	subs	r6, r3, r4
   27a92:	f04f 33ff 	mov.w	r3, #4294967295
   27a96:	eb63 0705 	sbc.w	r7, r3, r5
   27a9a:	2e01      	cmp	r6, #1
   27a9c:	f177 0300 	sbcs.w	r3, r7, #0
   27aa0:	da56      	bge.n	27b50 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27aa2:	f004 ffe4 	bl	2ca6e <sys_clock_tick_get_32>
   27aa6:	1906      	adds	r6, r0, r4
   27aa8:	f04f 0320 	mov.w	r3, #32
   27aac:	f3ef 8811 	mrs	r8, BASEPRI
   27ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   27ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ab8:	4829      	ldr	r0, [pc, #164]	; (27b60 <z_tick_sleep+0x108>)
   27aba:	f7fe fb1b 	bl	260f4 <z_spin_lock_valid>
   27abe:	b940      	cbnz	r0, 27ad2 <z_tick_sleep+0x7a>
   27ac0:	4928      	ldr	r1, [pc, #160]	; (27b64 <z_tick_sleep+0x10c>)
   27ac2:	4826      	ldr	r0, [pc, #152]	; (27b5c <z_tick_sleep+0x104>)
   27ac4:	2281      	movs	r2, #129	; 0x81
   27ac6:	f002 feed 	bl	2a8a4 <printk>
   27aca:	2181      	movs	r1, #129	; 0x81
   27acc:	4825      	ldr	r0, [pc, #148]	; (27b64 <z_tick_sleep+0x10c>)
   27ace:	f003 f882 	bl	2abd6 <assert_post_action>
	pending_current = _current;
   27ad2:	4f25      	ldr	r7, [pc, #148]	; (27b68 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
   27ad4:	4822      	ldr	r0, [pc, #136]	; (27b60 <z_tick_sleep+0x108>)
   27ad6:	f7fe fb29 	bl	2612c <z_spin_lock_set_owner>
   27ada:	68b8      	ldr	r0, [r7, #8]
   27adc:	4b23      	ldr	r3, [pc, #140]	; (27b6c <z_tick_sleep+0x114>)
   27ade:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27ae0:	f7ff fce0 	bl	274a4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27ae4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27ae6:	4622      	mov	r2, r4
   27ae8:	462b      	mov	r3, r5
   27aea:	3018      	adds	r0, #24
   27aec:	4920      	ldr	r1, [pc, #128]	; (27b70 <z_tick_sleep+0x118>)
   27aee:	f000 f9dd 	bl	27eac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27af2:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27af4:	481a      	ldr	r0, [pc, #104]	; (27b60 <z_tick_sleep+0x108>)
   27af6:	7b53      	ldrb	r3, [r2, #13]
   27af8:	f043 0310 	orr.w	r3, r3, #16
   27afc:	7353      	strb	r3, [r2, #13]
   27afe:	f7fe fb07 	bl	26110 <z_spin_unlock_valid>
   27b02:	b940      	cbnz	r0, 27b16 <z_tick_sleep+0xbe>
   27b04:	4917      	ldr	r1, [pc, #92]	; (27b64 <z_tick_sleep+0x10c>)
   27b06:	4815      	ldr	r0, [pc, #84]	; (27b5c <z_tick_sleep+0x104>)
   27b08:	22c3      	movs	r2, #195	; 0xc3
   27b0a:	f002 fecb 	bl	2a8a4 <printk>
   27b0e:	21c3      	movs	r1, #195	; 0xc3
   27b10:	4814      	ldr	r0, [pc, #80]	; (27b64 <z_tick_sleep+0x10c>)
   27b12:	f003 f860 	bl	2abd6 <assert_post_action>
   27b16:	4640      	mov	r0, r8
   27b18:	f7f4 fb62 	bl	1c1e0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27b1c:	68bb      	ldr	r3, [r7, #8]
   27b1e:	7b5b      	ldrb	r3, [r3, #13]
   27b20:	06db      	lsls	r3, r3, #27
   27b22:	d50a      	bpl.n	27b3a <z_tick_sleep+0xe2>
   27b24:	490c      	ldr	r1, [pc, #48]	; (27b58 <z_tick_sleep+0x100>)
   27b26:	480d      	ldr	r0, [pc, #52]	; (27b5c <z_tick_sleep+0x104>)
   27b28:	f240 5219 	movw	r2, #1305	; 0x519
   27b2c:	f002 feba 	bl	2a8a4 <printk>
   27b30:	f240 5119 	movw	r1, #1305	; 0x519
   27b34:	4808      	ldr	r0, [pc, #32]	; (27b58 <z_tick_sleep+0x100>)
   27b36:	f003 f84e 	bl	2abd6 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27b3a:	f004 ff98 	bl	2ca6e <sys_clock_tick_get_32>
   27b3e:	1a30      	subs	r0, r6, r0
   27b40:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   27b44:	2801      	cmp	r0, #1
   27b46:	f171 0300 	sbcs.w	r3, r1, #0
   27b4a:	bfb8      	it	lt
   27b4c:	2000      	movlt	r0, #0
   27b4e:	e79b      	b.n	27a88 <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   27b50:	f06f 0601 	mvn.w	r6, #1
   27b54:	1b36      	subs	r6, r6, r4
   27b56:	e7a7      	b.n	27aa8 <z_tick_sleep+0x50>
   27b58:	00030c89 	.word	0x00030c89
   27b5c:	0002e574 	.word	0x0002e574
   27b60:	2000d43c 	.word	0x2000d43c
   27b64:	0002e5ae 	.word	0x0002e5ae
   27b68:	2000d3fc 	.word	0x2000d3fc
   27b6c:	2000d438 	.word	0x2000d438
   27b70:	00027415 	.word	0x00027415

00027b74 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   27b74:	b538      	push	{r3, r4, r5, lr}
   27b76:	4604      	mov	r4, r0
   27b78:	460d      	mov	r5, r1
   27b7a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27b7e:	b153      	cbz	r3, 27b96 <z_impl_k_sleep+0x22>
   27b80:	4911      	ldr	r1, [pc, #68]	; (27bc8 <z_impl_k_sleep+0x54>)
   27b82:	4812      	ldr	r0, [pc, #72]	; (27bcc <z_impl_k_sleep+0x58>)
   27b84:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   27b88:	f002 fe8c 	bl	2a8a4 <printk>
   27b8c:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   27b90:	480d      	ldr	r0, [pc, #52]	; (27bc8 <z_impl_k_sleep+0x54>)
   27b92:	f003 f820 	bl	2abd6 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27b96:	1c6b      	adds	r3, r5, #1
   27b98:	bf08      	it	eq
   27b9a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   27b9e:	d106      	bne.n	27bae <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   27ba0:	4b0b      	ldr	r3, [pc, #44]	; (27bd0 <z_impl_k_sleep+0x5c>)
   27ba2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27ba4:	f7ff fdd4 	bl	27750 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   27ba8:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   27bac:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   27bae:	4620      	mov	r0, r4
   27bb0:	4629      	mov	r1, r5
   27bb2:	f7ff ff51 	bl	27a58 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   27bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27bba:	fb80 3403 	smull	r3, r4, r0, r3
   27bbe:	0bd8      	lsrs	r0, r3, #15
   27bc0:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   27bc4:	e7f2      	b.n	27bac <z_impl_k_sleep+0x38>
   27bc6:	bf00      	nop
   27bc8:	00030c89 	.word	0x00030c89
   27bcc:	0002e574 	.word	0x0002e574
   27bd0:	2000d3fc 	.word	0x2000d3fc

00027bd4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27bd4:	4b01      	ldr	r3, [pc, #4]	; (27bdc <z_impl_z_current_get+0x8>)
   27bd6:	6898      	ldr	r0, [r3, #8]
   27bd8:	4770      	bx	lr
   27bda:	bf00      	nop
   27bdc:	2000d3fc 	.word	0x2000d3fc

00027be0 <z_impl_k_is_preempt_thread>:
   27be0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   27be4:	b93b      	cbnz	r3, 27bf6 <z_impl_k_is_preempt_thread+0x16>
   27be6:	4b05      	ldr	r3, [pc, #20]	; (27bfc <z_impl_k_is_preempt_thread+0x1c>)
   27be8:	689b      	ldr	r3, [r3, #8]
   27bea:	89d8      	ldrh	r0, [r3, #14]
   27bec:	287f      	cmp	r0, #127	; 0x7f
   27bee:	bf8c      	ite	hi
   27bf0:	2000      	movhi	r0, #0
   27bf2:	2001      	movls	r0, #1
   27bf4:	4770      	bx	lr
   27bf6:	2000      	movs	r0, #0
}
   27bf8:	4770      	bx	lr
   27bfa:	bf00      	nop
   27bfc:	2000d3fc 	.word	0x2000d3fc

00027c00 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   27c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c04:	4604      	mov	r4, r0
   27c06:	f04f 0320 	mov.w	r3, #32
   27c0a:	f3ef 8611 	mrs	r6, BASEPRI
   27c0e:	f383 8812 	msr	BASEPRI_MAX, r3
   27c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c16:	483e      	ldr	r0, [pc, #248]	; (27d10 <z_thread_abort+0x110>)
   27c18:	f7fe fa6c 	bl	260f4 <z_spin_lock_valid>
   27c1c:	b940      	cbnz	r0, 27c30 <z_thread_abort+0x30>
   27c1e:	493d      	ldr	r1, [pc, #244]	; (27d14 <z_thread_abort+0x114>)
   27c20:	483d      	ldr	r0, [pc, #244]	; (27d18 <z_thread_abort+0x118>)
   27c22:	2281      	movs	r2, #129	; 0x81
   27c24:	f002 fe3e 	bl	2a8a4 <printk>
   27c28:	2181      	movs	r1, #129	; 0x81
   27c2a:	483a      	ldr	r0, [pc, #232]	; (27d14 <z_thread_abort+0x114>)
   27c2c:	f002 ffd3 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27c30:	4837      	ldr	r0, [pc, #220]	; (27d10 <z_thread_abort+0x110>)
   27c32:	f7fe fa7b 	bl	2612c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27c36:	7b63      	ldrb	r3, [r4, #13]
   27c38:	071a      	lsls	r2, r3, #28
   27c3a:	d512      	bpl.n	27c62 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c3c:	4834      	ldr	r0, [pc, #208]	; (27d10 <z_thread_abort+0x110>)
   27c3e:	f7fe fa67 	bl	26110 <z_spin_unlock_valid>
   27c42:	b940      	cbnz	r0, 27c56 <z_thread_abort+0x56>
   27c44:	4933      	ldr	r1, [pc, #204]	; (27d14 <z_thread_abort+0x114>)
   27c46:	4834      	ldr	r0, [pc, #208]	; (27d18 <z_thread_abort+0x118>)
   27c48:	22ac      	movs	r2, #172	; 0xac
   27c4a:	f002 fe2b 	bl	2a8a4 <printk>
   27c4e:	21ac      	movs	r1, #172	; 0xac
   27c50:	4830      	ldr	r0, [pc, #192]	; (27d14 <z_thread_abort+0x114>)
   27c52:	f002 ffc0 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27c56:	f386 8811 	msr	BASEPRI, r6
   27c5a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   27c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27c62:	f023 0220 	bic.w	r2, r3, #32
   27c66:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   27c6a:	09d2      	lsrs	r2, r2, #7
   27c6c:	d138      	bne.n	27ce0 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27c6e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   27c70:	68a3      	ldr	r3, [r4, #8]
   27c72:	b113      	cbz	r3, 27c7a <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   27c74:	4620      	mov	r0, r4
   27c76:	f7ff f9c5 	bl	27004 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27c7a:	f104 0018 	add.w	r0, r4, #24
   27c7e:	f000 f9cf 	bl	28020 <z_abort_timeout>
   27c82:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   27c86:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   27c8a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c8c:	42bd      	cmp	r5, r7
   27c8e:	d000      	beq.n	27c92 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27c90:	bb85      	cbnz	r5, 27cf4 <z_thread_abort+0xf4>
		update_cache(1);
   27c92:	2001      	movs	r0, #1
   27c94:	f7ff fa0e 	bl	270b4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   27c98:	4b20      	ldr	r3, [pc, #128]	; (27d1c <z_thread_abort+0x11c>)
   27c9a:	689b      	ldr	r3, [r3, #8]
   27c9c:	42a3      	cmp	r3, r4
   27c9e:	d1cd      	bne.n	27c3c <z_thread_abort+0x3c>
   27ca0:	f3ef 8305 	mrs	r3, IPSR
   27ca4:	2b00      	cmp	r3, #0
   27ca6:	d1c9      	bne.n	27c3c <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ca8:	4819      	ldr	r0, [pc, #100]	; (27d10 <z_thread_abort+0x110>)
   27caa:	f7fe fa31 	bl	26110 <z_spin_unlock_valid>
   27cae:	b940      	cbnz	r0, 27cc2 <z_thread_abort+0xc2>
   27cb0:	4918      	ldr	r1, [pc, #96]	; (27d14 <z_thread_abort+0x114>)
   27cb2:	4819      	ldr	r0, [pc, #100]	; (27d18 <z_thread_abort+0x118>)
   27cb4:	22c3      	movs	r2, #195	; 0xc3
   27cb6:	f002 fdf5 	bl	2a8a4 <printk>
   27cba:	21c3      	movs	r1, #195	; 0xc3
   27cbc:	4815      	ldr	r0, [pc, #84]	; (27d14 <z_thread_abort+0x114>)
   27cbe:	f002 ff8a 	bl	2abd6 <assert_post_action>
   27cc2:	4630      	mov	r0, r6
   27cc4:	f7f4 fa8c 	bl	1c1e0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27cc8:	f240 624b 	movw	r2, #1611	; 0x64b
   27ccc:	4914      	ldr	r1, [pc, #80]	; (27d20 <z_thread_abort+0x120>)
   27cce:	4812      	ldr	r0, [pc, #72]	; (27d18 <z_thread_abort+0x118>)
   27cd0:	f002 fde8 	bl	2a8a4 <printk>
   27cd4:	f240 614b 	movw	r1, #1611	; 0x64b
   27cd8:	4811      	ldr	r0, [pc, #68]	; (27d20 <z_thread_abort+0x120>)
   27cda:	f002 ff7c 	bl	2abd6 <assert_post_action>
   27cde:	e7ad      	b.n	27c3c <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27ce0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27ce4:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   27ce8:	4621      	mov	r1, r4
   27cea:	480e      	ldr	r0, [pc, #56]	; (27d24 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27cec:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27cee:	f7ff f96b 	bl	26fc8 <z_priq_dumb_remove>
}
   27cf2:	e7bd      	b.n	27c70 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   27cf4:	4628      	mov	r0, r5
   27cf6:	f7ff f985 	bl	27004 <unpend_thread_no_timeout>
   27cfa:	f105 0018 	add.w	r0, r5, #24
   27cfe:	f000 f98f 	bl	28020 <z_abort_timeout>
		ready_thread(thread);
   27d02:	4628      	mov	r0, r5
   27d04:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   27d08:	f7ff fabe 	bl	27288 <ready_thread>
   27d0c:	e7bd      	b.n	27c8a <z_thread_abort+0x8a>
   27d0e:	bf00      	nop
   27d10:	2000d43c 	.word	0x2000d43c
   27d14:	0002e5ae 	.word	0x0002e5ae
   27d18:	0002e574 	.word	0x0002e574
   27d1c:	2000d3fc 	.word	0x2000d3fc
   27d20:	00030c89 	.word	0x00030c89
   27d24:	2000d41c 	.word	0x2000d41c

00027d28 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d2a:	4604      	mov	r4, r0
   27d2c:	460e      	mov	r6, r1
   27d2e:	4615      	mov	r5, r2
	__asm__ volatile(
   27d30:	f04f 0320 	mov.w	r3, #32
   27d34:	f3ef 8711 	mrs	r7, BASEPRI
   27d38:	f383 8812 	msr	BASEPRI_MAX, r3
   27d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d40:	4819      	ldr	r0, [pc, #100]	; (27da8 <z_sched_wake+0x80>)
   27d42:	f7fe f9d7 	bl	260f4 <z_spin_lock_valid>
   27d46:	b940      	cbnz	r0, 27d5a <z_sched_wake+0x32>
   27d48:	4918      	ldr	r1, [pc, #96]	; (27dac <z_sched_wake+0x84>)
   27d4a:	4819      	ldr	r0, [pc, #100]	; (27db0 <z_sched_wake+0x88>)
   27d4c:	2281      	movs	r2, #129	; 0x81
   27d4e:	f002 fda9 	bl	2a8a4 <printk>
   27d52:	2181      	movs	r1, #129	; 0x81
   27d54:	4815      	ldr	r0, [pc, #84]	; (27dac <z_sched_wake+0x84>)
   27d56:	f002 ff3e 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27d5a:	4813      	ldr	r0, [pc, #76]	; (27da8 <z_sched_wake+0x80>)
   27d5c:	f7fe f9e6 	bl	2612c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   27d60:	4620      	mov	r0, r4
   27d62:	f004 fe6a 	bl	2ca3a <z_priq_dumb_best>

		if (thread != NULL) {
   27d66:	4604      	mov	r4, r0
   27d68:	b158      	cbz	r0, 27d82 <z_sched_wake+0x5a>
   27d6a:	67c6      	str	r6, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   27d6c:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27d6e:	f7ff f949 	bl	27004 <unpend_thread_no_timeout>
   27d72:	f104 0018 	add.w	r0, r4, #24
   27d76:	f000 f953 	bl	28020 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27d7a:	4620      	mov	r0, r4
   27d7c:	f7ff fa84 	bl	27288 <ready_thread>
			ret = true;
   27d80:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d82:	4809      	ldr	r0, [pc, #36]	; (27da8 <z_sched_wake+0x80>)
   27d84:	f7fe f9c4 	bl	26110 <z_spin_unlock_valid>
   27d88:	b940      	cbnz	r0, 27d9c <z_sched_wake+0x74>
   27d8a:	4908      	ldr	r1, [pc, #32]	; (27dac <z_sched_wake+0x84>)
   27d8c:	4808      	ldr	r0, [pc, #32]	; (27db0 <z_sched_wake+0x88>)
   27d8e:	22ac      	movs	r2, #172	; 0xac
   27d90:	f002 fd88 	bl	2a8a4 <printk>
   27d94:	21ac      	movs	r1, #172	; 0xac
   27d96:	4805      	ldr	r0, [pc, #20]	; (27dac <z_sched_wake+0x84>)
   27d98:	f002 ff1d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27d9c:	f387 8811 	msr	BASEPRI, r7
   27da0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27da4:	4620      	mov	r0, r4
   27da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27da8:	2000d43c 	.word	0x2000d43c
   27dac:	0002e5ae 	.word	0x0002e5ae
   27db0:	0002e574 	.word	0x0002e574

00027db4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27db4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27db6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   27dba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27dbc:	e9cd 6700 	strd	r6, r7, [sp]
   27dc0:	f7ff fc18 	bl	275f4 <z_pend_curr>

	if (data != NULL) {
   27dc4:	b11c      	cbz	r4, 27dce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   27dc6:	4b03      	ldr	r3, [pc, #12]	; (27dd4 <z_sched_wait+0x20>)
   27dc8:	689b      	ldr	r3, [r3, #8]
   27dca:	695b      	ldr	r3, [r3, #20]
   27dcc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27dce:	b002      	add	sp, #8
   27dd0:	bdd0      	pop	{r4, r6, r7, pc}
   27dd2:	bf00      	nop
   27dd4:	2000d3fc 	.word	0x2000d3fc

00027dd8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   27dd8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27dda:	4806      	ldr	r0, [pc, #24]	; (27df4 <z_data_copy+0x1c>)
   27ddc:	4a06      	ldr	r2, [pc, #24]	; (27df8 <z_data_copy+0x20>)
   27dde:	4907      	ldr	r1, [pc, #28]	; (27dfc <z_data_copy+0x24>)
   27de0:	1a12      	subs	r2, r2, r0
   27de2:	f004 fef6 	bl	2cbd2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   27de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27dea:	4a05      	ldr	r2, [pc, #20]	; (27e00 <z_data_copy+0x28>)
   27dec:	4905      	ldr	r1, [pc, #20]	; (27e04 <z_data_copy+0x2c>)
   27dee:	4806      	ldr	r0, [pc, #24]	; (27e08 <z_data_copy+0x30>)
   27df0:	f004 beef 	b.w	2cbd2 <memcpy>
   27df4:	2000c500 	.word	0x2000c500
   27df8:	2000cabc 	.word	0x2000cabc
   27dfc:	00030f20 	.word	0x00030f20
   27e00:	00000000 	.word	0x00000000
   27e04:	00030f08 	.word	0x00030f08
   27e08:	2000c500 	.word	0x2000c500

00027e0c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27e0c:	4b03      	ldr	r3, [pc, #12]	; (27e1c <elapsed+0x10>)
   27e0e:	681b      	ldr	r3, [r3, #0]
   27e10:	b90b      	cbnz	r3, 27e16 <elapsed+0xa>
   27e12:	f7f6 bb8d 	b.w	1e530 <sys_clock_elapsed>
}
   27e16:	2000      	movs	r0, #0
   27e18:	4770      	bx	lr
   27e1a:	bf00      	nop
   27e1c:	2000d448 	.word	0x2000d448

00027e20 <remove_timeout>:
{
   27e20:	b530      	push	{r4, r5, lr}
   27e22:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27e24:	b168      	cbz	r0, 27e42 <remove_timeout+0x22>
   27e26:	4a0a      	ldr	r2, [pc, #40]	; (27e50 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   27e28:	6852      	ldr	r2, [r2, #4]
   27e2a:	4290      	cmp	r0, r2
   27e2c:	d009      	beq.n	27e42 <remove_timeout+0x22>
	if (next(t) != NULL) {
   27e2e:	b143      	cbz	r3, 27e42 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   27e30:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27e34:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   27e38:	1912      	adds	r2, r2, r4
   27e3a:	eb45 0101 	adc.w	r1, r5, r1
   27e3e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   27e42:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   27e44:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27e46:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27e48:	2300      	movs	r3, #0
	node->prev = NULL;
   27e4a:	e9c0 3300 	strd	r3, r3, [r0]
}
   27e4e:	bd30      	pop	{r4, r5, pc}
   27e50:	2000c6b8 	.word	0x2000c6b8

00027e54 <next_timeout>:

static int32_t next_timeout(void)
{
   27e54:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   27e56:	4b13      	ldr	r3, [pc, #76]	; (27ea4 <next_timeout+0x50>)
   27e58:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e5a:	429c      	cmp	r4, r3
   27e5c:	bf08      	it	eq
   27e5e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   27e60:	f7ff ffd4 	bl	27e0c <elapsed>
   27e64:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   27e66:	b1bc      	cbz	r4, 27e98 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   27e68:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   27e6c:	1b40      	subs	r0, r0, r5
   27e6e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   27e72:	2801      	cmp	r0, #1
   27e74:	f171 0300 	sbcs.w	r3, r1, #0
   27e78:	db11      	blt.n	27e9e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   27e7a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   27e7e:	2300      	movs	r3, #0
   27e80:	4282      	cmp	r2, r0
   27e82:	eb73 0401 	sbcs.w	r4, r3, r1
   27e86:	da00      	bge.n	27e8a <next_timeout+0x36>
   27e88:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27e8a:	4b07      	ldr	r3, [pc, #28]	; (27ea8 <next_timeout+0x54>)
   27e8c:	691b      	ldr	r3, [r3, #16]
   27e8e:	b113      	cbz	r3, 27e96 <next_timeout+0x42>
   27e90:	4298      	cmp	r0, r3
   27e92:	bfa8      	it	ge
   27e94:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   27e96:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   27e98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27e9c:	e7f5      	b.n	27e8a <next_timeout+0x36>
   27e9e:	2000      	movs	r0, #0
   27ea0:	e7f3      	b.n	27e8a <next_timeout+0x36>
   27ea2:	bf00      	nop
   27ea4:	2000c6b8 	.word	0x2000c6b8
   27ea8:	2000d3fc 	.word	0x2000d3fc

00027eac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   27eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27eb0:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27eb2:	1c6b      	adds	r3, r5, #1
   27eb4:	bf08      	it	eq
   27eb6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27eba:	4682      	mov	sl, r0
   27ebc:	468b      	mov	fp, r1
   27ebe:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27ec0:	f000 809c 	beq.w	27ffc <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27ec4:	6803      	ldr	r3, [r0, #0]
   27ec6:	b143      	cbz	r3, 27eda <z_add_timeout+0x2e>
   27ec8:	494e      	ldr	r1, [pc, #312]	; (28004 <z_add_timeout+0x158>)
   27eca:	484f      	ldr	r0, [pc, #316]	; (28008 <z_add_timeout+0x15c>)
   27ecc:	225d      	movs	r2, #93	; 0x5d
   27ece:	f002 fce9 	bl	2a8a4 <printk>
   27ed2:	215d      	movs	r1, #93	; 0x5d
   27ed4:	484b      	ldr	r0, [pc, #300]	; (28004 <z_add_timeout+0x158>)
   27ed6:	f002 fe7e 	bl	2abd6 <assert_post_action>
	to->fn = fn;
   27eda:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   27ede:	f04f 0320 	mov.w	r3, #32
   27ee2:	f3ef 8b11 	mrs	fp, BASEPRI
   27ee6:	f383 8812 	msr	BASEPRI_MAX, r3
   27eea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27eee:	4847      	ldr	r0, [pc, #284]	; (2800c <z_add_timeout+0x160>)
   27ef0:	f7fe f900 	bl	260f4 <z_spin_lock_valid>
   27ef4:	b940      	cbnz	r0, 27f08 <z_add_timeout+0x5c>
   27ef6:	4946      	ldr	r1, [pc, #280]	; (28010 <z_add_timeout+0x164>)
   27ef8:	4843      	ldr	r0, [pc, #268]	; (28008 <z_add_timeout+0x15c>)
   27efa:	2281      	movs	r2, #129	; 0x81
   27efc:	f002 fcd2 	bl	2a8a4 <printk>
   27f00:	2181      	movs	r1, #129	; 0x81
   27f02:	4843      	ldr	r0, [pc, #268]	; (28010 <z_add_timeout+0x164>)
   27f04:	f002 fe67 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   27f08:	4840      	ldr	r0, [pc, #256]	; (2800c <z_add_timeout+0x160>)
   27f0a:	f7fe f90f 	bl	2612c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   27f0e:	f06f 0301 	mvn.w	r3, #1
   27f12:	f04f 32ff 	mov.w	r2, #4294967295
   27f16:	ebb3 0804 	subs.w	r8, r3, r4
   27f1a:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   27f1e:	f1b8 0f00 	cmp.w	r8, #0
   27f22:	f179 0100 	sbcs.w	r1, r9, #0
   27f26:	db1c      	blt.n	27f62 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   27f28:	483a      	ldr	r0, [pc, #232]	; (28014 <z_add_timeout+0x168>)
   27f2a:	e9d0 1000 	ldrd	r1, r0, [r0]
   27f2e:	1a5b      	subs	r3, r3, r1
   27f30:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   27f34:	1b1e      	subs	r6, r3, r4
   27f36:	eb62 0705 	sbc.w	r7, r2, r5
   27f3a:	2e01      	cmp	r6, #1
   27f3c:	f177 0300 	sbcs.w	r3, r7, #0
   27f40:	bfbc      	itt	lt
   27f42:	2601      	movlt	r6, #1
   27f44:	2700      	movlt	r7, #0
   27f46:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   27f4a:	4a33      	ldr	r2, [pc, #204]	; (28018 <z_add_timeout+0x16c>)
   27f4c:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f50:	4293      	cmp	r3, r2
   27f52:	d11d      	bne.n	27f90 <z_add_timeout+0xe4>
	node->prev = tail;
   27f54:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   27f58:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   27f5c:	f8c2 a004 	str.w	sl, [r2, #4]
}
   27f60:	e02c      	b.n	27fbc <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   27f62:	f7ff ff53 	bl	27e0c <elapsed>
   27f66:	1c63      	adds	r3, r4, #1
   27f68:	9300      	str	r3, [sp, #0]
   27f6a:	f145 0300 	adc.w	r3, r5, #0
   27f6e:	9301      	str	r3, [sp, #4]
   27f70:	e9dd 2300 	ldrd	r2, r3, [sp]
   27f74:	1812      	adds	r2, r2, r0
   27f76:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   27f7a:	e9ca 2304 	strd	r2, r3, [sl, #16]
   27f7e:	e7e4      	b.n	27f4a <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   27f80:	1be0      	subs	r0, r4, r7
   27f82:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   27f86:	42b3      	cmp	r3, r6
   27f88:	e9ca 0104 	strd	r0, r1, [sl, #16]
   27f8c:	d0e2      	beq.n	27f54 <z_add_timeout+0xa8>
   27f8e:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   27f90:	2b00      	cmp	r3, #0
   27f92:	d0df      	beq.n	27f54 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
   27f94:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   27f98:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   27f9c:	42bc      	cmp	r4, r7
   27f9e:	eb75 0108 	sbcs.w	r1, r5, r8
   27fa2:	daed      	bge.n	27f80 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
   27fa4:	1b38      	subs	r0, r7, r4
   27fa6:	eb68 0105 	sbc.w	r1, r8, r5
   27faa:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   27fae:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   27fb0:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   27fb4:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   27fb8:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   27fbc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27fbe:	4293      	cmp	r3, r2
   27fc0:	d00b      	beq.n	27fda <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   27fc2:	459a      	cmp	sl, r3
   27fc4:	d109      	bne.n	27fda <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   27fc6:	f7ff ff45 	bl	27e54 <next_timeout>

			if (next_time == 0 ||
   27fca:	b118      	cbz	r0, 27fd4 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
   27fcc:	4b13      	ldr	r3, [pc, #76]	; (2801c <z_add_timeout+0x170>)
			if (next_time == 0 ||
   27fce:	691b      	ldr	r3, [r3, #16]
   27fd0:	4283      	cmp	r3, r0
   27fd2:	d002      	beq.n	27fda <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
   27fd4:	2100      	movs	r1, #0
   27fd6:	f7f6 fa7b 	bl	1e4d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27fda:	480c      	ldr	r0, [pc, #48]	; (2800c <z_add_timeout+0x160>)
   27fdc:	f7fe f898 	bl	26110 <z_spin_unlock_valid>
   27fe0:	b940      	cbnz	r0, 27ff4 <z_add_timeout+0x148>
   27fe2:	490b      	ldr	r1, [pc, #44]	; (28010 <z_add_timeout+0x164>)
   27fe4:	4808      	ldr	r0, [pc, #32]	; (28008 <z_add_timeout+0x15c>)
   27fe6:	22ac      	movs	r2, #172	; 0xac
   27fe8:	f002 fc5c 	bl	2a8a4 <printk>
   27fec:	21ac      	movs	r1, #172	; 0xac
   27fee:	4808      	ldr	r0, [pc, #32]	; (28010 <z_add_timeout+0x164>)
   27ff0:	f002 fdf1 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   27ff4:	f38b 8811 	msr	BASEPRI, fp
   27ff8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   27ffc:	b003      	add	sp, #12
   27ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28002:	bf00      	nop
   28004:	00030cab 	.word	0x00030cab
   28008:	0002e574 	.word	0x0002e574
   2800c:	2000d44c 	.word	0x2000d44c
   28010:	0002e5ae 	.word	0x0002e5ae
   28014:	2000ccd0 	.word	0x2000ccd0
   28018:	2000c6b8 	.word	0x2000c6b8
   2801c:	2000d3fc 	.word	0x2000d3fc

00028020 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   28020:	b538      	push	{r3, r4, r5, lr}
   28022:	4604      	mov	r4, r0
	__asm__ volatile(
   28024:	f04f 0320 	mov.w	r3, #32
   28028:	f3ef 8511 	mrs	r5, BASEPRI
   2802c:	f383 8812 	msr	BASEPRI_MAX, r3
   28030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28034:	4815      	ldr	r0, [pc, #84]	; (2808c <z_abort_timeout+0x6c>)
   28036:	f7fe f85d 	bl	260f4 <z_spin_lock_valid>
   2803a:	b940      	cbnz	r0, 2804e <z_abort_timeout+0x2e>
   2803c:	4914      	ldr	r1, [pc, #80]	; (28090 <z_abort_timeout+0x70>)
   2803e:	4815      	ldr	r0, [pc, #84]	; (28094 <z_abort_timeout+0x74>)
   28040:	2281      	movs	r2, #129	; 0x81
   28042:	f002 fc2f 	bl	2a8a4 <printk>
   28046:	2181      	movs	r1, #129	; 0x81
   28048:	4811      	ldr	r0, [pc, #68]	; (28090 <z_abort_timeout+0x70>)
   2804a:	f002 fdc4 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   2804e:	480f      	ldr	r0, [pc, #60]	; (2808c <z_abort_timeout+0x6c>)
   28050:	f7fe f86c 	bl	2612c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   28054:	6823      	ldr	r3, [r4, #0]
   28056:	b1b3      	cbz	r3, 28086 <z_abort_timeout+0x66>
			remove_timeout(to);
   28058:	4620      	mov	r0, r4
   2805a:	f7ff fee1 	bl	27e20 <remove_timeout>
			ret = 0;
   2805e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28060:	480a      	ldr	r0, [pc, #40]	; (2808c <z_abort_timeout+0x6c>)
   28062:	f7fe f855 	bl	26110 <z_spin_unlock_valid>
   28066:	b940      	cbnz	r0, 2807a <z_abort_timeout+0x5a>
   28068:	4909      	ldr	r1, [pc, #36]	; (28090 <z_abort_timeout+0x70>)
   2806a:	480a      	ldr	r0, [pc, #40]	; (28094 <z_abort_timeout+0x74>)
   2806c:	22ac      	movs	r2, #172	; 0xac
   2806e:	f002 fc19 	bl	2a8a4 <printk>
   28072:	21ac      	movs	r1, #172	; 0xac
   28074:	4806      	ldr	r0, [pc, #24]	; (28090 <z_abort_timeout+0x70>)
   28076:	f002 fdae 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2807a:	f385 8811 	msr	BASEPRI, r5
   2807e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   28082:	4620      	mov	r0, r4
   28084:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   28086:	f06f 0415 	mvn.w	r4, #21
   2808a:	e7e9      	b.n	28060 <z_abort_timeout+0x40>
   2808c:	2000d44c 	.word	0x2000d44c
   28090:	0002e5ae 	.word	0x0002e5ae
   28094:	0002e574 	.word	0x0002e574

00028098 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   28098:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2809a:	f04f 0320 	mov.w	r3, #32
   2809e:	f3ef 8511 	mrs	r5, BASEPRI
   280a2:	f383 8812 	msr	BASEPRI_MAX, r3
   280a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   280aa:	4813      	ldr	r0, [pc, #76]	; (280f8 <z_get_next_timeout_expiry+0x60>)
   280ac:	f7fe f822 	bl	260f4 <z_spin_lock_valid>
   280b0:	b940      	cbnz	r0, 280c4 <z_get_next_timeout_expiry+0x2c>
   280b2:	4912      	ldr	r1, [pc, #72]	; (280fc <z_get_next_timeout_expiry+0x64>)
   280b4:	4812      	ldr	r0, [pc, #72]	; (28100 <z_get_next_timeout_expiry+0x68>)
   280b6:	2281      	movs	r2, #129	; 0x81
   280b8:	f002 fbf4 	bl	2a8a4 <printk>
   280bc:	2181      	movs	r1, #129	; 0x81
   280be:	480f      	ldr	r0, [pc, #60]	; (280fc <z_get_next_timeout_expiry+0x64>)
   280c0:	f002 fd89 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   280c4:	480c      	ldr	r0, [pc, #48]	; (280f8 <z_get_next_timeout_expiry+0x60>)
   280c6:	f7fe f831 	bl	2612c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   280ca:	f7ff fec3 	bl	27e54 <next_timeout>
   280ce:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   280d0:	4809      	ldr	r0, [pc, #36]	; (280f8 <z_get_next_timeout_expiry+0x60>)
   280d2:	f7fe f81d 	bl	26110 <z_spin_unlock_valid>
   280d6:	b940      	cbnz	r0, 280ea <z_get_next_timeout_expiry+0x52>
   280d8:	4908      	ldr	r1, [pc, #32]	; (280fc <z_get_next_timeout_expiry+0x64>)
   280da:	4809      	ldr	r0, [pc, #36]	; (28100 <z_get_next_timeout_expiry+0x68>)
   280dc:	22ac      	movs	r2, #172	; 0xac
   280de:	f002 fbe1 	bl	2a8a4 <printk>
   280e2:	21ac      	movs	r1, #172	; 0xac
   280e4:	4805      	ldr	r0, [pc, #20]	; (280fc <z_get_next_timeout_expiry+0x64>)
   280e6:	f002 fd76 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   280ea:	f385 8811 	msr	BASEPRI, r5
   280ee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   280f2:	4620      	mov	r0, r4
   280f4:	bd38      	pop	{r3, r4, r5, pc}
   280f6:	bf00      	nop
   280f8:	2000d44c 	.word	0x2000d44c
   280fc:	0002e5ae 	.word	0x0002e5ae
   28100:	0002e574 	.word	0x0002e574

00028104 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   28104:	b570      	push	{r4, r5, r6, lr}
   28106:	4604      	mov	r4, r0
   28108:	460d      	mov	r5, r1
	__asm__ volatile(
   2810a:	f04f 0320 	mov.w	r3, #32
   2810e:	f3ef 8611 	mrs	r6, BASEPRI
   28112:	f383 8812 	msr	BASEPRI_MAX, r3
   28116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2811a:	4816      	ldr	r0, [pc, #88]	; (28174 <z_set_timeout_expiry+0x70>)
   2811c:	f7fd ffea 	bl	260f4 <z_spin_lock_valid>
   28120:	b940      	cbnz	r0, 28134 <z_set_timeout_expiry+0x30>
   28122:	4915      	ldr	r1, [pc, #84]	; (28178 <z_set_timeout_expiry+0x74>)
   28124:	4815      	ldr	r0, [pc, #84]	; (2817c <z_set_timeout_expiry+0x78>)
   28126:	2281      	movs	r2, #129	; 0x81
   28128:	f002 fbbc 	bl	2a8a4 <printk>
   2812c:	2181      	movs	r1, #129	; 0x81
   2812e:	4812      	ldr	r0, [pc, #72]	; (28178 <z_set_timeout_expiry+0x74>)
   28130:	f002 fd51 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28134:	480f      	ldr	r0, [pc, #60]	; (28174 <z_set_timeout_expiry+0x70>)
   28136:	f7fd fff9 	bl	2612c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2813a:	f7ff fe8b 	bl	27e54 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2813e:	2801      	cmp	r0, #1
   28140:	dd05      	ble.n	2814e <z_set_timeout_expiry+0x4a>
   28142:	42a0      	cmp	r0, r4
   28144:	db03      	blt.n	2814e <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28146:	4629      	mov	r1, r5
   28148:	4620      	mov	r0, r4
   2814a:	f7f6 f9c1 	bl	1e4d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2814e:	4809      	ldr	r0, [pc, #36]	; (28174 <z_set_timeout_expiry+0x70>)
   28150:	f7fd ffde 	bl	26110 <z_spin_unlock_valid>
   28154:	b940      	cbnz	r0, 28168 <z_set_timeout_expiry+0x64>
   28156:	4908      	ldr	r1, [pc, #32]	; (28178 <z_set_timeout_expiry+0x74>)
   28158:	4808      	ldr	r0, [pc, #32]	; (2817c <z_set_timeout_expiry+0x78>)
   2815a:	22ac      	movs	r2, #172	; 0xac
   2815c:	f002 fba2 	bl	2a8a4 <printk>
   28160:	21ac      	movs	r1, #172	; 0xac
   28162:	4805      	ldr	r0, [pc, #20]	; (28178 <z_set_timeout_expiry+0x74>)
   28164:	f002 fd37 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   28168:	f386 8811 	msr	BASEPRI, r6
   2816c:	f3bf 8f6f 	isb	sy
		}
	}
}
   28170:	bd70      	pop	{r4, r5, r6, pc}
   28172:	bf00      	nop
   28174:	2000d44c 	.word	0x2000d44c
   28178:	0002e5ae 	.word	0x0002e5ae
   2817c:	0002e574 	.word	0x0002e574

00028180 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   28180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28184:	b085      	sub	sp, #20
   28186:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   28188:	f7ff f818 	bl	271bc <z_time_slice>
	__asm__ volatile(
   2818c:	f04f 0320 	mov.w	r3, #32
   28190:	f3ef 8911 	mrs	r9, BASEPRI
   28194:	f383 8812 	msr	BASEPRI_MAX, r3
   28198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2819c:	484c      	ldr	r0, [pc, #304]	; (282d0 <sys_clock_announce+0x150>)
   2819e:	f7fd ffa9 	bl	260f4 <z_spin_lock_valid>
   281a2:	b940      	cbnz	r0, 281b6 <sys_clock_announce+0x36>
   281a4:	494b      	ldr	r1, [pc, #300]	; (282d4 <sys_clock_announce+0x154>)
   281a6:	484c      	ldr	r0, [pc, #304]	; (282d8 <sys_clock_announce+0x158>)
   281a8:	2281      	movs	r2, #129	; 0x81
   281aa:	f002 fb7b 	bl	2a8a4 <printk>
   281ae:	2181      	movs	r1, #129	; 0x81
   281b0:	4848      	ldr	r0, [pc, #288]	; (282d4 <sys_clock_announce+0x154>)
   281b2:	f002 fd10 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   281b6:	4f49      	ldr	r7, [pc, #292]	; (282dc <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   281b8:	4e49      	ldr	r6, [pc, #292]	; (282e0 <sys_clock_announce+0x160>)
   281ba:	46bb      	mov	fp, r7
   281bc:	4844      	ldr	r0, [pc, #272]	; (282d0 <sys_clock_announce+0x150>)
	return list->head == list;
   281be:	f8df a124 	ldr.w	sl, [pc, #292]	; 282e4 <sys_clock_announce+0x164>
   281c2:	f7fd ffb3 	bl	2612c <z_spin_lock_set_owner>
   281c6:	6034      	str	r4, [r6, #0]
   281c8:	f8d6 c000 	ldr.w	ip, [r6]
   281cc:	f8da 8000 	ldr.w	r8, [sl]
   281d0:	4662      	mov	r2, ip
   281d2:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281d6:	45d0      	cmp	r8, sl
   281d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   281dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
   281e0:	e9cd 2300 	strd	r2, r3, [sp]
   281e4:	d011      	beq.n	2820a <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   281e6:	f1b8 0f00 	cmp.w	r8, #0
   281ea:	d00e      	beq.n	2820a <sys_clock_announce+0x8a>
   281ec:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   281f0:	e9dd 3400 	ldrd	r3, r4, [sp]
   281f4:	428b      	cmp	r3, r1
   281f6:	eb74 0302 	sbcs.w	r3, r4, r2
   281fa:	da2a      	bge.n	28252 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   281fc:	9b00      	ldr	r3, [sp, #0]
   281fe:	1ac8      	subs	r0, r1, r3
   28200:	9b01      	ldr	r3, [sp, #4]
   28202:	eb62 0103 	sbc.w	r1, r2, r3
   28206:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2820a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2820c:	9b00      	ldr	r3, [sp, #0]
   2820e:	9a02      	ldr	r2, [sp, #8]
   28210:	9903      	ldr	r1, [sp, #12]
   28212:	189a      	adds	r2, r3, r2
   28214:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   28216:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
   28218:	eb41 0303 	adc.w	r3, r1, r3
   2821c:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   28220:	f7ff fe18 	bl	27e54 <next_timeout>
   28224:	4621      	mov	r1, r4
   28226:	f7f6 f953 	bl	1e4d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2822a:	4829      	ldr	r0, [pc, #164]	; (282d0 <sys_clock_announce+0x150>)
   2822c:	f7fd ff70 	bl	26110 <z_spin_unlock_valid>
   28230:	b940      	cbnz	r0, 28244 <sys_clock_announce+0xc4>
   28232:	4928      	ldr	r1, [pc, #160]	; (282d4 <sys_clock_announce+0x154>)
   28234:	4828      	ldr	r0, [pc, #160]	; (282d8 <sys_clock_announce+0x158>)
   28236:	22ac      	movs	r2, #172	; 0xac
   28238:	f002 fb34 	bl	2a8a4 <printk>
   2823c:	21ac      	movs	r1, #172	; 0xac
   2823e:	4825      	ldr	r0, [pc, #148]	; (282d4 <sys_clock_announce+0x154>)
   28240:	f002 fcc9 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   28244:	f389 8811 	msr	BASEPRI, r9
   28248:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2824c:	b005      	add	sp, #20
   2824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   28252:	2200      	movs	r2, #0
		curr_tick += dt;
   28254:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
   28258:	2300      	movs	r3, #0
		curr_tick += dt;
   2825a:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
   2825c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   28260:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   28264:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   28266:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   2826a:	4640      	mov	r0, r8
		curr_tick += dt;
   2826c:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   28270:	f7ff fdd6 	bl	27e20 <remove_timeout>
   28274:	4816      	ldr	r0, [pc, #88]	; (282d0 <sys_clock_announce+0x150>)
   28276:	f7fd ff4b 	bl	26110 <z_spin_unlock_valid>
   2827a:	b940      	cbnz	r0, 2828e <sys_clock_announce+0x10e>
   2827c:	4915      	ldr	r1, [pc, #84]	; (282d4 <sys_clock_announce+0x154>)
   2827e:	4816      	ldr	r0, [pc, #88]	; (282d8 <sys_clock_announce+0x158>)
   28280:	22ac      	movs	r2, #172	; 0xac
   28282:	f002 fb0f 	bl	2a8a4 <printk>
   28286:	21ac      	movs	r1, #172	; 0xac
   28288:	4812      	ldr	r0, [pc, #72]	; (282d4 <sys_clock_announce+0x154>)
   2828a:	f002 fca4 	bl	2abd6 <assert_post_action>
   2828e:	f389 8811 	msr	BASEPRI, r9
   28292:	f3bf 8f6f 	isb	sy
		t->fn(t);
   28296:	4640      	mov	r0, r8
   28298:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2829c:	4798      	blx	r3
	__asm__ volatile(
   2829e:	f04f 0320 	mov.w	r3, #32
   282a2:	f3ef 8911 	mrs	r9, BASEPRI
   282a6:	f383 8812 	msr	BASEPRI_MAX, r3
   282aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282ae:	4808      	ldr	r0, [pc, #32]	; (282d0 <sys_clock_announce+0x150>)
   282b0:	f7fd ff20 	bl	260f4 <z_spin_lock_valid>
   282b4:	b940      	cbnz	r0, 282c8 <sys_clock_announce+0x148>
   282b6:	4907      	ldr	r1, [pc, #28]	; (282d4 <sys_clock_announce+0x154>)
   282b8:	4807      	ldr	r0, [pc, #28]	; (282d8 <sys_clock_announce+0x158>)
   282ba:	2281      	movs	r2, #129	; 0x81
   282bc:	f002 faf2 	bl	2a8a4 <printk>
   282c0:	2181      	movs	r1, #129	; 0x81
   282c2:	4804      	ldr	r0, [pc, #16]	; (282d4 <sys_clock_announce+0x154>)
   282c4:	f002 fc87 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   282c8:	4801      	ldr	r0, [pc, #4]	; (282d0 <sys_clock_announce+0x150>)
   282ca:	f7fd ff2f 	bl	2612c <z_spin_lock_set_owner>
	return k;
   282ce:	e77b      	b.n	281c8 <sys_clock_announce+0x48>
   282d0:	2000d44c 	.word	0x2000d44c
   282d4:	0002e5ae 	.word	0x0002e5ae
   282d8:	0002e574 	.word	0x0002e574
   282dc:	2000ccd0 	.word	0x2000ccd0
   282e0:	2000d448 	.word	0x2000d448
   282e4:	2000c6b8 	.word	0x2000c6b8

000282e8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   282e8:	b570      	push	{r4, r5, r6, lr}
   282ea:	f04f 0320 	mov.w	r3, #32
   282ee:	f3ef 8611 	mrs	r6, BASEPRI
   282f2:	f383 8812 	msr	BASEPRI_MAX, r3
   282f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282fa:	4816      	ldr	r0, [pc, #88]	; (28354 <sys_clock_tick_get+0x6c>)
   282fc:	f7fd fefa 	bl	260f4 <z_spin_lock_valid>
   28300:	b940      	cbnz	r0, 28314 <sys_clock_tick_get+0x2c>
   28302:	4915      	ldr	r1, [pc, #84]	; (28358 <sys_clock_tick_get+0x70>)
   28304:	4815      	ldr	r0, [pc, #84]	; (2835c <sys_clock_tick_get+0x74>)
   28306:	2281      	movs	r2, #129	; 0x81
   28308:	f002 facc 	bl	2a8a4 <printk>
   2830c:	2181      	movs	r1, #129	; 0x81
   2830e:	4812      	ldr	r0, [pc, #72]	; (28358 <sys_clock_tick_get+0x70>)
   28310:	f002 fc61 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28314:	480f      	ldr	r0, [pc, #60]	; (28354 <sys_clock_tick_get+0x6c>)
   28316:	f7fd ff09 	bl	2612c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2831a:	f7f6 f909 	bl	1e530 <sys_clock_elapsed>
   2831e:	4b10      	ldr	r3, [pc, #64]	; (28360 <sys_clock_tick_get+0x78>)
   28320:	e9d3 4500 	ldrd	r4, r5, [r3]
   28324:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28326:	480b      	ldr	r0, [pc, #44]	; (28354 <sys_clock_tick_get+0x6c>)
   28328:	f145 0500 	adc.w	r5, r5, #0
   2832c:	f7fd fef0 	bl	26110 <z_spin_unlock_valid>
   28330:	b940      	cbnz	r0, 28344 <sys_clock_tick_get+0x5c>
   28332:	4909      	ldr	r1, [pc, #36]	; (28358 <sys_clock_tick_get+0x70>)
   28334:	4809      	ldr	r0, [pc, #36]	; (2835c <sys_clock_tick_get+0x74>)
   28336:	22ac      	movs	r2, #172	; 0xac
   28338:	f002 fab4 	bl	2a8a4 <printk>
   2833c:	21ac      	movs	r1, #172	; 0xac
   2833e:	4806      	ldr	r0, [pc, #24]	; (28358 <sys_clock_tick_get+0x70>)
   28340:	f002 fc49 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   28344:	f386 8811 	msr	BASEPRI, r6
   28348:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2834c:	4620      	mov	r0, r4
   2834e:	4629      	mov	r1, r5
   28350:	bd70      	pop	{r4, r5, r6, pc}
   28352:	bf00      	nop
   28354:	2000d44c 	.word	0x2000d44c
   28358:	0002e5ae 	.word	0x0002e5ae
   2835c:	0002e574 	.word	0x0002e574
   28360:	2000ccd0 	.word	0x2000ccd0

00028364 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   28364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28368:	2414      	movs	r4, #20
   2836a:	4680      	mov	r8, r0
   2836c:	4617      	mov	r7, r2
	while (num_events--) {
   2836e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   28372:	4d42      	ldr	r5, [pc, #264]	; (2847c <clear_event_registrations+0x118>)
   28374:	4e42      	ldr	r6, [pc, #264]	; (28480 <clear_event_registrations+0x11c>)
   28376:	f8df 9110 	ldr.w	r9, [pc, #272]	; 28488 <clear_event_registrations+0x124>
	while (num_events--) {
   2837a:	45a0      	cmp	r8, r4
   2837c:	d101      	bne.n	28382 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   2837e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   28382:	2300      	movs	r3, #0
   28384:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   28388:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2838c:	f003 031f 	and.w	r3, r3, #31
   28390:	2b08      	cmp	r3, #8
   28392:	d83e      	bhi.n	28412 <clear_event_registrations+0xae>
   28394:	e8df f003 	tbb	[pc, r3]
   28398:	3d052746 	.word	0x3d052746
   2839c:	3d3d3d1c 	.word	0x3d3d3d1c
   283a0:	32          	.byte	0x32
   283a1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   283a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   283a6:	b943      	cbnz	r3, 283ba <clear_event_registrations+0x56>
   283a8:	4629      	mov	r1, r5
   283aa:	22a9      	movs	r2, #169	; 0xa9
   283ac:	4630      	mov	r0, r6
   283ae:	f002 fa79 	bl	2a8a4 <printk>
   283b2:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   283b4:	4628      	mov	r0, r5
   283b6:	f002 fc0e 	bl	2abd6 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   283ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
   283be:	b38b      	cbz	r3, 28424 <clear_event_registrations+0xc0>
	sys_dnode_t *const prev = node->prev;
   283c0:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   283c4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   283c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   283c8:	2300      	movs	r3, #0
	node->prev = NULL;
   283ca:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   283ce:	e029      	b.n	28424 <clear_event_registrations+0xc0>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   283d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   283d4:	2b00      	cmp	r3, #0
   283d6:	d1f0      	bne.n	283ba <clear_event_registrations+0x56>
   283d8:	4629      	mov	r1, r5
   283da:	22ad      	movs	r2, #173	; 0xad
   283dc:	4630      	mov	r0, r6
   283de:	f002 fa61 	bl	2a8a4 <printk>
   283e2:	21ad      	movs	r1, #173	; 0xad
   283e4:	e7e6      	b.n	283b4 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   283e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   283ea:	2b00      	cmp	r3, #0
   283ec:	d1e5      	bne.n	283ba <clear_event_registrations+0x56>
   283ee:	4629      	mov	r1, r5
   283f0:	22b1      	movs	r2, #177	; 0xb1
   283f2:	4630      	mov	r0, r6
   283f4:	f002 fa56 	bl	2a8a4 <printk>
   283f8:	21b1      	movs	r1, #177	; 0xb1
   283fa:	e7db      	b.n	283b4 <clear_event_registrations+0x50>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   283fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28400:	2b00      	cmp	r3, #0
   28402:	d1da      	bne.n	283ba <clear_event_registrations+0x56>
   28404:	4629      	mov	r1, r5
   28406:	22b5      	movs	r2, #181	; 0xb5
   28408:	4630      	mov	r0, r6
   2840a:	f002 fa4b 	bl	2a8a4 <printk>
   2840e:	21b5      	movs	r1, #181	; 0xb5
   28410:	e7d0      	b.n	283b4 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   28412:	4629      	mov	r1, r5
   28414:	4630      	mov	r0, r6
   28416:	22bc      	movs	r2, #188	; 0xbc
   28418:	f002 fa44 	bl	2a8a4 <printk>
   2841c:	21bc      	movs	r1, #188	; 0xbc
   2841e:	4628      	mov	r0, r5
   28420:	f002 fbd9 	bl	2abd6 <assert_post_action>
   28424:	4648      	mov	r0, r9
   28426:	f7fd fe73 	bl	26110 <z_spin_unlock_valid>
   2842a:	b940      	cbnz	r0, 2843e <clear_event_registrations+0xda>
   2842c:	4630      	mov	r0, r6
   2842e:	4915      	ldr	r1, [pc, #84]	; (28484 <clear_event_registrations+0x120>)
   28430:	22ac      	movs	r2, #172	; 0xac
   28432:	f002 fa37 	bl	2a8a4 <printk>
   28436:	21ac      	movs	r1, #172	; 0xac
   28438:	4812      	ldr	r0, [pc, #72]	; (28484 <clear_event_registrations+0x120>)
   2843a:	f002 fbcc 	bl	2abd6 <assert_post_action>
   2843e:	f387 8811 	msr	BASEPRI, r7
   28442:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28446:	f04f 0320 	mov.w	r3, #32
   2844a:	f3ef 8711 	mrs	r7, BASEPRI
   2844e:	f383 8812 	msr	BASEPRI_MAX, r3
   28452:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28456:	4648      	mov	r0, r9
   28458:	f7fd fe4c 	bl	260f4 <z_spin_lock_valid>
   2845c:	b940      	cbnz	r0, 28470 <clear_event_registrations+0x10c>
   2845e:	4630      	mov	r0, r6
   28460:	4908      	ldr	r1, [pc, #32]	; (28484 <clear_event_registrations+0x120>)
   28462:	2281      	movs	r2, #129	; 0x81
   28464:	f002 fa1e 	bl	2a8a4 <printk>
   28468:	2181      	movs	r1, #129	; 0x81
   2846a:	4806      	ldr	r0, [pc, #24]	; (28484 <clear_event_registrations+0x120>)
   2846c:	f002 fbb3 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28470:	4648      	mov	r0, r9
   28472:	f7fd fe5b 	bl	2612c <z_spin_lock_set_owner>
	return k;
   28476:	3c14      	subs	r4, #20
   28478:	e77f      	b.n	2837a <clear_event_registrations+0x16>
   2847a:	bf00      	nop
   2847c:	00030ccf 	.word	0x00030ccf
   28480:	0002e574 	.word	0x0002e574
   28484:	0002e5ae 	.word	0x0002e5ae
   28488:	2000d450 	.word	0x2000d450

0002848c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2848c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   28490:	2600      	movs	r6, #0
{
   28492:	4614      	mov	r4, r2
   28494:	4681      	mov	r9, r0
	int events_registered = 0;
   28496:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28498:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 28668 <register_events+0x1dc>
   2849c:	4f6f      	ldr	r7, [pc, #444]	; (2865c <register_events+0x1d0>)
   2849e:	4d70      	ldr	r5, [pc, #448]	; (28660 <register_events+0x1d4>)
{
   284a0:	9100      	str	r1, [sp, #0]
   284a2:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   284a4:	9b00      	ldr	r3, [sp, #0]
   284a6:	429e      	cmp	r6, r3
   284a8:	db03      	blt.n	284b2 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   284aa:	4640      	mov	r0, r8
   284ac:	b003      	add	sp, #12
   284ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   284b2:	f04f 0220 	mov.w	r2, #32
   284b6:	f3ef 8b11 	mrs	fp, BASEPRI
   284ba:	f382 8812 	msr	BASEPRI_MAX, r2
   284be:	f3bf 8f6f 	isb	sy
   284c2:	4650      	mov	r0, sl
   284c4:	f7fd fe16 	bl	260f4 <z_spin_lock_valid>
   284c8:	b940      	cbnz	r0, 284dc <register_events+0x50>
   284ca:	4639      	mov	r1, r7
   284cc:	4628      	mov	r0, r5
   284ce:	2281      	movs	r2, #129	; 0x81
   284d0:	f002 f9e8 	bl	2a8a4 <printk>
   284d4:	2181      	movs	r1, #129	; 0x81
   284d6:	4638      	mov	r0, r7
   284d8:	f002 fb7d 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   284dc:	4650      	mov	r0, sl
   284de:	f7fd fe25 	bl	2612c <z_spin_lock_set_owner>
	switch (event->type) {
   284e2:	f899 200d 	ldrb.w	r2, [r9, #13]
   284e6:	f002 021f 	and.w	r2, r2, #31
   284ea:	2a08      	cmp	r2, #8
   284ec:	d853      	bhi.n	28596 <register_events+0x10a>
   284ee:	e8df f002 	tbb	[pc, r2]
   284f2:	4431      	.short	0x4431
   284f4:	522d5205 	.word	0x522d5205
   284f8:	5252      	.short	0x5252
   284fa:	4b          	.byte	0x4b
   284fb:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   284fc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28500:	6892      	ldr	r2, [r2, #8]
   28502:	b33a      	cbz	r2, 28554 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   28504:	2202      	movs	r2, #2
	event->poller = NULL;
   28506:	2000      	movs	r0, #0
	event->state |= state;
   28508:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   2850c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   28510:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   28514:	ea42 020c 	orr.w	r2, r2, ip
   28518:	f362 3152 	bfi	r1, r2, #13, #6
   2851c:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   28520:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28522:	4650      	mov	r0, sl
   28524:	f7fd fdf4 	bl	26110 <z_spin_unlock_valid>
   28528:	b940      	cbnz	r0, 2853c <register_events+0xb0>
   2852a:	4639      	mov	r1, r7
   2852c:	4628      	mov	r0, r5
   2852e:	22ac      	movs	r2, #172	; 0xac
   28530:	f002 f9b8 	bl	2a8a4 <printk>
   28534:	21ac      	movs	r1, #172	; 0xac
   28536:	4638      	mov	r0, r7
   28538:	f002 fb4d 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   2853c:	f38b 8811 	msr	BASEPRI, fp
   28540:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28544:	3601      	adds	r6, #1
   28546:	f109 0914 	add.w	r9, r9, #20
   2854a:	e7ab      	b.n	284a4 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   2854c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28550:	6812      	ldr	r2, [r2, #0]
   28552:	bb52      	cbnz	r2, 285aa <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   28554:	9b01      	ldr	r3, [sp, #4]
   28556:	2b00      	cmp	r3, #0
   28558:	d1e3      	bne.n	28522 <register_events+0x96>
   2855a:	7822      	ldrb	r2, [r4, #0]
   2855c:	2a00      	cmp	r2, #0
   2855e:	d0e0      	beq.n	28522 <register_events+0x96>
	switch (event->type) {
   28560:	f899 200d 	ldrb.w	r2, [r9, #13]
   28564:	f002 021f 	and.w	r2, r2, #31
   28568:	2a08      	cmp	r2, #8
   2856a:	d86d      	bhi.n	28648 <register_events+0x1bc>
   2856c:	e8df f002 	tbb	[pc, r2]
   28570:	6c1f4932 	.word	0x6c1f4932
   28574:	6c6c6c37 	.word	0x6c6c6c37
   28578:	5a          	.byte	0x5a
   28579:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2857a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2857e:	6892      	ldr	r2, [r2, #8]
   28580:	2a00      	cmp	r2, #0
   28582:	d0e7      	beq.n	28554 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   28584:	2201      	movs	r2, #1
   28586:	e7be      	b.n	28506 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   28588:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2858c:	6a52      	ldr	r2, [r2, #36]	; 0x24
   2858e:	2a00      	cmp	r2, #0
   28590:	d0e0      	beq.n	28554 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   28592:	2210      	movs	r2, #16
   28594:	e7b7      	b.n	28506 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   28596:	4628      	mov	r0, r5
   28598:	225c      	movs	r2, #92	; 0x5c
   2859a:	4932      	ldr	r1, [pc, #200]	; (28664 <register_events+0x1d8>)
   2859c:	f002 f982 	bl	2a8a4 <printk>
   285a0:	215c      	movs	r1, #92	; 0x5c
   285a2:	4830      	ldr	r0, [pc, #192]	; (28664 <register_events+0x1d8>)
   285a4:	f002 fb17 	bl	2abd6 <assert_post_action>
		break;
   285a8:	e7d4      	b.n	28554 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   285aa:	2204      	movs	r2, #4
   285ac:	e7ab      	b.n	28506 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   285ae:	f8d9 2010 	ldr.w	r2, [r9, #16]
   285b2:	b942      	cbnz	r2, 285c6 <register_events+0x13a>
   285b4:	4628      	mov	r0, r5
   285b6:	492b      	ldr	r1, [pc, #172]	; (28664 <register_events+0x1d8>)
   285b8:	2286      	movs	r2, #134	; 0x86
   285ba:	f002 f973 	bl	2a8a4 <printk>
   285be:	2186      	movs	r1, #134	; 0x86
   285c0:	4828      	ldr	r0, [pc, #160]	; (28664 <register_events+0x1d8>)
   285c2:	f002 fb08 	bl	2abd6 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   285c6:	4622      	mov	r2, r4
   285c8:	4649      	mov	r1, r9
   285ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
   285ce:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   285d0:	f004 fa80 	bl	2cad4 <add_event>
	event->poller = poller;
   285d4:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   285d8:	f108 0801 	add.w	r8, r8, #1
   285dc:	e7a1      	b.n	28522 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   285de:	f8d9 2010 	ldr.w	r2, [r9, #16]
   285e2:	b942      	cbnz	r2, 285f6 <register_events+0x16a>
   285e4:	4628      	mov	r0, r5
   285e6:	491f      	ldr	r1, [pc, #124]	; (28664 <register_events+0x1d8>)
   285e8:	228a      	movs	r2, #138	; 0x8a
   285ea:	f002 f95b 	bl	2a8a4 <printk>
   285ee:	218a      	movs	r1, #138	; 0x8a
   285f0:	481c      	ldr	r0, [pc, #112]	; (28664 <register_events+0x1d8>)
   285f2:	f002 faf0 	bl	2abd6 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   285f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   285fa:	4622      	mov	r2, r4
   285fc:	4649      	mov	r1, r9
   285fe:	3014      	adds	r0, #20
   28600:	e7e6      	b.n	285d0 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28602:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28606:	b942      	cbnz	r2, 2861a <register_events+0x18e>
   28608:	4628      	mov	r0, r5
   2860a:	4916      	ldr	r1, [pc, #88]	; (28664 <register_events+0x1d8>)
   2860c:	228e      	movs	r2, #142	; 0x8e
   2860e:	f002 f949 	bl	2a8a4 <printk>
   28612:	218e      	movs	r1, #142	; 0x8e
   28614:	4813      	ldr	r0, [pc, #76]	; (28664 <register_events+0x1d8>)
   28616:	f002 fade 	bl	2abd6 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2861a:	4622      	mov	r2, r4
   2861c:	4649      	mov	r1, r9
   2861e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   28622:	e7d5      	b.n	285d0 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28624:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28628:	b942      	cbnz	r2, 2863c <register_events+0x1b0>
   2862a:	4628      	mov	r0, r5
   2862c:	490d      	ldr	r1, [pc, #52]	; (28664 <register_events+0x1d8>)
   2862e:	2292      	movs	r2, #146	; 0x92
   28630:	f002 f938 	bl	2a8a4 <printk>
   28634:	2192      	movs	r1, #146	; 0x92
   28636:	480b      	ldr	r0, [pc, #44]	; (28664 <register_events+0x1d8>)
   28638:	f002 facd 	bl	2abd6 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   2863c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   28640:	4622      	mov	r2, r4
   28642:	4649      	mov	r1, r9
   28644:	3028      	adds	r0, #40	; 0x28
   28646:	e7c3      	b.n	285d0 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   28648:	4628      	mov	r0, r5
   2864a:	2299      	movs	r2, #153	; 0x99
   2864c:	4905      	ldr	r1, [pc, #20]	; (28664 <register_events+0x1d8>)
   2864e:	f002 f929 	bl	2a8a4 <printk>
   28652:	2199      	movs	r1, #153	; 0x99
   28654:	4803      	ldr	r0, [pc, #12]	; (28664 <register_events+0x1d8>)
   28656:	f002 fabe 	bl	2abd6 <assert_post_action>
		break;
   2865a:	e7bb      	b.n	285d4 <register_events+0x148>
   2865c:	0002e5ae 	.word	0x0002e5ae
   28660:	0002e574 	.word	0x0002e574
   28664:	00030ccf 	.word	0x00030ccf
   28668:	2000d450 	.word	0x2000d450

0002866c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   2866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   28670:	6884      	ldr	r4, [r0, #8]
{
   28672:	4605      	mov	r5, r0
   28674:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   28676:	b1b4      	cbz	r4, 286a6 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   28678:	7863      	ldrb	r3, [r4, #1]
   2867a:	2b01      	cmp	r3, #1
   2867c:	d147      	bne.n	2870e <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   2867e:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   28682:	d10a      	bne.n	2869a <signal_poll_event+0x2e>
   28684:	22f9      	movs	r2, #249	; 0xf9
   28686:	492e      	ldr	r1, [pc, #184]	; (28740 <signal_poll_event+0xd4>)
   28688:	482e      	ldr	r0, [pc, #184]	; (28744 <signal_poll_event+0xd8>)
   2868a:	f002 f90b 	bl	2a8a4 <printk>
   2868e:	21f9      	movs	r1, #249	; 0xf9
   28690:	482b      	ldr	r0, [pc, #172]	; (28740 <signal_poll_event+0xd4>)
   28692:	f002 faa0 	bl	2abd6 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   28696:	7b7b      	ldrb	r3, [r7, #13]
   28698:	deff      	udf	#255	; 0xff
   2869a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2869e:	f013 0302 	ands.w	r3, r3, #2
   286a2:	d10a      	bne.n	286ba <signal_poll_event+0x4e>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   286a4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   286a6:	2000      	movs	r0, #0
	event->state |= state;
   286a8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   286aa:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   286ac:	f3c3 3145 	ubfx	r1, r3, #13, #6
   286b0:	430e      	orrs	r6, r1
   286b2:	f366 3352 	bfi	r3, r6, #13, #6
   286b6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   286b8:	e00d      	b.n	286d6 <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   286ba:	f04f 31ff 	mov.w	r1, #4294967295
   286be:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   286c2:	f06f 0001 	mvn.w	r0, #1
   286c6:	428b      	cmp	r3, r1
   286c8:	bf08      	it	eq
   286ca:	4282      	cmpeq	r2, r0
   286cc:	d105      	bne.n	286da <signal_poll_event+0x6e>
		poller->is_polling = false;
   286ce:	2300      	movs	r3, #0
		return -EAGAIN;
   286d0:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   286d4:	7023      	strb	r3, [r4, #0]
}
   286d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   286da:	4638      	mov	r0, r7
   286dc:	f7fe fcb0 	bl	27040 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   286e0:	2e08      	cmp	r6, #8
   286e2:	bf0c      	ite	eq
   286e4:	f06f 0303 	mvneq.w	r3, #3
   286e8:	2300      	movne	r3, #0
   286ea:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   286ec:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   286f0:	06db      	lsls	r3, r3, #27
   286f2:	d104      	bne.n	286fe <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   286f4:	f854 8c48 	ldr.w	r8, [r4, #-72]
   286f8:	f1b8 0f00 	cmp.w	r8, #0
   286fc:	d001      	beq.n	28702 <signal_poll_event+0x96>
		poller->is_polling = false;
   286fe:	2300      	movs	r3, #0
   28700:	e7d0      	b.n	286a4 <signal_poll_event+0x38>
	z_ready_thread(thread);
   28702:	4638      	mov	r0, r7
   28704:	f7fe fe0e 	bl	27324 <z_ready_thread>
		poller->is_polling = false;
   28708:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2870c:	e7cb      	b.n	286a6 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   2870e:	2b02      	cmp	r3, #2
   28710:	d1f5      	bne.n	286fe <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   28712:	7823      	ldrb	r3, [r4, #0]
   28714:	2b00      	cmp	r3, #0
   28716:	d0c6      	beq.n	286a6 <signal_poll_event+0x3a>
   28718:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2871c:	b177      	cbz	r7, 2873c <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2871e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   28722:	f1a4 0914 	sub.w	r9, r4, #20
   28726:	f104 0014 	add.w	r0, r4, #20
   2872a:	f7ff fc79 	bl	28020 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2872e:	4649      	mov	r1, r9
   28730:	4638      	mov	r0, r7
		twork->poll_result = 0;
   28732:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   28736:	f7fe f9f3 	bl	26b20 <k_work_submit_to_queue>
   2873a:	e7e5      	b.n	28708 <signal_poll_event+0x9c>
		poller->is_polling = false;
   2873c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2873e:	e7b2      	b.n	286a6 <signal_poll_event+0x3a>
   28740:	00030ccf 	.word	0x00030ccf
   28744:	0002e574 	.word	0x0002e574

00028748 <z_impl_k_poll>:
{
   28748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2874c:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   2874e:	4b63      	ldr	r3, [pc, #396]	; (288dc <z_impl_k_poll+0x194>)
{
   28750:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   28752:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   28754:	2301      	movs	r3, #1
{
   28756:	4688      	mov	r8, r1
   28758:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2875a:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   2875e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   28762:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   28766:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2876a:	b153      	cbz	r3, 28782 <z_impl_k_poll+0x3a>
   2876c:	495c      	ldr	r1, [pc, #368]	; (288e0 <z_impl_k_poll+0x198>)
   2876e:	485d      	ldr	r0, [pc, #372]	; (288e4 <z_impl_k_poll+0x19c>)
   28770:	f44f 728d 	mov.w	r2, #282	; 0x11a
   28774:	f002 f896 	bl	2a8a4 <printk>
   28778:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2877c:	4858      	ldr	r0, [pc, #352]	; (288e0 <z_impl_k_poll+0x198>)
   2877e:	f002 fa2a 	bl	2abd6 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   28782:	b954      	cbnz	r4, 2879a <z_impl_k_poll+0x52>
   28784:	4956      	ldr	r1, [pc, #344]	; (288e0 <z_impl_k_poll+0x198>)
   28786:	4857      	ldr	r0, [pc, #348]	; (288e4 <z_impl_k_poll+0x19c>)
   28788:	f240 121b 	movw	r2, #283	; 0x11b
   2878c:	f002 f88a 	bl	2a8a4 <printk>
   28790:	f240 111b 	movw	r1, #283	; 0x11b
   28794:	4852      	ldr	r0, [pc, #328]	; (288e0 <z_impl_k_poll+0x198>)
   28796:	f002 fa1e 	bl	2abd6 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2879a:	f1b8 0f00 	cmp.w	r8, #0
   2879e:	da0a      	bge.n	287b6 <z_impl_k_poll+0x6e>
   287a0:	494f      	ldr	r1, [pc, #316]	; (288e0 <z_impl_k_poll+0x198>)
   287a2:	4850      	ldr	r0, [pc, #320]	; (288e4 <z_impl_k_poll+0x19c>)
   287a4:	f44f 728e 	mov.w	r2, #284	; 0x11c
   287a8:	f002 f87c 	bl	2a8a4 <printk>
   287ac:	f44f 718e 	mov.w	r1, #284	; 0x11c
   287b0:	484b      	ldr	r0, [pc, #300]	; (288e0 <z_impl_k_poll+0x198>)
   287b2:	f002 fa10 	bl	2abd6 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   287b6:	ea56 0307 	orrs.w	r3, r6, r7
   287ba:	bf0c      	ite	eq
   287bc:	2301      	moveq	r3, #1
   287be:	2300      	movne	r3, #0
   287c0:	4641      	mov	r1, r8
   287c2:	464a      	mov	r2, r9
   287c4:	4620      	mov	r0, r4
   287c6:	f7ff fe61 	bl	2848c <register_events>
   287ca:	4680      	mov	r8, r0
	__asm__ volatile(
   287cc:	f04f 0320 	mov.w	r3, #32
   287d0:	f3ef 8911 	mrs	r9, BASEPRI
   287d4:	f383 8812 	msr	BASEPRI_MAX, r3
   287d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   287dc:	4842      	ldr	r0, [pc, #264]	; (288e8 <z_impl_k_poll+0x1a0>)
   287de:	f7fd fc89 	bl	260f4 <z_spin_lock_valid>
   287e2:	b940      	cbnz	r0, 287f6 <z_impl_k_poll+0xae>
   287e4:	4941      	ldr	r1, [pc, #260]	; (288ec <z_impl_k_poll+0x1a4>)
   287e6:	483f      	ldr	r0, [pc, #252]	; (288e4 <z_impl_k_poll+0x19c>)
   287e8:	2281      	movs	r2, #129	; 0x81
   287ea:	f002 f85b 	bl	2a8a4 <printk>
   287ee:	2181      	movs	r1, #129	; 0x81
   287f0:	483e      	ldr	r0, [pc, #248]	; (288ec <z_impl_k_poll+0x1a4>)
   287f2:	f002 f9f0 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   287f6:	483c      	ldr	r0, [pc, #240]	; (288e8 <z_impl_k_poll+0x1a0>)
   287f8:	f7fd fc98 	bl	2612c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   287fc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   28800:	b9d3      	cbnz	r3, 28838 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   28802:	4620      	mov	r0, r4
   28804:	464a      	mov	r2, r9
   28806:	4641      	mov	r1, r8
   28808:	f7ff fdac 	bl	28364 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2880c:	4836      	ldr	r0, [pc, #216]	; (288e8 <z_impl_k_poll+0x1a0>)
   2880e:	f7fd fc7f 	bl	26110 <z_spin_unlock_valid>
   28812:	b940      	cbnz	r0, 28826 <z_impl_k_poll+0xde>
   28814:	4935      	ldr	r1, [pc, #212]	; (288ec <z_impl_k_poll+0x1a4>)
   28816:	4833      	ldr	r0, [pc, #204]	; (288e4 <z_impl_k_poll+0x19c>)
   28818:	22ac      	movs	r2, #172	; 0xac
   2881a:	f002 f843 	bl	2a8a4 <printk>
   2881e:	21ac      	movs	r1, #172	; 0xac
   28820:	4832      	ldr	r0, [pc, #200]	; (288ec <z_impl_k_poll+0x1a4>)
   28822:	f002 f9d8 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   28826:	f389 8811 	msr	BASEPRI, r9
   2882a:	f3bf 8f6f 	isb	sy
		return 0;
   2882e:	2500      	movs	r5, #0
}
   28830:	4628      	mov	r0, r5
   28832:	b003      	add	sp, #12
   28834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   28838:	2300      	movs	r3, #0
   2883a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2883e:	ea56 0307 	orrs.w	r3, r6, r7
   28842:	d113      	bne.n	2886c <z_impl_k_poll+0x124>
   28844:	4828      	ldr	r0, [pc, #160]	; (288e8 <z_impl_k_poll+0x1a0>)
   28846:	f7fd fc63 	bl	26110 <z_spin_unlock_valid>
   2884a:	b940      	cbnz	r0, 2885e <z_impl_k_poll+0x116>
   2884c:	4927      	ldr	r1, [pc, #156]	; (288ec <z_impl_k_poll+0x1a4>)
   2884e:	4825      	ldr	r0, [pc, #148]	; (288e4 <z_impl_k_poll+0x19c>)
   28850:	22ac      	movs	r2, #172	; 0xac
   28852:	f002 f827 	bl	2a8a4 <printk>
   28856:	21ac      	movs	r1, #172	; 0xac
   28858:	4824      	ldr	r0, [pc, #144]	; (288ec <z_impl_k_poll+0x1a4>)
   2885a:	f002 f9bc 	bl	2abd6 <assert_post_action>
   2885e:	f389 8811 	msr	BASEPRI, r9
   28862:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   28866:	f06f 050a 	mvn.w	r5, #10
   2886a:	e7e1      	b.n	28830 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2886c:	4649      	mov	r1, r9
   2886e:	e9cd 6700 	strd	r6, r7, [sp]
   28872:	4a1f      	ldr	r2, [pc, #124]	; (288f0 <z_impl_k_poll+0x1a8>)
   28874:	481c      	ldr	r0, [pc, #112]	; (288e8 <z_impl_k_poll+0x1a0>)
   28876:	f7fe febd 	bl	275f4 <z_pend_curr>
   2887a:	4605      	mov	r5, r0
	__asm__ volatile(
   2887c:	f04f 0320 	mov.w	r3, #32
   28880:	f3ef 8611 	mrs	r6, BASEPRI
   28884:	f383 8812 	msr	BASEPRI_MAX, r3
   28888:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2888c:	4816      	ldr	r0, [pc, #88]	; (288e8 <z_impl_k_poll+0x1a0>)
   2888e:	f7fd fc31 	bl	260f4 <z_spin_lock_valid>
   28892:	b940      	cbnz	r0, 288a6 <z_impl_k_poll+0x15e>
   28894:	4915      	ldr	r1, [pc, #84]	; (288ec <z_impl_k_poll+0x1a4>)
   28896:	4813      	ldr	r0, [pc, #76]	; (288e4 <z_impl_k_poll+0x19c>)
   28898:	2281      	movs	r2, #129	; 0x81
   2889a:	f002 f803 	bl	2a8a4 <printk>
   2889e:	2181      	movs	r1, #129	; 0x81
   288a0:	4812      	ldr	r0, [pc, #72]	; (288ec <z_impl_k_poll+0x1a4>)
   288a2:	f002 f998 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   288a6:	4810      	ldr	r0, [pc, #64]	; (288e8 <z_impl_k_poll+0x1a0>)
   288a8:	f7fd fc40 	bl	2612c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   288ac:	4620      	mov	r0, r4
   288ae:	4632      	mov	r2, r6
   288b0:	4641      	mov	r1, r8
   288b2:	f7ff fd57 	bl	28364 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   288b6:	480c      	ldr	r0, [pc, #48]	; (288e8 <z_impl_k_poll+0x1a0>)
   288b8:	f7fd fc2a 	bl	26110 <z_spin_unlock_valid>
   288bc:	b940      	cbnz	r0, 288d0 <z_impl_k_poll+0x188>
   288be:	490b      	ldr	r1, [pc, #44]	; (288ec <z_impl_k_poll+0x1a4>)
   288c0:	4808      	ldr	r0, [pc, #32]	; (288e4 <z_impl_k_poll+0x19c>)
   288c2:	22ac      	movs	r2, #172	; 0xac
   288c4:	f001 ffee 	bl	2a8a4 <printk>
   288c8:	21ac      	movs	r1, #172	; 0xac
   288ca:	4808      	ldr	r0, [pc, #32]	; (288ec <z_impl_k_poll+0x1a4>)
   288cc:	f002 f983 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   288d0:	f386 8811 	msr	BASEPRI, r6
   288d4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   288d8:	e7aa      	b.n	28830 <z_impl_k_poll+0xe8>
   288da:	bf00      	nop
   288dc:	2000d3fc 	.word	0x2000d3fc
   288e0:	00030ccf 	.word	0x00030ccf
   288e4:	0002e574 	.word	0x0002e574
   288e8:	2000d450 	.word	0x2000d450
   288ec:	0002e5ae 	.word	0x0002e5ae
   288f0:	2000c6c0 	.word	0x2000c6c0

000288f4 <z_impl_k_poll_signal_raise>:
{
   288f4:	b570      	push	{r4, r5, r6, lr}
   288f6:	4604      	mov	r4, r0
   288f8:	460d      	mov	r5, r1
	__asm__ volatile(
   288fa:	f04f 0320 	mov.w	r3, #32
   288fe:	f3ef 8611 	mrs	r6, BASEPRI
   28902:	f383 8812 	msr	BASEPRI_MAX, r3
   28906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2890a:	481c      	ldr	r0, [pc, #112]	; (2897c <z_impl_k_poll_signal_raise+0x88>)
   2890c:	f7fd fbf2 	bl	260f4 <z_spin_lock_valid>
   28910:	b940      	cbnz	r0, 28924 <z_impl_k_poll_signal_raise+0x30>
   28912:	491b      	ldr	r1, [pc, #108]	; (28980 <z_impl_k_poll_signal_raise+0x8c>)
   28914:	481b      	ldr	r0, [pc, #108]	; (28984 <z_impl_k_poll_signal_raise+0x90>)
   28916:	2281      	movs	r2, #129	; 0x81
   28918:	f001 ffc4 	bl	2a8a4 <printk>
   2891c:	2181      	movs	r1, #129	; 0x81
   2891e:	4818      	ldr	r0, [pc, #96]	; (28980 <z_impl_k_poll_signal_raise+0x8c>)
   28920:	f002 f959 	bl	2abd6 <assert_post_action>
	z_spin_lock_set_owner(l);
   28924:	4815      	ldr	r0, [pc, #84]	; (2897c <z_impl_k_poll_signal_raise+0x88>)
   28926:	f7fd fc01 	bl	2612c <z_spin_lock_set_owner>
	sig->signaled = 1U;
   2892a:	2101      	movs	r1, #1
	return list->head == list;
   2892c:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   2892e:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28930:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   28932:	60a1      	str	r1, [r4, #8]
   28934:	d112      	bne.n	2895c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28936:	4811      	ldr	r0, [pc, #68]	; (2897c <z_impl_k_poll_signal_raise+0x88>)
   28938:	f7fd fbea 	bl	26110 <z_spin_unlock_valid>
   2893c:	b940      	cbnz	r0, 28950 <z_impl_k_poll_signal_raise+0x5c>
   2893e:	4910      	ldr	r1, [pc, #64]	; (28980 <z_impl_k_poll_signal_raise+0x8c>)
   28940:	4810      	ldr	r0, [pc, #64]	; (28984 <z_impl_k_poll_signal_raise+0x90>)
   28942:	22ac      	movs	r2, #172	; 0xac
   28944:	f001 ffae 	bl	2a8a4 <printk>
   28948:	21ac      	movs	r1, #172	; 0xac
   2894a:	480d      	ldr	r0, [pc, #52]	; (28980 <z_impl_k_poll_signal_raise+0x8c>)
   2894c:	f002 f943 	bl	2abd6 <assert_post_action>
	__asm__ volatile(
   28950:	f386 8811 	msr	BASEPRI, r6
   28954:	f3bf 8f6f 	isb	sy
		return 0;
   28958:	2400      	movs	r4, #0
   2895a:	e00d      	b.n	28978 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   2895c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28960:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28962:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28964:	2300      	movs	r3, #0
	node->prev = NULL;
   28966:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2896a:	f7ff fe7f 	bl	2866c <signal_poll_event>
	z_reschedule(&lock, key);
   2896e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28970:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   28972:	4802      	ldr	r0, [pc, #8]	; (2897c <z_impl_k_poll_signal_raise+0x88>)
   28974:	f7fe fa9e 	bl	26eb4 <z_reschedule>
}
   28978:	4620      	mov	r0, r4
   2897a:	bd70      	pop	{r4, r5, r6, pc}
   2897c:	2000d450 	.word	0x2000d450
   28980:	0002e5ae 	.word	0x0002e5ae
   28984:	0002e574 	.word	0x0002e574

00028988 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   28988:	2304      	movs	r3, #4
   2898a:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2898c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   28990:	4606      	mov	r6, r0
   28992:	460d      	mov	r5, r1
   28994:	d20a      	bcs.n	289ac <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28996:	f04f 0800 	mov.w	r8, #0
   2899a:	f04f 0900 	mov.w	r9, #0
   2899e:	4319      	orrs	r1, r3
   289a0:	e9cd 8900 	strd	r8, r9, [sp]
   289a4:	f7fd f988 	bl	25cb8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   289a8:	4604      	mov	r4, r0
   289aa:	b920      	cbnz	r0, 289b6 <z_heap_aligned_alloc+0x2e>
		return NULL;
   289ac:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   289ae:	4620      	mov	r0, r4
   289b0:	b002      	add	sp, #8
   289b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   289b6:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   289ba:	2d00      	cmp	r5, #0
   289bc:	d0f7      	beq.n	289ae <z_heap_aligned_alloc+0x26>
   289be:	3d01      	subs	r5, #1
   289c0:	422c      	tst	r4, r5
   289c2:	d0f4      	beq.n	289ae <z_heap_aligned_alloc+0x26>
   289c4:	2225      	movs	r2, #37	; 0x25
   289c6:	4904      	ldr	r1, [pc, #16]	; (289d8 <z_heap_aligned_alloc+0x50>)
   289c8:	4804      	ldr	r0, [pc, #16]	; (289dc <z_heap_aligned_alloc+0x54>)
   289ca:	f001 ff6b 	bl	2a8a4 <printk>
   289ce:	2125      	movs	r1, #37	; 0x25
   289d0:	4801      	ldr	r0, [pc, #4]	; (289d8 <z_heap_aligned_alloc+0x50>)
   289d2:	f002 f900 	bl	2abd6 <assert_post_action>
   289d6:	e7ea      	b.n	289ae <z_heap_aligned_alloc+0x26>
   289d8:	00030cf0 	.word	0x00030cf0
   289dc:	0002e574 	.word	0x0002e574

000289e0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   289e0:	2803      	cmp	r0, #3
{
   289e2:	b538      	push	{r3, r4, r5, lr}
   289e4:	4604      	mov	r4, r0
   289e6:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   289e8:	d901      	bls.n	289ee <k_aligned_alloc+0xe>
   289ea:	0783      	lsls	r3, r0, #30
   289ec:	d008      	beq.n	28a00 <k_aligned_alloc+0x20>
   289ee:	490e      	ldr	r1, [pc, #56]	; (28a28 <k_aligned_alloc+0x48>)
   289f0:	480e      	ldr	r0, [pc, #56]	; (28a2c <k_aligned_alloc+0x4c>)
   289f2:	2242      	movs	r2, #66	; 0x42
   289f4:	f001 ff56 	bl	2a8a4 <printk>
   289f8:	2142      	movs	r1, #66	; 0x42
   289fa:	480b      	ldr	r0, [pc, #44]	; (28a28 <k_aligned_alloc+0x48>)
   289fc:	f002 f8eb 	bl	2abd6 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   28a00:	1e63      	subs	r3, r4, #1
   28a02:	4223      	tst	r3, r4
   28a04:	d008      	beq.n	28a18 <k_aligned_alloc+0x38>
   28a06:	4908      	ldr	r1, [pc, #32]	; (28a28 <k_aligned_alloc+0x48>)
   28a08:	4808      	ldr	r0, [pc, #32]	; (28a2c <k_aligned_alloc+0x4c>)
   28a0a:	2246      	movs	r2, #70	; 0x46
   28a0c:	f001 ff4a 	bl	2a8a4 <printk>
   28a10:	2146      	movs	r1, #70	; 0x46
   28a12:	4805      	ldr	r0, [pc, #20]	; (28a28 <k_aligned_alloc+0x48>)
   28a14:	f002 f8df 	bl	2abd6 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28a18:	462a      	mov	r2, r5
   28a1a:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   28a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28a20:	4803      	ldr	r0, [pc, #12]	; (28a30 <k_aligned_alloc+0x50>)
   28a22:	f7ff bfb1 	b.w	28988 <z_heap_aligned_alloc>
   28a26:	bf00      	nop
   28a28:	00030cf0 	.word	0x00030cf0
   28a2c:	0002e574 	.word	0x0002e574
   28a30:	2000c950 	.word	0x2000c950

00028a34 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   28a34:	b538      	push	{r3, r4, r5, lr}
   28a36:	4604      	mov	r4, r0
   28a38:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28a3a:	f003 ff96 	bl	2c96a <k_is_in_isr>
   28a3e:	b950      	cbnz	r0, 28a56 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28a40:	4b06      	ldr	r3, [pc, #24]	; (28a5c <z_thread_aligned_alloc+0x28>)
   28a42:	689b      	ldr	r3, [r3, #8]
   28a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   28a46:	b143      	cbz	r3, 28a5a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   28a48:	462a      	mov	r2, r5
   28a4a:	4621      	mov	r1, r4
   28a4c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   28a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   28a52:	f7ff bf99 	b.w	28988 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   28a56:	4b02      	ldr	r3, [pc, #8]	; (28a60 <z_thread_aligned_alloc+0x2c>)
   28a58:	e7f6      	b.n	28a48 <z_thread_aligned_alloc+0x14>
}
   28a5a:	bd38      	pop	{r3, r4, r5, pc}
   28a5c:	2000d3fc 	.word	0x2000d3fc
   28a60:	2000c950 	.word	0x2000c950

00028a64 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   28a64:	4a02      	ldr	r2, [pc, #8]	; (28a70 <boot_banner+0xc>)
   28a66:	4903      	ldr	r1, [pc, #12]	; (28a74 <boot_banner+0x10>)
   28a68:	4803      	ldr	r0, [pc, #12]	; (28a78 <boot_banner+0x14>)
   28a6a:	f001 bf1b 	b.w	2a8a4 <printk>
   28a6e:	bf00      	nop
   28a70:	00030ade 	.word	0x00030ade
   28a74:	00030d14 	.word	0x00030d14
   28a78:	00030d21 	.word	0x00030d21

00028a7c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   28a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   28a7e:	2400      	movs	r4, #0
   28a80:	4b08      	ldr	r3, [pc, #32]	; (28aa4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   28a82:	f44f 627d 	mov.w	r2, #4048	; 0xfd0
	struct k_work_queue_config cfg = {
   28a86:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   28a88:	ab02      	add	r3, sp, #8
   28a8a:	9300      	str	r3, [sp, #0]
   28a8c:	4906      	ldr	r1, [pc, #24]	; (28aa8 <k_sys_work_q_init+0x2c>)
   28a8e:	f04f 33ff 	mov.w	r3, #4294967295
   28a92:	4806      	ldr	r0, [pc, #24]	; (28aac <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   28a94:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   28a98:	f7fe f898 	bl	26bcc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   28a9c:	4620      	mov	r0, r4
   28a9e:	b004      	add	sp, #16
   28aa0:	bd10      	pop	{r4, pc}
   28aa2:	bf00      	nop
   28aa4:	00030d48 	.word	0x00030d48
   28aa8:	200115a0 	.word	0x200115a0
   28aac:	2000ccd8 	.word	0x2000ccd8

00028ab0 <gmtime_r>:
   28ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ab4:	e9d0 6700 	ldrd	r6, r7, [r0]
   28ab8:	460c      	mov	r4, r1
   28aba:	4a50      	ldr	r2, [pc, #320]	; (28bfc <gmtime_r+0x14c>)
   28abc:	2300      	movs	r3, #0
   28abe:	4630      	mov	r0, r6
   28ac0:	4639      	mov	r1, r7
   28ac2:	f04f 0805 	mov.w	r8, #5
   28ac6:	f7f0 fa9b 	bl	19000 <__aeabi_ldivmod>
   28aca:	4639      	mov	r1, r7
   28acc:	4605      	mov	r5, r0
   28ace:	4a4b      	ldr	r2, [pc, #300]	; (28bfc <gmtime_r+0x14c>)
   28ad0:	4630      	mov	r0, r6
   28ad2:	2300      	movs	r3, #0
   28ad4:	f7f0 fa94 	bl	19000 <__aeabi_ldivmod>
   28ad8:	2a00      	cmp	r2, #0
   28ada:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   28ade:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   28ae2:	bfb8      	it	lt
   28ae4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   28ae8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   28aec:	bfae      	itee	ge
   28aee:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   28af2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   28af6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   28afa:	f240 176d 	movw	r7, #365	; 0x16d
   28afe:	2664      	movs	r6, #100	; 0x64
   28b00:	fbb2 f3f1 	udiv	r3, r2, r1
   28b04:	fb01 2213 	mls	r2, r1, r3, r2
   28b08:	213c      	movs	r1, #60	; 0x3c
   28b0a:	60a3      	str	r3, [r4, #8]
   28b0c:	fbb2 f3f1 	udiv	r3, r2, r1
   28b10:	fb01 2213 	mls	r2, r1, r3, r2
   28b14:	493a      	ldr	r1, [pc, #232]	; (28c00 <gmtime_r+0x150>)
   28b16:	6063      	str	r3, [r4, #4]
   28b18:	1cc3      	adds	r3, r0, #3
   28b1a:	6022      	str	r2, [r4, #0]
   28b1c:	2207      	movs	r2, #7
   28b1e:	fb93 f2f2 	sdiv	r2, r3, r2
   28b22:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   28b26:	1a9b      	subs	r3, r3, r2
   28b28:	f648 62ac 	movw	r2, #36524	; 0x8eac
   28b2c:	bf48      	it	mi
   28b2e:	3307      	addmi	r3, #7
   28b30:	2800      	cmp	r0, #0
   28b32:	61a3      	str	r3, [r4, #24]
   28b34:	bfbb      	ittet	lt
   28b36:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   28b3a:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   28b3e:	fb90 f1f1 	sdivge	r1, r0, r1
   28b42:	fb93 f1f1 	sdivlt	r1, r3, r1
   28b46:	4b2f      	ldr	r3, [pc, #188]	; (28c04 <gmtime_r+0x154>)
   28b48:	fb03 0001 	mla	r0, r3, r1, r0
   28b4c:	fbb0 f2f2 	udiv	r2, r0, r2
   28b50:	fbb0 f3fc 	udiv	r3, r0, ip
   28b54:	4402      	add	r2, r0
   28b56:	1ad2      	subs	r2, r2, r3
   28b58:	4b2b      	ldr	r3, [pc, #172]	; (28c08 <gmtime_r+0x158>)
   28b5a:	fbb0 f3f3 	udiv	r3, r0, r3
   28b5e:	1ad3      	subs	r3, r2, r3
   28b60:	fbb3 f5f7 	udiv	r5, r3, r7
   28b64:	fbb3 f3fc 	udiv	r3, r3, ip
   28b68:	fbb5 f2f6 	udiv	r2, r5, r6
   28b6c:	1ad3      	subs	r3, r2, r3
   28b6e:	4403      	add	r3, r0
   28b70:	2099      	movs	r0, #153	; 0x99
   28b72:	fb07 3315 	mls	r3, r7, r5, r3
   28b76:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   28b7a:	f103 0e01 	add.w	lr, r3, #1
   28b7e:	f10c 0c02 	add.w	ip, ip, #2
   28b82:	fbbc f7f0 	udiv	r7, ip, r0
   28b86:	4378      	muls	r0, r7
   28b88:	3002      	adds	r0, #2
   28b8a:	fbb0 f0f8 	udiv	r0, r0, r8
   28b8e:	ebae 0000 	sub.w	r0, lr, r0
   28b92:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   28b96:	45f4      	cmp	ip, lr
   28b98:	bf94      	ite	ls
   28b9a:	f04f 0c02 	movls.w	ip, #2
   28b9e:	f06f 0c09 	mvnhi.w	ip, #9
   28ba2:	4467      	add	r7, ip
   28ba4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   28ba8:	fb0c 5101 	mla	r1, ip, r1, r5
   28bac:	2f01      	cmp	r7, #1
   28bae:	bf98      	it	ls
   28bb0:	3101      	addls	r1, #1
   28bb2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   28bb6:	d30c      	bcc.n	28bd2 <gmtime_r+0x122>
   28bb8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   28bbc:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   28bc0:	61e3      	str	r3, [r4, #28]
   28bc2:	2300      	movs	r3, #0
   28bc4:	60e0      	str	r0, [r4, #12]
   28bc6:	4620      	mov	r0, r4
   28bc8:	6223      	str	r3, [r4, #32]
   28bca:	e9c4 7104 	strd	r7, r1, [r4, #16]
   28bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28bd2:	f015 0f03 	tst.w	r5, #3
   28bd6:	d102      	bne.n	28bde <gmtime_r+0x12e>
   28bd8:	fb06 5212 	mls	r2, r6, r2, r5
   28bdc:	b95a      	cbnz	r2, 28bf6 <gmtime_r+0x146>
   28bde:	f44f 76c8 	mov.w	r6, #400	; 0x190
   28be2:	fbb5 f2f6 	udiv	r2, r5, r6
   28be6:	fb06 5212 	mls	r2, r6, r2, r5
   28bea:	fab2 f282 	clz	r2, r2
   28bee:	0952      	lsrs	r2, r2, #5
   28bf0:	333b      	adds	r3, #59	; 0x3b
   28bf2:	4413      	add	r3, r2
   28bf4:	e7e2      	b.n	28bbc <gmtime_r+0x10c>
   28bf6:	2201      	movs	r2, #1
   28bf8:	e7fa      	b.n	28bf0 <gmtime_r+0x140>
   28bfa:	bf00      	nop
   28bfc:	00015180 	.word	0x00015180
   28c00:	00023ab1 	.word	0x00023ab1
   28c04:	fffdc54f 	.word	0xfffdc54f
   28c08:	00023ab0 	.word	0x00023ab0

00028c0c <localtime>:
   28c0c:	b538      	push	{r3, r4, r5, lr}
   28c0e:	4b07      	ldr	r3, [pc, #28]	; (28c2c <localtime+0x20>)
   28c10:	4604      	mov	r4, r0
   28c12:	681d      	ldr	r5, [r3, #0]
   28c14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   28c16:	b91b      	cbnz	r3, 28c20 <localtime+0x14>
   28c18:	2024      	movs	r0, #36	; 0x24
   28c1a:	f000 f8ff 	bl	28e1c <malloc>
   28c1e:	63e8      	str	r0, [r5, #60]	; 0x3c
   28c20:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   28c22:	4620      	mov	r0, r4
   28c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28c28:	f000 b802 	b.w	28c30 <localtime_r>
   28c2c:	2000c6d0 	.word	0x2000c6d0

00028c30 <localtime_r>:
   28c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c34:	460c      	mov	r4, r1
   28c36:	4607      	mov	r7, r0
   28c38:	f001 f988 	bl	29f4c <__gettzinfo>
   28c3c:	4680      	mov	r8, r0
   28c3e:	4621      	mov	r1, r4
   28c40:	4638      	mov	r0, r7
   28c42:	f7ff ff35 	bl	28ab0 <gmtime_r>
   28c46:	6943      	ldr	r3, [r0, #20]
   28c48:	4604      	mov	r4, r0
   28c4a:	079a      	lsls	r2, r3, #30
   28c4c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   28c50:	d105      	bne.n	28c5e <localtime_r+0x2e>
   28c52:	2264      	movs	r2, #100	; 0x64
   28c54:	fb96 f3f2 	sdiv	r3, r6, r2
   28c58:	fb02 6313 	mls	r3, r2, r3, r6
   28c5c:	bb7b      	cbnz	r3, 28cbe <localtime_r+0x8e>
   28c5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   28c62:	fb96 f5f3 	sdiv	r5, r6, r3
   28c66:	fb03 6515 	mls	r5, r3, r5, r6
   28c6a:	fab5 f585 	clz	r5, r5
   28c6e:	096d      	lsrs	r5, r5, #5
   28c70:	4b68      	ldr	r3, [pc, #416]	; (28e14 <localtime_r+0x1e4>)
   28c72:	2230      	movs	r2, #48	; 0x30
   28c74:	fb02 3505 	mla	r5, r2, r5, r3
   28c78:	f000 ff60 	bl	29b3c <__tz_lock>
   28c7c:	f000 ff6a 	bl	29b54 <_tzset_unlocked>
   28c80:	4b65      	ldr	r3, [pc, #404]	; (28e18 <localtime_r+0x1e8>)
   28c82:	681b      	ldr	r3, [r3, #0]
   28c84:	b353      	cbz	r3, 28cdc <localtime_r+0xac>
   28c86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28c8a:	42b3      	cmp	r3, r6
   28c8c:	d119      	bne.n	28cc2 <localtime_r+0x92>
   28c8e:	f8d8 1000 	ldr.w	r1, [r8]
   28c92:	e9d7 6700 	ldrd	r6, r7, [r7]
   28c96:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   28c9a:	b9d1      	cbnz	r1, 28cd2 <localtime_r+0xa2>
   28c9c:	4296      	cmp	r6, r2
   28c9e:	eb77 0303 	sbcs.w	r3, r7, r3
   28ca2:	da23      	bge.n	28cec <localtime_r+0xbc>
   28ca4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   28ca8:	4296      	cmp	r6, r2
   28caa:	eb77 0303 	sbcs.w	r3, r7, r3
   28cae:	bfb4      	ite	lt
   28cb0:	2301      	movlt	r3, #1
   28cb2:	2300      	movge	r3, #0
   28cb4:	6223      	str	r3, [r4, #32]
   28cb6:	db1b      	blt.n	28cf0 <localtime_r+0xc0>
   28cb8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   28cbc:	e01a      	b.n	28cf4 <localtime_r+0xc4>
   28cbe:	2501      	movs	r5, #1
   28cc0:	e7d6      	b.n	28c70 <localtime_r+0x40>
   28cc2:	4630      	mov	r0, r6
   28cc4:	f000 fe92 	bl	299ec <__tzcalc_limits>
   28cc8:	2800      	cmp	r0, #0
   28cca:	d1e0      	bne.n	28c8e <localtime_r+0x5e>
   28ccc:	f04f 33ff 	mov.w	r3, #4294967295
   28cd0:	e004      	b.n	28cdc <localtime_r+0xac>
   28cd2:	4296      	cmp	r6, r2
   28cd4:	eb77 0303 	sbcs.w	r3, r7, r3
   28cd8:	da02      	bge.n	28ce0 <localtime_r+0xb0>
   28cda:	2300      	movs	r3, #0
   28cdc:	6223      	str	r3, [r4, #32]
   28cde:	e7eb      	b.n	28cb8 <localtime_r+0x88>
   28ce0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   28ce4:	4296      	cmp	r6, r2
   28ce6:	eb77 0303 	sbcs.w	r3, r7, r3
   28cea:	daf6      	bge.n	28cda <localtime_r+0xaa>
   28cec:	2301      	movs	r3, #1
   28cee:	6223      	str	r3, [r4, #32]
   28cf0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   28cf4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   28cf8:	203c      	movs	r0, #60	; 0x3c
   28cfa:	fb91 f6f3 	sdiv	r6, r1, r3
   28cfe:	fb03 1316 	mls	r3, r3, r6, r1
   28d02:	6861      	ldr	r1, [r4, #4]
   28d04:	fb93 f2f0 	sdiv	r2, r3, r0
   28d08:	fb00 3012 	mls	r0, r0, r2, r3
   28d0c:	6823      	ldr	r3, [r4, #0]
   28d0e:	1a89      	subs	r1, r1, r2
   28d10:	68a2      	ldr	r2, [r4, #8]
   28d12:	1a1b      	subs	r3, r3, r0
   28d14:	1b92      	subs	r2, r2, r6
   28d16:	6061      	str	r1, [r4, #4]
   28d18:	2b3b      	cmp	r3, #59	; 0x3b
   28d1a:	6023      	str	r3, [r4, #0]
   28d1c:	60a2      	str	r2, [r4, #8]
   28d1e:	dd34      	ble.n	28d8a <localtime_r+0x15a>
   28d20:	3101      	adds	r1, #1
   28d22:	3b3c      	subs	r3, #60	; 0x3c
   28d24:	6061      	str	r1, [r4, #4]
   28d26:	6023      	str	r3, [r4, #0]
   28d28:	6863      	ldr	r3, [r4, #4]
   28d2a:	2b3b      	cmp	r3, #59	; 0x3b
   28d2c:	dd33      	ble.n	28d96 <localtime_r+0x166>
   28d2e:	3201      	adds	r2, #1
   28d30:	3b3c      	subs	r3, #60	; 0x3c
   28d32:	60a2      	str	r2, [r4, #8]
   28d34:	6063      	str	r3, [r4, #4]
   28d36:	68a3      	ldr	r3, [r4, #8]
   28d38:	2b17      	cmp	r3, #23
   28d3a:	dd32      	ble.n	28da2 <localtime_r+0x172>
   28d3c:	69e2      	ldr	r2, [r4, #28]
   28d3e:	3b18      	subs	r3, #24
   28d40:	3201      	adds	r2, #1
   28d42:	60a3      	str	r3, [r4, #8]
   28d44:	6923      	ldr	r3, [r4, #16]
   28d46:	61e2      	str	r2, [r4, #28]
   28d48:	69a2      	ldr	r2, [r4, #24]
   28d4a:	3201      	adds	r2, #1
   28d4c:	2a06      	cmp	r2, #6
   28d4e:	bfc8      	it	gt
   28d50:	2200      	movgt	r2, #0
   28d52:	61a2      	str	r2, [r4, #24]
   28d54:	68e2      	ldr	r2, [r4, #12]
   28d56:	3201      	adds	r2, #1
   28d58:	60e2      	str	r2, [r4, #12]
   28d5a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   28d5e:	428a      	cmp	r2, r1
   28d60:	dd0e      	ble.n	28d80 <localtime_r+0x150>
   28d62:	2b0b      	cmp	r3, #11
   28d64:	eba2 0201 	sub.w	r2, r2, r1
   28d68:	60e2      	str	r2, [r4, #12]
   28d6a:	f103 0201 	add.w	r2, r3, #1
   28d6e:	bf05      	ittet	eq
   28d70:	6963      	ldreq	r3, [r4, #20]
   28d72:	2200      	moveq	r2, #0
   28d74:	6122      	strne	r2, [r4, #16]
   28d76:	3301      	addeq	r3, #1
   28d78:	bf02      	ittt	eq
   28d7a:	6122      	streq	r2, [r4, #16]
   28d7c:	61e2      	streq	r2, [r4, #28]
   28d7e:	6163      	streq	r3, [r4, #20]
   28d80:	f000 fee2 	bl	29b48 <__tz_unlock>
   28d84:	4620      	mov	r0, r4
   28d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28d8a:	2b00      	cmp	r3, #0
   28d8c:	dacc      	bge.n	28d28 <localtime_r+0xf8>
   28d8e:	3901      	subs	r1, #1
   28d90:	333c      	adds	r3, #60	; 0x3c
   28d92:	6061      	str	r1, [r4, #4]
   28d94:	e7c7      	b.n	28d26 <localtime_r+0xf6>
   28d96:	2b00      	cmp	r3, #0
   28d98:	dacd      	bge.n	28d36 <localtime_r+0x106>
   28d9a:	3a01      	subs	r2, #1
   28d9c:	333c      	adds	r3, #60	; 0x3c
   28d9e:	60a2      	str	r2, [r4, #8]
   28da0:	e7c8      	b.n	28d34 <localtime_r+0x104>
   28da2:	2b00      	cmp	r3, #0
   28da4:	daec      	bge.n	28d80 <localtime_r+0x150>
   28da6:	69e2      	ldr	r2, [r4, #28]
   28da8:	3318      	adds	r3, #24
   28daa:	3a01      	subs	r2, #1
   28dac:	60a3      	str	r3, [r4, #8]
   28dae:	61e2      	str	r2, [r4, #28]
   28db0:	69a2      	ldr	r2, [r4, #24]
   28db2:	3a01      	subs	r2, #1
   28db4:	bf48      	it	mi
   28db6:	2206      	movmi	r2, #6
   28db8:	61a2      	str	r2, [r4, #24]
   28dba:	68e2      	ldr	r2, [r4, #12]
   28dbc:	3a01      	subs	r2, #1
   28dbe:	60e2      	str	r2, [r4, #12]
   28dc0:	2a00      	cmp	r2, #0
   28dc2:	d1dd      	bne.n	28d80 <localtime_r+0x150>
   28dc4:	6923      	ldr	r3, [r4, #16]
   28dc6:	3b01      	subs	r3, #1
   28dc8:	d405      	bmi.n	28dd6 <localtime_r+0x1a6>
   28dca:	6123      	str	r3, [r4, #16]
   28dcc:	6923      	ldr	r3, [r4, #16]
   28dce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   28dd2:	60e3      	str	r3, [r4, #12]
   28dd4:	e7d4      	b.n	28d80 <localtime_r+0x150>
   28dd6:	230b      	movs	r3, #11
   28dd8:	6123      	str	r3, [r4, #16]
   28dda:	6963      	ldr	r3, [r4, #20]
   28ddc:	1e5a      	subs	r2, r3, #1
   28dde:	6162      	str	r2, [r4, #20]
   28de0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   28de4:	0793      	lsls	r3, r2, #30
   28de6:	d105      	bne.n	28df4 <localtime_r+0x1c4>
   28de8:	2164      	movs	r1, #100	; 0x64
   28dea:	fb92 f3f1 	sdiv	r3, r2, r1
   28dee:	fb01 2313 	mls	r3, r1, r3, r2
   28df2:	b963      	cbnz	r3, 28e0e <localtime_r+0x1de>
   28df4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   28df8:	fb92 f3f1 	sdiv	r3, r2, r1
   28dfc:	fb01 2313 	mls	r3, r1, r3, r2
   28e00:	fab3 f383 	clz	r3, r3
   28e04:	095b      	lsrs	r3, r3, #5
   28e06:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   28e0a:	61e3      	str	r3, [r4, #28]
   28e0c:	e7de      	b.n	28dcc <localtime_r+0x19c>
   28e0e:	2301      	movs	r3, #1
   28e10:	e7f9      	b.n	28e06 <localtime_r+0x1d6>
   28e12:	bf00      	nop
   28e14:	0002e180 	.word	0x0002e180
   28e18:	2000d460 	.word	0x2000d460

00028e1c <malloc>:
   28e1c:	4b02      	ldr	r3, [pc, #8]	; (28e28 <malloc+0xc>)
   28e1e:	4601      	mov	r1, r0
   28e20:	6818      	ldr	r0, [r3, #0]
   28e22:	f000 b859 	b.w	28ed8 <_malloc_r>
   28e26:	bf00      	nop
   28e28:	2000c6d0 	.word	0x2000c6d0

00028e2c <free>:
   28e2c:	4b02      	ldr	r3, [pc, #8]	; (28e38 <free+0xc>)
   28e2e:	4601      	mov	r1, r0
   28e30:	6818      	ldr	r0, [r3, #0]
   28e32:	f000 b803 	b.w	28e3c <_free_r>
   28e36:	bf00      	nop
   28e38:	2000c6d0 	.word	0x2000c6d0

00028e3c <_free_r>:
   28e3c:	b538      	push	{r3, r4, r5, lr}
   28e3e:	4605      	mov	r5, r0
   28e40:	2900      	cmp	r1, #0
   28e42:	d045      	beq.n	28ed0 <_free_r+0x94>
   28e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28e48:	1f0c      	subs	r4, r1, #4
   28e4a:	2b00      	cmp	r3, #0
   28e4c:	bfb8      	it	lt
   28e4e:	18e4      	addlt	r4, r4, r3
   28e50:	f001 f884 	bl	29f5c <__malloc_lock>
   28e54:	4a1f      	ldr	r2, [pc, #124]	; (28ed4 <_free_r+0x98>)
   28e56:	6813      	ldr	r3, [r2, #0]
   28e58:	4610      	mov	r0, r2
   28e5a:	b933      	cbnz	r3, 28e6a <_free_r+0x2e>
   28e5c:	6063      	str	r3, [r4, #4]
   28e5e:	6014      	str	r4, [r2, #0]
   28e60:	4628      	mov	r0, r5
   28e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28e66:	f001 b87f 	b.w	29f68 <__malloc_unlock>
   28e6a:	42a3      	cmp	r3, r4
   28e6c:	d90b      	bls.n	28e86 <_free_r+0x4a>
   28e6e:	6821      	ldr	r1, [r4, #0]
   28e70:	1862      	adds	r2, r4, r1
   28e72:	4293      	cmp	r3, r2
   28e74:	bf02      	ittt	eq
   28e76:	681a      	ldreq	r2, [r3, #0]
   28e78:	685b      	ldreq	r3, [r3, #4]
   28e7a:	1852      	addeq	r2, r2, r1
   28e7c:	6063      	str	r3, [r4, #4]
   28e7e:	bf08      	it	eq
   28e80:	6022      	streq	r2, [r4, #0]
   28e82:	6004      	str	r4, [r0, #0]
   28e84:	e7ec      	b.n	28e60 <_free_r+0x24>
   28e86:	461a      	mov	r2, r3
   28e88:	685b      	ldr	r3, [r3, #4]
   28e8a:	b10b      	cbz	r3, 28e90 <_free_r+0x54>
   28e8c:	42a3      	cmp	r3, r4
   28e8e:	d9fa      	bls.n	28e86 <_free_r+0x4a>
   28e90:	6811      	ldr	r1, [r2, #0]
   28e92:	1850      	adds	r0, r2, r1
   28e94:	42a0      	cmp	r0, r4
   28e96:	d10b      	bne.n	28eb0 <_free_r+0x74>
   28e98:	6820      	ldr	r0, [r4, #0]
   28e9a:	4401      	add	r1, r0
   28e9c:	1850      	adds	r0, r2, r1
   28e9e:	6011      	str	r1, [r2, #0]
   28ea0:	4283      	cmp	r3, r0
   28ea2:	d1dd      	bne.n	28e60 <_free_r+0x24>
   28ea4:	6818      	ldr	r0, [r3, #0]
   28ea6:	685b      	ldr	r3, [r3, #4]
   28ea8:	4401      	add	r1, r0
   28eaa:	6053      	str	r3, [r2, #4]
   28eac:	6011      	str	r1, [r2, #0]
   28eae:	e7d7      	b.n	28e60 <_free_r+0x24>
   28eb0:	d902      	bls.n	28eb8 <_free_r+0x7c>
   28eb2:	230c      	movs	r3, #12
   28eb4:	602b      	str	r3, [r5, #0]
   28eb6:	e7d3      	b.n	28e60 <_free_r+0x24>
   28eb8:	6820      	ldr	r0, [r4, #0]
   28eba:	1821      	adds	r1, r4, r0
   28ebc:	428b      	cmp	r3, r1
   28ebe:	bf02      	ittt	eq
   28ec0:	6819      	ldreq	r1, [r3, #0]
   28ec2:	685b      	ldreq	r3, [r3, #4]
   28ec4:	1809      	addeq	r1, r1, r0
   28ec6:	6063      	str	r3, [r4, #4]
   28ec8:	bf08      	it	eq
   28eca:	6021      	streq	r1, [r4, #0]
   28ecc:	6054      	str	r4, [r2, #4]
   28ece:	e7c7      	b.n	28e60 <_free_r+0x24>
   28ed0:	bd38      	pop	{r3, r4, r5, pc}
   28ed2:	bf00      	nop
   28ed4:	2000d454 	.word	0x2000d454

00028ed8 <_malloc_r>:
   28ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28eda:	1ccd      	adds	r5, r1, #3
   28edc:	4606      	mov	r6, r0
   28ede:	f025 0503 	bic.w	r5, r5, #3
   28ee2:	3508      	adds	r5, #8
   28ee4:	2d0c      	cmp	r5, #12
   28ee6:	bf38      	it	cc
   28ee8:	250c      	movcc	r5, #12
   28eea:	2d00      	cmp	r5, #0
   28eec:	db01      	blt.n	28ef2 <_malloc_r+0x1a>
   28eee:	42a9      	cmp	r1, r5
   28ef0:	d903      	bls.n	28efa <_malloc_r+0x22>
   28ef2:	230c      	movs	r3, #12
   28ef4:	6033      	str	r3, [r6, #0]
   28ef6:	2000      	movs	r0, #0
   28ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28efa:	f001 f82f 	bl	29f5c <__malloc_lock>
   28efe:	4921      	ldr	r1, [pc, #132]	; (28f84 <_malloc_r+0xac>)
   28f00:	680a      	ldr	r2, [r1, #0]
   28f02:	4614      	mov	r4, r2
   28f04:	b99c      	cbnz	r4, 28f2e <_malloc_r+0x56>
   28f06:	4f20      	ldr	r7, [pc, #128]	; (28f88 <_malloc_r+0xb0>)
   28f08:	683b      	ldr	r3, [r7, #0]
   28f0a:	b923      	cbnz	r3, 28f16 <_malloc_r+0x3e>
   28f0c:	4621      	mov	r1, r4
   28f0e:	4630      	mov	r0, r6
   28f10:	f000 fb8c 	bl	2962c <_sbrk_r>
   28f14:	6038      	str	r0, [r7, #0]
   28f16:	4629      	mov	r1, r5
   28f18:	4630      	mov	r0, r6
   28f1a:	f000 fb87 	bl	2962c <_sbrk_r>
   28f1e:	1c43      	adds	r3, r0, #1
   28f20:	d123      	bne.n	28f6a <_malloc_r+0x92>
   28f22:	230c      	movs	r3, #12
   28f24:	4630      	mov	r0, r6
   28f26:	6033      	str	r3, [r6, #0]
   28f28:	f001 f81e 	bl	29f68 <__malloc_unlock>
   28f2c:	e7e3      	b.n	28ef6 <_malloc_r+0x1e>
   28f2e:	6823      	ldr	r3, [r4, #0]
   28f30:	1b5b      	subs	r3, r3, r5
   28f32:	d417      	bmi.n	28f64 <_malloc_r+0x8c>
   28f34:	2b0b      	cmp	r3, #11
   28f36:	d903      	bls.n	28f40 <_malloc_r+0x68>
   28f38:	6023      	str	r3, [r4, #0]
   28f3a:	441c      	add	r4, r3
   28f3c:	6025      	str	r5, [r4, #0]
   28f3e:	e004      	b.n	28f4a <_malloc_r+0x72>
   28f40:	6863      	ldr	r3, [r4, #4]
   28f42:	42a2      	cmp	r2, r4
   28f44:	bf0c      	ite	eq
   28f46:	600b      	streq	r3, [r1, #0]
   28f48:	6053      	strne	r3, [r2, #4]
   28f4a:	4630      	mov	r0, r6
   28f4c:	f001 f80c 	bl	29f68 <__malloc_unlock>
   28f50:	f104 000b 	add.w	r0, r4, #11
   28f54:	1d23      	adds	r3, r4, #4
   28f56:	f020 0007 	bic.w	r0, r0, #7
   28f5a:	1ac2      	subs	r2, r0, r3
   28f5c:	d0cc      	beq.n	28ef8 <_malloc_r+0x20>
   28f5e:	1a1b      	subs	r3, r3, r0
   28f60:	50a3      	str	r3, [r4, r2]
   28f62:	e7c9      	b.n	28ef8 <_malloc_r+0x20>
   28f64:	4622      	mov	r2, r4
   28f66:	6864      	ldr	r4, [r4, #4]
   28f68:	e7cc      	b.n	28f04 <_malloc_r+0x2c>
   28f6a:	1cc4      	adds	r4, r0, #3
   28f6c:	f024 0403 	bic.w	r4, r4, #3
   28f70:	42a0      	cmp	r0, r4
   28f72:	d0e3      	beq.n	28f3c <_malloc_r+0x64>
   28f74:	1a21      	subs	r1, r4, r0
   28f76:	4630      	mov	r0, r6
   28f78:	f000 fb58 	bl	2962c <_sbrk_r>
   28f7c:	3001      	adds	r0, #1
   28f7e:	d1dd      	bne.n	28f3c <_malloc_r+0x64>
   28f80:	e7cf      	b.n	28f22 <_malloc_r+0x4a>
   28f82:	bf00      	nop
   28f84:	2000d454 	.word	0x2000d454
   28f88:	2000d458 	.word	0x2000d458

00028f8c <_printf_float>:
   28f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f90:	b091      	sub	sp, #68	; 0x44
   28f92:	460c      	mov	r4, r1
   28f94:	4616      	mov	r6, r2
   28f96:	461f      	mov	r7, r3
   28f98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   28f9c:	4605      	mov	r5, r0
   28f9e:	f000 ffd9 	bl	29f54 <_localeconv_r>
   28fa2:	6803      	ldr	r3, [r0, #0]
   28fa4:	4618      	mov	r0, r3
   28fa6:	9309      	str	r3, [sp, #36]	; 0x24
   28fa8:	f7f0 fac8 	bl	1953c <strlen>
   28fac:	2300      	movs	r3, #0
   28fae:	900a      	str	r0, [sp, #40]	; 0x28
   28fb0:	930e      	str	r3, [sp, #56]	; 0x38
   28fb2:	f8d8 3000 	ldr.w	r3, [r8]
   28fb6:	f894 9018 	ldrb.w	r9, [r4, #24]
   28fba:	3307      	adds	r3, #7
   28fbc:	f8d4 b000 	ldr.w	fp, [r4]
   28fc0:	f023 0307 	bic.w	r3, r3, #7
   28fc4:	f103 0208 	add.w	r2, r3, #8
   28fc8:	f8c8 2000 	str.w	r2, [r8]
   28fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   28fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   28fd4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   28fd8:	f04f 32ff 	mov.w	r2, #4294967295
   28fdc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   28fe0:	4640      	mov	r0, r8
   28fe2:	930b      	str	r3, [sp, #44]	; 0x2c
   28fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   28fe6:	4b9b      	ldr	r3, [pc, #620]	; (29254 <_printf_float+0x2c8>)
   28fe8:	f7f0 fa60 	bl	194ac <__aeabi_dcmpun>
   28fec:	bb70      	cbnz	r0, 2904c <_printf_float+0xc0>
   28fee:	f04f 32ff 	mov.w	r2, #4294967295
   28ff2:	4b98      	ldr	r3, [pc, #608]	; (29254 <_printf_float+0x2c8>)
   28ff4:	4640      	mov	r0, r8
   28ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   28ff8:	f7f0 fa3a 	bl	19470 <__aeabi_dcmple>
   28ffc:	bb30      	cbnz	r0, 2904c <_printf_float+0xc0>
   28ffe:	2200      	movs	r2, #0
   29000:	2300      	movs	r3, #0
   29002:	4640      	mov	r0, r8
   29004:	4651      	mov	r1, sl
   29006:	f7f0 fa29 	bl	1945c <__aeabi_dcmplt>
   2900a:	b110      	cbz	r0, 29012 <_printf_float+0x86>
   2900c:	232d      	movs	r3, #45	; 0x2d
   2900e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   29012:	4b91      	ldr	r3, [pc, #580]	; (29258 <_printf_float+0x2cc>)
   29014:	4891      	ldr	r0, [pc, #580]	; (2925c <_printf_float+0x2d0>)
   29016:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   2901a:	bf94      	ite	ls
   2901c:	4698      	movls	r8, r3
   2901e:	4680      	movhi	r8, r0
   29020:	2303      	movs	r3, #3
   29022:	f04f 0a00 	mov.w	sl, #0
   29026:	6123      	str	r3, [r4, #16]
   29028:	f02b 0304 	bic.w	r3, fp, #4
   2902c:	6023      	str	r3, [r4, #0]
   2902e:	4633      	mov	r3, r6
   29030:	aa0f      	add	r2, sp, #60	; 0x3c
   29032:	4621      	mov	r1, r4
   29034:	4628      	mov	r0, r5
   29036:	9700      	str	r7, [sp, #0]
   29038:	f003 fe7e 	bl	2cd38 <_printf_common>
   2903c:	3001      	adds	r0, #1
   2903e:	f040 808f 	bne.w	29160 <_printf_float+0x1d4>
   29042:	f04f 30ff 	mov.w	r0, #4294967295
   29046:	b011      	add	sp, #68	; 0x44
   29048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2904c:	4642      	mov	r2, r8
   2904e:	4653      	mov	r3, sl
   29050:	4640      	mov	r0, r8
   29052:	4651      	mov	r1, sl
   29054:	f7f0 fa2a 	bl	194ac <__aeabi_dcmpun>
   29058:	b140      	cbz	r0, 2906c <_printf_float+0xe0>
   2905a:	f1ba 0f00 	cmp.w	sl, #0
   2905e:	4880      	ldr	r0, [pc, #512]	; (29260 <_printf_float+0x2d4>)
   29060:	bfbc      	itt	lt
   29062:	232d      	movlt	r3, #45	; 0x2d
   29064:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   29068:	4b7e      	ldr	r3, [pc, #504]	; (29264 <_printf_float+0x2d8>)
   2906a:	e7d4      	b.n	29016 <_printf_float+0x8a>
   2906c:	6863      	ldr	r3, [r4, #4]
   2906e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   29072:	1c5a      	adds	r2, r3, #1
   29074:	d142      	bne.n	290fc <_printf_float+0x170>
   29076:	2306      	movs	r3, #6
   29078:	6063      	str	r3, [r4, #4]
   2907a:	2200      	movs	r2, #0
   2907c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   29080:	4628      	mov	r0, r5
   29082:	910b      	str	r1, [sp, #44]	; 0x2c
   29084:	9206      	str	r2, [sp, #24]
   29086:	aa0e      	add	r2, sp, #56	; 0x38
   29088:	6023      	str	r3, [r4, #0]
   2908a:	e9cd 9204 	strd	r9, r2, [sp, #16]
   2908e:	aa0d      	add	r2, sp, #52	; 0x34
   29090:	9203      	str	r2, [sp, #12]
   29092:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   29096:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2909a:	6863      	ldr	r3, [r4, #4]
   2909c:	4642      	mov	r2, r8
   2909e:	9300      	str	r3, [sp, #0]
   290a0:	4653      	mov	r3, sl
   290a2:	f003 fdab 	bl	2cbfc <__cvt>
   290a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   290a8:	4680      	mov	r8, r0
   290aa:	2947      	cmp	r1, #71	; 0x47
   290ac:	990d      	ldr	r1, [sp, #52]	; 0x34
   290ae:	d108      	bne.n	290c2 <_printf_float+0x136>
   290b0:	1cc8      	adds	r0, r1, #3
   290b2:	db02      	blt.n	290ba <_printf_float+0x12e>
   290b4:	6863      	ldr	r3, [r4, #4]
   290b6:	4299      	cmp	r1, r3
   290b8:	dd40      	ble.n	2913c <_printf_float+0x1b0>
   290ba:	f1a9 0902 	sub.w	r9, r9, #2
   290be:	fa5f f989 	uxtb.w	r9, r9
   290c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   290c6:	d81f      	bhi.n	29108 <_printf_float+0x17c>
   290c8:	3901      	subs	r1, #1
   290ca:	464a      	mov	r2, r9
   290cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   290d0:	910d      	str	r1, [sp, #52]	; 0x34
   290d2:	f003 fdf3 	bl	2ccbc <__exponent>
   290d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   290d8:	4682      	mov	sl, r0
   290da:	1813      	adds	r3, r2, r0
   290dc:	2a01      	cmp	r2, #1
   290de:	6123      	str	r3, [r4, #16]
   290e0:	dc02      	bgt.n	290e8 <_printf_float+0x15c>
   290e2:	6822      	ldr	r2, [r4, #0]
   290e4:	07d2      	lsls	r2, r2, #31
   290e6:	d501      	bpl.n	290ec <_printf_float+0x160>
   290e8:	3301      	adds	r3, #1
   290ea:	6123      	str	r3, [r4, #16]
   290ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   290f0:	2b00      	cmp	r3, #0
   290f2:	d09c      	beq.n	2902e <_printf_float+0xa2>
   290f4:	232d      	movs	r3, #45	; 0x2d
   290f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   290fa:	e798      	b.n	2902e <_printf_float+0xa2>
   290fc:	2947      	cmp	r1, #71	; 0x47
   290fe:	d1bc      	bne.n	2907a <_printf_float+0xee>
   29100:	2b00      	cmp	r3, #0
   29102:	d1ba      	bne.n	2907a <_printf_float+0xee>
   29104:	2301      	movs	r3, #1
   29106:	e7b7      	b.n	29078 <_printf_float+0xec>
   29108:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   2910c:	d118      	bne.n	29140 <_printf_float+0x1b4>
   2910e:	2900      	cmp	r1, #0
   29110:	6863      	ldr	r3, [r4, #4]
   29112:	dd0b      	ble.n	2912c <_printf_float+0x1a0>
   29114:	6121      	str	r1, [r4, #16]
   29116:	b913      	cbnz	r3, 2911e <_printf_float+0x192>
   29118:	6822      	ldr	r2, [r4, #0]
   2911a:	07d0      	lsls	r0, r2, #31
   2911c:	d502      	bpl.n	29124 <_printf_float+0x198>
   2911e:	3301      	adds	r3, #1
   29120:	440b      	add	r3, r1
   29122:	6123      	str	r3, [r4, #16]
   29124:	f04f 0a00 	mov.w	sl, #0
   29128:	65a1      	str	r1, [r4, #88]	; 0x58
   2912a:	e7df      	b.n	290ec <_printf_float+0x160>
   2912c:	b913      	cbnz	r3, 29134 <_printf_float+0x1a8>
   2912e:	6822      	ldr	r2, [r4, #0]
   29130:	07d2      	lsls	r2, r2, #31
   29132:	d501      	bpl.n	29138 <_printf_float+0x1ac>
   29134:	3302      	adds	r3, #2
   29136:	e7f4      	b.n	29122 <_printf_float+0x196>
   29138:	2301      	movs	r3, #1
   2913a:	e7f2      	b.n	29122 <_printf_float+0x196>
   2913c:	f04f 0967 	mov.w	r9, #103	; 0x67
   29140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29142:	4299      	cmp	r1, r3
   29144:	db05      	blt.n	29152 <_printf_float+0x1c6>
   29146:	6823      	ldr	r3, [r4, #0]
   29148:	6121      	str	r1, [r4, #16]
   2914a:	07d8      	lsls	r0, r3, #31
   2914c:	d5ea      	bpl.n	29124 <_printf_float+0x198>
   2914e:	1c4b      	adds	r3, r1, #1
   29150:	e7e7      	b.n	29122 <_printf_float+0x196>
   29152:	2900      	cmp	r1, #0
   29154:	bfd4      	ite	le
   29156:	f1c1 0202 	rsble	r2, r1, #2
   2915a:	2201      	movgt	r2, #1
   2915c:	4413      	add	r3, r2
   2915e:	e7e0      	b.n	29122 <_printf_float+0x196>
   29160:	6823      	ldr	r3, [r4, #0]
   29162:	055a      	lsls	r2, r3, #21
   29164:	d407      	bmi.n	29176 <_printf_float+0x1ea>
   29166:	6923      	ldr	r3, [r4, #16]
   29168:	4642      	mov	r2, r8
   2916a:	4631      	mov	r1, r6
   2916c:	4628      	mov	r0, r5
   2916e:	47b8      	blx	r7
   29170:	3001      	adds	r0, #1
   29172:	d12b      	bne.n	291cc <_printf_float+0x240>
   29174:	e765      	b.n	29042 <_printf_float+0xb6>
   29176:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2917a:	f240 80dc 	bls.w	29336 <_printf_float+0x3aa>
   2917e:	2200      	movs	r2, #0
   29180:	2300      	movs	r3, #0
   29182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   29186:	f7f0 f95f 	bl	19448 <__aeabi_dcmpeq>
   2918a:	2800      	cmp	r0, #0
   2918c:	d033      	beq.n	291f6 <_printf_float+0x26a>
   2918e:	2301      	movs	r3, #1
   29190:	4a35      	ldr	r2, [pc, #212]	; (29268 <_printf_float+0x2dc>)
   29192:	4631      	mov	r1, r6
   29194:	4628      	mov	r0, r5
   29196:	47b8      	blx	r7
   29198:	3001      	adds	r0, #1
   2919a:	f43f af52 	beq.w	29042 <_printf_float+0xb6>
   2919e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   291a2:	429a      	cmp	r2, r3
   291a4:	db02      	blt.n	291ac <_printf_float+0x220>
   291a6:	6823      	ldr	r3, [r4, #0]
   291a8:	07d8      	lsls	r0, r3, #31
   291aa:	d50f      	bpl.n	291cc <_printf_float+0x240>
   291ac:	4631      	mov	r1, r6
   291ae:	4628      	mov	r0, r5
   291b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   291b4:	47b8      	blx	r7
   291b6:	3001      	adds	r0, #1
   291b8:	f43f af43 	beq.w	29042 <_printf_float+0xb6>
   291bc:	f04f 0800 	mov.w	r8, #0
   291c0:	f104 091a 	add.w	r9, r4, #26
   291c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   291c6:	3b01      	subs	r3, #1
   291c8:	4543      	cmp	r3, r8
   291ca:	dc09      	bgt.n	291e0 <_printf_float+0x254>
   291cc:	6823      	ldr	r3, [r4, #0]
   291ce:	079b      	lsls	r3, r3, #30
   291d0:	f100 8101 	bmi.w	293d6 <_printf_float+0x44a>
   291d4:	68e0      	ldr	r0, [r4, #12]
   291d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   291d8:	4298      	cmp	r0, r3
   291da:	bfb8      	it	lt
   291dc:	4618      	movlt	r0, r3
   291de:	e732      	b.n	29046 <_printf_float+0xba>
   291e0:	2301      	movs	r3, #1
   291e2:	464a      	mov	r2, r9
   291e4:	4631      	mov	r1, r6
   291e6:	4628      	mov	r0, r5
   291e8:	47b8      	blx	r7
   291ea:	3001      	adds	r0, #1
   291ec:	f43f af29 	beq.w	29042 <_printf_float+0xb6>
   291f0:	f108 0801 	add.w	r8, r8, #1
   291f4:	e7e6      	b.n	291c4 <_printf_float+0x238>
   291f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   291f8:	2b00      	cmp	r3, #0
   291fa:	dc37      	bgt.n	2926c <_printf_float+0x2e0>
   291fc:	2301      	movs	r3, #1
   291fe:	4a1a      	ldr	r2, [pc, #104]	; (29268 <_printf_float+0x2dc>)
   29200:	4631      	mov	r1, r6
   29202:	4628      	mov	r0, r5
   29204:	47b8      	blx	r7
   29206:	3001      	adds	r0, #1
   29208:	f43f af1b 	beq.w	29042 <_printf_float+0xb6>
   2920c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   29210:	4313      	orrs	r3, r2
   29212:	d102      	bne.n	2921a <_printf_float+0x28e>
   29214:	6823      	ldr	r3, [r4, #0]
   29216:	07d9      	lsls	r1, r3, #31
   29218:	d5d8      	bpl.n	291cc <_printf_float+0x240>
   2921a:	4631      	mov	r1, r6
   2921c:	4628      	mov	r0, r5
   2921e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   29222:	47b8      	blx	r7
   29224:	3001      	adds	r0, #1
   29226:	f43f af0c 	beq.w	29042 <_printf_float+0xb6>
   2922a:	f04f 0900 	mov.w	r9, #0
   2922e:	f104 0a1a 	add.w	sl, r4, #26
   29232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29234:	425b      	negs	r3, r3
   29236:	454b      	cmp	r3, r9
   29238:	dc01      	bgt.n	2923e <_printf_float+0x2b2>
   2923a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2923c:	e794      	b.n	29168 <_printf_float+0x1dc>
   2923e:	2301      	movs	r3, #1
   29240:	4652      	mov	r2, sl
   29242:	4631      	mov	r1, r6
   29244:	4628      	mov	r0, r5
   29246:	47b8      	blx	r7
   29248:	3001      	adds	r0, #1
   2924a:	f43f aefa 	beq.w	29042 <_printf_float+0xb6>
   2924e:	f109 0901 	add.w	r9, r9, #1
   29252:	e7ee      	b.n	29232 <_printf_float+0x2a6>
   29254:	7fefffff 	.word	0x7fefffff
   29258:	00030e52 	.word	0x00030e52
   2925c:	00030e56 	.word	0x00030e56
   29260:	00030e5e 	.word	0x00030e5e
   29264:	00030e5a 	.word	0x00030e5a
   29268:	0002fcdc 	.word	0x0002fcdc
   2926c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2926e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   29270:	429a      	cmp	r2, r3
   29272:	bfa8      	it	ge
   29274:	461a      	movge	r2, r3
   29276:	2a00      	cmp	r2, #0
   29278:	4691      	mov	r9, r2
   2927a:	dc37      	bgt.n	292ec <_printf_float+0x360>
   2927c:	f04f 0b00 	mov.w	fp, #0
   29280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   29284:	f104 021a 	add.w	r2, r4, #26
   29288:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2928c:	ebaa 0309 	sub.w	r3, sl, r9
   29290:	455b      	cmp	r3, fp
   29292:	dc33      	bgt.n	292fc <_printf_float+0x370>
   29294:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   29298:	429a      	cmp	r2, r3
   2929a:	db3b      	blt.n	29314 <_printf_float+0x388>
   2929c:	6823      	ldr	r3, [r4, #0]
   2929e:	07da      	lsls	r2, r3, #31
   292a0:	d438      	bmi.n	29314 <_printf_float+0x388>
   292a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   292a4:	990d      	ldr	r1, [sp, #52]	; 0x34
   292a6:	eba2 030a 	sub.w	r3, r2, sl
   292aa:	eba2 0901 	sub.w	r9, r2, r1
   292ae:	4599      	cmp	r9, r3
   292b0:	bfa8      	it	ge
   292b2:	4699      	movge	r9, r3
   292b4:	f1b9 0f00 	cmp.w	r9, #0
   292b8:	dc34      	bgt.n	29324 <_printf_float+0x398>
   292ba:	f04f 0800 	mov.w	r8, #0
   292be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   292c2:	f104 0a1a 	add.w	sl, r4, #26
   292c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   292ca:	1a9b      	subs	r3, r3, r2
   292cc:	eba3 0309 	sub.w	r3, r3, r9
   292d0:	4543      	cmp	r3, r8
   292d2:	f77f af7b 	ble.w	291cc <_printf_float+0x240>
   292d6:	2301      	movs	r3, #1
   292d8:	4652      	mov	r2, sl
   292da:	4631      	mov	r1, r6
   292dc:	4628      	mov	r0, r5
   292de:	47b8      	blx	r7
   292e0:	3001      	adds	r0, #1
   292e2:	f43f aeae 	beq.w	29042 <_printf_float+0xb6>
   292e6:	f108 0801 	add.w	r8, r8, #1
   292ea:	e7ec      	b.n	292c6 <_printf_float+0x33a>
   292ec:	4613      	mov	r3, r2
   292ee:	4631      	mov	r1, r6
   292f0:	4642      	mov	r2, r8
   292f2:	4628      	mov	r0, r5
   292f4:	47b8      	blx	r7
   292f6:	3001      	adds	r0, #1
   292f8:	d1c0      	bne.n	2927c <_printf_float+0x2f0>
   292fa:	e6a2      	b.n	29042 <_printf_float+0xb6>
   292fc:	2301      	movs	r3, #1
   292fe:	4631      	mov	r1, r6
   29300:	4628      	mov	r0, r5
   29302:	920b      	str	r2, [sp, #44]	; 0x2c
   29304:	47b8      	blx	r7
   29306:	3001      	adds	r0, #1
   29308:	f43f ae9b 	beq.w	29042 <_printf_float+0xb6>
   2930c:	f10b 0b01 	add.w	fp, fp, #1
   29310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29312:	e7b9      	b.n	29288 <_printf_float+0x2fc>
   29314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   29318:	4631      	mov	r1, r6
   2931a:	4628      	mov	r0, r5
   2931c:	47b8      	blx	r7
   2931e:	3001      	adds	r0, #1
   29320:	d1bf      	bne.n	292a2 <_printf_float+0x316>
   29322:	e68e      	b.n	29042 <_printf_float+0xb6>
   29324:	464b      	mov	r3, r9
   29326:	eb08 020a 	add.w	r2, r8, sl
   2932a:	4631      	mov	r1, r6
   2932c:	4628      	mov	r0, r5
   2932e:	47b8      	blx	r7
   29330:	3001      	adds	r0, #1
   29332:	d1c2      	bne.n	292ba <_printf_float+0x32e>
   29334:	e685      	b.n	29042 <_printf_float+0xb6>
   29336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29338:	2a01      	cmp	r2, #1
   2933a:	dc01      	bgt.n	29340 <_printf_float+0x3b4>
   2933c:	07db      	lsls	r3, r3, #31
   2933e:	d537      	bpl.n	293b0 <_printf_float+0x424>
   29340:	2301      	movs	r3, #1
   29342:	4642      	mov	r2, r8
   29344:	4631      	mov	r1, r6
   29346:	4628      	mov	r0, r5
   29348:	47b8      	blx	r7
   2934a:	3001      	adds	r0, #1
   2934c:	f43f ae79 	beq.w	29042 <_printf_float+0xb6>
   29350:	4631      	mov	r1, r6
   29352:	4628      	mov	r0, r5
   29354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   29358:	47b8      	blx	r7
   2935a:	3001      	adds	r0, #1
   2935c:	f43f ae71 	beq.w	29042 <_printf_float+0xb6>
   29360:	2200      	movs	r2, #0
   29362:	2300      	movs	r3, #0
   29364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   29368:	f7f0 f86e 	bl	19448 <__aeabi_dcmpeq>
   2936c:	b9d8      	cbnz	r0, 293a6 <_printf_float+0x41a>
   2936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29370:	f108 0201 	add.w	r2, r8, #1
   29374:	3b01      	subs	r3, #1
   29376:	4631      	mov	r1, r6
   29378:	4628      	mov	r0, r5
   2937a:	47b8      	blx	r7
   2937c:	3001      	adds	r0, #1
   2937e:	d10e      	bne.n	2939e <_printf_float+0x412>
   29380:	e65f      	b.n	29042 <_printf_float+0xb6>
   29382:	2301      	movs	r3, #1
   29384:	464a      	mov	r2, r9
   29386:	4631      	mov	r1, r6
   29388:	4628      	mov	r0, r5
   2938a:	47b8      	blx	r7
   2938c:	3001      	adds	r0, #1
   2938e:	f43f ae58 	beq.w	29042 <_printf_float+0xb6>
   29392:	f108 0801 	add.w	r8, r8, #1
   29396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29398:	3b01      	subs	r3, #1
   2939a:	4543      	cmp	r3, r8
   2939c:	dcf1      	bgt.n	29382 <_printf_float+0x3f6>
   2939e:	4653      	mov	r3, sl
   293a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   293a4:	e6e1      	b.n	2916a <_printf_float+0x1de>
   293a6:	f04f 0800 	mov.w	r8, #0
   293aa:	f104 091a 	add.w	r9, r4, #26
   293ae:	e7f2      	b.n	29396 <_printf_float+0x40a>
   293b0:	2301      	movs	r3, #1
   293b2:	4642      	mov	r2, r8
   293b4:	e7df      	b.n	29376 <_printf_float+0x3ea>
   293b6:	2301      	movs	r3, #1
   293b8:	464a      	mov	r2, r9
   293ba:	4631      	mov	r1, r6
   293bc:	4628      	mov	r0, r5
   293be:	47b8      	blx	r7
   293c0:	3001      	adds	r0, #1
   293c2:	f43f ae3e 	beq.w	29042 <_printf_float+0xb6>
   293c6:	f108 0801 	add.w	r8, r8, #1
   293ca:	68e3      	ldr	r3, [r4, #12]
   293cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   293ce:	1a5b      	subs	r3, r3, r1
   293d0:	4543      	cmp	r3, r8
   293d2:	dcf0      	bgt.n	293b6 <_printf_float+0x42a>
   293d4:	e6fe      	b.n	291d4 <_printf_float+0x248>
   293d6:	f04f 0800 	mov.w	r8, #0
   293da:	f104 0919 	add.w	r9, r4, #25
   293de:	e7f4      	b.n	293ca <_printf_float+0x43e>

000293e0 <_printf_i>:
   293e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   293e4:	460c      	mov	r4, r1
   293e6:	4691      	mov	r9, r2
   293e8:	4680      	mov	r8, r0
   293ea:	469a      	mov	sl, r3
   293ec:	7e27      	ldrb	r7, [r4, #24]
   293ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
   293f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   293f4:	2f78      	cmp	r7, #120	; 0x78
   293f6:	d807      	bhi.n	29408 <_printf_i+0x28>
   293f8:	2f62      	cmp	r7, #98	; 0x62
   293fa:	d80a      	bhi.n	29412 <_printf_i+0x32>
   293fc:	2f00      	cmp	r7, #0
   293fe:	f000 80d8 	beq.w	295b2 <_printf_i+0x1d2>
   29402:	2f58      	cmp	r7, #88	; 0x58
   29404:	f000 80a3 	beq.w	2954e <_printf_i+0x16e>
   29408:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2940c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   29410:	e03a      	b.n	29488 <_printf_i+0xa8>
   29412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   29416:	2b15      	cmp	r3, #21
   29418:	d8f6      	bhi.n	29408 <_printf_i+0x28>
   2941a:	a001      	add	r0, pc, #4	; (adr r0, 29420 <_printf_i+0x40>)
   2941c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   29420:	00029479 	.word	0x00029479
   29424:	0002948d 	.word	0x0002948d
   29428:	00029409 	.word	0x00029409
   2942c:	00029409 	.word	0x00029409
   29430:	00029409 	.word	0x00029409
   29434:	00029409 	.word	0x00029409
   29438:	0002948d 	.word	0x0002948d
   2943c:	00029409 	.word	0x00029409
   29440:	00029409 	.word	0x00029409
   29444:	00029409 	.word	0x00029409
   29448:	00029409 	.word	0x00029409
   2944c:	00029599 	.word	0x00029599
   29450:	000294bd 	.word	0x000294bd
   29454:	0002957b 	.word	0x0002957b
   29458:	00029409 	.word	0x00029409
   2945c:	00029409 	.word	0x00029409
   29460:	000295bb 	.word	0x000295bb
   29464:	00029409 	.word	0x00029409
   29468:	000294bd 	.word	0x000294bd
   2946c:	00029409 	.word	0x00029409
   29470:	00029409 	.word	0x00029409
   29474:	00029583 	.word	0x00029583
   29478:	680b      	ldr	r3, [r1, #0]
   2947a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2947e:	1d1a      	adds	r2, r3, #4
   29480:	681b      	ldr	r3, [r3, #0]
   29482:	600a      	str	r2, [r1, #0]
   29484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   29488:	2301      	movs	r3, #1
   2948a:	e0a3      	b.n	295d4 <_printf_i+0x1f4>
   2948c:	6825      	ldr	r5, [r4, #0]
   2948e:	6808      	ldr	r0, [r1, #0]
   29490:	062e      	lsls	r6, r5, #24
   29492:	f100 0304 	add.w	r3, r0, #4
   29496:	d50a      	bpl.n	294ae <_printf_i+0xce>
   29498:	6805      	ldr	r5, [r0, #0]
   2949a:	600b      	str	r3, [r1, #0]
   2949c:	2d00      	cmp	r5, #0
   2949e:	da03      	bge.n	294a8 <_printf_i+0xc8>
   294a0:	232d      	movs	r3, #45	; 0x2d
   294a2:	426d      	negs	r5, r5
   294a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   294a8:	485e      	ldr	r0, [pc, #376]	; (29624 <_printf_i+0x244>)
   294aa:	230a      	movs	r3, #10
   294ac:	e019      	b.n	294e2 <_printf_i+0x102>
   294ae:	f015 0f40 	tst.w	r5, #64	; 0x40
   294b2:	6805      	ldr	r5, [r0, #0]
   294b4:	600b      	str	r3, [r1, #0]
   294b6:	bf18      	it	ne
   294b8:	b22d      	sxthne	r5, r5
   294ba:	e7ef      	b.n	2949c <_printf_i+0xbc>
   294bc:	680b      	ldr	r3, [r1, #0]
   294be:	6825      	ldr	r5, [r4, #0]
   294c0:	1d18      	adds	r0, r3, #4
   294c2:	6008      	str	r0, [r1, #0]
   294c4:	0628      	lsls	r0, r5, #24
   294c6:	d501      	bpl.n	294cc <_printf_i+0xec>
   294c8:	681d      	ldr	r5, [r3, #0]
   294ca:	e002      	b.n	294d2 <_printf_i+0xf2>
   294cc:	0669      	lsls	r1, r5, #25
   294ce:	d5fb      	bpl.n	294c8 <_printf_i+0xe8>
   294d0:	881d      	ldrh	r5, [r3, #0]
   294d2:	2f6f      	cmp	r7, #111	; 0x6f
   294d4:	4853      	ldr	r0, [pc, #332]	; (29624 <_printf_i+0x244>)
   294d6:	bf0c      	ite	eq
   294d8:	2308      	moveq	r3, #8
   294da:	230a      	movne	r3, #10
   294dc:	2100      	movs	r1, #0
   294de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   294e2:	6866      	ldr	r6, [r4, #4]
   294e4:	2e00      	cmp	r6, #0
   294e6:	60a6      	str	r6, [r4, #8]
   294e8:	bfa2      	ittt	ge
   294ea:	6821      	ldrge	r1, [r4, #0]
   294ec:	f021 0104 	bicge.w	r1, r1, #4
   294f0:	6021      	strge	r1, [r4, #0]
   294f2:	b90d      	cbnz	r5, 294f8 <_printf_i+0x118>
   294f4:	2e00      	cmp	r6, #0
   294f6:	d04d      	beq.n	29594 <_printf_i+0x1b4>
   294f8:	4616      	mov	r6, r2
   294fa:	fbb5 f1f3 	udiv	r1, r5, r3
   294fe:	fb03 5711 	mls	r7, r3, r1, r5
   29502:	5dc7      	ldrb	r7, [r0, r7]
   29504:	f806 7d01 	strb.w	r7, [r6, #-1]!
   29508:	462f      	mov	r7, r5
   2950a:	460d      	mov	r5, r1
   2950c:	42bb      	cmp	r3, r7
   2950e:	d9f4      	bls.n	294fa <_printf_i+0x11a>
   29510:	2b08      	cmp	r3, #8
   29512:	d10b      	bne.n	2952c <_printf_i+0x14c>
   29514:	6823      	ldr	r3, [r4, #0]
   29516:	07df      	lsls	r7, r3, #31
   29518:	d508      	bpl.n	2952c <_printf_i+0x14c>
   2951a:	6923      	ldr	r3, [r4, #16]
   2951c:	6861      	ldr	r1, [r4, #4]
   2951e:	4299      	cmp	r1, r3
   29520:	bfde      	ittt	le
   29522:	2330      	movle	r3, #48	; 0x30
   29524:	f806 3c01 	strble.w	r3, [r6, #-1]
   29528:	f106 36ff 	addle.w	r6, r6, #4294967295
   2952c:	1b92      	subs	r2, r2, r6
   2952e:	6122      	str	r2, [r4, #16]
   29530:	464b      	mov	r3, r9
   29532:	aa03      	add	r2, sp, #12
   29534:	4621      	mov	r1, r4
   29536:	4640      	mov	r0, r8
   29538:	f8cd a000 	str.w	sl, [sp]
   2953c:	f003 fbfc 	bl	2cd38 <_printf_common>
   29540:	3001      	adds	r0, #1
   29542:	d14c      	bne.n	295de <_printf_i+0x1fe>
   29544:	f04f 30ff 	mov.w	r0, #4294967295
   29548:	b004      	add	sp, #16
   2954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2954e:	4835      	ldr	r0, [pc, #212]	; (29624 <_printf_i+0x244>)
   29550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   29554:	6823      	ldr	r3, [r4, #0]
   29556:	680e      	ldr	r6, [r1, #0]
   29558:	061f      	lsls	r7, r3, #24
   2955a:	f856 5b04 	ldr.w	r5, [r6], #4
   2955e:	600e      	str	r6, [r1, #0]
   29560:	d514      	bpl.n	2958c <_printf_i+0x1ac>
   29562:	07d9      	lsls	r1, r3, #31
   29564:	bf44      	itt	mi
   29566:	f043 0320 	orrmi.w	r3, r3, #32
   2956a:	6023      	strmi	r3, [r4, #0]
   2956c:	b91d      	cbnz	r5, 29576 <_printf_i+0x196>
   2956e:	6823      	ldr	r3, [r4, #0]
   29570:	f023 0320 	bic.w	r3, r3, #32
   29574:	6023      	str	r3, [r4, #0]
   29576:	2310      	movs	r3, #16
   29578:	e7b0      	b.n	294dc <_printf_i+0xfc>
   2957a:	6823      	ldr	r3, [r4, #0]
   2957c:	f043 0320 	orr.w	r3, r3, #32
   29580:	6023      	str	r3, [r4, #0]
   29582:	2378      	movs	r3, #120	; 0x78
   29584:	4828      	ldr	r0, [pc, #160]	; (29628 <_printf_i+0x248>)
   29586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2958a:	e7e3      	b.n	29554 <_printf_i+0x174>
   2958c:	065e      	lsls	r6, r3, #25
   2958e:	bf48      	it	mi
   29590:	b2ad      	uxthmi	r5, r5
   29592:	e7e6      	b.n	29562 <_printf_i+0x182>
   29594:	4616      	mov	r6, r2
   29596:	e7bb      	b.n	29510 <_printf_i+0x130>
   29598:	680b      	ldr	r3, [r1, #0]
   2959a:	6826      	ldr	r6, [r4, #0]
   2959c:	1d1d      	adds	r5, r3, #4
   2959e:	6960      	ldr	r0, [r4, #20]
   295a0:	600d      	str	r5, [r1, #0]
   295a2:	0635      	lsls	r5, r6, #24
   295a4:	681b      	ldr	r3, [r3, #0]
   295a6:	d501      	bpl.n	295ac <_printf_i+0x1cc>
   295a8:	6018      	str	r0, [r3, #0]
   295aa:	e002      	b.n	295b2 <_printf_i+0x1d2>
   295ac:	0671      	lsls	r1, r6, #25
   295ae:	d5fb      	bpl.n	295a8 <_printf_i+0x1c8>
   295b0:	8018      	strh	r0, [r3, #0]
   295b2:	2300      	movs	r3, #0
   295b4:	4616      	mov	r6, r2
   295b6:	6123      	str	r3, [r4, #16]
   295b8:	e7ba      	b.n	29530 <_printf_i+0x150>
   295ba:	680b      	ldr	r3, [r1, #0]
   295bc:	1d1a      	adds	r2, r3, #4
   295be:	600a      	str	r2, [r1, #0]
   295c0:	2100      	movs	r1, #0
   295c2:	681e      	ldr	r6, [r3, #0]
   295c4:	6862      	ldr	r2, [r4, #4]
   295c6:	4630      	mov	r0, r6
   295c8:	f003 fae7 	bl	2cb9a <memchr>
   295cc:	b108      	cbz	r0, 295d2 <_printf_i+0x1f2>
   295ce:	1b80      	subs	r0, r0, r6
   295d0:	6060      	str	r0, [r4, #4]
   295d2:	6863      	ldr	r3, [r4, #4]
   295d4:	6123      	str	r3, [r4, #16]
   295d6:	2300      	movs	r3, #0
   295d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   295dc:	e7a8      	b.n	29530 <_printf_i+0x150>
   295de:	6923      	ldr	r3, [r4, #16]
   295e0:	4632      	mov	r2, r6
   295e2:	4649      	mov	r1, r9
   295e4:	4640      	mov	r0, r8
   295e6:	47d0      	blx	sl
   295e8:	3001      	adds	r0, #1
   295ea:	d0ab      	beq.n	29544 <_printf_i+0x164>
   295ec:	6823      	ldr	r3, [r4, #0]
   295ee:	079b      	lsls	r3, r3, #30
   295f0:	d413      	bmi.n	2961a <_printf_i+0x23a>
   295f2:	68e0      	ldr	r0, [r4, #12]
   295f4:	9b03      	ldr	r3, [sp, #12]
   295f6:	4298      	cmp	r0, r3
   295f8:	bfb8      	it	lt
   295fa:	4618      	movlt	r0, r3
   295fc:	e7a4      	b.n	29548 <_printf_i+0x168>
   295fe:	2301      	movs	r3, #1
   29600:	4632      	mov	r2, r6
   29602:	4649      	mov	r1, r9
   29604:	4640      	mov	r0, r8
   29606:	47d0      	blx	sl
   29608:	3001      	adds	r0, #1
   2960a:	d09b      	beq.n	29544 <_printf_i+0x164>
   2960c:	3501      	adds	r5, #1
   2960e:	68e3      	ldr	r3, [r4, #12]
   29610:	9903      	ldr	r1, [sp, #12]
   29612:	1a5b      	subs	r3, r3, r1
   29614:	42ab      	cmp	r3, r5
   29616:	dcf2      	bgt.n	295fe <_printf_i+0x21e>
   29618:	e7eb      	b.n	295f2 <_printf_i+0x212>
   2961a:	2500      	movs	r5, #0
   2961c:	f104 0619 	add.w	r6, r4, #25
   29620:	e7f5      	b.n	2960e <_printf_i+0x22e>
   29622:	bf00      	nop
   29624:	00030e62 	.word	0x00030e62
   29628:	00030e73 	.word	0x00030e73

0002962c <_sbrk_r>:
   2962c:	b538      	push	{r3, r4, r5, lr}
   2962e:	2300      	movs	r3, #0
   29630:	4d05      	ldr	r5, [pc, #20]	; (29648 <_sbrk_r+0x1c>)
   29632:	4604      	mov	r4, r0
   29634:	4608      	mov	r0, r1
   29636:	602b      	str	r3, [r5, #0]
   29638:	f7f3 fb56 	bl	1cce8 <_sbrk>
   2963c:	1c43      	adds	r3, r0, #1
   2963e:	d102      	bne.n	29646 <_sbrk_r+0x1a>
   29640:	682b      	ldr	r3, [r5, #0]
   29642:	b103      	cbz	r3, 29646 <_sbrk_r+0x1a>
   29644:	6023      	str	r3, [r4, #0]
   29646:	bd38      	pop	{r3, r4, r5, pc}
   29648:	2000db50 	.word	0x2000db50

0002964c <siscanf>:
   2964c:	b40e      	push	{r1, r2, r3}
   2964e:	b530      	push	{r4, r5, lr}
   29650:	b09c      	sub	sp, #112	; 0x70
   29652:	f44f 7201 	mov.w	r2, #516	; 0x204
   29656:	ac1f      	add	r4, sp, #124	; 0x7c
   29658:	f8ad 2014 	strh.w	r2, [sp, #20]
   2965c:	9002      	str	r0, [sp, #8]
   2965e:	f854 5b04 	ldr.w	r5, [r4], #4
   29662:	9006      	str	r0, [sp, #24]
   29664:	f7ef ff6a 	bl	1953c <strlen>
   29668:	4b0b      	ldr	r3, [pc, #44]	; (29698 <siscanf+0x4c>)
   2966a:	462a      	mov	r2, r5
   2966c:	9003      	str	r0, [sp, #12]
   2966e:	a902      	add	r1, sp, #8
   29670:	930b      	str	r3, [sp, #44]	; 0x2c
   29672:	2300      	movs	r3, #0
   29674:	9007      	str	r0, [sp, #28]
   29676:	930f      	str	r3, [sp, #60]	; 0x3c
   29678:	9314      	str	r3, [sp, #80]	; 0x50
   2967a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2967e:	4807      	ldr	r0, [pc, #28]	; (2969c <siscanf+0x50>)
   29680:	f8ad 3016 	strh.w	r3, [sp, #22]
   29684:	4623      	mov	r3, r4
   29686:	6800      	ldr	r0, [r0, #0]
   29688:	9401      	str	r4, [sp, #4]
   2968a:	f000 fdc1 	bl	2a210 <__ssvfiscanf_r>
   2968e:	b01c      	add	sp, #112	; 0x70
   29690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   29694:	b003      	add	sp, #12
   29696:	4770      	bx	lr
   29698:	0002ce19 	.word	0x0002ce19
   2969c:	2000c6d0 	.word	0x2000c6d0

000296a0 <_strtol_l.isra.0>:
   296a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   296a4:	468c      	mov	ip, r1
   296a6:	4686      	mov	lr, r0
   296a8:	4e38      	ldr	r6, [pc, #224]	; (2978c <_strtol_l.isra.0+0xec>)
   296aa:	4660      	mov	r0, ip
   296ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
   296b0:	5da5      	ldrb	r5, [r4, r6]
   296b2:	f015 0508 	ands.w	r5, r5, #8
   296b6:	d1f8      	bne.n	296aa <_strtol_l.isra.0+0xa>
   296b8:	2c2d      	cmp	r4, #45	; 0x2d
   296ba:	d133      	bne.n	29724 <_strtol_l.isra.0+0x84>
   296bc:	f89c 4000 	ldrb.w	r4, [ip]
   296c0:	f04f 0801 	mov.w	r8, #1
   296c4:	f100 0c02 	add.w	ip, r0, #2
   296c8:	2b00      	cmp	r3, #0
   296ca:	d05b      	beq.n	29784 <_strtol_l.isra.0+0xe4>
   296cc:	2b10      	cmp	r3, #16
   296ce:	d10c      	bne.n	296ea <_strtol_l.isra.0+0x4a>
   296d0:	2c30      	cmp	r4, #48	; 0x30
   296d2:	d10a      	bne.n	296ea <_strtol_l.isra.0+0x4a>
   296d4:	f89c 0000 	ldrb.w	r0, [ip]
   296d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   296dc:	2858      	cmp	r0, #88	; 0x58
   296de:	d14c      	bne.n	2977a <_strtol_l.isra.0+0xda>
   296e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   296e4:	2310      	movs	r3, #16
   296e6:	f10c 0c02 	add.w	ip, ip, #2
   296ea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   296ee:	2600      	movs	r6, #0
   296f0:	3f01      	subs	r7, #1
   296f2:	4630      	mov	r0, r6
   296f4:	fbb7 f9f3 	udiv	r9, r7, r3
   296f8:	fb03 7a19 	mls	sl, r3, r9, r7
   296fc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   29700:	2d09      	cmp	r5, #9
   29702:	d817      	bhi.n	29734 <_strtol_l.isra.0+0x94>
   29704:	462c      	mov	r4, r5
   29706:	42a3      	cmp	r3, r4
   29708:	dd23      	ble.n	29752 <_strtol_l.isra.0+0xb2>
   2970a:	1c75      	adds	r5, r6, #1
   2970c:	d007      	beq.n	2971e <_strtol_l.isra.0+0x7e>
   2970e:	4581      	cmp	r9, r0
   29710:	d31c      	bcc.n	2974c <_strtol_l.isra.0+0xac>
   29712:	d101      	bne.n	29718 <_strtol_l.isra.0+0x78>
   29714:	45a2      	cmp	sl, r4
   29716:	db19      	blt.n	2974c <_strtol_l.isra.0+0xac>
   29718:	fb00 4003 	mla	r0, r0, r3, r4
   2971c:	2601      	movs	r6, #1
   2971e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   29722:	e7eb      	b.n	296fc <_strtol_l.isra.0+0x5c>
   29724:	2c2b      	cmp	r4, #43	; 0x2b
   29726:	46a8      	mov	r8, r5
   29728:	bf04      	itt	eq
   2972a:	f89c 4000 	ldrbeq.w	r4, [ip]
   2972e:	f100 0c02 	addeq.w	ip, r0, #2
   29732:	e7c9      	b.n	296c8 <_strtol_l.isra.0+0x28>
   29734:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   29738:	2d19      	cmp	r5, #25
   2973a:	d801      	bhi.n	29740 <_strtol_l.isra.0+0xa0>
   2973c:	3c37      	subs	r4, #55	; 0x37
   2973e:	e7e2      	b.n	29706 <_strtol_l.isra.0+0x66>
   29740:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   29744:	2d19      	cmp	r5, #25
   29746:	d804      	bhi.n	29752 <_strtol_l.isra.0+0xb2>
   29748:	3c57      	subs	r4, #87	; 0x57
   2974a:	e7dc      	b.n	29706 <_strtol_l.isra.0+0x66>
   2974c:	f04f 36ff 	mov.w	r6, #4294967295
   29750:	e7e5      	b.n	2971e <_strtol_l.isra.0+0x7e>
   29752:	1c73      	adds	r3, r6, #1
   29754:	d106      	bne.n	29764 <_strtol_l.isra.0+0xc4>
   29756:	2322      	movs	r3, #34	; 0x22
   29758:	4638      	mov	r0, r7
   2975a:	f8ce 3000 	str.w	r3, [lr]
   2975e:	b942      	cbnz	r2, 29772 <_strtol_l.isra.0+0xd2>
   29760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29764:	f1b8 0f00 	cmp.w	r8, #0
   29768:	d000      	beq.n	2976c <_strtol_l.isra.0+0xcc>
   2976a:	4240      	negs	r0, r0
   2976c:	2a00      	cmp	r2, #0
   2976e:	d0f7      	beq.n	29760 <_strtol_l.isra.0+0xc0>
   29770:	b10e      	cbz	r6, 29776 <_strtol_l.isra.0+0xd6>
   29772:	f10c 31ff 	add.w	r1, ip, #4294967295
   29776:	6011      	str	r1, [r2, #0]
   29778:	e7f2      	b.n	29760 <_strtol_l.isra.0+0xc0>
   2977a:	2430      	movs	r4, #48	; 0x30
   2977c:	2b00      	cmp	r3, #0
   2977e:	d1b4      	bne.n	296ea <_strtol_l.isra.0+0x4a>
   29780:	2308      	movs	r3, #8
   29782:	e7b2      	b.n	296ea <_strtol_l.isra.0+0x4a>
   29784:	2c30      	cmp	r4, #48	; 0x30
   29786:	d0a5      	beq.n	296d4 <_strtol_l.isra.0+0x34>
   29788:	230a      	movs	r3, #10
   2978a:	e7ae      	b.n	296ea <_strtol_l.isra.0+0x4a>
   2978c:	00030d52 	.word	0x00030d52

00029790 <strtol>:
   29790:	4613      	mov	r3, r2
   29792:	460a      	mov	r2, r1
   29794:	4601      	mov	r1, r0
   29796:	4802      	ldr	r0, [pc, #8]	; (297a0 <strtol+0x10>)
   29798:	6800      	ldr	r0, [r0, #0]
   2979a:	f7ff bf81 	b.w	296a0 <_strtol_l.isra.0>
   2979e:	bf00      	nop
   297a0:	2000c6d0 	.word	0x2000c6d0

000297a4 <_strtoll_l.isra.0>:
   297a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297a8:	4691      	mov	r9, r2
   297aa:	b087      	sub	sp, #28
   297ac:	4688      	mov	r8, r1
   297ae:	461f      	mov	r7, r3
   297b0:	460d      	mov	r5, r1
   297b2:	4a46      	ldr	r2, [pc, #280]	; (298cc <_strtoll_l.isra.0+0x128>)
   297b4:	9005      	str	r0, [sp, #20]
   297b6:	462b      	mov	r3, r5
   297b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   297bc:	5ca6      	ldrb	r6, [r4, r2]
   297be:	f016 0608 	ands.w	r6, r6, #8
   297c2:	d1f8      	bne.n	297b6 <_strtoll_l.isra.0+0x12>
   297c4:	2c2d      	cmp	r4, #45	; 0x2d
   297c6:	d148      	bne.n	2985a <_strtoll_l.isra.0+0xb6>
   297c8:	782c      	ldrb	r4, [r5, #0]
   297ca:	2601      	movs	r6, #1
   297cc:	1c9d      	adds	r5, r3, #2
   297ce:	2f00      	cmp	r7, #0
   297d0:	d078      	beq.n	298c4 <_strtoll_l.isra.0+0x120>
   297d2:	2f10      	cmp	r7, #16
   297d4:	d109      	bne.n	297ea <_strtoll_l.isra.0+0x46>
   297d6:	2c30      	cmp	r4, #48	; 0x30
   297d8:	d107      	bne.n	297ea <_strtoll_l.isra.0+0x46>
   297da:	782b      	ldrb	r3, [r5, #0]
   297dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   297e0:	2b58      	cmp	r3, #88	; 0x58
   297e2:	d16a      	bne.n	298ba <_strtoll_l.isra.0+0x116>
   297e4:	786c      	ldrb	r4, [r5, #1]
   297e6:	2710      	movs	r7, #16
   297e8:	3502      	adds	r5, #2
   297ea:	f04f 32ff 	mov.w	r2, #4294967295
   297ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   297f2:	ea4f 7be7 	mov.w	fp, r7, asr #31
   297f6:	46ba      	mov	sl, r7
   297f8:	1990      	adds	r0, r2, r6
   297fa:	463a      	mov	r2, r7
   297fc:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   29800:	465b      	mov	r3, fp
   29802:	e9cd 0100 	strd	r0, r1, [sp]
   29806:	f7ef fc4b 	bl	190a0 <__aeabi_uldivmod>
   2980a:	2300      	movs	r3, #0
   2980c:	4696      	mov	lr, r2
   2980e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29812:	2000      	movs	r0, #0
   29814:	2100      	movs	r1, #0
   29816:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2981a:	f1bc 0f09 	cmp.w	ip, #9
   2981e:	d821      	bhi.n	29864 <_strtoll_l.isra.0+0xc0>
   29820:	4664      	mov	r4, ip
   29822:	42a7      	cmp	r7, r4
   29824:	dd2f      	ble.n	29886 <_strtoll_l.isra.0+0xe2>
   29826:	1c5a      	adds	r2, r3, #1
   29828:	d014      	beq.n	29854 <_strtoll_l.isra.0+0xb0>
   2982a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2982e:	428b      	cmp	r3, r1
   29830:	bf08      	it	eq
   29832:	4282      	cmpeq	r2, r0
   29834:	d324      	bcc.n	29880 <_strtoll_l.isra.0+0xdc>
   29836:	d101      	bne.n	2983c <_strtoll_l.isra.0+0x98>
   29838:	45a6      	cmp	lr, r4
   2983a:	db21      	blt.n	29880 <_strtoll_l.isra.0+0xdc>
   2983c:	fb0a f301 	mul.w	r3, sl, r1
   29840:	fb00 330b 	mla	r3, r0, fp, r3
   29844:	fbaa 0100 	umull	r0, r1, sl, r0
   29848:	4419      	add	r1, r3
   2984a:	1900      	adds	r0, r0, r4
   2984c:	f04f 0301 	mov.w	r3, #1
   29850:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   29854:	f815 4b01 	ldrb.w	r4, [r5], #1
   29858:	e7dd      	b.n	29816 <_strtoll_l.isra.0+0x72>
   2985a:	2c2b      	cmp	r4, #43	; 0x2b
   2985c:	bf04      	itt	eq
   2985e:	782c      	ldrbeq	r4, [r5, #0]
   29860:	1c9d      	addeq	r5, r3, #2
   29862:	e7b4      	b.n	297ce <_strtoll_l.isra.0+0x2a>
   29864:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   29868:	f1bc 0f19 	cmp.w	ip, #25
   2986c:	d801      	bhi.n	29872 <_strtoll_l.isra.0+0xce>
   2986e:	3c37      	subs	r4, #55	; 0x37
   29870:	e7d7      	b.n	29822 <_strtoll_l.isra.0+0x7e>
   29872:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   29876:	f1bc 0f19 	cmp.w	ip, #25
   2987a:	d804      	bhi.n	29886 <_strtoll_l.isra.0+0xe2>
   2987c:	3c57      	subs	r4, #87	; 0x57
   2987e:	e7d0      	b.n	29822 <_strtoll_l.isra.0+0x7e>
   29880:	f04f 33ff 	mov.w	r3, #4294967295
   29884:	e7e6      	b.n	29854 <_strtoll_l.isra.0+0xb0>
   29886:	1c5a      	adds	r2, r3, #1
   29888:	d10a      	bne.n	298a0 <_strtoll_l.isra.0+0xfc>
   2988a:	2322      	movs	r3, #34	; 0x22
   2988c:	9a05      	ldr	r2, [sp, #20]
   2988e:	e9dd 0100 	ldrd	r0, r1, [sp]
   29892:	6013      	str	r3, [r2, #0]
   29894:	f1b9 0f00 	cmp.w	r9, #0
   29898:	d10a      	bne.n	298b0 <_strtoll_l.isra.0+0x10c>
   2989a:	b007      	add	sp, #28
   2989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298a0:	b116      	cbz	r6, 298a8 <_strtoll_l.isra.0+0x104>
   298a2:	4240      	negs	r0, r0
   298a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   298a8:	f1b9 0f00 	cmp.w	r9, #0
   298ac:	d0f5      	beq.n	2989a <_strtoll_l.isra.0+0xf6>
   298ae:	b10b      	cbz	r3, 298b4 <_strtoll_l.isra.0+0x110>
   298b0:	f105 38ff 	add.w	r8, r5, #4294967295
   298b4:	f8c9 8000 	str.w	r8, [r9]
   298b8:	e7ef      	b.n	2989a <_strtoll_l.isra.0+0xf6>
   298ba:	2430      	movs	r4, #48	; 0x30
   298bc:	2f00      	cmp	r7, #0
   298be:	d194      	bne.n	297ea <_strtoll_l.isra.0+0x46>
   298c0:	2708      	movs	r7, #8
   298c2:	e792      	b.n	297ea <_strtoll_l.isra.0+0x46>
   298c4:	2c30      	cmp	r4, #48	; 0x30
   298c6:	d088      	beq.n	297da <_strtoll_l.isra.0+0x36>
   298c8:	270a      	movs	r7, #10
   298ca:	e78e      	b.n	297ea <_strtoll_l.isra.0+0x46>
   298cc:	00030d52 	.word	0x00030d52

000298d0 <strtoll>:
   298d0:	4613      	mov	r3, r2
   298d2:	460a      	mov	r2, r1
   298d4:	4601      	mov	r1, r0
   298d6:	4802      	ldr	r0, [pc, #8]	; (298e0 <strtoll+0x10>)
   298d8:	6800      	ldr	r0, [r0, #0]
   298da:	f7ff bf63 	b.w	297a4 <_strtoll_l.isra.0>
   298de:	bf00      	nop
   298e0:	2000c6d0 	.word	0x2000c6d0

000298e4 <_strtoul_l.isra.0>:
   298e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   298e8:	468c      	mov	ip, r1
   298ea:	4686      	mov	lr, r0
   298ec:	4e39      	ldr	r6, [pc, #228]	; (299d4 <_strtoul_l.isra.0+0xf0>)
   298ee:	4660      	mov	r0, ip
   298f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   298f4:	5da5      	ldrb	r5, [r4, r6]
   298f6:	f015 0508 	ands.w	r5, r5, #8
   298fa:	d1f8      	bne.n	298ee <_strtoul_l.isra.0+0xa>
   298fc:	2c2d      	cmp	r4, #45	; 0x2d
   298fe:	d134      	bne.n	2996a <_strtoul_l.isra.0+0x86>
   29900:	f89c 4000 	ldrb.w	r4, [ip]
   29904:	f04f 0801 	mov.w	r8, #1
   29908:	f100 0c02 	add.w	ip, r0, #2
   2990c:	2b00      	cmp	r3, #0
   2990e:	d05d      	beq.n	299cc <_strtoul_l.isra.0+0xe8>
   29910:	2b10      	cmp	r3, #16
   29912:	d10c      	bne.n	2992e <_strtoul_l.isra.0+0x4a>
   29914:	2c30      	cmp	r4, #48	; 0x30
   29916:	d10a      	bne.n	2992e <_strtoul_l.isra.0+0x4a>
   29918:	f89c 0000 	ldrb.w	r0, [ip]
   2991c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   29920:	2858      	cmp	r0, #88	; 0x58
   29922:	d14e      	bne.n	299c2 <_strtoul_l.isra.0+0xde>
   29924:	f89c 4001 	ldrb.w	r4, [ip, #1]
   29928:	2310      	movs	r3, #16
   2992a:	f10c 0c02 	add.w	ip, ip, #2
   2992e:	f04f 37ff 	mov.w	r7, #4294967295
   29932:	2500      	movs	r5, #0
   29934:	fbb7 f7f3 	udiv	r7, r7, r3
   29938:	fb03 f907 	mul.w	r9, r3, r7
   2993c:	4628      	mov	r0, r5
   2993e:	ea6f 0909 	mvn.w	r9, r9
   29942:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   29946:	2e09      	cmp	r6, #9
   29948:	d817      	bhi.n	2997a <_strtoul_l.isra.0+0x96>
   2994a:	4634      	mov	r4, r6
   2994c:	42a3      	cmp	r3, r4
   2994e:	dd23      	ble.n	29998 <_strtoul_l.isra.0+0xb4>
   29950:	2d00      	cmp	r5, #0
   29952:	db1e      	blt.n	29992 <_strtoul_l.isra.0+0xae>
   29954:	4287      	cmp	r7, r0
   29956:	d31c      	bcc.n	29992 <_strtoul_l.isra.0+0xae>
   29958:	d101      	bne.n	2995e <_strtoul_l.isra.0+0x7a>
   2995a:	45a1      	cmp	r9, r4
   2995c:	db19      	blt.n	29992 <_strtoul_l.isra.0+0xae>
   2995e:	fb00 4003 	mla	r0, r0, r3, r4
   29962:	2501      	movs	r5, #1
   29964:	f81c 4b01 	ldrb.w	r4, [ip], #1
   29968:	e7eb      	b.n	29942 <_strtoul_l.isra.0+0x5e>
   2996a:	2c2b      	cmp	r4, #43	; 0x2b
   2996c:	46a8      	mov	r8, r5
   2996e:	bf04      	itt	eq
   29970:	f89c 4000 	ldrbeq.w	r4, [ip]
   29974:	f100 0c02 	addeq.w	ip, r0, #2
   29978:	e7c8      	b.n	2990c <_strtoul_l.isra.0+0x28>
   2997a:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2997e:	2e19      	cmp	r6, #25
   29980:	d801      	bhi.n	29986 <_strtoul_l.isra.0+0xa2>
   29982:	3c37      	subs	r4, #55	; 0x37
   29984:	e7e2      	b.n	2994c <_strtoul_l.isra.0+0x68>
   29986:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2998a:	2e19      	cmp	r6, #25
   2998c:	d804      	bhi.n	29998 <_strtoul_l.isra.0+0xb4>
   2998e:	3c57      	subs	r4, #87	; 0x57
   29990:	e7dc      	b.n	2994c <_strtoul_l.isra.0+0x68>
   29992:	f04f 35ff 	mov.w	r5, #4294967295
   29996:	e7e5      	b.n	29964 <_strtoul_l.isra.0+0x80>
   29998:	2d00      	cmp	r5, #0
   2999a:	da07      	bge.n	299ac <_strtoul_l.isra.0+0xc8>
   2999c:	2322      	movs	r3, #34	; 0x22
   2999e:	f04f 30ff 	mov.w	r0, #4294967295
   299a2:	f8ce 3000 	str.w	r3, [lr]
   299a6:	b942      	cbnz	r2, 299ba <_strtoul_l.isra.0+0xd6>
   299a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   299ac:	f1b8 0f00 	cmp.w	r8, #0
   299b0:	d000      	beq.n	299b4 <_strtoul_l.isra.0+0xd0>
   299b2:	4240      	negs	r0, r0
   299b4:	2a00      	cmp	r2, #0
   299b6:	d0f7      	beq.n	299a8 <_strtoul_l.isra.0+0xc4>
   299b8:	b10d      	cbz	r5, 299be <_strtoul_l.isra.0+0xda>
   299ba:	f10c 31ff 	add.w	r1, ip, #4294967295
   299be:	6011      	str	r1, [r2, #0]
   299c0:	e7f2      	b.n	299a8 <_strtoul_l.isra.0+0xc4>
   299c2:	2430      	movs	r4, #48	; 0x30
   299c4:	2b00      	cmp	r3, #0
   299c6:	d1b2      	bne.n	2992e <_strtoul_l.isra.0+0x4a>
   299c8:	2308      	movs	r3, #8
   299ca:	e7b0      	b.n	2992e <_strtoul_l.isra.0+0x4a>
   299cc:	2c30      	cmp	r4, #48	; 0x30
   299ce:	d0a3      	beq.n	29918 <_strtoul_l.isra.0+0x34>
   299d0:	230a      	movs	r3, #10
   299d2:	e7ac      	b.n	2992e <_strtoul_l.isra.0+0x4a>
   299d4:	00030d52 	.word	0x00030d52

000299d8 <strtoul>:
   299d8:	4613      	mov	r3, r2
   299da:	460a      	mov	r2, r1
   299dc:	4601      	mov	r1, r0
   299de:	4802      	ldr	r0, [pc, #8]	; (299e8 <strtoul+0x10>)
   299e0:	6800      	ldr	r0, [r0, #0]
   299e2:	f7ff bf7f 	b.w	298e4 <_strtoul_l.isra.0>
   299e6:	bf00      	nop
   299e8:	2000c6d0 	.word	0x2000c6d0

000299ec <__tzcalc_limits>:
   299ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299f0:	4680      	mov	r8, r0
   299f2:	f000 faab 	bl	29f4c <__gettzinfo>
   299f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   299fa:	4598      	cmp	r8, r3
   299fc:	f340 8098 	ble.w	29b30 <__tzcalc_limits+0x144>
   29a00:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   29a04:	f240 126d 	movw	r2, #365	; 0x16d
   29a08:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   29a0c:	4604      	mov	r4, r0
   29a0e:	4443      	add	r3, r8
   29a10:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   29a14:	f04f 0e07 	mov.w	lr, #7
   29a18:	f8c0 8004 	str.w	r8, [r0, #4]
   29a1c:	109b      	asrs	r3, r3, #2
   29a1e:	fb02 3505 	mla	r5, r2, r5, r3
   29a22:	f06f 0263 	mvn.w	r2, #99	; 0x63
   29a26:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   29a2a:	fb93 f3f2 	sdiv	r3, r3, r2
   29a2e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   29a32:	441d      	add	r5, r3
   29a34:	f44f 73c8 	mov.w	r3, #400	; 0x190
   29a38:	4442      	add	r2, r8
   29a3a:	fbb2 f2f3 	udiv	r2, r2, r3
   29a3e:	fb98 f7f3 	sdiv	r7, r8, r3
   29a42:	4415      	add	r5, r2
   29a44:	2264      	movs	r2, #100	; 0x64
   29a46:	fb03 8717 	mls	r7, r3, r7, r8
   29a4a:	f008 0303 	and.w	r3, r8, #3
   29a4e:	fb98 f6f2 	sdiv	r6, r8, r2
   29a52:	fab7 fc87 	clz	ip, r7
   29a56:	fb02 8616 	mls	r6, r2, r6, r8
   29a5a:	9300      	str	r3, [sp, #0]
   29a5c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   29a60:	7a22      	ldrb	r2, [r4, #8]
   29a62:	6963      	ldr	r3, [r4, #20]
   29a64:	2a4a      	cmp	r2, #74	; 0x4a
   29a66:	d128      	bne.n	29aba <__tzcalc_limits+0xce>
   29a68:	9900      	ldr	r1, [sp, #0]
   29a6a:	18ea      	adds	r2, r5, r3
   29a6c:	b901      	cbnz	r1, 29a70 <__tzcalc_limits+0x84>
   29a6e:	b906      	cbnz	r6, 29a72 <__tzcalc_limits+0x86>
   29a70:	bb0f      	cbnz	r7, 29ab6 <__tzcalc_limits+0xca>
   29a72:	2b3b      	cmp	r3, #59	; 0x3b
   29a74:	bfd4      	ite	le
   29a76:	2300      	movle	r3, #0
   29a78:	2301      	movgt	r3, #1
   29a7a:	4413      	add	r3, r2
   29a7c:	1e5a      	subs	r2, r3, #1
   29a7e:	69a3      	ldr	r3, [r4, #24]
   29a80:	3428      	adds	r4, #40	; 0x28
   29a82:	492c      	ldr	r1, [pc, #176]	; (29b34 <__tzcalc_limits+0x148>)
   29a84:	fb01 3202 	mla	r2, r1, r2, r3
   29a88:	6823      	ldr	r3, [r4, #0]
   29a8a:	4413      	add	r3, r2
   29a8c:	461a      	mov	r2, r3
   29a8e:	17db      	asrs	r3, r3, #31
   29a90:	e944 2302 	strd	r2, r3, [r4, #-8]
   29a94:	45a3      	cmp	fp, r4
   29a96:	d1e3      	bne.n	29a60 <__tzcalc_limits+0x74>
   29a98:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   29a9c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   29aa0:	4294      	cmp	r4, r2
   29aa2:	eb75 0303 	sbcs.w	r3, r5, r3
   29aa6:	bfb4      	ite	lt
   29aa8:	2301      	movlt	r3, #1
   29aaa:	2300      	movge	r3, #0
   29aac:	6003      	str	r3, [r0, #0]
   29aae:	2001      	movs	r0, #1
   29ab0:	b003      	add	sp, #12
   29ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ab6:	2300      	movs	r3, #0
   29ab8:	e7df      	b.n	29a7a <__tzcalc_limits+0x8e>
   29aba:	2a44      	cmp	r2, #68	; 0x44
   29abc:	d101      	bne.n	29ac2 <__tzcalc_limits+0xd6>
   29abe:	18ea      	adds	r2, r5, r3
   29ac0:	e7dd      	b.n	29a7e <__tzcalc_limits+0x92>
   29ac2:	9a00      	ldr	r2, [sp, #0]
   29ac4:	bb72      	cbnz	r2, 29b24 <__tzcalc_limits+0x138>
   29ac6:	2e00      	cmp	r6, #0
   29ac8:	bf0c      	ite	eq
   29aca:	46e0      	moveq	r8, ip
   29acc:	f04f 0801 	movne.w	r8, #1
   29ad0:	f04f 0a30 	mov.w	sl, #48	; 0x30
   29ad4:	4918      	ldr	r1, [pc, #96]	; (29b38 <__tzcalc_limits+0x14c>)
   29ad6:	68e2      	ldr	r2, [r4, #12]
   29ad8:	f04f 0900 	mov.w	r9, #0
   29adc:	fb0a 1808 	mla	r8, sl, r8, r1
   29ae0:	9201      	str	r2, [sp, #4]
   29ae2:	462a      	mov	r2, r5
   29ae4:	f1a8 0804 	sub.w	r8, r8, #4
   29ae8:	f109 0901 	add.w	r9, r9, #1
   29aec:	9901      	ldr	r1, [sp, #4]
   29aee:	4549      	cmp	r1, r9
   29af0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   29af4:	dc18      	bgt.n	29b28 <__tzcalc_limits+0x13c>
   29af6:	f102 0804 	add.w	r8, r2, #4
   29afa:	fb98 f9fe 	sdiv	r9, r8, lr
   29afe:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   29b02:	eba8 0909 	sub.w	r9, r8, r9
   29b06:	ebb3 0909 	subs.w	r9, r3, r9
   29b0a:	6923      	ldr	r3, [r4, #16]
   29b0c:	f103 33ff 	add.w	r3, r3, #4294967295
   29b10:	bf48      	it	mi
   29b12:	f109 0907 	addmi.w	r9, r9, #7
   29b16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   29b1a:	444b      	add	r3, r9
   29b1c:	4553      	cmp	r3, sl
   29b1e:	da05      	bge.n	29b2c <__tzcalc_limits+0x140>
   29b20:	441a      	add	r2, r3
   29b22:	e7ac      	b.n	29a7e <__tzcalc_limits+0x92>
   29b24:	46e0      	mov	r8, ip
   29b26:	e7d3      	b.n	29ad0 <__tzcalc_limits+0xe4>
   29b28:	4452      	add	r2, sl
   29b2a:	e7dd      	b.n	29ae8 <__tzcalc_limits+0xfc>
   29b2c:	3b07      	subs	r3, #7
   29b2e:	e7f5      	b.n	29b1c <__tzcalc_limits+0x130>
   29b30:	2000      	movs	r0, #0
   29b32:	e7bd      	b.n	29ab0 <__tzcalc_limits+0xc4>
   29b34:	00015180 	.word	0x00015180
   29b38:	0002e180 	.word	0x0002e180

00029b3c <__tz_lock>:
   29b3c:	4801      	ldr	r0, [pc, #4]	; (29b44 <__tz_lock+0x8>)
   29b3e:	f7f3 b8e7 	b.w	1cd10 <__retarget_lock_acquire>
   29b42:	bf00      	nop
   29b44:	2000ca38 	.word	0x2000ca38

00029b48 <__tz_unlock>:
   29b48:	4801      	ldr	r0, [pc, #4]	; (29b50 <__tz_unlock+0x8>)
   29b4a:	f7f3 b919 	b.w	1cd80 <__retarget_lock_release>
   29b4e:	bf00      	nop
   29b50:	2000ca38 	.word	0x2000ca38

00029b54 <_tzset_unlocked>:
   29b54:	4b01      	ldr	r3, [pc, #4]	; (29b5c <_tzset_unlocked+0x8>)
   29b56:	6818      	ldr	r0, [r3, #0]
   29b58:	f000 b802 	b.w	29b60 <_tzset_unlocked_r>
   29b5c:	2000c6d0 	.word	0x2000c6d0

00029b60 <_tzset_unlocked_r>:
   29b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b64:	4607      	mov	r7, r0
   29b66:	b08d      	sub	sp, #52	; 0x34
   29b68:	f000 f9f0 	bl	29f4c <__gettzinfo>
   29b6c:	49b0      	ldr	r1, [pc, #704]	; (29e30 <_tzset_unlocked_r+0x2d0>)
   29b6e:	4605      	mov	r5, r0
   29b70:	4638      	mov	r0, r7
   29b72:	f003 fa70 	bl	2d056 <_getenv_r>
   29b76:	4eaf      	ldr	r6, [pc, #700]	; (29e34 <_tzset_unlocked_r+0x2d4>)
   29b78:	4604      	mov	r4, r0
   29b7a:	b970      	cbnz	r0, 29b9a <_tzset_unlocked_r+0x3a>
   29b7c:	4bae      	ldr	r3, [pc, #696]	; (29e38 <_tzset_unlocked_r+0x2d8>)
   29b7e:	4aaf      	ldr	r2, [pc, #700]	; (29e3c <_tzset_unlocked_r+0x2dc>)
   29b80:	6018      	str	r0, [r3, #0]
   29b82:	4baf      	ldr	r3, [pc, #700]	; (29e40 <_tzset_unlocked_r+0x2e0>)
   29b84:	6018      	str	r0, [r3, #0]
   29b86:	4baf      	ldr	r3, [pc, #700]	; (29e44 <_tzset_unlocked_r+0x2e4>)
   29b88:	6830      	ldr	r0, [r6, #0]
   29b8a:	e9c3 2200 	strd	r2, r2, [r3]
   29b8e:	f7ff f94d 	bl	28e2c <free>
   29b92:	6034      	str	r4, [r6, #0]
   29b94:	b00d      	add	sp, #52	; 0x34
   29b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b9a:	6831      	ldr	r1, [r6, #0]
   29b9c:	2900      	cmp	r1, #0
   29b9e:	d15f      	bne.n	29c60 <_tzset_unlocked_r+0x100>
   29ba0:	6830      	ldr	r0, [r6, #0]
   29ba2:	f7ff f943 	bl	28e2c <free>
   29ba6:	4620      	mov	r0, r4
   29ba8:	f7ef fcc8 	bl	1953c <strlen>
   29bac:	1c41      	adds	r1, r0, #1
   29bae:	4638      	mov	r0, r7
   29bb0:	f7ff f992 	bl	28ed8 <_malloc_r>
   29bb4:	6030      	str	r0, [r6, #0]
   29bb6:	2800      	cmp	r0, #0
   29bb8:	d157      	bne.n	29c6a <_tzset_unlocked_r+0x10a>
   29bba:	7823      	ldrb	r3, [r4, #0]
   29bbc:	ae0a      	add	r6, sp, #40	; 0x28
   29bbe:	4aa2      	ldr	r2, [pc, #648]	; (29e48 <_tzset_unlocked_r+0x2e8>)
   29bc0:	2b3a      	cmp	r3, #58	; 0x3a
   29bc2:	49a2      	ldr	r1, [pc, #648]	; (29e4c <_tzset_unlocked_r+0x2ec>)
   29bc4:	4633      	mov	r3, r6
   29bc6:	bf08      	it	eq
   29bc8:	3401      	addeq	r4, #1
   29bca:	4620      	mov	r0, r4
   29bcc:	f7ff fd3e 	bl	2964c <siscanf>
   29bd0:	2800      	cmp	r0, #0
   29bd2:	dddf      	ble.n	29b94 <_tzset_unlocked_r+0x34>
   29bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29bd6:	18e7      	adds	r7, r4, r3
   29bd8:	5ce3      	ldrb	r3, [r4, r3]
   29bda:	2b2d      	cmp	r3, #45	; 0x2d
   29bdc:	d149      	bne.n	29c72 <_tzset_unlocked_r+0x112>
   29bde:	3701      	adds	r7, #1
   29be0:	f04f 34ff 	mov.w	r4, #4294967295
   29be4:	f10d 0a20 	add.w	sl, sp, #32
   29be8:	f10d 0b1e 	add.w	fp, sp, #30
   29bec:	f04f 0800 	mov.w	r8, #0
   29bf0:	4633      	mov	r3, r6
   29bf2:	aa07      	add	r2, sp, #28
   29bf4:	4996      	ldr	r1, [pc, #600]	; (29e50 <_tzset_unlocked_r+0x2f0>)
   29bf6:	4638      	mov	r0, r7
   29bf8:	9603      	str	r6, [sp, #12]
   29bfa:	f8cd b000 	str.w	fp, [sp]
   29bfe:	f8ad 801e 	strh.w	r8, [sp, #30]
   29c02:	f8ad 8020 	strh.w	r8, [sp, #32]
   29c06:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   29c0a:	f7ff fd1f 	bl	2964c <siscanf>
   29c0e:	4540      	cmp	r0, r8
   29c10:	ddc0      	ble.n	29b94 <_tzset_unlocked_r+0x34>
   29c12:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   29c16:	213c      	movs	r1, #60	; 0x3c
   29c18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29c1c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 29e5c <_tzset_unlocked_r+0x2fc>
   29c20:	fb01 2203 	mla	r2, r1, r3, r2
   29c24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   29c28:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29c2c:	fb01 2303 	mla	r3, r1, r3, r2
   29c30:	464a      	mov	r2, r9
   29c32:	4986      	ldr	r1, [pc, #536]	; (29e4c <_tzset_unlocked_r+0x2ec>)
   29c34:	435c      	muls	r4, r3
   29c36:	4b84      	ldr	r3, [pc, #528]	; (29e48 <_tzset_unlocked_r+0x2e8>)
   29c38:	62ac      	str	r4, [r5, #40]	; 0x28
   29c3a:	4c82      	ldr	r4, [pc, #520]	; (29e44 <_tzset_unlocked_r+0x2e4>)
   29c3c:	6023      	str	r3, [r4, #0]
   29c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c40:	441f      	add	r7, r3
   29c42:	4633      	mov	r3, r6
   29c44:	4638      	mov	r0, r7
   29c46:	f7ff fd01 	bl	2964c <siscanf>
   29c4a:	4540      	cmp	r0, r8
   29c4c:	dc17      	bgt.n	29c7e <_tzset_unlocked_r+0x11e>
   29c4e:	6823      	ldr	r3, [r4, #0]
   29c50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   29c52:	6063      	str	r3, [r4, #4]
   29c54:	4b78      	ldr	r3, [pc, #480]	; (29e38 <_tzset_unlocked_r+0x2d8>)
   29c56:	601a      	str	r2, [r3, #0]
   29c58:	4b79      	ldr	r3, [pc, #484]	; (29e40 <_tzset_unlocked_r+0x2e0>)
   29c5a:	f8c3 8000 	str.w	r8, [r3]
   29c5e:	e799      	b.n	29b94 <_tzset_unlocked_r+0x34>
   29c60:	f7ef fc62 	bl	19528 <strcmp>
   29c64:	2800      	cmp	r0, #0
   29c66:	d19b      	bne.n	29ba0 <_tzset_unlocked_r+0x40>
   29c68:	e794      	b.n	29b94 <_tzset_unlocked_r+0x34>
   29c6a:	4621      	mov	r1, r4
   29c6c:	f003 f8e3 	bl	2ce36 <strcpy>
   29c70:	e7a3      	b.n	29bba <_tzset_unlocked_r+0x5a>
   29c72:	2b2b      	cmp	r3, #43	; 0x2b
   29c74:	f04f 0401 	mov.w	r4, #1
   29c78:	bf08      	it	eq
   29c7a:	3701      	addeq	r7, #1
   29c7c:	e7b2      	b.n	29be4 <_tzset_unlocked_r+0x84>
   29c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c80:	f8c4 9004 	str.w	r9, [r4, #4]
   29c84:	18fc      	adds	r4, r7, r3
   29c86:	5cfb      	ldrb	r3, [r7, r3]
   29c88:	2b2d      	cmp	r3, #45	; 0x2d
   29c8a:	f040 808c 	bne.w	29da6 <_tzset_unlocked_r+0x246>
   29c8e:	3401      	adds	r4, #1
   29c90:	f04f 37ff 	mov.w	r7, #4294967295
   29c94:	2300      	movs	r3, #0
   29c96:	aa07      	add	r2, sp, #28
   29c98:	496d      	ldr	r1, [pc, #436]	; (29e50 <_tzset_unlocked_r+0x2f0>)
   29c9a:	4620      	mov	r0, r4
   29c9c:	f8ad 301c 	strh.w	r3, [sp, #28]
   29ca0:	f8ad 301e 	strh.w	r3, [sp, #30]
   29ca4:	f8ad 3020 	strh.w	r3, [sp, #32]
   29ca8:	930a      	str	r3, [sp, #40]	; 0x28
   29caa:	4633      	mov	r3, r6
   29cac:	e9cd a602 	strd	sl, r6, [sp, #8]
   29cb0:	e9cd b600 	strd	fp, r6, [sp]
   29cb4:	f7ff fcca 	bl	2964c <siscanf>
   29cb8:	2800      	cmp	r0, #0
   29cba:	dc7a      	bgt.n	29db2 <_tzset_unlocked_r+0x252>
   29cbc:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   29cbe:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   29cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29cc4:	f04f 0900 	mov.w	r9, #0
   29cc8:	652f      	str	r7, [r5, #80]	; 0x50
   29cca:	462f      	mov	r7, r5
   29ccc:	441c      	add	r4, r3
   29cce:	7823      	ldrb	r3, [r4, #0]
   29cd0:	2b2c      	cmp	r3, #44	; 0x2c
   29cd2:	bf08      	it	eq
   29cd4:	3401      	addeq	r4, #1
   29cd6:	f894 8000 	ldrb.w	r8, [r4]
   29cda:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   29cde:	d17a      	bne.n	29dd6 <_tzset_unlocked_r+0x276>
   29ce0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   29ce4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   29ce8:	495a      	ldr	r1, [pc, #360]	; (29e54 <_tzset_unlocked_r+0x2f4>)
   29cea:	4620      	mov	r0, r4
   29cec:	9603      	str	r6, [sp, #12]
   29cee:	e9cd 6301 	strd	r6, r3, [sp, #4]
   29cf2:	ab09      	add	r3, sp, #36	; 0x24
   29cf4:	9300      	str	r3, [sp, #0]
   29cf6:	4633      	mov	r3, r6
   29cf8:	f7ff fca8 	bl	2964c <siscanf>
   29cfc:	2803      	cmp	r0, #3
   29cfe:	f47f af49 	bne.w	29b94 <_tzset_unlocked_r+0x34>
   29d02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   29d06:	1e4b      	subs	r3, r1, #1
   29d08:	2b0b      	cmp	r3, #11
   29d0a:	f63f af43 	bhi.w	29b94 <_tzset_unlocked_r+0x34>
   29d0e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   29d12:	1e53      	subs	r3, r2, #1
   29d14:	2b04      	cmp	r3, #4
   29d16:	f63f af3d 	bhi.w	29b94 <_tzset_unlocked_r+0x34>
   29d1a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   29d1e:	2b06      	cmp	r3, #6
   29d20:	f63f af38 	bhi.w	29b94 <_tzset_unlocked_r+0x34>
   29d24:	f887 8008 	strb.w	r8, [r7, #8]
   29d28:	617b      	str	r3, [r7, #20]
   29d2a:	e9c7 1203 	strd	r1, r2, [r7, #12]
   29d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29d30:	eb04 0803 	add.w	r8, r4, r3
   29d34:	2302      	movs	r3, #2
   29d36:	f8ad 301c 	strh.w	r3, [sp, #28]
   29d3a:	2300      	movs	r3, #0
   29d3c:	f8ad 301e 	strh.w	r3, [sp, #30]
   29d40:	f8ad 3020 	strh.w	r3, [sp, #32]
   29d44:	930a      	str	r3, [sp, #40]	; 0x28
   29d46:	f898 3000 	ldrb.w	r3, [r8]
   29d4a:	2b2f      	cmp	r3, #47	; 0x2f
   29d4c:	d109      	bne.n	29d62 <_tzset_unlocked_r+0x202>
   29d4e:	4633      	mov	r3, r6
   29d50:	aa07      	add	r2, sp, #28
   29d52:	4941      	ldr	r1, [pc, #260]	; (29e58 <_tzset_unlocked_r+0x2f8>)
   29d54:	4640      	mov	r0, r8
   29d56:	e9cd a602 	strd	sl, r6, [sp, #8]
   29d5a:	e9cd b600 	strd	fp, r6, [sp]
   29d5e:	f7ff fc75 	bl	2964c <siscanf>
   29d62:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   29d66:	213c      	movs	r1, #60	; 0x3c
   29d68:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29d6c:	3728      	adds	r7, #40	; 0x28
   29d6e:	fb01 2203 	mla	r2, r1, r3, r2
   29d72:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   29d76:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29d7a:	fb01 2303 	mla	r3, r1, r3, r2
   29d7e:	f847 3c10 	str.w	r3, [r7, #-16]
   29d82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   29d84:	4444      	add	r4, r8
   29d86:	f1b9 0f00 	cmp.w	r9, #0
   29d8a:	d021      	beq.n	29dd0 <_tzset_unlocked_r+0x270>
   29d8c:	6868      	ldr	r0, [r5, #4]
   29d8e:	f7ff fe2d 	bl	299ec <__tzcalc_limits>
   29d92:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   29d94:	4b28      	ldr	r3, [pc, #160]	; (29e38 <_tzset_unlocked_r+0x2d8>)
   29d96:	601a      	str	r2, [r3, #0]
   29d98:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   29d9a:	1a9b      	subs	r3, r3, r2
   29d9c:	4a28      	ldr	r2, [pc, #160]	; (29e40 <_tzset_unlocked_r+0x2e0>)
   29d9e:	bf18      	it	ne
   29da0:	2301      	movne	r3, #1
   29da2:	6013      	str	r3, [r2, #0]
   29da4:	e6f6      	b.n	29b94 <_tzset_unlocked_r+0x34>
   29da6:	2b2b      	cmp	r3, #43	; 0x2b
   29da8:	f04f 0701 	mov.w	r7, #1
   29dac:	bf08      	it	eq
   29dae:	3401      	addeq	r4, #1
   29db0:	e770      	b.n	29c94 <_tzset_unlocked_r+0x134>
   29db2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   29db6:	213c      	movs	r1, #60	; 0x3c
   29db8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29dbc:	fb01 2203 	mla	r2, r1, r3, r2
   29dc0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   29dc4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29dc8:	fb01 2303 	mla	r3, r1, r3, r2
   29dcc:	435f      	muls	r7, r3
   29dce:	e778      	b.n	29cc2 <_tzset_unlocked_r+0x162>
   29dd0:	f04f 0901 	mov.w	r9, #1
   29dd4:	e77b      	b.n	29cce <_tzset_unlocked_r+0x16e>
   29dd6:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   29dda:	f04f 020a 	mov.w	r2, #10
   29dde:	a90b      	add	r1, sp, #44	; 0x2c
   29de0:	bf06      	itte	eq
   29de2:	3401      	addeq	r4, #1
   29de4:	4643      	moveq	r3, r8
   29de6:	2344      	movne	r3, #68	; 0x44
   29de8:	4620      	mov	r0, r4
   29dea:	9305      	str	r3, [sp, #20]
   29dec:	f7ff fdf4 	bl	299d8 <strtoul>
   29df0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   29df4:	9b05      	ldr	r3, [sp, #20]
   29df6:	45a0      	cmp	r8, r4
   29df8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   29dfc:	d114      	bne.n	29e28 <_tzset_unlocked_r+0x2c8>
   29dfe:	234d      	movs	r3, #77	; 0x4d
   29e00:	f1b9 0f00 	cmp.w	r9, #0
   29e04:	d107      	bne.n	29e16 <_tzset_unlocked_r+0x2b6>
   29e06:	2103      	movs	r1, #3
   29e08:	722b      	strb	r3, [r5, #8]
   29e0a:	2302      	movs	r3, #2
   29e0c:	f8c5 9014 	str.w	r9, [r5, #20]
   29e10:	e9c5 1303 	strd	r1, r3, [r5, #12]
   29e14:	e78e      	b.n	29d34 <_tzset_unlocked_r+0x1d4>
   29e16:	220b      	movs	r2, #11
   29e18:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   29e1c:	2301      	movs	r3, #1
   29e1e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   29e22:	2300      	movs	r3, #0
   29e24:	63eb      	str	r3, [r5, #60]	; 0x3c
   29e26:	e785      	b.n	29d34 <_tzset_unlocked_r+0x1d4>
   29e28:	b280      	uxth	r0, r0
   29e2a:	723b      	strb	r3, [r7, #8]
   29e2c:	6178      	str	r0, [r7, #20]
   29e2e:	e781      	b.n	29d34 <_tzset_unlocked_r+0x1d4>
   29e30:	00030e84 	.word	0x00030e84
   29e34:	2000d45c 	.word	0x2000d45c
   29e38:	2000d464 	.word	0x2000d464
   29e3c:	00030e87 	.word	0x00030e87
   29e40:	2000d460 	.word	0x2000d460
   29e44:	2000c6c8 	.word	0x2000c6c8
   29e48:	2000db45 	.word	0x2000db45
   29e4c:	00030e8b 	.word	0x00030e8b
   29e50:	00030eae 	.word	0x00030eae
   29e54:	00030e9a 	.word	0x00030e9a
   29e58:	00030ead 	.word	0x00030ead
   29e5c:	2000db3a 	.word	0x2000db3a

00029e60 <vsniprintf>:
   29e60:	b507      	push	{r0, r1, r2, lr}
   29e62:	9300      	str	r3, [sp, #0]
   29e64:	4613      	mov	r3, r2
   29e66:	460a      	mov	r2, r1
   29e68:	4601      	mov	r1, r0
   29e6a:	4803      	ldr	r0, [pc, #12]	; (29e78 <vsniprintf+0x18>)
   29e6c:	6800      	ldr	r0, [r0, #0]
   29e6e:	f003 f837 	bl	2cee0 <_vsniprintf_r>
   29e72:	b003      	add	sp, #12
   29e74:	f85d fb04 	ldr.w	pc, [sp], #4
   29e78:	2000c6d0 	.word	0x2000c6d0

00029e7c <_vsiscanf_r>:
   29e7c:	b570      	push	{r4, r5, r6, lr}
   29e7e:	461e      	mov	r6, r3
   29e80:	b09a      	sub	sp, #104	; 0x68
   29e82:	f44f 7301 	mov.w	r3, #516	; 0x204
   29e86:	4604      	mov	r4, r0
   29e88:	4608      	mov	r0, r1
   29e8a:	4615      	mov	r5, r2
   29e8c:	f8ad 300c 	strh.w	r3, [sp, #12]
   29e90:	9100      	str	r1, [sp, #0]
   29e92:	9104      	str	r1, [sp, #16]
   29e94:	f7ef fb52 	bl	1953c <strlen>
   29e98:	4b09      	ldr	r3, [pc, #36]	; (29ec0 <_vsiscanf_r+0x44>)
   29e9a:	462a      	mov	r2, r5
   29e9c:	4669      	mov	r1, sp
   29e9e:	9001      	str	r0, [sp, #4]
   29ea0:	9309      	str	r3, [sp, #36]	; 0x24
   29ea2:	2300      	movs	r3, #0
   29ea4:	9005      	str	r0, [sp, #20]
   29ea6:	4620      	mov	r0, r4
   29ea8:	930d      	str	r3, [sp, #52]	; 0x34
   29eaa:	9312      	str	r3, [sp, #72]	; 0x48
   29eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29eb0:	f8ad 300e 	strh.w	r3, [sp, #14]
   29eb4:	4633      	mov	r3, r6
   29eb6:	f000 f9ab 	bl	2a210 <__ssvfiscanf_r>
   29eba:	b01a      	add	sp, #104	; 0x68
   29ebc:	bd70      	pop	{r4, r5, r6, pc}
   29ebe:	bf00      	nop
   29ec0:	0002ce19 	.word	0x0002ce19

00029ec4 <vsiscanf>:
   29ec4:	4613      	mov	r3, r2
   29ec6:	460a      	mov	r2, r1
   29ec8:	4601      	mov	r1, r0
   29eca:	4802      	ldr	r0, [pc, #8]	; (29ed4 <vsiscanf+0x10>)
   29ecc:	6800      	ldr	r0, [r0, #0]
   29ece:	f7ff bfd5 	b.w	29e7c <_vsiscanf_r>
   29ed2:	bf00      	nop
   29ed4:	2000c6d0 	.word	0x2000c6d0

00029ed8 <_findenv_r>:
   29ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29edc:	4607      	mov	r7, r0
   29ede:	4689      	mov	r9, r1
   29ee0:	4616      	mov	r6, r2
   29ee2:	f000 fc5b 	bl	2a79c <__env_lock>
   29ee6:	4b18      	ldr	r3, [pc, #96]	; (29f48 <_findenv_r+0x70>)
   29ee8:	681c      	ldr	r4, [r3, #0]
   29eea:	469a      	mov	sl, r3
   29eec:	b134      	cbz	r4, 29efc <_findenv_r+0x24>
   29eee:	464b      	mov	r3, r9
   29ef0:	4698      	mov	r8, r3
   29ef2:	f813 1b01 	ldrb.w	r1, [r3], #1
   29ef6:	b139      	cbz	r1, 29f08 <_findenv_r+0x30>
   29ef8:	293d      	cmp	r1, #61	; 0x3d
   29efa:	d1f9      	bne.n	29ef0 <_findenv_r+0x18>
   29efc:	4638      	mov	r0, r7
   29efe:	f000 fc53 	bl	2a7a8 <__env_unlock>
   29f02:	2000      	movs	r0, #0
   29f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f08:	eba8 0809 	sub.w	r8, r8, r9
   29f0c:	46a3      	mov	fp, r4
   29f0e:	f854 0b04 	ldr.w	r0, [r4], #4
   29f12:	2800      	cmp	r0, #0
   29f14:	d0f2      	beq.n	29efc <_findenv_r+0x24>
   29f16:	4642      	mov	r2, r8
   29f18:	4649      	mov	r1, r9
   29f1a:	f002 ff94 	bl	2ce46 <strncmp>
   29f1e:	2800      	cmp	r0, #0
   29f20:	d1f4      	bne.n	29f0c <_findenv_r+0x34>
   29f22:	f854 3c04 	ldr.w	r3, [r4, #-4]
   29f26:	eb03 0508 	add.w	r5, r3, r8
   29f2a:	f813 3008 	ldrb.w	r3, [r3, r8]
   29f2e:	2b3d      	cmp	r3, #61	; 0x3d
   29f30:	d1ec      	bne.n	29f0c <_findenv_r+0x34>
   29f32:	f8da 3000 	ldr.w	r3, [sl]
   29f36:	4638      	mov	r0, r7
   29f38:	ebab 0303 	sub.w	r3, fp, r3
   29f3c:	109b      	asrs	r3, r3, #2
   29f3e:	6033      	str	r3, [r6, #0]
   29f40:	f000 fc32 	bl	2a7a8 <__env_unlock>
   29f44:	1c68      	adds	r0, r5, #1
   29f46:	e7dd      	b.n	29f04 <_findenv_r+0x2c>
   29f48:	2000c734 	.word	0x2000c734

00029f4c <__gettzinfo>:
   29f4c:	4800      	ldr	r0, [pc, #0]	; (29f50 <__gettzinfo+0x4>)
   29f4e:	4770      	bx	lr
   29f50:	2000c530 	.word	0x2000c530

00029f54 <_localeconv_r>:
   29f54:	4800      	ldr	r0, [pc, #0]	; (29f58 <_localeconv_r+0x4>)
   29f56:	4770      	bx	lr
   29f58:	2000c828 	.word	0x2000c828

00029f5c <__malloc_lock>:
   29f5c:	4801      	ldr	r0, [pc, #4]	; (29f64 <__malloc_lock+0x8>)
   29f5e:	f7f2 bef3 	b.w	1cd48 <__retarget_lock_acquire_recursive>
   29f62:	bf00      	nop
   29f64:	2000c9ac 	.word	0x2000c9ac

00029f68 <__malloc_unlock>:
   29f68:	4801      	ldr	r0, [pc, #4]	; (29f70 <__malloc_unlock+0x8>)
   29f6a:	f7f2 bf21 	b.w	1cdb0 <__retarget_lock_release_recursive>
   29f6e:	bf00      	nop
   29f70:	2000c9ac 	.word	0x2000c9ac

00029f74 <__pow5mult>:
   29f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29f78:	4615      	mov	r5, r2
   29f7a:	f012 0203 	ands.w	r2, r2, #3
   29f7e:	4606      	mov	r6, r0
   29f80:	460f      	mov	r7, r1
   29f82:	d007      	beq.n	29f94 <__pow5mult+0x20>
   29f84:	3a01      	subs	r2, #1
   29f86:	4c21      	ldr	r4, [pc, #132]	; (2a00c <__pow5mult+0x98>)
   29f88:	2300      	movs	r3, #0
   29f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   29f8e:	f003 f8b4 	bl	2d0fa <__multadd>
   29f92:	4607      	mov	r7, r0
   29f94:	10ad      	asrs	r5, r5, #2
   29f96:	d035      	beq.n	2a004 <__pow5mult+0x90>
   29f98:	6a74      	ldr	r4, [r6, #36]	; 0x24
   29f9a:	b93c      	cbnz	r4, 29fac <__pow5mult+0x38>
   29f9c:	2010      	movs	r0, #16
   29f9e:	f7fe ff3d 	bl	28e1c <malloc>
   29fa2:	6270      	str	r0, [r6, #36]	; 0x24
   29fa4:	6004      	str	r4, [r0, #0]
   29fa6:	60c4      	str	r4, [r0, #12]
   29fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   29fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   29fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   29fb4:	b94c      	cbnz	r4, 29fca <__pow5mult+0x56>
   29fb6:	f240 2171 	movw	r1, #625	; 0x271
   29fba:	4630      	mov	r0, r6
   29fbc:	f003 f92a 	bl	2d214 <__i2b>
   29fc0:	2300      	movs	r3, #0
   29fc2:	4604      	mov	r4, r0
   29fc4:	f8c8 0008 	str.w	r0, [r8, #8]
   29fc8:	6003      	str	r3, [r0, #0]
   29fca:	f04f 0900 	mov.w	r9, #0
   29fce:	07eb      	lsls	r3, r5, #31
   29fd0:	d50a      	bpl.n	29fe8 <__pow5mult+0x74>
   29fd2:	4639      	mov	r1, r7
   29fd4:	4622      	mov	r2, r4
   29fd6:	4630      	mov	r0, r6
   29fd8:	f003 f925 	bl	2d226 <__multiply>
   29fdc:	4680      	mov	r8, r0
   29fde:	4639      	mov	r1, r7
   29fe0:	4630      	mov	r0, r6
   29fe2:	4647      	mov	r7, r8
   29fe4:	f003 f872 	bl	2d0cc <_Bfree>
   29fe8:	106d      	asrs	r5, r5, #1
   29fea:	d00b      	beq.n	2a004 <__pow5mult+0x90>
   29fec:	6820      	ldr	r0, [r4, #0]
   29fee:	b938      	cbnz	r0, 2a000 <__pow5mult+0x8c>
   29ff0:	4622      	mov	r2, r4
   29ff2:	4621      	mov	r1, r4
   29ff4:	4630      	mov	r0, r6
   29ff6:	f003 f916 	bl	2d226 <__multiply>
   29ffa:	6020      	str	r0, [r4, #0]
   29ffc:	f8c0 9000 	str.w	r9, [r0]
   2a000:	4604      	mov	r4, r0
   2a002:	e7e4      	b.n	29fce <__pow5mult+0x5a>
   2a004:	4638      	mov	r0, r7
   2a006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a00a:	bf00      	nop
   2a00c:	0002e1e0 	.word	0x0002e1e0

0002a010 <_svfiprintf_r>:
   2a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a014:	4698      	mov	r8, r3
   2a016:	898b      	ldrh	r3, [r1, #12]
   2a018:	b09d      	sub	sp, #116	; 0x74
   2a01a:	4607      	mov	r7, r0
   2a01c:	061b      	lsls	r3, r3, #24
   2a01e:	460d      	mov	r5, r1
   2a020:	4614      	mov	r4, r2
   2a022:	d50e      	bpl.n	2a042 <_svfiprintf_r+0x32>
   2a024:	690b      	ldr	r3, [r1, #16]
   2a026:	b963      	cbnz	r3, 2a042 <_svfiprintf_r+0x32>
   2a028:	2140      	movs	r1, #64	; 0x40
   2a02a:	f7fe ff55 	bl	28ed8 <_malloc_r>
   2a02e:	6028      	str	r0, [r5, #0]
   2a030:	6128      	str	r0, [r5, #16]
   2a032:	b920      	cbnz	r0, 2a03e <_svfiprintf_r+0x2e>
   2a034:	230c      	movs	r3, #12
   2a036:	603b      	str	r3, [r7, #0]
   2a038:	f04f 30ff 	mov.w	r0, #4294967295
   2a03c:	e0d1      	b.n	2a1e2 <_svfiprintf_r+0x1d2>
   2a03e:	2340      	movs	r3, #64	; 0x40
   2a040:	616b      	str	r3, [r5, #20]
   2a042:	2300      	movs	r3, #0
   2a044:	f8cd 800c 	str.w	r8, [sp, #12]
   2a048:	f04f 0901 	mov.w	r9, #1
   2a04c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2a1fc <_svfiprintf_r+0x1ec>
   2a050:	9309      	str	r3, [sp, #36]	; 0x24
   2a052:	2320      	movs	r3, #32
   2a054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2a058:	2330      	movs	r3, #48	; 0x30
   2a05a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2a05e:	4623      	mov	r3, r4
   2a060:	469a      	mov	sl, r3
   2a062:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a066:	b10a      	cbz	r2, 2a06c <_svfiprintf_r+0x5c>
   2a068:	2a25      	cmp	r2, #37	; 0x25
   2a06a:	d1f9      	bne.n	2a060 <_svfiprintf_r+0x50>
   2a06c:	ebba 0b04 	subs.w	fp, sl, r4
   2a070:	d00b      	beq.n	2a08a <_svfiprintf_r+0x7a>
   2a072:	465b      	mov	r3, fp
   2a074:	4622      	mov	r2, r4
   2a076:	4629      	mov	r1, r5
   2a078:	4638      	mov	r0, r7
   2a07a:	f003 fac3 	bl	2d604 <__ssputs_r>
   2a07e:	3001      	adds	r0, #1
   2a080:	f000 80aa 	beq.w	2a1d8 <_svfiprintf_r+0x1c8>
   2a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a086:	445a      	add	r2, fp
   2a088:	9209      	str	r2, [sp, #36]	; 0x24
   2a08a:	f89a 3000 	ldrb.w	r3, [sl]
   2a08e:	2b00      	cmp	r3, #0
   2a090:	f000 80a2 	beq.w	2a1d8 <_svfiprintf_r+0x1c8>
   2a094:	2300      	movs	r3, #0
   2a096:	f04f 32ff 	mov.w	r2, #4294967295
   2a09a:	f10a 0a01 	add.w	sl, sl, #1
   2a09e:	9304      	str	r3, [sp, #16]
   2a0a0:	9307      	str	r3, [sp, #28]
   2a0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2a0a6:	931a      	str	r3, [sp, #104]	; 0x68
   2a0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2a0ac:	4654      	mov	r4, sl
   2a0ae:	2205      	movs	r2, #5
   2a0b0:	4852      	ldr	r0, [pc, #328]	; (2a1fc <_svfiprintf_r+0x1ec>)
   2a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a0b6:	f002 fd70 	bl	2cb9a <memchr>
   2a0ba:	9a04      	ldr	r2, [sp, #16]
   2a0bc:	b9d8      	cbnz	r0, 2a0f6 <_svfiprintf_r+0xe6>
   2a0be:	06d0      	lsls	r0, r2, #27
   2a0c0:	bf44      	itt	mi
   2a0c2:	2320      	movmi	r3, #32
   2a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a0c8:	0711      	lsls	r1, r2, #28
   2a0ca:	bf44      	itt	mi
   2a0cc:	232b      	movmi	r3, #43	; 0x2b
   2a0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a0d2:	f89a 3000 	ldrb.w	r3, [sl]
   2a0d6:	2b2a      	cmp	r3, #42	; 0x2a
   2a0d8:	d015      	beq.n	2a106 <_svfiprintf_r+0xf6>
   2a0da:	9a07      	ldr	r2, [sp, #28]
   2a0dc:	4654      	mov	r4, sl
   2a0de:	2000      	movs	r0, #0
   2a0e0:	f04f 0c0a 	mov.w	ip, #10
   2a0e4:	4621      	mov	r1, r4
   2a0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a0ea:	3b30      	subs	r3, #48	; 0x30
   2a0ec:	2b09      	cmp	r3, #9
   2a0ee:	d94e      	bls.n	2a18e <_svfiprintf_r+0x17e>
   2a0f0:	b1b0      	cbz	r0, 2a120 <_svfiprintf_r+0x110>
   2a0f2:	9207      	str	r2, [sp, #28]
   2a0f4:	e014      	b.n	2a120 <_svfiprintf_r+0x110>
   2a0f6:	eba0 0308 	sub.w	r3, r0, r8
   2a0fa:	46a2      	mov	sl, r4
   2a0fc:	fa09 f303 	lsl.w	r3, r9, r3
   2a100:	4313      	orrs	r3, r2
   2a102:	9304      	str	r3, [sp, #16]
   2a104:	e7d2      	b.n	2a0ac <_svfiprintf_r+0x9c>
   2a106:	9b03      	ldr	r3, [sp, #12]
   2a108:	1d19      	adds	r1, r3, #4
   2a10a:	681b      	ldr	r3, [r3, #0]
   2a10c:	2b00      	cmp	r3, #0
   2a10e:	9103      	str	r1, [sp, #12]
   2a110:	bfbb      	ittet	lt
   2a112:	425b      	neglt	r3, r3
   2a114:	f042 0202 	orrlt.w	r2, r2, #2
   2a118:	9307      	strge	r3, [sp, #28]
   2a11a:	9307      	strlt	r3, [sp, #28]
   2a11c:	bfb8      	it	lt
   2a11e:	9204      	strlt	r2, [sp, #16]
   2a120:	7823      	ldrb	r3, [r4, #0]
   2a122:	2b2e      	cmp	r3, #46	; 0x2e
   2a124:	d10c      	bne.n	2a140 <_svfiprintf_r+0x130>
   2a126:	7863      	ldrb	r3, [r4, #1]
   2a128:	2b2a      	cmp	r3, #42	; 0x2a
   2a12a:	d135      	bne.n	2a198 <_svfiprintf_r+0x188>
   2a12c:	9b03      	ldr	r3, [sp, #12]
   2a12e:	3402      	adds	r4, #2
   2a130:	1d1a      	adds	r2, r3, #4
   2a132:	681b      	ldr	r3, [r3, #0]
   2a134:	2b00      	cmp	r3, #0
   2a136:	9203      	str	r2, [sp, #12]
   2a138:	bfb8      	it	lt
   2a13a:	f04f 33ff 	movlt.w	r3, #4294967295
   2a13e:	9305      	str	r3, [sp, #20]
   2a140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2a20c <_svfiprintf_r+0x1fc>
   2a144:	2203      	movs	r2, #3
   2a146:	7821      	ldrb	r1, [r4, #0]
   2a148:	4650      	mov	r0, sl
   2a14a:	f002 fd26 	bl	2cb9a <memchr>
   2a14e:	b140      	cbz	r0, 2a162 <_svfiprintf_r+0x152>
   2a150:	2340      	movs	r3, #64	; 0x40
   2a152:	eba0 000a 	sub.w	r0, r0, sl
   2a156:	3401      	adds	r4, #1
   2a158:	fa03 f000 	lsl.w	r0, r3, r0
   2a15c:	9b04      	ldr	r3, [sp, #16]
   2a15e:	4303      	orrs	r3, r0
   2a160:	9304      	str	r3, [sp, #16]
   2a162:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a166:	2206      	movs	r2, #6
   2a168:	4825      	ldr	r0, [pc, #148]	; (2a200 <_svfiprintf_r+0x1f0>)
   2a16a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2a16e:	f002 fd14 	bl	2cb9a <memchr>
   2a172:	2800      	cmp	r0, #0
   2a174:	d038      	beq.n	2a1e8 <_svfiprintf_r+0x1d8>
   2a176:	4b23      	ldr	r3, [pc, #140]	; (2a204 <_svfiprintf_r+0x1f4>)
   2a178:	bb1b      	cbnz	r3, 2a1c2 <_svfiprintf_r+0x1b2>
   2a17a:	9b03      	ldr	r3, [sp, #12]
   2a17c:	3307      	adds	r3, #7
   2a17e:	f023 0307 	bic.w	r3, r3, #7
   2a182:	3308      	adds	r3, #8
   2a184:	9303      	str	r3, [sp, #12]
   2a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a188:	4433      	add	r3, r6
   2a18a:	9309      	str	r3, [sp, #36]	; 0x24
   2a18c:	e767      	b.n	2a05e <_svfiprintf_r+0x4e>
   2a18e:	fb0c 3202 	mla	r2, ip, r2, r3
   2a192:	460c      	mov	r4, r1
   2a194:	2001      	movs	r0, #1
   2a196:	e7a5      	b.n	2a0e4 <_svfiprintf_r+0xd4>
   2a198:	2300      	movs	r3, #0
   2a19a:	3401      	adds	r4, #1
   2a19c:	f04f 0c0a 	mov.w	ip, #10
   2a1a0:	4619      	mov	r1, r3
   2a1a2:	9305      	str	r3, [sp, #20]
   2a1a4:	4620      	mov	r0, r4
   2a1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   2a1aa:	3a30      	subs	r2, #48	; 0x30
   2a1ac:	2a09      	cmp	r2, #9
   2a1ae:	d903      	bls.n	2a1b8 <_svfiprintf_r+0x1a8>
   2a1b0:	2b00      	cmp	r3, #0
   2a1b2:	d0c5      	beq.n	2a140 <_svfiprintf_r+0x130>
   2a1b4:	9105      	str	r1, [sp, #20]
   2a1b6:	e7c3      	b.n	2a140 <_svfiprintf_r+0x130>
   2a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
   2a1bc:	4604      	mov	r4, r0
   2a1be:	2301      	movs	r3, #1
   2a1c0:	e7f0      	b.n	2a1a4 <_svfiprintf_r+0x194>
   2a1c2:	ab03      	add	r3, sp, #12
   2a1c4:	462a      	mov	r2, r5
   2a1c6:	a904      	add	r1, sp, #16
   2a1c8:	4638      	mov	r0, r7
   2a1ca:	9300      	str	r3, [sp, #0]
   2a1cc:	4b0e      	ldr	r3, [pc, #56]	; (2a208 <_svfiprintf_r+0x1f8>)
   2a1ce:	f7fe fedd 	bl	28f8c <_printf_float>
   2a1d2:	1c42      	adds	r2, r0, #1
   2a1d4:	4606      	mov	r6, r0
   2a1d6:	d1d6      	bne.n	2a186 <_svfiprintf_r+0x176>
   2a1d8:	89ab      	ldrh	r3, [r5, #12]
   2a1da:	065b      	lsls	r3, r3, #25
   2a1dc:	f53f af2c 	bmi.w	2a038 <_svfiprintf_r+0x28>
   2a1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a1e2:	b01d      	add	sp, #116	; 0x74
   2a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1e8:	ab03      	add	r3, sp, #12
   2a1ea:	462a      	mov	r2, r5
   2a1ec:	a904      	add	r1, sp, #16
   2a1ee:	4638      	mov	r0, r7
   2a1f0:	9300      	str	r3, [sp, #0]
   2a1f2:	4b05      	ldr	r3, [pc, #20]	; (2a208 <_svfiprintf_r+0x1f8>)
   2a1f4:	f7ff f8f4 	bl	293e0 <_printf_i>
   2a1f8:	e7eb      	b.n	2a1d2 <_svfiprintf_r+0x1c2>
   2a1fa:	bf00      	nop
   2a1fc:	00030ecd 	.word	0x00030ecd
   2a200:	00030ed7 	.word	0x00030ed7
   2a204:	00028f8d 	.word	0x00028f8d
   2a208:	0002d605 	.word	0x0002d605
   2a20c:	00030ed3 	.word	0x00030ed3

0002a210 <__ssvfiscanf_r>:
   2a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a214:	460c      	mov	r4, r1
   2a216:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   2a21a:	2100      	movs	r1, #0
   2a21c:	4606      	mov	r6, r0
   2a21e:	f10d 0804 	add.w	r8, sp, #4
   2a222:	4fb4      	ldr	r7, [pc, #720]	; (2a4f4 <__ssvfiscanf_r+0x2e4>)
   2a224:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2a500 <__ssvfiscanf_r+0x2f0>
   2a228:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2a22c:	9300      	str	r3, [sp, #0]
   2a22e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2a232:	49b1      	ldr	r1, [pc, #708]	; (2a4f8 <__ssvfiscanf_r+0x2e8>)
   2a234:	91a0      	str	r1, [sp, #640]	; 0x280
   2a236:	49b1      	ldr	r1, [pc, #708]	; (2a4fc <__ssvfiscanf_r+0x2ec>)
   2a238:	91a1      	str	r1, [sp, #644]	; 0x284
   2a23a:	f892 a000 	ldrb.w	sl, [r2]
   2a23e:	f1ba 0f00 	cmp.w	sl, #0
   2a242:	f000 8154 	beq.w	2a4ee <__ssvfiscanf_r+0x2de>
   2a246:	f81a 3007 	ldrb.w	r3, [sl, r7]
   2a24a:	1c55      	adds	r5, r2, #1
   2a24c:	f013 0308 	ands.w	r3, r3, #8
   2a250:	d019      	beq.n	2a286 <__ssvfiscanf_r+0x76>
   2a252:	6863      	ldr	r3, [r4, #4]
   2a254:	2b00      	cmp	r3, #0
   2a256:	dd0f      	ble.n	2a278 <__ssvfiscanf_r+0x68>
   2a258:	6823      	ldr	r3, [r4, #0]
   2a25a:	781a      	ldrb	r2, [r3, #0]
   2a25c:	5cba      	ldrb	r2, [r7, r2]
   2a25e:	0712      	lsls	r2, r2, #28
   2a260:	d401      	bmi.n	2a266 <__ssvfiscanf_r+0x56>
   2a262:	462a      	mov	r2, r5
   2a264:	e7e9      	b.n	2a23a <__ssvfiscanf_r+0x2a>
   2a266:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2a268:	3301      	adds	r3, #1
   2a26a:	3201      	adds	r2, #1
   2a26c:	6023      	str	r3, [r4, #0]
   2a26e:	9245      	str	r2, [sp, #276]	; 0x114
   2a270:	6862      	ldr	r2, [r4, #4]
   2a272:	3a01      	subs	r2, #1
   2a274:	6062      	str	r2, [r4, #4]
   2a276:	e7ec      	b.n	2a252 <__ssvfiscanf_r+0x42>
   2a278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2a27a:	4621      	mov	r1, r4
   2a27c:	4630      	mov	r0, r6
   2a27e:	4798      	blx	r3
   2a280:	2800      	cmp	r0, #0
   2a282:	d0e9      	beq.n	2a258 <__ssvfiscanf_r+0x48>
   2a284:	e7ed      	b.n	2a262 <__ssvfiscanf_r+0x52>
   2a286:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   2a28a:	f040 8086 	bne.w	2a39a <__ssvfiscanf_r+0x18a>
   2a28e:	9341      	str	r3, [sp, #260]	; 0x104
   2a290:	9343      	str	r3, [sp, #268]	; 0x10c
   2a292:	7853      	ldrb	r3, [r2, #1]
   2a294:	2b2a      	cmp	r3, #42	; 0x2a
   2a296:	bf04      	itt	eq
   2a298:	2310      	moveq	r3, #16
   2a29a:	1c95      	addeq	r5, r2, #2
   2a29c:	f04f 020a 	mov.w	r2, #10
   2a2a0:	bf08      	it	eq
   2a2a2:	9341      	streq	r3, [sp, #260]	; 0x104
   2a2a4:	46ab      	mov	fp, r5
   2a2a6:	f81b 1b01 	ldrb.w	r1, [fp], #1
   2a2aa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2a2ae:	2b09      	cmp	r3, #9
   2a2b0:	d91d      	bls.n	2a2ee <__ssvfiscanf_r+0xde>
   2a2b2:	2203      	movs	r2, #3
   2a2b4:	4892      	ldr	r0, [pc, #584]	; (2a500 <__ssvfiscanf_r+0x2f0>)
   2a2b6:	f002 fc70 	bl	2cb9a <memchr>
   2a2ba:	b140      	cbz	r0, 2a2ce <__ssvfiscanf_r+0xbe>
   2a2bc:	2301      	movs	r3, #1
   2a2be:	eba0 0009 	sub.w	r0, r0, r9
   2a2c2:	465d      	mov	r5, fp
   2a2c4:	fa03 f000 	lsl.w	r0, r3, r0
   2a2c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2a2ca:	4318      	orrs	r0, r3
   2a2cc:	9041      	str	r0, [sp, #260]	; 0x104
   2a2ce:	f815 3b01 	ldrb.w	r3, [r5], #1
   2a2d2:	2b78      	cmp	r3, #120	; 0x78
   2a2d4:	d806      	bhi.n	2a2e4 <__ssvfiscanf_r+0xd4>
   2a2d6:	2b57      	cmp	r3, #87	; 0x57
   2a2d8:	d810      	bhi.n	2a2fc <__ssvfiscanf_r+0xec>
   2a2da:	2b25      	cmp	r3, #37	; 0x25
   2a2dc:	d05d      	beq.n	2a39a <__ssvfiscanf_r+0x18a>
   2a2de:	d857      	bhi.n	2a390 <__ssvfiscanf_r+0x180>
   2a2e0:	2b00      	cmp	r3, #0
   2a2e2:	d075      	beq.n	2a3d0 <__ssvfiscanf_r+0x1c0>
   2a2e4:	2303      	movs	r3, #3
   2a2e6:	9347      	str	r3, [sp, #284]	; 0x11c
   2a2e8:	230a      	movs	r3, #10
   2a2ea:	9342      	str	r3, [sp, #264]	; 0x108
   2a2ec:	e082      	b.n	2a3f4 <__ssvfiscanf_r+0x1e4>
   2a2ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2a2f0:	465d      	mov	r5, fp
   2a2f2:	fb02 1303 	mla	r3, r2, r3, r1
   2a2f6:	3b30      	subs	r3, #48	; 0x30
   2a2f8:	9343      	str	r3, [sp, #268]	; 0x10c
   2a2fa:	e7d3      	b.n	2a2a4 <__ssvfiscanf_r+0x94>
   2a2fc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2a300:	2a20      	cmp	r2, #32
   2a302:	d8ef      	bhi.n	2a2e4 <__ssvfiscanf_r+0xd4>
   2a304:	a101      	add	r1, pc, #4	; (adr r1, 2a30c <__ssvfiscanf_r+0xfc>)
   2a306:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2a30a:	bf00      	nop
   2a30c:	0002a3df 	.word	0x0002a3df
   2a310:	0002a2e5 	.word	0x0002a2e5
   2a314:	0002a2e5 	.word	0x0002a2e5
   2a318:	0002a43d 	.word	0x0002a43d
   2a31c:	0002a2e5 	.word	0x0002a2e5
   2a320:	0002a2e5 	.word	0x0002a2e5
   2a324:	0002a2e5 	.word	0x0002a2e5
   2a328:	0002a2e5 	.word	0x0002a2e5
   2a32c:	0002a2e5 	.word	0x0002a2e5
   2a330:	0002a2e5 	.word	0x0002a2e5
   2a334:	0002a2e5 	.word	0x0002a2e5
   2a338:	0002a453 	.word	0x0002a453
   2a33c:	0002a429 	.word	0x0002a429
   2a340:	0002a397 	.word	0x0002a397
   2a344:	0002a397 	.word	0x0002a397
   2a348:	0002a397 	.word	0x0002a397
   2a34c:	0002a2e5 	.word	0x0002a2e5
   2a350:	0002a42d 	.word	0x0002a42d
   2a354:	0002a2e5 	.word	0x0002a2e5
   2a358:	0002a2e5 	.word	0x0002a2e5
   2a35c:	0002a2e5 	.word	0x0002a2e5
   2a360:	0002a2e5 	.word	0x0002a2e5
   2a364:	0002a463 	.word	0x0002a463
   2a368:	0002a435 	.word	0x0002a435
   2a36c:	0002a3d7 	.word	0x0002a3d7
   2a370:	0002a2e5 	.word	0x0002a2e5
   2a374:	0002a2e5 	.word	0x0002a2e5
   2a378:	0002a45f 	.word	0x0002a45f
   2a37c:	0002a2e5 	.word	0x0002a2e5
   2a380:	0002a429 	.word	0x0002a429
   2a384:	0002a2e5 	.word	0x0002a2e5
   2a388:	0002a2e5 	.word	0x0002a2e5
   2a38c:	0002a3df 	.word	0x0002a3df
   2a390:	3b45      	subs	r3, #69	; 0x45
   2a392:	2b02      	cmp	r3, #2
   2a394:	d8a6      	bhi.n	2a2e4 <__ssvfiscanf_r+0xd4>
   2a396:	2305      	movs	r3, #5
   2a398:	e02b      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a39a:	6863      	ldr	r3, [r4, #4]
   2a39c:	2b00      	cmp	r3, #0
   2a39e:	dd0d      	ble.n	2a3bc <__ssvfiscanf_r+0x1ac>
   2a3a0:	6823      	ldr	r3, [r4, #0]
   2a3a2:	781a      	ldrb	r2, [r3, #0]
   2a3a4:	4552      	cmp	r2, sl
   2a3a6:	f040 80a2 	bne.w	2a4ee <__ssvfiscanf_r+0x2de>
   2a3aa:	3301      	adds	r3, #1
   2a3ac:	6862      	ldr	r2, [r4, #4]
   2a3ae:	6023      	str	r3, [r4, #0]
   2a3b0:	3a01      	subs	r2, #1
   2a3b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2a3b4:	6062      	str	r2, [r4, #4]
   2a3b6:	3301      	adds	r3, #1
   2a3b8:	9345      	str	r3, [sp, #276]	; 0x114
   2a3ba:	e752      	b.n	2a262 <__ssvfiscanf_r+0x52>
   2a3bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2a3be:	4621      	mov	r1, r4
   2a3c0:	4630      	mov	r0, r6
   2a3c2:	4798      	blx	r3
   2a3c4:	2800      	cmp	r0, #0
   2a3c6:	d0eb      	beq.n	2a3a0 <__ssvfiscanf_r+0x190>
   2a3c8:	9844      	ldr	r0, [sp, #272]	; 0x110
   2a3ca:	2800      	cmp	r0, #0
   2a3cc:	f040 8085 	bne.w	2a4da <__ssvfiscanf_r+0x2ca>
   2a3d0:	f04f 30ff 	mov.w	r0, #4294967295
   2a3d4:	e087      	b.n	2a4e6 <__ssvfiscanf_r+0x2d6>
   2a3d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2a3d8:	f042 0220 	orr.w	r2, r2, #32
   2a3dc:	9241      	str	r2, [sp, #260]	; 0x104
   2a3de:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2a3e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2a3e4:	9241      	str	r2, [sp, #260]	; 0x104
   2a3e6:	2210      	movs	r2, #16
   2a3e8:	2b6f      	cmp	r3, #111	; 0x6f
   2a3ea:	9242      	str	r2, [sp, #264]	; 0x108
   2a3ec:	bf34      	ite	cc
   2a3ee:	2303      	movcc	r3, #3
   2a3f0:	2304      	movcs	r3, #4
   2a3f2:	9347      	str	r3, [sp, #284]	; 0x11c
   2a3f4:	6863      	ldr	r3, [r4, #4]
   2a3f6:	2b00      	cmp	r3, #0
   2a3f8:	dd42      	ble.n	2a480 <__ssvfiscanf_r+0x270>
   2a3fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2a3fc:	0659      	lsls	r1, r3, #25
   2a3fe:	d404      	bmi.n	2a40a <__ssvfiscanf_r+0x1fa>
   2a400:	6823      	ldr	r3, [r4, #0]
   2a402:	781a      	ldrb	r2, [r3, #0]
   2a404:	5cba      	ldrb	r2, [r7, r2]
   2a406:	0712      	lsls	r2, r2, #28
   2a408:	d441      	bmi.n	2a48e <__ssvfiscanf_r+0x27e>
   2a40a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2a40c:	2b02      	cmp	r3, #2
   2a40e:	dc50      	bgt.n	2a4b2 <__ssvfiscanf_r+0x2a2>
   2a410:	466b      	mov	r3, sp
   2a412:	4622      	mov	r2, r4
   2a414:	a941      	add	r1, sp, #260	; 0x104
   2a416:	4630      	mov	r0, r6
   2a418:	f000 f876 	bl	2a508 <_scanf_chars>
   2a41c:	2801      	cmp	r0, #1
   2a41e:	d066      	beq.n	2a4ee <__ssvfiscanf_r+0x2de>
   2a420:	2802      	cmp	r0, #2
   2a422:	f47f af1e 	bne.w	2a262 <__ssvfiscanf_r+0x52>
   2a426:	e7cf      	b.n	2a3c8 <__ssvfiscanf_r+0x1b8>
   2a428:	220a      	movs	r2, #10
   2a42a:	e7dd      	b.n	2a3e8 <__ssvfiscanf_r+0x1d8>
   2a42c:	2300      	movs	r3, #0
   2a42e:	9342      	str	r3, [sp, #264]	; 0x108
   2a430:	2303      	movs	r3, #3
   2a432:	e7de      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a434:	2308      	movs	r3, #8
   2a436:	9342      	str	r3, [sp, #264]	; 0x108
   2a438:	2304      	movs	r3, #4
   2a43a:	e7da      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a43c:	4629      	mov	r1, r5
   2a43e:	4640      	mov	r0, r8
   2a440:	f003 f995 	bl	2d76e <__sccl>
   2a444:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2a446:	4605      	mov	r5, r0
   2a448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a44c:	9341      	str	r3, [sp, #260]	; 0x104
   2a44e:	2301      	movs	r3, #1
   2a450:	e7cf      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a452:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2a454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a458:	9341      	str	r3, [sp, #260]	; 0x104
   2a45a:	2300      	movs	r3, #0
   2a45c:	e7c9      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a45e:	2302      	movs	r3, #2
   2a460:	e7c7      	b.n	2a3f2 <__ssvfiscanf_r+0x1e2>
   2a462:	9841      	ldr	r0, [sp, #260]	; 0x104
   2a464:	06c3      	lsls	r3, r0, #27
   2a466:	f53f aefc 	bmi.w	2a262 <__ssvfiscanf_r+0x52>
   2a46a:	9b00      	ldr	r3, [sp, #0]
   2a46c:	07c0      	lsls	r0, r0, #31
   2a46e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2a470:	f103 0104 	add.w	r1, r3, #4
   2a474:	9100      	str	r1, [sp, #0]
   2a476:	681b      	ldr	r3, [r3, #0]
   2a478:	bf4c      	ite	mi
   2a47a:	801a      	strhmi	r2, [r3, #0]
   2a47c:	601a      	strpl	r2, [r3, #0]
   2a47e:	e6f0      	b.n	2a262 <__ssvfiscanf_r+0x52>
   2a480:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2a482:	4621      	mov	r1, r4
   2a484:	4630      	mov	r0, r6
   2a486:	4798      	blx	r3
   2a488:	2800      	cmp	r0, #0
   2a48a:	d0b6      	beq.n	2a3fa <__ssvfiscanf_r+0x1ea>
   2a48c:	e79c      	b.n	2a3c8 <__ssvfiscanf_r+0x1b8>
   2a48e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2a490:	3201      	adds	r2, #1
   2a492:	9245      	str	r2, [sp, #276]	; 0x114
   2a494:	6862      	ldr	r2, [r4, #4]
   2a496:	3a01      	subs	r2, #1
   2a498:	2a00      	cmp	r2, #0
   2a49a:	6062      	str	r2, [r4, #4]
   2a49c:	dd02      	ble.n	2a4a4 <__ssvfiscanf_r+0x294>
   2a49e:	3301      	adds	r3, #1
   2a4a0:	6023      	str	r3, [r4, #0]
   2a4a2:	e7ad      	b.n	2a400 <__ssvfiscanf_r+0x1f0>
   2a4a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2a4a6:	4621      	mov	r1, r4
   2a4a8:	4630      	mov	r0, r6
   2a4aa:	4798      	blx	r3
   2a4ac:	2800      	cmp	r0, #0
   2a4ae:	d0a7      	beq.n	2a400 <__ssvfiscanf_r+0x1f0>
   2a4b0:	e78a      	b.n	2a3c8 <__ssvfiscanf_r+0x1b8>
   2a4b2:	2b04      	cmp	r3, #4
   2a4b4:	dc06      	bgt.n	2a4c4 <__ssvfiscanf_r+0x2b4>
   2a4b6:	466b      	mov	r3, sp
   2a4b8:	4622      	mov	r2, r4
   2a4ba:	a941      	add	r1, sp, #260	; 0x104
   2a4bc:	4630      	mov	r0, r6
   2a4be:	f000 f87b 	bl	2a5b8 <_scanf_i>
   2a4c2:	e7ab      	b.n	2a41c <__ssvfiscanf_r+0x20c>
   2a4c4:	4b0f      	ldr	r3, [pc, #60]	; (2a504 <__ssvfiscanf_r+0x2f4>)
   2a4c6:	2b00      	cmp	r3, #0
   2a4c8:	f43f aecb 	beq.w	2a262 <__ssvfiscanf_r+0x52>
   2a4cc:	466b      	mov	r3, sp
   2a4ce:	4622      	mov	r2, r4
   2a4d0:	a941      	add	r1, sp, #260	; 0x104
   2a4d2:	4630      	mov	r0, r6
   2a4d4:	e000      	b.n	2a4d8 <__ssvfiscanf_r+0x2c8>
   2a4d6:	bf00      	nop
   2a4d8:	e7a0      	b.n	2a41c <__ssvfiscanf_r+0x20c>
   2a4da:	89a3      	ldrh	r3, [r4, #12]
   2a4dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2a4e0:	bf18      	it	ne
   2a4e2:	f04f 30ff 	movne.w	r0, #4294967295
   2a4e6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   2a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4ee:	9844      	ldr	r0, [sp, #272]	; 0x110
   2a4f0:	e7f9      	b.n	2a4e6 <__ssvfiscanf_r+0x2d6>
   2a4f2:	bf00      	nop
   2a4f4:	00030d52 	.word	0x00030d52
   2a4f8:	0002d6bb 	.word	0x0002d6bb
   2a4fc:	0002d735 	.word	0x0002d735
   2a500:	00030ed3 	.word	0x00030ed3
   2a504:	00000000 	.word	0x00000000

0002a508 <_scanf_chars>:
   2a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a50c:	4615      	mov	r5, r2
   2a50e:	688a      	ldr	r2, [r1, #8]
   2a510:	4680      	mov	r8, r0
   2a512:	460c      	mov	r4, r1
   2a514:	b932      	cbnz	r2, 2a524 <_scanf_chars+0x1c>
   2a516:	698a      	ldr	r2, [r1, #24]
   2a518:	2a00      	cmp	r2, #0
   2a51a:	bf0c      	ite	eq
   2a51c:	2201      	moveq	r2, #1
   2a51e:	f04f 32ff 	movne.w	r2, #4294967295
   2a522:	608a      	str	r2, [r1, #8]
   2a524:	6822      	ldr	r2, [r4, #0]
   2a526:	2700      	movs	r7, #0
   2a528:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2a5b4 <_scanf_chars+0xac>
   2a52c:	06d1      	lsls	r1, r2, #27
   2a52e:	bf5f      	itttt	pl
   2a530:	681a      	ldrpl	r2, [r3, #0]
   2a532:	1d11      	addpl	r1, r2, #4
   2a534:	6019      	strpl	r1, [r3, #0]
   2a536:	6816      	ldrpl	r6, [r2, #0]
   2a538:	69a0      	ldr	r0, [r4, #24]
   2a53a:	b188      	cbz	r0, 2a560 <_scanf_chars+0x58>
   2a53c:	2801      	cmp	r0, #1
   2a53e:	d107      	bne.n	2a550 <_scanf_chars+0x48>
   2a540:	682b      	ldr	r3, [r5, #0]
   2a542:	781a      	ldrb	r2, [r3, #0]
   2a544:	6963      	ldr	r3, [r4, #20]
   2a546:	5c9b      	ldrb	r3, [r3, r2]
   2a548:	b953      	cbnz	r3, 2a560 <_scanf_chars+0x58>
   2a54a:	bb27      	cbnz	r7, 2a596 <_scanf_chars+0x8e>
   2a54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a550:	2802      	cmp	r0, #2
   2a552:	d120      	bne.n	2a596 <_scanf_chars+0x8e>
   2a554:	682b      	ldr	r3, [r5, #0]
   2a556:	781b      	ldrb	r3, [r3, #0]
   2a558:	f813 3009 	ldrb.w	r3, [r3, r9]
   2a55c:	071b      	lsls	r3, r3, #28
   2a55e:	d41a      	bmi.n	2a596 <_scanf_chars+0x8e>
   2a560:	6823      	ldr	r3, [r4, #0]
   2a562:	3701      	adds	r7, #1
   2a564:	06da      	lsls	r2, r3, #27
   2a566:	bf5e      	ittt	pl
   2a568:	682b      	ldrpl	r3, [r5, #0]
   2a56a:	781b      	ldrbpl	r3, [r3, #0]
   2a56c:	f806 3b01 	strbpl.w	r3, [r6], #1
   2a570:	682a      	ldr	r2, [r5, #0]
   2a572:	686b      	ldr	r3, [r5, #4]
   2a574:	3201      	adds	r2, #1
   2a576:	3b01      	subs	r3, #1
   2a578:	602a      	str	r2, [r5, #0]
   2a57a:	68a2      	ldr	r2, [r4, #8]
   2a57c:	606b      	str	r3, [r5, #4]
   2a57e:	3a01      	subs	r2, #1
   2a580:	60a2      	str	r2, [r4, #8]
   2a582:	b142      	cbz	r2, 2a596 <_scanf_chars+0x8e>
   2a584:	2b00      	cmp	r3, #0
   2a586:	dcd7      	bgt.n	2a538 <_scanf_chars+0x30>
   2a588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2a58c:	4629      	mov	r1, r5
   2a58e:	4640      	mov	r0, r8
   2a590:	4798      	blx	r3
   2a592:	2800      	cmp	r0, #0
   2a594:	d0d0      	beq.n	2a538 <_scanf_chars+0x30>
   2a596:	6823      	ldr	r3, [r4, #0]
   2a598:	f013 0310 	ands.w	r3, r3, #16
   2a59c:	d105      	bne.n	2a5aa <_scanf_chars+0xa2>
   2a59e:	68e2      	ldr	r2, [r4, #12]
   2a5a0:	3201      	adds	r2, #1
   2a5a2:	60e2      	str	r2, [r4, #12]
   2a5a4:	69a2      	ldr	r2, [r4, #24]
   2a5a6:	b102      	cbz	r2, 2a5aa <_scanf_chars+0xa2>
   2a5a8:	7033      	strb	r3, [r6, #0]
   2a5aa:	6923      	ldr	r3, [r4, #16]
   2a5ac:	2000      	movs	r0, #0
   2a5ae:	441f      	add	r7, r3
   2a5b0:	6127      	str	r7, [r4, #16]
   2a5b2:	e7cb      	b.n	2a54c <_scanf_chars+0x44>
   2a5b4:	00030d52 	.word	0x00030d52

0002a5b8 <_scanf_i>:
   2a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5bc:	4698      	mov	r8, r3
   2a5be:	b087      	sub	sp, #28
   2a5c0:	4b72      	ldr	r3, [pc, #456]	; (2a78c <_scanf_i+0x1d4>)
   2a5c2:	460c      	mov	r4, r1
   2a5c4:	4682      	mov	sl, r0
   2a5c6:	4616      	mov	r6, r2
   2a5c8:	4627      	mov	r7, r4
   2a5ca:	f04f 0b00 	mov.w	fp, #0
   2a5ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2a5d2:	ab03      	add	r3, sp, #12
   2a5d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2a5d8:	4b6d      	ldr	r3, [pc, #436]	; (2a790 <_scanf_i+0x1d8>)
   2a5da:	69a1      	ldr	r1, [r4, #24]
   2a5dc:	4a6d      	ldr	r2, [pc, #436]	; (2a794 <_scanf_i+0x1dc>)
   2a5de:	2903      	cmp	r1, #3
   2a5e0:	bf18      	it	ne
   2a5e2:	461a      	movne	r2, r3
   2a5e4:	68a3      	ldr	r3, [r4, #8]
   2a5e6:	9201      	str	r2, [sp, #4]
   2a5e8:	1e5a      	subs	r2, r3, #1
   2a5ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2a5ee:	bf89      	itett	hi
   2a5f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2a5f4:	f04f 0900 	movls.w	r9, #0
   2a5f8:	eb03 0905 	addhi.w	r9, r3, r5
   2a5fc:	f240 135d 	movwhi	r3, #349	; 0x15d
   2a600:	bf88      	it	hi
   2a602:	60a3      	strhi	r3, [r4, #8]
   2a604:	f857 3b1c 	ldr.w	r3, [r7], #28
   2a608:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2a60c:	463d      	mov	r5, r7
   2a60e:	6023      	str	r3, [r4, #0]
   2a610:	6831      	ldr	r1, [r6, #0]
   2a612:	ab03      	add	r3, sp, #12
   2a614:	2202      	movs	r2, #2
   2a616:	7809      	ldrb	r1, [r1, #0]
   2a618:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2a61c:	f002 fabd 	bl	2cb9a <memchr>
   2a620:	b328      	cbz	r0, 2a66e <_scanf_i+0xb6>
   2a622:	f1bb 0f01 	cmp.w	fp, #1
   2a626:	d159      	bne.n	2a6dc <_scanf_i+0x124>
   2a628:	6862      	ldr	r2, [r4, #4]
   2a62a:	b92a      	cbnz	r2, 2a638 <_scanf_i+0x80>
   2a62c:	6822      	ldr	r2, [r4, #0]
   2a62e:	2308      	movs	r3, #8
   2a630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2a634:	6063      	str	r3, [r4, #4]
   2a636:	6022      	str	r2, [r4, #0]
   2a638:	6822      	ldr	r2, [r4, #0]
   2a63a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2a63e:	6022      	str	r2, [r4, #0]
   2a640:	68a2      	ldr	r2, [r4, #8]
   2a642:	1e51      	subs	r1, r2, #1
   2a644:	60a1      	str	r1, [r4, #8]
   2a646:	b192      	cbz	r2, 2a66e <_scanf_i+0xb6>
   2a648:	6832      	ldr	r2, [r6, #0]
   2a64a:	1c51      	adds	r1, r2, #1
   2a64c:	6031      	str	r1, [r6, #0]
   2a64e:	7812      	ldrb	r2, [r2, #0]
   2a650:	f805 2b01 	strb.w	r2, [r5], #1
   2a654:	6872      	ldr	r2, [r6, #4]
   2a656:	3a01      	subs	r2, #1
   2a658:	2a00      	cmp	r2, #0
   2a65a:	6072      	str	r2, [r6, #4]
   2a65c:	dc07      	bgt.n	2a66e <_scanf_i+0xb6>
   2a65e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2a662:	4631      	mov	r1, r6
   2a664:	4650      	mov	r0, sl
   2a666:	4790      	blx	r2
   2a668:	2800      	cmp	r0, #0
   2a66a:	f040 8085 	bne.w	2a778 <_scanf_i+0x1c0>
   2a66e:	f10b 0b01 	add.w	fp, fp, #1
   2a672:	f1bb 0f03 	cmp.w	fp, #3
   2a676:	d1cb      	bne.n	2a610 <_scanf_i+0x58>
   2a678:	6863      	ldr	r3, [r4, #4]
   2a67a:	b90b      	cbnz	r3, 2a680 <_scanf_i+0xc8>
   2a67c:	230a      	movs	r3, #10
   2a67e:	6063      	str	r3, [r4, #4]
   2a680:	6863      	ldr	r3, [r4, #4]
   2a682:	f04f 0b00 	mov.w	fp, #0
   2a686:	4944      	ldr	r1, [pc, #272]	; (2a798 <_scanf_i+0x1e0>)
   2a688:	6960      	ldr	r0, [r4, #20]
   2a68a:	1ac9      	subs	r1, r1, r3
   2a68c:	f003 f86f 	bl	2d76e <__sccl>
   2a690:	68a3      	ldr	r3, [r4, #8]
   2a692:	6822      	ldr	r2, [r4, #0]
   2a694:	2b00      	cmp	r3, #0
   2a696:	d03d      	beq.n	2a714 <_scanf_i+0x15c>
   2a698:	6831      	ldr	r1, [r6, #0]
   2a69a:	6960      	ldr	r0, [r4, #20]
   2a69c:	f891 c000 	ldrb.w	ip, [r1]
   2a6a0:	f810 000c 	ldrb.w	r0, [r0, ip]
   2a6a4:	2800      	cmp	r0, #0
   2a6a6:	d035      	beq.n	2a714 <_scanf_i+0x15c>
   2a6a8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2a6ac:	d124      	bne.n	2a6f8 <_scanf_i+0x140>
   2a6ae:	0510      	lsls	r0, r2, #20
   2a6b0:	d522      	bpl.n	2a6f8 <_scanf_i+0x140>
   2a6b2:	f10b 0b01 	add.w	fp, fp, #1
   2a6b6:	f1b9 0f00 	cmp.w	r9, #0
   2a6ba:	d003      	beq.n	2a6c4 <_scanf_i+0x10c>
   2a6bc:	3301      	adds	r3, #1
   2a6be:	f109 39ff 	add.w	r9, r9, #4294967295
   2a6c2:	60a3      	str	r3, [r4, #8]
   2a6c4:	6873      	ldr	r3, [r6, #4]
   2a6c6:	3b01      	subs	r3, #1
   2a6c8:	2b00      	cmp	r3, #0
   2a6ca:	6073      	str	r3, [r6, #4]
   2a6cc:	dd1b      	ble.n	2a706 <_scanf_i+0x14e>
   2a6ce:	6833      	ldr	r3, [r6, #0]
   2a6d0:	3301      	adds	r3, #1
   2a6d2:	6033      	str	r3, [r6, #0]
   2a6d4:	68a3      	ldr	r3, [r4, #8]
   2a6d6:	3b01      	subs	r3, #1
   2a6d8:	60a3      	str	r3, [r4, #8]
   2a6da:	e7d9      	b.n	2a690 <_scanf_i+0xd8>
   2a6dc:	f1bb 0f02 	cmp.w	fp, #2
   2a6e0:	d1ae      	bne.n	2a640 <_scanf_i+0x88>
   2a6e2:	6822      	ldr	r2, [r4, #0]
   2a6e4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2a6e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2a6ec:	d1bf      	bne.n	2a66e <_scanf_i+0xb6>
   2a6ee:	2310      	movs	r3, #16
   2a6f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2a6f4:	6063      	str	r3, [r4, #4]
   2a6f6:	e7a2      	b.n	2a63e <_scanf_i+0x86>
   2a6f8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2a6fc:	6022      	str	r2, [r4, #0]
   2a6fe:	780b      	ldrb	r3, [r1, #0]
   2a700:	f805 3b01 	strb.w	r3, [r5], #1
   2a704:	e7de      	b.n	2a6c4 <_scanf_i+0x10c>
   2a706:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2a70a:	4631      	mov	r1, r6
   2a70c:	4650      	mov	r0, sl
   2a70e:	4798      	blx	r3
   2a710:	2800      	cmp	r0, #0
   2a712:	d0df      	beq.n	2a6d4 <_scanf_i+0x11c>
   2a714:	6823      	ldr	r3, [r4, #0]
   2a716:	05d9      	lsls	r1, r3, #23
   2a718:	d50d      	bpl.n	2a736 <_scanf_i+0x17e>
   2a71a:	42bd      	cmp	r5, r7
   2a71c:	d909      	bls.n	2a732 <_scanf_i+0x17a>
   2a71e:	f105 39ff 	add.w	r9, r5, #4294967295
   2a722:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2a726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2a72a:	4632      	mov	r2, r6
   2a72c:	464d      	mov	r5, r9
   2a72e:	4650      	mov	r0, sl
   2a730:	4798      	blx	r3
   2a732:	42bd      	cmp	r5, r7
   2a734:	d028      	beq.n	2a788 <_scanf_i+0x1d0>
   2a736:	6822      	ldr	r2, [r4, #0]
   2a738:	f012 0210 	ands.w	r2, r2, #16
   2a73c:	d113      	bne.n	2a766 <_scanf_i+0x1ae>
   2a73e:	702a      	strb	r2, [r5, #0]
   2a740:	4639      	mov	r1, r7
   2a742:	6863      	ldr	r3, [r4, #4]
   2a744:	4650      	mov	r0, sl
   2a746:	9e01      	ldr	r6, [sp, #4]
   2a748:	47b0      	blx	r6
   2a74a:	f8d8 3000 	ldr.w	r3, [r8]
   2a74e:	6821      	ldr	r1, [r4, #0]
   2a750:	1d1a      	adds	r2, r3, #4
   2a752:	f011 0f20 	tst.w	r1, #32
   2a756:	f8c8 2000 	str.w	r2, [r8]
   2a75a:	681b      	ldr	r3, [r3, #0]
   2a75c:	d00f      	beq.n	2a77e <_scanf_i+0x1c6>
   2a75e:	6018      	str	r0, [r3, #0]
   2a760:	68e3      	ldr	r3, [r4, #12]
   2a762:	3301      	adds	r3, #1
   2a764:	60e3      	str	r3, [r4, #12]
   2a766:	1bed      	subs	r5, r5, r7
   2a768:	2000      	movs	r0, #0
   2a76a:	44ab      	add	fp, r5
   2a76c:	6925      	ldr	r5, [r4, #16]
   2a76e:	445d      	add	r5, fp
   2a770:	6125      	str	r5, [r4, #16]
   2a772:	b007      	add	sp, #28
   2a774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a778:	f04f 0b00 	mov.w	fp, #0
   2a77c:	e7ca      	b.n	2a714 <_scanf_i+0x15c>
   2a77e:	07ca      	lsls	r2, r1, #31
   2a780:	bf4c      	ite	mi
   2a782:	8018      	strhmi	r0, [r3, #0]
   2a784:	6018      	strpl	r0, [r3, #0]
   2a786:	e7eb      	b.n	2a760 <_scanf_i+0x1a8>
   2a788:	2001      	movs	r0, #1
   2a78a:	e7f2      	b.n	2a772 <_scanf_i+0x1ba>
   2a78c:	0002dd38 	.word	0x0002dd38
   2a790:	0002cedd 	.word	0x0002cedd
   2a794:	0002ced9 	.word	0x0002ced9
   2a798:	00030ef7 	.word	0x00030ef7

0002a79c <__env_lock>:
   2a79c:	4801      	ldr	r0, [pc, #4]	; (2a7a4 <__env_lock+0x8>)
   2a79e:	f7f2 bad3 	b.w	1cd48 <__retarget_lock_acquire_recursive>
   2a7a2:	bf00      	nop
   2a7a4:	2000c998 	.word	0x2000c998

0002a7a8 <__env_unlock>:
   2a7a8:	4801      	ldr	r0, [pc, #4]	; (2a7b0 <__env_unlock+0x8>)
   2a7aa:	f7f2 bb01 	b.w	1cdb0 <__retarget_lock_release_recursive>
   2a7ae:	bf00      	nop
   2a7b0:	2000c998 	.word	0x2000c998

0002a7b4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2a7b4:	4770      	bx	lr

0002a7b6 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2a7b6:	b40c      	push	{r2, r3}
   2a7b8:	4603      	mov	r3, r0
   2a7ba:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2a7bc:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2a7be:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2a7c0:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   2a7c2:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   2a7c6:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2a7c8:	4798      	blx	r3
	va_end(args);

	return res;
}
   2a7ca:	b003      	add	sp, #12
   2a7cc:	f85d eb04 	ldr.w	lr, [sp], #4
   2a7d0:	b002      	add	sp, #8
   2a7d2:	4770      	bx	lr

0002a7d4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a7d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a7d8:	b2db      	uxtb	r3, r3
   2a7da:	2b09      	cmp	r3, #9
   2a7dc:	d802      	bhi.n	2a7e4 <char2hex+0x10>
		*x = c - '0';
   2a7de:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a7e0:	2000      	movs	r0, #0
   2a7e2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a7e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a7e8:	2b05      	cmp	r3, #5
   2a7ea:	d802      	bhi.n	2a7f2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a7ec:	3857      	subs	r0, #87	; 0x57
   2a7ee:	7008      	strb	r0, [r1, #0]
   2a7f0:	e7f6      	b.n	2a7e0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2a7f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a7f6:	2b05      	cmp	r3, #5
   2a7f8:	d801      	bhi.n	2a7fe <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a7fa:	3837      	subs	r0, #55	; 0x37
   2a7fc:	e7f7      	b.n	2a7ee <char2hex+0x1a>
		return -EINVAL;
   2a7fe:	f06f 0015 	mvn.w	r0, #21
}
   2a802:	4770      	bx	lr

0002a804 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a806:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a808:	f001 0001 	and.w	r0, r1, #1
   2a80c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2a810:	429d      	cmp	r5, r3
   2a812:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2a816:	d903      	bls.n	2a820 <hex2bin+0x1c>
		return 0;
   2a818:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a81a:	4628      	mov	r0, r5
   2a81c:	b003      	add	sp, #12
   2a81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a820:	b158      	cbz	r0, 2a83a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a822:	7820      	ldrb	r0, [r4, #0]
   2a824:	f10d 0107 	add.w	r1, sp, #7
   2a828:	f7ff ffd4 	bl	2a7d4 <char2hex>
   2a82c:	2800      	cmp	r0, #0
   2a82e:	dbf3      	blt.n	2a818 <hex2bin+0x14>
		buf[0] = dec;
   2a830:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2a834:	3401      	adds	r4, #1
		buf[0] = dec;
   2a836:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a83a:	3401      	adds	r4, #1
   2a83c:	4416      	add	r6, r2
   2a83e:	42b2      	cmp	r2, r6
   2a840:	d0eb      	beq.n	2a81a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a842:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2a846:	f10d 0107 	add.w	r1, sp, #7
   2a84a:	f7ff ffc3 	bl	2a7d4 <char2hex>
   2a84e:	2800      	cmp	r0, #0
   2a850:	dbe2      	blt.n	2a818 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a852:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a856:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   2a85a:	011b      	lsls	r3, r3, #4
   2a85c:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a85e:	f814 0b02 	ldrb.w	r0, [r4], #2
   2a862:	f7ff ffb7 	bl	2a7d4 <char2hex>
   2a866:	2800      	cmp	r0, #0
   2a868:	dbd6      	blt.n	2a818 <hex2bin+0x14>
		buf[i] += dec;
   2a86a:	7813      	ldrb	r3, [r2, #0]
   2a86c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2a870:	440b      	add	r3, r1
   2a872:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a876:	e7e2      	b.n	2a83e <hex2bin+0x3a>

0002a878 <sys_notify_validate>:
	if (notify == NULL) {
   2a878:	4603      	mov	r3, r0
   2a87a:	b140      	cbz	r0, 2a88e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a87c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a87e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2a882:	2a02      	cmp	r2, #2
   2a884:	d006      	beq.n	2a894 <sys_notify_validate+0x1c>
   2a886:	2a03      	cmp	r2, #3
   2a888:	d004      	beq.n	2a894 <sys_notify_validate+0x1c>
   2a88a:	2a01      	cmp	r2, #1
   2a88c:	d005      	beq.n	2a89a <sys_notify_validate+0x22>
		return -EINVAL;
   2a88e:	f06f 0015 	mvn.w	r0, #21
}
   2a892:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a894:	681a      	ldr	r2, [r3, #0]
   2a896:	2a00      	cmp	r2, #0
   2a898:	d0f9      	beq.n	2a88e <sys_notify_validate+0x16>
		notify->result = 0;
   2a89a:	2000      	movs	r0, #0
   2a89c:	6098      	str	r0, [r3, #8]
   2a89e:	4770      	bx	lr

0002a8a0 <arch_printk_char_out>:
}
   2a8a0:	2000      	movs	r0, #0
   2a8a2:	4770      	bx	lr

0002a8a4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   2a8a4:	b40f      	push	{r0, r1, r2, r3}
   2a8a6:	b507      	push	{r0, r1, r2, lr}
   2a8a8:	a904      	add	r1, sp, #16
   2a8aa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a8ae:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   2a8b0:	f7f0 f87c 	bl	1a9ac <vprintk>
	}
	va_end(ap);
}
   2a8b4:	b003      	add	sp, #12
   2a8b6:	f85d eb04 	ldr.w	lr, [sp], #4
   2a8ba:	b004      	add	sp, #16
   2a8bc:	4770      	bx	lr

0002a8be <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a8be:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2a8c0:	f013 0307 	ands.w	r3, r3, #7
   2a8c4:	d105      	bne.n	2a8d2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a8c6:	6803      	ldr	r3, [r0, #0]
   2a8c8:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2a8ca:	bf0c      	ite	eq
   2a8cc:	2000      	moveq	r0, #0
   2a8ce:	2003      	movne	r0, #3
   2a8d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a8d2:	2b02      	cmp	r3, #2
   2a8d4:	d105      	bne.n	2a8e2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a8d6:	8bc3      	ldrh	r3, [r0, #30]
   2a8d8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2a8da:	bf14      	ite	ne
   2a8dc:	2000      	movne	r0, #0
   2a8de:	2004      	moveq	r0, #4
   2a8e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a8e2:	2b01      	cmp	r3, #1
   2a8e4:	d105      	bne.n	2a8f2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a8e6:	6803      	ldr	r3, [r0, #0]
   2a8e8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2a8ea:	bf0c      	ite	eq
   2a8ec:	2000      	moveq	r0, #0
   2a8ee:	2005      	movne	r0, #5
   2a8f0:	4770      	bx	lr
	int evt = EVT_NOP;
   2a8f2:	2000      	movs	r0, #0
}
   2a8f4:	4770      	bx	lr

0002a8f6 <notify_one>:
{
   2a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8fa:	460d      	mov	r5, r1
   2a8fc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a8fe:	4619      	mov	r1, r3
   2a900:	1d28      	adds	r0, r5, #4
{
   2a902:	4690      	mov	r8, r2
   2a904:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a906:	f7f0 f817 	bl	1a938 <sys_notify_finalize>
	if (cb) {
   2a90a:	4604      	mov	r4, r0
   2a90c:	b138      	cbz	r0, 2a91e <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a90e:	4633      	mov	r3, r6
   2a910:	4642      	mov	r2, r8
   2a912:	4629      	mov	r1, r5
   2a914:	4638      	mov	r0, r7
   2a916:	46a4      	mov	ip, r4
}
   2a918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a91c:	4760      	bx	ip
}
   2a91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a922 <validate_args>:
{
   2a922:	b510      	push	{r4, lr}
   2a924:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a926:	b140      	cbz	r0, 2a93a <validate_args+0x18>
   2a928:	b139      	cbz	r1, 2a93a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2a92a:	1d08      	adds	r0, r1, #4
   2a92c:	f7ff ffa4 	bl	2a878 <sys_notify_validate>
	if ((rv == 0)
   2a930:	b928      	cbnz	r0, 2a93e <validate_args+0x1c>
	    && ((cli->notify.flags
   2a932:	68a3      	ldr	r3, [r4, #8]
   2a934:	f033 0303 	bics.w	r3, r3, #3
   2a938:	d001      	beq.n	2a93e <validate_args+0x1c>
		rv = -EINVAL;
   2a93a:	f06f 0015 	mvn.w	r0, #21
}
   2a93e:	bd10      	pop	{r4, pc}

0002a940 <onoff_manager_init>:
{
   2a940:	b538      	push	{r3, r4, r5, lr}
   2a942:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a944:	4605      	mov	r5, r0
   2a946:	b158      	cbz	r0, 2a960 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a948:	b151      	cbz	r1, 2a960 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a94a:	680b      	ldr	r3, [r1, #0]
   2a94c:	b143      	cbz	r3, 2a960 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a94e:	684b      	ldr	r3, [r1, #4]
   2a950:	b133      	cbz	r3, 2a960 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a952:	2220      	movs	r2, #32
   2a954:	2100      	movs	r1, #0
   2a956:	f002 f949 	bl	2cbec <memset>
	return 0;
   2a95a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a95c:	612c      	str	r4, [r5, #16]
}
   2a95e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a960:	f06f 0015 	mvn.w	r0, #21
   2a964:	e7fb      	b.n	2a95e <onoff_manager_init+0x1e>

0002a966 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a966:	4604      	mov	r4, r0
   2a968:	b508      	push	{r3, lr}
   2a96a:	4608      	mov	r0, r1
   2a96c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a96e:	461a      	mov	r2, r3
   2a970:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a972:	f7fd f92f 	bl	27bd4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a976:	f7f1 ff9b 	bl	1c8b0 <z_impl_k_thread_abort>

0002a97a <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2a97a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a97e:	8840      	ldrh	r0, [r0, #2]
}
   2a980:	0840      	lsrs	r0, r0, #1
   2a982:	4770      	bx	lr

0002a984 <free_list_add>:
{
   2a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a986:	4603      	mov	r3, r0
   2a988:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a98a:	f7ff fff6 	bl	2a97a <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a98e:	fab0 f080 	clz	r0, r0
   2a992:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a996:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a99a:	f8dc 6010 	ldr.w	r6, [ip, #16]
   2a99e:	00ca      	lsls	r2, r1, #3
   2a9a0:	1d17      	adds	r7, r2, #4
   2a9a2:	b28d      	uxth	r5, r1
   2a9a4:	3206      	adds	r2, #6
   2a9a6:	b956      	cbnz	r6, 2a9be <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a9a8:	2101      	movs	r1, #1
   2a9aa:	fa01 f000 	lsl.w	r0, r1, r0
   2a9ae:	68d9      	ldr	r1, [r3, #12]
   2a9b0:	4301      	orrs	r1, r0
   2a9b2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a9b4:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2a9b8:	53dd      	strh	r5, [r3, r7]
   2a9ba:	529d      	strh	r5, [r3, r2]
}
   2a9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a9be:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a9c0:	3104      	adds	r1, #4
   2a9c2:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a9c4:	53d8      	strh	r0, [r3, r7]
   2a9c6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a9ca:	529e      	strh	r6, [r3, r2]
   2a9cc:	80c5      	strh	r5, [r0, #6]
   2a9ce:	525d      	strh	r5, [r3, r1]
   2a9d0:	e7f4      	b.n	2a9bc <free_list_add+0x38>

0002a9d2 <free_list_remove_bidx>:
{
   2a9d2:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a9d4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a9d8:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a9da:	4299      	cmp	r1, r3
   2a9dc:	f102 0104 	add.w	r1, r2, #4
   2a9e0:	d10a      	bne.n	2a9f8 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a9e2:	2301      	movs	r3, #1
   2a9e4:	fa03 f202 	lsl.w	r2, r3, r2
   2a9e8:	68c3      	ldr	r3, [r0, #12]
   2a9ea:	ea23 0302 	bic.w	r3, r3, r2
   2a9ee:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a9f0:	2300      	movs	r3, #0
   2a9f2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a9f6:	bd10      	pop	{r4, pc}
   2a9f8:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a9fa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a9fe:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2aa02:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2aa06:	80cb      	strh	r3, [r1, #6]
   2aa08:	8082      	strh	r2, [r0, #4]
}
   2aa0a:	e7f4      	b.n	2a9f6 <free_list_remove_bidx+0x24>

0002aa0c <free_list_remove>:
{
   2aa0c:	b510      	push	{r4, lr}
   2aa0e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2aa10:	f7ff ffb3 	bl	2a97a <chunk_size>
}
   2aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return 31 - __builtin_clz(usable_sz);
   2aa18:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2aa1c:	4618      	mov	r0, r3
   2aa1e:	f1c2 021f 	rsb	r2, r2, #31
   2aa22:	f7ff bfd6 	b.w	2a9d2 <free_list_remove_bidx>

0002aa26 <alloc_chunk>:
{
   2aa26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aa2a:	fab1 f581 	clz	r5, r1
   2aa2e:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2aa32:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   2aa36:	693a      	ldr	r2, [r7, #16]
{
   2aa38:	4603      	mov	r3, r0
   2aa3a:	460e      	mov	r6, r1
	if (b->next) {
   2aa3c:	b1ca      	cbz	r2, 2aa72 <alloc_chunk+0x4c>
   2aa3e:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   2aa42:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2aa44:	4618      	mov	r0, r3
   2aa46:	4621      	mov	r1, r4
   2aa48:	f7ff ff97 	bl	2a97a <chunk_size>
   2aa4c:	42b0      	cmp	r0, r6
   2aa4e:	d307      	bcc.n	2aa60 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2aa50:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2aa52:	4621      	mov	r1, r4
   2aa54:	4618      	mov	r0, r3
   2aa56:	f7ff ffbc 	bl	2a9d2 <free_list_remove_bidx>
}
   2aa5a:	4620      	mov	r0, r4
   2aa5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2aa60:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2aa64:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   2aa66:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   2aa6a:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   2aa6c:	d001      	beq.n	2aa72 <alloc_chunk+0x4c>
   2aa6e:	428a      	cmp	r2, r1
   2aa70:	d1e7      	bne.n	2aa42 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2aa72:	f04f 34ff 	mov.w	r4, #4294967295
   2aa76:	68d9      	ldr	r1, [r3, #12]
   2aa78:	f1c5 0520 	rsb	r5, r5, #32
   2aa7c:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   2aa7e:	400c      	ands	r4, r1
   2aa80:	d0eb      	beq.n	2aa5a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2aa82:	fa94 f2a4 	rbit	r2, r4
   2aa86:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2aa8a:	1d11      	adds	r1, r2, #4
   2aa8c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   2aa90:	e7df      	b.n	2aa52 <alloc_chunk+0x2c>

0002aa92 <merge_chunks>:
{
   2aa92:	b538      	push	{r3, r4, r5, lr}
   2aa94:	4603      	mov	r3, r0
   2aa96:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2aa98:	f7ff ff6f 	bl	2a97a <chunk_size>
   2aa9c:	4611      	mov	r1, r2
   2aa9e:	4604      	mov	r4, r0
   2aaa0:	4618      	mov	r0, r3
   2aaa2:	f7ff ff6a 	bl	2a97a <chunk_size>
   2aaa6:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   2aaa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aaac:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   2aaae:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   2aab0:	4618      	mov	r0, r3
   2aab2:	4611      	mov	r1, r2
   2aab4:	f7ff ff61 	bl	2a97a <chunk_size>
	void *cmem = &buf[c];
   2aab8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2aaba:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   2aabe:	bd38      	pop	{r3, r4, r5, pc}

0002aac0 <split_chunks>:
{
   2aac0:	b538      	push	{r3, r4, r5, lr}
   2aac2:	4603      	mov	r3, r0
   2aac4:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   2aac6:	f7ff ff58 	bl	2a97a <chunk_size>
	chunksz_t lsz = rc - lc;
   2aaca:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2aacc:	1aa5      	subs	r5, r4, r2
   2aace:	4405      	add	r5, r0
   2aad0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aad4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2aad6:	8060      	strh	r0, [r4, #2]
   2aad8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2aadc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2aade:	8044      	strh	r4, [r0, #2]
   2aae0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2aae4:	4618      	mov	r0, r3
   2aae6:	4611      	mov	r1, r2
   2aae8:	f7ff ff47 	bl	2a97a <chunk_size>
	void *cmem = &buf[c];
   2aaec:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2aaee:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   2aaf2:	bd38      	pop	{r3, r4, r5, pc}

0002aaf4 <free_chunk>:
{
   2aaf4:	b538      	push	{r3, r4, r5, lr}
   2aaf6:	4605      	mov	r5, r0
   2aaf8:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   2aafa:	f7ff ff3e 	bl	2a97a <chunk_size>
   2aafe:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2ab00:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2ab04:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2ab06:	07da      	lsls	r2, r3, #31
   2ab08:	d40a      	bmi.n	2ab20 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2ab0a:	4628      	mov	r0, r5
   2ab0c:	f7ff ff7e 	bl	2aa0c <free_list_remove>
	return c + chunk_size(h, c);
   2ab10:	4621      	mov	r1, r4
   2ab12:	4628      	mov	r0, r5
   2ab14:	f7ff ff31 	bl	2a97a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2ab18:	1822      	adds	r2, r4, r0
   2ab1a:	4628      	mov	r0, r5
   2ab1c:	f7ff ffb9 	bl	2aa92 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2ab20:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2ab24:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2ab26:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2ab2a:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2ab2c:	07db      	lsls	r3, r3, #31
   2ab2e:	d40c      	bmi.n	2ab4a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2ab30:	4628      	mov	r0, r5
   2ab32:	f7ff ff6b 	bl	2aa0c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2ab36:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2ab3a:	4622      	mov	r2, r4
   2ab3c:	1a61      	subs	r1, r4, r1
   2ab3e:	4628      	mov	r0, r5
   2ab40:	f7ff ffa7 	bl	2aa92 <merge_chunks>
   2ab44:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2ab48:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2ab4a:	4621      	mov	r1, r4
   2ab4c:	4628      	mov	r0, r5
}
   2ab4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2ab52:	f7ff bf17 	b.w	2a984 <free_list_add>

0002ab56 <sys_heap_alloc>:
{
   2ab56:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2ab58:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ab5a:	b909      	cbnz	r1, 2ab60 <sys_heap_alloc+0xa>
		return NULL;
   2ab5c:	2000      	movs	r0, #0
}
   2ab5e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ab60:	68ab      	ldr	r3, [r5, #8]
   2ab62:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2ab66:	d9f9      	bls.n	2ab5c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2ab68:	310b      	adds	r1, #11
   2ab6a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2ab6c:	4621      	mov	r1, r4
   2ab6e:	4628      	mov	r0, r5
   2ab70:	f7ff ff59 	bl	2aa26 <alloc_chunk>
	if (c == 0U) {
   2ab74:	4606      	mov	r6, r0
   2ab76:	2800      	cmp	r0, #0
   2ab78:	d0f0      	beq.n	2ab5c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2ab7a:	4601      	mov	r1, r0
   2ab7c:	4628      	mov	r0, r5
   2ab7e:	f7ff fefc 	bl	2a97a <chunk_size>
   2ab82:	42a0      	cmp	r0, r4
   2ab84:	d908      	bls.n	2ab98 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   2ab86:	4434      	add	r4, r6
   2ab88:	4628      	mov	r0, r5
   2ab8a:	4622      	mov	r2, r4
   2ab8c:	f7ff ff98 	bl	2aac0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2ab90:	4621      	mov	r1, r4
   2ab92:	4628      	mov	r0, r5
   2ab94:	f7ff fef6 	bl	2a984 <free_list_add>
	void *cmem = &buf[c];
   2ab98:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2ab9c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2ab9e:	8853      	ldrh	r3, [r2, #2]
   2aba0:	3004      	adds	r0, #4
   2aba2:	f043 0301 	orr.w	r3, r3, #1
   2aba6:	8053      	strh	r3, [r2, #2]
	return chunk_mem(h, c);
   2aba8:	e7d9      	b.n	2ab5e <sys_heap_alloc+0x8>

0002abaa <outs>:
{
   2abaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abae:	4607      	mov	r7, r0
   2abb0:	4688      	mov	r8, r1
   2abb2:	4615      	mov	r5, r2
   2abb4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2abb6:	4614      	mov	r4, r2
   2abb8:	42b4      	cmp	r4, r6
   2abba:	eba4 0005 	sub.w	r0, r4, r5
   2abbe:	d302      	bcc.n	2abc6 <outs+0x1c>
   2abc0:	b93e      	cbnz	r6, 2abd2 <outs+0x28>
   2abc2:	7823      	ldrb	r3, [r4, #0]
   2abc4:	b12b      	cbz	r3, 2abd2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2abc6:	4641      	mov	r1, r8
   2abc8:	f814 0b01 	ldrb.w	r0, [r4], #1
   2abcc:	47b8      	blx	r7
		if (rc < 0) {
   2abce:	2800      	cmp	r0, #0
   2abd0:	daf2      	bge.n	2abb8 <outs+0xe>
}
   2abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002abd6 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2abd6:	4040      	eors	r0, r0
   2abd8:	f380 8811 	msr	BASEPRI, r0
   2abdc:	f04f 0004 	mov.w	r0, #4
   2abe0:	df02      	svc	2
}
   2abe2:	4770      	bx	lr

0002abe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2abe4:	4770      	bx	lr

0002abe6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2abe6:	b084      	sub	sp, #16
   2abe8:	ab04      	add	r3, sp, #16
   2abea:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2abee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2abf2:	2b06      	cmp	r3, #6
   2abf4:	d108      	bne.n	2ac08 <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2abf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2abfa:	2201      	movs	r2, #1
   2abfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2ac00:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2ac04:	bf20      	wfe
    while (true)
   2ac06:	e7fd      	b.n	2ac04 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2ac08:	b004      	add	sp, #16
   2ac0a:	4770      	bx	lr

0002ac0c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2ac0c:	b084      	sub	sp, #16
   2ac0e:	ab04      	add	r3, sp, #16
   2ac10:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2ac14:	2300      	movs	r3, #0
   2ac16:	f383 8811 	msr	BASEPRI, r3
   2ac1a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2ac1e:	b004      	add	sp, #16
   2ac20:	4770      	bx	lr

0002ac22 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   2ac22:	b40f      	push	{r0, r1, r2, r3}
   2ac24:	b507      	push	{r0, r1, r2, lr}
   2ac26:	a904      	add	r1, sp, #16
   2ac28:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2ac2c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2ac2e:	f7ef febd 	bl	1a9ac <vprintk>
	va_end(ap);
}
   2ac32:	b003      	add	sp, #12
   2ac34:	f85d eb04 	ldr.w	lr, [sp], #4
   2ac38:	b004      	add	sp, #16
   2ac3a:	4770      	bx	lr

0002ac3c <sntp_init>:
{
   2ac3c:	b570      	push	{r4, r5, r6, lr}
   2ac3e:	460d      	mov	r5, r1
   2ac40:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2ac42:	4604      	mov	r4, r0
   2ac44:	b330      	cbz	r0, 2ac94 <sntp_init+0x58>
   2ac46:	b329      	cbz	r1, 2ac94 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   2ac48:	2214      	movs	r2, #20
   2ac4a:	2100      	movs	r1, #0
   2ac4c:	f001 ffce 	bl	2cbec <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ac50:	8828      	ldrh	r0, [r5, #0]
   2ac52:	2211      	movs	r2, #17
   2ac54:	2102      	movs	r1, #2
   2ac56:	f7f0 fee9 	bl	1ba2c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2ac5a:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2ac5c:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2ac5e:	da04      	bge.n	2ac6a <sntp_init+0x2e>
		return -errno;
   2ac60:	f000 f932 	bl	2aec8 <__errno>
   2ac64:	6800      	ldr	r0, [r0, #0]
   2ac66:	4240      	negs	r0, r0
}
   2ac68:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2ac6a:	4632      	mov	r2, r6
   2ac6c:	4629      	mov	r1, r5
   2ac6e:	f000 f854 	bl	2ad1a <z_impl_zsock_connect>
	if (ret < 0) {
   2ac72:	2800      	cmp	r0, #0
   2ac74:	68e0      	ldr	r0, [r4, #12]
   2ac76:	da02      	bge.n	2ac7e <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2ac78:	f000 f82b 	bl	2acd2 <z_impl_zsock_close>
   2ac7c:	e7f0      	b.n	2ac60 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ac7e:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2ac80:	68a3      	ldr	r3, [r4, #8]
   2ac82:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ac86:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2ac8a:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2ac8c:	8091      	strh	r1, [r2, #4]
	return 0;
   2ac8e:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2ac90:	60a3      	str	r3, [r4, #8]
	return 0;
   2ac92:	e7e9      	b.n	2ac68 <sntp_init+0x2c>
		return -EFAULT;
   2ac94:	f06f 000d 	mvn.w	r0, #13
   2ac98:	e7e6      	b.n	2ac68 <sntp_init+0x2c>

0002ac9a <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2ac9a:	b110      	cbz	r0, 2aca2 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2ac9c:	68c0      	ldr	r0, [r0, #12]
   2ac9e:	f000 b818 	b.w	2acd2 <z_impl_zsock_close>
	}
}
   2aca2:	4770      	bx	lr

0002aca4 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2aca4:	f7f1 b83e 	b.w	1bd24 <socket_offload_getaddrinfo>

0002aca8 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2aca8:	f7f1 b86a 	b.w	1bd80 <socket_offload_freeaddrinfo>

0002acac <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2acac:	f7fb bb46 	b.w	2633c <z_impl_k_mutex_unlock>

0002acb0 <z_fdtable_call_ioctl>:
{
   2acb0:	b40c      	push	{r2, r3}
   2acb2:	4603      	mov	r3, r0
   2acb4:	b507      	push	{r0, r1, r2, lr}
   2acb6:	aa04      	add	r2, sp, #16
   2acb8:	4608      	mov	r0, r1
   2acba:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2acbe:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2acc0:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2acc2:	4798      	blx	r3
}
   2acc4:	b003      	add	sp, #12
   2acc6:	f85d eb04 	ldr.w	lr, [sp], #4
   2acca:	b002      	add	sp, #8
   2accc:	4770      	bx	lr

0002acce <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2acce:	f7fb ba5d 	b.w	2618c <z_impl_k_mutex_lock>

0002acd2 <z_impl_zsock_close>:
{
   2acd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2acd4:	4669      	mov	r1, sp
   2acd6:	aa01      	add	r2, sp, #4
{
   2acd8:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2acda:	f7ef fda7 	bl	1a82c <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2acde:	4604      	mov	r4, r0
   2ace0:	b940      	cbnz	r0, 2acf4 <z_impl_zsock_close+0x22>
		errno = EBADF;
   2ace2:	f000 f8f1 	bl	2aec8 <__errno>
   2ace6:	2309      	movs	r3, #9
		return -1;
   2ace8:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   2acec:	6003      	str	r3, [r0, #0]
}
   2acee:	4620      	mov	r0, r4
   2acf0:	b003      	add	sp, #12
   2acf2:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2acf4:	f04f 32ff 	mov.w	r2, #4294967295
   2acf8:	f04f 33ff 	mov.w	r3, #4294967295
   2acfc:	9801      	ldr	r0, [sp, #4]
   2acfe:	f7ff ffe6 	bl	2acce <k_mutex_lock.constprop.0>
	ret = vtable->fd_vtable.close(ctx);
   2ad02:	9b00      	ldr	r3, [sp, #0]
   2ad04:	4620      	mov	r0, r4
   2ad06:	689b      	ldr	r3, [r3, #8]
   2ad08:	4798      	blx	r3
   2ad0a:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2ad0c:	9801      	ldr	r0, [sp, #4]
   2ad0e:	f7ff ffcd 	bl	2acac <k_mutex_unlock>
	z_free_fd(sock);
   2ad12:	4628      	mov	r0, r5
   2ad14:	f7ef fdf2 	bl	1a8fc <z_free_fd>
	return ret;
   2ad18:	e7e9      	b.n	2acee <z_impl_zsock_close+0x1c>

0002ad1a <z_impl_zsock_connect>:
{
   2ad1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ad1c:	460d      	mov	r5, r1
   2ad1e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ad20:	4669      	mov	r1, sp
   2ad22:	aa01      	add	r2, sp, #4
   2ad24:	f7ef fd82 	bl	1a82c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ad28:	4604      	mov	r4, r0
   2ad2a:	b110      	cbz	r0, 2ad32 <z_impl_zsock_connect+0x18>
   2ad2c:	9b00      	ldr	r3, [sp, #0]
   2ad2e:	695b      	ldr	r3, [r3, #20]
   2ad30:	b943      	cbnz	r3, 2ad44 <z_impl_zsock_connect+0x2a>
   2ad32:	f000 f8c9 	bl	2aec8 <__errno>
   2ad36:	2309      	movs	r3, #9
   2ad38:	f04f 34ff 	mov.w	r4, #4294967295
   2ad3c:	6003      	str	r3, [r0, #0]
}
   2ad3e:	4620      	mov	r0, r4
   2ad40:	b002      	add	sp, #8
   2ad42:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2ad44:	f04f 32ff 	mov.w	r2, #4294967295
   2ad48:	f04f 33ff 	mov.w	r3, #4294967295
   2ad4c:	9801      	ldr	r0, [sp, #4]
   2ad4e:	f7ff ffbe 	bl	2acce <k_mutex_lock.constprop.0>
   2ad52:	9b00      	ldr	r3, [sp, #0]
   2ad54:	4632      	mov	r2, r6
   2ad56:	4629      	mov	r1, r5
   2ad58:	4620      	mov	r0, r4
   2ad5a:	695b      	ldr	r3, [r3, #20]
   2ad5c:	4798      	blx	r3
   2ad5e:	4604      	mov	r4, r0
   2ad60:	9801      	ldr	r0, [sp, #4]
   2ad62:	f7ff ffa3 	bl	2acac <k_mutex_unlock>
   2ad66:	e7ea      	b.n	2ad3e <z_impl_zsock_connect+0x24>

0002ad68 <z_impl_zsock_sendto>:
{
   2ad68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2ad6c:	460d      	mov	r5, r1
   2ad6e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2ad70:	a902      	add	r1, sp, #8
   2ad72:	aa03      	add	r2, sp, #12
{
   2ad74:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2ad76:	f7ef fd59 	bl	1a82c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ad7a:	4604      	mov	r4, r0
   2ad7c:	b110      	cbz	r0, 2ad84 <z_impl_zsock_sendto+0x1c>
   2ad7e:	9b02      	ldr	r3, [sp, #8]
   2ad80:	6a1b      	ldr	r3, [r3, #32]
   2ad82:	b94b      	cbnz	r3, 2ad98 <z_impl_zsock_sendto+0x30>
   2ad84:	f000 f8a0 	bl	2aec8 <__errno>
   2ad88:	2309      	movs	r3, #9
   2ad8a:	f04f 34ff 	mov.w	r4, #4294967295
   2ad8e:	6003      	str	r3, [r0, #0]
}
   2ad90:	4620      	mov	r0, r4
   2ad92:	b004      	add	sp, #16
   2ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2ad98:	f04f 32ff 	mov.w	r2, #4294967295
   2ad9c:	f04f 33ff 	mov.w	r3, #4294967295
   2ada0:	9803      	ldr	r0, [sp, #12]
   2ada2:	f7ff ff94 	bl	2acce <k_mutex_lock.constprop.0>
   2ada6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ada8:	4632      	mov	r2, r6
   2adaa:	9301      	str	r3, [sp, #4]
   2adac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2adae:	4629      	mov	r1, r5
   2adb0:	9300      	str	r3, [sp, #0]
   2adb2:	9b02      	ldr	r3, [sp, #8]
   2adb4:	4620      	mov	r0, r4
   2adb6:	f8d3 8020 	ldr.w	r8, [r3, #32]
   2adba:	463b      	mov	r3, r7
   2adbc:	47c0      	blx	r8
   2adbe:	4604      	mov	r4, r0
   2adc0:	9803      	ldr	r0, [sp, #12]
   2adc2:	f7ff ff73 	bl	2acac <k_mutex_unlock>
   2adc6:	e7e3      	b.n	2ad90 <z_impl_zsock_sendto+0x28>

0002adc8 <z_impl_zsock_recvfrom>:
{
   2adc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2adcc:	460d      	mov	r5, r1
   2adce:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2add0:	a902      	add	r1, sp, #8
   2add2:	aa03      	add	r2, sp, #12
{
   2add4:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2add6:	f7ef fd29 	bl	1a82c <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2adda:	4604      	mov	r4, r0
   2addc:	b110      	cbz	r0, 2ade4 <z_impl_zsock_recvfrom+0x1c>
   2adde:	9b02      	ldr	r3, [sp, #8]
   2ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ade2:	b94b      	cbnz	r3, 2adf8 <z_impl_zsock_recvfrom+0x30>
   2ade4:	f000 f870 	bl	2aec8 <__errno>
   2ade8:	2309      	movs	r3, #9
   2adea:	f04f 34ff 	mov.w	r4, #4294967295
   2adee:	6003      	str	r3, [r0, #0]
}
   2adf0:	4620      	mov	r0, r4
   2adf2:	b004      	add	sp, #16
   2adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2adf8:	f04f 32ff 	mov.w	r2, #4294967295
   2adfc:	f04f 33ff 	mov.w	r3, #4294967295
   2ae00:	9803      	ldr	r0, [sp, #12]
   2ae02:	f7ff ff64 	bl	2acce <k_mutex_lock.constprop.0>
   2ae06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ae08:	4632      	mov	r2, r6
   2ae0a:	9301      	str	r3, [sp, #4]
   2ae0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ae0e:	4629      	mov	r1, r5
   2ae10:	9300      	str	r3, [sp, #0]
   2ae12:	9b02      	ldr	r3, [sp, #8]
   2ae14:	4620      	mov	r0, r4
   2ae16:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2ae1a:	463b      	mov	r3, r7
   2ae1c:	47c0      	blx	r8
   2ae1e:	4604      	mov	r4, r0
   2ae20:	9803      	ldr	r0, [sp, #12]
   2ae22:	f7ff ff43 	bl	2acac <k_mutex_unlock>
   2ae26:	e7e3      	b.n	2adf0 <z_impl_zsock_recvfrom+0x28>

0002ae28 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2ae28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   2ae2c:	1e14      	subs	r4, r2, #0
{
   2ae2e:	4605      	mov	r5, r0
   2ae30:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   2ae32:	db13      	blt.n	2ae5c <z_impl_zsock_poll+0x34>
   2ae34:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2ae38:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ae3c:	2100      	movs	r1, #0
   2ae3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ae42:	2300      	movs	r3, #0
   2ae44:	fbc7 0104 	smlal	r0, r1, r7, r4
   2ae48:	f7ee f92a 	bl	190a0 <__aeabi_uldivmod>
   2ae4c:	4602      	mov	r2, r0
   2ae4e:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   2ae50:	4631      	mov	r1, r6
   2ae52:	4628      	mov	r0, r5
}
   2ae54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   2ae58:	f7f0 be2e 	b.w	1bab8 <zsock_poll_internal>
		timeout = K_FOREVER;
   2ae5c:	f04f 32ff 	mov.w	r2, #4294967295
   2ae60:	4613      	mov	r3, r2
   2ae62:	e7f5      	b.n	2ae50 <z_impl_zsock_poll+0x28>

0002ae64 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2ae64:	2200      	movs	r2, #0
   2ae66:	e9c0 2200 	strd	r2, r2, [r0]
   2ae6a:	6082      	str	r2, [r0, #8]
}
   2ae6c:	4770      	bx	lr

0002ae6e <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2ae6e:	b510      	push	{r4, lr}
   2ae70:	b40f      	push	{r0, r1, r2, r3}
   2ae72:	f7f1 f8cf 	bl	1c014 <before_nse>
   2ae76:	bc0f      	pop	{r0, r1, r2, r3}
   2ae78:	f7ed f8b6 	bl	17fe8 <spm_request_random_number_nse>
   2ae7c:	b40f      	push	{r0, r1, r2, r3}
   2ae7e:	f7f1 f8d3 	bl	1c028 <after_nse>
   2ae82:	bc0f      	pop	{r0, r1, r2, r3}
   2ae84:	bd10      	pop	{r4, pc}

0002ae86 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2ae86:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2ae88:	6800      	ldr	r0, [r0, #0]
   2ae8a:	f7f1 b8f5 	b.w	1c078 <z_arm_fatal_error>

0002ae8e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2ae8e:	2100      	movs	r1, #0
   2ae90:	2001      	movs	r0, #1
   2ae92:	f7f1 b8f1 	b.w	1c078 <z_arm_fatal_error>

0002ae96 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2ae96:	b508      	push	{r3, lr}
	handler();
   2ae98:	f7f1 f982 	bl	1c1a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2ae9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2aea0:	f7f1 ba44 	b.w	1c32c <z_arm_exc_exit>

0002aea4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2aea4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2aea6:	f383 880b 	msr	PSPLIM, r3
}
   2aeaa:	4770      	bx	lr

0002aeac <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2aeac:	4770      	bx	lr

0002aeae <z_arm_restore_fp_context>:
   2aeae:	4770      	bx	lr

0002aeb0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2aeb0:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   2aeb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2aeb8:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2aeba:	bf08      	it	eq
   2aebc:	f06f 0015 	mvneq.w	r0, #21
   2aec0:	4770      	bx	lr

0002aec2 <_stdout_hook_default>:
}
   2aec2:	f04f 30ff 	mov.w	r0, #4294967295
   2aec6:	4770      	bx	lr

0002aec8 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2aec8:	f7fa bdb0 	b.w	25a2c <z_impl_z_errno>

0002aecc <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2aecc:	b508      	push	{r3, lr}
	net_if_init();
   2aece:	f7f2 f833 	bl	1cf38 <net_if_init>
	net_if_post_init();
   2aed2:	f7f2 f865 	bl	1cfa0 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2aed6:	2000      	movs	r0, #0
   2aed8:	bd08      	pop	{r3, pc}

0002aeda <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2aeda:	b110      	cbz	r0, 2aee2 <net_if_l2+0x8>
   2aedc:	6800      	ldr	r0, [r0, #0]
   2aede:	b100      	cbz	r0, 2aee2 <net_if_l2+0x8>
	return iface->if_dev->l2;
   2aee0:	6840      	ldr	r0, [r0, #4]
}
   2aee2:	4770      	bx	lr

0002aee4 <l2_flags_get>:
{
   2aee4:	b510      	push	{r4, lr}
   2aee6:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2aee8:	f7ff fff7 	bl	2aeda <net_if_l2>
   2aeec:	b128      	cbz	r0, 2aefa <l2_flags_get+0x16>
   2aeee:	68c2      	ldr	r2, [r0, #12]
   2aef0:	b11a      	cbz	r2, 2aefa <l2_flags_get+0x16>
}
   2aef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2aef6:	4618      	mov	r0, r3
   2aef8:	4710      	bx	r2
}
   2aefa:	2000      	movs	r0, #0
   2aefc:	bd10      	pop	{r4, pc}

0002aefe <net_if_flag_is_set>:
	if (iface == NULL) {
   2aefe:	b130      	cbz	r0, 2af0e <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2af00:	6803      	ldr	r3, [r0, #0]
   2af02:	330c      	adds	r3, #12
   2af04:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2af08:	4108      	asrs	r0, r1
   2af0a:	f000 0001 	and.w	r0, r0, #1
}
   2af0e:	4770      	bx	lr

0002af10 <set_starting_state>:
{
   2af10:	b510      	push	{r4, lr}
	__asm__ volatile(
   2af12:	f04f 0320 	mov.w	r3, #32
   2af16:	f3ef 8211 	mrs	r2, BASEPRI
   2af1a:	f383 8812 	msr	BASEPRI_MAX, r3
   2af1e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2af22:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2af24:	f003 0407 	and.w	r4, r3, #7
   2af28:	2c01      	cmp	r4, #1
   2af2a:	d106      	bne.n	2af3a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2af2c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2af2e:	2000      	movs	r0, #0
	__asm__ volatile(
   2af30:	f382 8811 	msr	BASEPRI, r2
   2af34:	f3bf 8f6f 	isb	sy
}
   2af38:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2af3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2af3e:	428b      	cmp	r3, r1
		err = -EALREADY;
   2af40:	bf14      	ite	ne
   2af42:	f04f 30ff 	movne.w	r0, #4294967295
   2af46:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2af4a:	e7f1      	b.n	2af30 <set_starting_state+0x20>

0002af4c <set_on_state>:
	__asm__ volatile(
   2af4c:	f04f 0320 	mov.w	r3, #32
   2af50:	f3ef 8211 	mrs	r2, BASEPRI
   2af54:	f383 8812 	msr	BASEPRI_MAX, r3
   2af58:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2af5c:	6803      	ldr	r3, [r0, #0]
   2af5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2af62:	f043 0302 	orr.w	r3, r3, #2
   2af66:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2af68:	f382 8811 	msr	BASEPRI, r2
   2af6c:	f3bf 8f6f 	isb	sy
}
   2af70:	4770      	bx	lr

0002af72 <onoff_started_callback>:
	return &data->mgr[type];
   2af72:	6900      	ldr	r0, [r0, #16]
   2af74:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2af76:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2af7a:	2100      	movs	r1, #0
   2af7c:	4710      	bx	r2

0002af7e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2af7e:	2000      	movs	r0, #0
   2af80:	f7f6 ba9e 	b.w	214c0 <nrfx_clock_start>

0002af84 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2af84:	2000      	movs	r0, #0
   2af86:	f7f6 baeb 	b.w	21560 <nrfx_clock_stop>

0002af8a <api_stop>:
	return stop(dev, subsys, CTX_API);
   2af8a:	2280      	movs	r2, #128	; 0x80
   2af8c:	f7f2 b870 	b.w	1d070 <stop>

0002af90 <blocking_start_callback>:
{
   2af90:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2af92:	f7fb bb53 	b.w	2663c <z_impl_k_sem_give>

0002af96 <api_start>:
{
   2af96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2af9a:	240c      	movs	r4, #12
   2af9c:	b2c9      	uxtb	r1, r1
   2af9e:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2afa0:	6905      	ldr	r5, [r0, #16]
{
   2afa2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2afa4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2afa8:	2180      	movs	r1, #128	; 0x80
   2afaa:	4428      	add	r0, r5
{
   2afac:	4690      	mov	r8, r2
   2afae:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2afb0:	f7ff ffae 	bl	2af10 <set_starting_state>
	if (err < 0) {
   2afb4:	2800      	cmp	r0, #0
   2afb6:	db06      	blt.n	2afc6 <api_start+0x30>
	subdata->cb = cb;
   2afb8:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2afba:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2afbe:	6873      	ldr	r3, [r6, #4]
   2afc0:	591b      	ldr	r3, [r3, r4]
   2afc2:	4798      	blx	r3
	return 0;
   2afc4:	2000      	movs	r0, #0
}
   2afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002afca <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2afca:	6843      	ldr	r3, [r0, #4]
}
   2afcc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2afce:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2afd0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2afd2:	600b      	str	r3, [r1, #0]
}
   2afd4:	4770      	bx	lr

0002afd6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2afd6:	6843      	ldr	r3, [r0, #4]
   2afd8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2afda:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2afdc:	4042      	eors	r2, r0
   2afde:	400a      	ands	r2, r1
   2afe0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2afe2:	605a      	str	r2, [r3, #4]
}
   2afe4:	2000      	movs	r0, #0
   2afe6:	4770      	bx	lr

0002afe8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2afe8:	6843      	ldr	r3, [r0, #4]
}
   2afea:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2afec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2afee:	6099      	str	r1, [r3, #8]
}
   2aff0:	4770      	bx	lr

0002aff2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2aff2:	6843      	ldr	r3, [r0, #4]
}
   2aff4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2aff6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2aff8:	60d9      	str	r1, [r3, #12]
}
   2affa:	4770      	bx	lr

0002affc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2affc:	6843      	ldr	r3, [r0, #4]
}
   2affe:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2b000:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2b002:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2b004:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2b006:	6053      	str	r3, [r2, #4]
}
   2b008:	4770      	bx	lr

0002b00a <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2b00a:	b530      	push	{r4, r5, lr}
   2b00c:	4604      	mov	r4, r0
	while (*count) {
   2b00e:	6808      	ldr	r0, [r1, #0]
   2b010:	b908      	cbnz	r0, 2b016 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   2b012:	6010      	str	r0, [r2, #0]
	return NULL;
   2b014:	e004      	b.n	2b020 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   2b016:	6823      	ldr	r3, [r4, #0]
   2b018:	685d      	ldr	r5, [r3, #4]
   2b01a:	b115      	cbz	r5, 2b022 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   2b01c:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   2b01e:	6015      	str	r5, [r2, #0]
}
   2b020:	bd30      	pop	{r4, r5, pc}
		++(*current);
   2b022:	3308      	adds	r3, #8
		--(*count);
   2b024:	3801      	subs	r0, #1
		++(*current);
   2b026:	6023      	str	r3, [r4, #0]
		--(*count);
   2b028:	6008      	str	r0, [r1, #0]
   2b02a:	e7f0      	b.n	2b00e <spi_context_get_next_buf.constprop.0+0x4>

0002b02c <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2b02c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2b02e:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2b030:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2b032:	b1e3      	cbz	r3, 2b06e <_spi_context_cs_control.isra.0+0x42>
   2b034:	6898      	ldr	r0, [r3, #8]
   2b036:	b1d0      	cbz	r0, 2b06e <_spi_context_cs_control.isra.0+0x42>
   2b038:	6805      	ldr	r5, [r0, #0]
   2b03a:	b1c5      	cbz	r5, 2b06e <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   2b03c:	b149      	cbz	r1, 2b052 <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2b03e:	2101      	movs	r1, #1
   2b040:	f7f2 fd48 	bl	1dad4 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   2b044:	6823      	ldr	r3, [r4, #0]
   2b046:	689b      	ldr	r3, [r3, #8]
   2b048:	6898      	ldr	r0, [r3, #8]
}
   2b04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2b04e:	f001 bd14 	b.w	2ca7a <z_impl_k_busy_wait>
			if (!force_off &&
   2b052:	b912      	cbnz	r2, 2b05a <_spi_context_cs_control.isra.0+0x2e>
   2b054:	889b      	ldrh	r3, [r3, #4]
   2b056:	04db      	lsls	r3, r3, #19
   2b058:	d409      	bmi.n	2b06e <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2b05a:	6880      	ldr	r0, [r0, #8]
   2b05c:	f001 fd0d 	bl	2ca7a <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2b060:	6823      	ldr	r3, [r4, #0]
   2b062:	2100      	movs	r1, #0
   2b064:	6898      	ldr	r0, [r3, #8]
}
   2b066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2b06a:	f7f2 bd33 	b.w	1dad4 <gpio_pin_set_dt>
}
   2b06e:	bd38      	pop	{r3, r4, r5, pc}

0002b070 <spi_context_unlock_unconditionally>:
{
   2b070:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2b072:	2201      	movs	r2, #1
   2b074:	2100      	movs	r1, #0
{
   2b076:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2b078:	f7ff ffd8 	bl	2b02c <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   2b07c:	69a3      	ldr	r3, [r4, #24]
   2b07e:	b933      	cbnz	r3, 2b08e <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2b080:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2b082:	f104 0010 	add.w	r0, r4, #16
}
   2b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b08a:	f7fb bad7 	b.w	2663c <z_impl_k_sem_give>
   2b08e:	bd10      	pop	{r4, pc}

0002b090 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2b090:	6900      	ldr	r0, [r0, #16]
{
   2b092:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2b094:	6803      	ldr	r3, [r0, #0]
   2b096:	428b      	cmp	r3, r1
   2b098:	d106      	bne.n	2b0a8 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2b09a:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2b09e:	b934      	cbnz	r4, 2b0ae <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2b0a0:	f7ff ffe6 	bl	2b070 <spi_context_unlock_unconditionally>
	return 0;
   2b0a4:	4620      	mov	r0, r4
}
   2b0a6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2b0a8:	f06f 0015 	mvn.w	r0, #21
   2b0ac:	e7fb      	b.n	2b0a6 <spi_nrfx_release+0x16>
		return -EBUSY;
   2b0ae:	f06f 000f 	mvn.w	r0, #15
   2b0b2:	e7f8      	b.n	2b0a6 <spi_nrfx_release+0x16>

0002b0b4 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   2b0b4:	2000      	movs	r0, #0
   2b0b6:	4770      	bx	lr

0002b0b8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2b0b8:	4770      	bx	lr

0002b0ba <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b0ba:	f001 bcde 	b.w	2ca7a <z_impl_k_busy_wait>

0002b0be <nrf_modem_os_errno_set>:
{
   2b0be:	b510      	push	{r4, lr}
   2b0c0:	4604      	mov	r4, r0
	errno = err_code;
   2b0c2:	f7ff ff01 	bl	2aec8 <__errno>
   2b0c6:	6004      	str	r4, [r0, #0]
}
   2b0c8:	bd10      	pop	{r4, pc}

0002b0ca <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   2b0ca:	f001 bc4e 	b.w	2c96a <k_is_in_isr>

0002b0ce <read_task_create>:
{
   2b0ce:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   2b0d0:	201c      	movs	r0, #28
   2b0d2:	2200      	movs	r2, #0
   2b0d4:	2106      	movs	r1, #6
   2b0d6:	f7f1 f82f 	bl	1c138 <z_arm_irq_priority_set>
}
   2b0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   2b0de:	201c      	movs	r0, #28
   2b0e0:	f7f0 bff8 	b.w	1c0d4 <arch_irq_enable>

0002b0e4 <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   2b0e4:	2000      	movs	r0, #0
   2b0e6:	4770      	bx	lr

0002b0e8 <z_to_nrf_flags>:
{
   2b0e8:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2b0ea:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2b0ee:	bf18      	it	ne
   2b0f0:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2b0f2:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2b0f4:	bf48      	it	mi
   2b0f6:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2b0fa:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   2b0fc:	bf48      	it	mi
   2b0fe:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   2b102:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   2b104:	bf48      	it	mi
   2b106:	f040 0010 	orrmi.w	r0, r0, #16
}
   2b10a:	4770      	bx	lr

0002b10c <z_to_nrf_protocol>:
	switch (proto) {
   2b10c:	2811      	cmp	r0, #17
   2b10e:	d013      	beq.n	2b138 <z_to_nrf_protocol+0x2c>
   2b110:	dc06      	bgt.n	2b120 <z_to_nrf_protocol+0x14>
   2b112:	b1a8      	cbz	r0, 2b140 <z_to_nrf_protocol+0x34>
		return NRF_IPPROTO_TCP;
   2b114:	2806      	cmp	r0, #6
   2b116:	bf14      	ite	ne
   2b118:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2b11c:	2001      	moveq	r0, #1
   2b11e:	4770      	bx	lr
	switch (proto) {
   2b120:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2b124:	d00a      	beq.n	2b13c <z_to_nrf_protocol+0x30>
   2b126:	f240 1311 	movw	r3, #273	; 0x111
		return NRF_SPROTO_DTLS1v2;
   2b12a:	4298      	cmp	r0, r3
   2b12c:	bf14      	ite	ne
   2b12e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2b132:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   2b136:	4770      	bx	lr
	switch (proto) {
   2b138:	2002      	movs	r0, #2
   2b13a:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2b13c:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   2b140:	4770      	bx	lr

0002b142 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2b142:	f7fb b8fb 	b.w	2633c <z_impl_k_mutex_unlock>

0002b146 <nrf91_socket_offload_getsockopt>:
{
   2b146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b14a:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2b14c:	2300      	movs	r3, #0
{
   2b14e:	b086      	sub	sp, #24
   2b150:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2b154:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2b158:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   2b15c:	2901      	cmp	r1, #1
{
   2b15e:	460e      	mov	r6, r1
   2b160:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   2b162:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2b164:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2b166:	d002      	beq.n	2b16e <nrf91_socket_offload_getsockopt+0x28>
   2b168:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2b16c:	d139      	bne.n	2b1e2 <nrf91_socket_offload_getsockopt+0x9c>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2b16e:	4629      	mov	r1, r5
   2b170:	4630      	mov	r0, r6
   2b172:	aa02      	add	r2, sp, #8
   2b174:	f7f3 fc20 	bl	1e9b8 <z_to_nrf_optname>
   2b178:	2800      	cmp	r0, #0
   2b17a:	db32      	blt.n	2b1e2 <nrf91_socket_offload_getsockopt+0x9c>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2b17c:	2e01      	cmp	r6, #1
   2b17e:	d123      	bne.n	2b1c8 <nrf91_socket_offload_getsockopt+0x82>
   2b180:	f1a5 0314 	sub.w	r3, r5, #20
   2b184:	2b01      	cmp	r3, #1
   2b186:	d81f      	bhi.n	2b1c8 <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   2b188:	2308      	movs	r3, #8
   2b18a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2b18c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2b18e:	aa03      	add	r2, sp, #12
   2b190:	4638      	mov	r0, r7
   2b192:	9200      	str	r2, [sp, #0]
   2b194:	4631      	mov	r1, r6
   2b196:	9a02      	ldr	r2, [sp, #8]
   2b198:	f001 fb78 	bl	2c88c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2b19c:	4607      	mov	r7, r0
   2b19e:	b978      	cbnz	r0, 2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
   2b1a0:	b174      	cbz	r4, 2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   2b1a2:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2b1a4:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   2b1a6:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2b1aa:	d109      	bne.n	2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   2b1ac:	2d04      	cmp	r5, #4
   2b1ae:	d10d      	bne.n	2b1cc <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   2b1b0:	6820      	ldr	r0, [r4, #0]
   2b1b2:	b128      	cbz	r0, 2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   2b1b4:	f7ff ff83 	bl	2b0be <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   2b1b8:	f7ff fe86 	bl	2aec8 <__errno>
   2b1bc:	6803      	ldr	r3, [r0, #0]
   2b1be:	6023      	str	r3, [r4, #0]
}
   2b1c0:	4638      	mov	r0, r7
   2b1c2:	b006      	add	sp, #24
   2b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b1c8:	4623      	mov	r3, r4
   2b1ca:	e7e0      	b.n	2b18e <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   2b1cc:	3d14      	subs	r5, #20
   2b1ce:	2d01      	cmp	r5, #1
   2b1d0:	d8f6      	bhi.n	2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
				((struct timeval *)optval)->tv_sec =
   2b1d2:	9b04      	ldr	r3, [sp, #16]
   2b1d4:	6023      	str	r3, [r4, #0]
				((struct timeval *)optval)->tv_usec =
   2b1d6:	9b05      	ldr	r3, [sp, #20]
   2b1d8:	6063      	str	r3, [r4, #4]
				*optlen = sizeof(struct timeval);
   2b1da:	2308      	movs	r3, #8
   2b1dc:	f8c8 3000 	str.w	r3, [r8]
   2b1e0:	e7ee      	b.n	2b1c0 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   2b1e2:	f7ff fe71 	bl	2aec8 <__errno>
   2b1e6:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2b1e8:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   2b1ec:	6003      	str	r3, [r0, #0]
	return retval;
   2b1ee:	e7e7      	b.n	2b1c0 <nrf91_socket_offload_getsockopt+0x7a>

0002b1f0 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2b1f0:	6800      	ldr	r0, [r0, #0]
   2b1f2:	f001 bafb 	b.w	2c7ec <nrf_listen>

0002b1f6 <nrf91_socket_offload_freeaddrinfo>:
{
   2b1f6:	b538      	push	{r3, r4, r5, lr}
   2b1f8:	4604      	mov	r4, r0
	while (next != NULL) {
   2b1fa:	b904      	cbnz	r4, 2b1fe <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2b1fc:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2b1fe:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2b200:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2b202:	f001 fcaa 	bl	2cb5a <k_free>
		k_free(this);
   2b206:	4620      	mov	r0, r4
   2b208:	f001 fca7 	bl	2cb5a <k_free>
		next = next->ai_next;
   2b20c:	462c      	mov	r4, r5
   2b20e:	e7f4      	b.n	2b1fa <nrf91_socket_offload_freeaddrinfo+0x4>

0002b210 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2b210:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2b212:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2b214:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2b216:	4603      	mov	r3, r0
{
   2b218:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2b21a:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b21e:	f101 0420 	add.w	r4, r1, #32
   2b222:	f101 0210 	add.w	r2, r1, #16
   2b226:	f852 5b04 	ldr.w	r5, [r2], #4
   2b22a:	42a2      	cmp	r2, r4
   2b22c:	f843 5b04 	str.w	r5, [r3], #4
   2b230:	d1f9      	bne.n	2b226 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2b232:	6a0b      	ldr	r3, [r1, #32]
   2b234:	7503      	strb	r3, [r0, #20]
}
   2b236:	bd30      	pop	{r4, r5, pc}

0002b238 <z_to_nrf_ipv6>:
{
   2b238:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2b23a:	2124      	movs	r1, #36	; 0x24
   2b23c:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2b23e:	8841      	ldrh	r1, [r0, #2]
{
   2b240:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2b242:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2b244:	210a      	movs	r1, #10
{
   2b246:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2b248:	6059      	str	r1, [r3, #4]
   2b24a:	1d04      	adds	r4, r0, #4
   2b24c:	f103 0610 	add.w	r6, r3, #16
   2b250:	f100 0714 	add.w	r7, r0, #20
   2b254:	4635      	mov	r5, r6
   2b256:	6820      	ldr	r0, [r4, #0]
   2b258:	6861      	ldr	r1, [r4, #4]
   2b25a:	3408      	adds	r4, #8
   2b25c:	c503      	stmia	r5!, {r0, r1}
   2b25e:	42bc      	cmp	r4, r7
   2b260:	462e      	mov	r6, r5
   2b262:	d1f7      	bne.n	2b254 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2b264:	7d12      	ldrb	r2, [r2, #20]
   2b266:	621a      	str	r2, [r3, #32]
}
   2b268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b26a <nrf91_socket_offload_sendto>:
{
   2b26a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b26e:	b08d      	sub	sp, #52	; 0x34
   2b270:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2b272:	460d      	mov	r5, r1
   2b274:	4616      	mov	r6, r2
   2b276:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2b278:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   2b27c:	b96c      	cbnz	r4, 2b29a <nrf91_socket_offload_sendto+0x30>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2b27e:	4618      	mov	r0, r3
   2b280:	f7ff ff32 	bl	2b0e8 <z_to_nrf_flags>
   2b284:	4603      	mov	r3, r0
   2b286:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2b28a:	4632      	mov	r2, r6
   2b28c:	4629      	mov	r1, r5
   2b28e:	4640      	mov	r0, r8
   2b290:	f001 fa65 	bl	2c75e <nrf_sendto>
}
   2b294:	b00d      	add	sp, #52	; 0x34
   2b296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   2b29a:	8823      	ldrh	r3, [r4, #0]
   2b29c:	2b01      	cmp	r3, #1
   2b29e:	d113      	bne.n	2b2c8 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   2b2a0:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b2a2:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   2b2a6:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2b2aa:	2302      	movs	r3, #2
   2b2ac:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b2ae:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2b2b0:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b2b2:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b2b4:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2b2b8:	f7ff ff16 	bl	2b0e8 <z_to_nrf_flags>
   2b2bc:	aa03      	add	r2, sp, #12
   2b2be:	4603      	mov	r3, r0
   2b2c0:	f8cd 9004 	str.w	r9, [sp, #4]
   2b2c4:	9200      	str	r2, [sp, #0]
   2b2c6:	e7e0      	b.n	2b28a <nrf91_socket_offload_sendto+0x20>
	} else if (to->sa_family == AF_INET6) {
   2b2c8:	2b02      	cmp	r3, #2
   2b2ca:	d10d      	bne.n	2b2e8 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   2b2cc:	f10d 090c 	add.w	r9, sp, #12
   2b2d0:	4649      	mov	r1, r9
   2b2d2:	4620      	mov	r0, r4
   2b2d4:	f7ff ffb0 	bl	2b238 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2b2d8:	4638      	mov	r0, r7
   2b2da:	f7ff ff05 	bl	2b0e8 <z_to_nrf_flags>
   2b2de:	2224      	movs	r2, #36	; 0x24
   2b2e0:	4603      	mov	r3, r0
   2b2e2:	e9cd 9200 	strd	r9, r2, [sp]
   2b2e6:	e7d0      	b.n	2b28a <nrf91_socket_offload_sendto+0x20>
	errno = ENOTSUP;
   2b2e8:	f7ff fdee 	bl	2aec8 <__errno>
   2b2ec:	2386      	movs	r3, #134	; 0x86
   2b2ee:	6003      	str	r3, [r0, #0]
	return retval;
   2b2f0:	f04f 30ff 	mov.w	r0, #4294967295
   2b2f4:	e7ce      	b.n	2b294 <nrf91_socket_offload_sendto+0x2a>

0002b2f6 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2b2f6:	2300      	movs	r3, #0
{
   2b2f8:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2b2fa:	e9cd 3300 	strd	r3, r3, [sp]
   2b2fe:	f7ff ffb4 	bl	2b26a <nrf91_socket_offload_sendto>
}
   2b302:	b003      	add	sp, #12
   2b304:	f85d fb04 	ldr.w	pc, [sp], #4

0002b308 <nrf91_socket_offload_connect>:
{
   2b308:	4603      	mov	r3, r0
   2b30a:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2b30c:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2b30e:	880b      	ldrh	r3, [r1, #0]
{
   2b310:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2b312:	2b01      	cmp	r3, #1
{
   2b314:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2b316:	d10f      	bne.n	2b338 <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2b318:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b31a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2b31c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2b320:	2302      	movs	r3, #2
   2b322:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b324:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b326:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b32a:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2b32c:	4620      	mov	r0, r4
   2b32e:	a901      	add	r1, sp, #4
   2b330:	f001 fa4b 	bl	2c7ca <nrf_connect>
}
   2b334:	b00a      	add	sp, #40	; 0x28
   2b336:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2b338:	2b02      	cmp	r3, #2
   2b33a:	d104      	bne.n	2b346 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2b33c:	a901      	add	r1, sp, #4
   2b33e:	f7ff ff7b 	bl	2b238 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2b342:	2224      	movs	r2, #36	; 0x24
   2b344:	e7f2      	b.n	2b32c <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2b346:	4620      	mov	r0, r4
   2b348:	f001 fa3f 	bl	2c7ca <nrf_connect>
		if (retval < 0) {
   2b34c:	2800      	cmp	r0, #0
   2b34e:	daf1      	bge.n	2b334 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   2b350:	f7ff fdba 	bl	2aec8 <__errno>
   2b354:	2386      	movs	r3, #134	; 0x86
   2b356:	6003      	str	r3, [r0, #0]
   2b358:	f04f 30ff 	mov.w	r0, #4294967295
   2b35c:	e7ea      	b.n	2b334 <nrf91_socket_offload_connect+0x2c>

0002b35e <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2b35e:	f7fa bf15 	b.w	2618c <z_impl_k_mutex_lock>

0002b362 <nrf91_socket_offload_recvfrom>:
{
   2b362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b366:	4698      	mov	r8, r3
   2b368:	b08d      	sub	sp, #52	; 0x34
   2b36a:	4606      	mov	r6, r0
   2b36c:	e9dd 5916 	ldrd	r5, r9, [sp, #88]	; 0x58
	k_mutex_unlock(ctx->lock);
   2b370:	6840      	ldr	r0, [r0, #4]
{
   2b372:	460c      	mov	r4, r1
   2b374:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   2b376:	f7ff fee4 	bl	2b142 <k_mutex_unlock>
	if (from == NULL) {
   2b37a:	4640      	mov	r0, r8
   2b37c:	f7ff feb4 	bl	2b0e8 <z_to_nrf_flags>
   2b380:	4680      	mov	r8, r0
   2b382:	b9a5      	cbnz	r5, 2b3ae <nrf91_socket_offload_recvfrom+0x4c>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2b384:	4603      	mov	r3, r0
   2b386:	4621      	mov	r1, r4
   2b388:	463a      	mov	r2, r7
   2b38a:	e9cd 5500 	strd	r5, r5, [sp]
   2b38e:	6830      	ldr	r0, [r6, #0]
   2b390:	f001 fa00 	bl	2c794 <nrf_recvfrom>
   2b394:	4604      	mov	r4, r0
	if (ctx->lock) {
   2b396:	6870      	ldr	r0, [r6, #4]
   2b398:	b128      	cbz	r0, 2b3a6 <nrf91_socket_offload_recvfrom+0x44>
		k_mutex_lock(ctx->lock, K_FOREVER);
   2b39a:	f04f 32ff 	mov.w	r2, #4294967295
   2b39e:	f04f 33ff 	mov.w	r3, #4294967295
   2b3a2:	f7ff ffdc 	bl	2b35e <k_mutex_lock.constprop.0>
}
   2b3a6:	4620      	mov	r0, r4
   2b3a8:	b00d      	add	sp, #52	; 0x34
   2b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   2b3ae:	f04f 0b24 	mov.w	fp, #36	; 0x24
   2b3b2:	f10d 0a0c 	add.w	sl, sp, #12
   2b3b6:	465a      	mov	r2, fp
   2b3b8:	2100      	movs	r1, #0
   2b3ba:	4650      	mov	r0, sl
   2b3bc:	f001 fc16 	bl	2cbec <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2b3c0:	ab02      	add	r3, sp, #8
   2b3c2:	4621      	mov	r1, r4
   2b3c4:	e9cd a300 	strd	sl, r3, [sp]
   2b3c8:	463a      	mov	r2, r7
   2b3ca:	4643      	mov	r3, r8
   2b3cc:	6830      	ldr	r0, [r6, #0]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2b3ce:	f8cd b008 	str.w	fp, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2b3d2:	f001 f9df 	bl	2c794 <nrf_recvfrom>
		if (retval < 0) {
   2b3d6:	1e04      	subs	r4, r0, #0
   2b3d8:	dbdd      	blt.n	2b396 <nrf91_socket_offload_recvfrom+0x34>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2b3da:	9b04      	ldr	r3, [sp, #16]
   2b3dc:	2b02      	cmp	r3, #2
   2b3de:	d10a      	bne.n	2b3f6 <nrf91_socket_offload_recvfrom+0x94>
	ptr->sin_port = nrf_in->sin_port;
   2b3e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2b3e4:	806b      	strh	r3, [r5, #2]
	ptr->sin_family = AF_INET;
   2b3e6:	2301      	movs	r3, #1
   2b3e8:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2b3ea:	9b06      	ldr	r3, [sp, #24]
   2b3ec:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2b3ee:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2b3f0:	f8c9 3000 	str.w	r3, [r9]
   2b3f4:	e7cf      	b.n	2b396 <nrf91_socket_offload_recvfrom+0x34>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2b3f6:	2b0a      	cmp	r3, #10
   2b3f8:	d1cd      	bne.n	2b396 <nrf91_socket_offload_recvfrom+0x34>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2b3fa:	4651      	mov	r1, sl
   2b3fc:	4628      	mov	r0, r5
   2b3fe:	f7ff ff07 	bl	2b210 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2b402:	2318      	movs	r3, #24
   2b404:	e7f4      	b.n	2b3f0 <nrf91_socket_offload_recvfrom+0x8e>

0002b406 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2b406:	2300      	movs	r3, #0
{
   2b408:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2b40a:	e9cd 3300 	strd	r3, r3, [sp]
   2b40e:	f7ff ffa8 	bl	2b362 <nrf91_socket_offload_recvfrom>
}
   2b412:	b003      	add	sp, #12
   2b414:	f85d fb04 	ldr.w	pc, [sp], #4

0002b418 <nrf91_socket_offload_close>:
{
   2b418:	b538      	push	{r3, r4, r5, lr}
   2b41a:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   2b41c:	6800      	ldr	r0, [r0, #0]
   2b41e:	f001 f991 	bl	2c744 <nrf_close>
	if (retval == 0) {
   2b422:	4604      	mov	r4, r0
   2b424:	b910      	cbnz	r0, 2b42c <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   2b426:	4628      	mov	r0, r5
   2b428:	f7f3 fdfc 	bl	1f024 <release_ctx>
}
   2b42c:	4620      	mov	r0, r4
   2b42e:	bd38      	pop	{r3, r4, r5, pc}

0002b430 <nrf91_socket_offload_setsockopt>:
{
   2b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   2b434:	2901      	cmp	r1, #1
{
   2b436:	b086      	sub	sp, #24
   2b438:	460c      	mov	r4, r1
   2b43a:	4615      	mov	r5, r2
   2b43c:	461e      	mov	r6, r3
   2b43e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2b440:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   2b444:	d002      	beq.n	2b44c <nrf91_socket_offload_setsockopt+0x1c>
   2b446:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2b44a:	d122      	bne.n	2b492 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2b44c:	4629      	mov	r1, r5
   2b44e:	4620      	mov	r0, r4
   2b450:	aa03      	add	r2, sp, #12
   2b452:	f7f3 fab1 	bl	1e9b8 <z_to_nrf_optname>
   2b456:	2800      	cmp	r0, #0
   2b458:	db1b      	blt.n	2b492 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2b45a:	2c01      	cmp	r4, #1
   2b45c:	d112      	bne.n	2b484 <nrf91_socket_offload_setsockopt+0x54>
   2b45e:	3d14      	subs	r5, #20
   2b460:	2d01      	cmp	r5, #1
   2b462:	d805      	bhi.n	2b470 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   2b464:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2b466:	6833      	ldr	r3, [r6, #0]
   2b468:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2b46a:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   2b46c:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2b46e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2b470:	4633      	mov	r3, r6
   2b472:	4621      	mov	r1, r4
   2b474:	4640      	mov	r0, r8
   2b476:	9a03      	ldr	r2, [sp, #12]
   2b478:	9700      	str	r7, [sp, #0]
   2b47a:	f001 f9ec 	bl	2c856 <nrf_setsockopt>
}
   2b47e:	b006      	add	sp, #24
   2b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2b484:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2b488:	d1f2      	bne.n	2b470 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2b48a:	2d0a      	cmp	r5, #10
   2b48c:	bf08      	it	eq
   2b48e:	2701      	moveq	r7, #1
   2b490:	e7ee      	b.n	2b470 <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   2b492:	f7ff fd19 	bl	2aec8 <__errno>
   2b496:	236d      	movs	r3, #109	; 0x6d
   2b498:	6003      	str	r3, [r0, #0]
   2b49a:	f04f 30ff 	mov.w	r0, #4294967295
   2b49e:	e7ee      	b.n	2b47e <nrf91_socket_offload_setsockopt+0x4e>

0002b4a0 <nrf91_socket_offload_bind>:
{
   2b4a0:	4603      	mov	r3, r0
   2b4a2:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2b4a4:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2b4a6:	880b      	ldrh	r3, [r1, #0]
{
   2b4a8:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2b4aa:	2b01      	cmp	r3, #1
{
   2b4ac:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2b4ae:	d10f      	bne.n	2b4d0 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2b4b0:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b4b2:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2b4b4:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2b4b8:	2302      	movs	r3, #2
   2b4ba:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b4bc:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2b4be:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2b4c2:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2b4c4:	4620      	mov	r0, r4
   2b4c6:	a901      	add	r1, sp, #4
   2b4c8:	f001 f9b4 	bl	2c834 <nrf_bind>
}
   2b4cc:	b00a      	add	sp, #40	; 0x28
   2b4ce:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2b4d0:	2b02      	cmp	r3, #2
   2b4d2:	d104      	bne.n	2b4de <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2b4d4:	a901      	add	r1, sp, #4
   2b4d6:	f7ff feaf 	bl	2b238 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2b4da:	2224      	movs	r2, #36	; 0x24
   2b4dc:	e7f2      	b.n	2b4c4 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2b4de:	f7ff fcf3 	bl	2aec8 <__errno>
   2b4e2:	2386      	movs	r3, #134	; 0x86
   2b4e4:	6003      	str	r3, [r0, #0]
   2b4e6:	f04f 30ff 	mov.w	r0, #4294967295
   2b4ea:	e7ef      	b.n	2b4cc <nrf91_socket_offload_bind+0x2c>

0002b4ec <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2b4ec:	280d      	cmp	r0, #13
   2b4ee:	d004      	beq.n	2b4fa <is_lfcr+0xe>
   2b4f0:	f1a0 030a 	sub.w	r3, r0, #10
   2b4f4:	4258      	negs	r0, r3
   2b4f6:	4158      	adcs	r0, r3
   2b4f8:	4770      	bx	lr
		return true;
   2b4fa:	2001      	movs	r0, #1
}
   2b4fc:	4770      	bx	lr

0002b4fe <skip_command_prefix>:
{
   2b4fe:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2b500:	6801      	ldr	r1, [r0, #0]
{
   2b502:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2b504:	1c8b      	adds	r3, r1, #2
   2b506:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2b508:	788c      	ldrb	r4, [r1, #2]
   2b50a:	4620      	mov	r0, r4
   2b50c:	f7ff ffee 	bl	2b4ec <is_lfcr>
   2b510:	b910      	cbnz	r0, 2b518 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b512:	b10c      	cbz	r4, 2b518 <skip_command_prefix+0x1a>
	(*cmd)++;
   2b514:	3103      	adds	r1, #3
   2b516:	6011      	str	r1, [r2, #0]
}
   2b518:	bd10      	pop	{r4, pc}

0002b51a <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2b51a:	6813      	ldr	r3, [r2, #0]
   2b51c:	f7f4 b95a 	b.w	1f7d4 <at_parser_max_params_from_str>

0002b520 <at_params_list_init>:
{
   2b520:	b538      	push	{r3, r4, r5, lr}
   2b522:	460d      	mov	r5, r1
	if (list == NULL) {
   2b524:	4604      	mov	r4, r0
   2b526:	b140      	cbz	r0, 2b53a <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2b528:	2110      	movs	r1, #16
   2b52a:	4628      	mov	r0, r5
   2b52c:	f001 fb20 	bl	2cb70 <k_calloc>
   2b530:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2b532:	b128      	cbz	r0, 2b540 <at_params_list_init+0x20>
	return 0;
   2b534:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2b536:	6025      	str	r5, [r4, #0]
}
   2b538:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2b53a:	f06f 0015 	mvn.w	r0, #21
   2b53e:	e7fb      	b.n	2b538 <at_params_list_init+0x18>
		return -ENOMEM;
   2b540:	f06f 000b 	mvn.w	r0, #11
   2b544:	e7f8      	b.n	2b538 <at_params_list_init+0x18>

0002b546 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2b546:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2b548:	4604      	mov	r4, r0
   2b54a:	b148      	cbz	r0, 2b560 <at_params_list_free+0x1a>
   2b54c:	6843      	ldr	r3, [r0, #4]
   2b54e:	b13b      	cbz	r3, 2b560 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2b550:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2b552:	f7f4 fa3d 	bl	1f9d0 <at_params_list_clear>
	k_free(list->params);
   2b556:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2b558:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2b55a:	f001 fafe 	bl	2cb5a <k_free>
	list->params = NULL;
   2b55e:	6065      	str	r5, [r4, #4]
}
   2b560:	bd38      	pop	{r3, r4, r5, pc}

0002b562 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2b562:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2b564:	b910      	cbnz	r0, 2b56c <at_params_empty_put+0xa>
		return -EINVAL;
   2b566:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2b56a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2b56c:	6843      	ldr	r3, [r0, #4]
   2b56e:	2b00      	cmp	r3, #0
   2b570:	d0f9      	beq.n	2b566 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2b572:	f7f4 f9db 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b576:	4604      	mov	r4, r0
   2b578:	2800      	cmp	r0, #0
   2b57a:	d0f4      	beq.n	2b566 <at_params_empty_put+0x4>
	at_param_clear(param);
   2b57c:	f7f4 fa0c 	bl	1f998 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2b580:	2304      	movs	r3, #4
	param->value.int_val = 0;
   2b582:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2b584:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2b586:	2300      	movs	r3, #0
	return 0;
   2b588:	2000      	movs	r0, #0
	param->value.int_val = 0;
   2b58a:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   2b58e:	e7ec      	b.n	2b56a <at_params_empty_put+0x8>

0002b590 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   2b590:	b570      	push	{r4, r5, r6, lr}
   2b592:	4616      	mov	r6, r2
   2b594:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   2b596:	b910      	cbnz	r0, 2b59e <at_params_int_put+0xe>
		return -EINVAL;
   2b598:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2b59c:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   2b59e:	6843      	ldr	r3, [r0, #4]
   2b5a0:	2b00      	cmp	r3, #0
   2b5a2:	d0f9      	beq.n	2b598 <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2b5a4:	f7f4 f9c2 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b5a8:	4604      	mov	r4, r0
   2b5aa:	2800      	cmp	r0, #0
   2b5ac:	d0f4      	beq.n	2b598 <at_params_int_put+0x8>
	at_param_clear(param);
   2b5ae:	f7f4 f9f3 	bl	1f998 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2b5b2:	2301      	movs	r3, #1
	return 0;
   2b5b4:	2000      	movs	r0, #0
	param->value.int_val = value;
   2b5b6:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   2b5ba:	7023      	strb	r3, [r4, #0]
	return 0;
   2b5bc:	e7ee      	b.n	2b59c <at_params_int_put+0xc>

0002b5be <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2b5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5c0:	4617      	mov	r7, r2
   2b5c2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2b5c4:	b910      	cbnz	r0, 2b5cc <at_params_string_put+0xe>
		return -EINVAL;
   2b5c6:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2b5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2b5cc:	6843      	ldr	r3, [r0, #4]
   2b5ce:	2b00      	cmp	r3, #0
   2b5d0:	d0f9      	beq.n	2b5c6 <at_params_string_put+0x8>
   2b5d2:	2a00      	cmp	r2, #0
   2b5d4:	d0f7      	beq.n	2b5c6 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2b5d6:	f7f4 f9a9 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b5da:	4604      	mov	r4, r0
   2b5dc:	2800      	cmp	r0, #0
   2b5de:	d0f2      	beq.n	2b5c6 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2b5e0:	1c68      	adds	r0, r5, #1
   2b5e2:	f001 fac1 	bl	2cb68 <k_malloc>
	if (param_value == NULL) {
   2b5e6:	4606      	mov	r6, r0
   2b5e8:	b160      	cbz	r0, 2b604 <at_params_string_put+0x46>
   2b5ea:	462a      	mov	r2, r5
   2b5ec:	4639      	mov	r1, r7
   2b5ee:	f001 faf0 	bl	2cbd2 <memcpy>
	at_param_clear(param);
   2b5f2:	4620      	mov	r0, r4
   2b5f4:	f7f4 f9d0 	bl	1f998 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2b5f8:	2302      	movs	r3, #2
	return 0;
   2b5fa:	2000      	movs	r0, #0
	param->size = str_len;
   2b5fc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2b5fe:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2b600:	60a6      	str	r6, [r4, #8]
	return 0;
   2b602:	e7e2      	b.n	2b5ca <at_params_string_put+0xc>
		return -ENOMEM;
   2b604:	f06f 000b 	mvn.w	r0, #11
   2b608:	e7df      	b.n	2b5ca <at_params_string_put+0xc>

0002b60a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2b60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b60c:	4617      	mov	r7, r2
   2b60e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2b610:	b910      	cbnz	r0, 2b618 <at_params_array_put+0xe>
		return -EINVAL;
   2b612:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2b616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2b618:	6843      	ldr	r3, [r0, #4]
   2b61a:	2b00      	cmp	r3, #0
   2b61c:	d0f9      	beq.n	2b612 <at_params_array_put+0x8>
   2b61e:	2a00      	cmp	r2, #0
   2b620:	d0f7      	beq.n	2b612 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2b622:	f7f4 f983 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b626:	4604      	mov	r4, r0
   2b628:	2800      	cmp	r0, #0
   2b62a:	d0f2      	beq.n	2b612 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2b62c:	4628      	mov	r0, r5
   2b62e:	f001 fa9b 	bl	2cb68 <k_malloc>
	if (param_value == NULL) {
   2b632:	4606      	mov	r6, r0
   2b634:	b160      	cbz	r0, 2b650 <at_params_array_put+0x46>
   2b636:	462a      	mov	r2, r5
   2b638:	4639      	mov	r1, r7
   2b63a:	f001 faca 	bl	2cbd2 <memcpy>
	at_param_clear(param);
   2b63e:	4620      	mov	r0, r4
   2b640:	f7f4 f9aa 	bl	1f998 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2b644:	2303      	movs	r3, #3
	return 0;
   2b646:	2000      	movs	r0, #0
	param->size = array_len;
   2b648:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2b64a:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2b64c:	60a6      	str	r6, [r4, #8]
	return 0;
   2b64e:	e7e2      	b.n	2b616 <at_params_array_put+0xc>
		return -ENOMEM;
   2b650:	f06f 000b 	mvn.w	r0, #11
   2b654:	e7df      	b.n	2b616 <at_params_array_put+0xc>

0002b656 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   2b656:	b5d0      	push	{r4, r6, r7, lr}
   2b658:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2b65a:	b910      	cbnz	r0, 2b662 <at_params_short_get+0xc>
		return -EINVAL;
   2b65c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   2b660:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2b662:	6843      	ldr	r3, [r0, #4]
   2b664:	2b00      	cmp	r3, #0
   2b666:	d0f9      	beq.n	2b65c <at_params_short_get+0x6>
   2b668:	2a00      	cmp	r2, #0
   2b66a:	d0f7      	beq.n	2b65c <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2b66c:	f7f4 f95e 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b670:	2800      	cmp	r0, #0
   2b672:	d0f3      	beq.n	2b65c <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2b674:	7803      	ldrb	r3, [r0, #0]
   2b676:	2b01      	cmp	r3, #1
   2b678:	d1f0      	bne.n	2b65c <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   2b67a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2b67e:	f513 4600 	adds.w	r6, r3, #32768	; 0x8000
   2b682:	f142 0700 	adc.w	r7, r2, #0
   2b686:	2f00      	cmp	r7, #0
   2b688:	bf08      	it	eq
   2b68a:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   2b68e:	d2e5      	bcs.n	2b65c <at_params_short_get+0x6>
	return 0;
   2b690:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   2b692:	8023      	strh	r3, [r4, #0]
	return 0;
   2b694:	e7e4      	b.n	2b660 <at_params_short_get+0xa>

0002b696 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2b696:	b510      	push	{r4, lr}
   2b698:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2b69a:	b910      	cbnz	r0, 2b6a2 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   2b69c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2b6a0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2b6a2:	6843      	ldr	r3, [r0, #4]
   2b6a4:	2b00      	cmp	r3, #0
   2b6a6:	d0f9      	beq.n	2b69c <at_params_unsigned_short_get+0x6>
   2b6a8:	2a00      	cmp	r2, #0
   2b6aa:	d0f7      	beq.n	2b69c <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2b6ac:	f7f4 f93e 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b6b0:	2800      	cmp	r0, #0
   2b6b2:	d0f3      	beq.n	2b69c <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2b6b4:	7803      	ldrb	r3, [r0, #0]
   2b6b6:	2b01      	cmp	r3, #1
   2b6b8:	d1f0      	bne.n	2b69c <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   2b6ba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2b6be:	2b00      	cmp	r3, #0
   2b6c0:	bf08      	it	eq
   2b6c2:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   2b6c6:	d2e9      	bcs.n	2b69c <at_params_unsigned_short_get+0x6>
	return 0;
   2b6c8:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2b6ca:	8022      	strh	r2, [r4, #0]
	return 0;
   2b6cc:	e7e8      	b.n	2b6a0 <at_params_unsigned_short_get+0xa>

0002b6ce <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   2b6ce:	b5d0      	push	{r4, r6, r7, lr}
   2b6d0:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2b6d2:	b910      	cbnz	r0, 2b6da <at_params_int_get+0xc>
		return -EINVAL;
   2b6d4:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   2b6d8:	bdd0      	pop	{r4, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2b6da:	6843      	ldr	r3, [r0, #4]
   2b6dc:	2b00      	cmp	r3, #0
   2b6de:	d0f9      	beq.n	2b6d4 <at_params_int_get+0x6>
   2b6e0:	2a00      	cmp	r2, #0
   2b6e2:	d0f7      	beq.n	2b6d4 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2b6e4:	f7f4 f922 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b6e8:	2800      	cmp	r0, #0
   2b6ea:	d0f3      	beq.n	2b6d4 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2b6ec:	7803      	ldrb	r3, [r0, #0]
   2b6ee:	2b01      	cmp	r3, #1
   2b6f0:	d1f0      	bne.n	2b6d4 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   2b6f2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2b6f6:	f113 4600 	adds.w	r6, r3, #2147483648	; 0x80000000
   2b6fa:	f142 0700 	adc.w	r7, r2, #0
   2b6fe:	2f01      	cmp	r7, #1
   2b700:	bf08      	it	eq
   2b702:	2e00      	cmpeq	r6, #0
   2b704:	d2e6      	bcs.n	2b6d4 <at_params_int_get+0x6>
	return 0;
   2b706:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   2b708:	6023      	str	r3, [r4, #0]
	return 0;
   2b70a:	e7e5      	b.n	2b6d8 <at_params_int_get+0xa>

0002b70c <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   2b70c:	b510      	push	{r4, lr}
   2b70e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2b710:	b910      	cbnz	r0, 2b718 <at_params_int64_get+0xc>
		return -EINVAL;
   2b712:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2b716:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2b718:	6843      	ldr	r3, [r0, #4]
   2b71a:	2b00      	cmp	r3, #0
   2b71c:	d0f9      	beq.n	2b712 <at_params_int64_get+0x6>
   2b71e:	2a00      	cmp	r2, #0
   2b720:	d0f7      	beq.n	2b712 <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2b722:	f7f4 f903 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b726:	2800      	cmp	r0, #0
   2b728:	d0f3      	beq.n	2b712 <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2b72a:	7803      	ldrb	r3, [r0, #0]
   2b72c:	2b01      	cmp	r3, #1
   2b72e:	d1f0      	bne.n	2b712 <at_params_int64_get+0x6>
	*value = param->value.int_val;
   2b730:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   2b734:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2b736:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   2b73a:	e7ec      	b.n	2b716 <at_params_int64_get+0xa>

0002b73c <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b73e:	4617      	mov	r7, r2
   2b740:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2b742:	b910      	cbnz	r0, 2b74a <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2b744:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2b74a:	6843      	ldr	r3, [r0, #4]
   2b74c:	2b00      	cmp	r3, #0
   2b74e:	d0f9      	beq.n	2b744 <at_params_string_get+0x8>
   2b750:	2a00      	cmp	r2, #0
   2b752:	d0f7      	beq.n	2b744 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2b754:	2c00      	cmp	r4, #0
   2b756:	d0f5      	beq.n	2b744 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2b758:	f7f4 f8e8 	bl	1f92c <at_params_get>
	if (param == NULL) {
   2b75c:	4606      	mov	r6, r0
   2b75e:	2800      	cmp	r0, #0
   2b760:	d0f0      	beq.n	2b744 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2b762:	7803      	ldrb	r3, [r0, #0]
   2b764:	2b02      	cmp	r3, #2
   2b766:	d1ed      	bne.n	2b744 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2b768:	f7f4 f8fa 	bl	1f960 <at_param_size>
	if (*len < param_len) {
   2b76c:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2b76e:	4605      	mov	r5, r0
	if (*len < param_len) {
   2b770:	4283      	cmp	r3, r0
   2b772:	d307      	bcc.n	2b784 <at_params_string_get+0x48>
   2b774:	4602      	mov	r2, r0
   2b776:	68b1      	ldr	r1, [r6, #8]
   2b778:	4638      	mov	r0, r7
   2b77a:	f001 fa2a 	bl	2cbd2 <memcpy>
	return 0;
   2b77e:	2000      	movs	r0, #0
	*len = param_len;
   2b780:	6025      	str	r5, [r4, #0]
	return 0;
   2b782:	e7e1      	b.n	2b748 <at_params_string_get+0xc>
		return -ENOMEM;
   2b784:	f06f 000b 	mvn.w	r0, #11
   2b788:	e7de      	b.n	2b748 <at_params_string_get+0xc>

0002b78a <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2b78a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2b78c:	4605      	mov	r5, r0
   2b78e:	b180      	cbz	r0, 2b7b2 <at_params_valid_count_get+0x28>
   2b790:	6843      	ldr	r3, [r0, #4]
   2b792:	b173      	cbz	r3, 2b7b2 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2b794:	2100      	movs	r1, #0
   2b796:	f7f4 f8c9 	bl	1f92c <at_params_get>
	size_t valid_i = 0;
   2b79a:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2b79c:	b108      	cbz	r0, 2b7a2 <at_params_valid_count_get+0x18>
   2b79e:	7803      	ldrb	r3, [r0, #0]
   2b7a0:	b90b      	cbnz	r3, 2b7a6 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2b7a2:	4620      	mov	r0, r4
   2b7a4:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2b7a6:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2b7a8:	4621      	mov	r1, r4
   2b7aa:	4628      	mov	r0, r5
   2b7ac:	f7f4 f8be 	bl	1f92c <at_params_get>
   2b7b0:	e7f4      	b.n	2b79c <at_params_valid_count_get+0x12>
		return -EINVAL;
   2b7b2:	f06f 0415 	mvn.w	r4, #21
   2b7b6:	e7f4      	b.n	2b7a2 <at_params_valid_count_get+0x18>

0002b7b8 <lte_lc_init_and_connect_async>:
{
   2b7b8:	b510      	push	{r4, lr}
   2b7ba:	4604      	mov	r4, r0
	err = init_and_config();
   2b7bc:	f7f4 fcf0 	bl	201a0 <init_and_config>
	if (err) {
   2b7c0:	b920      	cbnz	r0, 2b7cc <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   2b7c2:	4620      	mov	r0, r4
}
   2b7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   2b7c8:	f7f4 be22 	b.w	20410 <lte_lc_connect_async>
}
   2b7cc:	f06f 000d 	mvn.w	r0, #13
   2b7d0:	bd10      	pop	{r4, pc}

0002b7d2 <string_to_int>:
{
   2b7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b7d4:	460c      	mov	r4, r1
   2b7d6:	4605      	mov	r5, r0
   2b7d8:	4616      	mov	r6, r2
	errno = 0;
   2b7da:	f7ff fb75 	bl	2aec8 <__errno>
   2b7de:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   2b7e0:	4622      	mov	r2, r4
	errno = 0;
   2b7e2:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   2b7e4:	a901      	add	r1, sp, #4
   2b7e6:	4628      	mov	r0, r5
   2b7e8:	f7fd ffd2 	bl	29790 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2b7ec:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   2b7ee:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2b7f0:	42ab      	cmp	r3, r5
   2b7f2:	d103      	bne.n	2b7fc <string_to_int+0x2a>
		return -ENODATA;
   2b7f4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   2b7f8:	b002      	add	sp, #8
   2b7fa:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2b7fc:	781b      	ldrb	r3, [r3, #0]
   2b7fe:	2b00      	cmp	r3, #0
   2b800:	d1f8      	bne.n	2b7f4 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2b802:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   2b806:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2b808:	3303      	adds	r3, #3
   2b80a:	d802      	bhi.n	2b812 <string_to_int+0x40>
	return 0;
   2b80c:	2000      	movs	r0, #0
	*output = temp;
   2b80e:	6034      	str	r4, [r6, #0]
	return 0;
   2b810:	e7f2      	b.n	2b7f8 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2b812:	f7ff fb59 	bl	2aec8 <__errno>
   2b816:	6803      	ldr	r3, [r0, #0]
   2b818:	2b22      	cmp	r3, #34	; 0x22
   2b81a:	d1f7      	bne.n	2b80c <string_to_int+0x3a>
   2b81c:	e7ea      	b.n	2b7f4 <string_to_int+0x22>

0002b81e <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   2b81e:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   2b820:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   2b822:	b087      	sub	sp, #28
   2b824:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2b826:	ab01      	add	r3, sp, #4
   2b828:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   2b82a:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2b82c:	f7ff ff86 	bl	2b73c <at_params_string_get>
	if (err) {
   2b830:	b968      	cbnz	r0, 2b84e <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   2b832:	9b01      	ldr	r3, [sp, #4]
   2b834:	aa06      	add	r2, sp, #24
   2b836:	4413      	add	r3, r2
   2b838:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   2b83c:	4622      	mov	r2, r4
   2b83e:	4629      	mov	r1, r5
   2b840:	a802      	add	r0, sp, #8
   2b842:	f7ff ffc6 	bl	2b7d2 <string_to_int>
   2b846:	2800      	cmp	r0, #0
		return -ENODATA;
   2b848:	bf18      	it	ne
   2b84a:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   2b84e:	b007      	add	sp, #28
   2b850:	bd30      	pop	{r4, r5, pc}

0002b852 <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   2b852:	b508      	push	{r3, lr}
	date_time_core_init();
   2b854:	f7f5 fac8 	bl	20de8 <date_time_core_init>

	return 0;
}
   2b858:	2000      	movs	r0, #0
   2b85a:	bd08      	pop	{r3, pc}

0002b85c <date_time_is_valid>:
	return date_time_core_is_valid();
   2b85c:	f7f5 baf4 	b.w	20e48 <date_time_core_is_valid>

0002b860 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2b860:	4700      	bx	r0

0002b862 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b862:	f001 b90a 	b.w	2ca7a <z_impl_k_busy_wait>

0002b866 <nrf_gpio_pin_present_check>:
    switch (port)
   2b866:	0943      	lsrs	r3, r0, #5
   2b868:	bf0c      	ite	eq
   2b86a:	f04f 33ff 	moveq.w	r3, #4294967295
   2b86e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2b870:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2b874:	fa23 f000 	lsr.w	r0, r3, r0
}
   2b878:	f000 0001 	and.w	r0, r0, #1
   2b87c:	4770      	bx	lr

0002b87e <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2b87e:	0080      	lsls	r0, r0, #2
}
   2b880:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2b884:	4770      	bx	lr

0002b886 <nrf_gpio_reconfigure>:
{
   2b886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b88a:	4690      	mov	r8, r2
   2b88c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2b890:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b892:	a801      	add	r0, sp, #4
{
   2b894:	460e      	mov	r6, r1
   2b896:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b898:	f7f5 ff82 	bl	217a0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b89c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b89e:	f1b8 0f00 	cmp.w	r8, #0
   2b8a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b8a6:	bf14      	ite	ne
   2b8a8:	2302      	movne	r3, #2
   2b8aa:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b8ac:	2e00      	cmp	r6, #0
   2b8ae:	bf18      	it	ne
   2b8b0:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b8b4:	2d00      	cmp	r5, #0
   2b8b6:	bf14      	ite	ne
   2b8b8:	210c      	movne	r1, #12
   2b8ba:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b8bc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2b8be:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2b8c2:	bf14      	ite	ne
   2b8c4:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2b8c8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b8ca:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2b8cc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2b8d0:	bf14      	ite	ne
   2b8d2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2b8d6:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b8d8:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2b8dc:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2b8de:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b8e2:	b106      	cbz	r6, 2b8e6 <nrf_gpio_reconfigure+0x60>
   2b8e4:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2b8e6:	f1b8 0f00 	cmp.w	r8, #0
   2b8ea:	d003      	beq.n	2b8f4 <nrf_gpio_reconfigure+0x6e>
   2b8ec:	f898 8000 	ldrb.w	r8, [r8]
   2b8f0:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2b8f4:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2b8f6:	b10d      	cbz	r5, 2b8fc <nrf_gpio_reconfigure+0x76>
   2b8f8:	782d      	ldrb	r5, [r5, #0]
   2b8fa:	00ad      	lsls	r5, r5, #2
   2b8fc:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2b900:	b10c      	cbz	r4, 2b906 <nrf_gpio_reconfigure+0x80>
   2b902:	7822      	ldrb	r2, [r4, #0]
   2b904:	0214      	lsls	r4, r2, #8
   2b906:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2b908:	b10f      	cbz	r7, 2b90e <nrf_gpio_reconfigure+0x88>
   2b90a:	783f      	ldrb	r7, [r7, #0]
   2b90c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2b90e:	432c      	orrs	r4, r5
   2b910:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2b912:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   2b916:	b002      	add	sp, #8
   2b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b91c <nrf_gpio_cfg_sense_set>:
{
   2b91c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b91e:	f10d 030f 	add.w	r3, sp, #15
   2b922:	9301      	str	r3, [sp, #4]
   2b924:	2300      	movs	r3, #0
{
   2b926:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2b92a:	461a      	mov	r2, r3
   2b92c:	4619      	mov	r1, r3
   2b92e:	9300      	str	r3, [sp, #0]
   2b930:	f7ff ffa9 	bl	2b886 <nrf_gpio_reconfigure>
}
   2b934:	b005      	add	sp, #20
   2b936:	f85d fb04 	ldr.w	pc, [sp], #4

0002b93a <nrf_gpio_pin_clear>:
{
   2b93a:	b507      	push	{r0, r1, r2, lr}
   2b93c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b93e:	a801      	add	r0, sp, #4
   2b940:	f7f6 fb18 	bl	21f74 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2b944:	2301      	movs	r3, #1
   2b946:	9a01      	ldr	r2, [sp, #4]
   2b948:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2b94a:	60c3      	str	r3, [r0, #12]
}
   2b94c:	b003      	add	sp, #12
   2b94e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b952 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2b952:	1c43      	adds	r3, r0, #1
{
   2b954:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2b956:	d008      	beq.n	2b96a <spim_pin_uninit+0x18>
    nrf_gpio_cfg(
   2b958:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b95a:	a801      	add	r0, sp, #4
   2b95c:	f7f6 fb0a 	bl	21f74 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2b960:	2202      	movs	r2, #2
   2b962:	9b01      	ldr	r3, [sp, #4]
   2b964:	3380      	adds	r3, #128	; 0x80
   2b966:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2b96a:	b003      	add	sp, #12
   2b96c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b970 <set_ss_pin_state>:
{
   2b970:	b507      	push	{r0, r1, r2, lr}
   2b972:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2b974:	7fc0      	ldrb	r0, [r0, #31]
   2b976:	28ff      	cmp	r0, #255	; 0xff
   2b978:	d007      	beq.n	2b98a <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
   2b97a:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   2b97c:	079b      	lsls	r3, r3, #30
   2b97e:	bf58      	it	pl
   2b980:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2b984:	b921      	cbnz	r1, 2b990 <set_ss_pin_state+0x20>
        nrf_gpio_pin_clear(pin_number);
   2b986:	f7ff ffd8 	bl	2b93a <nrf_gpio_pin_clear>
}
   2b98a:	b003      	add	sp, #12
   2b98c:	f85d fb04 	ldr.w	pc, [sp], #4
        nrf_gpio_pin_set(pin_number);
   2b990:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b992:	a801      	add	r0, sp, #4
   2b994:	f7f6 faee 	bl	21f74 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b998:	2301      	movs	r3, #1
   2b99a:	9a01      	ldr	r2, [sp, #4]
   2b99c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b99e:	6083      	str	r3, [r0, #8]
   2b9a0:	e7f3      	b.n	2b98a <set_ss_pin_state+0x1a>

0002b9a2 <nrf_gpio_pin_write>:
{
   2b9a2:	b507      	push	{r0, r1, r2, lr}
    if (value == 0)
   2b9a4:	b921      	cbnz	r1, 2b9b0 <nrf_gpio_pin_write+0xe>
        nrf_gpio_pin_clear(pin_number);
   2b9a6:	f7ff ffc8 	bl	2b93a <nrf_gpio_pin_clear>
}
   2b9aa:	b003      	add	sp, #12
   2b9ac:	f85d fb04 	ldr.w	pc, [sp], #4
        nrf_gpio_pin_set(pin_number);
   2b9b0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b9b2:	a801      	add	r0, sp, #4
   2b9b4:	f7f6 fade 	bl	21f74 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2b9b8:	2301      	movs	r3, #1
   2b9ba:	9a01      	ldr	r2, [sp, #4]
   2b9bc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2b9be:	6083      	str	r3, [r0, #8]
}
   2b9c0:	e7f3      	b.n	2b9aa <nrf_gpio_pin_write+0x8>

0002b9c2 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2b9c2:	7b0a      	ldrb	r2, [r1, #12]
{
   2b9c4:	4603      	mov	r3, r0
   2b9c6:	2a03      	cmp	r2, #3
   2b9c8:	d829      	bhi.n	2ba1e <xfer_completeness_check+0x5c>
   2b9ca:	e8df f002 	tbb	[pc, r2]
   2b9ce:	2521      	.short	0x2521
   2b9d0:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2b9d2:	688a      	ldr	r2, [r1, #8]
   2b9d4:	0350      	lsls	r0, r2, #13
   2b9d6:	d504      	bpl.n	2b9e2 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   2b9d8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   2b9dc:	6908      	ldr	r0, [r1, #16]
   2b9de:	4290      	cmp	r0, r2
   2b9e0:	d107      	bne.n	2b9f2 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2b9e2:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2b9e4:	0352      	lsls	r2, r2, #13
   2b9e6:	d41a      	bmi.n	2ba1e <xfer_completeness_check+0x5c>
   2b9e8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2b9ec:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2b9ee:	4291      	cmp	r1, r2
   2b9f0:	d015      	beq.n	2ba1e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2b9f2:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2b9f4:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2b9f6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2b9fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2b9fe:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   2ba00:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2ba04:	6908      	ldr	r0, [r1, #16]
   2ba06:	4290      	cmp	r0, r2
   2ba08:	d1f3      	bne.n	2b9f2 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2ba0a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2ba0e:	e7ed      	b.n	2b9ec <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   2ba10:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2ba14:	6909      	ldr	r1, [r1, #16]
   2ba16:	e7ea      	b.n	2b9ee <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   2ba18:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2ba1c:	e7fa      	b.n	2ba14 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2ba1e:	2001      	movs	r0, #1
}
   2ba20:	4770      	bx	lr

0002ba22 <nrf_gpio_pin_set>:
{
   2ba22:	b507      	push	{r0, r1, r2, lr}
   2ba24:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ba26:	a801      	add	r0, sp, #4
   2ba28:	f7f7 f8b2 	bl	22b90 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ba2c:	2301      	movs	r3, #1
   2ba2e:	9a01      	ldr	r2, [sp, #4]
   2ba30:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ba32:	6083      	str	r3, [r0, #8]
}
   2ba34:	b003      	add	sp, #12
   2ba36:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba3a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2ba3a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2ba3c:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   2ba3e:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2ba40:	bf97      	itett	ls
   2ba42:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   2ba44:	f103 33ff 	addhi.w	r3, r3, #4294967295
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2ba48:	18d2      	addls	r2, r2, r3
   2ba4a:	f102 32ff 	addls.w	r2, r2, #4294967295
   2ba4e:	bf94      	ite	ls
   2ba50:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   2ba52:	1a58      	subhi	r0, r3, r1
}
   2ba54:	4770      	bx	lr

0002ba56 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2ba56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ba5a:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2ba5c:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
   2ba60:	6867      	ldr	r7, [r4, #4]
   2ba62:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   2ba66:	4296      	cmp	r6, r2
   2ba68:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2ba6c:	4689      	mov	r9, r1
  if (Rem > NumBytes) {
   2ba6e:	4438      	add	r0, r7
   2ba70:	d906      	bls.n	2ba80 <_WriteNoCheck+0x2a>
   2ba72:	f001 f8ae 	bl	2cbd2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2ba76:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   2ba7a:	60e5      	str	r5, [r4, #12]
}
   2ba7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2ba80:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2ba82:	eba5 0508 	sub.w	r5, r5, r8
   2ba86:	f001 f8a4 	bl	2cbd2 <memcpy>
   2ba8a:	462a      	mov	r2, r5
   2ba8c:	6860      	ldr	r0, [r4, #4]
   2ba8e:	eb09 0106 	add.w	r1, r9, r6
   2ba92:	e7ee      	b.n	2ba72 <_WriteNoCheck+0x1c>

0002ba94 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ba98:	4606      	mov	r6, r0
   2ba9a:	4689      	mov	r9, r1
   2ba9c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2ba9e:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   2baa2:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2baa4:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   2baa6:	68b3      	ldr	r3, [r6, #8]
   2baa8:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2baaa:	bf28      	it	cs
   2baac:	18e4      	addcs	r4, r4, r3
   2baae:	3c01      	subs	r4, #1
   2bab0:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2bab2:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2bab4:	42bc      	cmp	r4, r7
   2bab6:	bf28      	it	cs
   2bab8:	463c      	movcs	r4, r7
   2baba:	4294      	cmp	r4, r2
   2babc:	bf28      	it	cs
   2babe:	4614      	movcs	r4, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2bac0:	6870      	ldr	r0, [r6, #4]
   2bac2:	4649      	mov	r1, r9
   2bac4:	4622      	mov	r2, r4
   2bac6:	4428      	add	r0, r5
   2bac8:	f001 f883 	bl	2cbd2 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2bacc:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2bace:	4425      	add	r5, r4
      WrOff = 0u;
   2bad0:	42ab      	cmp	r3, r5
   2bad2:	bf08      	it	eq
   2bad4:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
   2bad6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2bad8:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   2bada:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2badc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   2bae0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2bae2:	2f00      	cmp	r7, #0
   2bae4:	d1de      	bne.n	2baa4 <_WriteBlocking+0x10>
}
   2bae6:	4640      	mov	r0, r8
   2bae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002baec <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2baec:	f7f7 b8e0 	b.w	22cb0 <_DoInit>

0002baf0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2baf0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2baf2:	f7ff fffb 	bl	2baec <SEGGER_RTT_Init>

	return 0;
}
   2baf6:	2000      	movs	r0, #0
   2baf8:	bd08      	pop	{r3, pc}

0002bafa <rpc_handle_ctrl_message>:
   2bafa:	2902      	cmp	r1, #2
   2bafc:	b510      	push	{r4, lr}
   2bafe:	4604      	mov	r4, r0
   2bb00:	d005      	beq.n	2bb0e <rpc_handle_ctrl_message+0x14>
   2bb02:	2904      	cmp	r1, #4
   2bb04:	d001      	beq.n	2bb0a <rpc_handle_ctrl_message+0x10>
   2bb06:	2901      	cmp	r1, #1
   2bb08:	d107      	bne.n	2bb1a <rpc_handle_ctrl_message+0x20>
   2bb0a:	2000      	movs	r0, #0
   2bb0c:	bd10      	pop	{r4, pc}
   2bb0e:	6880      	ldr	r0, [r0, #8]
   2bb10:	2800      	cmp	r0, #0
   2bb12:	d0fa      	beq.n	2bb0a <rpc_handle_ctrl_message+0x10>
   2bb14:	f000 f833 	bl	2bb7e <rpc_transport_local_data_free>
   2bb18:	e7f7      	b.n	2bb0a <rpc_handle_ctrl_message+0x10>
   2bb1a:	6880      	ldr	r0, [r0, #8]
   2bb1c:	b108      	cbz	r0, 2bb22 <rpc_handle_ctrl_message+0x28>
   2bb1e:	f000 f82e 	bl	2bb7e <rpc_transport_local_data_free>
   2bb22:	4620      	mov	r0, r4
   2bb24:	f000 f827 	bl	2bb76 <rpc_transport_msg_free>
   2bb28:	e7ef      	b.n	2bb0a <rpc_handle_ctrl_message+0x10>

0002bb2a <rpc_message_send>:
   2bb2a:	6843      	ldr	r3, [r0, #4]
   2bb2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2bb30:	f043 0302 	orr.w	r3, r3, #2
   2bb34:	6043      	str	r3, [r0, #4]
   2bb36:	f000 b826 	b.w	2bb86 <rpc_transport_data_msg_send>

0002bb3a <rpc_message_alloc>:
   2bb3a:	b570      	push	{r4, r5, r6, lr}
   2bb3c:	4606      	mov	r6, r0
   2bb3e:	b130      	cbz	r0, 2bb4e <rpc_message_alloc+0x14>
   2bb40:	f000 f81b 	bl	2bb7a <rpc_transport_data_alloc>
   2bb44:	4605      	mov	r5, r0
   2bb46:	b918      	cbnz	r0, 2bb50 <rpc_message_alloc+0x16>
   2bb48:	2400      	movs	r4, #0
   2bb4a:	4620      	mov	r0, r4
   2bb4c:	bd70      	pop	{r4, r5, r6, pc}
   2bb4e:	4605      	mov	r5, r0
   2bb50:	f000 f80f 	bl	2bb72 <rpc_transport_data_msg_alloc>
   2bb54:	4604      	mov	r4, r0
   2bb56:	b110      	cbz	r0, 2bb5e <rpc_message_alloc+0x24>
   2bb58:	60c6      	str	r6, [r0, #12]
   2bb5a:	6085      	str	r5, [r0, #8]
   2bb5c:	e7f5      	b.n	2bb4a <rpc_message_alloc+0x10>
   2bb5e:	2d00      	cmp	r5, #0
   2bb60:	d0f2      	beq.n	2bb48 <rpc_message_alloc+0xe>
   2bb62:	4628      	mov	r0, r5
   2bb64:	f000 f80b 	bl	2bb7e <rpc_transport_local_data_free>
   2bb68:	e7ef      	b.n	2bb4a <rpc_message_alloc+0x10>

0002bb6a <rpc_message_free>:
   2bb6a:	f000 b804 	b.w	2bb76 <rpc_transport_msg_free>

0002bb6e <rpc_message_data_free>:
   2bb6e:	f000 b808 	b.w	2bb82 <rpc_transport_peer_data_free>

0002bb72 <rpc_transport_data_msg_alloc>:
   2bb72:	f7f7 bb69 	b.w	23248 <rpc_transport_ipc_data_msg_alloc>

0002bb76 <rpc_transport_msg_free>:
   2bb76:	f7f7 bbb3 	b.w	232e0 <rpc_transport_ipc_msg_free>

0002bb7a <rpc_transport_data_alloc>:
   2bb7a:	f7f7 bb97 	b.w	232ac <rpc_transport_ipc_data_alloc>

0002bb7e <rpc_transport_local_data_free>:
   2bb7e:	f000 b804 	b.w	2bb8a <rpc_transport_ipc_local_data_free>

0002bb82 <rpc_transport_peer_data_free>:
   2bb82:	f000 b809 	b.w	2bb98 <rpc_transport_ipc_peer_data_free>

0002bb86 <rpc_transport_data_msg_send>:
   2bb86:	f7f7 bb23 	b.w	231d0 <rpc_transport_ipc_data_msg_send>

0002bb8a <rpc_transport_ipc_local_data_free>:
   2bb8a:	b508      	push	{r3, lr}
   2bb8c:	f7f2 fee8 	bl	1e960 <nrf_modem_os_shm_tx_free>
   2bb90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bb94:	f7f2 beae 	b.w	1e8f4 <nrf_modem_os_application_irq_set>

0002bb98 <rpc_transport_ipc_peer_data_free>:
   2bb98:	b510      	push	{r4, lr}
   2bb9a:	4604      	mov	r4, r0
   2bb9c:	f7f7 fb66 	bl	2326c <rpc_transport_ipc_ctrl_msg_alloc>
   2bba0:	2101      	movs	r1, #1
   2bba2:	2200      	movs	r2, #0
   2bba4:	7001      	strb	r1, [r0, #0]
   2bba6:	2102      	movs	r1, #2
   2bba8:	6084      	str	r4, [r0, #8]
   2bbaa:	7042      	strb	r2, [r0, #1]
   2bbac:	7081      	strb	r1, [r0, #2]
   2bbae:	70c2      	strb	r2, [r0, #3]
   2bbb0:	f7f7 fb2c 	bl	2320c <rpc_transport_ipc_ctrl_msg_send>
   2bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bbb8:	f7f2 be9c 	b.w	1e8f4 <nrf_modem_os_application_irq_set>

0002bbbc <rpc_client_request_alloc>:
   2bbbc:	b508      	push	{r3, lr}
   2bbbe:	f7ff ffbc 	bl	2bb3a <rpc_message_alloc>
   2bbc2:	b100      	cbz	r0, 2bbc6 <rpc_client_request_alloc+0xa>
   2bbc4:	3008      	adds	r0, #8
   2bbc6:	bd08      	pop	{r3, pc}

0002bbc8 <rpc_client_request_send>:
   2bbc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2bbcc:	4610      	mov	r0, r2
   2bbce:	f840 1d08 	str.w	r1, [r0, #-8]!
   2bbd2:	f7ff bfaa 	b.w	2bb2a <rpc_message_send>

0002bbd6 <rpc_client_message_free>:
   2bbd6:	3808      	subs	r0, #8
   2bbd8:	f7ff bfc7 	b.w	2bb6a <rpc_message_free>

0002bbdc <rpc_client_data_free>:
   2bbdc:	f7ff bfc7 	b.w	2bb6e <rpc_message_data_free>

0002bbe0 <packet_handler_alloc_and_init>:
   2bbe0:	b538      	push	{r3, r4, r5, lr}
   2bbe2:	4604      	mov	r4, r0
   2bbe4:	4608      	mov	r0, r1
   2bbe6:	4611      	mov	r1, r2
   2bbe8:	4622      	mov	r2, r4
   2bbea:	f7f9 fe6d 	bl	258c8 <packet_handler_create>
   2bbee:	61e0      	str	r0, [r4, #28]
   2bbf0:	b158      	cbz	r0, 2bc0a <packet_handler_alloc_and_init+0x2a>
   2bbf2:	6803      	ldr	r3, [r0, #0]
   2bbf4:	681b      	ldr	r3, [r3, #0]
   2bbf6:	4798      	blx	r3
   2bbf8:	4605      	mov	r5, r0
   2bbfa:	b120      	cbz	r0, 2bc06 <packet_handler_alloc_and_init+0x26>
   2bbfc:	69e0      	ldr	r0, [r4, #28]
   2bbfe:	f000 fce3 	bl	2c5c8 <packet_handler_delete>
   2bc02:	2300      	movs	r3, #0
   2bc04:	61e3      	str	r3, [r4, #28]
   2bc06:	4628      	mov	r0, r5
   2bc08:	bd38      	pop	{r3, r4, r5, pc}
   2bc0a:	250c      	movs	r5, #12
   2bc0c:	e7fb      	b.n	2bc06 <packet_handler_alloc_and_init+0x26>

0002bc0e <socket_free>:
   2bc0e:	b510      	push	{r4, lr}
   2bc10:	4604      	mov	r4, r0
   2bc12:	69c0      	ldr	r0, [r0, #28]
   2bc14:	b108      	cbz	r0, 2bc1a <socket_free+0xc>
   2bc16:	f000 fcd7 	bl	2c5c8 <packet_handler_delete>
   2bc1a:	4620      	mov	r0, r4
   2bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bc20:	222c      	movs	r2, #44	; 0x2c
   2bc22:	2100      	movs	r1, #0
   2bc24:	f000 bfe2 	b.w	2cbec <memset>

0002bc28 <interface_socket_event_get>:
   2bc28:	b510      	push	{r4, lr}
   2bc2a:	4604      	mov	r4, r0
   2bc2c:	b189      	cbz	r1, 2bc52 <interface_socket_event_get+0x2a>
   2bc2e:	f7f7 fda3 	bl	23778 <interface_socket_from_handle_get>
   2bc32:	b158      	cbz	r0, 2bc4c <interface_socket_event_get+0x24>
   2bc34:	6803      	ldr	r3, [r0, #0]
   2bc36:	0c1b      	lsrs	r3, r3, #16
   2bc38:	f003 020a 	and.w	r2, r3, #10
   2bc3c:	2a0a      	cmp	r2, #10
   2bc3e:	bf14      	ite	ne
   2bc40:	f003 030f 	andne.w	r3, r3, #15
   2bc44:	f003 030d 	andeq.w	r3, r3, #13
   2bc48:	600b      	str	r3, [r1, #0]
   2bc4a:	e002      	b.n	2bc52 <interface_socket_event_get+0x2a>
   2bc4c:	2c00      	cmp	r4, #0
   2bc4e:	da01      	bge.n	2bc54 <interface_socket_event_get+0x2c>
   2bc50:	6008      	str	r0, [r1, #0]
   2bc52:	bd10      	pop	{r4, pc}
   2bc54:	2310      	movs	r3, #16
   2bc56:	e7f7      	b.n	2bc48 <interface_socket_event_get+0x20>

0002bc58 <ip_recvd_packet_free_cb>:
   2bc58:	b510      	push	{r4, lr}
   2bc5a:	4604      	mov	r4, r0
   2bc5c:	6800      	ldr	r0, [r0, #0]
   2bc5e:	f7ff ffbd 	bl	2bbdc <rpc_client_data_free>
   2bc62:	68a0      	ldr	r0, [r4, #8]
   2bc64:	b118      	cbz	r0, 2bc6e <ip_recvd_packet_free_cb+0x16>
   2bc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bc6a:	f7f2 be6b 	b.w	1e944 <nrf_modem_os_free>
   2bc6e:	bd10      	pop	{r4, pc}

0002bc70 <protocol_verify>:
   2bc70:	b508      	push	{r3, lr}
   2bc72:	4603      	mov	r3, r0
   2bc74:	4608      	mov	r0, r1
   2bc76:	b169      	cbz	r1, 2bc94 <protocol_verify+0x24>
   2bc78:	2b01      	cmp	r3, #1
   2bc7a:	d107      	bne.n	2bc8c <protocol_verify+0x1c>
   2bc7c:	2901      	cmp	r1, #1
   2bc7e:	d013      	beq.n	2bca8 <protocol_verify+0x38>
   2bc80:	206b      	movs	r0, #107	; 0x6b
   2bc82:	f7ff fa1c 	bl	2b0be <nrf_modem_os_errno_set>
   2bc86:	f04f 30ff 	mov.w	r0, #4294967295
   2bc8a:	bd08      	pop	{r3, pc}
   2bc8c:	2b02      	cmp	r3, #2
   2bc8e:	d10b      	bne.n	2bca8 <protocol_verify+0x38>
   2bc90:	2902      	cmp	r1, #2
   2bc92:	e7f4      	b.n	2bc7e <protocol_verify+0xe>
   2bc94:	2b01      	cmp	r3, #1
   2bc96:	d101      	bne.n	2bc9c <protocol_verify+0x2c>
   2bc98:	6013      	str	r3, [r2, #0]
   2bc9a:	e7f6      	b.n	2bc8a <protocol_verify+0x1a>
   2bc9c:	2b03      	cmp	r3, #3
   2bc9e:	d101      	bne.n	2bca4 <protocol_verify+0x34>
   2bca0:	6011      	str	r1, [r2, #0]
   2bca2:	e7f2      	b.n	2bc8a <protocol_verify+0x1a>
   2bca4:	2302      	movs	r3, #2
   2bca6:	e7f7      	b.n	2bc98 <protocol_verify+0x28>
   2bca8:	2000      	movs	r0, #0
   2bcaa:	e7ee      	b.n	2bc8a <protocol_verify+0x1a>

0002bcac <ip_addr_parse>:
   2bcac:	b570      	push	{r4, r5, r6, lr}
   2bcae:	684d      	ldr	r5, [r1, #4]
   2bcb0:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   2bcb4:	4285      	cmp	r5, r0
   2bcb6:	d11f      	bne.n	2bcf8 <ip_addr_parse+0x4c>
   2bcb8:	7808      	ldrb	r0, [r1, #0]
   2bcba:	4290      	cmp	r0, r2
   2bcbc:	d11e      	bne.n	2bcfc <ip_addr_parse+0x50>
   2bcbe:	2d02      	cmp	r5, #2
   2bcc0:	d109      	bne.n	2bcd6 <ip_addr_parse+0x2a>
   2bcc2:	2810      	cmp	r0, #16
   2bcc4:	d11a      	bne.n	2bcfc <ip_addr_parse+0x50>
   2bcc6:	890a      	ldrh	r2, [r1, #8]
   2bcc8:	8032      	strh	r2, [r6, #0]
   2bcca:	2204      	movs	r2, #4
   2bccc:	801a      	strh	r2, [r3, #0]
   2bcce:	68cb      	ldr	r3, [r1, #12]
   2bcd0:	6023      	str	r3, [r4, #0]
   2bcd2:	2000      	movs	r0, #0
   2bcd4:	bd70      	pop	{r4, r5, r6, pc}
   2bcd6:	2d0a      	cmp	r5, #10
   2bcd8:	d110      	bne.n	2bcfc <ip_addr_parse+0x50>
   2bcda:	2824      	cmp	r0, #36	; 0x24
   2bcdc:	d10e      	bne.n	2bcfc <ip_addr_parse+0x50>
   2bcde:	890a      	ldrh	r2, [r1, #8]
   2bce0:	8032      	strh	r2, [r6, #0]
   2bce2:	2210      	movs	r2, #16
   2bce4:	801a      	strh	r2, [r3, #0]
   2bce6:	188b      	adds	r3, r1, r2
   2bce8:	3120      	adds	r1, #32
   2bcea:	f853 2b04 	ldr.w	r2, [r3], #4
   2bcee:	428b      	cmp	r3, r1
   2bcf0:	f844 2b04 	str.w	r2, [r4], #4
   2bcf4:	d1f9      	bne.n	2bcea <ip_addr_parse+0x3e>
   2bcf6:	e7ec      	b.n	2bcd2 <ip_addr_parse+0x26>
   2bcf8:	206a      	movs	r0, #106	; 0x6a
   2bcfa:	e7eb      	b.n	2bcd4 <ip_addr_parse+0x28>
   2bcfc:	2016      	movs	r0, #22
   2bcfe:	e7e9      	b.n	2bcd4 <ip_addr_parse+0x28>

0002bd00 <ip_interface_request_create>:
   2bd00:	b570      	push	{r4, r5, r6, lr}
   2bd02:	4606      	mov	r6, r0
   2bd04:	4618      	mov	r0, r3
   2bd06:	460d      	mov	r5, r1
   2bd08:	4614      	mov	r4, r2
   2bd0a:	f7ff ff57 	bl	2bbbc <rpc_client_request_alloc>
   2bd0e:	b148      	cbz	r0, 2bd24 <ip_interface_request_create+0x24>
   2bd10:	2300      	movs	r3, #0
   2bd12:	2208      	movs	r2, #8
   2bd14:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2bd18:	60c4      	str	r4, [r0, #12]
   2bd1a:	6105      	str	r5, [r0, #16]
   2bd1c:	7202      	strb	r2, [r0, #8]
   2bd1e:	7243      	strb	r3, [r0, #9]
   2bd20:	7283      	strb	r3, [r0, #10]
   2bd22:	72c3      	strb	r3, [r0, #11]
   2bd24:	bd70      	pop	{r4, r5, r6, pc}

0002bd26 <ip_interface_wait>:
   2bd26:	b538      	push	{r3, r4, r5, lr}
   2bd28:	4605      	mov	r5, r0
   2bd2a:	f7f7 fcab 	bl	23684 <interface_socket_wait>
   2bd2e:	4604      	mov	r4, r0
   2bd30:	b938      	cbnz	r0, 2bd42 <ip_interface_wait+0x1c>
   2bd32:	4628      	mov	r0, r5
   2bd34:	f7f7 fd20 	bl	23778 <interface_socket_from_handle_get>
   2bd38:	b118      	cbz	r0, 2bd42 <ip_interface_wait+0x1c>
   2bd3a:	6844      	ldr	r4, [r0, #4]
   2bd3c:	b10c      	cbz	r4, 2bd42 <ip_interface_wait+0x1c>
   2bd3e:	2300      	movs	r3, #0
   2bd40:	6043      	str	r3, [r0, #4]
   2bd42:	4620      	mov	r0, r4
   2bd44:	bd38      	pop	{r3, r4, r5, pc}

0002bd46 <ip_interface_recvfrom>:
   2bd46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd4a:	b087      	sub	sp, #28
   2bd4c:	4681      	mov	r9, r0
   2bd4e:	461e      	mov	r6, r3
   2bd50:	4690      	mov	r8, r2
   2bd52:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2bd54:	9101      	str	r1, [sp, #4]
   2bd56:	2a00      	cmp	r2, #0
   2bd58:	f000 80e8 	beq.w	2bf2c <ip_interface_recvfrom+0x1e6>
   2bd5c:	b11b      	cbz	r3, 2bd66 <ip_interface_recvfrom+0x20>
   2bd5e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2bd62:	f000 80e5 	beq.w	2bf30 <ip_interface_recvfrom+0x1ea>
   2bd66:	4648      	mov	r0, r9
   2bd68:	f7f7 fd06 	bl	23778 <interface_socket_from_handle_get>
   2bd6c:	4604      	mov	r4, r0
   2bd6e:	2800      	cmp	r0, #0
   2bd70:	f000 80e0 	beq.w	2bf34 <ip_interface_recvfrom+0x1ee>
   2bd74:	6803      	ldr	r3, [r0, #0]
   2bd76:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   2bd7a:	d10f      	bne.n	2bd9c <ip_interface_recvfrom+0x56>
   2bd7c:	6802      	ldr	r2, [r0, #0]
   2bd7e:	b292      	uxth	r2, r2
   2bd80:	2a06      	cmp	r2, #6
   2bd82:	f000 809e 	beq.w	2bec2 <ip_interface_recvfrom+0x17c>
   2bd86:	6802      	ldr	r2, [r0, #0]
   2bd88:	461e      	mov	r6, r3
   2bd8a:	b292      	uxth	r2, r2
   2bd8c:	2a07      	cmp	r2, #7
   2bd8e:	469a      	mov	sl, r3
   2bd90:	f000 8099 	beq.w	2bec6 <ip_interface_recvfrom+0x180>
   2bd94:	2280      	movs	r2, #128	; 0x80
   2bd96:	f04f 35ff 	mov.w	r5, #4294967295
   2bd9a:	e084      	b.n	2bea6 <ip_interface_recvfrom+0x160>
   2bd9c:	07b1      	lsls	r1, r6, #30
   2bd9e:	d422      	bmi.n	2bde6 <ip_interface_recvfrom+0xa0>
   2bda0:	6803      	ldr	r3, [r0, #0]
   2bda2:	00da      	lsls	r2, r3, #3
   2bda4:	d522      	bpl.n	2bdec <ip_interface_recvfrom+0xa6>
   2bda6:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   2bdaa:	f04f 35ff 	mov.w	r5, #4294967295
   2bdae:	f006 0b10 	and.w	fp, r6, #16
   2bdb2:	6822      	ldr	r2, [r4, #0]
   2bdb4:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   2bdb8:	d01b      	beq.n	2bdf2 <ip_interface_recvfrom+0xac>
   2bdba:	6822      	ldr	r2, [r4, #0]
   2bdbc:	69e0      	ldr	r0, [r4, #28]
   2bdbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   2bdc2:	6022      	str	r2, [r4, #0]
   2bdc4:	6802      	ldr	r2, [r0, #0]
   2bdc6:	68d2      	ldr	r2, [r2, #12]
   2bdc8:	4790      	blx	r2
   2bdca:	1c43      	adds	r3, r0, #1
   2bdcc:	4605      	mov	r5, r0
   2bdce:	d029      	beq.n	2be24 <ip_interface_recvfrom+0xde>
   2bdd0:	4580      	cmp	r8, r0
   2bdd2:	dd05      	ble.n	2bde0 <ip_interface_recvfrom+0x9a>
   2bdd4:	6923      	ldr	r3, [r4, #16]
   2bdd6:	2b01      	cmp	r3, #1
   2bdd8:	d102      	bne.n	2bde0 <ip_interface_recvfrom+0x9a>
   2bdda:	f1bb 0f00 	cmp.w	fp, #0
   2bdde:	d125      	bne.n	2be2c <ip_interface_recvfrom+0xe6>
   2bde0:	f04f 0a00 	mov.w	sl, #0
   2bde4:	e04a      	b.n	2be7c <ip_interface_recvfrom+0x136>
   2bde6:	f04f 0a00 	mov.w	sl, #0
   2bdea:	e7de      	b.n	2bdaa <ip_interface_recvfrom+0x64>
   2bdec:	f04f 0a01 	mov.w	sl, #1
   2bdf0:	e7db      	b.n	2bdaa <ip_interface_recvfrom+0x64>
   2bdf2:	6821      	ldr	r1, [r4, #0]
   2bdf4:	0308      	lsls	r0, r1, #12
   2bdf6:	d515      	bpl.n	2be24 <ip_interface_recvfrom+0xde>
   2bdf8:	6821      	ldr	r1, [r4, #0]
   2bdfa:	b289      	uxth	r1, r1
   2bdfc:	290d      	cmp	r1, #13
   2bdfe:	d011      	beq.n	2be24 <ip_interface_recvfrom+0xde>
   2be00:	6923      	ldr	r3, [r4, #16]
   2be02:	2b01      	cmp	r3, #1
   2be04:	f000 809e 	beq.w	2bf44 <ip_interface_recvfrom+0x1fe>
   2be08:	4692      	mov	sl, r2
   2be0a:	2280      	movs	r2, #128	; 0x80
   2be0c:	6823      	ldr	r3, [r4, #0]
   2be0e:	0c1b      	lsrs	r3, r3, #16
   2be10:	041b      	lsls	r3, r3, #16
   2be12:	f043 030d 	orr.w	r3, r3, #13
   2be16:	6023      	str	r3, [r4, #0]
   2be18:	6823      	ldr	r3, [r4, #0]
   2be1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2be1e:	6023      	str	r3, [r4, #0]
   2be20:	2600      	movs	r6, #0
   2be22:	e040      	b.n	2bea6 <ip_interface_recvfrom+0x160>
   2be24:	f1ba 0f00 	cmp.w	sl, #0
   2be28:	f000 808d 	beq.w	2bf46 <ip_interface_recvfrom+0x200>
   2be2c:	6a23      	ldr	r3, [r4, #32]
   2be2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2be32:	2b00      	cmp	r3, #0
   2be34:	bf08      	it	eq
   2be36:	f04f 33ff 	moveq.w	r3, #4294967295
   2be3a:	4611      	mov	r1, r2
   2be3c:	9302      	str	r3, [sp, #8]
   2be3e:	4648      	mov	r0, r9
   2be40:	ab02      	add	r3, sp, #8
   2be42:	f7ff ff70 	bl	2bd26 <ip_interface_wait>
   2be46:	6823      	ldr	r3, [r4, #0]
   2be48:	4602      	mov	r2, r0
   2be4a:	b29b      	uxth	r3, r3
   2be4c:	b933      	cbnz	r3, 2be5c <ip_interface_recvfrom+0x116>
   2be4e:	2204      	movs	r2, #4
   2be50:	4610      	mov	r0, r2
   2be52:	f7ff f934 	bl	2b0be <nrf_modem_os_errno_set>
   2be56:	f04f 35ff 	mov.w	r5, #4294967295
   2be5a:	e046      	b.n	2beea <ip_interface_recvfrom+0x1a4>
   2be5c:	2800      	cmp	r0, #0
   2be5e:	d06b      	beq.n	2bf38 <ip_interface_recvfrom+0x1f2>
   2be60:	6823      	ldr	r3, [r4, #0]
   2be62:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   2be66:	d06a      	beq.n	2bf3e <ip_interface_recvfrom+0x1f8>
   2be68:	6823      	ldr	r3, [r4, #0]
   2be6a:	b29b      	uxth	r3, r3
   2be6c:	2b0d      	cmp	r3, #13
   2be6e:	d066      	beq.n	2bf3e <ip_interface_recvfrom+0x1f8>
   2be70:	6923      	ldr	r3, [r4, #16]
   2be72:	1e59      	subs	r1, r3, #1
   2be74:	f1d1 0a00 	rsbs	sl, r1, #0
   2be78:	eb4a 0a01 	adc.w	sl, sl, r1
   2be7c:	b107      	cbz	r7, 2be80 <ip_interface_recvfrom+0x13a>
   2be7e:	683f      	ldr	r7, [r7, #0]
   2be80:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2be82:	69e0      	ldr	r0, [r4, #28]
   2be84:	e9cd 2704 	strd	r2, r7, [sp, #16]
   2be88:	9b01      	ldr	r3, [sp, #4]
   2be8a:	6802      	ldr	r2, [r0, #0]
   2be8c:	e9cd 3802 	strd	r3, r8, [sp, #8]
   2be90:	6895      	ldr	r5, [r2, #8]
   2be92:	a902      	add	r1, sp, #8
   2be94:	4632      	mov	r2, r6
   2be96:	47a8      	blx	r5
   2be98:	1c42      	adds	r2, r0, #1
   2be9a:	4605      	mov	r5, r0
   2be9c:	bf0b      	itete	eq
   2be9e:	2600      	moveq	r6, #0
   2bea0:	2601      	movne	r6, #1
   2bea2:	220b      	moveq	r2, #11
   2bea4:	2200      	movne	r2, #0
   2bea6:	69e0      	ldr	r0, [r4, #28]
   2bea8:	9201      	str	r2, [sp, #4]
   2beaa:	6801      	ldr	r1, [r0, #0]
   2beac:	68c9      	ldr	r1, [r1, #12]
   2beae:	4788      	blx	r1
   2beb0:	3001      	adds	r0, #1
   2beb2:	9a01      	ldr	r2, [sp, #4]
   2beb4:	d009      	beq.n	2beca <ip_interface_recvfrom+0x184>
   2beb6:	6823      	ldr	r3, [r4, #0]
   2beb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2bebc:	6023      	str	r3, [r4, #0]
   2bebe:	b1a2      	cbz	r2, 2beea <ip_interface_recvfrom+0x1a4>
   2bec0:	e7c6      	b.n	2be50 <ip_interface_recvfrom+0x10a>
   2bec2:	461e      	mov	r6, r3
   2bec4:	469a      	mov	sl, r3
   2bec6:	2209      	movs	r2, #9
   2bec8:	e765      	b.n	2bd96 <ip_interface_recvfrom+0x50>
   2beca:	f1ba 0f00 	cmp.w	sl, #0
   2bece:	d010      	beq.n	2bef2 <ip_interface_recvfrom+0x1ac>
   2bed0:	2e00      	cmp	r6, #0
   2bed2:	d1f4      	bne.n	2bebe <ip_interface_recvfrom+0x178>
   2bed4:	4635      	mov	r5, r6
   2bed6:	6823      	ldr	r3, [r4, #0]
   2bed8:	0c1b      	lsrs	r3, r3, #16
   2beda:	041b      	lsls	r3, r3, #16
   2bedc:	f043 030d 	orr.w	r3, r3, #13
   2bee0:	6023      	str	r3, [r4, #0]
   2bee2:	6823      	ldr	r3, [r4, #0]
   2bee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2bee8:	6023      	str	r3, [r4, #0]
   2beea:	4628      	mov	r0, r5
   2beec:	b007      	add	sp, #28
   2beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bef2:	2e00      	cmp	r6, #0
   2bef4:	d1e3      	bne.n	2bebe <ip_interface_recvfrom+0x178>
   2bef6:	6823      	ldr	r3, [r4, #0]
   2bef8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2befc:	6823      	ldr	r3, [r4, #0]
   2befe:	d00a      	beq.n	2bf16 <ip_interface_recvfrom+0x1d0>
   2bf00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2bf04:	6023      	str	r3, [r4, #0]
   2bf06:	6823      	ldr	r3, [r4, #0]
   2bf08:	2269      	movs	r2, #105	; 0x69
   2bf0a:	0c1b      	lsrs	r3, r3, #16
   2bf0c:	041b      	lsls	r3, r3, #16
   2bf0e:	f043 030d 	orr.w	r3, r3, #13
   2bf12:	6023      	str	r3, [r4, #0]
   2bf14:	e79c      	b.n	2be50 <ip_interface_recvfrom+0x10a>
   2bf16:	031b      	lsls	r3, r3, #12
   2bf18:	d5d1      	bpl.n	2bebe <ip_interface_recvfrom+0x178>
   2bf1a:	6823      	ldr	r3, [r4, #0]
   2bf1c:	b29b      	uxth	r3, r3
   2bf1e:	2b0d      	cmp	r3, #13
   2bf20:	d1cd      	bne.n	2bebe <ip_interface_recvfrom+0x178>
   2bf22:	68a3      	ldr	r3, [r4, #8]
   2bf24:	2b00      	cmp	r3, #0
   2bf26:	d0ca      	beq.n	2bebe <ip_interface_recvfrom+0x178>
   2bf28:	68a2      	ldr	r2, [r4, #8]
   2bf2a:	e7c8      	b.n	2bebe <ip_interface_recvfrom+0x178>
   2bf2c:	2216      	movs	r2, #22
   2bf2e:	e78f      	b.n	2be50 <ip_interface_recvfrom+0x10a>
   2bf30:	225f      	movs	r2, #95	; 0x5f
   2bf32:	e78d      	b.n	2be50 <ip_interface_recvfrom+0x10a>
   2bf34:	2209      	movs	r2, #9
   2bf36:	e78b      	b.n	2be50 <ip_interface_recvfrom+0x10a>
   2bf38:	f04f 0a01 	mov.w	sl, #1
   2bf3c:	e739      	b.n	2bdb2 <ip_interface_recvfrom+0x6c>
   2bf3e:	2600      	movs	r6, #0
   2bf40:	46b2      	mov	sl, r6
   2bf42:	e7b0      	b.n	2bea6 <ip_interface_recvfrom+0x160>
   2bf44:	469a      	mov	sl, r3
   2bf46:	220b      	movs	r2, #11
   2bf48:	e76a      	b.n	2be20 <ip_interface_recvfrom+0xda>

0002bf4a <ip_interface_connect>:
   2bf4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bf4e:	4606      	mov	r6, r0
   2bf50:	4691      	mov	r9, r2
   2bf52:	460f      	mov	r7, r1
   2bf54:	b085      	sub	sp, #20
   2bf56:	2900      	cmp	r1, #0
   2bf58:	d067      	beq.n	2c02a <ip_interface_connect+0xe0>
   2bf5a:	2a00      	cmp	r2, #0
   2bf5c:	d065      	beq.n	2c02a <ip_interface_connect+0xe0>
   2bf5e:	f7f7 fc0b 	bl	23778 <interface_socket_from_handle_get>
   2bf62:	4604      	mov	r4, r0
   2bf64:	2800      	cmp	r0, #0
   2bf66:	d062      	beq.n	2c02e <ip_interface_connect+0xe4>
   2bf68:	6803      	ldr	r3, [r0, #0]
   2bf6a:	b29b      	uxth	r3, r3
   2bf6c:	2b02      	cmp	r3, #2
   2bf6e:	d003      	beq.n	2bf78 <ip_interface_connect+0x2e>
   2bf70:	6803      	ldr	r3, [r0, #0]
   2bf72:	b29b      	uxth	r3, r3
   2bf74:	2b04      	cmp	r3, #4
   2bf76:	d151      	bne.n	2c01c <ip_interface_connect+0xd2>
   2bf78:	6823      	ldr	r3, [r4, #0]
   2bf7a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   2bf7e:	d158      	bne.n	2c032 <ip_interface_connect+0xe8>
   2bf80:	f247 0202 	movw	r2, #28674	; 0x7002
   2bf84:	4630      	mov	r0, r6
   2bf86:	69a1      	ldr	r1, [r4, #24]
   2bf88:	f7ff feba 	bl	2bd00 <ip_interface_request_create>
   2bf8c:	4605      	mov	r5, r0
   2bf8e:	2800      	cmp	r0, #0
   2bf90:	d051      	beq.n	2c036 <ip_interface_connect+0xec>
   2bf92:	f247 0802 	movw	r8, #28674	; 0x7002
   2bf96:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   2bf9a:	60c3      	str	r3, [r0, #12]
   2bf9c:	69a3      	ldr	r3, [r4, #24]
   2bf9e:	464a      	mov	r2, r9
   2bfa0:	6103      	str	r3, [r0, #16]
   2bfa2:	6883      	ldr	r3, [r0, #8]
   2bfa4:	4639      	mov	r1, r7
   2bfa6:	3304      	adds	r3, #4
   2bfa8:	6083      	str	r3, [r0, #8]
   2bfaa:	f100 0318 	add.w	r3, r0, #24
   2bfae:	9301      	str	r3, [sp, #4]
   2bfb0:	f10d 030a 	add.w	r3, sp, #10
   2bfb4:	9300      	str	r3, [sp, #0]
   2bfb6:	68e0      	ldr	r0, [r4, #12]
   2bfb8:	ab02      	add	r3, sp, #8
   2bfba:	f7ff fe77 	bl	2bcac <ip_addr_parse>
   2bfbe:	bb30      	cbnz	r0, 2c00e <ip_interface_connect+0xc4>
   2bfc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2bfc4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2bfc8:	82ab      	strh	r3, [r5, #20]
   2bfca:	68ab      	ldr	r3, [r5, #8]
   2bfcc:	6827      	ldr	r7, [r4, #0]
   2bfce:	4413      	add	r3, r2
   2bfd0:	60ab      	str	r3, [r5, #8]
   2bfd2:	6823      	ldr	r3, [r4, #0]
   2bfd4:	82ea      	strh	r2, [r5, #22]
   2bfd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2bfda:	6023      	str	r3, [r4, #0]
   2bfdc:	462a      	mov	r2, r5
   2bfde:	4641      	mov	r1, r8
   2bfe0:	2004      	movs	r0, #4
   2bfe2:	f7ff fdf1 	bl	2bbc8 <rpc_client_request_send>
   2bfe6:	6823      	ldr	r3, [r4, #0]
   2bfe8:	00db      	lsls	r3, r3, #3
   2bfea:	d426      	bmi.n	2c03a <ip_interface_connect+0xf0>
   2bfec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bfee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bff2:	2b00      	cmp	r3, #0
   2bff4:	bf08      	it	eq
   2bff6:	f04f 33ff 	moveq.w	r3, #4294967295
   2bffa:	2105      	movs	r1, #5
   2bffc:	9303      	str	r3, [sp, #12]
   2bffe:	4630      	mov	r0, r6
   2c000:	ab03      	add	r3, sp, #12
   2c002:	f7ff fe90 	bl	2bd26 <ip_interface_wait>
   2c006:	b130      	cbz	r0, 2c016 <ip_interface_connect+0xcc>
   2c008:	2877      	cmp	r0, #119	; 0x77
   2c00a:	d000      	beq.n	2c00e <ip_interface_connect+0xc4>
   2c00c:	6027      	str	r7, [r4, #0]
   2c00e:	f7ff f856 	bl	2b0be <nrf_modem_os_errno_set>
   2c012:	f04f 30ff 	mov.w	r0, #4294967295
   2c016:	b005      	add	sp, #20
   2c018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c01c:	6803      	ldr	r3, [r0, #0]
   2c01e:	b29b      	uxth	r3, r3
   2c020:	2b05      	cmp	r3, #5
   2c022:	bf14      	ite	ne
   2c024:	2009      	movne	r0, #9
   2c026:	207f      	moveq	r0, #127	; 0x7f
   2c028:	e7f1      	b.n	2c00e <ip_interface_connect+0xc4>
   2c02a:	2016      	movs	r0, #22
   2c02c:	e7ef      	b.n	2c00e <ip_interface_connect+0xc4>
   2c02e:	2009      	movs	r0, #9
   2c030:	e7ed      	b.n	2c00e <ip_interface_connect+0xc4>
   2c032:	2078      	movs	r0, #120	; 0x78
   2c034:	e7eb      	b.n	2c00e <ip_interface_connect+0xc4>
   2c036:	200c      	movs	r0, #12
   2c038:	e7e9      	b.n	2c00e <ip_interface_connect+0xc4>
   2c03a:	2077      	movs	r0, #119	; 0x77
   2c03c:	e7e7      	b.n	2c00e <ip_interface_connect+0xc4>

0002c03e <getopt_check_and_send_int>:
   2c03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c040:	4604      	mov	r4, r0
   2c042:	460d      	mov	r5, r1
   2c044:	4618      	mov	r0, r3
   2c046:	4611      	mov	r1, r2
   2c048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2c04c:	b18b      	cbz	r3, 2c072 <getopt_check_and_send_int+0x34>
   2c04e:	681e      	ldr	r6, [r3, #0]
   2c050:	b17e      	cbz	r6, 2c072 <getopt_check_and_send_int+0x34>
   2c052:	b172      	cbz	r2, 2c072 <getopt_check_and_send_int+0x34>
   2c054:	e9cd 2300 	strd	r2, r3, [sp]
   2c058:	462b      	mov	r3, r5
   2c05a:	4622      	mov	r2, r4
   2c05c:	f7f7 fe72 	bl	23d44 <ip_interface_socketoption_get>
   2c060:	4603      	mov	r3, r0
   2c062:	b118      	cbz	r0, 2c06c <getopt_check_and_send_int+0x2e>
   2c064:	f7ff f82b 	bl	2b0be <nrf_modem_os_errno_set>
   2c068:	f04f 33ff 	mov.w	r3, #4294967295
   2c06c:	4618      	mov	r0, r3
   2c06e:	b002      	add	sp, #8
   2c070:	bd70      	pop	{r4, r5, r6, pc}
   2c072:	2016      	movs	r0, #22
   2c074:	e7f6      	b.n	2c064 <getopt_check_and_send_int+0x26>

0002c076 <ip_interface_socketoption_send>:
   2c076:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c07a:	4698      	mov	r8, r3
   2c07c:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   2c080:	f04f 33ff 	mov.w	r3, #4294967295
   2c084:	9301      	str	r3, [sp, #4]
   2c086:	680b      	ldr	r3, [r1, #0]
   2c088:	4606      	mov	r6, r0
   2c08a:	025d      	lsls	r5, r3, #9
   2c08c:	460c      	mov	r4, r1
   2c08e:	4692      	mov	sl, r2
   2c090:	d43a      	bmi.n	2c108 <ip_interface_socketoption_send+0x92>
   2c092:	680b      	ldr	r3, [r1, #0]
   2c094:	0219      	lsls	r1, r3, #8
   2c096:	d437      	bmi.n	2c108 <ip_interface_socketoption_send+0x92>
   2c098:	6823      	ldr	r3, [r4, #0]
   2c09a:	01da      	lsls	r2, r3, #7
   2c09c:	d434      	bmi.n	2c108 <ip_interface_socketoption_send+0x92>
   2c09e:	6823      	ldr	r3, [r4, #0]
   2c0a0:	019b      	lsls	r3, r3, #6
   2c0a2:	d431      	bmi.n	2c108 <ip_interface_socketoption_send+0x92>
   2c0a4:	f8d4 9000 	ldr.w	r9, [r4]
   2c0a8:	6823      	ldr	r3, [r4, #0]
   2c0aa:	f247 0203 	movw	r2, #28675	; 0x7003
   2c0ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2c0b2:	6023      	str	r3, [r4, #0]
   2c0b4:	69a1      	ldr	r1, [r4, #24]
   2c0b6:	463b      	mov	r3, r7
   2c0b8:	f7ff fe22 	bl	2bd00 <ip_interface_request_create>
   2c0bc:	4605      	mov	r5, r0
   2c0be:	b308      	cbz	r0, 2c104 <ip_interface_socketoption_send+0x8e>
   2c0c0:	6883      	ldr	r3, [r0, #8]
   2c0c2:	f8c0 a014 	str.w	sl, [r0, #20]
   2c0c6:	3308      	adds	r3, #8
   2c0c8:	6083      	str	r3, [r0, #8]
   2c0ca:	f8c0 8018 	str.w	r8, [r0, #24]
   2c0ce:	b13f      	cbz	r7, 2c0e0 <ip_interface_socketoption_send+0x6a>
   2c0d0:	f1bb 0f00 	cmp.w	fp, #0
   2c0d4:	d004      	beq.n	2c0e0 <ip_interface_socketoption_send+0x6a>
   2c0d6:	463a      	mov	r2, r7
   2c0d8:	4659      	mov	r1, fp
   2c0da:	6800      	ldr	r0, [r0, #0]
   2c0dc:	f000 fd79 	bl	2cbd2 <memcpy>
   2c0e0:	462a      	mov	r2, r5
   2c0e2:	f247 0103 	movw	r1, #28675	; 0x7003
   2c0e6:	2004      	movs	r0, #4
   2c0e8:	f7ff fd6e 	bl	2bbc8 <rpc_client_request_send>
   2c0ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2c0f0:	4630      	mov	r0, r6
   2c0f2:	4611      	mov	r1, r2
   2c0f4:	ab01      	add	r3, sp, #4
   2c0f6:	f7ff fe16 	bl	2bd26 <ip_interface_wait>
   2c0fa:	f8c4 9000 	str.w	r9, [r4]
   2c0fe:	b003      	add	sp, #12
   2c100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c104:	200c      	movs	r0, #12
   2c106:	e7f8      	b.n	2c0fa <ip_interface_socketoption_send+0x84>
   2c108:	200b      	movs	r0, #11
   2c10a:	e7f8      	b.n	2c0fe <ip_interface_socketoption_send+0x88>

0002c10c <setopt_check_and_send_int>:
   2c10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c10e:	4604      	mov	r4, r0
   2c110:	460d      	mov	r5, r1
   2c112:	4618      	mov	r0, r3
   2c114:	4611      	mov	r1, r2
   2c116:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   2c11a:	2a04      	cmp	r2, #4
   2c11c:	d10f      	bne.n	2c13e <setopt_check_and_send_int+0x32>
   2c11e:	b173      	cbz	r3, 2c13e <setopt_check_and_send_int+0x32>
   2c120:	e9cd 3200 	strd	r3, r2, [sp]
   2c124:	462b      	mov	r3, r5
   2c126:	4622      	mov	r2, r4
   2c128:	f7ff ffa5 	bl	2c076 <ip_interface_socketoption_send>
   2c12c:	4603      	mov	r3, r0
   2c12e:	b118      	cbz	r0, 2c138 <setopt_check_and_send_int+0x2c>
   2c130:	f7fe ffc5 	bl	2b0be <nrf_modem_os_errno_set>
   2c134:	f04f 33ff 	mov.w	r3, #4294967295
   2c138:	4618      	mov	r0, r3
   2c13a:	b003      	add	sp, #12
   2c13c:	bd30      	pop	{r4, r5, pc}
   2c13e:	2016      	movs	r0, #22
   2c140:	e7f6      	b.n	2c130 <setopt_check_and_send_int+0x24>

0002c142 <ip_interface_getopt>:
   2c142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c146:	2901      	cmp	r1, #1
   2c148:	4604      	mov	r4, r0
   2c14a:	460f      	mov	r7, r1
   2c14c:	4616      	mov	r6, r2
   2c14e:	461d      	mov	r5, r3
   2c150:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2c154:	d007      	beq.n	2c166 <ip_interface_getopt+0x24>
   2c156:	206d      	movs	r0, #109	; 0x6d
   2c158:	f7fe ffb1 	bl	2b0be <nrf_modem_os_errno_set>
   2c15c:	f04f 30ff 	mov.w	r0, #4294967295
   2c160:	b002      	add	sp, #8
   2c162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c166:	f7f7 fb07 	bl	23778 <interface_socket_from_handle_get>
   2c16a:	4602      	mov	r2, r0
   2c16c:	b908      	cbnz	r0, 2c172 <ip_interface_getopt+0x30>
   2c16e:	2009      	movs	r0, #9
   2c170:	e7f2      	b.n	2c158 <ip_interface_getopt+0x16>
   2c172:	2e28      	cmp	r6, #40	; 0x28
   2c174:	dc0d      	bgt.n	2c192 <ip_interface_getopt+0x50>
   2c176:	2e1d      	cmp	r6, #29
   2c178:	dd0d      	ble.n	2c196 <ip_interface_getopt+0x54>
   2c17a:	f1a6 031e 	sub.w	r3, r6, #30
   2c17e:	2b0a      	cmp	r3, #10
   2c180:	d809      	bhi.n	2c196 <ip_interface_getopt+0x54>
   2c182:	e8df f003 	tbb	[pc, r3]
   2c186:	1d13      	.short	0x1d13
   2c188:	08080824 	.word	0x08080824
   2c18c:	08080808 	.word	0x08080808
   2c190:	2b          	.byte	0x2b
   2c191:	00          	.byte	0x00
   2c192:	2e37      	cmp	r6, #55	; 0x37
   2c194:	d029      	beq.n	2c1ea <ip_interface_getopt+0xa8>
   2c196:	462b      	mov	r3, r5
   2c198:	4632      	mov	r2, r6
   2c19a:	2101      	movs	r1, #1
   2c19c:	4620      	mov	r0, r4
   2c19e:	f8cd 8020 	str.w	r8, [sp, #32]
   2c1a2:	b002      	add	sp, #8
   2c1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c1a8:	f7f7 bb2a 	b.w	23800 <interface_socket_getopt>
   2c1ac:	4623      	mov	r3, r4
   2c1ae:	f248 0101 	movw	r1, #32769	; 0x8001
   2c1b2:	f44f 7000 	mov.w	r0, #512	; 0x200
   2c1b6:	e9cd 5800 	strd	r5, r8, [sp]
   2c1ba:	f7ff ff40 	bl	2c03e <getopt_check_and_send_int>
   2c1be:	e7cf      	b.n	2c160 <ip_interface_getopt+0x1e>
   2c1c0:	4623      	mov	r3, r4
   2c1c2:	f244 0110 	movw	r1, #16400	; 0x4010
   2c1c6:	2004      	movs	r0, #4
   2c1c8:	e9cd 5800 	strd	r5, r8, [sp]
   2c1cc:	e7f5      	b.n	2c1ba <ip_interface_getopt+0x78>
   2c1ce:	4623      	mov	r3, r4
   2c1d0:	f246 0110 	movw	r1, #24592	; 0x6010
   2c1d4:	2006      	movs	r0, #6
   2c1d6:	e9cd 5800 	strd	r5, r8, [sp]
   2c1da:	e7ee      	b.n	2c1ba <ip_interface_getopt+0x78>
   2c1dc:	4623      	mov	r3, r4
   2c1de:	f241 0104 	movw	r1, #4100	; 0x1004
   2c1e2:	2008      	movs	r0, #8
   2c1e4:	e9cd 5800 	strd	r5, r8, [sp]
   2c1e8:	e7e7      	b.n	2c1ba <ip_interface_getopt+0x78>
   2c1ea:	4623      	mov	r3, r4
   2c1ec:	f245 0106 	movw	r1, #20486	; 0x5006
   2c1f0:	4638      	mov	r0, r7
   2c1f2:	e9cd 5800 	strd	r5, r8, [sp]
   2c1f6:	e7e0      	b.n	2c1ba <ip_interface_getopt+0x78>

0002c1f8 <attach_trigger_condition_verify>:
   2c1f8:	6903      	ldr	r3, [r0, #16]
   2c1fa:	2b01      	cmp	r3, #1
   2c1fc:	d105      	bne.n	2c20a <attach_trigger_condition_verify+0x12>
   2c1fe:	6800      	ldr	r0, [r0, #0]
   2c200:	b280      	uxth	r0, r0
   2c202:	1f43      	subs	r3, r0, #5
   2c204:	4258      	negs	r0, r3
   2c206:	4158      	adcs	r0, r3
   2c208:	4770      	bx	lr
   2c20a:	2b02      	cmp	r3, #2
   2c20c:	d109      	bne.n	2c222 <attach_trigger_condition_verify+0x2a>
   2c20e:	6803      	ldr	r3, [r0, #0]
   2c210:	b29b      	uxth	r3, r3
   2c212:	2b02      	cmp	r3, #2
   2c214:	d003      	beq.n	2c21e <attach_trigger_condition_verify+0x26>
   2c216:	6803      	ldr	r3, [r0, #0]
   2c218:	b29b      	uxth	r3, r3
   2c21a:	2b04      	cmp	r3, #4
   2c21c:	d1ef      	bne.n	2c1fe <attach_trigger_condition_verify+0x6>
   2c21e:	2001      	movs	r0, #1
   2c220:	4770      	bx	lr
   2c222:	2000      	movs	r0, #0
   2c224:	4770      	bx	lr

0002c226 <secure_client_socket>:
   2c226:	f04f 33ff 	mov.w	r3, #4294967295
   2c22a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c22c:	9301      	str	r3, [sp, #4]
   2c22e:	680b      	ldr	r3, [r1, #0]
   2c230:	4606      	mov	r6, r0
   2c232:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2c236:	600b      	str	r3, [r1, #0]
   2c238:	680b      	ldr	r3, [r1, #0]
   2c23a:	460c      	mov	r4, r1
   2c23c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2c240:	600b      	str	r3, [r1, #0]
   2c242:	680f      	ldr	r7, [r1, #0]
   2c244:	463a      	mov	r2, r7
   2c246:	f7f8 fbe1 	bl	24a0c <secure_socket_attach_initiate>
   2c24a:	4605      	mov	r5, r0
   2c24c:	b950      	cbnz	r0, 2c264 <secure_client_socket+0x3e>
   2c24e:	220c      	movs	r2, #12
   2c250:	4630      	mov	r0, r6
   2c252:	4611      	mov	r1, r2
   2c254:	ab01      	add	r3, sp, #4
   2c256:	f7ff fd66 	bl	2bd26 <ip_interface_wait>
   2c25a:	4605      	mov	r5, r0
   2c25c:	b128      	cbz	r0, 2c26a <secure_client_socket+0x44>
   2c25e:	2877      	cmp	r0, #119	; 0x77
   2c260:	d000      	beq.n	2c264 <secure_client_socket+0x3e>
   2c262:	6027      	str	r7, [r4, #0]
   2c264:	4628      	mov	r0, r5
   2c266:	b003      	add	sp, #12
   2c268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c26a:	4630      	mov	r0, r6
   2c26c:	f7f8 fbbc 	bl	249e8 <hostname_free>
   2c270:	6823      	ldr	r3, [r4, #0]
   2c272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2c276:	6023      	str	r3, [r4, #0]
   2c278:	6823      	ldr	r3, [r4, #0]
   2c27a:	0c1b      	lsrs	r3, r3, #16
   2c27c:	041b      	lsls	r3, r3, #16
   2c27e:	f043 030c 	orr.w	r3, r3, #12
   2c282:	6023      	str	r3, [r4, #0]
   2c284:	6823      	ldr	r3, [r4, #0]
   2c286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c28a:	6023      	str	r3, [r4, #0]
   2c28c:	6823      	ldr	r3, [r4, #0]
   2c28e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2c292:	6023      	str	r3, [r4, #0]
   2c294:	e7e6      	b.n	2c264 <secure_client_socket+0x3e>

0002c296 <tls_interface_close>:
   2c296:	b510      	push	{r4, lr}
   2c298:	4604      	mov	r4, r0
   2c29a:	f7f7 fa6d 	bl	23778 <interface_socket_from_handle_get>
   2c29e:	b138      	cbz	r0, 2c2b0 <tls_interface_close+0x1a>
   2c2a0:	4620      	mov	r0, r4
   2c2a2:	f7f8 fba1 	bl	249e8 <hostname_free>
   2c2a6:	4620      	mov	r0, r4
   2c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c2ac:	f7f7 bbe6 	b.w	23a7c <ip_interface_close>
   2c2b0:	2009      	movs	r0, #9
   2c2b2:	f7fe ff04 	bl	2b0be <nrf_modem_os_errno_set>
   2c2b6:	f04f 30ff 	mov.w	r0, #4294967295
   2c2ba:	bd10      	pop	{r4, pc}

0002c2bc <null_handler_init>:
   2c2bc:	2000      	movs	r0, #0
   2c2be:	4770      	bx	lr

0002c2c0 <null_handler_put>:
   2c2c0:	b510      	push	{r4, lr}
   2c2c2:	460c      	mov	r4, r1
   2c2c4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2c2c8:	4620      	mov	r0, r4
   2c2ca:	4798      	blx	r3
   2c2cc:	6860      	ldr	r0, [r4, #4]
   2c2ce:	bd10      	pop	{r4, pc}

0002c2d0 <null_handler_get>:
   2c2d0:	f04f 30ff 	mov.w	r0, #4294967295
   2c2d4:	4770      	bx	lr

0002c2d6 <null_handler_available>:
   2c2d6:	f04f 30ff 	mov.w	r0, #4294967295
   2c2da:	4770      	bx	lr

0002c2dc <null_handler_flush>:
   2c2dc:	2000      	movs	r0, #0
   2c2de:	4770      	bx	lr

0002c2e0 <null_handler_free>:
   2c2e0:	4770      	bx	lr

0002c2e2 <stream_handler_free_packet>:
   2c2e2:	b530      	push	{r4, r5, lr}
   2c2e4:	4605      	mov	r5, r0
   2c2e6:	b085      	sub	sp, #20
   2c2e8:	68c0      	ldr	r0, [r0, #12]
   2c2ea:	f000 fb0e 	bl	2c90a <linked_list_pop>
   2c2ee:	4604      	mov	r4, r0
   2c2f0:	b170      	cbz	r0, 2c310 <stream_handler_free_packet+0x2e>
   2c2f2:	6843      	ldr	r3, [r0, #4]
   2c2f4:	9300      	str	r3, [sp, #0]
   2c2f6:	6883      	ldr	r3, [r0, #8]
   2c2f8:	9301      	str	r3, [sp, #4]
   2c2fa:	6903      	ldr	r3, [r0, #16]
   2c2fc:	9302      	str	r3, [sp, #8]
   2c2fe:	68c3      	ldr	r3, [r0, #12]
   2c300:	4668      	mov	r0, sp
   2c302:	9303      	str	r3, [sp, #12]
   2c304:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2c308:	4798      	blx	r3
   2c30a:	4620      	mov	r0, r4
   2c30c:	f7f2 fb1a 	bl	1e944 <nrf_modem_os_free>
   2c310:	b005      	add	sp, #20
   2c312:	bd30      	pop	{r4, r5, pc}

0002c314 <stream_handler_init>:
   2c314:	b510      	push	{r4, lr}
   2c316:	4604      	mov	r4, r0
   2c318:	200c      	movs	r0, #12
   2c31a:	f7f2 fb0b 	bl	1e934 <nrf_modem_os_alloc>
   2c31e:	60e0      	str	r0, [r4, #12]
   2c320:	b128      	cbz	r0, 2c32e <stream_handler_init+0x1a>
   2c322:	2300      	movs	r3, #0
   2c324:	6123      	str	r3, [r4, #16]
   2c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c32a:	f000 bad2 	b.w	2c8d2 <linked_list_init>
   2c32e:	200c      	movs	r0, #12
   2c330:	bd10      	pop	{r4, pc}

0002c332 <stream_handler_put>:
   2c332:	b570      	push	{r4, r5, r6, lr}
   2c334:	4606      	mov	r6, r0
   2c336:	2014      	movs	r0, #20
   2c338:	460d      	mov	r5, r1
   2c33a:	f7f2 fafb 	bl	1e934 <nrf_modem_os_alloc>
   2c33e:	4604      	mov	r4, r0
   2c340:	b178      	cbz	r0, 2c362 <stream_handler_put+0x30>
   2c342:	682b      	ldr	r3, [r5, #0]
   2c344:	4601      	mov	r1, r0
   2c346:	6043      	str	r3, [r0, #4]
   2c348:	686b      	ldr	r3, [r5, #4]
   2c34a:	6083      	str	r3, [r0, #8]
   2c34c:	68eb      	ldr	r3, [r5, #12]
   2c34e:	60c3      	str	r3, [r0, #12]
   2c350:	68ab      	ldr	r3, [r5, #8]
   2c352:	6103      	str	r3, [r0, #16]
   2c354:	68f0      	ldr	r0, [r6, #12]
   2c356:	f000 fac5 	bl	2c8e4 <linked_list_push>
   2c35a:	b128      	cbz	r0, 2c368 <stream_handler_put+0x36>
   2c35c:	4620      	mov	r0, r4
   2c35e:	f7f2 faf1 	bl	1e944 <nrf_modem_os_free>
   2c362:	f04f 30ff 	mov.w	r0, #4294967295
   2c366:	e000      	b.n	2c36a <stream_handler_put+0x38>
   2c368:	6868      	ldr	r0, [r5, #4]
   2c36a:	bd70      	pop	{r4, r5, r6, pc}

0002c36c <stream_handler_get>:
   2c36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c370:	4606      	mov	r6, r0
   2c372:	b085      	sub	sp, #20
   2c374:	68c0      	ldr	r0, [r0, #12]
   2c376:	468a      	mov	sl, r1
   2c378:	4617      	mov	r7, r2
   2c37a:	f000 fad0 	bl	2c91e <linked_list_peek>
   2c37e:	4604      	mov	r4, r0
   2c380:	2800      	cmp	r0, #0
   2c382:	d055      	beq.n	2c430 <stream_handler_get+0xc4>
   2c384:	f8da 0008 	ldr.w	r0, [sl, #8]
   2c388:	2800      	cmp	r0, #0
   2c38a:	d049      	beq.n	2c420 <stream_handler_get+0xb4>
   2c38c:	6921      	ldr	r1, [r4, #16]
   2c38e:	2900      	cmp	r1, #0
   2c390:	d046      	beq.n	2c420 <stream_handler_get+0xb4>
   2c392:	68e2      	ldr	r2, [r4, #12]
   2c394:	2a00      	cmp	r2, #0
   2c396:	d043      	beq.n	2c420 <stream_handler_get+0xb4>
   2c398:	f8da 500c 	ldr.w	r5, [sl, #12]
   2c39c:	42aa      	cmp	r2, r5
   2c39e:	bf28      	it	cs
   2c3a0:	462a      	movcs	r2, r5
   2c3a2:	f8ca 200c 	str.w	r2, [sl, #12]
   2c3a6:	f000 fc14 	bl	2cbd2 <memcpy>
   2c3aa:	2500      	movs	r5, #0
   2c3ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   2c3b0:	6931      	ldr	r1, [r6, #16]
   2c3b2:	9301      	str	r3, [sp, #4]
   2c3b4:	f8da 3000 	ldr.w	r3, [sl]
   2c3b8:	9302      	str	r3, [sp, #8]
   2c3ba:	f007 0320 	and.w	r3, r7, #32
   2c3be:	9303      	str	r3, [sp, #12]
   2c3c0:	f007 0708 	and.w	r7, r7, #8
   2c3c4:	9b01      	ldr	r3, [sp, #4]
   2c3c6:	42ab      	cmp	r3, r5
   2c3c8:	d924      	bls.n	2c414 <stream_handler_get+0xa8>
   2c3ca:	68a2      	ldr	r2, [r4, #8]
   2c3cc:	9b01      	ldr	r3, [sp, #4]
   2c3ce:	eba2 0801 	sub.w	r8, r2, r1
   2c3d2:	eba3 0b05 	sub.w	fp, r3, r5
   2c3d6:	f8da 2000 	ldr.w	r2, [sl]
   2c3da:	45d8      	cmp	r8, fp
   2c3dc:	46c1      	mov	r9, r8
   2c3de:	bf28      	it	cs
   2c3e0:	46d9      	movcs	r9, fp
   2c3e2:	b142      	cbz	r2, 2c3f6 <stream_handler_get+0x8a>
   2c3e4:	9b03      	ldr	r3, [sp, #12]
   2c3e6:	b933      	cbnz	r3, 2c3f6 <stream_handler_get+0x8a>
   2c3e8:	6860      	ldr	r0, [r4, #4]
   2c3ea:	9b02      	ldr	r3, [sp, #8]
   2c3ec:	4401      	add	r1, r0
   2c3ee:	464a      	mov	r2, r9
   2c3f0:	1958      	adds	r0, r3, r5
   2c3f2:	f000 fbee 	bl	2cbd2 <memcpy>
   2c3f6:	4620      	mov	r0, r4
   2c3f8:	f000 fa98 	bl	2c92c <linked_list_get_next>
   2c3fc:	4604      	mov	r4, r0
   2c3fe:	b92f      	cbnz	r7, 2c40c <stream_handler_get+0xa0>
   2c400:	45d8      	cmp	r8, fp
   2c402:	d811      	bhi.n	2c428 <stream_handler_get+0xbc>
   2c404:	4630      	mov	r0, r6
   2c406:	f7ff ff6c 	bl	2c2e2 <stream_handler_free_packet>
   2c40a:	6137      	str	r7, [r6, #16]
   2c40c:	2100      	movs	r1, #0
   2c40e:	444d      	add	r5, r9
   2c410:	2c00      	cmp	r4, #0
   2c412:	d1d7      	bne.n	2c3c4 <stream_handler_get+0x58>
   2c414:	4628      	mov	r0, r5
   2c416:	f8ca 5004 	str.w	r5, [sl, #4]
   2c41a:	b005      	add	sp, #20
   2c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c420:	2200      	movs	r2, #0
   2c422:	f8ca 200c 	str.w	r2, [sl, #12]
   2c426:	e7c0      	b.n	2c3aa <stream_handler_get+0x3e>
   2c428:	6932      	ldr	r2, [r6, #16]
   2c42a:	444a      	add	r2, r9
   2c42c:	6132      	str	r2, [r6, #16]
   2c42e:	e7ed      	b.n	2c40c <stream_handler_get+0xa0>
   2c430:	f04f 30ff 	mov.w	r0, #4294967295
   2c434:	e7f1      	b.n	2c41a <stream_handler_get+0xae>

0002c436 <stream_handler_available>:
   2c436:	b510      	push	{r4, lr}
   2c438:	4604      	mov	r4, r0
   2c43a:	68c0      	ldr	r0, [r0, #12]
   2c43c:	f000 fa6f 	bl	2c91e <linked_list_peek>
   2c440:	b150      	cbz	r0, 2c458 <stream_handler_available+0x22>
   2c442:	6924      	ldr	r4, [r4, #16]
   2c444:	4264      	negs	r4, r4
   2c446:	6883      	ldr	r3, [r0, #8]
   2c448:	441c      	add	r4, r3
   2c44a:	f000 fa6f 	bl	2c92c <linked_list_get_next>
   2c44e:	2800      	cmp	r0, #0
   2c450:	d1f9      	bne.n	2c446 <stream_handler_available+0x10>
   2c452:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2c456:	bd10      	pop	{r4, pc}
   2c458:	f04f 30ff 	mov.w	r0, #4294967295
   2c45c:	e7fb      	b.n	2c456 <stream_handler_available+0x20>

0002c45e <stream_handler_flush>:
   2c45e:	68c3      	ldr	r3, [r0, #12]
   2c460:	b510      	push	{r4, lr}
   2c462:	4604      	mov	r4, r0
   2c464:	b923      	cbnz	r3, 2c470 <stream_handler_flush+0x12>
   2c466:	2016      	movs	r0, #22
   2c468:	e007      	b.n	2c47a <stream_handler_flush+0x1c>
   2c46a:	4620      	mov	r0, r4
   2c46c:	f7ff ff39 	bl	2c2e2 <stream_handler_free_packet>
   2c470:	68e0      	ldr	r0, [r4, #12]
   2c472:	f000 fa59 	bl	2c928 <linked_list_size_get>
   2c476:	2800      	cmp	r0, #0
   2c478:	d1f7      	bne.n	2c46a <stream_handler_flush+0xc>
   2c47a:	bd10      	pop	{r4, pc}

0002c47c <stream_handler_free>:
   2c47c:	68c3      	ldr	r3, [r0, #12]
   2c47e:	b510      	push	{r4, lr}
   2c480:	4604      	mov	r4, r0
   2c482:	b133      	cbz	r3, 2c492 <stream_handler_free+0x16>
   2c484:	f7ff ffeb 	bl	2c45e <stream_handler_flush>
   2c488:	68e0      	ldr	r0, [r4, #12]
   2c48a:	f7f2 fa5b 	bl	1e944 <nrf_modem_os_free>
   2c48e:	2300      	movs	r3, #0
   2c490:	60e3      	str	r3, [r4, #12]
   2c492:	bd10      	pop	{r4, pc}

0002c494 <datagram_handler_free_packet>:
   2c494:	b530      	push	{r4, r5, lr}
   2c496:	4605      	mov	r5, r0
   2c498:	b085      	sub	sp, #20
   2c49a:	68c0      	ldr	r0, [r0, #12]
   2c49c:	f000 fa35 	bl	2c90a <linked_list_pop>
   2c4a0:	4604      	mov	r4, r0
   2c4a2:	b170      	cbz	r0, 2c4c2 <datagram_handler_free_packet+0x2e>
   2c4a4:	6843      	ldr	r3, [r0, #4]
   2c4a6:	9300      	str	r3, [sp, #0]
   2c4a8:	6883      	ldr	r3, [r0, #8]
   2c4aa:	9301      	str	r3, [sp, #4]
   2c4ac:	6903      	ldr	r3, [r0, #16]
   2c4ae:	9302      	str	r3, [sp, #8]
   2c4b0:	68c3      	ldr	r3, [r0, #12]
   2c4b2:	4668      	mov	r0, sp
   2c4b4:	9303      	str	r3, [sp, #12]
   2c4b6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2c4ba:	4798      	blx	r3
   2c4bc:	4620      	mov	r0, r4
   2c4be:	f7f2 fa41 	bl	1e944 <nrf_modem_os_free>
   2c4c2:	b005      	add	sp, #20
   2c4c4:	bd30      	pop	{r4, r5, pc}

0002c4c6 <datagram_handler_init>:
   2c4c6:	b510      	push	{r4, lr}
   2c4c8:	4604      	mov	r4, r0
   2c4ca:	200c      	movs	r0, #12
   2c4cc:	f7f2 fa32 	bl	1e934 <nrf_modem_os_alloc>
   2c4d0:	60e0      	str	r0, [r4, #12]
   2c4d2:	b118      	cbz	r0, 2c4dc <datagram_handler_init+0x16>
   2c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c4d8:	f000 b9fb 	b.w	2c8d2 <linked_list_init>
   2c4dc:	200c      	movs	r0, #12
   2c4de:	bd10      	pop	{r4, pc}

0002c4e0 <datagram_handler_put>:
   2c4e0:	b570      	push	{r4, r5, r6, lr}
   2c4e2:	4606      	mov	r6, r0
   2c4e4:	2014      	movs	r0, #20
   2c4e6:	460d      	mov	r5, r1
   2c4e8:	f7f2 fa24 	bl	1e934 <nrf_modem_os_alloc>
   2c4ec:	4604      	mov	r4, r0
   2c4ee:	b178      	cbz	r0, 2c510 <datagram_handler_put+0x30>
   2c4f0:	682b      	ldr	r3, [r5, #0]
   2c4f2:	4601      	mov	r1, r0
   2c4f4:	6043      	str	r3, [r0, #4]
   2c4f6:	686b      	ldr	r3, [r5, #4]
   2c4f8:	6083      	str	r3, [r0, #8]
   2c4fa:	68eb      	ldr	r3, [r5, #12]
   2c4fc:	60c3      	str	r3, [r0, #12]
   2c4fe:	68ab      	ldr	r3, [r5, #8]
   2c500:	6103      	str	r3, [r0, #16]
   2c502:	68f0      	ldr	r0, [r6, #12]
   2c504:	f000 f9ee 	bl	2c8e4 <linked_list_push>
   2c508:	b128      	cbz	r0, 2c516 <datagram_handler_put+0x36>
   2c50a:	4620      	mov	r0, r4
   2c50c:	f7f2 fa1a 	bl	1e944 <nrf_modem_os_free>
   2c510:	f04f 30ff 	mov.w	r0, #4294967295
   2c514:	e000      	b.n	2c518 <datagram_handler_put+0x38>
   2c516:	6868      	ldr	r0, [r5, #4]
   2c518:	bd70      	pop	{r4, r5, r6, pc}

0002c51a <datagram_handler_get>:
   2c51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c51c:	4607      	mov	r7, r0
   2c51e:	68c0      	ldr	r0, [r0, #12]
   2c520:	460c      	mov	r4, r1
   2c522:	4616      	mov	r6, r2
   2c524:	f000 f9fb 	bl	2c91e <linked_list_peek>
   2c528:	4605      	mov	r5, r0
   2c52a:	b328      	cbz	r0, 2c578 <datagram_handler_get+0x5e>
   2c52c:	6882      	ldr	r2, [r0, #8]
   2c52e:	6863      	ldr	r3, [r4, #4]
   2c530:	6820      	ldr	r0, [r4, #0]
   2c532:	429a      	cmp	r2, r3
   2c534:	bf28      	it	cs
   2c536:	461a      	movcs	r2, r3
   2c538:	6062      	str	r2, [r4, #4]
   2c53a:	b110      	cbz	r0, 2c542 <datagram_handler_get+0x28>
   2c53c:	6869      	ldr	r1, [r5, #4]
   2c53e:	f000 fb48 	bl	2cbd2 <memcpy>
   2c542:	68a0      	ldr	r0, [r4, #8]
   2c544:	b1a8      	cbz	r0, 2c572 <datagram_handler_get+0x58>
   2c546:	6929      	ldr	r1, [r5, #16]
   2c548:	b199      	cbz	r1, 2c572 <datagram_handler_get+0x58>
   2c54a:	68ea      	ldr	r2, [r5, #12]
   2c54c:	b18a      	cbz	r2, 2c572 <datagram_handler_get+0x58>
   2c54e:	68e3      	ldr	r3, [r4, #12]
   2c550:	429a      	cmp	r2, r3
   2c552:	bf28      	it	cs
   2c554:	461a      	movcs	r2, r3
   2c556:	60e2      	str	r2, [r4, #12]
   2c558:	f000 fb3b 	bl	2cbd2 <memcpy>
   2c55c:	0732      	lsls	r2, r6, #28
   2c55e:	68ad      	ldr	r5, [r5, #8]
   2c560:	d402      	bmi.n	2c568 <datagram_handler_get+0x4e>
   2c562:	4638      	mov	r0, r7
   2c564:	f7ff ff96 	bl	2c494 <datagram_handler_free_packet>
   2c568:	06b3      	lsls	r3, r6, #26
   2c56a:	bf4c      	ite	mi
   2c56c:	4628      	movmi	r0, r5
   2c56e:	6860      	ldrpl	r0, [r4, #4]
   2c570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c572:	2300      	movs	r3, #0
   2c574:	60e3      	str	r3, [r4, #12]
   2c576:	e7f1      	b.n	2c55c <datagram_handler_get+0x42>
   2c578:	f04f 30ff 	mov.w	r0, #4294967295
   2c57c:	e7f8      	b.n	2c570 <datagram_handler_get+0x56>

0002c57e <datagram_handler_available>:
   2c57e:	b508      	push	{r3, lr}
   2c580:	68c0      	ldr	r0, [r0, #12]
   2c582:	f000 f9cc 	bl	2c91e <linked_list_peek>
   2c586:	b108      	cbz	r0, 2c58c <datagram_handler_available+0xe>
   2c588:	6880      	ldr	r0, [r0, #8]
   2c58a:	bd08      	pop	{r3, pc}
   2c58c:	f04f 30ff 	mov.w	r0, #4294967295
   2c590:	e7fb      	b.n	2c58a <datagram_handler_available+0xc>

0002c592 <datagram_handler_flush>:
   2c592:	68c3      	ldr	r3, [r0, #12]
   2c594:	b510      	push	{r4, lr}
   2c596:	4604      	mov	r4, r0
   2c598:	b923      	cbnz	r3, 2c5a4 <datagram_handler_flush+0x12>
   2c59a:	2016      	movs	r0, #22
   2c59c:	e007      	b.n	2c5ae <datagram_handler_flush+0x1c>
   2c59e:	4620      	mov	r0, r4
   2c5a0:	f7ff ff78 	bl	2c494 <datagram_handler_free_packet>
   2c5a4:	68e0      	ldr	r0, [r4, #12]
   2c5a6:	f000 f9bf 	bl	2c928 <linked_list_size_get>
   2c5aa:	2800      	cmp	r0, #0
   2c5ac:	d1f7      	bne.n	2c59e <datagram_handler_flush+0xc>
   2c5ae:	bd10      	pop	{r4, pc}

0002c5b0 <datagram_handler_free>:
   2c5b0:	68c3      	ldr	r3, [r0, #12]
   2c5b2:	b510      	push	{r4, lr}
   2c5b4:	4604      	mov	r4, r0
   2c5b6:	b133      	cbz	r3, 2c5c6 <datagram_handler_free+0x16>
   2c5b8:	f7ff ffeb 	bl	2c592 <datagram_handler_flush>
   2c5bc:	68e0      	ldr	r0, [r4, #12]
   2c5be:	f7f2 f9c1 	bl	1e944 <nrf_modem_os_free>
   2c5c2:	2300      	movs	r3, #0
   2c5c4:	60e3      	str	r3, [r4, #12]
   2c5c6:	bd10      	pop	{r4, pc}

0002c5c8 <packet_handler_delete>:
   2c5c8:	b510      	push	{r4, lr}
   2c5ca:	4604      	mov	r4, r0
   2c5cc:	6803      	ldr	r3, [r0, #0]
   2c5ce:	691b      	ldr	r3, [r3, #16]
   2c5d0:	4798      	blx	r3
   2c5d2:	6823      	ldr	r3, [r4, #0]
   2c5d4:	4620      	mov	r0, r4
   2c5d6:	695b      	ldr	r3, [r3, #20]
   2c5d8:	4798      	blx	r3
   2c5da:	4620      	mov	r0, r4
   2c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c5e0:	f7f2 b9b0 	b.w	1e944 <nrf_modem_os_free>

0002c5e4 <nrf_modem_recoverable_error_handler>:
   2c5e4:	4770      	bx	lr

0002c5e6 <nrf_modem_platform_error_handler>:
   2c5e6:	b508      	push	{r3, lr}
   2c5e8:	f7ff fffc 	bl	2c5e4 <nrf_modem_recoverable_error_handler>
   2c5ec:	bd08      	pop	{r3, pc}

0002c5ee <unimplemented_method>:
   2c5ee:	b40f      	push	{r0, r1, r2, r3}
   2c5f0:	b508      	push	{r3, lr}
   2c5f2:	205f      	movs	r0, #95	; 0x5f
   2c5f4:	f7fe fd63 	bl	2b0be <nrf_modem_os_errno_set>
   2c5f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2c5fc:	f04f 30ff 	mov.w	r0, #4294967295
   2c600:	b004      	add	sp, #16
   2c602:	4770      	bx	lr

0002c604 <rpc_transport_ipc_fault_handler>:
   2c604:	f7ff bfef 	b.w	2c5e6 <nrf_modem_platform_error_handler>

0002c608 <nrf_modem_platform_init>:
   2c608:	b513      	push	{r0, r1, r4, lr}
   2c60a:	4604      	mov	r4, r0
   2c60c:	f7f2 f9ae 	bl	1e96c <nrf_modem_os_init>
   2c610:	6a23      	ldr	r3, [r4, #32]
   2c612:	4668      	mov	r0, sp
   2c614:	9400      	str	r4, [sp, #0]
   2c616:	f88d 3004 	strb.w	r3, [sp, #4]
   2c61a:	f7f6 fe87 	bl	2332c <rpc_transport_ipc_init>
   2c61e:	4604      	mov	r4, r0
   2c620:	b948      	cbnz	r0, 2c636 <nrf_modem_platform_init+0x2e>
   2c622:	f7f6 ffd7 	bl	235d4 <interface_init>
   2c626:	f7f8 fe95 	bl	25354 <nrf_modem_at_init>
   2c62a:	4604      	mov	r4, r0
   2c62c:	b918      	cbnz	r0, 2c636 <nrf_modem_platform_init+0x2e>
   2c62e:	f7f7 f991 	bl	23954 <ip_interface_init>
   2c632:	f7f8 fa3d 	bl	24ab0 <tls_interface_init>
   2c636:	4620      	mov	r0, r4
   2c638:	b002      	add	sp, #8
   2c63a:	bd10      	pop	{r4, pc}

0002c63c <nrf_modem_platform_fd_method_table_get>:
   2c63c:	b510      	push	{r4, lr}
   2c63e:	f7f7 f89b 	bl	23778 <interface_socket_from_handle_get>
   2c642:	4604      	mov	r4, r0
   2c644:	b130      	cbz	r0, 2c654 <nrf_modem_platform_fd_method_table_get+0x18>
   2c646:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   2c64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c64e:	68c0      	ldr	r0, [r0, #12]
   2c650:	f7f9 b9a2 	b.w	25998 <nrf_modem_platform_af_method_table_get>
   2c654:	2009      	movs	r0, #9
   2c656:	f7fe fd32 	bl	2b0be <nrf_modem_os_errno_set>
   2c65a:	4620      	mov	r0, r4
   2c65c:	bd10      	pop	{r4, pc}

0002c65e <internal_poll>:
   2c65e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c662:	2600      	movs	r6, #0
   2c664:	4688      	mov	r8, r1
   2c666:	4604      	mov	r4, r0
   2c668:	4637      	mov	r7, r6
   2c66a:	4546      	cmp	r6, r8
   2c66c:	d103      	bne.n	2c676 <internal_poll+0x18>
   2c66e:	4638      	mov	r0, r7
   2c670:	b002      	add	sp, #8
   2c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c676:	88a5      	ldrh	r5, [r4, #4]
   2c678:	6820      	ldr	r0, [r4, #0]
   2c67a:	a901      	add	r1, sp, #4
   2c67c:	f7ff fad4 	bl	2bc28 <interface_socket_event_get>
   2c680:	f005 0503 	and.w	r5, r5, #3
   2c684:	9b01      	ldr	r3, [sp, #4]
   2c686:	f045 051c 	orr.w	r5, r5, #28
   2c68a:	401d      	ands	r5, r3
   2c68c:	6820      	ldr	r0, [r4, #0]
   2c68e:	80e5      	strh	r5, [r4, #6]
   2c690:	f7f7 f872 	bl	23778 <interface_socket_from_handle_get>
   2c694:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   2c698:	b168      	cbz	r0, 2c6b6 <internal_poll+0x58>
   2c69a:	071a      	lsls	r2, r3, #28
   2c69c:	d50b      	bpl.n	2c6b6 <internal_poll+0x58>
   2c69e:	6942      	ldr	r2, [r0, #20]
   2c6a0:	2a01      	cmp	r2, #1
   2c6a2:	d003      	beq.n	2c6ac <internal_poll+0x4e>
   2c6a4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   2c6a8:	2a01      	cmp	r2, #1
   2c6aa:	d802      	bhi.n	2c6b2 <internal_poll+0x54>
   2c6ac:	f043 0301 	orr.w	r3, r3, #1
   2c6b0:	80e3      	strh	r3, [r4, #6]
   2c6b2:	3701      	adds	r7, #1
   2c6b4:	e001      	b.n	2c6ba <internal_poll+0x5c>
   2c6b6:	2b00      	cmp	r3, #0
   2c6b8:	d1fb      	bne.n	2c6b2 <internal_poll+0x54>
   2c6ba:	3601      	adds	r6, #1
   2c6bc:	3408      	adds	r4, #8
   2c6be:	e7d4      	b.n	2c66a <internal_poll+0xc>

0002c6c0 <nrf_modem_platform_getaddrinfo>:
   2c6c0:	f7f7 bdf4 	b.w	242ac <ip_interface_getaddrinfo>

0002c6c4 <nrf_modem_platform_freeaddrinfo>:
   2c6c4:	f7f7 bef0 	b.w	244a8 <ip_interface_freeaddrinfo>

0002c6c8 <nrf_modem_platform_poll>:
   2c6c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c6ca:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2c6ce:	2908      	cmp	r1, #8
   2c6d0:	4605      	mov	r5, r0
   2c6d2:	460e      	mov	r6, r1
   2c6d4:	9201      	str	r2, [sp, #4]
   2c6d6:	d906      	bls.n	2c6e6 <nrf_modem_platform_poll+0x1e>
   2c6d8:	2016      	movs	r0, #22
   2c6da:	f7fe fcf0 	bl	2b0be <nrf_modem_os_errno_set>
   2c6de:	f04f 30ff 	mov.w	r0, #4294967295
   2c6e2:	b002      	add	sp, #8
   2c6e4:	bd70      	pop	{r4, r5, r6, pc}
   2c6e6:	b910      	cbnz	r0, 2c6ee <nrf_modem_platform_poll+0x26>
   2c6e8:	b109      	cbz	r1, 2c6ee <nrf_modem_platform_poll+0x26>
   2c6ea:	200e      	movs	r0, #14
   2c6ec:	e7f5      	b.n	2c6da <nrf_modem_platform_poll+0x12>
   2c6ee:	4631      	mov	r1, r6
   2c6f0:	4628      	mov	r0, r5
   2c6f2:	f7ff ffb4 	bl	2c65e <internal_poll>
   2c6f6:	2400      	movs	r4, #0
   2c6f8:	2800      	cmp	r0, #0
   2c6fa:	d1f2      	bne.n	2c6e2 <nrf_modem_platform_poll+0x1a>
   2c6fc:	2c00      	cmp	r4, #0
   2c6fe:	d1f0      	bne.n	2c6e2 <nrf_modem_platform_poll+0x1a>
   2c700:	4628      	mov	r0, r5
   2c702:	a901      	add	r1, sp, #4
   2c704:	f7f1 ffb4 	bl	1e670 <nrf_modem_os_timedwait>
   2c708:	4604      	mov	r4, r0
   2c70a:	b118      	cbz	r0, 2c714 <nrf_modem_platform_poll+0x4c>
   2c70c:	2874      	cmp	r0, #116	; 0x74
   2c70e:	d001      	beq.n	2c714 <nrf_modem_platform_poll+0x4c>
   2c710:	200b      	movs	r0, #11
   2c712:	e7e2      	b.n	2c6da <nrf_modem_platform_poll+0x12>
   2c714:	4631      	mov	r1, r6
   2c716:	4628      	mov	r0, r5
   2c718:	f7ff ffa1 	bl	2c65e <internal_poll>
   2c71c:	e7ec      	b.n	2c6f8 <nrf_modem_platform_poll+0x30>

0002c71e <nrf_modem_platform_fcntl>:
   2c71e:	f7f7 b8bd 	b.w	2389c <interface_socket_fcntl>

0002c722 <nrf_socket>:
   2c722:	b570      	push	{r4, r5, r6, lr}
   2c724:	4604      	mov	r4, r0
   2c726:	460d      	mov	r5, r1
   2c728:	4616      	mov	r6, r2
   2c72a:	f7f9 f935 	bl	25998 <nrf_modem_platform_af_method_table_get>
   2c72e:	b130      	cbz	r0, 2c73e <nrf_socket+0x1c>
   2c730:	4632      	mov	r2, r6
   2c732:	4629      	mov	r1, r5
   2c734:	6803      	ldr	r3, [r0, #0]
   2c736:	4620      	mov	r0, r4
   2c738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c73c:	4718      	bx	r3
   2c73e:	f04f 30ff 	mov.w	r0, #4294967295
   2c742:	bd70      	pop	{r4, r5, r6, pc}

0002c744 <nrf_close>:
   2c744:	b510      	push	{r4, lr}
   2c746:	4604      	mov	r4, r0
   2c748:	f7ff ff78 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c74c:	b120      	cbz	r0, 2c758 <nrf_close+0x14>
   2c74e:	6843      	ldr	r3, [r0, #4]
   2c750:	4620      	mov	r0, r4
   2c752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c756:	4718      	bx	r3
   2c758:	f04f 30ff 	mov.w	r0, #4294967295
   2c75c:	bd10      	pop	{r4, pc}

0002c75e <nrf_sendto>:
   2c75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c762:	4604      	mov	r4, r0
   2c764:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2c768:	460d      	mov	r5, r1
   2c76a:	4616      	mov	r6, r2
   2c76c:	461f      	mov	r7, r3
   2c76e:	f7ff ff65 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c772:	b158      	cbz	r0, 2c78c <nrf_sendto+0x2e>
   2c774:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2c778:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2c77c:	463b      	mov	r3, r7
   2c77e:	4632      	mov	r2, r6
   2c780:	4629      	mov	r1, r5
   2c782:	4620      	mov	r0, r4
   2c784:	46f4      	mov	ip, lr
   2c786:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c78a:	4760      	bx	ip
   2c78c:	f04f 30ff 	mov.w	r0, #4294967295
   2c790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c794 <nrf_recvfrom>:
   2c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c798:	4604      	mov	r4, r0
   2c79a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2c79e:	460d      	mov	r5, r1
   2c7a0:	4616      	mov	r6, r2
   2c7a2:	461f      	mov	r7, r3
   2c7a4:	f7ff ff4a 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c7a8:	b158      	cbz	r0, 2c7c2 <nrf_recvfrom+0x2e>
   2c7aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2c7ae:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2c7b2:	463b      	mov	r3, r7
   2c7b4:	4632      	mov	r2, r6
   2c7b6:	4629      	mov	r1, r5
   2c7b8:	4620      	mov	r0, r4
   2c7ba:	46f4      	mov	ip, lr
   2c7bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c7c0:	4760      	bx	ip
   2c7c2:	f04f 30ff 	mov.w	r0, #4294967295
   2c7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c7ca <nrf_connect>:
   2c7ca:	b570      	push	{r4, r5, r6, lr}
   2c7cc:	4604      	mov	r4, r0
   2c7ce:	460d      	mov	r5, r1
   2c7d0:	4616      	mov	r6, r2
   2c7d2:	f7ff ff33 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c7d6:	b130      	cbz	r0, 2c7e6 <nrf_connect+0x1c>
   2c7d8:	4632      	mov	r2, r6
   2c7da:	4629      	mov	r1, r5
   2c7dc:	6943      	ldr	r3, [r0, #20]
   2c7de:	4620      	mov	r0, r4
   2c7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c7e4:	4718      	bx	r3
   2c7e6:	f04f 30ff 	mov.w	r0, #4294967295
   2c7ea:	bd70      	pop	{r4, r5, r6, pc}

0002c7ec <nrf_listen>:
   2c7ec:	b570      	push	{r4, r5, r6, lr}
   2c7ee:	4604      	mov	r4, r0
   2c7f0:	460d      	mov	r5, r1
   2c7f2:	f7ff ff23 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c7f6:	b128      	cbz	r0, 2c804 <nrf_listen+0x18>
   2c7f8:	4629      	mov	r1, r5
   2c7fa:	6983      	ldr	r3, [r0, #24]
   2c7fc:	4620      	mov	r0, r4
   2c7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c802:	4718      	bx	r3
   2c804:	f04f 30ff 	mov.w	r0, #4294967295
   2c808:	bd70      	pop	{r4, r5, r6, pc}

0002c80a <nrf_accept>:
   2c80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c80e:	4604      	mov	r4, r0
   2c810:	460d      	mov	r5, r1
   2c812:	4616      	mov	r6, r2
   2c814:	f7ff ff12 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c818:	b140      	cbz	r0, 2c82c <nrf_accept+0x22>
   2c81a:	69c7      	ldr	r7, [r0, #28]
   2c81c:	4632      	mov	r2, r6
   2c81e:	4629      	mov	r1, r5
   2c820:	4620      	mov	r0, r4
   2c822:	46bc      	mov	ip, r7
   2c824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c828:	2300      	movs	r3, #0
   2c82a:	4760      	bx	ip
   2c82c:	f04f 30ff 	mov.w	r0, #4294967295
   2c830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c834 <nrf_bind>:
   2c834:	b570      	push	{r4, r5, r6, lr}
   2c836:	4604      	mov	r4, r0
   2c838:	460d      	mov	r5, r1
   2c83a:	4616      	mov	r6, r2
   2c83c:	f7ff fefe 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c840:	b130      	cbz	r0, 2c850 <nrf_bind+0x1c>
   2c842:	4632      	mov	r2, r6
   2c844:	4629      	mov	r1, r5
   2c846:	6903      	ldr	r3, [r0, #16]
   2c848:	4620      	mov	r0, r4
   2c84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c84e:	4718      	bx	r3
   2c850:	f04f 30ff 	mov.w	r0, #4294967295
   2c854:	bd70      	pop	{r4, r5, r6, pc}

0002c856 <nrf_setsockopt>:
   2c856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c85a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c85e:	4604      	mov	r4, r0
   2c860:	460d      	mov	r5, r1
   2c862:	4616      	mov	r6, r2
   2c864:	461f      	mov	r7, r3
   2c866:	f7ff fee9 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c86a:	b158      	cbz	r0, 2c884 <nrf_setsockopt+0x2e>
   2c86c:	f8cd 8018 	str.w	r8, [sp, #24]
   2c870:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2c874:	463b      	mov	r3, r7
   2c876:	4632      	mov	r2, r6
   2c878:	4629      	mov	r1, r5
   2c87a:	4620      	mov	r0, r4
   2c87c:	46f4      	mov	ip, lr
   2c87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c882:	4760      	bx	ip
   2c884:	f04f 30ff 	mov.w	r0, #4294967295
   2c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c88c <nrf_getsockopt>:
   2c88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c890:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c894:	4604      	mov	r4, r0
   2c896:	460d      	mov	r5, r1
   2c898:	4616      	mov	r6, r2
   2c89a:	461f      	mov	r7, r3
   2c89c:	f7ff fece 	bl	2c63c <nrf_modem_platform_fd_method_table_get>
   2c8a0:	b158      	cbz	r0, 2c8ba <nrf_getsockopt+0x2e>
   2c8a2:	f8cd 8018 	str.w	r8, [sp, #24]
   2c8a6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2c8aa:	463b      	mov	r3, r7
   2c8ac:	4632      	mov	r2, r6
   2c8ae:	4629      	mov	r1, r5
   2c8b0:	4620      	mov	r0, r4
   2c8b2:	46f4      	mov	ip, lr
   2c8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2c8b8:	4760      	bx	ip
   2c8ba:	f04f 30ff 	mov.w	r0, #4294967295
   2c8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c8c2 <nrf_getaddrinfo>:
   2c8c2:	f7ff befd 	b.w	2c6c0 <nrf_modem_platform_getaddrinfo>

0002c8c6 <nrf_freeaddrinfo>:
   2c8c6:	f7ff befd 	b.w	2c6c4 <nrf_modem_platform_freeaddrinfo>

0002c8ca <nrf_poll>:
   2c8ca:	f7ff befd 	b.w	2c6c8 <nrf_modem_platform_poll>

0002c8ce <nrf_fcntl>:
   2c8ce:	f7ff bf26 	b.w	2c71e <nrf_modem_platform_fcntl>

0002c8d2 <linked_list_init>:
   2c8d2:	4603      	mov	r3, r0
   2c8d4:	b120      	cbz	r0, 2c8e0 <linked_list_init+0xe>
   2c8d6:	2000      	movs	r0, #0
   2c8d8:	e9c3 0001 	strd	r0, r0, [r3, #4]
   2c8dc:	6018      	str	r0, [r3, #0]
   2c8de:	4770      	bx	lr
   2c8e0:	2016      	movs	r0, #22
   2c8e2:	4770      	bx	lr

0002c8e4 <linked_list_push>:
   2c8e4:	6803      	ldr	r3, [r0, #0]
   2c8e6:	3301      	adds	r3, #1
   2c8e8:	d00d      	beq.n	2c906 <linked_list_push+0x22>
   2c8ea:	2300      	movs	r3, #0
   2c8ec:	600b      	str	r3, [r1, #0]
   2c8ee:	6803      	ldr	r3, [r0, #0]
   2c8f0:	b933      	cbnz	r3, 2c900 <linked_list_push+0x1c>
   2c8f2:	6041      	str	r1, [r0, #4]
   2c8f4:	6803      	ldr	r3, [r0, #0]
   2c8f6:	6081      	str	r1, [r0, #8]
   2c8f8:	3301      	adds	r3, #1
   2c8fa:	6003      	str	r3, [r0, #0]
   2c8fc:	2000      	movs	r0, #0
   2c8fe:	4770      	bx	lr
   2c900:	6883      	ldr	r3, [r0, #8]
   2c902:	6019      	str	r1, [r3, #0]
   2c904:	e7f6      	b.n	2c8f4 <linked_list_push+0x10>
   2c906:	200c      	movs	r0, #12
   2c908:	4770      	bx	lr

0002c90a <linked_list_pop>:
   2c90a:	4603      	mov	r3, r0
   2c90c:	6800      	ldr	r0, [r0, #0]
   2c90e:	b128      	cbz	r0, 2c91c <linked_list_pop+0x12>
   2c910:	6858      	ldr	r0, [r3, #4]
   2c912:	6802      	ldr	r2, [r0, #0]
   2c914:	605a      	str	r2, [r3, #4]
   2c916:	681a      	ldr	r2, [r3, #0]
   2c918:	3a01      	subs	r2, #1
   2c91a:	601a      	str	r2, [r3, #0]
   2c91c:	4770      	bx	lr

0002c91e <linked_list_peek>:
   2c91e:	4603      	mov	r3, r0
   2c920:	6800      	ldr	r0, [r0, #0]
   2c922:	b100      	cbz	r0, 2c926 <linked_list_peek+0x8>
   2c924:	6858      	ldr	r0, [r3, #4]
   2c926:	4770      	bx	lr

0002c928 <linked_list_size_get>:
   2c928:	6800      	ldr	r0, [r0, #0]
   2c92a:	4770      	bx	lr

0002c92c <linked_list_get_next>:
   2c92c:	6800      	ldr	r0, [r0, #0]
   2c92e:	4770      	bx	lr

0002c930 <z_device_state_init>:
}
   2c930:	4770      	bx	lr

0002c932 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2c932:	b138      	cbz	r0, 2c944 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2c934:	68c3      	ldr	r3, [r0, #12]
   2c936:	8818      	ldrh	r0, [r3, #0]
   2c938:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2c93c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2c940:	4258      	negs	r0, r3
   2c942:	4158      	adcs	r0, r3
}
   2c944:	4770      	bx	lr

0002c946 <k_heap_init>:
{
   2c946:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2c948:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2c94c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2c950:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2c952:	f7ee bbd7 	b.w	1b104 <sys_heap_init>

0002c956 <k_heap_alloc>:
{
   2c956:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   2c958:	e9cd 2300 	strd	r2, r3, [sp]
   2c95c:	460a      	mov	r2, r1
   2c95e:	2104      	movs	r1, #4
   2c960:	f7f9 f9aa 	bl	25cb8 <k_heap_aligned_alloc>
}
   2c964:	b003      	add	sp, #12
   2c966:	f85d fb04 	ldr.w	pc, [sp], #4

0002c96a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2c96a:	f3ef 8005 	mrs	r0, IPSR
}
   2c96e:	3800      	subs	r0, #0
   2c970:	bf18      	it	ne
   2c972:	2001      	movne	r0, #1
   2c974:	4770      	bx	lr

0002c976 <z_impl_k_thread_name_set>:
}
   2c976:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2c97a:	4770      	bx	lr

0002c97c <k_thread_name_get>:
}
   2c97c:	2000      	movs	r0, #0
   2c97e:	4770      	bx	lr

0002c980 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2c980:	f7fa bd06 	b.w	27390 <z_sched_start>

0002c984 <z_pm_save_idle_exit>:
{
   2c984:	b508      	push	{r3, lr}
	pm_system_resume();
   2c986:	f7ef fa8d 	bl	1bea4 <pm_system_resume>
}
   2c98a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2c98e:	f7fe bb93 	b.w	2b0b8 <sys_clock_idle_exit>

0002c992 <z_impl_k_mutex_init>:
{
   2c992:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2c994:	2000      	movs	r0, #0
   2c996:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2c99a:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2c99e:	4770      	bx	lr

0002c9a0 <z_queue_node_peek>:
{
   2c9a0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2c9a2:	4604      	mov	r4, r0
   2c9a4:	b130      	cbz	r0, 2c9b4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c9a6:	6802      	ldr	r2, [r0, #0]
   2c9a8:	0793      	lsls	r3, r2, #30
   2c9aa:	d003      	beq.n	2c9b4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2c9ac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2c9ae:	b109      	cbz	r1, 2c9b4 <z_queue_node_peek+0x14>
			k_free(anode);
   2c9b0:	f000 f8d3 	bl	2cb5a <k_free>
}
   2c9b4:	4620      	mov	r0, r4
   2c9b6:	bd10      	pop	{r4, pc}

0002c9b8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2c9b8:	2301      	movs	r3, #1
{
   2c9ba:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2c9bc:	9300      	str	r3, [sp, #0]
   2c9be:	2300      	movs	r3, #0
{
   2c9c0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2c9c2:	4619      	mov	r1, r3
   2c9c4:	f7f9 fd56 	bl	26474 <queue_insert>
}
   2c9c8:	b003      	add	sp, #12
   2c9ca:	f85d fb04 	ldr.w	pc, [sp], #4

0002c9ce <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2c9ce:	b15a      	cbz	r2, 2c9e8 <z_impl_k_sem_init+0x1a>
   2c9d0:	428a      	cmp	r2, r1
   2c9d2:	d309      	bcc.n	2c9e8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2c9d4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2c9d8:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2c9dc:	e9c0 0000 	strd	r0, r0, [r0]
   2c9e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2c9e4:	2000      	movs	r0, #0
   2c9e6:	4770      	bx	lr
		return -EINVAL;
   2c9e8:	f06f 0015 	mvn.w	r0, #21
}
   2c9ec:	4770      	bx	lr

0002c9ee <notify_queue_locked>:
	if (queue != NULL) {
   2c9ee:	b120      	cbz	r0, 2c9fa <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2c9f0:	2200      	movs	r2, #0
   2c9f2:	3088      	adds	r0, #136	; 0x88
   2c9f4:	4611      	mov	r1, r2
   2c9f6:	f7fb b997 	b.w	27d28 <z_sched_wake>
}
   2c9fa:	4770      	bx	lr

0002c9fc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2c9fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ca00:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ca04:	4283      	cmp	r3, r0
		return b2 - b1;
   2ca06:	bf14      	ite	ne
   2ca08:	1ac0      	subne	r0, r0, r3
	return 0;
   2ca0a:	2000      	moveq	r0, #0
}
   2ca0c:	4770      	bx	lr

0002ca0e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ca0e:	4603      	mov	r3, r0
   2ca10:	b920      	cbnz	r0, 2ca1c <z_reschedule_irqlock+0xe>
   2ca12:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2ca16:	b90a      	cbnz	r2, 2ca1c <z_reschedule_irqlock+0xe>
   2ca18:	f7ef bbe2 	b.w	1c1e0 <arch_swap>
   2ca1c:	f383 8811 	msr	BASEPRI, r3
   2ca20:	f3bf 8f6f 	isb	sy
}
   2ca24:	4770      	bx	lr

0002ca26 <z_reschedule_unlocked>:
	__asm__ volatile(
   2ca26:	f04f 0320 	mov.w	r3, #32
   2ca2a:	f3ef 8011 	mrs	r0, BASEPRI
   2ca2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca32:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ca36:	f7ff bfea 	b.w	2ca0e <z_reschedule_irqlock>

0002ca3a <z_priq_dumb_best>:
{
   2ca3a:	4603      	mov	r3, r0
	return list->head == list;
   2ca3c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca3e:	4283      	cmp	r3, r0
   2ca40:	d003      	beq.n	2ca4a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2ca42:	2800      	cmp	r0, #0
   2ca44:	bf38      	it	cc
   2ca46:	2000      	movcc	r0, #0
   2ca48:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2ca4a:	2000      	movs	r0, #0
}
   2ca4c:	4770      	bx	lr

0002ca4e <z_unpend_all>:
{
   2ca4e:	b538      	push	{r3, r4, r5, lr}
   2ca50:	4605      	mov	r5, r0
	int need_sched = 0;
   2ca52:	2000      	movs	r0, #0
	return list->head == list;
   2ca54:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca56:	42a5      	cmp	r5, r4
   2ca58:	d000      	beq.n	2ca5c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ca5a:	b904      	cbnz	r4, 2ca5e <z_unpend_all+0x10>
}
   2ca5c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ca5e:	4620      	mov	r0, r4
   2ca60:	f7fa faee 	bl	27040 <z_unpend_thread>
		z_ready_thread(thread);
   2ca64:	4620      	mov	r0, r4
   2ca66:	f7fa fc5d 	bl	27324 <z_ready_thread>
		need_sched = 1;
   2ca6a:	2001      	movs	r0, #1
   2ca6c:	e7f2      	b.n	2ca54 <z_unpend_all+0x6>

0002ca6e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ca6e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ca70:	f7fb fc3a 	bl	282e8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ca74:	bd08      	pop	{r3, pc}

0002ca76 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ca76:	f7fb bc37 	b.w	282e8 <sys_clock_tick_get>

0002ca7a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ca7a:	b108      	cbz	r0, 2ca80 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ca7c:	f7ee bfcc 	b.w	1ba18 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ca80:	4770      	bx	lr

0002ca82 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2ca82:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ca84:	1c4b      	adds	r3, r1, #1
   2ca86:	bf08      	it	eq
   2ca88:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ca8c:	4604      	mov	r4, r0
   2ca8e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ca90:	d013      	beq.n	2caba <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ca92:	ea54 0105 	orrs.w	r1, r4, r5
   2ca96:	d103      	bne.n	2caa0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ca98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ca9c:	f7fb bc24 	b.w	282e8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2caa0:	f06f 0101 	mvn.w	r1, #1
   2caa4:	1a0a      	subs	r2, r1, r0
   2caa6:	f04f 31ff 	mov.w	r1, #4294967295
   2caaa:	eb61 0305 	sbc.w	r3, r1, r5
   2caae:	2a00      	cmp	r2, #0
   2cab0:	f173 0100 	sbcs.w	r1, r3, #0
   2cab4:	db02      	blt.n	2cabc <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2cab6:	4610      	mov	r0, r2
   2cab8:	4619      	mov	r1, r3
}
   2caba:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2cabc:	f7fb fc14 	bl	282e8 <sys_clock_tick_get>
   2cac0:	2c01      	cmp	r4, #1
   2cac2:	f175 0300 	sbcs.w	r3, r5, #0
   2cac6:	bfbc      	itt	lt
   2cac8:	2401      	movlt	r4, #1
   2caca:	2500      	movlt	r5, #0
   2cacc:	1820      	adds	r0, r4, r0
   2cace:	eb45 0101 	adc.w	r1, r5, r1
   2cad2:	e7f2      	b.n	2caba <sys_clock_timeout_end_calc+0x38>

0002cad4 <add_event>:
{
   2cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cad6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2cad8:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cadc:	4290      	cmp	r0, r2
   2cade:	4604      	mov	r4, r0
   2cae0:	460d      	mov	r5, r1
   2cae2:	d105      	bne.n	2caf0 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2cae4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2cae6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2caea:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2caec:	6065      	str	r5, [r4, #4]
}
   2caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2caf0:	2b00      	cmp	r3, #0
   2caf2:	d0f7      	beq.n	2cae4 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2caf4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2caf6:	b100      	cbz	r0, 2cafa <add_event+0x26>
   2caf8:	3860      	subs	r0, #96	; 0x60
   2cafa:	b107      	cbz	r7, 2cafe <add_event+0x2a>
   2cafc:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2cafe:	4639      	mov	r1, r7
   2cb00:	f7ff ff7c 	bl	2c9fc <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2cb04:	2800      	cmp	r0, #0
   2cb06:	dced      	bgt.n	2cae4 <add_event+0x10>
	return list->head == list;
   2cb08:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cb0a:	42b4      	cmp	r4, r6
   2cb0c:	d0ea      	beq.n	2cae4 <add_event+0x10>
   2cb0e:	2e00      	cmp	r6, #0
   2cb10:	bf38      	it	cc
   2cb12:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2cb14:	2e00      	cmp	r6, #0
   2cb16:	d0e5      	beq.n	2cae4 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2cb18:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2cb1a:	b101      	cbz	r1, 2cb1e <add_event+0x4a>
   2cb1c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2cb1e:	4638      	mov	r0, r7
   2cb20:	f7ff ff6c 	bl	2c9fc <z_sched_prio_cmp>
   2cb24:	2800      	cmp	r0, #0
   2cb26:	dd05      	ble.n	2cb34 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2cb28:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2cb2a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2cb2e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2cb30:	6075      	str	r5, [r6, #4]
			return;
   2cb32:	e7dc      	b.n	2caee <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2cb34:	6863      	ldr	r3, [r4, #4]
   2cb36:	42b3      	cmp	r3, r6
   2cb38:	d0d4      	beq.n	2cae4 <add_event+0x10>
   2cb3a:	6836      	ldr	r6, [r6, #0]
   2cb3c:	e7ea      	b.n	2cb14 <add_event+0x40>

0002cb3e <z_handle_obj_poll_events>:
{
   2cb3e:	4603      	mov	r3, r0
	return list->head == list;
   2cb40:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2cb42:	4283      	cmp	r3, r0
   2cb44:	d008      	beq.n	2cb58 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2cb46:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2cb4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2cb4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cb4e:	2300      	movs	r3, #0
	node->prev = NULL;
   2cb50:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2cb54:	f7fb bd8a 	b.w	2866c <signal_poll_event>
}
   2cb58:	4770      	bx	lr

0002cb5a <k_free>:
	if (ptr != NULL) {
   2cb5a:	b120      	cbz	r0, 2cb66 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2cb5c:	1f01      	subs	r1, r0, #4
   2cb5e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2cb62:	f7f9 b937 	b.w	25dd4 <k_heap_free>
}
   2cb66:	4770      	bx	lr

0002cb68 <k_malloc>:
{
   2cb68:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2cb6a:	2004      	movs	r0, #4
   2cb6c:	f7fb bf38 	b.w	289e0 <k_aligned_alloc>

0002cb70 <k_calloc>:
{
   2cb70:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   2cb72:	fb01 f500 	mul.w	r5, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   2cb76:	b118      	cbz	r0, 2cb80 <k_calloc+0x10>
   2cb78:	fbb5 f0f0 	udiv	r0, r5, r0
   2cb7c:	4281      	cmp	r1, r0
   2cb7e:	d10a      	bne.n	2cb96 <k_calloc+0x26>
	ret = k_malloc(bounds);
   2cb80:	4628      	mov	r0, r5
   2cb82:	f7ff fff1 	bl	2cb68 <k_malloc>
	if (ret != NULL) {
   2cb86:	4604      	mov	r4, r0
   2cb88:	b118      	cbz	r0, 2cb92 <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   2cb8a:	462a      	mov	r2, r5
   2cb8c:	2100      	movs	r1, #0
   2cb8e:	f000 f82d 	bl	2cbec <memset>
}
   2cb92:	4620      	mov	r0, r4
   2cb94:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   2cb96:	2400      	movs	r4, #0
   2cb98:	e7fb      	b.n	2cb92 <k_calloc+0x22>

0002cb9a <memchr>:
   2cb9a:	b2c9      	uxtb	r1, r1
   2cb9c:	4603      	mov	r3, r0
   2cb9e:	4402      	add	r2, r0
   2cba0:	b510      	push	{r4, lr}
   2cba2:	4293      	cmp	r3, r2
   2cba4:	4618      	mov	r0, r3
   2cba6:	d101      	bne.n	2cbac <memchr+0x12>
   2cba8:	2000      	movs	r0, #0
   2cbaa:	e003      	b.n	2cbb4 <memchr+0x1a>
   2cbac:	7804      	ldrb	r4, [r0, #0]
   2cbae:	3301      	adds	r3, #1
   2cbb0:	428c      	cmp	r4, r1
   2cbb2:	d1f6      	bne.n	2cba2 <memchr+0x8>
   2cbb4:	bd10      	pop	{r4, pc}

0002cbb6 <memcmp>:
   2cbb6:	b530      	push	{r4, r5, lr}
   2cbb8:	3901      	subs	r1, #1
   2cbba:	2400      	movs	r4, #0
   2cbbc:	42a2      	cmp	r2, r4
   2cbbe:	d101      	bne.n	2cbc4 <memcmp+0xe>
   2cbc0:	2000      	movs	r0, #0
   2cbc2:	e005      	b.n	2cbd0 <memcmp+0x1a>
   2cbc4:	5d03      	ldrb	r3, [r0, r4]
   2cbc6:	3401      	adds	r4, #1
   2cbc8:	5d0d      	ldrb	r5, [r1, r4]
   2cbca:	42ab      	cmp	r3, r5
   2cbcc:	d0f6      	beq.n	2cbbc <memcmp+0x6>
   2cbce:	1b58      	subs	r0, r3, r5
   2cbd0:	bd30      	pop	{r4, r5, pc}

0002cbd2 <memcpy>:
   2cbd2:	440a      	add	r2, r1
   2cbd4:	1e43      	subs	r3, r0, #1
   2cbd6:	4291      	cmp	r1, r2
   2cbd8:	d100      	bne.n	2cbdc <memcpy+0xa>
   2cbda:	4770      	bx	lr
   2cbdc:	b510      	push	{r4, lr}
   2cbde:	f811 4b01 	ldrb.w	r4, [r1], #1
   2cbe2:	4291      	cmp	r1, r2
   2cbe4:	f803 4f01 	strb.w	r4, [r3, #1]!
   2cbe8:	d1f9      	bne.n	2cbde <memcpy+0xc>
   2cbea:	bd10      	pop	{r4, pc}

0002cbec <memset>:
   2cbec:	4402      	add	r2, r0
   2cbee:	4603      	mov	r3, r0
   2cbf0:	4293      	cmp	r3, r2
   2cbf2:	d100      	bne.n	2cbf6 <memset+0xa>
   2cbf4:	4770      	bx	lr
   2cbf6:	f803 1b01 	strb.w	r1, [r3], #1
   2cbfa:	e7f9      	b.n	2cbf0 <memset+0x4>

0002cbfc <__cvt>:
   2cbfc:	2b00      	cmp	r3, #0
   2cbfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cc02:	461f      	mov	r7, r3
   2cc04:	b088      	sub	sp, #32
   2cc06:	bfb4      	ite	lt
   2cc08:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2cc0c:	2300      	movge	r3, #0
   2cc0e:	4614      	mov	r4, r2
   2cc10:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2cc12:	bfbc      	itt	lt
   2cc14:	461f      	movlt	r7, r3
   2cc16:	232d      	movlt	r3, #45	; 0x2d
   2cc18:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2cc1a:	7013      	strb	r3, [r2, #0]
   2cc1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2cc1e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2cc22:	f023 0820 	bic.w	r8, r3, #32
   2cc26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2cc2a:	d005      	beq.n	2cc38 <__cvt+0x3c>
   2cc2c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   2cc30:	d100      	bne.n	2cc34 <__cvt+0x38>
   2cc32:	3501      	adds	r5, #1
   2cc34:	2302      	movs	r3, #2
   2cc36:	e000      	b.n	2cc3a <__cvt+0x3e>
   2cc38:	2303      	movs	r3, #3
   2cc3a:	aa07      	add	r2, sp, #28
   2cc3c:	9204      	str	r2, [sp, #16]
   2cc3e:	aa06      	add	r2, sp, #24
   2cc40:	e9cd 3500 	strd	r3, r5, [sp]
   2cc44:	e9cd a202 	strd	sl, r2, [sp, #8]
   2cc48:	463b      	mov	r3, r7
   2cc4a:	4622      	mov	r2, r4
   2cc4c:	f7ec fef4 	bl	19a38 <_dtoa_r>
   2cc50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2cc54:	4606      	mov	r6, r0
   2cc56:	d102      	bne.n	2cc5e <__cvt+0x62>
   2cc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2cc5a:	07db      	lsls	r3, r3, #31
   2cc5c:	d522      	bpl.n	2cca4 <__cvt+0xa8>
   2cc5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2cc62:	eb06 0905 	add.w	r9, r6, r5
   2cc66:	d110      	bne.n	2cc8a <__cvt+0x8e>
   2cc68:	7833      	ldrb	r3, [r6, #0]
   2cc6a:	2b30      	cmp	r3, #48	; 0x30
   2cc6c:	d10a      	bne.n	2cc84 <__cvt+0x88>
   2cc6e:	2200      	movs	r2, #0
   2cc70:	2300      	movs	r3, #0
   2cc72:	4620      	mov	r0, r4
   2cc74:	4639      	mov	r1, r7
   2cc76:	f7ec fbe7 	bl	19448 <__aeabi_dcmpeq>
   2cc7a:	b918      	cbnz	r0, 2cc84 <__cvt+0x88>
   2cc7c:	f1c5 0501 	rsb	r5, r5, #1
   2cc80:	f8ca 5000 	str.w	r5, [sl]
   2cc84:	f8da 3000 	ldr.w	r3, [sl]
   2cc88:	4499      	add	r9, r3
   2cc8a:	2200      	movs	r2, #0
   2cc8c:	2300      	movs	r3, #0
   2cc8e:	4620      	mov	r0, r4
   2cc90:	4639      	mov	r1, r7
   2cc92:	f7ec fbd9 	bl	19448 <__aeabi_dcmpeq>
   2cc96:	b108      	cbz	r0, 2cc9c <__cvt+0xa0>
   2cc98:	f8cd 901c 	str.w	r9, [sp, #28]
   2cc9c:	2230      	movs	r2, #48	; 0x30
   2cc9e:	9b07      	ldr	r3, [sp, #28]
   2cca0:	454b      	cmp	r3, r9
   2cca2:	d307      	bcc.n	2ccb4 <__cvt+0xb8>
   2cca4:	9b07      	ldr	r3, [sp, #28]
   2cca6:	4630      	mov	r0, r6
   2cca8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2ccaa:	1b9b      	subs	r3, r3, r6
   2ccac:	6013      	str	r3, [r2, #0]
   2ccae:	b008      	add	sp, #32
   2ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ccb4:	1c59      	adds	r1, r3, #1
   2ccb6:	9107      	str	r1, [sp, #28]
   2ccb8:	701a      	strb	r2, [r3, #0]
   2ccba:	e7f0      	b.n	2cc9e <__cvt+0xa2>

0002ccbc <__exponent>:
   2ccbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ccbe:	2900      	cmp	r1, #0
   2ccc0:	4603      	mov	r3, r0
   2ccc2:	bfb8      	it	lt
   2ccc4:	4249      	neglt	r1, r1
   2ccc6:	f803 2b02 	strb.w	r2, [r3], #2
   2ccca:	bfb4      	ite	lt
   2cccc:	222d      	movlt	r2, #45	; 0x2d
   2ccce:	222b      	movge	r2, #43	; 0x2b
   2ccd0:	2909      	cmp	r1, #9
   2ccd2:	7042      	strb	r2, [r0, #1]
   2ccd4:	dd2a      	ble.n	2cd2c <__exponent+0x70>
   2ccd6:	f10d 0407 	add.w	r4, sp, #7
   2ccda:	270a      	movs	r7, #10
   2ccdc:	46a4      	mov	ip, r4
   2ccde:	460a      	mov	r2, r1
   2cce0:	46a6      	mov	lr, r4
   2cce2:	3c01      	subs	r4, #1
   2cce4:	2a63      	cmp	r2, #99	; 0x63
   2cce6:	fb91 f6f7 	sdiv	r6, r1, r7
   2ccea:	fb07 1516 	mls	r5, r7, r6, r1
   2ccee:	4631      	mov	r1, r6
   2ccf0:	f105 0530 	add.w	r5, r5, #48	; 0x30
   2ccf4:	f80e 5c01 	strb.w	r5, [lr, #-1]
   2ccf8:	dcf1      	bgt.n	2ccde <__exponent+0x22>
   2ccfa:	3130      	adds	r1, #48	; 0x30
   2ccfc:	f1ae 0502 	sub.w	r5, lr, #2
   2cd00:	f804 1c01 	strb.w	r1, [r4, #-1]
   2cd04:	1c44      	adds	r4, r0, #1
   2cd06:	4629      	mov	r1, r5
   2cd08:	4561      	cmp	r1, ip
   2cd0a:	d30a      	bcc.n	2cd22 <__exponent+0x66>
   2cd0c:	f10d 0209 	add.w	r2, sp, #9
   2cd10:	eba2 020e 	sub.w	r2, r2, lr
   2cd14:	4565      	cmp	r5, ip
   2cd16:	bf88      	it	hi
   2cd18:	2200      	movhi	r2, #0
   2cd1a:	4413      	add	r3, r2
   2cd1c:	1a18      	subs	r0, r3, r0
   2cd1e:	b003      	add	sp, #12
   2cd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cd22:	f811 2b01 	ldrb.w	r2, [r1], #1
   2cd26:	f804 2f01 	strb.w	r2, [r4, #1]!
   2cd2a:	e7ed      	b.n	2cd08 <__exponent+0x4c>
   2cd2c:	2330      	movs	r3, #48	; 0x30
   2cd2e:	3130      	adds	r1, #48	; 0x30
   2cd30:	7083      	strb	r3, [r0, #2]
   2cd32:	1d03      	adds	r3, r0, #4
   2cd34:	70c1      	strb	r1, [r0, #3]
   2cd36:	e7f1      	b.n	2cd1c <__exponent+0x60>

0002cd38 <_printf_common>:
   2cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cd3c:	4616      	mov	r6, r2
   2cd3e:	4699      	mov	r9, r3
   2cd40:	688a      	ldr	r2, [r1, #8]
   2cd42:	4607      	mov	r7, r0
   2cd44:	690b      	ldr	r3, [r1, #16]
   2cd46:	460c      	mov	r4, r1
   2cd48:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2cd4c:	4293      	cmp	r3, r2
   2cd4e:	bfb8      	it	lt
   2cd50:	4613      	movlt	r3, r2
   2cd52:	6033      	str	r3, [r6, #0]
   2cd54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2cd58:	b10a      	cbz	r2, 2cd5e <_printf_common+0x26>
   2cd5a:	3301      	adds	r3, #1
   2cd5c:	6033      	str	r3, [r6, #0]
   2cd5e:	6823      	ldr	r3, [r4, #0]
   2cd60:	0699      	lsls	r1, r3, #26
   2cd62:	bf42      	ittt	mi
   2cd64:	6833      	ldrmi	r3, [r6, #0]
   2cd66:	3302      	addmi	r3, #2
   2cd68:	6033      	strmi	r3, [r6, #0]
   2cd6a:	6825      	ldr	r5, [r4, #0]
   2cd6c:	f015 0506 	ands.w	r5, r5, #6
   2cd70:	d106      	bne.n	2cd80 <_printf_common+0x48>
   2cd72:	f104 0a19 	add.w	sl, r4, #25
   2cd76:	68e3      	ldr	r3, [r4, #12]
   2cd78:	6832      	ldr	r2, [r6, #0]
   2cd7a:	1a9b      	subs	r3, r3, r2
   2cd7c:	42ab      	cmp	r3, r5
   2cd7e:	dc29      	bgt.n	2cdd4 <_printf_common+0x9c>
   2cd80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2cd84:	1e13      	subs	r3, r2, #0
   2cd86:	6822      	ldr	r2, [r4, #0]
   2cd88:	bf18      	it	ne
   2cd8a:	2301      	movne	r3, #1
   2cd8c:	0692      	lsls	r2, r2, #26
   2cd8e:	d42e      	bmi.n	2cdee <_printf_common+0xb6>
   2cd90:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2cd94:	4649      	mov	r1, r9
   2cd96:	4638      	mov	r0, r7
   2cd98:	47c0      	blx	r8
   2cd9a:	3001      	adds	r0, #1
   2cd9c:	d021      	beq.n	2cde2 <_printf_common+0xaa>
   2cd9e:	6823      	ldr	r3, [r4, #0]
   2cda0:	341a      	adds	r4, #26
   2cda2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   2cda6:	f003 0306 	and.w	r3, r3, #6
   2cdaa:	6832      	ldr	r2, [r6, #0]
   2cdac:	2600      	movs	r6, #0
   2cdae:	2b04      	cmp	r3, #4
   2cdb0:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2cdb4:	bf08      	it	eq
   2cdb6:	1aad      	subeq	r5, r5, r2
   2cdb8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2cdbc:	bf14      	ite	ne
   2cdbe:	2500      	movne	r5, #0
   2cdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2cdc4:	4293      	cmp	r3, r2
   2cdc6:	bfc4      	itt	gt
   2cdc8:	1a9b      	subgt	r3, r3, r2
   2cdca:	18ed      	addgt	r5, r5, r3
   2cdcc:	42b5      	cmp	r5, r6
   2cdce:	d11a      	bne.n	2ce06 <_printf_common+0xce>
   2cdd0:	2000      	movs	r0, #0
   2cdd2:	e008      	b.n	2cde6 <_printf_common+0xae>
   2cdd4:	2301      	movs	r3, #1
   2cdd6:	4652      	mov	r2, sl
   2cdd8:	4649      	mov	r1, r9
   2cdda:	4638      	mov	r0, r7
   2cddc:	47c0      	blx	r8
   2cdde:	3001      	adds	r0, #1
   2cde0:	d103      	bne.n	2cdea <_printf_common+0xb2>
   2cde2:	f04f 30ff 	mov.w	r0, #4294967295
   2cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cdea:	3501      	adds	r5, #1
   2cdec:	e7c3      	b.n	2cd76 <_printf_common+0x3e>
   2cdee:	18e1      	adds	r1, r4, r3
   2cdf0:	1c5a      	adds	r2, r3, #1
   2cdf2:	2030      	movs	r0, #48	; 0x30
   2cdf4:	3302      	adds	r3, #2
   2cdf6:	4422      	add	r2, r4
   2cdf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2cdfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2ce00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2ce04:	e7c4      	b.n	2cd90 <_printf_common+0x58>
   2ce06:	2301      	movs	r3, #1
   2ce08:	4622      	mov	r2, r4
   2ce0a:	4649      	mov	r1, r9
   2ce0c:	4638      	mov	r0, r7
   2ce0e:	47c0      	blx	r8
   2ce10:	3001      	adds	r0, #1
   2ce12:	d0e6      	beq.n	2cde2 <_printf_common+0xaa>
   2ce14:	3601      	adds	r6, #1
   2ce16:	e7d9      	b.n	2cdcc <_printf_common+0x94>

0002ce18 <__seofread>:
   2ce18:	2000      	movs	r0, #0
   2ce1a:	4770      	bx	lr

0002ce1c <strchr>:
   2ce1c:	b2c9      	uxtb	r1, r1
   2ce1e:	4603      	mov	r3, r0
   2ce20:	4618      	mov	r0, r3
   2ce22:	f813 2b01 	ldrb.w	r2, [r3], #1
   2ce26:	b112      	cbz	r2, 2ce2e <strchr+0x12>
   2ce28:	428a      	cmp	r2, r1
   2ce2a:	d1f9      	bne.n	2ce20 <strchr+0x4>
   2ce2c:	4770      	bx	lr
   2ce2e:	2900      	cmp	r1, #0
   2ce30:	bf18      	it	ne
   2ce32:	2000      	movne	r0, #0
   2ce34:	4770      	bx	lr

0002ce36 <strcpy>:
   2ce36:	4603      	mov	r3, r0
   2ce38:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ce3c:	f803 2b01 	strb.w	r2, [r3], #1
   2ce40:	2a00      	cmp	r2, #0
   2ce42:	d1f9      	bne.n	2ce38 <strcpy+0x2>
   2ce44:	4770      	bx	lr

0002ce46 <strncmp>:
   2ce46:	b510      	push	{r4, lr}
   2ce48:	b16a      	cbz	r2, 2ce66 <strncmp+0x20>
   2ce4a:	3901      	subs	r1, #1
   2ce4c:	1884      	adds	r4, r0, r2
   2ce4e:	f810 3b01 	ldrb.w	r3, [r0], #1
   2ce52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2ce56:	4293      	cmp	r3, r2
   2ce58:	d103      	bne.n	2ce62 <strncmp+0x1c>
   2ce5a:	42a0      	cmp	r0, r4
   2ce5c:	d001      	beq.n	2ce62 <strncmp+0x1c>
   2ce5e:	2b00      	cmp	r3, #0
   2ce60:	d1f5      	bne.n	2ce4e <strncmp+0x8>
   2ce62:	1a98      	subs	r0, r3, r2
   2ce64:	bd10      	pop	{r4, pc}
   2ce66:	4610      	mov	r0, r2
   2ce68:	e7fc      	b.n	2ce64 <strncmp+0x1e>

0002ce6a <strncpy>:
   2ce6a:	3901      	subs	r1, #1
   2ce6c:	4603      	mov	r3, r0
   2ce6e:	b510      	push	{r4, lr}
   2ce70:	b132      	cbz	r2, 2ce80 <strncpy+0x16>
   2ce72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ce76:	3a01      	subs	r2, #1
   2ce78:	f803 4b01 	strb.w	r4, [r3], #1
   2ce7c:	2c00      	cmp	r4, #0
   2ce7e:	d1f7      	bne.n	2ce70 <strncpy+0x6>
   2ce80:	441a      	add	r2, r3
   2ce82:	2100      	movs	r1, #0
   2ce84:	4293      	cmp	r3, r2
   2ce86:	d100      	bne.n	2ce8a <strncpy+0x20>
   2ce88:	bd10      	pop	{r4, pc}
   2ce8a:	f803 1b01 	strb.w	r1, [r3], #1
   2ce8e:	e7f9      	b.n	2ce84 <strncpy+0x1a>

0002ce90 <strnlen>:
   2ce90:	4602      	mov	r2, r0
   2ce92:	4401      	add	r1, r0
   2ce94:	b510      	push	{r4, lr}
   2ce96:	428a      	cmp	r2, r1
   2ce98:	4613      	mov	r3, r2
   2ce9a:	d101      	bne.n	2cea0 <strnlen+0x10>
   2ce9c:	1a18      	subs	r0, r3, r0
   2ce9e:	bd10      	pop	{r4, pc}
   2cea0:	781c      	ldrb	r4, [r3, #0]
   2cea2:	3201      	adds	r2, #1
   2cea4:	2c00      	cmp	r4, #0
   2cea6:	d1f6      	bne.n	2ce96 <strnlen+0x6>
   2cea8:	e7f8      	b.n	2ce9c <strnlen+0xc>

0002ceaa <strstr>:
   2ceaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ceac:	780c      	ldrb	r4, [r1, #0]
   2ceae:	b164      	cbz	r4, 2ceca <strstr+0x20>
   2ceb0:	4603      	mov	r3, r0
   2ceb2:	781a      	ldrb	r2, [r3, #0]
   2ceb4:	4618      	mov	r0, r3
   2ceb6:	1c5e      	adds	r6, r3, #1
   2ceb8:	b90a      	cbnz	r2, 2cebe <strstr+0x14>
   2ceba:	4610      	mov	r0, r2
   2cebc:	e005      	b.n	2ceca <strstr+0x20>
   2cebe:	4294      	cmp	r4, r2
   2cec0:	d108      	bne.n	2ced4 <strstr+0x2a>
   2cec2:	460d      	mov	r5, r1
   2cec4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   2cec8:	b902      	cbnz	r2, 2cecc <strstr+0x22>
   2ceca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cecc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2ced0:	4297      	cmp	r7, r2
   2ced2:	d0f7      	beq.n	2cec4 <strstr+0x1a>
   2ced4:	4633      	mov	r3, r6
   2ced6:	e7ec      	b.n	2ceb2 <strstr+0x8>

0002ced8 <_strtol_r>:
   2ced8:	f7fc bbe2 	b.w	296a0 <_strtol_l.isra.0>

0002cedc <_strtoul_r>:
   2cedc:	f7fc bd02 	b.w	298e4 <_strtoul_l.isra.0>

0002cee0 <_vsniprintf_r>:
   2cee0:	b530      	push	{r4, r5, lr}
   2cee2:	1e14      	subs	r4, r2, #0
   2cee4:	4605      	mov	r5, r0
   2cee6:	b09b      	sub	sp, #108	; 0x6c
   2cee8:	4618      	mov	r0, r3
   2ceea:	da05      	bge.n	2cef8 <_vsniprintf_r+0x18>
   2ceec:	238b      	movs	r3, #139	; 0x8b
   2ceee:	f04f 30ff 	mov.w	r0, #4294967295
   2cef2:	602b      	str	r3, [r5, #0]
   2cef4:	b01b      	add	sp, #108	; 0x6c
   2cef6:	bd30      	pop	{r4, r5, pc}
   2cef8:	f44f 7302 	mov.w	r3, #520	; 0x208
   2cefc:	4602      	mov	r2, r0
   2cefe:	9100      	str	r1, [sp, #0]
   2cf00:	4628      	mov	r0, r5
   2cf02:	f8ad 300c 	strh.w	r3, [sp, #12]
   2cf06:	bf14      	ite	ne
   2cf08:	f104 33ff 	addne.w	r3, r4, #4294967295
   2cf0c:	4623      	moveq	r3, r4
   2cf0e:	9104      	str	r1, [sp, #16]
   2cf10:	4669      	mov	r1, sp
   2cf12:	9302      	str	r3, [sp, #8]
   2cf14:	9305      	str	r3, [sp, #20]
   2cf16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2cf1a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2cf1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2cf20:	f7fd f876 	bl	2a010 <_svfiprintf_r>
   2cf24:	1c43      	adds	r3, r0, #1
   2cf26:	bfbc      	itt	lt
   2cf28:	238b      	movlt	r3, #139	; 0x8b
   2cf2a:	602b      	strlt	r3, [r5, #0]
   2cf2c:	2c00      	cmp	r4, #0
   2cf2e:	d0e1      	beq.n	2cef4 <_vsniprintf_r+0x14>
   2cf30:	9b00      	ldr	r3, [sp, #0]
   2cf32:	2200      	movs	r2, #0
   2cf34:	701a      	strb	r2, [r3, #0]
   2cf36:	e7dd      	b.n	2cef4 <_vsniprintf_r+0x14>

0002cf38 <quorem>:
   2cf38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf3c:	6903      	ldr	r3, [r0, #16]
   2cf3e:	4607      	mov	r7, r0
   2cf40:	690c      	ldr	r4, [r1, #16]
   2cf42:	42a3      	cmp	r3, r4
   2cf44:	f2c0 8085 	blt.w	2d052 <quorem+0x11a>
   2cf48:	3c01      	subs	r4, #1
   2cf4a:	f100 0514 	add.w	r5, r0, #20
   2cf4e:	f101 0814 	add.w	r8, r1, #20
   2cf52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2cf56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2cf5a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   2cf5e:	9301      	str	r3, [sp, #4]
   2cf60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2cf64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2cf68:	3301      	adds	r3, #1
   2cf6a:	429a      	cmp	r2, r3
   2cf6c:	fbb2 f6f3 	udiv	r6, r2, r3
   2cf70:	d333      	bcc.n	2cfda <quorem+0xa2>
   2cf72:	f04f 0e00 	mov.w	lr, #0
   2cf76:	4640      	mov	r0, r8
   2cf78:	46ac      	mov	ip, r5
   2cf7a:	46f2      	mov	sl, lr
   2cf7c:	f850 2b04 	ldr.w	r2, [r0], #4
   2cf80:	b293      	uxth	r3, r2
   2cf82:	4581      	cmp	r9, r0
   2cf84:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2cf88:	fb06 e303 	mla	r3, r6, r3, lr
   2cf8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   2cf90:	b29b      	uxth	r3, r3
   2cf92:	fb06 e202 	mla	r2, r6, r2, lr
   2cf96:	ebaa 0303 	sub.w	r3, sl, r3
   2cf9a:	f8dc a000 	ldr.w	sl, [ip]
   2cf9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2cfa2:	fa1f fa8a 	uxth.w	sl, sl
   2cfa6:	4453      	add	r3, sl
   2cfa8:	fa1f fa82 	uxth.w	sl, r2
   2cfac:	f8dc 2000 	ldr.w	r2, [ip]
   2cfb0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   2cfb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2cfb8:	b29b      	uxth	r3, r3
   2cfba:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2cfbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2cfc2:	f84c 3b04 	str.w	r3, [ip], #4
   2cfc6:	d2d9      	bcs.n	2cf7c <quorem+0x44>
   2cfc8:	f855 300b 	ldr.w	r3, [r5, fp]
   2cfcc:	b92b      	cbnz	r3, 2cfda <quorem+0xa2>
   2cfce:	9b01      	ldr	r3, [sp, #4]
   2cfd0:	3b04      	subs	r3, #4
   2cfd2:	429d      	cmp	r5, r3
   2cfd4:	461a      	mov	r2, r3
   2cfd6:	d330      	bcc.n	2d03a <quorem+0x102>
   2cfd8:	613c      	str	r4, [r7, #16]
   2cfda:	4638      	mov	r0, r7
   2cfdc:	f000 fa1d 	bl	2d41a <__mcmp>
   2cfe0:	2800      	cmp	r0, #0
   2cfe2:	db26      	blt.n	2d032 <quorem+0xfa>
   2cfe4:	3601      	adds	r6, #1
   2cfe6:	4628      	mov	r0, r5
   2cfe8:	f04f 0c00 	mov.w	ip, #0
   2cfec:	f858 1b04 	ldr.w	r1, [r8], #4
   2cff0:	f8d0 e000 	ldr.w	lr, [r0]
   2cff4:	b28b      	uxth	r3, r1
   2cff6:	45c1      	cmp	r9, r8
   2cff8:	fa1f f28e 	uxth.w	r2, lr
   2cffc:	ebac 0303 	sub.w	r3, ip, r3
   2d000:	4413      	add	r3, r2
   2d002:	ea4f 4211 	mov.w	r2, r1, lsr #16
   2d006:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2d00a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2d00e:	b29b      	uxth	r3, r3
   2d010:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2d014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d018:	f840 3b04 	str.w	r3, [r0], #4
   2d01c:	d2e6      	bcs.n	2cfec <quorem+0xb4>
   2d01e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2d022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2d026:	b922      	cbnz	r2, 2d032 <quorem+0xfa>
   2d028:	3b04      	subs	r3, #4
   2d02a:	429d      	cmp	r5, r3
   2d02c:	461a      	mov	r2, r3
   2d02e:	d30a      	bcc.n	2d046 <quorem+0x10e>
   2d030:	613c      	str	r4, [r7, #16]
   2d032:	4630      	mov	r0, r6
   2d034:	b003      	add	sp, #12
   2d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d03a:	6812      	ldr	r2, [r2, #0]
   2d03c:	3b04      	subs	r3, #4
   2d03e:	2a00      	cmp	r2, #0
   2d040:	d1ca      	bne.n	2cfd8 <quorem+0xa0>
   2d042:	3c01      	subs	r4, #1
   2d044:	e7c5      	b.n	2cfd2 <quorem+0x9a>
   2d046:	6812      	ldr	r2, [r2, #0]
   2d048:	3b04      	subs	r3, #4
   2d04a:	2a00      	cmp	r2, #0
   2d04c:	d1f0      	bne.n	2d030 <quorem+0xf8>
   2d04e:	3c01      	subs	r4, #1
   2d050:	e7eb      	b.n	2d02a <quorem+0xf2>
   2d052:	2000      	movs	r0, #0
   2d054:	e7ee      	b.n	2d034 <quorem+0xfc>

0002d056 <_getenv_r>:
   2d056:	b507      	push	{r0, r1, r2, lr}
   2d058:	aa01      	add	r2, sp, #4
   2d05a:	f7fc ff3d 	bl	29ed8 <_findenv_r>
   2d05e:	b003      	add	sp, #12
   2d060:	f85d fb04 	ldr.w	pc, [sp], #4

0002d064 <_Balloc>:
   2d064:	b570      	push	{r4, r5, r6, lr}
   2d066:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d068:	4604      	mov	r4, r0
   2d06a:	460d      	mov	r5, r1
   2d06c:	b93e      	cbnz	r6, 2d07e <_Balloc+0x1a>
   2d06e:	2010      	movs	r0, #16
   2d070:	f7fb fed4 	bl	28e1c <malloc>
   2d074:	6260      	str	r0, [r4, #36]	; 0x24
   2d076:	6006      	str	r6, [r0, #0]
   2d078:	60c6      	str	r6, [r0, #12]
   2d07a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d07e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2d080:	68f3      	ldr	r3, [r6, #12]
   2d082:	b183      	cbz	r3, 2d0a6 <_Balloc+0x42>
   2d084:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d086:	68db      	ldr	r3, [r3, #12]
   2d088:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2d08c:	b9b8      	cbnz	r0, 2d0be <_Balloc+0x5a>
   2d08e:	2101      	movs	r1, #1
   2d090:	4620      	mov	r0, r4
   2d092:	fa01 f605 	lsl.w	r6, r1, r5
   2d096:	1d72      	adds	r2, r6, #5
   2d098:	0092      	lsls	r2, r2, #2
   2d09a:	f000 faa5 	bl	2d5e8 <_calloc_r>
   2d09e:	b160      	cbz	r0, 2d0ba <_Balloc+0x56>
   2d0a0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2d0a4:	e00e      	b.n	2d0c4 <_Balloc+0x60>
   2d0a6:	2221      	movs	r2, #33	; 0x21
   2d0a8:	2104      	movs	r1, #4
   2d0aa:	4620      	mov	r0, r4
   2d0ac:	f000 fa9c 	bl	2d5e8 <_calloc_r>
   2d0b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d0b2:	60f0      	str	r0, [r6, #12]
   2d0b4:	68db      	ldr	r3, [r3, #12]
   2d0b6:	2b00      	cmp	r3, #0
   2d0b8:	d1e4      	bne.n	2d084 <_Balloc+0x20>
   2d0ba:	2000      	movs	r0, #0
   2d0bc:	bd70      	pop	{r4, r5, r6, pc}
   2d0be:	6802      	ldr	r2, [r0, #0]
   2d0c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2d0c4:	2300      	movs	r3, #0
   2d0c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2d0ca:	e7f7      	b.n	2d0bc <_Balloc+0x58>

0002d0cc <_Bfree>:
   2d0cc:	b570      	push	{r4, r5, r6, lr}
   2d0ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2d0d0:	4605      	mov	r5, r0
   2d0d2:	460c      	mov	r4, r1
   2d0d4:	b93e      	cbnz	r6, 2d0e6 <_Bfree+0x1a>
   2d0d6:	2010      	movs	r0, #16
   2d0d8:	f7fb fea0 	bl	28e1c <malloc>
   2d0dc:	6268      	str	r0, [r5, #36]	; 0x24
   2d0de:	6006      	str	r6, [r0, #0]
   2d0e0:	60c6      	str	r6, [r0, #12]
   2d0e2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2d0e6:	b13c      	cbz	r4, 2d0f8 <_Bfree+0x2c>
   2d0e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d0ea:	6862      	ldr	r2, [r4, #4]
   2d0ec:	68db      	ldr	r3, [r3, #12]
   2d0ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d0f2:	6021      	str	r1, [r4, #0]
   2d0f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2d0f8:	bd70      	pop	{r4, r5, r6, pc}

0002d0fa <__multadd>:
   2d0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d0fe:	4607      	mov	r7, r0
   2d100:	4698      	mov	r8, r3
   2d102:	460c      	mov	r4, r1
   2d104:	690e      	ldr	r6, [r1, #16]
   2d106:	f101 0014 	add.w	r0, r1, #20
   2d10a:	2300      	movs	r3, #0
   2d10c:	6805      	ldr	r5, [r0, #0]
   2d10e:	3301      	adds	r3, #1
   2d110:	b2a9      	uxth	r1, r5
   2d112:	429e      	cmp	r6, r3
   2d114:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2d118:	fb02 8101 	mla	r1, r2, r1, r8
   2d11c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   2d120:	b289      	uxth	r1, r1
   2d122:	fb02 c505 	mla	r5, r2, r5, ip
   2d126:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   2d12a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   2d12e:	f840 1b04 	str.w	r1, [r0], #4
   2d132:	dceb      	bgt.n	2d10c <__multadd+0x12>
   2d134:	f1b8 0f00 	cmp.w	r8, #0
   2d138:	d01b      	beq.n	2d172 <__multadd+0x78>
   2d13a:	68a3      	ldr	r3, [r4, #8]
   2d13c:	42b3      	cmp	r3, r6
   2d13e:	dc12      	bgt.n	2d166 <__multadd+0x6c>
   2d140:	6861      	ldr	r1, [r4, #4]
   2d142:	4638      	mov	r0, r7
   2d144:	3101      	adds	r1, #1
   2d146:	f7ff ff8d 	bl	2d064 <_Balloc>
   2d14a:	6922      	ldr	r2, [r4, #16]
   2d14c:	4605      	mov	r5, r0
   2d14e:	f104 010c 	add.w	r1, r4, #12
   2d152:	3202      	adds	r2, #2
   2d154:	300c      	adds	r0, #12
   2d156:	0092      	lsls	r2, r2, #2
   2d158:	f7ff fd3b 	bl	2cbd2 <memcpy>
   2d15c:	4621      	mov	r1, r4
   2d15e:	462c      	mov	r4, r5
   2d160:	4638      	mov	r0, r7
   2d162:	f7ff ffb3 	bl	2d0cc <_Bfree>
   2d166:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   2d16a:	3601      	adds	r6, #1
   2d16c:	f8c3 8014 	str.w	r8, [r3, #20]
   2d170:	6126      	str	r6, [r4, #16]
   2d172:	4620      	mov	r0, r4
   2d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d178 <__hi0bits>:
   2d178:	0c02      	lsrs	r2, r0, #16
   2d17a:	4603      	mov	r3, r0
   2d17c:	0412      	lsls	r2, r2, #16
   2d17e:	b9ca      	cbnz	r2, 2d1b4 <__hi0bits+0x3c>
   2d180:	0403      	lsls	r3, r0, #16
   2d182:	2010      	movs	r0, #16
   2d184:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2d188:	bf04      	itt	eq
   2d18a:	021b      	lsleq	r3, r3, #8
   2d18c:	3008      	addeq	r0, #8
   2d18e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2d192:	bf04      	itt	eq
   2d194:	011b      	lsleq	r3, r3, #4
   2d196:	3004      	addeq	r0, #4
   2d198:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2d19c:	bf04      	itt	eq
   2d19e:	009b      	lsleq	r3, r3, #2
   2d1a0:	3002      	addeq	r0, #2
   2d1a2:	2b00      	cmp	r3, #0
   2d1a4:	db05      	blt.n	2d1b2 <__hi0bits+0x3a>
   2d1a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2d1aa:	f100 0001 	add.w	r0, r0, #1
   2d1ae:	bf08      	it	eq
   2d1b0:	2020      	moveq	r0, #32
   2d1b2:	4770      	bx	lr
   2d1b4:	2000      	movs	r0, #0
   2d1b6:	e7e5      	b.n	2d184 <__hi0bits+0xc>

0002d1b8 <__lo0bits>:
   2d1b8:	6803      	ldr	r3, [r0, #0]
   2d1ba:	4602      	mov	r2, r0
   2d1bc:	f013 0007 	ands.w	r0, r3, #7
   2d1c0:	d00b      	beq.n	2d1da <__lo0bits+0x22>
   2d1c2:	07d9      	lsls	r1, r3, #31
   2d1c4:	d422      	bmi.n	2d20c <__lo0bits+0x54>
   2d1c6:	0798      	lsls	r0, r3, #30
   2d1c8:	bf47      	ittee	mi
   2d1ca:	085b      	lsrmi	r3, r3, #1
   2d1cc:	2001      	movmi	r0, #1
   2d1ce:	089b      	lsrpl	r3, r3, #2
   2d1d0:	2002      	movpl	r0, #2
   2d1d2:	bf4c      	ite	mi
   2d1d4:	6013      	strmi	r3, [r2, #0]
   2d1d6:	6013      	strpl	r3, [r2, #0]
   2d1d8:	4770      	bx	lr
   2d1da:	b299      	uxth	r1, r3
   2d1dc:	b909      	cbnz	r1, 2d1e2 <__lo0bits+0x2a>
   2d1de:	0c1b      	lsrs	r3, r3, #16
   2d1e0:	2010      	movs	r0, #16
   2d1e2:	f013 0fff 	tst.w	r3, #255	; 0xff
   2d1e6:	bf04      	itt	eq
   2d1e8:	0a1b      	lsreq	r3, r3, #8
   2d1ea:	3008      	addeq	r0, #8
   2d1ec:	0719      	lsls	r1, r3, #28
   2d1ee:	bf04      	itt	eq
   2d1f0:	091b      	lsreq	r3, r3, #4
   2d1f2:	3004      	addeq	r0, #4
   2d1f4:	0799      	lsls	r1, r3, #30
   2d1f6:	bf04      	itt	eq
   2d1f8:	089b      	lsreq	r3, r3, #2
   2d1fa:	3002      	addeq	r0, #2
   2d1fc:	07d9      	lsls	r1, r3, #31
   2d1fe:	d403      	bmi.n	2d208 <__lo0bits+0x50>
   2d200:	085b      	lsrs	r3, r3, #1
   2d202:	f100 0001 	add.w	r0, r0, #1
   2d206:	d003      	beq.n	2d210 <__lo0bits+0x58>
   2d208:	6013      	str	r3, [r2, #0]
   2d20a:	4770      	bx	lr
   2d20c:	2000      	movs	r0, #0
   2d20e:	4770      	bx	lr
   2d210:	2020      	movs	r0, #32
   2d212:	4770      	bx	lr

0002d214 <__i2b>:
   2d214:	b510      	push	{r4, lr}
   2d216:	460c      	mov	r4, r1
   2d218:	2101      	movs	r1, #1
   2d21a:	f7ff ff23 	bl	2d064 <_Balloc>
   2d21e:	2201      	movs	r2, #1
   2d220:	6144      	str	r4, [r0, #20]
   2d222:	6102      	str	r2, [r0, #16]
   2d224:	bd10      	pop	{r4, pc}

0002d226 <__multiply>:
   2d226:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d22a:	4615      	mov	r5, r2
   2d22c:	690a      	ldr	r2, [r1, #16]
   2d22e:	460c      	mov	r4, r1
   2d230:	b085      	sub	sp, #20
   2d232:	692b      	ldr	r3, [r5, #16]
   2d234:	429a      	cmp	r2, r3
   2d236:	bfbe      	ittt	lt
   2d238:	460b      	movlt	r3, r1
   2d23a:	462c      	movlt	r4, r5
   2d23c:	461d      	movlt	r5, r3
   2d23e:	6927      	ldr	r7, [r4, #16]
   2d240:	68a3      	ldr	r3, [r4, #8]
   2d242:	f8d5 9010 	ldr.w	r9, [r5, #16]
   2d246:	6861      	ldr	r1, [r4, #4]
   2d248:	eb07 0609 	add.w	r6, r7, r9
   2d24c:	42b3      	cmp	r3, r6
   2d24e:	bfb8      	it	lt
   2d250:	3101      	addlt	r1, #1
   2d252:	f7ff ff07 	bl	2d064 <_Balloc>
   2d256:	f100 0114 	add.w	r1, r0, #20
   2d25a:	2200      	movs	r2, #0
   2d25c:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   2d260:	460b      	mov	r3, r1
   2d262:	4543      	cmp	r3, r8
   2d264:	d31d      	bcc.n	2d2a2 <__multiply+0x7c>
   2d266:	f104 0314 	add.w	r3, r4, #20
   2d26a:	f105 0214 	add.w	r2, r5, #20
   2d26e:	f104 0515 	add.w	r5, r4, #21
   2d272:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2d276:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   2d27a:	9302      	str	r3, [sp, #8]
   2d27c:	1b3b      	subs	r3, r7, r4
   2d27e:	3b15      	subs	r3, #21
   2d280:	f023 0303 	bic.w	r3, r3, #3
   2d284:	3304      	adds	r3, #4
   2d286:	42af      	cmp	r7, r5
   2d288:	bf38      	it	cc
   2d28a:	2304      	movcc	r3, #4
   2d28c:	9301      	str	r3, [sp, #4]
   2d28e:	9b02      	ldr	r3, [sp, #8]
   2d290:	9203      	str	r2, [sp, #12]
   2d292:	4293      	cmp	r3, r2
   2d294:	d808      	bhi.n	2d2a8 <__multiply+0x82>
   2d296:	2e00      	cmp	r6, #0
   2d298:	dc5a      	bgt.n	2d350 <__multiply+0x12a>
   2d29a:	6106      	str	r6, [r0, #16]
   2d29c:	b005      	add	sp, #20
   2d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2a2:	f843 2b04 	str.w	r2, [r3], #4
   2d2a6:	e7dc      	b.n	2d262 <__multiply+0x3c>
   2d2a8:	f8b2 a000 	ldrh.w	sl, [r2]
   2d2ac:	f1ba 0f00 	cmp.w	sl, #0
   2d2b0:	d024      	beq.n	2d2fc <__multiply+0xd6>
   2d2b2:	f104 0e14 	add.w	lr, r4, #20
   2d2b6:	4689      	mov	r9, r1
   2d2b8:	f04f 0c00 	mov.w	ip, #0
   2d2bc:	f85e 5b04 	ldr.w	r5, [lr], #4
   2d2c0:	f8d9 b000 	ldr.w	fp, [r9]
   2d2c4:	b2ab      	uxth	r3, r5
   2d2c6:	4577      	cmp	r7, lr
   2d2c8:	fa1f fb8b 	uxth.w	fp, fp
   2d2cc:	fb0a b303 	mla	r3, sl, r3, fp
   2d2d0:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   2d2d4:	f8d9 5000 	ldr.w	r5, [r9]
   2d2d8:	4463      	add	r3, ip
   2d2da:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   2d2de:	fb0a c50b 	mla	r5, sl, fp, ip
   2d2e2:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   2d2e6:	b29b      	uxth	r3, r3
   2d2e8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   2d2ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   2d2f0:	f849 3b04 	str.w	r3, [r9], #4
   2d2f4:	d8e2      	bhi.n	2d2bc <__multiply+0x96>
   2d2f6:	9b01      	ldr	r3, [sp, #4]
   2d2f8:	f841 c003 	str.w	ip, [r1, r3]
   2d2fc:	9b03      	ldr	r3, [sp, #12]
   2d2fe:	3204      	adds	r2, #4
   2d300:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2d304:	f1b9 0f00 	cmp.w	r9, #0
   2d308:	d020      	beq.n	2d34c <__multiply+0x126>
   2d30a:	680b      	ldr	r3, [r1, #0]
   2d30c:	f104 0c14 	add.w	ip, r4, #20
   2d310:	468e      	mov	lr, r1
   2d312:	f04f 0a00 	mov.w	sl, #0
   2d316:	f8bc 5000 	ldrh.w	r5, [ip]
   2d31a:	b29b      	uxth	r3, r3
   2d31c:	f8be b002 	ldrh.w	fp, [lr, #2]
   2d320:	fb09 b505 	mla	r5, r9, r5, fp
   2d324:	44aa      	add	sl, r5
   2d326:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   2d32a:	f84e 3b04 	str.w	r3, [lr], #4
   2d32e:	f85c 3b04 	ldr.w	r3, [ip], #4
   2d332:	f8be 5000 	ldrh.w	r5, [lr]
   2d336:	0c1b      	lsrs	r3, r3, #16
   2d338:	4567      	cmp	r7, ip
   2d33a:	fb09 5303 	mla	r3, r9, r3, r5
   2d33e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   2d342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   2d346:	d8e6      	bhi.n	2d316 <__multiply+0xf0>
   2d348:	9d01      	ldr	r5, [sp, #4]
   2d34a:	514b      	str	r3, [r1, r5]
   2d34c:	3104      	adds	r1, #4
   2d34e:	e79e      	b.n	2d28e <__multiply+0x68>
   2d350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2d354:	2b00      	cmp	r3, #0
   2d356:	d1a0      	bne.n	2d29a <__multiply+0x74>
   2d358:	3e01      	subs	r6, #1
   2d35a:	e79c      	b.n	2d296 <__multiply+0x70>

0002d35c <__lshift>:
   2d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d360:	460c      	mov	r4, r1
   2d362:	4607      	mov	r7, r0
   2d364:	4691      	mov	r9, r2
   2d366:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2d36a:	6923      	ldr	r3, [r4, #16]
   2d36c:	6849      	ldr	r1, [r1, #4]
   2d36e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2d372:	68a3      	ldr	r3, [r4, #8]
   2d374:	f108 0601 	add.w	r6, r8, #1
   2d378:	42b3      	cmp	r3, r6
   2d37a:	db3f      	blt.n	2d3fc <__lshift+0xa0>
   2d37c:	4638      	mov	r0, r7
   2d37e:	f7ff fe71 	bl	2d064 <_Balloc>
   2d382:	2300      	movs	r3, #0
   2d384:	4605      	mov	r5, r0
   2d386:	f100 0114 	add.w	r1, r0, #20
   2d38a:	f100 0210 	add.w	r2, r0, #16
   2d38e:	4618      	mov	r0, r3
   2d390:	4553      	cmp	r3, sl
   2d392:	db36      	blt.n	2d402 <__lshift+0xa6>
   2d394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2d398:	f104 0314 	add.w	r3, r4, #20
   2d39c:	6920      	ldr	r0, [r4, #16]
   2d39e:	f019 091f 	ands.w	r9, r9, #31
   2d3a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2d3a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2d3aa:	d02e      	beq.n	2d40a <__lshift+0xae>
   2d3ac:	f1c9 0e20 	rsb	lr, r9, #32
   2d3b0:	468a      	mov	sl, r1
   2d3b2:	2200      	movs	r2, #0
   2d3b4:	6818      	ldr	r0, [r3, #0]
   2d3b6:	fa00 f009 	lsl.w	r0, r0, r9
   2d3ba:	4302      	orrs	r2, r0
   2d3bc:	f84a 2b04 	str.w	r2, [sl], #4
   2d3c0:	f853 2b04 	ldr.w	r2, [r3], #4
   2d3c4:	459c      	cmp	ip, r3
   2d3c6:	fa22 f20e 	lsr.w	r2, r2, lr
   2d3ca:	d8f3      	bhi.n	2d3b4 <__lshift+0x58>
   2d3cc:	ebac 0304 	sub.w	r3, ip, r4
   2d3d0:	f104 0015 	add.w	r0, r4, #21
   2d3d4:	3b15      	subs	r3, #21
   2d3d6:	f023 0303 	bic.w	r3, r3, #3
   2d3da:	3304      	adds	r3, #4
   2d3dc:	4560      	cmp	r0, ip
   2d3de:	bf88      	it	hi
   2d3e0:	2304      	movhi	r3, #4
   2d3e2:	50ca      	str	r2, [r1, r3]
   2d3e4:	b10a      	cbz	r2, 2d3ea <__lshift+0x8e>
   2d3e6:	f108 0602 	add.w	r6, r8, #2
   2d3ea:	3e01      	subs	r6, #1
   2d3ec:	4638      	mov	r0, r7
   2d3ee:	4621      	mov	r1, r4
   2d3f0:	612e      	str	r6, [r5, #16]
   2d3f2:	f7ff fe6b 	bl	2d0cc <_Bfree>
   2d3f6:	4628      	mov	r0, r5
   2d3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d3fc:	3101      	adds	r1, #1
   2d3fe:	005b      	lsls	r3, r3, #1
   2d400:	e7ba      	b.n	2d378 <__lshift+0x1c>
   2d402:	3301      	adds	r3, #1
   2d404:	f842 0f04 	str.w	r0, [r2, #4]!
   2d408:	e7c2      	b.n	2d390 <__lshift+0x34>
   2d40a:	3904      	subs	r1, #4
   2d40c:	f853 2b04 	ldr.w	r2, [r3], #4
   2d410:	459c      	cmp	ip, r3
   2d412:	f841 2f04 	str.w	r2, [r1, #4]!
   2d416:	d8f9      	bhi.n	2d40c <__lshift+0xb0>
   2d418:	e7e7      	b.n	2d3ea <__lshift+0x8e>

0002d41a <__mcmp>:
   2d41a:	4603      	mov	r3, r0
   2d41c:	690a      	ldr	r2, [r1, #16]
   2d41e:	6900      	ldr	r0, [r0, #16]
   2d420:	1a80      	subs	r0, r0, r2
   2d422:	b530      	push	{r4, r5, lr}
   2d424:	d10d      	bne.n	2d442 <__mcmp+0x28>
   2d426:	3314      	adds	r3, #20
   2d428:	3114      	adds	r1, #20
   2d42a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2d42e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2d432:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2d436:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2d43a:	4295      	cmp	r5, r2
   2d43c:	d002      	beq.n	2d444 <__mcmp+0x2a>
   2d43e:	d304      	bcc.n	2d44a <__mcmp+0x30>
   2d440:	2001      	movs	r0, #1
   2d442:	bd30      	pop	{r4, r5, pc}
   2d444:	42a3      	cmp	r3, r4
   2d446:	d3f4      	bcc.n	2d432 <__mcmp+0x18>
   2d448:	e7fb      	b.n	2d442 <__mcmp+0x28>
   2d44a:	f04f 30ff 	mov.w	r0, #4294967295
   2d44e:	e7f8      	b.n	2d442 <__mcmp+0x28>

0002d450 <__mdiff>:
   2d450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d454:	460c      	mov	r4, r1
   2d456:	4606      	mov	r6, r0
   2d458:	4611      	mov	r1, r2
   2d45a:	4692      	mov	sl, r2
   2d45c:	4620      	mov	r0, r4
   2d45e:	f7ff ffdc 	bl	2d41a <__mcmp>
   2d462:	1e05      	subs	r5, r0, #0
   2d464:	d108      	bne.n	2d478 <__mdiff+0x28>
   2d466:	4629      	mov	r1, r5
   2d468:	4630      	mov	r0, r6
   2d46a:	f7ff fdfb 	bl	2d064 <_Balloc>
   2d46e:	2301      	movs	r3, #1
   2d470:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2d474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d478:	bfa3      	ittte	ge
   2d47a:	4653      	movge	r3, sl
   2d47c:	46a2      	movge	sl, r4
   2d47e:	2500      	movge	r5, #0
   2d480:	2501      	movlt	r5, #1
   2d482:	bfa8      	it	ge
   2d484:	461c      	movge	r4, r3
   2d486:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d48a:	4630      	mov	r0, r6
   2d48c:	f7ff fdea 	bl	2d064 <_Balloc>
   2d490:	f104 0914 	add.w	r9, r4, #20
   2d494:	f8da 7010 	ldr.w	r7, [sl, #16]
   2d498:	f100 0814 	add.w	r8, r0, #20
   2d49c:	6926      	ldr	r6, [r4, #16]
   2d49e:	f10a 0210 	add.w	r2, sl, #16
   2d4a2:	60c5      	str	r5, [r0, #12]
   2d4a4:	f10a 0514 	add.w	r5, sl, #20
   2d4a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   2d4ac:	46c2      	mov	sl, r8
   2d4ae:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   2d4b2:	f04f 0c00 	mov.w	ip, #0
   2d4b6:	f852 bf04 	ldr.w	fp, [r2, #4]!
   2d4ba:	f859 3b04 	ldr.w	r3, [r9], #4
   2d4be:	fa1f f18b 	uxth.w	r1, fp
   2d4c2:	454e      	cmp	r6, r9
   2d4c4:	4461      	add	r1, ip
   2d4c6:	fa1f fc83 	uxth.w	ip, r3
   2d4ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2d4ce:	eba1 010c 	sub.w	r1, r1, ip
   2d4d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   2d4d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2d4da:	b289      	uxth	r1, r1
   2d4dc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   2d4e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2d4e4:	f84a 3b04 	str.w	r3, [sl], #4
   2d4e8:	d8e5      	bhi.n	2d4b6 <__mdiff+0x66>
   2d4ea:	1b33      	subs	r3, r6, r4
   2d4ec:	3415      	adds	r4, #21
   2d4ee:	3b15      	subs	r3, #21
   2d4f0:	f023 0303 	bic.w	r3, r3, #3
   2d4f4:	3304      	adds	r3, #4
   2d4f6:	42a6      	cmp	r6, r4
   2d4f8:	bf38      	it	cc
   2d4fa:	2304      	movcc	r3, #4
   2d4fc:	441d      	add	r5, r3
   2d4fe:	4443      	add	r3, r8
   2d500:	462c      	mov	r4, r5
   2d502:	461e      	mov	r6, r3
   2d504:	4574      	cmp	r4, lr
   2d506:	d30e      	bcc.n	2d526 <__mdiff+0xd6>
   2d508:	f10e 0203 	add.w	r2, lr, #3
   2d50c:	1b52      	subs	r2, r2, r5
   2d50e:	3d03      	subs	r5, #3
   2d510:	f022 0203 	bic.w	r2, r2, #3
   2d514:	45ae      	cmp	lr, r5
   2d516:	bf38      	it	cc
   2d518:	2200      	movcc	r2, #0
   2d51a:	441a      	add	r2, r3
   2d51c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2d520:	b18b      	cbz	r3, 2d546 <__mdiff+0xf6>
   2d522:	6107      	str	r7, [r0, #16]
   2d524:	e7a6      	b.n	2d474 <__mdiff+0x24>
   2d526:	f854 8b04 	ldr.w	r8, [r4], #4
   2d52a:	fa1f f288 	uxth.w	r2, r8
   2d52e:	4462      	add	r2, ip
   2d530:	1411      	asrs	r1, r2, #16
   2d532:	b292      	uxth	r2, r2
   2d534:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   2d538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2d53c:	ea4f 4c21 	mov.w	ip, r1, asr #16
   2d540:	f846 2b04 	str.w	r2, [r6], #4
   2d544:	e7de      	b.n	2d504 <__mdiff+0xb4>
   2d546:	3f01      	subs	r7, #1
   2d548:	e7e8      	b.n	2d51c <__mdiff+0xcc>

0002d54a <__d2b>:
   2d54a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d54e:	461c      	mov	r4, r3
   2d550:	2101      	movs	r1, #1
   2d552:	4690      	mov	r8, r2
   2d554:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   2d558:	f7ff fd84 	bl	2d064 <_Balloc>
   2d55c:	f3c4 0313 	ubfx	r3, r4, #0, #20
   2d560:	f3c4 540a 	ubfx	r4, r4, #20, #11
   2d564:	4607      	mov	r7, r0
   2d566:	bb2c      	cbnz	r4, 2d5b4 <__d2b+0x6a>
   2d568:	9301      	str	r3, [sp, #4]
   2d56a:	f1b8 0300 	subs.w	r3, r8, #0
   2d56e:	d026      	beq.n	2d5be <__d2b+0x74>
   2d570:	4668      	mov	r0, sp
   2d572:	9300      	str	r3, [sp, #0]
   2d574:	f7ff fe20 	bl	2d1b8 <__lo0bits>
   2d578:	9900      	ldr	r1, [sp, #0]
   2d57a:	b1f0      	cbz	r0, 2d5ba <__d2b+0x70>
   2d57c:	9a01      	ldr	r2, [sp, #4]
   2d57e:	f1c0 0320 	rsb	r3, r0, #32
   2d582:	fa02 f303 	lsl.w	r3, r2, r3
   2d586:	40c2      	lsrs	r2, r0
   2d588:	430b      	orrs	r3, r1
   2d58a:	9201      	str	r2, [sp, #4]
   2d58c:	617b      	str	r3, [r7, #20]
   2d58e:	9b01      	ldr	r3, [sp, #4]
   2d590:	2b00      	cmp	r3, #0
   2d592:	61bb      	str	r3, [r7, #24]
   2d594:	bf14      	ite	ne
   2d596:	2102      	movne	r1, #2
   2d598:	2101      	moveq	r1, #1
   2d59a:	6139      	str	r1, [r7, #16]
   2d59c:	b1c4      	cbz	r4, 2d5d0 <__d2b+0x86>
   2d59e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   2d5a2:	4404      	add	r4, r0
   2d5a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2d5a8:	6034      	str	r4, [r6, #0]
   2d5aa:	6028      	str	r0, [r5, #0]
   2d5ac:	4638      	mov	r0, r7
   2d5ae:	b002      	add	sp, #8
   2d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d5b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2d5b8:	e7d6      	b.n	2d568 <__d2b+0x1e>
   2d5ba:	6179      	str	r1, [r7, #20]
   2d5bc:	e7e7      	b.n	2d58e <__d2b+0x44>
   2d5be:	a801      	add	r0, sp, #4
   2d5c0:	f7ff fdfa 	bl	2d1b8 <__lo0bits>
   2d5c4:	9b01      	ldr	r3, [sp, #4]
   2d5c6:	2101      	movs	r1, #1
   2d5c8:	3020      	adds	r0, #32
   2d5ca:	617b      	str	r3, [r7, #20]
   2d5cc:	6139      	str	r1, [r7, #16]
   2d5ce:	e7e5      	b.n	2d59c <__d2b+0x52>
   2d5d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   2d5d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2d5d8:	6030      	str	r0, [r6, #0]
   2d5da:	6918      	ldr	r0, [r3, #16]
   2d5dc:	f7ff fdcc 	bl	2d178 <__hi0bits>
   2d5e0:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   2d5e4:	6029      	str	r1, [r5, #0]
   2d5e6:	e7e1      	b.n	2d5ac <__d2b+0x62>

0002d5e8 <_calloc_r>:
   2d5e8:	b538      	push	{r3, r4, r5, lr}
   2d5ea:	fb02 f501 	mul.w	r5, r2, r1
   2d5ee:	4629      	mov	r1, r5
   2d5f0:	f7fb fc72 	bl	28ed8 <_malloc_r>
   2d5f4:	4604      	mov	r4, r0
   2d5f6:	b118      	cbz	r0, 2d600 <_calloc_r+0x18>
   2d5f8:	462a      	mov	r2, r5
   2d5fa:	2100      	movs	r1, #0
   2d5fc:	f7ff faf6 	bl	2cbec <memset>
   2d600:	4620      	mov	r0, r4
   2d602:	bd38      	pop	{r3, r4, r5, pc}

0002d604 <__ssputs_r>:
   2d604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d608:	688e      	ldr	r6, [r1, #8]
   2d60a:	4682      	mov	sl, r0
   2d60c:	460c      	mov	r4, r1
   2d60e:	4690      	mov	r8, r2
   2d610:	429e      	cmp	r6, r3
   2d612:	461f      	mov	r7, r3
   2d614:	d838      	bhi.n	2d688 <__ssputs_r+0x84>
   2d616:	898a      	ldrh	r2, [r1, #12]
   2d618:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2d61c:	d032      	beq.n	2d684 <__ssputs_r+0x80>
   2d61e:	6825      	ldr	r5, [r4, #0]
   2d620:	3301      	adds	r3, #1
   2d622:	6909      	ldr	r1, [r1, #16]
   2d624:	eba5 0901 	sub.w	r9, r5, r1
   2d628:	6965      	ldr	r5, [r4, #20]
   2d62a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2d62e:	444b      	add	r3, r9
   2d630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2d634:	106d      	asrs	r5, r5, #1
   2d636:	429d      	cmp	r5, r3
   2d638:	bf38      	it	cc
   2d63a:	461d      	movcc	r5, r3
   2d63c:	0553      	lsls	r3, r2, #21
   2d63e:	d531      	bpl.n	2d6a4 <__ssputs_r+0xa0>
   2d640:	4629      	mov	r1, r5
   2d642:	f7fb fc49 	bl	28ed8 <_malloc_r>
   2d646:	4606      	mov	r6, r0
   2d648:	b950      	cbnz	r0, 2d660 <__ssputs_r+0x5c>
   2d64a:	230c      	movs	r3, #12
   2d64c:	f04f 30ff 	mov.w	r0, #4294967295
   2d650:	f8ca 3000 	str.w	r3, [sl]
   2d654:	89a3      	ldrh	r3, [r4, #12]
   2d656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2d65a:	81a3      	strh	r3, [r4, #12]
   2d65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d660:	464a      	mov	r2, r9
   2d662:	6921      	ldr	r1, [r4, #16]
   2d664:	f7ff fab5 	bl	2cbd2 <memcpy>
   2d668:	89a3      	ldrh	r3, [r4, #12]
   2d66a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2d66e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2d672:	81a3      	strh	r3, [r4, #12]
   2d674:	6126      	str	r6, [r4, #16]
   2d676:	444e      	add	r6, r9
   2d678:	6165      	str	r5, [r4, #20]
   2d67a:	eba5 0509 	sub.w	r5, r5, r9
   2d67e:	6026      	str	r6, [r4, #0]
   2d680:	463e      	mov	r6, r7
   2d682:	60a5      	str	r5, [r4, #8]
   2d684:	42be      	cmp	r6, r7
   2d686:	d900      	bls.n	2d68a <__ssputs_r+0x86>
   2d688:	463e      	mov	r6, r7
   2d68a:	4632      	mov	r2, r6
   2d68c:	4641      	mov	r1, r8
   2d68e:	6820      	ldr	r0, [r4, #0]
   2d690:	f000 f8ef 	bl	2d872 <memmove>
   2d694:	68a3      	ldr	r3, [r4, #8]
   2d696:	6822      	ldr	r2, [r4, #0]
   2d698:	2000      	movs	r0, #0
   2d69a:	1b9b      	subs	r3, r3, r6
   2d69c:	4432      	add	r2, r6
   2d69e:	60a3      	str	r3, [r4, #8]
   2d6a0:	6022      	str	r2, [r4, #0]
   2d6a2:	e7db      	b.n	2d65c <__ssputs_r+0x58>
   2d6a4:	462a      	mov	r2, r5
   2d6a6:	f000 f8fe 	bl	2d8a6 <_realloc_r>
   2d6aa:	4606      	mov	r6, r0
   2d6ac:	2800      	cmp	r0, #0
   2d6ae:	d1e1      	bne.n	2d674 <__ssputs_r+0x70>
   2d6b0:	6921      	ldr	r1, [r4, #16]
   2d6b2:	4650      	mov	r0, sl
   2d6b4:	f7fb fbc2 	bl	28e3c <_free_r>
   2d6b8:	e7c7      	b.n	2d64a <__ssputs_r+0x46>

0002d6ba <_sungetc_r>:
   2d6ba:	b538      	push	{r3, r4, r5, lr}
   2d6bc:	1c4b      	adds	r3, r1, #1
   2d6be:	4614      	mov	r4, r2
   2d6c0:	d103      	bne.n	2d6ca <_sungetc_r+0x10>
   2d6c2:	f04f 35ff 	mov.w	r5, #4294967295
   2d6c6:	4628      	mov	r0, r5
   2d6c8:	bd38      	pop	{r3, r4, r5, pc}
   2d6ca:	8993      	ldrh	r3, [r2, #12]
   2d6cc:	b2cd      	uxtb	r5, r1
   2d6ce:	f023 0320 	bic.w	r3, r3, #32
   2d6d2:	8193      	strh	r3, [r2, #12]
   2d6d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d6d6:	6852      	ldr	r2, [r2, #4]
   2d6d8:	b18b      	cbz	r3, 2d6fe <_sungetc_r+0x44>
   2d6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d6dc:	4293      	cmp	r3, r2
   2d6de:	dd08      	ble.n	2d6f2 <_sungetc_r+0x38>
   2d6e0:	6823      	ldr	r3, [r4, #0]
   2d6e2:	1e5a      	subs	r2, r3, #1
   2d6e4:	6022      	str	r2, [r4, #0]
   2d6e6:	f803 5c01 	strb.w	r5, [r3, #-1]
   2d6ea:	6863      	ldr	r3, [r4, #4]
   2d6ec:	3301      	adds	r3, #1
   2d6ee:	6063      	str	r3, [r4, #4]
   2d6f0:	e7e9      	b.n	2d6c6 <_sungetc_r+0xc>
   2d6f2:	4621      	mov	r1, r4
   2d6f4:	f000 f874 	bl	2d7e0 <__submore>
   2d6f8:	2800      	cmp	r0, #0
   2d6fa:	d0f1      	beq.n	2d6e0 <_sungetc_r+0x26>
   2d6fc:	e7e1      	b.n	2d6c2 <_sungetc_r+0x8>
   2d6fe:	6921      	ldr	r1, [r4, #16]
   2d700:	6823      	ldr	r3, [r4, #0]
   2d702:	b151      	cbz	r1, 2d71a <_sungetc_r+0x60>
   2d704:	4299      	cmp	r1, r3
   2d706:	d208      	bcs.n	2d71a <_sungetc_r+0x60>
   2d708:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2d70c:	42a9      	cmp	r1, r5
   2d70e:	d104      	bne.n	2d71a <_sungetc_r+0x60>
   2d710:	3b01      	subs	r3, #1
   2d712:	3201      	adds	r2, #1
   2d714:	6023      	str	r3, [r4, #0]
   2d716:	6062      	str	r2, [r4, #4]
   2d718:	e7d5      	b.n	2d6c6 <_sungetc_r+0xc>
   2d71a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2d71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2d722:	6363      	str	r3, [r4, #52]	; 0x34
   2d724:	2303      	movs	r3, #3
   2d726:	63a3      	str	r3, [r4, #56]	; 0x38
   2d728:	4623      	mov	r3, r4
   2d72a:	f803 5f46 	strb.w	r5, [r3, #70]!
   2d72e:	6023      	str	r3, [r4, #0]
   2d730:	2301      	movs	r3, #1
   2d732:	e7dc      	b.n	2d6ee <_sungetc_r+0x34>

0002d734 <__ssrefill_r>:
   2d734:	b510      	push	{r4, lr}
   2d736:	460c      	mov	r4, r1
   2d738:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2d73a:	b169      	cbz	r1, 2d758 <__ssrefill_r+0x24>
   2d73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2d740:	4299      	cmp	r1, r3
   2d742:	d001      	beq.n	2d748 <__ssrefill_r+0x14>
   2d744:	f7fb fb7a 	bl	28e3c <_free_r>
   2d748:	2000      	movs	r0, #0
   2d74a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2d74c:	6360      	str	r0, [r4, #52]	; 0x34
   2d74e:	6063      	str	r3, [r4, #4]
   2d750:	b113      	cbz	r3, 2d758 <__ssrefill_r+0x24>
   2d752:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2d754:	6023      	str	r3, [r4, #0]
   2d756:	bd10      	pop	{r4, pc}
   2d758:	6923      	ldr	r3, [r4, #16]
   2d75a:	f04f 30ff 	mov.w	r0, #4294967295
   2d75e:	6023      	str	r3, [r4, #0]
   2d760:	2300      	movs	r3, #0
   2d762:	6063      	str	r3, [r4, #4]
   2d764:	89a3      	ldrh	r3, [r4, #12]
   2d766:	f043 0320 	orr.w	r3, r3, #32
   2d76a:	81a3      	strh	r3, [r4, #12]
   2d76c:	e7f3      	b.n	2d756 <__ssrefill_r+0x22>

0002d76e <__sccl>:
   2d76e:	b570      	push	{r4, r5, r6, lr}
   2d770:	780b      	ldrb	r3, [r1, #0]
   2d772:	4604      	mov	r4, r0
   2d774:	2b5e      	cmp	r3, #94	; 0x5e
   2d776:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2d77a:	bf13      	iteet	ne
   2d77c:	1c48      	addne	r0, r1, #1
   2d77e:	1c88      	addeq	r0, r1, #2
   2d780:	784b      	ldrbeq	r3, [r1, #1]
   2d782:	2200      	movne	r2, #0
   2d784:	bf08      	it	eq
   2d786:	2201      	moveq	r2, #1
   2d788:	1e61      	subs	r1, r4, #1
   2d78a:	f801 2f01 	strb.w	r2, [r1, #1]!
   2d78e:	42a9      	cmp	r1, r5
   2d790:	d1fb      	bne.n	2d78a <__sccl+0x1c>
   2d792:	b90b      	cbnz	r3, 2d798 <__sccl+0x2a>
   2d794:	3801      	subs	r0, #1
   2d796:	bd70      	pop	{r4, r5, r6, pc}
   2d798:	f082 0101 	eor.w	r1, r2, #1
   2d79c:	1c42      	adds	r2, r0, #1
   2d79e:	54e1      	strb	r1, [r4, r3]
   2d7a0:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   2d7a4:	1e56      	subs	r6, r2, #1
   2d7a6:	4610      	mov	r0, r2
   2d7a8:	2d2d      	cmp	r5, #45	; 0x2d
   2d7aa:	d006      	beq.n	2d7ba <__sccl+0x4c>
   2d7ac:	2d5d      	cmp	r5, #93	; 0x5d
   2d7ae:	d0f2      	beq.n	2d796 <__sccl+0x28>
   2d7b0:	b90d      	cbnz	r5, 2d7b6 <__sccl+0x48>
   2d7b2:	4630      	mov	r0, r6
   2d7b4:	e7ef      	b.n	2d796 <__sccl+0x28>
   2d7b6:	462b      	mov	r3, r5
   2d7b8:	e7f0      	b.n	2d79c <__sccl+0x2e>
   2d7ba:	7816      	ldrb	r6, [r2, #0]
   2d7bc:	2e5d      	cmp	r6, #93	; 0x5d
   2d7be:	d0fa      	beq.n	2d7b6 <__sccl+0x48>
   2d7c0:	42b3      	cmp	r3, r6
   2d7c2:	dcf8      	bgt.n	2d7b6 <__sccl+0x48>
   2d7c4:	4618      	mov	r0, r3
   2d7c6:	3001      	adds	r0, #1
   2d7c8:	4286      	cmp	r6, r0
   2d7ca:	5421      	strb	r1, [r4, r0]
   2d7cc:	dcfb      	bgt.n	2d7c6 <__sccl+0x58>
   2d7ce:	43d8      	mvns	r0, r3
   2d7d0:	1c5d      	adds	r5, r3, #1
   2d7d2:	3202      	adds	r2, #2
   2d7d4:	4430      	add	r0, r6
   2d7d6:	42b3      	cmp	r3, r6
   2d7d8:	bfa8      	it	ge
   2d7da:	2000      	movge	r0, #0
   2d7dc:	182b      	adds	r3, r5, r0
   2d7de:	e7df      	b.n	2d7a0 <__sccl+0x32>

0002d7e0 <__submore>:
   2d7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d7e4:	460c      	mov	r4, r1
   2d7e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2d7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2d7ec:	4299      	cmp	r1, r3
   2d7ee:	d11a      	bne.n	2d826 <__submore+0x46>
   2d7f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2d7f4:	f7fb fb70 	bl	28ed8 <_malloc_r>
   2d7f8:	b918      	cbnz	r0, 2d802 <__submore+0x22>
   2d7fa:	f04f 30ff 	mov.w	r0, #4294967295
   2d7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d802:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2d806:	6360      	str	r0, [r4, #52]	; 0x34
   2d808:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2d80c:	63a3      	str	r3, [r4, #56]	; 0x38
   2d80e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2d812:	7083      	strb	r3, [r0, #2]
   2d814:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2d818:	7043      	strb	r3, [r0, #1]
   2d81a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2d81e:	7003      	strb	r3, [r0, #0]
   2d820:	6020      	str	r0, [r4, #0]
   2d822:	2000      	movs	r0, #0
   2d824:	e7eb      	b.n	2d7fe <__submore+0x1e>
   2d826:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2d828:	0077      	lsls	r7, r6, #1
   2d82a:	463a      	mov	r2, r7
   2d82c:	f000 f83b 	bl	2d8a6 <_realloc_r>
   2d830:	4605      	mov	r5, r0
   2d832:	2800      	cmp	r0, #0
   2d834:	d0e1      	beq.n	2d7fa <__submore+0x1a>
   2d836:	eb00 0806 	add.w	r8, r0, r6
   2d83a:	4601      	mov	r1, r0
   2d83c:	4632      	mov	r2, r6
   2d83e:	4640      	mov	r0, r8
   2d840:	f7ff f9c7 	bl	2cbd2 <memcpy>
   2d844:	f8c4 8000 	str.w	r8, [r4]
   2d848:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2d84c:	e7e9      	b.n	2d822 <__submore+0x42>

0002d84e <__ascii_mbtowc>:
   2d84e:	b082      	sub	sp, #8
   2d850:	b901      	cbnz	r1, 2d854 <__ascii_mbtowc+0x6>
   2d852:	a901      	add	r1, sp, #4
   2d854:	b142      	cbz	r2, 2d868 <__ascii_mbtowc+0x1a>
   2d856:	b14b      	cbz	r3, 2d86c <__ascii_mbtowc+0x1e>
   2d858:	7813      	ldrb	r3, [r2, #0]
   2d85a:	600b      	str	r3, [r1, #0]
   2d85c:	7812      	ldrb	r2, [r2, #0]
   2d85e:	1e10      	subs	r0, r2, #0
   2d860:	bf18      	it	ne
   2d862:	2001      	movne	r0, #1
   2d864:	b002      	add	sp, #8
   2d866:	4770      	bx	lr
   2d868:	4610      	mov	r0, r2
   2d86a:	e7fb      	b.n	2d864 <__ascii_mbtowc+0x16>
   2d86c:	f06f 0001 	mvn.w	r0, #1
   2d870:	e7f8      	b.n	2d864 <__ascii_mbtowc+0x16>

0002d872 <memmove>:
   2d872:	4288      	cmp	r0, r1
   2d874:	b510      	push	{r4, lr}
   2d876:	eb01 0402 	add.w	r4, r1, r2
   2d87a:	d902      	bls.n	2d882 <memmove+0x10>
   2d87c:	4284      	cmp	r4, r0
   2d87e:	4623      	mov	r3, r4
   2d880:	d807      	bhi.n	2d892 <memmove+0x20>
   2d882:	1e43      	subs	r3, r0, #1
   2d884:	42a1      	cmp	r1, r4
   2d886:	d008      	beq.n	2d89a <memmove+0x28>
   2d888:	f811 2b01 	ldrb.w	r2, [r1], #1
   2d88c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2d890:	e7f8      	b.n	2d884 <memmove+0x12>
   2d892:	4402      	add	r2, r0
   2d894:	4601      	mov	r1, r0
   2d896:	428a      	cmp	r2, r1
   2d898:	d100      	bne.n	2d89c <memmove+0x2a>
   2d89a:	bd10      	pop	{r4, pc}
   2d89c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2d8a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2d8a4:	e7f7      	b.n	2d896 <memmove+0x24>

0002d8a6 <_realloc_r>:
   2d8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d8a8:	4607      	mov	r7, r0
   2d8aa:	4614      	mov	r4, r2
   2d8ac:	460e      	mov	r6, r1
   2d8ae:	b921      	cbnz	r1, 2d8ba <_realloc_r+0x14>
   2d8b0:	4611      	mov	r1, r2
   2d8b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d8b6:	f7fb bb0f 	b.w	28ed8 <_malloc_r>
   2d8ba:	b922      	cbnz	r2, 2d8c6 <_realloc_r+0x20>
   2d8bc:	4625      	mov	r5, r4
   2d8be:	f7fb fabd 	bl	28e3c <_free_r>
   2d8c2:	4628      	mov	r0, r5
   2d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d8c6:	f000 f821 	bl	2d90c <_malloc_usable_size_r>
   2d8ca:	42a0      	cmp	r0, r4
   2d8cc:	d20f      	bcs.n	2d8ee <_realloc_r+0x48>
   2d8ce:	4621      	mov	r1, r4
   2d8d0:	4638      	mov	r0, r7
   2d8d2:	f7fb fb01 	bl	28ed8 <_malloc_r>
   2d8d6:	4605      	mov	r5, r0
   2d8d8:	2800      	cmp	r0, #0
   2d8da:	d0f2      	beq.n	2d8c2 <_realloc_r+0x1c>
   2d8dc:	4631      	mov	r1, r6
   2d8de:	4622      	mov	r2, r4
   2d8e0:	f7ff f977 	bl	2cbd2 <memcpy>
   2d8e4:	4631      	mov	r1, r6
   2d8e6:	4638      	mov	r0, r7
   2d8e8:	f7fb faa8 	bl	28e3c <_free_r>
   2d8ec:	e7e9      	b.n	2d8c2 <_realloc_r+0x1c>
   2d8ee:	4635      	mov	r5, r6
   2d8f0:	e7e7      	b.n	2d8c2 <_realloc_r+0x1c>

0002d8f2 <__ascii_wctomb>:
   2d8f2:	4603      	mov	r3, r0
   2d8f4:	4608      	mov	r0, r1
   2d8f6:	b141      	cbz	r1, 2d90a <__ascii_wctomb+0x18>
   2d8f8:	2aff      	cmp	r2, #255	; 0xff
   2d8fa:	d904      	bls.n	2d906 <__ascii_wctomb+0x14>
   2d8fc:	228a      	movs	r2, #138	; 0x8a
   2d8fe:	f04f 30ff 	mov.w	r0, #4294967295
   2d902:	601a      	str	r2, [r3, #0]
   2d904:	4770      	bx	lr
   2d906:	2001      	movs	r0, #1
   2d908:	700a      	strb	r2, [r1, #0]
   2d90a:	4770      	bx	lr

0002d90c <_malloc_usable_size_r>:
   2d90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d910:	1f18      	subs	r0, r3, #4
   2d912:	2b00      	cmp	r3, #0
   2d914:	bfbc      	itt	lt
   2d916:	580b      	ldrlt	r3, [r1, r0]
   2d918:	18c0      	addlt	r0, r0, r3
   2d91a:	4770      	bx	lr

0002d91c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2d91c:	f7f3 bd1e 	b.w	2135c <SystemInit>
