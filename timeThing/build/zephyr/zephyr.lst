
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00018200 <_vector_table>:
   18200:	48 05 01 20 8d c8 01 00 79 bd 02 00 61 c8 01 00     H.. ....y...a...
   18210:	61 c8 01 00 61 c8 01 00 61 c8 01 00 61 c8 01 00     a...a...a...a...
	...
   1822c:	4d c3 01 00 61 c8 01 00 00 00 00 00 f5 c2 01 00     M...a...........
   1823c:	61 c8 01 00                                         a...

00018240 <_irq_vector_table>:
   18240:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18250:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18260:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18270:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18280:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18290:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182a0:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182b0:	cd e7 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182c0:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182d0:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182e0:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   182f0:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18300:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18310:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18320:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18330:	cd c3 01 00 cd c3 01 00 cd c3 01 00 cd c3 01 00     ................
   18340:	cd c3 01 00                                         ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   18410:	e4 a1 01 00 01 00 00 00 00 82 01 00 00 82 01 00     ................
   18420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00018440 <__aeabi_fmul>:
   18440:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18448:	bf1e      	ittt	ne
   1844a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1844e:	ea92 0f0c 	teqne	r2, ip
   18452:	ea93 0f0c 	teqne	r3, ip
   18456:	d06f      	beq.n	18538 <__aeabi_fmul+0xf8>
   18458:	441a      	add	r2, r3
   1845a:	ea80 0c01 	eor.w	ip, r0, r1
   1845e:	0240      	lsls	r0, r0, #9
   18460:	bf18      	it	ne
   18462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18466:	d01e      	beq.n	184a6 <__aeabi_fmul+0x66>
   18468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1846c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18474:	fba0 3101 	umull	r3, r1, r0, r1
   18478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1847c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18480:	bf3e      	ittt	cc
   18482:	0049      	lslcc	r1, r1, #1
   18484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18488:	005b      	lslcc	r3, r3, #1
   1848a:	ea40 0001 	orr.w	r0, r0, r1
   1848e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18492:	2afd      	cmp	r2, #253	; 0xfd
   18494:	d81d      	bhi.n	184d2 <__aeabi_fmul+0x92>
   18496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1849a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1849e:	bf08      	it	eq
   184a0:	f020 0001 	biceq.w	r0, r0, #1
   184a4:	4770      	bx	lr
   184a6:	f090 0f00 	teq	r0, #0
   184aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184ae:	bf08      	it	eq
   184b0:	0249      	lsleq	r1, r1, #9
   184b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   184ba:	3a7f      	subs	r2, #127	; 0x7f
   184bc:	bfc2      	ittt	gt
   184be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184c6:	4770      	bxgt	lr
   184c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184cc:	f04f 0300 	mov.w	r3, #0
   184d0:	3a01      	subs	r2, #1
   184d2:	dc5d      	bgt.n	18590 <__aeabi_fmul+0x150>
   184d4:	f112 0f19 	cmn.w	r2, #25
   184d8:	bfdc      	itt	le
   184da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   184de:	4770      	bxle	lr
   184e0:	f1c2 0200 	rsb	r2, r2, #0
   184e4:	0041      	lsls	r1, r0, #1
   184e6:	fa21 f102 	lsr.w	r1, r1, r2
   184ea:	f1c2 0220 	rsb	r2, r2, #32
   184ee:	fa00 fc02 	lsl.w	ip, r0, r2
   184f2:	ea5f 0031 	movs.w	r0, r1, rrx
   184f6:	f140 0000 	adc.w	r0, r0, #0
   184fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   184fe:	bf08      	it	eq
   18500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18504:	4770      	bx	lr
   18506:	f092 0f00 	teq	r2, #0
   1850a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1850e:	bf02      	ittt	eq
   18510:	0040      	lsleq	r0, r0, #1
   18512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18516:	3a01      	subeq	r2, #1
   18518:	d0f9      	beq.n	1850e <__aeabi_fmul+0xce>
   1851a:	ea40 000c 	orr.w	r0, r0, ip
   1851e:	f093 0f00 	teq	r3, #0
   18522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18526:	bf02      	ittt	eq
   18528:	0049      	lsleq	r1, r1, #1
   1852a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1852e:	3b01      	subeq	r3, #1
   18530:	d0f9      	beq.n	18526 <__aeabi_fmul+0xe6>
   18532:	ea41 010c 	orr.w	r1, r1, ip
   18536:	e78f      	b.n	18458 <__aeabi_fmul+0x18>
   18538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1853c:	ea92 0f0c 	teq	r2, ip
   18540:	bf18      	it	ne
   18542:	ea93 0f0c 	teqne	r3, ip
   18546:	d00a      	beq.n	1855e <__aeabi_fmul+0x11e>
   18548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1854c:	bf18      	it	ne
   1854e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18552:	d1d8      	bne.n	18506 <__aeabi_fmul+0xc6>
   18554:	ea80 0001 	eor.w	r0, r0, r1
   18558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1855c:	4770      	bx	lr
   1855e:	f090 0f00 	teq	r0, #0
   18562:	bf17      	itett	ne
   18564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18568:	4608      	moveq	r0, r1
   1856a:	f091 0f00 	teqne	r1, #0
   1856e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18572:	d014      	beq.n	1859e <__aeabi_fmul+0x15e>
   18574:	ea92 0f0c 	teq	r2, ip
   18578:	d101      	bne.n	1857e <__aeabi_fmul+0x13e>
   1857a:	0242      	lsls	r2, r0, #9
   1857c:	d10f      	bne.n	1859e <__aeabi_fmul+0x15e>
   1857e:	ea93 0f0c 	teq	r3, ip
   18582:	d103      	bne.n	1858c <__aeabi_fmul+0x14c>
   18584:	024b      	lsls	r3, r1, #9
   18586:	bf18      	it	ne
   18588:	4608      	movne	r0, r1
   1858a:	d108      	bne.n	1859e <__aeabi_fmul+0x15e>
   1858c:	ea80 0001 	eor.w	r0, r0, r1
   18590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1859c:	4770      	bx	lr
   1859e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   185a6:	4770      	bx	lr

000185a8 <__aeabi_drsub>:
   185a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   185ac:	e002      	b.n	185b4 <__adddf3>
   185ae:	bf00      	nop

000185b0 <__aeabi_dsub>:
   185b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000185b4 <__adddf3>:
   185b4:	b530      	push	{r4, r5, lr}
   185b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   185ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   185be:	ea94 0f05 	teq	r4, r5
   185c2:	bf08      	it	eq
   185c4:	ea90 0f02 	teqeq	r0, r2
   185c8:	bf1f      	itttt	ne
   185ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   185ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   185d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   185d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   185da:	f000 80e2 	beq.w	187a2 <__adddf3+0x1ee>
   185de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   185e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   185e6:	bfb8      	it	lt
   185e8:	426d      	neglt	r5, r5
   185ea:	dd0c      	ble.n	18606 <__adddf3+0x52>
   185ec:	442c      	add	r4, r5
   185ee:	ea80 0202 	eor.w	r2, r0, r2
   185f2:	ea81 0303 	eor.w	r3, r1, r3
   185f6:	ea82 0000 	eor.w	r0, r2, r0
   185fa:	ea83 0101 	eor.w	r1, r3, r1
   185fe:	ea80 0202 	eor.w	r2, r0, r2
   18602:	ea81 0303 	eor.w	r3, r1, r3
   18606:	2d36      	cmp	r5, #54	; 0x36
   18608:	bf88      	it	hi
   1860a:	bd30      	pophi	{r4, r5, pc}
   1860c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18610:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1861c:	d002      	beq.n	18624 <__adddf3+0x70>
   1861e:	4240      	negs	r0, r0
   18620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18628:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1862c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18630:	d002      	beq.n	18638 <__adddf3+0x84>
   18632:	4252      	negs	r2, r2
   18634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18638:	ea94 0f05 	teq	r4, r5
   1863c:	f000 80a7 	beq.w	1878e <__adddf3+0x1da>
   18640:	f1a4 0401 	sub.w	r4, r4, #1
   18644:	f1d5 0e20 	rsbs	lr, r5, #32
   18648:	db0d      	blt.n	18666 <__adddf3+0xb2>
   1864a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1864e:	fa22 f205 	lsr.w	r2, r2, r5
   18652:	1880      	adds	r0, r0, r2
   18654:	f141 0100 	adc.w	r1, r1, #0
   18658:	fa03 f20e 	lsl.w	r2, r3, lr
   1865c:	1880      	adds	r0, r0, r2
   1865e:	fa43 f305 	asr.w	r3, r3, r5
   18662:	4159      	adcs	r1, r3
   18664:	e00e      	b.n	18684 <__adddf3+0xd0>
   18666:	f1a5 0520 	sub.w	r5, r5, #32
   1866a:	f10e 0e20 	add.w	lr, lr, #32
   1866e:	2a01      	cmp	r2, #1
   18670:	fa03 fc0e 	lsl.w	ip, r3, lr
   18674:	bf28      	it	cs
   18676:	f04c 0c02 	orrcs.w	ip, ip, #2
   1867a:	fa43 f305 	asr.w	r3, r3, r5
   1867e:	18c0      	adds	r0, r0, r3
   18680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18688:	d507      	bpl.n	1869a <__adddf3+0xe6>
   1868a:	f04f 0e00 	mov.w	lr, #0
   1868e:	f1dc 0c00 	rsbs	ip, ip, #0
   18692:	eb7e 0000 	sbcs.w	r0, lr, r0
   18696:	eb6e 0101 	sbc.w	r1, lr, r1
   1869a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1869e:	d31b      	bcc.n	186d8 <__adddf3+0x124>
   186a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   186a4:	d30c      	bcc.n	186c0 <__adddf3+0x10c>
   186a6:	0849      	lsrs	r1, r1, #1
   186a8:	ea5f 0030 	movs.w	r0, r0, rrx
   186ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   186b0:	f104 0401 	add.w	r4, r4, #1
   186b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   186b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   186bc:	f080 809a 	bcs.w	187f4 <__adddf3+0x240>
   186c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   186c4:	bf08      	it	eq
   186c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   186ca:	f150 0000 	adcs.w	r0, r0, #0
   186ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   186d2:	ea41 0105 	orr.w	r1, r1, r5
   186d6:	bd30      	pop	{r4, r5, pc}
   186d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   186dc:	4140      	adcs	r0, r0
   186de:	eb41 0101 	adc.w	r1, r1, r1
   186e2:	3c01      	subs	r4, #1
   186e4:	bf28      	it	cs
   186e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   186ea:	d2e9      	bcs.n	186c0 <__adddf3+0x10c>
   186ec:	f091 0f00 	teq	r1, #0
   186f0:	bf04      	itt	eq
   186f2:	4601      	moveq	r1, r0
   186f4:	2000      	moveq	r0, #0
   186f6:	fab1 f381 	clz	r3, r1
   186fa:	bf08      	it	eq
   186fc:	3320      	addeq	r3, #32
   186fe:	f1a3 030b 	sub.w	r3, r3, #11
   18702:	f1b3 0220 	subs.w	r2, r3, #32
   18706:	da0c      	bge.n	18722 <__adddf3+0x16e>
   18708:	320c      	adds	r2, #12
   1870a:	dd08      	ble.n	1871e <__adddf3+0x16a>
   1870c:	f102 0c14 	add.w	ip, r2, #20
   18710:	f1c2 020c 	rsb	r2, r2, #12
   18714:	fa01 f00c 	lsl.w	r0, r1, ip
   18718:	fa21 f102 	lsr.w	r1, r1, r2
   1871c:	e00c      	b.n	18738 <__adddf3+0x184>
   1871e:	f102 0214 	add.w	r2, r2, #20
   18722:	bfd8      	it	le
   18724:	f1c2 0c20 	rsble	ip, r2, #32
   18728:	fa01 f102 	lsl.w	r1, r1, r2
   1872c:	fa20 fc0c 	lsr.w	ip, r0, ip
   18730:	bfdc      	itt	le
   18732:	ea41 010c 	orrle.w	r1, r1, ip
   18736:	4090      	lslle	r0, r2
   18738:	1ae4      	subs	r4, r4, r3
   1873a:	bfa2      	ittt	ge
   1873c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18740:	4329      	orrge	r1, r5
   18742:	bd30      	popge	{r4, r5, pc}
   18744:	ea6f 0404 	mvn.w	r4, r4
   18748:	3c1f      	subs	r4, #31
   1874a:	da1c      	bge.n	18786 <__adddf3+0x1d2>
   1874c:	340c      	adds	r4, #12
   1874e:	dc0e      	bgt.n	1876e <__adddf3+0x1ba>
   18750:	f104 0414 	add.w	r4, r4, #20
   18754:	f1c4 0220 	rsb	r2, r4, #32
   18758:	fa20 f004 	lsr.w	r0, r0, r4
   1875c:	fa01 f302 	lsl.w	r3, r1, r2
   18760:	ea40 0003 	orr.w	r0, r0, r3
   18764:	fa21 f304 	lsr.w	r3, r1, r4
   18768:	ea45 0103 	orr.w	r1, r5, r3
   1876c:	bd30      	pop	{r4, r5, pc}
   1876e:	f1c4 040c 	rsb	r4, r4, #12
   18772:	f1c4 0220 	rsb	r2, r4, #32
   18776:	fa20 f002 	lsr.w	r0, r0, r2
   1877a:	fa01 f304 	lsl.w	r3, r1, r4
   1877e:	ea40 0003 	orr.w	r0, r0, r3
   18782:	4629      	mov	r1, r5
   18784:	bd30      	pop	{r4, r5, pc}
   18786:	fa21 f004 	lsr.w	r0, r1, r4
   1878a:	4629      	mov	r1, r5
   1878c:	bd30      	pop	{r4, r5, pc}
   1878e:	f094 0f00 	teq	r4, #0
   18792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   18796:	bf06      	itte	eq
   18798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1879c:	3401      	addeq	r4, #1
   1879e:	3d01      	subne	r5, #1
   187a0:	e74e      	b.n	18640 <__adddf3+0x8c>
   187a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   187a6:	bf18      	it	ne
   187a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   187ac:	d029      	beq.n	18802 <__adddf3+0x24e>
   187ae:	ea94 0f05 	teq	r4, r5
   187b2:	bf08      	it	eq
   187b4:	ea90 0f02 	teqeq	r0, r2
   187b8:	d005      	beq.n	187c6 <__adddf3+0x212>
   187ba:	ea54 0c00 	orrs.w	ip, r4, r0
   187be:	bf04      	itt	eq
   187c0:	4619      	moveq	r1, r3
   187c2:	4610      	moveq	r0, r2
   187c4:	bd30      	pop	{r4, r5, pc}
   187c6:	ea91 0f03 	teq	r1, r3
   187ca:	bf1e      	ittt	ne
   187cc:	2100      	movne	r1, #0
   187ce:	2000      	movne	r0, #0
   187d0:	bd30      	popne	{r4, r5, pc}
   187d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   187d6:	d105      	bne.n	187e4 <__adddf3+0x230>
   187d8:	0040      	lsls	r0, r0, #1
   187da:	4149      	adcs	r1, r1
   187dc:	bf28      	it	cs
   187de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   187e2:	bd30      	pop	{r4, r5, pc}
   187e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   187e8:	bf3c      	itt	cc
   187ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   187ee:	bd30      	popcc	{r4, r5, pc}
   187f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   187f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   187f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   187fc:	f04f 0000 	mov.w	r0, #0
   18800:	bd30      	pop	{r4, r5, pc}
   18802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   18806:	bf1a      	itte	ne
   18808:	4619      	movne	r1, r3
   1880a:	4610      	movne	r0, r2
   1880c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18810:	bf1c      	itt	ne
   18812:	460b      	movne	r3, r1
   18814:	4602      	movne	r2, r0
   18816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1881a:	bf06      	itte	eq
   1881c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18820:	ea91 0f03 	teqeq	r1, r3
   18824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18828:	bd30      	pop	{r4, r5, pc}
   1882a:	bf00      	nop

0001882c <__aeabi_ui2d>:
   1882c:	f090 0f00 	teq	r0, #0
   18830:	bf04      	itt	eq
   18832:	2100      	moveq	r1, #0
   18834:	4770      	bxeq	lr
   18836:	b530      	push	{r4, r5, lr}
   18838:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1883c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18840:	f04f 0500 	mov.w	r5, #0
   18844:	f04f 0100 	mov.w	r1, #0
   18848:	e750      	b.n	186ec <__adddf3+0x138>
   1884a:	bf00      	nop

0001884c <__aeabi_i2d>:
   1884c:	f090 0f00 	teq	r0, #0
   18850:	bf04      	itt	eq
   18852:	2100      	moveq	r1, #0
   18854:	4770      	bxeq	lr
   18856:	b530      	push	{r4, r5, lr}
   18858:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1885c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   18864:	bf48      	it	mi
   18866:	4240      	negmi	r0, r0
   18868:	f04f 0100 	mov.w	r1, #0
   1886c:	e73e      	b.n	186ec <__adddf3+0x138>
   1886e:	bf00      	nop

00018870 <__aeabi_f2d>:
   18870:	0042      	lsls	r2, r0, #1
   18872:	ea4f 01e2 	mov.w	r1, r2, asr #3
   18876:	ea4f 0131 	mov.w	r1, r1, rrx
   1887a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1887e:	bf1f      	itttt	ne
   18880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   18884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1888c:	4770      	bxne	lr
   1888e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   18892:	bf08      	it	eq
   18894:	4770      	bxeq	lr
   18896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1889a:	bf04      	itt	eq
   1889c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   188a0:	4770      	bxeq	lr
   188a2:	b530      	push	{r4, r5, lr}
   188a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   188a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   188ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b0:	e71c      	b.n	186ec <__adddf3+0x138>
   188b2:	bf00      	nop

000188b4 <__aeabi_ul2d>:
   188b4:	ea50 0201 	orrs.w	r2, r0, r1
   188b8:	bf08      	it	eq
   188ba:	4770      	bxeq	lr
   188bc:	b530      	push	{r4, r5, lr}
   188be:	f04f 0500 	mov.w	r5, #0
   188c2:	e00a      	b.n	188da <__aeabi_l2d+0x16>

000188c4 <__aeabi_l2d>:
   188c4:	ea50 0201 	orrs.w	r2, r0, r1
   188c8:	bf08      	it	eq
   188ca:	4770      	bxeq	lr
   188cc:	b530      	push	{r4, r5, lr}
   188ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   188d2:	d502      	bpl.n	188da <__aeabi_l2d+0x16>
   188d4:	4240      	negs	r0, r0
   188d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   188da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   188de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   188e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   188e6:	f43f aed8 	beq.w	1869a <__adddf3+0xe6>
   188ea:	f04f 0203 	mov.w	r2, #3
   188ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   188f2:	bf18      	it	ne
   188f4:	3203      	addne	r2, #3
   188f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   188fa:	bf18      	it	ne
   188fc:	3203      	addne	r2, #3
   188fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18902:	f1c2 0320 	rsb	r3, r2, #32
   18906:	fa00 fc03 	lsl.w	ip, r0, r3
   1890a:	fa20 f002 	lsr.w	r0, r0, r2
   1890e:	fa01 fe03 	lsl.w	lr, r1, r3
   18912:	ea40 000e 	orr.w	r0, r0, lr
   18916:	fa21 f102 	lsr.w	r1, r1, r2
   1891a:	4414      	add	r4, r2
   1891c:	e6bd      	b.n	1869a <__adddf3+0xe6>
   1891e:	bf00      	nop

00018920 <__aeabi_dmul>:
   18920:	b570      	push	{r4, r5, r6, lr}
   18922:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1892a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1892e:	bf1d      	ittte	ne
   18930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18934:	ea94 0f0c 	teqne	r4, ip
   18938:	ea95 0f0c 	teqne	r5, ip
   1893c:	f000 f8de 	bleq	18afc <__aeabi_dmul+0x1dc>
   18940:	442c      	add	r4, r5
   18942:	ea81 0603 	eor.w	r6, r1, r3
   18946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1894a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1894e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18952:	bf18      	it	ne
   18954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1895c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18960:	d038      	beq.n	189d4 <__aeabi_dmul+0xb4>
   18962:	fba0 ce02 	umull	ip, lr, r0, r2
   18966:	f04f 0500 	mov.w	r5, #0
   1896a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1896e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   18972:	fbe0 e503 	umlal	lr, r5, r0, r3
   18976:	f04f 0600 	mov.w	r6, #0
   1897a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1897e:	f09c 0f00 	teq	ip, #0
   18982:	bf18      	it	ne
   18984:	f04e 0e01 	orrne.w	lr, lr, #1
   18988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1898c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   18994:	d204      	bcs.n	189a0 <__aeabi_dmul+0x80>
   18996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1899a:	416d      	adcs	r5, r5
   1899c:	eb46 0606 	adc.w	r6, r6, r6
   189a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   189a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   189a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   189ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   189b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   189b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   189b8:	bf88      	it	hi
   189ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   189be:	d81e      	bhi.n	189fe <__aeabi_dmul+0xde>
   189c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   189c4:	bf08      	it	eq
   189c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   189ca:	f150 0000 	adcs.w	r0, r0, #0
   189ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   189d2:	bd70      	pop	{r4, r5, r6, pc}
   189d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   189d8:	ea46 0101 	orr.w	r1, r6, r1
   189dc:	ea40 0002 	orr.w	r0, r0, r2
   189e0:	ea81 0103 	eor.w	r1, r1, r3
   189e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   189e8:	bfc2      	ittt	gt
   189ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   189ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   189f2:	bd70      	popgt	{r4, r5, r6, pc}
   189f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   189f8:	f04f 0e00 	mov.w	lr, #0
   189fc:	3c01      	subs	r4, #1
   189fe:	f300 80ab 	bgt.w	18b58 <__aeabi_dmul+0x238>
   18a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   18a06:	bfde      	ittt	le
   18a08:	2000      	movle	r0, #0
   18a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18a0e:	bd70      	pople	{r4, r5, r6, pc}
   18a10:	f1c4 0400 	rsb	r4, r4, #0
   18a14:	3c20      	subs	r4, #32
   18a16:	da35      	bge.n	18a84 <__aeabi_dmul+0x164>
   18a18:	340c      	adds	r4, #12
   18a1a:	dc1b      	bgt.n	18a54 <__aeabi_dmul+0x134>
   18a1c:	f104 0414 	add.w	r4, r4, #20
   18a20:	f1c4 0520 	rsb	r5, r4, #32
   18a24:	fa00 f305 	lsl.w	r3, r0, r5
   18a28:	fa20 f004 	lsr.w	r0, r0, r4
   18a2c:	fa01 f205 	lsl.w	r2, r1, r5
   18a30:	ea40 0002 	orr.w	r0, r0, r2
   18a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   18a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18a40:	fa21 f604 	lsr.w	r6, r1, r4
   18a44:	eb42 0106 	adc.w	r1, r2, r6
   18a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18a4c:	bf08      	it	eq
   18a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18a52:	bd70      	pop	{r4, r5, r6, pc}
   18a54:	f1c4 040c 	rsb	r4, r4, #12
   18a58:	f1c4 0520 	rsb	r5, r4, #32
   18a5c:	fa00 f304 	lsl.w	r3, r0, r4
   18a60:	fa20 f005 	lsr.w	r0, r0, r5
   18a64:	fa01 f204 	lsl.w	r2, r1, r4
   18a68:	ea40 0002 	orr.w	r0, r0, r2
   18a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18a74:	f141 0100 	adc.w	r1, r1, #0
   18a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18a7c:	bf08      	it	eq
   18a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18a82:	bd70      	pop	{r4, r5, r6, pc}
   18a84:	f1c4 0520 	rsb	r5, r4, #32
   18a88:	fa00 f205 	lsl.w	r2, r0, r5
   18a8c:	ea4e 0e02 	orr.w	lr, lr, r2
   18a90:	fa20 f304 	lsr.w	r3, r0, r4
   18a94:	fa01 f205 	lsl.w	r2, r1, r5
   18a98:	ea43 0302 	orr.w	r3, r3, r2
   18a9c:	fa21 f004 	lsr.w	r0, r1, r4
   18aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18aa4:	fa21 f204 	lsr.w	r2, r1, r4
   18aa8:	ea20 0002 	bic.w	r0, r0, r2
   18aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18ab4:	bf08      	it	eq
   18ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18aba:	bd70      	pop	{r4, r5, r6, pc}
   18abc:	f094 0f00 	teq	r4, #0
   18ac0:	d10f      	bne.n	18ae2 <__aeabi_dmul+0x1c2>
   18ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   18ac6:	0040      	lsls	r0, r0, #1
   18ac8:	eb41 0101 	adc.w	r1, r1, r1
   18acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18ad0:	bf08      	it	eq
   18ad2:	3c01      	subeq	r4, #1
   18ad4:	d0f7      	beq.n	18ac6 <__aeabi_dmul+0x1a6>
   18ad6:	ea41 0106 	orr.w	r1, r1, r6
   18ada:	f095 0f00 	teq	r5, #0
   18ade:	bf18      	it	ne
   18ae0:	4770      	bxne	lr
   18ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   18ae6:	0052      	lsls	r2, r2, #1
   18ae8:	eb43 0303 	adc.w	r3, r3, r3
   18aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18af0:	bf08      	it	eq
   18af2:	3d01      	subeq	r5, #1
   18af4:	d0f7      	beq.n	18ae6 <__aeabi_dmul+0x1c6>
   18af6:	ea43 0306 	orr.w	r3, r3, r6
   18afa:	4770      	bx	lr
   18afc:	ea94 0f0c 	teq	r4, ip
   18b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b04:	bf18      	it	ne
   18b06:	ea95 0f0c 	teqne	r5, ip
   18b0a:	d00c      	beq.n	18b26 <__aeabi_dmul+0x206>
   18b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18b10:	bf18      	it	ne
   18b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18b16:	d1d1      	bne.n	18abc <__aeabi_dmul+0x19c>
   18b18:	ea81 0103 	eor.w	r1, r1, r3
   18b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18b20:	f04f 0000 	mov.w	r0, #0
   18b24:	bd70      	pop	{r4, r5, r6, pc}
   18b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18b2a:	bf06      	itte	eq
   18b2c:	4610      	moveq	r0, r2
   18b2e:	4619      	moveq	r1, r3
   18b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18b34:	d019      	beq.n	18b6a <__aeabi_dmul+0x24a>
   18b36:	ea94 0f0c 	teq	r4, ip
   18b3a:	d102      	bne.n	18b42 <__aeabi_dmul+0x222>
   18b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18b40:	d113      	bne.n	18b6a <__aeabi_dmul+0x24a>
   18b42:	ea95 0f0c 	teq	r5, ip
   18b46:	d105      	bne.n	18b54 <__aeabi_dmul+0x234>
   18b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18b4c:	bf1c      	itt	ne
   18b4e:	4610      	movne	r0, r2
   18b50:	4619      	movne	r1, r3
   18b52:	d10a      	bne.n	18b6a <__aeabi_dmul+0x24a>
   18b54:	ea81 0103 	eor.w	r1, r1, r3
   18b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18b64:	f04f 0000 	mov.w	r0, #0
   18b68:	bd70      	pop	{r4, r5, r6, pc}
   18b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   18b72:	bd70      	pop	{r4, r5, r6, pc}

00018b74 <__aeabi_ddiv>:
   18b74:	b570      	push	{r4, r5, r6, lr}
   18b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   18b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18b82:	bf1d      	ittte	ne
   18b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18b88:	ea94 0f0c 	teqne	r4, ip
   18b8c:	ea95 0f0c 	teqne	r5, ip
   18b90:	f000 f8a7 	bleq	18ce2 <__aeabi_ddiv+0x16e>
   18b94:	eba4 0405 	sub.w	r4, r4, r5
   18b98:	ea81 0e03 	eor.w	lr, r1, r3
   18b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18ba4:	f000 8088 	beq.w	18cb8 <__aeabi_ddiv+0x144>
   18ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18bcc:	429d      	cmp	r5, r3
   18bce:	bf08      	it	eq
   18bd0:	4296      	cmpeq	r6, r2
   18bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18bda:	d202      	bcs.n	18be2 <__aeabi_ddiv+0x6e>
   18bdc:	085b      	lsrs	r3, r3, #1
   18bde:	ea4f 0232 	mov.w	r2, r2, rrx
   18be2:	1ab6      	subs	r6, r6, r2
   18be4:	eb65 0503 	sbc.w	r5, r5, r3
   18be8:	085b      	lsrs	r3, r3, #1
   18bea:	ea4f 0232 	mov.w	r2, r2, rrx
   18bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18bf6:	ebb6 0e02 	subs.w	lr, r6, r2
   18bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   18bfe:	bf22      	ittt	cs
   18c00:	1ab6      	subcs	r6, r6, r2
   18c02:	4675      	movcs	r5, lr
   18c04:	ea40 000c 	orrcs.w	r0, r0, ip
   18c08:	085b      	lsrs	r3, r3, #1
   18c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   18c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   18c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c16:	bf22      	ittt	cs
   18c18:	1ab6      	subcs	r6, r6, r2
   18c1a:	4675      	movcs	r5, lr
   18c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18c20:	085b      	lsrs	r3, r3, #1
   18c22:	ea4f 0232 	mov.w	r2, r2, rrx
   18c26:	ebb6 0e02 	subs.w	lr, r6, r2
   18c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c2e:	bf22      	ittt	cs
   18c30:	1ab6      	subcs	r6, r6, r2
   18c32:	4675      	movcs	r5, lr
   18c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18c38:	085b      	lsrs	r3, r3, #1
   18c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   18c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   18c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   18c46:	bf22      	ittt	cs
   18c48:	1ab6      	subcs	r6, r6, r2
   18c4a:	4675      	movcs	r5, lr
   18c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18c50:	ea55 0e06 	orrs.w	lr, r5, r6
   18c54:	d018      	beq.n	18c88 <__aeabi_ddiv+0x114>
   18c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18c72:	d1c0      	bne.n	18bf6 <__aeabi_ddiv+0x82>
   18c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18c78:	d10b      	bne.n	18c92 <__aeabi_ddiv+0x11e>
   18c7a:	ea41 0100 	orr.w	r1, r1, r0
   18c7e:	f04f 0000 	mov.w	r0, #0
   18c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18c86:	e7b6      	b.n	18bf6 <__aeabi_ddiv+0x82>
   18c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18c8c:	bf04      	itt	eq
   18c8e:	4301      	orreq	r1, r0
   18c90:	2000      	moveq	r0, #0
   18c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18c96:	bf88      	it	hi
   18c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18c9c:	f63f aeaf 	bhi.w	189fe <__aeabi_dmul+0xde>
   18ca0:	ebb5 0c03 	subs.w	ip, r5, r3
   18ca4:	bf04      	itt	eq
   18ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
   18caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18cae:	f150 0000 	adcs.w	r0, r0, #0
   18cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18cb6:	bd70      	pop	{r4, r5, r6, pc}
   18cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18cc4:	bfc2      	ittt	gt
   18cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   18cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18cce:	bd70      	popgt	{r4, r5, r6, pc}
   18cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18cd4:	f04f 0e00 	mov.w	lr, #0
   18cd8:	3c01      	subs	r4, #1
   18cda:	e690      	b.n	189fe <__aeabi_dmul+0xde>
   18cdc:	ea45 0e06 	orr.w	lr, r5, r6
   18ce0:	e68d      	b.n	189fe <__aeabi_dmul+0xde>
   18ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18ce6:	ea94 0f0c 	teq	r4, ip
   18cea:	bf08      	it	eq
   18cec:	ea95 0f0c 	teqeq	r5, ip
   18cf0:	f43f af3b 	beq.w	18b6a <__aeabi_dmul+0x24a>
   18cf4:	ea94 0f0c 	teq	r4, ip
   18cf8:	d10a      	bne.n	18d10 <__aeabi_ddiv+0x19c>
   18cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18cfe:	f47f af34 	bne.w	18b6a <__aeabi_dmul+0x24a>
   18d02:	ea95 0f0c 	teq	r5, ip
   18d06:	f47f af25 	bne.w	18b54 <__aeabi_dmul+0x234>
   18d0a:	4610      	mov	r0, r2
   18d0c:	4619      	mov	r1, r3
   18d0e:	e72c      	b.n	18b6a <__aeabi_dmul+0x24a>
   18d10:	ea95 0f0c 	teq	r5, ip
   18d14:	d106      	bne.n	18d24 <__aeabi_ddiv+0x1b0>
   18d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d1a:	f43f aefd 	beq.w	18b18 <__aeabi_dmul+0x1f8>
   18d1e:	4610      	mov	r0, r2
   18d20:	4619      	mov	r1, r3
   18d22:	e722      	b.n	18b6a <__aeabi_dmul+0x24a>
   18d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d28:	bf18      	it	ne
   18d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d2e:	f47f aec5 	bne.w	18abc <__aeabi_dmul+0x19c>
   18d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18d36:	f47f af0d 	bne.w	18b54 <__aeabi_dmul+0x234>
   18d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18d3e:	f47f aeeb 	bne.w	18b18 <__aeabi_dmul+0x1f8>
   18d42:	e712      	b.n	18b6a <__aeabi_dmul+0x24a>

00018d44 <__aeabi_d2f>:
   18d44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18d48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18d4c:	bf24      	itt	cs
   18d4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18d52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18d56:	d90d      	bls.n	18d74 <__aeabi_d2f+0x30>
   18d58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18d5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18d60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18d64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18d68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18d6c:	bf08      	it	eq
   18d6e:	f020 0001 	biceq.w	r0, r0, #1
   18d72:	4770      	bx	lr
   18d74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18d78:	d121      	bne.n	18dbe <__aeabi_d2f+0x7a>
   18d7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18d7e:	bfbc      	itt	lt
   18d80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18d84:	4770      	bxlt	lr
   18d86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18d8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18d8e:	f1c2 0218 	rsb	r2, r2, #24
   18d92:	f1c2 0c20 	rsb	ip, r2, #32
   18d96:	fa10 f30c 	lsls.w	r3, r0, ip
   18d9a:	fa20 f002 	lsr.w	r0, r0, r2
   18d9e:	bf18      	it	ne
   18da0:	f040 0001 	orrne.w	r0, r0, #1
   18da4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18da8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18dac:	fa03 fc0c 	lsl.w	ip, r3, ip
   18db0:	ea40 000c 	orr.w	r0, r0, ip
   18db4:	fa23 f302 	lsr.w	r3, r3, r2
   18db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18dbc:	e7cc      	b.n	18d58 <__aeabi_d2f+0x14>
   18dbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18dc2:	d107      	bne.n	18dd4 <__aeabi_d2f+0x90>
   18dc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18dc8:	bf1e      	ittt	ne
   18dca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18dce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18dd2:	4770      	bxne	lr
   18dd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18de0:	4770      	bx	lr
   18de2:	bf00      	nop

00018de4 <__aeabi_frsub>:
   18de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18de8:	e002      	b.n	18df0 <__addsf3>
   18dea:	bf00      	nop

00018dec <__aeabi_fsub>:
   18dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018df0 <__addsf3>:
   18df0:	0042      	lsls	r2, r0, #1
   18df2:	bf1f      	itttt	ne
   18df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18df8:	ea92 0f03 	teqne	r2, r3
   18dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18e04:	d06a      	beq.n	18edc <__addsf3+0xec>
   18e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18e0e:	bfc1      	itttt	gt
   18e10:	18d2      	addgt	r2, r2, r3
   18e12:	4041      	eorgt	r1, r0
   18e14:	4048      	eorgt	r0, r1
   18e16:	4041      	eorgt	r1, r0
   18e18:	bfb8      	it	lt
   18e1a:	425b      	neglt	r3, r3
   18e1c:	2b19      	cmp	r3, #25
   18e1e:	bf88      	it	hi
   18e20:	4770      	bxhi	lr
   18e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18e2e:	bf18      	it	ne
   18e30:	4240      	negne	r0, r0
   18e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18e3e:	bf18      	it	ne
   18e40:	4249      	negne	r1, r1
   18e42:	ea92 0f03 	teq	r2, r3
   18e46:	d03f      	beq.n	18ec8 <__addsf3+0xd8>
   18e48:	f1a2 0201 	sub.w	r2, r2, #1
   18e4c:	fa41 fc03 	asr.w	ip, r1, r3
   18e50:	eb10 000c 	adds.w	r0, r0, ip
   18e54:	f1c3 0320 	rsb	r3, r3, #32
   18e58:	fa01 f103 	lsl.w	r1, r1, r3
   18e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18e60:	d502      	bpl.n	18e68 <__addsf3+0x78>
   18e62:	4249      	negs	r1, r1
   18e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18e6c:	d313      	bcc.n	18e96 <__addsf3+0xa6>
   18e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18e72:	d306      	bcc.n	18e82 <__addsf3+0x92>
   18e74:	0840      	lsrs	r0, r0, #1
   18e76:	ea4f 0131 	mov.w	r1, r1, rrx
   18e7a:	f102 0201 	add.w	r2, r2, #1
   18e7e:	2afe      	cmp	r2, #254	; 0xfe
   18e80:	d251      	bcs.n	18f26 <__addsf3+0x136>
   18e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18e8a:	bf08      	it	eq
   18e8c:	f020 0001 	biceq.w	r0, r0, #1
   18e90:	ea40 0003 	orr.w	r0, r0, r3
   18e94:	4770      	bx	lr
   18e96:	0049      	lsls	r1, r1, #1
   18e98:	eb40 0000 	adc.w	r0, r0, r0
   18e9c:	3a01      	subs	r2, #1
   18e9e:	bf28      	it	cs
   18ea0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   18ea4:	d2ed      	bcs.n	18e82 <__addsf3+0x92>
   18ea6:	fab0 fc80 	clz	ip, r0
   18eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   18eae:	ebb2 020c 	subs.w	r2, r2, ip
   18eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   18eb6:	bfaa      	itet	ge
   18eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18ebc:	4252      	neglt	r2, r2
   18ebe:	4318      	orrge	r0, r3
   18ec0:	bfbc      	itt	lt
   18ec2:	40d0      	lsrlt	r0, r2
   18ec4:	4318      	orrlt	r0, r3
   18ec6:	4770      	bx	lr
   18ec8:	f092 0f00 	teq	r2, #0
   18ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18ed0:	bf06      	itte	eq
   18ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18ed6:	3201      	addeq	r2, #1
   18ed8:	3b01      	subne	r3, #1
   18eda:	e7b5      	b.n	18e48 <__addsf3+0x58>
   18edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18ee4:	bf18      	it	ne
   18ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18eea:	d021      	beq.n	18f30 <__addsf3+0x140>
   18eec:	ea92 0f03 	teq	r2, r3
   18ef0:	d004      	beq.n	18efc <__addsf3+0x10c>
   18ef2:	f092 0f00 	teq	r2, #0
   18ef6:	bf08      	it	eq
   18ef8:	4608      	moveq	r0, r1
   18efa:	4770      	bx	lr
   18efc:	ea90 0f01 	teq	r0, r1
   18f00:	bf1c      	itt	ne
   18f02:	2000      	movne	r0, #0
   18f04:	4770      	bxne	lr
   18f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18f0a:	d104      	bne.n	18f16 <__addsf3+0x126>
   18f0c:	0040      	lsls	r0, r0, #1
   18f0e:	bf28      	it	cs
   18f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18f14:	4770      	bx	lr
   18f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18f1a:	bf3c      	itt	cc
   18f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18f20:	4770      	bxcc	lr
   18f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18f2e:	4770      	bx	lr
   18f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18f34:	bf16      	itet	ne
   18f36:	4608      	movne	r0, r1
   18f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18f3c:	4601      	movne	r1, r0
   18f3e:	0242      	lsls	r2, r0, #9
   18f40:	bf06      	itte	eq
   18f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18f46:	ea90 0f01 	teqeq	r0, r1
   18f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18f4e:	4770      	bx	lr

00018f50 <__aeabi_ui2f>:
   18f50:	f04f 0300 	mov.w	r3, #0
   18f54:	e004      	b.n	18f60 <__aeabi_i2f+0x8>
   18f56:	bf00      	nop

00018f58 <__aeabi_i2f>:
   18f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18f5c:	bf48      	it	mi
   18f5e:	4240      	negmi	r0, r0
   18f60:	ea5f 0c00 	movs.w	ip, r0
   18f64:	bf08      	it	eq
   18f66:	4770      	bxeq	lr
   18f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18f6c:	4601      	mov	r1, r0
   18f6e:	f04f 0000 	mov.w	r0, #0
   18f72:	e01c      	b.n	18fae <__aeabi_l2f+0x2a>

00018f74 <__aeabi_ul2f>:
   18f74:	ea50 0201 	orrs.w	r2, r0, r1
   18f78:	bf08      	it	eq
   18f7a:	4770      	bxeq	lr
   18f7c:	f04f 0300 	mov.w	r3, #0
   18f80:	e00a      	b.n	18f98 <__aeabi_l2f+0x14>
   18f82:	bf00      	nop

00018f84 <__aeabi_l2f>:
   18f84:	ea50 0201 	orrs.w	r2, r0, r1
   18f88:	bf08      	it	eq
   18f8a:	4770      	bxeq	lr
   18f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18f90:	d502      	bpl.n	18f98 <__aeabi_l2f+0x14>
   18f92:	4240      	negs	r0, r0
   18f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18f98:	ea5f 0c01 	movs.w	ip, r1
   18f9c:	bf02      	ittt	eq
   18f9e:	4684      	moveq	ip, r0
   18fa0:	4601      	moveq	r1, r0
   18fa2:	2000      	moveq	r0, #0
   18fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18fa8:	bf08      	it	eq
   18faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18fb2:	fabc f28c 	clz	r2, ip
   18fb6:	3a08      	subs	r2, #8
   18fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18fbc:	db10      	blt.n	18fe0 <__aeabi_l2f+0x5c>
   18fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   18fc2:	4463      	add	r3, ip
   18fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   18fc8:	f1c2 0220 	rsb	r2, r2, #32
   18fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18fd0:	fa20 f202 	lsr.w	r2, r0, r2
   18fd4:	eb43 0002 	adc.w	r0, r3, r2
   18fd8:	bf08      	it	eq
   18fda:	f020 0001 	biceq.w	r0, r0, #1
   18fde:	4770      	bx	lr
   18fe0:	f102 0220 	add.w	r2, r2, #32
   18fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   18fe8:	f1c2 0220 	rsb	r2, r2, #32
   18fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18ff0:	fa21 f202 	lsr.w	r2, r1, r2
   18ff4:	eb43 0002 	adc.w	r0, r3, r2
   18ff8:	bf08      	it	eq
   18ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18ffe:	4770      	bx	lr

00019000 <__aeabi_ldivmod>:
   19000:	b97b      	cbnz	r3, 19022 <__aeabi_ldivmod+0x22>
   19002:	b972      	cbnz	r2, 19022 <__aeabi_ldivmod+0x22>
   19004:	2900      	cmp	r1, #0
   19006:	bfbe      	ittt	lt
   19008:	2000      	movlt	r0, #0
   1900a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1900e:	e006      	blt.n	1901e <__aeabi_ldivmod+0x1e>
   19010:	bf08      	it	eq
   19012:	2800      	cmpeq	r0, #0
   19014:	bf1c      	itt	ne
   19016:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1901a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1901e:	f000 b9cb 	b.w	193b8 <__aeabi_idiv0>
   19022:	f1ad 0c08 	sub.w	ip, sp, #8
   19026:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1902a:	2900      	cmp	r1, #0
   1902c:	db09      	blt.n	19042 <__aeabi_ldivmod+0x42>
   1902e:	2b00      	cmp	r3, #0
   19030:	db1a      	blt.n	19068 <__aeabi_ldivmod+0x68>
   19032:	f000 f84d 	bl	190d0 <__udivmoddi4>
   19036:	f8dd e004 	ldr.w	lr, [sp, #4]
   1903a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1903e:	b004      	add	sp, #16
   19040:	4770      	bx	lr
   19042:	4240      	negs	r0, r0
   19044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19048:	2b00      	cmp	r3, #0
   1904a:	db1b      	blt.n	19084 <__aeabi_ldivmod+0x84>
   1904c:	f000 f840 	bl	190d0 <__udivmoddi4>
   19050:	f8dd e004 	ldr.w	lr, [sp, #4]
   19054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19058:	b004      	add	sp, #16
   1905a:	4240      	negs	r0, r0
   1905c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19060:	4252      	negs	r2, r2
   19062:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19066:	4770      	bx	lr
   19068:	4252      	negs	r2, r2
   1906a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1906e:	f000 f82f 	bl	190d0 <__udivmoddi4>
   19072:	f8dd e004 	ldr.w	lr, [sp, #4]
   19076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1907a:	b004      	add	sp, #16
   1907c:	4240      	negs	r0, r0
   1907e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19082:	4770      	bx	lr
   19084:	4252      	negs	r2, r2
   19086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1908a:	f000 f821 	bl	190d0 <__udivmoddi4>
   1908e:	f8dd e004 	ldr.w	lr, [sp, #4]
   19092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19096:	b004      	add	sp, #16
   19098:	4252      	negs	r2, r2
   1909a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1909e:	4770      	bx	lr

000190a0 <__aeabi_uldivmod>:
   190a0:	b953      	cbnz	r3, 190b8 <__aeabi_uldivmod+0x18>
   190a2:	b94a      	cbnz	r2, 190b8 <__aeabi_uldivmod+0x18>
   190a4:	2900      	cmp	r1, #0
   190a6:	bf08      	it	eq
   190a8:	2800      	cmpeq	r0, #0
   190aa:	bf1c      	itt	ne
   190ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   190b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   190b4:	f000 b980 	b.w	193b8 <__aeabi_idiv0>
   190b8:	f1ad 0c08 	sub.w	ip, sp, #8
   190bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   190c0:	f000 f806 	bl	190d0 <__udivmoddi4>
   190c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   190c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   190cc:	b004      	add	sp, #16
   190ce:	4770      	bx	lr

000190d0 <__udivmoddi4>:
   190d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   190d6:	460d      	mov	r5, r1
   190d8:	4604      	mov	r4, r0
   190da:	460f      	mov	r7, r1
   190dc:	2b00      	cmp	r3, #0
   190de:	d147      	bne.n	19170 <__udivmoddi4+0xa0>
   190e0:	428a      	cmp	r2, r1
   190e2:	4694      	mov	ip, r2
   190e4:	d95f      	bls.n	191a6 <__udivmoddi4+0xd6>
   190e6:	fab2 f382 	clz	r3, r2
   190ea:	b143      	cbz	r3, 190fe <__udivmoddi4+0x2e>
   190ec:	f1c3 0120 	rsb	r1, r3, #32
   190f0:	409f      	lsls	r7, r3
   190f2:	fa02 fc03 	lsl.w	ip, r2, r3
   190f6:	409c      	lsls	r4, r3
   190f8:	fa20 f101 	lsr.w	r1, r0, r1
   190fc:	430f      	orrs	r7, r1
   190fe:	ea4f 451c 	mov.w	r5, ip, lsr #16
   19102:	fa1f fe8c 	uxth.w	lr, ip
   19106:	0c22      	lsrs	r2, r4, #16
   19108:	fbb7 f1f5 	udiv	r1, r7, r5
   1910c:	fb05 7711 	mls	r7, r5, r1, r7
   19110:	fb01 f00e 	mul.w	r0, r1, lr
   19114:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   19118:	4290      	cmp	r0, r2
   1911a:	d908      	bls.n	1912e <__udivmoddi4+0x5e>
   1911c:	eb1c 0202 	adds.w	r2, ip, r2
   19120:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   19124:	d202      	bcs.n	1912c <__udivmoddi4+0x5c>
   19126:	4290      	cmp	r0, r2
   19128:	f200 8134 	bhi.w	19394 <__udivmoddi4+0x2c4>
   1912c:	4639      	mov	r1, r7
   1912e:	1a12      	subs	r2, r2, r0
   19130:	b2a4      	uxth	r4, r4
   19132:	fbb2 f0f5 	udiv	r0, r2, r5
   19136:	fb05 2210 	mls	r2, r5, r0, r2
   1913a:	fb00 fe0e 	mul.w	lr, r0, lr
   1913e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   19142:	45a6      	cmp	lr, r4
   19144:	d908      	bls.n	19158 <__udivmoddi4+0x88>
   19146:	eb1c 0404 	adds.w	r4, ip, r4
   1914a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1914e:	d202      	bcs.n	19156 <__udivmoddi4+0x86>
   19150:	45a6      	cmp	lr, r4
   19152:	f200 8119 	bhi.w	19388 <__udivmoddi4+0x2b8>
   19156:	4610      	mov	r0, r2
   19158:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1915c:	eba4 040e 	sub.w	r4, r4, lr
   19160:	2100      	movs	r1, #0
   19162:	b11e      	cbz	r6, 1916c <__udivmoddi4+0x9c>
   19164:	40dc      	lsrs	r4, r3
   19166:	2300      	movs	r3, #0
   19168:	e9c6 4300 	strd	r4, r3, [r6]
   1916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19170:	428b      	cmp	r3, r1
   19172:	d908      	bls.n	19186 <__udivmoddi4+0xb6>
   19174:	2e00      	cmp	r6, #0
   19176:	f000 80fb 	beq.w	19370 <__udivmoddi4+0x2a0>
   1917a:	2100      	movs	r1, #0
   1917c:	e9c6 0500 	strd	r0, r5, [r6]
   19180:	4608      	mov	r0, r1
   19182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19186:	fab3 f183 	clz	r1, r3
   1918a:	2900      	cmp	r1, #0
   1918c:	d14b      	bne.n	19226 <__udivmoddi4+0x156>
   1918e:	42ab      	cmp	r3, r5
   19190:	f0c0 80f1 	bcc.w	19376 <__udivmoddi4+0x2a6>
   19194:	4282      	cmp	r2, r0
   19196:	f240 80ee 	bls.w	19376 <__udivmoddi4+0x2a6>
   1919a:	4608      	mov	r0, r1
   1919c:	2e00      	cmp	r6, #0
   1919e:	d0e5      	beq.n	1916c <__udivmoddi4+0x9c>
   191a0:	e9c6 4700 	strd	r4, r7, [r6]
   191a4:	e7e2      	b.n	1916c <__udivmoddi4+0x9c>
   191a6:	b902      	cbnz	r2, 191aa <__udivmoddi4+0xda>
   191a8:	deff      	udf	#255	; 0xff
   191aa:	fab2 f382 	clz	r3, r2
   191ae:	2b00      	cmp	r3, #0
   191b0:	f040 809d 	bne.w	192ee <__udivmoddi4+0x21e>
   191b4:	1a8d      	subs	r5, r1, r2
   191b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   191ba:	b297      	uxth	r7, r2
   191bc:	2101      	movs	r1, #1
   191be:	fbb5 f2fe 	udiv	r2, r5, lr
   191c2:	fb0e 5012 	mls	r0, lr, r2, r5
   191c6:	0c25      	lsrs	r5, r4, #16
   191c8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   191cc:	fb07 f002 	mul.w	r0, r7, r2
   191d0:	42a8      	cmp	r0, r5
   191d2:	d90f      	bls.n	191f4 <__udivmoddi4+0x124>
   191d4:	eb1c 0505 	adds.w	r5, ip, r5
   191d8:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
   191dc:	bf2c      	ite	cs
   191de:	f04f 0901 	movcs.w	r9, #1
   191e2:	f04f 0900 	movcc.w	r9, #0
   191e6:	42a8      	cmp	r0, r5
   191e8:	d903      	bls.n	191f2 <__udivmoddi4+0x122>
   191ea:	f1b9 0f00 	cmp.w	r9, #0
   191ee:	f000 80ce 	beq.w	1938e <__udivmoddi4+0x2be>
   191f2:	4642      	mov	r2, r8
   191f4:	1a2d      	subs	r5, r5, r0
   191f6:	b2a4      	uxth	r4, r4
   191f8:	fbb5 f0fe 	udiv	r0, r5, lr
   191fc:	fb0e 5510 	mls	r5, lr, r0, r5
   19200:	fb00 f707 	mul.w	r7, r0, r7
   19204:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   19208:	42a7      	cmp	r7, r4
   1920a:	d908      	bls.n	1921e <__udivmoddi4+0x14e>
   1920c:	eb1c 0404 	adds.w	r4, ip, r4
   19210:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   19214:	d202      	bcs.n	1921c <__udivmoddi4+0x14c>
   19216:	42a7      	cmp	r7, r4
   19218:	f200 80b3 	bhi.w	19382 <__udivmoddi4+0x2b2>
   1921c:	4628      	mov	r0, r5
   1921e:	1be4      	subs	r4, r4, r7
   19220:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   19224:	e79d      	b.n	19162 <__udivmoddi4+0x92>
   19226:	f1c1 0720 	rsb	r7, r1, #32
   1922a:	408b      	lsls	r3, r1
   1922c:	fa05 f401 	lsl.w	r4, r5, r1
   19230:	fa22 fc07 	lsr.w	ip, r2, r7
   19234:	40fd      	lsrs	r5, r7
   19236:	408a      	lsls	r2, r1
   19238:	ea4c 0c03 	orr.w	ip, ip, r3
   1923c:	fa20 f307 	lsr.w	r3, r0, r7
   19240:	ea4f 491c 	mov.w	r9, ip, lsr #16
   19244:	431c      	orrs	r4, r3
   19246:	fa1f fe8c 	uxth.w	lr, ip
   1924a:	fa00 f301 	lsl.w	r3, r0, r1
   1924e:	0c20      	lsrs	r0, r4, #16
   19250:	fbb5 f8f9 	udiv	r8, r5, r9
   19254:	fb09 5518 	mls	r5, r9, r8, r5
   19258:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
   1925c:	fb08 f00e 	mul.w	r0, r8, lr
   19260:	42a8      	cmp	r0, r5
   19262:	d90f      	bls.n	19284 <__udivmoddi4+0x1b4>
   19264:	eb1c 0505 	adds.w	r5, ip, r5
   19268:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1926c:	bf2c      	ite	cs
   1926e:	f04f 0b01 	movcs.w	fp, #1
   19272:	f04f 0b00 	movcc.w	fp, #0
   19276:	42a8      	cmp	r0, r5
   19278:	d903      	bls.n	19282 <__udivmoddi4+0x1b2>
   1927a:	f1bb 0f00 	cmp.w	fp, #0
   1927e:	f000 808c 	beq.w	1939a <__udivmoddi4+0x2ca>
   19282:	46d0      	mov	r8, sl
   19284:	1a2d      	subs	r5, r5, r0
   19286:	b2a4      	uxth	r4, r4
   19288:	fbb5 f0f9 	udiv	r0, r5, r9
   1928c:	fb09 5510 	mls	r5, r9, r0, r5
   19290:	fb00 fe0e 	mul.w	lr, r0, lr
   19294:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   19298:	45ae      	cmp	lr, r5
   1929a:	d907      	bls.n	192ac <__udivmoddi4+0x1dc>
   1929c:	eb1c 0505 	adds.w	r5, ip, r5
   192a0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   192a4:	d201      	bcs.n	192aa <__udivmoddi4+0x1da>
   192a6:	45ae      	cmp	lr, r5
   192a8:	d87e      	bhi.n	193a8 <__udivmoddi4+0x2d8>
   192aa:	4620      	mov	r0, r4
   192ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   192b0:	eba5 050e 	sub.w	r5, r5, lr
   192b4:	fba0 9802 	umull	r9, r8, r0, r2
   192b8:	4545      	cmp	r5, r8
   192ba:	464c      	mov	r4, r9
   192bc:	46c6      	mov	lr, r8
   192be:	d302      	bcc.n	192c6 <__udivmoddi4+0x1f6>
   192c0:	d106      	bne.n	192d0 <__udivmoddi4+0x200>
   192c2:	454b      	cmp	r3, r9
   192c4:	d204      	bcs.n	192d0 <__udivmoddi4+0x200>
   192c6:	3801      	subs	r0, #1
   192c8:	ebb9 0402 	subs.w	r4, r9, r2
   192cc:	eb68 0e0c 	sbc.w	lr, r8, ip
   192d0:	2e00      	cmp	r6, #0
   192d2:	d06f      	beq.n	193b4 <__udivmoddi4+0x2e4>
   192d4:	1b1a      	subs	r2, r3, r4
   192d6:	eb65 050e 	sbc.w	r5, r5, lr
   192da:	fa22 f301 	lsr.w	r3, r2, r1
   192de:	fa05 f707 	lsl.w	r7, r5, r7
   192e2:	40cd      	lsrs	r5, r1
   192e4:	2100      	movs	r1, #0
   192e6:	431f      	orrs	r7, r3
   192e8:	e9c6 7500 	strd	r7, r5, [r6]
   192ec:	e73e      	b.n	1916c <__udivmoddi4+0x9c>
   192ee:	fa02 fc03 	lsl.w	ip, r2, r3
   192f2:	f1c3 0020 	rsb	r0, r3, #32
   192f6:	fa01 f203 	lsl.w	r2, r1, r3
   192fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   192fe:	40c1      	lsrs	r1, r0
   19300:	fa24 f500 	lsr.w	r5, r4, r0
   19304:	fa1f f78c 	uxth.w	r7, ip
   19308:	409c      	lsls	r4, r3
   1930a:	4315      	orrs	r5, r2
   1930c:	fbb1 f0fe 	udiv	r0, r1, lr
   19310:	0c2a      	lsrs	r2, r5, #16
   19312:	fb0e 1110 	mls	r1, lr, r0, r1
   19316:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1931a:	fb00 f107 	mul.w	r1, r0, r7
   1931e:	4291      	cmp	r1, r2
   19320:	d90e      	bls.n	19340 <__udivmoddi4+0x270>
   19322:	eb1c 0202 	adds.w	r2, ip, r2
   19326:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   1932a:	bf2c      	ite	cs
   1932c:	f04f 0901 	movcs.w	r9, #1
   19330:	f04f 0900 	movcc.w	r9, #0
   19334:	4291      	cmp	r1, r2
   19336:	d902      	bls.n	1933e <__udivmoddi4+0x26e>
   19338:	f1b9 0f00 	cmp.w	r9, #0
   1933c:	d031      	beq.n	193a2 <__udivmoddi4+0x2d2>
   1933e:	4640      	mov	r0, r8
   19340:	1a52      	subs	r2, r2, r1
   19342:	b2ad      	uxth	r5, r5
   19344:	fbb2 f1fe 	udiv	r1, r2, lr
   19348:	fb0e 2211 	mls	r2, lr, r1, r2
   1934c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
   19350:	fb01 f207 	mul.w	r2, r1, r7
   19354:	42aa      	cmp	r2, r5
   19356:	d907      	bls.n	19368 <__udivmoddi4+0x298>
   19358:	eb1c 0505 	adds.w	r5, ip, r5
   1935c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   19360:	d201      	bcs.n	19366 <__udivmoddi4+0x296>
   19362:	42aa      	cmp	r2, r5
   19364:	d823      	bhi.n	193ae <__udivmoddi4+0x2de>
   19366:	4641      	mov	r1, r8
   19368:	1aad      	subs	r5, r5, r2
   1936a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1936e:	e726      	b.n	191be <__udivmoddi4+0xee>
   19370:	4631      	mov	r1, r6
   19372:	4630      	mov	r0, r6
   19374:	e6fa      	b.n	1916c <__udivmoddi4+0x9c>
   19376:	1a84      	subs	r4, r0, r2
   19378:	eb65 0303 	sbc.w	r3, r5, r3
   1937c:	2001      	movs	r0, #1
   1937e:	461f      	mov	r7, r3
   19380:	e70c      	b.n	1919c <__udivmoddi4+0xcc>
   19382:	4464      	add	r4, ip
   19384:	3802      	subs	r0, #2
   19386:	e74a      	b.n	1921e <__udivmoddi4+0x14e>
   19388:	4464      	add	r4, ip
   1938a:	3802      	subs	r0, #2
   1938c:	e6e4      	b.n	19158 <__udivmoddi4+0x88>
   1938e:	3a02      	subs	r2, #2
   19390:	4465      	add	r5, ip
   19392:	e72f      	b.n	191f4 <__udivmoddi4+0x124>
   19394:	3902      	subs	r1, #2
   19396:	4462      	add	r2, ip
   19398:	e6c9      	b.n	1912e <__udivmoddi4+0x5e>
   1939a:	f1a8 0802 	sub.w	r8, r8, #2
   1939e:	4465      	add	r5, ip
   193a0:	e770      	b.n	19284 <__udivmoddi4+0x1b4>
   193a2:	3802      	subs	r0, #2
   193a4:	4462      	add	r2, ip
   193a6:	e7cb      	b.n	19340 <__udivmoddi4+0x270>
   193a8:	3802      	subs	r0, #2
   193aa:	4465      	add	r5, ip
   193ac:	e77e      	b.n	192ac <__udivmoddi4+0x1dc>
   193ae:	3902      	subs	r1, #2
   193b0:	4465      	add	r5, ip
   193b2:	e7d9      	b.n	19368 <__udivmoddi4+0x298>
   193b4:	4631      	mov	r1, r6
   193b6:	e6d9      	b.n	1916c <__udivmoddi4+0x9c>

000193b8 <__aeabi_idiv0>:
   193b8:	4770      	bx	lr
   193ba:	bf00      	nop

000193bc <__gedf2>:
   193bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   193c0:	e006      	b.n	193d0 <__cmpdf2+0x4>
   193c2:	bf00      	nop

000193c4 <__ledf2>:
   193c4:	f04f 0c01 	mov.w	ip, #1
   193c8:	e002      	b.n	193d0 <__cmpdf2+0x4>
   193ca:	bf00      	nop

000193cc <__cmpdf2>:
   193cc:	f04f 0c01 	mov.w	ip, #1
   193d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   193d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   193d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   193dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   193e0:	bf18      	it	ne
   193e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   193e6:	d01b      	beq.n	19420 <__cmpdf2+0x54>
   193e8:	b001      	add	sp, #4
   193ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   193ee:	bf0c      	ite	eq
   193f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   193f4:	ea91 0f03 	teqne	r1, r3
   193f8:	bf02      	ittt	eq
   193fa:	ea90 0f02 	teqeq	r0, r2
   193fe:	2000      	moveq	r0, #0
   19400:	4770      	bxeq	lr
   19402:	f110 0f00 	cmn.w	r0, #0
   19406:	ea91 0f03 	teq	r1, r3
   1940a:	bf58      	it	pl
   1940c:	4299      	cmppl	r1, r3
   1940e:	bf08      	it	eq
   19410:	4290      	cmpeq	r0, r2
   19412:	bf2c      	ite	cs
   19414:	17d8      	asrcs	r0, r3, #31
   19416:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1941a:	f040 0001 	orr.w	r0, r0, #1
   1941e:	4770      	bx	lr
   19420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19428:	d102      	bne.n	19430 <__cmpdf2+0x64>
   1942a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1942e:	d107      	bne.n	19440 <__cmpdf2+0x74>
   19430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19438:	d1d6      	bne.n	193e8 <__cmpdf2+0x1c>
   1943a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1943e:	d0d3      	beq.n	193e8 <__cmpdf2+0x1c>
   19440:	f85d 0b04 	ldr.w	r0, [sp], #4
   19444:	4770      	bx	lr
   19446:	bf00      	nop

00019448 <__aeabi_cdrcmple>:
   19448:	4684      	mov	ip, r0
   1944a:	4610      	mov	r0, r2
   1944c:	4662      	mov	r2, ip
   1944e:	468c      	mov	ip, r1
   19450:	4619      	mov	r1, r3
   19452:	4663      	mov	r3, ip
   19454:	e000      	b.n	19458 <__aeabi_cdcmpeq>
   19456:	bf00      	nop

00019458 <__aeabi_cdcmpeq>:
   19458:	b501      	push	{r0, lr}
   1945a:	f7ff ffb7 	bl	193cc <__cmpdf2>
   1945e:	2800      	cmp	r0, #0
   19460:	bf48      	it	mi
   19462:	f110 0f00 	cmnmi.w	r0, #0
   19466:	bd01      	pop	{r0, pc}

00019468 <__aeabi_dcmpeq>:
   19468:	f84d ed08 	str.w	lr, [sp, #-8]!
   1946c:	f7ff fff4 	bl	19458 <__aeabi_cdcmpeq>
   19470:	bf0c      	ite	eq
   19472:	2001      	moveq	r0, #1
   19474:	2000      	movne	r0, #0
   19476:	f85d fb08 	ldr.w	pc, [sp], #8
   1947a:	bf00      	nop

0001947c <__aeabi_dcmplt>:
   1947c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19480:	f7ff ffea 	bl	19458 <__aeabi_cdcmpeq>
   19484:	bf34      	ite	cc
   19486:	2001      	movcc	r0, #1
   19488:	2000      	movcs	r0, #0
   1948a:	f85d fb08 	ldr.w	pc, [sp], #8
   1948e:	bf00      	nop

00019490 <__aeabi_dcmple>:
   19490:	f84d ed08 	str.w	lr, [sp, #-8]!
   19494:	f7ff ffe0 	bl	19458 <__aeabi_cdcmpeq>
   19498:	bf94      	ite	ls
   1949a:	2001      	movls	r0, #1
   1949c:	2000      	movhi	r0, #0
   1949e:	f85d fb08 	ldr.w	pc, [sp], #8
   194a2:	bf00      	nop

000194a4 <__aeabi_dcmpge>:
   194a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   194a8:	f7ff ffce 	bl	19448 <__aeabi_cdrcmple>
   194ac:	bf94      	ite	ls
   194ae:	2001      	movls	r0, #1
   194b0:	2000      	movhi	r0, #0
   194b2:	f85d fb08 	ldr.w	pc, [sp], #8
   194b6:	bf00      	nop

000194b8 <__aeabi_dcmpgt>:
   194b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   194bc:	f7ff ffc4 	bl	19448 <__aeabi_cdrcmple>
   194c0:	bf34      	ite	cc
   194c2:	2001      	movcc	r0, #1
   194c4:	2000      	movcs	r0, #0
   194c6:	f85d fb08 	ldr.w	pc, [sp], #8
   194ca:	bf00      	nop

000194cc <__aeabi_dcmpun>:
   194cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   194d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   194d4:	d102      	bne.n	194dc <__aeabi_dcmpun+0x10>
   194d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   194da:	d10a      	bne.n	194f2 <__aeabi_dcmpun+0x26>
   194dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   194e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   194e4:	d102      	bne.n	194ec <__aeabi_dcmpun+0x20>
   194e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   194ea:	d102      	bne.n	194f2 <__aeabi_dcmpun+0x26>
   194ec:	f04f 0000 	mov.w	r0, #0
   194f0:	4770      	bx	lr
   194f2:	f04f 0001 	mov.w	r0, #1
   194f6:	4770      	bx	lr

000194f8 <__aeabi_d2iz>:
   194f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   194fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   19500:	d215      	bcs.n	1952e <__aeabi_d2iz+0x36>
   19502:	d511      	bpl.n	19528 <__aeabi_d2iz+0x30>
   19504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   19508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1950c:	d912      	bls.n	19534 <__aeabi_d2iz+0x3c>
   1950e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1951a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1951e:	fa23 f002 	lsr.w	r0, r3, r2
   19522:	bf18      	it	ne
   19524:	4240      	negne	r0, r0
   19526:	4770      	bx	lr
   19528:	f04f 0000 	mov.w	r0, #0
   1952c:	4770      	bx	lr
   1952e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19532:	d105      	bne.n	19540 <__aeabi_d2iz+0x48>
   19534:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   19538:	bf08      	it	eq
   1953a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1953e:	4770      	bx	lr
   19540:	f04f 0000 	mov.w	r0, #0
   19544:	4770      	bx	lr
   19546:	bf00      	nop

00019548 <strcmp>:
   19548:	f810 2b01 	ldrb.w	r2, [r0], #1
   1954c:	f811 3b01 	ldrb.w	r3, [r1], #1
   19550:	2a01      	cmp	r2, #1
   19552:	bf28      	it	cs
   19554:	429a      	cmpcs	r2, r3
   19556:	d0f7      	beq.n	19548 <strcmp>
   19558:	1ad0      	subs	r0, r2, r3
   1955a:	4770      	bx	lr

0001955c <strlen>:
   1955c:	4603      	mov	r3, r0
   1955e:	f813 2b01 	ldrb.w	r2, [r3], #1
   19562:	2a00      	cmp	r2, #0
   19564:	d1fb      	bne.n	1955e <strlen+0x2>
   19566:	1a18      	subs	r0, r3, r0
   19568:	3801      	subs	r0, #1
   1956a:	4770      	bx	lr
   1956c:	0000      	movs	r0, r0
	...

00019570 <z_impl_clock_gettime>:
{
	uint64_t elapsed_nsecs;
	struct timespec base;
	k_spinlock_key_t key;

	switch (clock_id) {
   19570:	2801      	cmp	r0, #1
{
   19572:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19576:	460f      	mov	r7, r1
	switch (clock_id) {
   19578:	d009      	beq.n	1958e <z_impl_clock_gettime+0x1e>
   1957a:	2804      	cmp	r0, #4
   1957c:	d06e      	beq.n	1965c <z_impl_clock_gettime+0xec>
		base = rt_clock_base;
		k_spin_unlock(&rt_clock_base_lock, key);
		break;

	default:
		errno = EINVAL;
   1957e:	f012 fc31 	bl	2bde4 <__errno>
   19582:	2316      	movs	r3, #22
   19584:	6003      	str	r3, [r0, #0]
		return -1;
   19586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   1958a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1958e:	f04f 0320 	mov.w	r3, #32
   19592:	f3ef 8411 	mrs	r4, BASEPRI
   19596:	f383 8812 	msr	BASEPRI_MAX, r3
   1959a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1959e:	4834      	ldr	r0, [pc, #208]	; (19670 <z_impl_clock_gettime+0x100>)
   195a0:	f00c fe6c 	bl	2627c <z_spin_lock_valid>
   195a4:	b940      	cbnz	r0, 195b8 <z_impl_clock_gettime+0x48>
   195a6:	4933      	ldr	r1, [pc, #204]	; (19674 <z_impl_clock_gettime+0x104>)
   195a8:	4833      	ldr	r0, [pc, #204]	; (19678 <z_impl_clock_gettime+0x108>)
   195aa:	228e      	movs	r2, #142	; 0x8e
   195ac:	f012 f8fe 	bl	2b7ac <printk>
   195b0:	218e      	movs	r1, #142	; 0x8e
   195b2:	4830      	ldr	r0, [pc, #192]	; (19674 <z_impl_clock_gettime+0x104>)
   195b4:	f012 fa91 	bl	2bada <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   195b8:	482d      	ldr	r0, [pc, #180]	; (19670 <z_impl_clock_gettime+0x100>)
   195ba:	f00c fe7b 	bl	262b4 <z_spin_lock_set_owner>
		base = rt_clock_base;
   195be:	4b2f      	ldr	r3, [pc, #188]	; (1967c <z_impl_clock_gettime+0x10c>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195c0:	482b      	ldr	r0, [pc, #172]	; (19670 <z_impl_clock_gettime+0x100>)
   195c2:	689d      	ldr	r5, [r3, #8]
   195c4:	e9d3 6900 	ldrd	r6, r9, [r3]
   195c8:	f00c fe66 	bl	26298 <z_spin_unlock_valid>
   195cc:	b940      	cbnz	r0, 195e0 <z_impl_clock_gettime+0x70>
   195ce:	4929      	ldr	r1, [pc, #164]	; (19674 <z_impl_clock_gettime+0x104>)
   195d0:	4829      	ldr	r0, [pc, #164]	; (19678 <z_impl_clock_gettime+0x108>)
   195d2:	22b9      	movs	r2, #185	; 0xb9
   195d4:	f012 f8ea 	bl	2b7ac <printk>
   195d8:	21b9      	movs	r1, #185	; 0xb9
   195da:	4826      	ldr	r0, [pc, #152]	; (19674 <z_impl_clock_gettime+0x104>)
   195dc:	f012 fa7d 	bl	2bada <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   195e0:	f384 8811 	msr	BASEPRI, r4
   195e4:	f3bf 8f6f 	isb	sy
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   195e8:	f014 f9e6 	bl	2d9b8 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   195ec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 19680 <z_impl_clock_gettime+0x110>
   195f0:	f3c0 040e 	ubfx	r4, r0, #0, #15
   195f4:	0bc0      	lsrs	r0, r0, #15
   195f6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   195fa:	fba0 0a08 	umull	r0, sl, r0, r8
   195fe:	fba4 4308 	umull	r4, r3, r4, r8
   19602:	0bc9      	lsrs	r1, r1, #15
   19604:	fb08 a101 	mla	r1, r8, r1, sl
   19608:	0be4      	lsrs	r4, r4, #15
   1960a:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
   1960e:	1824      	adds	r4, r4, r0
   19610:	f141 0a00 	adc.w	sl, r1, #0
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   19614:	a314      	add	r3, pc, #80	; (adr r3, 19668 <z_impl_clock_gettime+0xf8>)
   19616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1961a:	4620      	mov	r0, r4
   1961c:	4651      	mov	r1, sl
   1961e:	f7ff fd3f 	bl	190a0 <__aeabi_uldivmod>
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   19622:	a311      	add	r3, pc, #68	; (adr r3, 19668 <z_impl_clock_gettime+0xf8>)
   19624:	e9d3 2300 	ldrd	r2, r3, [r3]
	ts->tv_sec += base.tv_sec;
   19628:	eb10 0b06 	adds.w	fp, r0, r6
   1962c:	eb49 76e0 	adc.w	r6, r9, r0, asr #31
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   19630:	4651      	mov	r1, sl
   19632:	4620      	mov	r0, r4
	ts->tv_sec += base.tv_sec;
   19634:	e9c7 b600 	strd	fp, r6, [r7]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   19638:	f7ff fd32 	bl	190a0 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1963c:	4b11      	ldr	r3, [pc, #68]	; (19684 <z_impl_clock_gettime+0x114>)
	ts->tv_nsec += base.tv_nsec;
   1963e:	4415      	add	r5, r2
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   19640:	429d      	cmp	r5, r3
	ts->tv_nsec += base.tv_nsec;
   19642:	60bd      	str	r5, [r7, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   19644:	d908      	bls.n	19658 <z_impl_clock_gettime+0xe8>
		ts->tv_sec++;
   19646:	f11b 0301 	adds.w	r3, fp, #1
   1964a:	f146 0600 	adc.w	r6, r6, #0
   1964e:	e9c7 3600 	strd	r3, r6, [r7]
		ts->tv_nsec -= NSEC_PER_SEC;
   19652:	eba5 0508 	sub.w	r5, r5, r8
   19656:	60bd      	str	r5, [r7, #8]
	return 0;
   19658:	2000      	movs	r0, #0
   1965a:	e796      	b.n	1958a <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   1965c:	2500      	movs	r5, #0
   1965e:	462e      	mov	r6, r5
   19660:	46a9      	mov	r9, r5
   19662:	e7c1      	b.n	195e8 <z_impl_clock_gettime+0x78>
   19664:	f3af 8000 	nop.w
   19668:	3b9aca00 	.word	0x3b9aca00
   1966c:	00000000 	.word	0x00000000
   19670:	2000cf10 	.word	0x2000cf10
   19674:	0002f2d0 	.word	0x0002f2d0
   19678:	0002f296 	.word	0x0002f296
   1967c:	2000caf8 	.word	0x2000caf8
   19680:	3b9aca00 	.word	0x3b9aca00
   19684:	3b9ac9ff 	.word	0x3b9ac9ff

00019688 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   19688:	2801      	cmp	r0, #1
{
   1968a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1968c:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   1968e:	d006      	beq.n	1969e <clock_settime+0x16>
		errno = EINVAL;
   19690:	f012 fba8 	bl	2bde4 <__errno>
   19694:	2316      	movs	r3, #22
   19696:	6003      	str	r3, [r0, #0]
		return -1;
   19698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   1969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1969e:	f014 f98b 	bl	2d9b8 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   196a2:	4a33      	ldr	r2, [pc, #204]	; (19770 <clock_settime+0xe8>)
   196a4:	6833      	ldr	r3, [r6, #0]
   196a6:	6874      	ldr	r4, [r6, #4]
   196a8:	fba3 3502 	umull	r3, r5, r3, r2
   196ac:	68b6      	ldr	r6, [r6, #8]
   196ae:	fb02 5504 	mla	r5, r2, r4, r5
   196b2:	199c      	adds	r4, r3, r6
   196b4:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   196b8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   196bc:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
   196c0:	fba3 3602 	umull	r3, r6, r3, r2
   196c4:	0bc9      	lsrs	r1, r1, #15
   196c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
   196ca:	fb02 6101 	mla	r1, r2, r1, r6
   196ce:	fba0 0202 	umull	r0, r2, r0, r2
		- elapsed_nsecs;
   196d2:	1ae4      	subs	r4, r4, r3
   196d4:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   196d8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   196dc:	eb65 0501 	sbc.w	r5, r5, r1
   196e0:	1ae4      	subs	r4, r4, r3
   196e2:	f165 0500 	sbc.w	r5, r5, #0
	base.tv_sec = delta / NSEC_PER_SEC;
   196e6:	4620      	mov	r0, r4
   196e8:	a31f      	add	r3, pc, #124	; (adr r3, 19768 <clock_settime+0xe0>)
   196ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   196ee:	4629      	mov	r1, r5
   196f0:	f7ff fc86 	bl	19000 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   196f4:	a31c      	add	r3, pc, #112	; (adr r3, 19768 <clock_settime+0xe0>)
   196f6:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   196fa:	4607      	mov	r7, r0
   196fc:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   196fe:	4620      	mov	r0, r4
   19700:	4629      	mov	r1, r5
   19702:	f7ff fc7d 	bl	19000 <__aeabi_ldivmod>
   19706:	4614      	mov	r4, r2
	__asm__ volatile(
   19708:	f04f 0320 	mov.w	r3, #32
   1970c:	f3ef 8511 	mrs	r5, BASEPRI
   19710:	f383 8812 	msr	BASEPRI_MAX, r3
   19714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19718:	4816      	ldr	r0, [pc, #88]	; (19774 <clock_settime+0xec>)
   1971a:	f00c fdaf 	bl	2627c <z_spin_lock_valid>
   1971e:	b940      	cbnz	r0, 19732 <clock_settime+0xaa>
   19720:	4915      	ldr	r1, [pc, #84]	; (19778 <clock_settime+0xf0>)
   19722:	4816      	ldr	r0, [pc, #88]	; (1977c <clock_settime+0xf4>)
   19724:	228e      	movs	r2, #142	; 0x8e
   19726:	f012 f841 	bl	2b7ac <printk>
   1972a:	218e      	movs	r1, #142	; 0x8e
   1972c:	4812      	ldr	r0, [pc, #72]	; (19778 <clock_settime+0xf0>)
   1972e:	f012 f9d4 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   19732:	4810      	ldr	r0, [pc, #64]	; (19774 <clock_settime+0xec>)
   19734:	f00c fdbe 	bl	262b4 <z_spin_lock_set_owner>
	rt_clock_base = base;
   19738:	4b11      	ldr	r3, [pc, #68]	; (19780 <clock_settime+0xf8>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1973a:	480e      	ldr	r0, [pc, #56]	; (19774 <clock_settime+0xec>)
   1973c:	e9c3 7600 	strd	r7, r6, [r3]
   19740:	609c      	str	r4, [r3, #8]
   19742:	f00c fda9 	bl	26298 <z_spin_unlock_valid>
   19746:	b940      	cbnz	r0, 1975a <clock_settime+0xd2>
   19748:	490b      	ldr	r1, [pc, #44]	; (19778 <clock_settime+0xf0>)
   1974a:	480c      	ldr	r0, [pc, #48]	; (1977c <clock_settime+0xf4>)
   1974c:	22b9      	movs	r2, #185	; 0xb9
   1974e:	f012 f82d 	bl	2b7ac <printk>
   19752:	21b9      	movs	r1, #185	; 0xb9
   19754:	4808      	ldr	r0, [pc, #32]	; (19778 <clock_settime+0xf0>)
   19756:	f012 f9c0 	bl	2bada <assert_post_action>
	__asm__ volatile(
   1975a:	f385 8811 	msr	BASEPRI, r5
   1975e:	f3bf 8f6f 	isb	sy
	return 0;
   19762:	2000      	movs	r0, #0
   19764:	e79a      	b.n	1969c <clock_settime+0x14>
   19766:	bf00      	nop
   19768:	3b9aca00 	.word	0x3b9aca00
   1976c:	00000000 	.word	0x00000000
   19770:	3b9aca00 	.word	0x3b9aca00
   19774:	2000cf10 	.word	0x2000cf10
   19778:	0002f2d0 	.word	0x0002f2d0
   1977c:	0002f296 	.word	0x0002f296
   19780:	2000caf8 	.word	0x2000caf8
   19784:	00000000 	.word	0x00000000

00019788 <parse_edrx>:

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   19788:	2300      	movs	r3, #0
{
   1978a:	b570      	push	{r4, r5, r6, lr}
   1978c:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   1978e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   19792:	2304      	movs	r3, #4
{
   19794:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   19796:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   19798:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1979a:	2800      	cmp	r0, #0
   1979c:	f000 809e 	beq.w	198dc <parse_edrx+0x154>
   197a0:	2900      	cmp	r1, #0
   197a2:	f000 809b 	beq.w	198dc <parse_edrx+0x154>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   197a6:	2106      	movs	r1, #6
   197a8:	a804      	add	r0, sp, #16
   197aa:	f012 fe58 	bl	2c45e <at_params_list_init>
	if (err) {
   197ae:	4604      	mov	r4, r0
   197b0:	b138      	cbz	r0, 197c2 <parse_edrx+0x3a>
		LOG_ERR("Could not init AT params list, error: %d", err);
   197b2:	4602      	mov	r2, r0
   197b4:	2145      	movs	r1, #69	; 0x45
   197b6:	484e      	ldr	r0, [pc, #312]	; (198f0 <parse_edrx+0x168>)
   197b8:	f012 f9a9 	bl	2bb0e <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   197bc:	4620      	mov	r0, r4
   197be:	b006      	add	sp, #24
   197c0:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   197c2:	4601      	mov	r1, r0
   197c4:	aa04      	add	r2, sp, #16
   197c6:	4630      	mov	r0, r6
   197c8:	f012 fe46 	bl	2c458 <at_parser_params_from_str>
	if (err) {
   197cc:	4604      	mov	r4, r0
   197ce:	b140      	cbz	r0, 197e2 <parse_edrx+0x5a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   197d0:	2145      	movs	r1, #69	; 0x45
   197d2:	4602      	mov	r2, r0
   197d4:	4847      	ldr	r0, [pc, #284]	; (198f4 <parse_edrx+0x16c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   197d6:	f012 f99a 	bl	2bb0e <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   197da:	a804      	add	r0, sp, #16
   197dc:	f012 fe52 	bl	2c484 <at_params_list_free>
	return err;
   197e0:	e7ec      	b.n	197bc <parse_edrx+0x34>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   197e2:	2103      	movs	r1, #3
   197e4:	ab01      	add	r3, sp, #4
   197e6:	aa02      	add	r2, sp, #8
   197e8:	a804      	add	r0, sp, #16
   197ea:	f012 ff44 	bl	2c676 <at_params_string_get>
	if (err) {
   197ee:	4604      	mov	r4, r0
   197f0:	b118      	cbz	r0, 197fa <parse_edrx+0x72>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   197f2:	4602      	mov	r2, r0
   197f4:	2145      	movs	r1, #69	; 0x45
   197f6:	4840      	ldr	r0, [pc, #256]	; (198f8 <parse_edrx+0x170>)
   197f8:	e7ed      	b.n	197d6 <parse_edrx+0x4e>
	tmp_buf[len] = '\0';
   197fa:	9b01      	ldr	r3, [sp, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   197fc:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   197fe:	3318      	adds	r3, #24
   19800:	446b      	add	r3, sp
   19802:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   19806:	2202      	movs	r2, #2
   19808:	a802      	add	r0, sp, #8
   1980a:	f010 f92d 	bl	29a68 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1980e:	466a      	mov	r2, sp
   19810:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   19812:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   19814:	a804      	add	r0, sp, #16
   19816:	f012 fef9 	bl	2c60c <at_params_int_get>
	if (err) {
   1981a:	4604      	mov	r4, r0
   1981c:	b118      	cbz	r0, 19826 <parse_edrx+0x9e>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1981e:	4602      	mov	r2, r0
   19820:	2145      	movs	r1, #69	; 0x45
   19822:	4836      	ldr	r0, [pc, #216]	; (198fc <parse_edrx+0x174>)
   19824:	e7d7      	b.n	197d6 <parse_edrx+0x4e>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19826:	9b00      	ldr	r3, [sp, #0]
   19828:	2b04      	cmp	r3, #4
   1982a:	d016      	beq.n	1985a <parse_edrx+0xd2>
   1982c:	2b05      	cmp	r3, #5
   1982e:	d007      	beq.n	19840 <parse_edrx+0xb8>
   19830:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   19832:	2157      	movs	r1, #87	; 0x57
   19834:	4832      	ldr	r0, [pc, #200]	; (19900 <parse_edrx+0x178>)
   19836:	f012 f96a 	bl	2bb0e <z_log_minimal_printk>
		return -ENOTCONN;
   1983a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1983e:	e7cc      	b.n	197da <parse_edrx+0x52>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19840:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19842:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   19844:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19846:	d929      	bls.n	1989c <parse_edrx+0x114>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   19848:	f06f 0215 	mvn.w	r2, #21
   1984c:	2145      	movs	r1, #69	; 0x45
   1984e:	482d      	ldr	r0, [pc, #180]	; (19904 <parse_edrx+0x17c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   19850:	f012 f95d 	bl	2bb0e <z_log_minimal_printk>
		err = -EINVAL;
   19854:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   19858:	e7bf      	b.n	197da <parse_edrx+0x52>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1985a:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1985c:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1985e:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   19860:	d8f2      	bhi.n	19848 <parse_edrx+0xc0>
		multiplier = edrx_lookup_ltem[idx];
   19862:	4b29      	ldr	r3, [pc, #164]	; (19908 <parse_edrx+0x180>)
   19864:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 1.28;
   19868:	4e28      	ldr	r6, [pc, #160]	; (1990c <parse_edrx+0x184>)
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1986a:	b1e0      	cbz	r0, 198a6 <parse_edrx+0x11e>
   1986c:	f7fe ffee 	bl	1884c <__aeabi_i2d>
   19870:	a31d      	add	r3, pc, #116	; (adr r3, 198e8 <parse_edrx+0x160>)
   19872:	e9d3 2300 	ldrd	r2, r3, [r3]
   19876:	f7ff f853 	bl	18920 <__aeabi_dmul>
   1987a:	f7ff fa63 	bl	18d44 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1987e:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   19880:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   19882:	eb0d 0301 	add.w	r3, sp, r1
   19886:	aa02      	add	r2, sp, #8
   19888:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1988a:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1988c:	f012 fef3 	bl	2c676 <at_params_string_get>
	if (err) {
   19890:	4604      	mov	r4, r0
   19892:	b150      	cbz	r0, 198aa <parse_edrx+0x122>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   19894:	4602      	mov	r2, r0
   19896:	2145      	movs	r1, #69	; 0x45
   19898:	481d      	ldr	r0, [pc, #116]	; (19910 <parse_edrx+0x188>)
   1989a:	e79c      	b.n	197d6 <parse_edrx+0x4e>
		multiplier = edrx_lookup_nbiot[idx];
   1989c:	4b1d      	ldr	r3, [pc, #116]	; (19914 <parse_edrx+0x18c>)
   1989e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		*ptw_multiplier = 2.56;
   198a2:	4e1d      	ldr	r6, [pc, #116]	; (19918 <parse_edrx+0x190>)
		break;
   198a4:	e7e1      	b.n	1986a <parse_edrx+0xe2>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   198a6:	481d      	ldr	r0, [pc, #116]	; (1991c <parse_edrx+0x194>)
   198a8:	e7e9      	b.n	1987e <parse_edrx+0xf6>
	tmp_buf[len] = '\0';
   198aa:	9b01      	ldr	r3, [sp, #4]
	idx = strtoul(tmp_buf, NULL, 2);
   198ac:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   198ae:	3318      	adds	r3, #24
   198b0:	446b      	add	r3, sp
	idx = strtoul(tmp_buf, NULL, 2);
   198b2:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   198b4:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   198b8:	a802      	add	r0, sp, #8
   198ba:	f010 f8d5 	bl	29a68 <strtoul>
   198be:	b2c2      	uxtb	r2, r0
	if (idx > 15) {
   198c0:	2a0f      	cmp	r2, #15
   198c2:	d902      	bls.n	198ca <parse_edrx+0x142>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   198c4:	2145      	movs	r1, #69	; 0x45
   198c6:	4816      	ldr	r0, [pc, #88]	; (19920 <parse_edrx+0x198>)
   198c8:	e7c2      	b.n	19850 <parse_edrx+0xc8>
	idx += 1;
   198ca:	1c50      	adds	r0, r2, #1
	cfg->ptw = idx * ptw_multiplier;
   198cc:	b2c0      	uxtb	r0, r0
   198ce:	f7ff fb43 	bl	18f58 <__aeabi_i2f>
   198d2:	4631      	mov	r1, r6
   198d4:	f7fe fdb4 	bl	18440 <__aeabi_fmul>
   198d8:	60a8      	str	r0, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   198da:	e77e      	b.n	197da <parse_edrx+0x52>
		return -EINVAL;
   198dc:	f06f 0415 	mvn.w	r4, #21
   198e0:	e76c      	b.n	197bc <parse_edrx+0x34>
   198e2:	bf00      	nop
   198e4:	f3af 8000 	nop.w
   198e8:	47ae147b 	.word	0x47ae147b
   198ec:	40247ae1 	.word	0x40247ae1
   198f0:	00030a49 	.word	0x00030a49
   198f4:	00030a77 	.word	0x00030a77
   198f8:	00030aa8 	.word	0x00030aa8
   198fc:	00030ad9 	.word	0x00030ad9
   19900:	00030b00 	.word	0x00030b00
   19904:	00030b2d 	.word	0x00030b2d
   19908:	0002ef84 	.word	0x0002ef84
   1990c:	3fa3d70a 	.word	0x3fa3d70a
   19910:	00030b56 	.word	0x00030b56
   19914:	0002efa4 	.word	0x0002efa4
   19918:	4023d70a 	.word	0x4023d70a
   1991c:	40a3d70a 	.word	0x40a3d70a
   19920:	00030b86 	.word	0x00030b86
   19924:	00000000 	.word	0x00000000

00019928 <_dtoa_r>:
   19928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1992c:	4616      	mov	r6, r2
   1992e:	b099      	sub	sp, #100	; 0x64
   19930:	461f      	mov	r7, r3
   19932:	6a44      	ldr	r4, [r0, #36]	; 0x24
   19934:	4605      	mov	r5, r0
   19936:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   1993a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1993e:	b974      	cbnz	r4, 1995e <_dtoa_r+0x36>
   19940:	2010      	movs	r0, #16
   19942:	f00f fa81 	bl	28e48 <malloc>
   19946:	4602      	mov	r2, r0
   19948:	6268      	str	r0, [r5, #36]	; 0x24
   1994a:	b920      	cbnz	r0, 19956 <_dtoa_r+0x2e>
   1994c:	4ba8      	ldr	r3, [pc, #672]	; (19bf0 <_dtoa_r+0x2c8>)
   1994e:	21ea      	movs	r1, #234	; 0xea
   19950:	48a8      	ldr	r0, [pc, #672]	; (19bf4 <_dtoa_r+0x2cc>)
   19952:	f010 fb23 	bl	29f9c <__assert_func>
   19956:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1995a:	6004      	str	r4, [r0, #0]
   1995c:	60c4      	str	r4, [r0, #12]
   1995e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19960:	6819      	ldr	r1, [r3, #0]
   19962:	b151      	cbz	r1, 1997a <_dtoa_r+0x52>
   19964:	685a      	ldr	r2, [r3, #4]
   19966:	2301      	movs	r3, #1
   19968:	4628      	mov	r0, r5
   1996a:	4093      	lsls	r3, r2
   1996c:	604a      	str	r2, [r1, #4]
   1996e:	608b      	str	r3, [r1, #8]
   19970:	f010 fbf6 	bl	2a160 <_Bfree>
   19974:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19976:	2200      	movs	r2, #0
   19978:	601a      	str	r2, [r3, #0]
   1997a:	1e3b      	subs	r3, r7, #0
   1997c:	bfb7      	itett	lt
   1997e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   19982:	2300      	movge	r3, #0
   19984:	2201      	movlt	r2, #1
   19986:	9305      	strlt	r3, [sp, #20]
   19988:	bfa8      	it	ge
   1998a:	f8c8 3000 	strge.w	r3, [r8]
   1998e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   19992:	4b99      	ldr	r3, [pc, #612]	; (19bf8 <_dtoa_r+0x2d0>)
   19994:	bfb8      	it	lt
   19996:	f8c8 2000 	strlt.w	r2, [r8]
   1999a:	ea33 0309 	bics.w	r3, r3, r9
   1999e:	d119      	bne.n	199d4 <_dtoa_r+0xac>
   199a0:	f242 730f 	movw	r3, #9999	; 0x270f
   199a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   199a6:	6013      	str	r3, [r2, #0]
   199a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
   199ac:	4333      	orrs	r3, r6
   199ae:	f000 857e 	beq.w	1a4ae <_flash_used+0x2ca>
   199b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   199b4:	b953      	cbnz	r3, 199cc <_dtoa_r+0xa4>
   199b6:	4b91      	ldr	r3, [pc, #580]	; (19bfc <_dtoa_r+0x2d4>)
   199b8:	e022      	b.n	19a00 <_dtoa_r+0xd8>
   199ba:	4b91      	ldr	r3, [pc, #580]	; (19c00 <_dtoa_r+0x2d8>)
   199bc:	9303      	str	r3, [sp, #12]
   199be:	3308      	adds	r3, #8
   199c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   199c2:	6013      	str	r3, [r2, #0]
   199c4:	9803      	ldr	r0, [sp, #12]
   199c6:	b019      	add	sp, #100	; 0x64
   199c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199cc:	4b8b      	ldr	r3, [pc, #556]	; (19bfc <_dtoa_r+0x2d4>)
   199ce:	9303      	str	r3, [sp, #12]
   199d0:	3303      	adds	r3, #3
   199d2:	e7f5      	b.n	199c0 <_dtoa_r+0x98>
   199d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   199d8:	2200      	movs	r2, #0
   199da:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   199de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   199e2:	2300      	movs	r3, #0
   199e4:	f7ff fd40 	bl	19468 <__aeabi_dcmpeq>
   199e8:	4680      	mov	r8, r0
   199ea:	b158      	cbz	r0, 19a04 <_dtoa_r+0xdc>
   199ec:	2301      	movs	r3, #1
   199ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
   199f0:	6013      	str	r3, [r2, #0]
   199f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   199f4:	2b00      	cmp	r3, #0
   199f6:	f000 8557 	beq.w	1a4a8 <_flash_used+0x2c4>
   199fa:	4882      	ldr	r0, [pc, #520]	; (19c04 <_dtoa_r+0x2dc>)
   199fc:	6018      	str	r0, [r3, #0]
   199fe:	1e43      	subs	r3, r0, #1
   19a00:	9303      	str	r3, [sp, #12]
   19a02:	e7df      	b.n	199c4 <_dtoa_r+0x9c>
   19a04:	ab16      	add	r3, sp, #88	; 0x58
   19a06:	f3c9 540a 	ubfx	r4, r9, #20, #11
   19a0a:	4628      	mov	r0, r5
   19a0c:	9301      	str	r3, [sp, #4]
   19a0e:	ab17      	add	r3, sp, #92	; 0x5c
   19a10:	9300      	str	r3, [sp, #0]
   19a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   19a16:	f010 fe23 	bl	2a660 <__d2b>
   19a1a:	4683      	mov	fp, r0
   19a1c:	2c00      	cmp	r4, #0
   19a1e:	d07c      	beq.n	19b1a <_dtoa_r+0x1f2>
   19a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a22:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   19a26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   19a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   19a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19a32:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   19a36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   19a3a:	2200      	movs	r2, #0
   19a3c:	4b72      	ldr	r3, [pc, #456]	; (19c08 <_dtoa_r+0x2e0>)
   19a3e:	f7fe fdb7 	bl	185b0 <__aeabi_dsub>
   19a42:	a365      	add	r3, pc, #404	; (adr r3, 19bd8 <_dtoa_r+0x2b0>)
   19a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a48:	f7fe ff6a 	bl	18920 <__aeabi_dmul>
   19a4c:	a364      	add	r3, pc, #400	; (adr r3, 19be0 <_dtoa_r+0x2b8>)
   19a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a52:	f7fe fdaf 	bl	185b4 <__adddf3>
   19a56:	4606      	mov	r6, r0
   19a58:	460f      	mov	r7, r1
   19a5a:	4620      	mov	r0, r4
   19a5c:	f7fe fef6 	bl	1884c <__aeabi_i2d>
   19a60:	a361      	add	r3, pc, #388	; (adr r3, 19be8 <_dtoa_r+0x2c0>)
   19a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a66:	f7fe ff5b 	bl	18920 <__aeabi_dmul>
   19a6a:	4602      	mov	r2, r0
   19a6c:	460b      	mov	r3, r1
   19a6e:	4630      	mov	r0, r6
   19a70:	4639      	mov	r1, r7
   19a72:	f7fe fd9f 	bl	185b4 <__adddf3>
   19a76:	4606      	mov	r6, r0
   19a78:	460f      	mov	r7, r1
   19a7a:	f7ff fd3d 	bl	194f8 <__aeabi_d2iz>
   19a7e:	2200      	movs	r2, #0
   19a80:	4682      	mov	sl, r0
   19a82:	2300      	movs	r3, #0
   19a84:	4630      	mov	r0, r6
   19a86:	4639      	mov	r1, r7
   19a88:	f7ff fcf8 	bl	1947c <__aeabi_dcmplt>
   19a8c:	b148      	cbz	r0, 19aa2 <_dtoa_r+0x17a>
   19a8e:	4650      	mov	r0, sl
   19a90:	f7fe fedc 	bl	1884c <__aeabi_i2d>
   19a94:	4632      	mov	r2, r6
   19a96:	463b      	mov	r3, r7
   19a98:	f7ff fce6 	bl	19468 <__aeabi_dcmpeq>
   19a9c:	b908      	cbnz	r0, 19aa2 <_dtoa_r+0x17a>
   19a9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   19aa2:	f1ba 0f16 	cmp.w	sl, #22
   19aa6:	d856      	bhi.n	19b56 <_dtoa_r+0x22e>
   19aa8:	4b58      	ldr	r3, [pc, #352]	; (19c0c <_dtoa_r+0x2e4>)
   19aaa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   19aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ab6:	f7ff fce1 	bl	1947c <__aeabi_dcmplt>
   19aba:	2800      	cmp	r0, #0
   19abc:	d04d      	beq.n	19b5a <_dtoa_r+0x232>
   19abe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   19ac2:	2300      	movs	r3, #0
   19ac4:	930f      	str	r3, [sp, #60]	; 0x3c
   19ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19ac8:	1b1c      	subs	r4, r3, r4
   19aca:	1e63      	subs	r3, r4, #1
   19acc:	9309      	str	r3, [sp, #36]	; 0x24
   19ace:	bf49      	itett	mi
   19ad0:	f1c4 0301 	rsbmi	r3, r4, #1
   19ad4:	2300      	movpl	r3, #0
   19ad6:	9306      	strmi	r3, [sp, #24]
   19ad8:	2300      	movmi	r3, #0
   19ada:	bf54      	ite	pl
   19adc:	9306      	strpl	r3, [sp, #24]
   19ade:	9309      	strmi	r3, [sp, #36]	; 0x24
   19ae0:	f1ba 0f00 	cmp.w	sl, #0
   19ae4:	db3b      	blt.n	19b5e <_dtoa_r+0x236>
   19ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ae8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   19aec:	4453      	add	r3, sl
   19aee:	9309      	str	r3, [sp, #36]	; 0x24
   19af0:	2300      	movs	r3, #0
   19af2:	930a      	str	r3, [sp, #40]	; 0x28
   19af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19af6:	2b09      	cmp	r3, #9
   19af8:	f200 808c 	bhi.w	19c14 <_dtoa_r+0x2ec>
   19afc:	2b05      	cmp	r3, #5
   19afe:	bfc5      	ittet	gt
   19b00:	3b04      	subgt	r3, #4
   19b02:	2400      	movgt	r4, #0
   19b04:	2401      	movle	r4, #1
   19b06:	9322      	strgt	r3, [sp, #136]	; 0x88
   19b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19b0a:	3b02      	subs	r3, #2
   19b0c:	2b03      	cmp	r3, #3
   19b0e:	f200 808d 	bhi.w	19c2c <_dtoa_r+0x304>
   19b12:	e8df f003 	tbb	[pc, r3]
   19b16:	502e      	.short	0x502e
   19b18:	5c4e      	.short	0x5c4e
   19b1a:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   19b1e:	441c      	add	r4, r3
   19b20:	f204 4332 	addw	r3, r4, #1074	; 0x432
   19b24:	2b20      	cmp	r3, #32
   19b26:	bfc6      	itte	gt
   19b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   19b2c:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   19b30:	f1c3 0320 	rsble	r3, r3, #32
   19b34:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   19b38:	bfc5      	ittet	gt
   19b3a:	fa09 f303 	lslgt.w	r3, r9, r3
   19b3e:	fa26 f000 	lsrgt.w	r0, r6, r0
   19b42:	fa06 f003 	lslle.w	r0, r6, r3
   19b46:	4318      	orrgt	r0, r3
   19b48:	f7fe fe70 	bl	1882c <__aeabi_ui2d>
   19b4c:	2301      	movs	r3, #1
   19b4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   19b52:	9313      	str	r3, [sp, #76]	; 0x4c
   19b54:	e771      	b.n	19a3a <_dtoa_r+0x112>
   19b56:	2301      	movs	r3, #1
   19b58:	e7b4      	b.n	19ac4 <_dtoa_r+0x19c>
   19b5a:	900f      	str	r0, [sp, #60]	; 0x3c
   19b5c:	e7b3      	b.n	19ac6 <_dtoa_r+0x19e>
   19b5e:	9b06      	ldr	r3, [sp, #24]
   19b60:	eba3 030a 	sub.w	r3, r3, sl
   19b64:	9306      	str	r3, [sp, #24]
   19b66:	f1ca 0300 	rsb	r3, sl, #0
   19b6a:	930a      	str	r3, [sp, #40]	; 0x28
   19b6c:	2300      	movs	r3, #0
   19b6e:	930e      	str	r3, [sp, #56]	; 0x38
   19b70:	e7c0      	b.n	19af4 <_dtoa_r+0x1cc>
   19b72:	2300      	movs	r3, #0
   19b74:	930b      	str	r3, [sp, #44]	; 0x2c
   19b76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19b78:	2b00      	cmp	r3, #0
   19b7a:	dc5a      	bgt.n	19c32 <_dtoa_r+0x30a>
   19b7c:	f04f 0901 	mov.w	r9, #1
   19b80:	464b      	mov	r3, r9
   19b82:	f8cd 9020 	str.w	r9, [sp, #32]
   19b86:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   19b8a:	2200      	movs	r2, #0
   19b8c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   19b8e:	6042      	str	r2, [r0, #4]
   19b90:	2204      	movs	r2, #4
   19b92:	f102 0614 	add.w	r6, r2, #20
   19b96:	6841      	ldr	r1, [r0, #4]
   19b98:	429e      	cmp	r6, r3
   19b9a:	d950      	bls.n	19c3e <_dtoa_r+0x316>
   19b9c:	4628      	mov	r0, r5
   19b9e:	f010 fa9f 	bl	2a0e0 <_Balloc>
   19ba2:	9003      	str	r0, [sp, #12]
   19ba4:	2800      	cmp	r0, #0
   19ba6:	d14e      	bne.n	19c46 <_dtoa_r+0x31e>
   19ba8:	4b19      	ldr	r3, [pc, #100]	; (19c10 <_dtoa_r+0x2e8>)
   19baa:	4602      	mov	r2, r0
   19bac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   19bb0:	e6ce      	b.n	19950 <_dtoa_r+0x28>
   19bb2:	2301      	movs	r3, #1
   19bb4:	e7de      	b.n	19b74 <_dtoa_r+0x24c>
   19bb6:	2300      	movs	r3, #0
   19bb8:	930b      	str	r3, [sp, #44]	; 0x2c
   19bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19bbc:	eb0a 0903 	add.w	r9, sl, r3
   19bc0:	f109 0301 	add.w	r3, r9, #1
   19bc4:	2b01      	cmp	r3, #1
   19bc6:	9308      	str	r3, [sp, #32]
   19bc8:	bfb8      	it	lt
   19bca:	2301      	movlt	r3, #1
   19bcc:	e7dd      	b.n	19b8a <_dtoa_r+0x262>
   19bce:	2301      	movs	r3, #1
   19bd0:	e7f2      	b.n	19bb8 <_dtoa_r+0x290>
   19bd2:	bf00      	nop
   19bd4:	f3af 8000 	nop.w
   19bd8:	636f4361 	.word	0x636f4361
   19bdc:	3fd287a7 	.word	0x3fd287a7
   19be0:	8b60c8b3 	.word	0x8b60c8b3
   19be4:	3fc68a28 	.word	0x3fc68a28
   19be8:	509f79fb 	.word	0x509f79fb
   19bec:	3fd34413 	.word	0x3fd34413
   19bf0:	00031b3d 	.word	0x00031b3d
   19bf4:	00031c8a 	.word	0x00031c8a
   19bf8:	7ff00000 	.word	0x7ff00000
   19bfc:	00031c86 	.word	0x00031c86
   19c00:	00031c7d 	.word	0x00031c7d
   19c04:	000309e9 	.word	0x000309e9
   19c08:	3ff80000 	.word	0x3ff80000
   19c0c:	0002eac0 	.word	0x0002eac0
   19c10:	00031d08 	.word	0x00031d08
   19c14:	2401      	movs	r4, #1
   19c16:	2300      	movs	r3, #0
   19c18:	940b      	str	r4, [sp, #44]	; 0x2c
   19c1a:	9322      	str	r3, [sp, #136]	; 0x88
   19c1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   19c20:	2200      	movs	r2, #0
   19c22:	2312      	movs	r3, #18
   19c24:	f8cd 9020 	str.w	r9, [sp, #32]
   19c28:	9223      	str	r2, [sp, #140]	; 0x8c
   19c2a:	e7ae      	b.n	19b8a <_dtoa_r+0x262>
   19c2c:	2301      	movs	r3, #1
   19c2e:	930b      	str	r3, [sp, #44]	; 0x2c
   19c30:	e7f4      	b.n	19c1c <_dtoa_r+0x2f4>
   19c32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   19c36:	464b      	mov	r3, r9
   19c38:	f8cd 9020 	str.w	r9, [sp, #32]
   19c3c:	e7a5      	b.n	19b8a <_dtoa_r+0x262>
   19c3e:	3101      	adds	r1, #1
   19c40:	0052      	lsls	r2, r2, #1
   19c42:	6041      	str	r1, [r0, #4]
   19c44:	e7a5      	b.n	19b92 <_dtoa_r+0x26a>
   19c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19c48:	9a03      	ldr	r2, [sp, #12]
   19c4a:	601a      	str	r2, [r3, #0]
   19c4c:	9b08      	ldr	r3, [sp, #32]
   19c4e:	2b0e      	cmp	r3, #14
   19c50:	f200 80a8 	bhi.w	19da4 <_dtoa_r+0x47c>
   19c54:	2c00      	cmp	r4, #0
   19c56:	f000 80a5 	beq.w	19da4 <_dtoa_r+0x47c>
   19c5a:	f1ba 0f00 	cmp.w	sl, #0
   19c5e:	dd34      	ble.n	19cca <_dtoa_r+0x3a2>
   19c60:	f00a 030f 	and.w	r3, sl, #15
   19c64:	4a99      	ldr	r2, [pc, #612]	; (19ecc <_dtoa_r+0x5a4>)
   19c66:	f41a 7f80 	tst.w	sl, #256	; 0x100
   19c6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
   19c72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   19c76:	ea4f 142a 	mov.w	r4, sl, asr #4
   19c7a:	d016      	beq.n	19caa <_dtoa_r+0x382>
   19c7c:	4b94      	ldr	r3, [pc, #592]	; (19ed0 <_dtoa_r+0x5a8>)
   19c7e:	f004 040f 	and.w	r4, r4, #15
   19c82:	2703      	movs	r7, #3
   19c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   19c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19c8c:	f7fe ff72 	bl	18b74 <__aeabi_ddiv>
   19c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19c94:	4e8e      	ldr	r6, [pc, #568]	; (19ed0 <_dtoa_r+0x5a8>)
   19c96:	b954      	cbnz	r4, 19cae <_dtoa_r+0x386>
   19c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19ca0:	f7fe ff68 	bl	18b74 <__aeabi_ddiv>
   19ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19ca8:	e029      	b.n	19cfe <_dtoa_r+0x3d6>
   19caa:	2702      	movs	r7, #2
   19cac:	e7f2      	b.n	19c94 <_dtoa_r+0x36c>
   19cae:	07e1      	lsls	r1, r4, #31
   19cb0:	d508      	bpl.n	19cc4 <_dtoa_r+0x39c>
   19cb2:	3701      	adds	r7, #1
   19cb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19cb8:	e9d6 2300 	ldrd	r2, r3, [r6]
   19cbc:	f7fe fe30 	bl	18920 <__aeabi_dmul>
   19cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19cc4:	1064      	asrs	r4, r4, #1
   19cc6:	3608      	adds	r6, #8
   19cc8:	e7e5      	b.n	19c96 <_dtoa_r+0x36e>
   19cca:	f000 80a5 	beq.w	19e18 <_dtoa_r+0x4f0>
   19cce:	f1ca 0400 	rsb	r4, sl, #0
   19cd2:	4b7e      	ldr	r3, [pc, #504]	; (19ecc <_dtoa_r+0x5a4>)
   19cd4:	4e7e      	ldr	r6, [pc, #504]	; (19ed0 <_dtoa_r+0x5a8>)
   19cd6:	2702      	movs	r7, #2
   19cd8:	f004 020f 	and.w	r2, r4, #15
   19cdc:	1124      	asrs	r4, r4, #4
   19cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   19ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19cea:	f7fe fe19 	bl	18920 <__aeabi_dmul>
   19cee:	2300      	movs	r3, #0
   19cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19cf4:	2c00      	cmp	r4, #0
   19cf6:	f040 8084 	bne.w	19e02 <_dtoa_r+0x4da>
   19cfa:	2b00      	cmp	r3, #0
   19cfc:	d1d2      	bne.n	19ca4 <_dtoa_r+0x37c>
   19cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19d00:	2b00      	cmp	r3, #0
   19d02:	f000 808b 	beq.w	19e1c <_dtoa_r+0x4f4>
   19d06:	2200      	movs	r2, #0
   19d08:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   19d0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   19d10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19d14:	4b6f      	ldr	r3, [pc, #444]	; (19ed4 <_dtoa_r+0x5ac>)
   19d16:	f7ff fbb1 	bl	1947c <__aeabi_dcmplt>
   19d1a:	2800      	cmp	r0, #0
   19d1c:	d07e      	beq.n	19e1c <_dtoa_r+0x4f4>
   19d1e:	9b08      	ldr	r3, [sp, #32]
   19d20:	2b00      	cmp	r3, #0
   19d22:	d07b      	beq.n	19e1c <_dtoa_r+0x4f4>
   19d24:	f1b9 0f00 	cmp.w	r9, #0
   19d28:	dd38      	ble.n	19d9c <_dtoa_r+0x474>
   19d2a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   19d2e:	3701      	adds	r7, #1
   19d30:	464c      	mov	r4, r9
   19d32:	2200      	movs	r2, #0
   19d34:	4b68      	ldr	r3, [pc, #416]	; (19ed8 <_dtoa_r+0x5b0>)
   19d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19d3a:	f7fe fdf1 	bl	18920 <__aeabi_dmul>
   19d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19d42:	4638      	mov	r0, r7
   19d44:	f7fe fd82 	bl	1884c <__aeabi_i2d>
   19d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19d4c:	f7fe fde8 	bl	18920 <__aeabi_dmul>
   19d50:	2200      	movs	r2, #0
   19d52:	4b62      	ldr	r3, [pc, #392]	; (19edc <_dtoa_r+0x5b4>)
   19d54:	f7fe fc2e 	bl	185b4 <__adddf3>
   19d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   19d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19d60:	9611      	str	r6, [sp, #68]	; 0x44
   19d62:	2c00      	cmp	r4, #0
   19d64:	d15d      	bne.n	19e22 <_dtoa_r+0x4fa>
   19d66:	2200      	movs	r2, #0
   19d68:	4b5d      	ldr	r3, [pc, #372]	; (19ee0 <_dtoa_r+0x5b8>)
   19d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19d6e:	f7fe fc1f 	bl	185b0 <__aeabi_dsub>
   19d72:	4602      	mov	r2, r0
   19d74:	460b      	mov	r3, r1
   19d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19d7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19d7c:	4633      	mov	r3, r6
   19d7e:	f7ff fb9b 	bl	194b8 <__aeabi_dcmpgt>
   19d82:	2800      	cmp	r0, #0
   19d84:	f040 829b 	bne.w	1a2be <_flash_used+0xda>
   19d88:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19d8a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   19d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19d92:	f7ff fb73 	bl	1947c <__aeabi_dcmplt>
   19d96:	2800      	cmp	r0, #0
   19d98:	f040 828f 	bne.w	1a2ba <_flash_used+0xd6>
   19d9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   19da0:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19da6:	2b00      	cmp	r3, #0
   19da8:	f2c0 8151 	blt.w	1a04e <_dtoa_r+0x726>
   19dac:	f1ba 0f0e 	cmp.w	sl, #14
   19db0:	f300 814d 	bgt.w	1a04e <_dtoa_r+0x726>
   19db4:	4b45      	ldr	r3, [pc, #276]	; (19ecc <_dtoa_r+0x5a4>)
   19db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   19dba:	e9d3 3400 	ldrd	r3, r4, [r3]
   19dbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
   19dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	f280 80da 	bge.w	19f7e <_dtoa_r+0x656>
   19dca:	9b08      	ldr	r3, [sp, #32]
   19dcc:	2b00      	cmp	r3, #0
   19dce:	f300 80d6 	bgt.w	19f7e <_dtoa_r+0x656>
   19dd2:	f040 8271 	bne.w	1a2b8 <_flash_used+0xd4>
   19dd6:	2200      	movs	r2, #0
   19dd8:	4b41      	ldr	r3, [pc, #260]	; (19ee0 <_dtoa_r+0x5b8>)
   19dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   19dde:	f7fe fd9f 	bl	18920 <__aeabi_dmul>
   19de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19de6:	f7ff fb5d 	bl	194a4 <__aeabi_dcmpge>
   19dea:	9c08      	ldr	r4, [sp, #32]
   19dec:	4626      	mov	r6, r4
   19dee:	2800      	cmp	r0, #0
   19df0:	f040 8247 	bne.w	1a282 <_flash_used+0x9e>
   19df4:	9f03      	ldr	r7, [sp, #12]
   19df6:	2331      	movs	r3, #49	; 0x31
   19df8:	f10a 0a01 	add.w	sl, sl, #1
   19dfc:	f807 3b01 	strb.w	r3, [r7], #1
   19e00:	e243      	b.n	1a28a <_flash_used+0xa6>
   19e02:	07e2      	lsls	r2, r4, #31
   19e04:	d505      	bpl.n	19e12 <_dtoa_r+0x4ea>
   19e06:	3701      	adds	r7, #1
   19e08:	e9d6 2300 	ldrd	r2, r3, [r6]
   19e0c:	f7fe fd88 	bl	18920 <__aeabi_dmul>
   19e10:	2301      	movs	r3, #1
   19e12:	1064      	asrs	r4, r4, #1
   19e14:	3608      	adds	r6, #8
   19e16:	e76d      	b.n	19cf4 <_dtoa_r+0x3cc>
   19e18:	2702      	movs	r7, #2
   19e1a:	e770      	b.n	19cfe <_dtoa_r+0x3d6>
   19e1c:	46d0      	mov	r8, sl
   19e1e:	9c08      	ldr	r4, [sp, #32]
   19e20:	e78f      	b.n	19d42 <_dtoa_r+0x41a>
   19e22:	9903      	ldr	r1, [sp, #12]
   19e24:	4b29      	ldr	r3, [pc, #164]	; (19ecc <_dtoa_r+0x5a4>)
   19e26:	4421      	add	r1, r4
   19e28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19e2c:	9112      	str	r1, [sp, #72]	; 0x48
   19e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19e30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   19e34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   19e38:	2900      	cmp	r1, #0
   19e3a:	d055      	beq.n	19ee8 <_dtoa_r+0x5c0>
   19e3c:	2000      	movs	r0, #0
   19e3e:	4929      	ldr	r1, [pc, #164]	; (19ee4 <_dtoa_r+0x5bc>)
   19e40:	f7fe fe98 	bl	18b74 <__aeabi_ddiv>
   19e44:	463b      	mov	r3, r7
   19e46:	4632      	mov	r2, r6
   19e48:	f7fe fbb2 	bl	185b0 <__aeabi_dsub>
   19e4c:	9f03      	ldr	r7, [sp, #12]
   19e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19e56:	f7ff fb4f 	bl	194f8 <__aeabi_d2iz>
   19e5a:	4604      	mov	r4, r0
   19e5c:	f7fe fcf6 	bl	1884c <__aeabi_i2d>
   19e60:	4602      	mov	r2, r0
   19e62:	460b      	mov	r3, r1
   19e64:	3430      	adds	r4, #48	; 0x30
   19e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19e6a:	f7fe fba1 	bl	185b0 <__aeabi_dsub>
   19e6e:	4602      	mov	r2, r0
   19e70:	460b      	mov	r3, r1
   19e72:	f807 4b01 	strb.w	r4, [r7], #1
   19e76:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19e7e:	f7ff fafd 	bl	1947c <__aeabi_dcmplt>
   19e82:	2800      	cmp	r0, #0
   19e84:	d173      	bne.n	19f6e <_dtoa_r+0x646>
   19e86:	2000      	movs	r0, #0
   19e88:	4912      	ldr	r1, [pc, #72]	; (19ed4 <_dtoa_r+0x5ac>)
   19e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19e8e:	f7fe fb8f 	bl	185b0 <__aeabi_dsub>
   19e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19e96:	f7ff faf1 	bl	1947c <__aeabi_dcmplt>
   19e9a:	2800      	cmp	r0, #0
   19e9c:	f040 80b6 	bne.w	1a00c <_dtoa_r+0x6e4>
   19ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19ea2:	429f      	cmp	r7, r3
   19ea4:	f43f af7a 	beq.w	19d9c <_dtoa_r+0x474>
   19ea8:	2200      	movs	r2, #0
   19eaa:	4b0b      	ldr	r3, [pc, #44]	; (19ed8 <_dtoa_r+0x5b0>)
   19eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19eb0:	f7fe fd36 	bl	18920 <__aeabi_dmul>
   19eb4:	2200      	movs	r2, #0
   19eb6:	4b08      	ldr	r3, [pc, #32]	; (19ed8 <_dtoa_r+0x5b0>)
   19eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19ec0:	f7fe fd2e 	bl	18920 <__aeabi_dmul>
   19ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19ec8:	e7c3      	b.n	19e52 <_dtoa_r+0x52a>
   19eca:	bf00      	nop
   19ecc:	0002eac0 	.word	0x0002eac0
   19ed0:	0002ea98 	.word	0x0002ea98
   19ed4:	3ff00000 	.word	0x3ff00000
   19ed8:	40240000 	.word	0x40240000
   19edc:	401c0000 	.word	0x401c0000
   19ee0:	40140000 	.word	0x40140000
   19ee4:	3fe00000 	.word	0x3fe00000
   19ee8:	4630      	mov	r0, r6
   19eea:	4639      	mov	r1, r7
   19eec:	f7fe fd18 	bl	18920 <__aeabi_dmul>
   19ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19ef2:	9c03      	ldr	r4, [sp, #12]
   19ef4:	9314      	str	r3, [sp, #80]	; 0x50
   19ef6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   19efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19efe:	f7ff fafb 	bl	194f8 <__aeabi_d2iz>
   19f02:	9015      	str	r0, [sp, #84]	; 0x54
   19f04:	f7fe fca2 	bl	1884c <__aeabi_i2d>
   19f08:	4602      	mov	r2, r0
   19f0a:	460b      	mov	r3, r1
   19f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19f10:	f7fe fb4e 	bl	185b0 <__aeabi_dsub>
   19f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19f16:	4606      	mov	r6, r0
   19f18:	460f      	mov	r7, r1
   19f1a:	3330      	adds	r3, #48	; 0x30
   19f1c:	2200      	movs	r2, #0
   19f1e:	f804 3b01 	strb.w	r3, [r4], #1
   19f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19f24:	429c      	cmp	r4, r3
   19f26:	d124      	bne.n	19f72 <_dtoa_r+0x64a>
   19f28:	4ba4      	ldr	r3, [pc, #656]	; (1a1bc <_dtoa_r+0x894>)
   19f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   19f2e:	f7fe fb41 	bl	185b4 <__adddf3>
   19f32:	4602      	mov	r2, r0
   19f34:	460b      	mov	r3, r1
   19f36:	4630      	mov	r0, r6
   19f38:	4639      	mov	r1, r7
   19f3a:	f7ff fabd 	bl	194b8 <__aeabi_dcmpgt>
   19f3e:	2800      	cmp	r0, #0
   19f40:	d163      	bne.n	1a00a <_dtoa_r+0x6e2>
   19f42:	2000      	movs	r0, #0
   19f44:	499d      	ldr	r1, [pc, #628]	; (1a1bc <_dtoa_r+0x894>)
   19f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19f4a:	f7fe fb31 	bl	185b0 <__aeabi_dsub>
   19f4e:	4602      	mov	r2, r0
   19f50:	460b      	mov	r3, r1
   19f52:	4630      	mov	r0, r6
   19f54:	4639      	mov	r1, r7
   19f56:	f7ff fa91 	bl	1947c <__aeabi_dcmplt>
   19f5a:	2800      	cmp	r0, #0
   19f5c:	f43f af1e 	beq.w	19d9c <_dtoa_r+0x474>
   19f60:	9f14      	ldr	r7, [sp, #80]	; 0x50
   19f62:	1e7b      	subs	r3, r7, #1
   19f64:	9314      	str	r3, [sp, #80]	; 0x50
   19f66:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   19f6a:	2b30      	cmp	r3, #48	; 0x30
   19f6c:	d0f8      	beq.n	19f60 <_dtoa_r+0x638>
   19f6e:	46c2      	mov	sl, r8
   19f70:	e03b      	b.n	19fea <_dtoa_r+0x6c2>
   19f72:	4b93      	ldr	r3, [pc, #588]	; (1a1c0 <_dtoa_r+0x898>)
   19f74:	f7fe fcd4 	bl	18920 <__aeabi_dmul>
   19f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
   19f7c:	e7bd      	b.n	19efa <_dtoa_r+0x5d2>
   19f7e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   19f82:	9f03      	ldr	r7, [sp, #12]
   19f84:	4640      	mov	r0, r8
   19f86:	4649      	mov	r1, r9
   19f88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19f8c:	f7fe fdf2 	bl	18b74 <__aeabi_ddiv>
   19f90:	f7ff fab2 	bl	194f8 <__aeabi_d2iz>
   19f94:	4604      	mov	r4, r0
   19f96:	f7fe fc59 	bl	1884c <__aeabi_i2d>
   19f9a:	f104 0630 	add.w	r6, r4, #48	; 0x30
   19f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19fa2:	f7fe fcbd 	bl	18920 <__aeabi_dmul>
   19fa6:	4602      	mov	r2, r0
   19fa8:	460b      	mov	r3, r1
   19faa:	4640      	mov	r0, r8
   19fac:	4649      	mov	r1, r9
   19fae:	f7fe faff 	bl	185b0 <__aeabi_dsub>
   19fb2:	f807 6b01 	strb.w	r6, [r7], #1
   19fb6:	9e03      	ldr	r6, [sp, #12]
   19fb8:	4602      	mov	r2, r0
   19fba:	f8dd c020 	ldr.w	ip, [sp, #32]
   19fbe:	460b      	mov	r3, r1
   19fc0:	1bbe      	subs	r6, r7, r6
   19fc2:	45b4      	cmp	ip, r6
   19fc4:	d136      	bne.n	1a034 <_dtoa_r+0x70c>
   19fc6:	f7fe faf5 	bl	185b4 <__adddf3>
   19fca:	4680      	mov	r8, r0
   19fcc:	4689      	mov	r9, r1
   19fce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19fd2:	f7ff fa71 	bl	194b8 <__aeabi_dcmpgt>
   19fd6:	bb58      	cbnz	r0, 1a030 <_dtoa_r+0x708>
   19fd8:	4640      	mov	r0, r8
   19fda:	4649      	mov	r1, r9
   19fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19fe0:	f7ff fa42 	bl	19468 <__aeabi_dcmpeq>
   19fe4:	b108      	cbz	r0, 19fea <_dtoa_r+0x6c2>
   19fe6:	07e1      	lsls	r1, r4, #31
   19fe8:	d422      	bmi.n	1a030 <_dtoa_r+0x708>
   19fea:	4628      	mov	r0, r5
   19fec:	4659      	mov	r1, fp
   19fee:	f010 f8b7 	bl	2a160 <_Bfree>
   19ff2:	2300      	movs	r3, #0
   19ff4:	f10a 0001 	add.w	r0, sl, #1
   19ff8:	703b      	strb	r3, [r7, #0]
   19ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   19ffc:	6018      	str	r0, [r3, #0]
   19ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a000:	2b00      	cmp	r3, #0
   1a002:	f43f acdf 	beq.w	199c4 <_dtoa_r+0x9c>
   1a006:	601f      	str	r7, [r3, #0]
   1a008:	e4dc      	b.n	199c4 <_dtoa_r+0x9c>
   1a00a:	4627      	mov	r7, r4
   1a00c:	463b      	mov	r3, r7
   1a00e:	461f      	mov	r7, r3
   1a010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a014:	2a39      	cmp	r2, #57	; 0x39
   1a016:	d107      	bne.n	1a028 <_dtoa_r+0x700>
   1a018:	9a03      	ldr	r2, [sp, #12]
   1a01a:	429a      	cmp	r2, r3
   1a01c:	d1f7      	bne.n	1a00e <_dtoa_r+0x6e6>
   1a01e:	2230      	movs	r2, #48	; 0x30
   1a020:	9903      	ldr	r1, [sp, #12]
   1a022:	f108 0801 	add.w	r8, r8, #1
   1a026:	700a      	strb	r2, [r1, #0]
   1a028:	781a      	ldrb	r2, [r3, #0]
   1a02a:	3201      	adds	r2, #1
   1a02c:	701a      	strb	r2, [r3, #0]
   1a02e:	e79e      	b.n	19f6e <_dtoa_r+0x646>
   1a030:	46d0      	mov	r8, sl
   1a032:	e7eb      	b.n	1a00c <_dtoa_r+0x6e4>
   1a034:	2200      	movs	r2, #0
   1a036:	4b62      	ldr	r3, [pc, #392]	; (1a1c0 <_dtoa_r+0x898>)
   1a038:	f7fe fc72 	bl	18920 <__aeabi_dmul>
   1a03c:	2200      	movs	r2, #0
   1a03e:	2300      	movs	r3, #0
   1a040:	4680      	mov	r8, r0
   1a042:	4689      	mov	r9, r1
   1a044:	f7ff fa10 	bl	19468 <__aeabi_dcmpeq>
   1a048:	2800      	cmp	r0, #0
   1a04a:	d09b      	beq.n	19f84 <_dtoa_r+0x65c>
   1a04c:	e7cd      	b.n	19fea <_dtoa_r+0x6c2>
   1a04e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a050:	2a00      	cmp	r2, #0
   1a052:	f000 80d0 	beq.w	1a1f6 <_flash_used+0x12>
   1a056:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1a058:	2a01      	cmp	r2, #1
   1a05a:	f300 80b3 	bgt.w	1a1c4 <_dtoa_r+0x89c>
   1a05e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a060:	2a00      	cmp	r2, #0
   1a062:	f000 80a6 	beq.w	1a1b2 <_dtoa_r+0x88a>
   1a066:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1a06a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a06c:	9f06      	ldr	r7, [sp, #24]
   1a06e:	9a06      	ldr	r2, [sp, #24]
   1a070:	2101      	movs	r1, #1
   1a072:	4628      	mov	r0, r5
   1a074:	441a      	add	r2, r3
   1a076:	9206      	str	r2, [sp, #24]
   1a078:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a07a:	441a      	add	r2, r3
   1a07c:	9209      	str	r2, [sp, #36]	; 0x24
   1a07e:	f010 f8d9 	bl	2a234 <__i2b>
   1a082:	4606      	mov	r6, r0
   1a084:	2f00      	cmp	r7, #0
   1a086:	dd0c      	ble.n	1a0a2 <_dtoa_r+0x77a>
   1a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a08a:	2b00      	cmp	r3, #0
   1a08c:	dd09      	ble.n	1a0a2 <_dtoa_r+0x77a>
   1a08e:	42bb      	cmp	r3, r7
   1a090:	9a06      	ldr	r2, [sp, #24]
   1a092:	bfa8      	it	ge
   1a094:	463b      	movge	r3, r7
   1a096:	1ad2      	subs	r2, r2, r3
   1a098:	1aff      	subs	r7, r7, r3
   1a09a:	9206      	str	r2, [sp, #24]
   1a09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a09e:	1ad3      	subs	r3, r2, r3
   1a0a0:	9309      	str	r3, [sp, #36]	; 0x24
   1a0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a0a4:	b1f3      	cbz	r3, 1a0e4 <_dtoa_r+0x7bc>
   1a0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	f000 80a8 	beq.w	1a1fe <_flash_used+0x1a>
   1a0ae:	2c00      	cmp	r4, #0
   1a0b0:	dd10      	ble.n	1a0d4 <_dtoa_r+0x7ac>
   1a0b2:	4631      	mov	r1, r6
   1a0b4:	4622      	mov	r2, r4
   1a0b6:	4628      	mov	r0, r5
   1a0b8:	f010 f97a 	bl	2a3b0 <__pow5mult>
   1a0bc:	465a      	mov	r2, fp
   1a0be:	4601      	mov	r1, r0
   1a0c0:	4606      	mov	r6, r0
   1a0c2:	4628      	mov	r0, r5
   1a0c4:	f010 f8cc 	bl	2a260 <__multiply>
   1a0c8:	4680      	mov	r8, r0
   1a0ca:	4659      	mov	r1, fp
   1a0cc:	4628      	mov	r0, r5
   1a0ce:	46c3      	mov	fp, r8
   1a0d0:	f010 f846 	bl	2a160 <_Bfree>
   1a0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a0d6:	1b1a      	subs	r2, r3, r4
   1a0d8:	d004      	beq.n	1a0e4 <_dtoa_r+0x7bc>
   1a0da:	4659      	mov	r1, fp
   1a0dc:	4628      	mov	r0, r5
   1a0de:	f010 f967 	bl	2a3b0 <__pow5mult>
   1a0e2:	4683      	mov	fp, r0
   1a0e4:	2101      	movs	r1, #1
   1a0e6:	4628      	mov	r0, r5
   1a0e8:	f010 f8a4 	bl	2a234 <__i2b>
   1a0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a0ee:	4604      	mov	r4, r0
   1a0f0:	2b00      	cmp	r3, #0
   1a0f2:	f340 8086 	ble.w	1a202 <_flash_used+0x1e>
   1a0f6:	461a      	mov	r2, r3
   1a0f8:	4601      	mov	r1, r0
   1a0fa:	4628      	mov	r0, r5
   1a0fc:	f010 f958 	bl	2a3b0 <__pow5mult>
   1a100:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a102:	4604      	mov	r4, r0
   1a104:	2b01      	cmp	r3, #1
   1a106:	dd7f      	ble.n	1a208 <_flash_used+0x24>
   1a108:	f04f 0800 	mov.w	r8, #0
   1a10c:	6923      	ldr	r3, [r4, #16]
   1a10e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1a112:	6918      	ldr	r0, [r3, #16]
   1a114:	f013 ffdd 	bl	2e0d2 <__hi0bits>
   1a118:	f1c0 0020 	rsb	r0, r0, #32
   1a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a11e:	4418      	add	r0, r3
   1a120:	f010 001f 	ands.w	r0, r0, #31
   1a124:	f000 8092 	beq.w	1a24c <_flash_used+0x68>
   1a128:	f1c0 0320 	rsb	r3, r0, #32
   1a12c:	2b04      	cmp	r3, #4
   1a12e:	f340 808a 	ble.w	1a246 <_flash_used+0x62>
   1a132:	f1c0 001c 	rsb	r0, r0, #28
   1a136:	9b06      	ldr	r3, [sp, #24]
   1a138:	4407      	add	r7, r0
   1a13a:	4403      	add	r3, r0
   1a13c:	9306      	str	r3, [sp, #24]
   1a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a140:	4403      	add	r3, r0
   1a142:	9309      	str	r3, [sp, #36]	; 0x24
   1a144:	9b06      	ldr	r3, [sp, #24]
   1a146:	2b00      	cmp	r3, #0
   1a148:	dd05      	ble.n	1a156 <_dtoa_r+0x82e>
   1a14a:	4659      	mov	r1, fp
   1a14c:	461a      	mov	r2, r3
   1a14e:	4628      	mov	r0, r5
   1a150:	f010 f988 	bl	2a464 <__lshift>
   1a154:	4683      	mov	fp, r0
   1a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a158:	2b00      	cmp	r3, #0
   1a15a:	dd05      	ble.n	1a168 <_dtoa_r+0x840>
   1a15c:	4621      	mov	r1, r4
   1a15e:	461a      	mov	r2, r3
   1a160:	4628      	mov	r0, r5
   1a162:	f010 f97f 	bl	2a464 <__lshift>
   1a166:	4604      	mov	r4, r0
   1a168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	d070      	beq.n	1a250 <_flash_used+0x6c>
   1a16e:	4621      	mov	r1, r4
   1a170:	4658      	mov	r0, fp
   1a172:	f013 fffb 	bl	2e16c <__mcmp>
   1a176:	2800      	cmp	r0, #0
   1a178:	da6a      	bge.n	1a250 <_flash_used+0x6c>
   1a17a:	2300      	movs	r3, #0
   1a17c:	4659      	mov	r1, fp
   1a17e:	220a      	movs	r2, #10
   1a180:	4628      	mov	r0, r5
   1a182:	f010 f80f 	bl	2a1a4 <__multadd>
   1a186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a188:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1a18c:	4683      	mov	fp, r0
   1a18e:	2b00      	cmp	r3, #0
   1a190:	f000 8194 	beq.w	1a4bc <_flash_used+0x2d8>
   1a194:	4631      	mov	r1, r6
   1a196:	2300      	movs	r3, #0
   1a198:	220a      	movs	r2, #10
   1a19a:	4628      	mov	r0, r5
   1a19c:	f010 f802 	bl	2a1a4 <__multadd>
   1a1a0:	f1b9 0f00 	cmp.w	r9, #0
   1a1a4:	4606      	mov	r6, r0
   1a1a6:	f300 8093 	bgt.w	1a2d0 <_flash_used+0xec>
   1a1aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a1ac:	2b02      	cmp	r3, #2
   1a1ae:	dc57      	bgt.n	1a260 <_flash_used+0x7c>
   1a1b0:	e08e      	b.n	1a2d0 <_flash_used+0xec>
   1a1b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a1b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1a1b8:	e757      	b.n	1a06a <_dtoa_r+0x742>
   1a1ba:	bf00      	nop
   1a1bc:	3fe00000 	.word	0x3fe00000
   1a1c0:	40240000 	.word	0x40240000
   1a1c4:	9b08      	ldr	r3, [sp, #32]
   1a1c6:	1e5c      	subs	r4, r3, #1
   1a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a1ca:	42a3      	cmp	r3, r4
   1a1cc:	bfb7      	itett	lt
   1a1ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1a1d0:	1b1c      	subge	r4, r3, r4
   1a1d2:	940a      	strlt	r4, [sp, #40]	; 0x28
   1a1d4:	1ae2      	sublt	r2, r4, r3
   1a1d6:	bfbf      	itttt	lt
   1a1d8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   1a1da:	2400      	movlt	r4, #0
   1a1dc:	189b      	addlt	r3, r3, r2
   1a1de:	930e      	strlt	r3, [sp, #56]	; 0x38
   1a1e0:	9b08      	ldr	r3, [sp, #32]
   1a1e2:	2b00      	cmp	r3, #0
   1a1e4:	bfbb      	ittet	lt
   1a1e6:	9b06      	ldrlt	r3, [sp, #24]
   1a1e8:	9a08      	ldrlt	r2, [sp, #32]
   1a1ea:	9f06      	ldrge	r7, [sp, #24]
   1a1ec:	1a9f      	sublt	r7, r3, r2
   1a1ee:	bfac      	ite	ge
   1a1f0:	9b08      	ldrge	r3, [sp, #32]
   1a1f2:	2300      	movlt	r3, #0
   1a1f4:	e73b      	b.n	1a06e <_dtoa_r+0x746>
   1a1f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a1f8:	9f06      	ldr	r7, [sp, #24]
   1a1fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a1fc:	e742      	b.n	1a084 <_dtoa_r+0x75c>
   1a1fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a200:	e76b      	b.n	1a0da <_dtoa_r+0x7b2>
   1a202:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a204:	2b01      	cmp	r3, #1
   1a206:	dc19      	bgt.n	1a23c <_flash_used+0x58>
   1a208:	9b04      	ldr	r3, [sp, #16]
   1a20a:	b9bb      	cbnz	r3, 1a23c <_flash_used+0x58>
   1a20c:	9b05      	ldr	r3, [sp, #20]
   1a20e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1a212:	b99b      	cbnz	r3, 1a23c <_flash_used+0x58>
   1a214:	9b05      	ldr	r3, [sp, #20]
   1a216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a21a:	0d1b      	lsrs	r3, r3, #20
   1a21c:	051b      	lsls	r3, r3, #20
   1a21e:	b183      	cbz	r3, 1a242 <_flash_used+0x5e>
   1a220:	9b06      	ldr	r3, [sp, #24]
   1a222:	f04f 0801 	mov.w	r8, #1
   1a226:	3301      	adds	r3, #1
   1a228:	9306      	str	r3, [sp, #24]
   1a22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a22c:	3301      	adds	r3, #1
   1a22e:	9309      	str	r3, [sp, #36]	; 0x24
   1a230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a232:	2b00      	cmp	r3, #0
   1a234:	f47f af6a 	bne.w	1a10c <_dtoa_r+0x7e4>
   1a238:	2001      	movs	r0, #1
   1a23a:	e76f      	b.n	1a11c <_dtoa_r+0x7f4>
   1a23c:	f04f 0800 	mov.w	r8, #0
   1a240:	e7f6      	b.n	1a230 <_flash_used+0x4c>
   1a242:	4698      	mov	r8, r3
   1a244:	e7f4      	b.n	1a230 <_flash_used+0x4c>
   1a246:	f43f af7d 	beq.w	1a144 <_dtoa_r+0x81c>
   1a24a:	4618      	mov	r0, r3
   1a24c:	301c      	adds	r0, #28
   1a24e:	e772      	b.n	1a136 <_dtoa_r+0x80e>
   1a250:	9b08      	ldr	r3, [sp, #32]
   1a252:	2b00      	cmp	r3, #0
   1a254:	dc36      	bgt.n	1a2c4 <_flash_used+0xe0>
   1a256:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a258:	2b02      	cmp	r3, #2
   1a25a:	dd33      	ble.n	1a2c4 <_flash_used+0xe0>
   1a25c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1a260:	f1b9 0f00 	cmp.w	r9, #0
   1a264:	d10d      	bne.n	1a282 <_flash_used+0x9e>
   1a266:	4621      	mov	r1, r4
   1a268:	464b      	mov	r3, r9
   1a26a:	2205      	movs	r2, #5
   1a26c:	4628      	mov	r0, r5
   1a26e:	f00f ff99 	bl	2a1a4 <__multadd>
   1a272:	4601      	mov	r1, r0
   1a274:	4604      	mov	r4, r0
   1a276:	4658      	mov	r0, fp
   1a278:	f013 ff78 	bl	2e16c <__mcmp>
   1a27c:	2800      	cmp	r0, #0
   1a27e:	f73f adb9 	bgt.w	19df4 <_dtoa_r+0x4cc>
   1a282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a284:	9f03      	ldr	r7, [sp, #12]
   1a286:	ea6f 0a03 	mvn.w	sl, r3
   1a28a:	f04f 0800 	mov.w	r8, #0
   1a28e:	4621      	mov	r1, r4
   1a290:	4628      	mov	r0, r5
   1a292:	f00f ff65 	bl	2a160 <_Bfree>
   1a296:	2e00      	cmp	r6, #0
   1a298:	f43f aea7 	beq.w	19fea <_dtoa_r+0x6c2>
   1a29c:	f1b8 0f00 	cmp.w	r8, #0
   1a2a0:	d005      	beq.n	1a2ae <_flash_used+0xca>
   1a2a2:	45b0      	cmp	r8, r6
   1a2a4:	d003      	beq.n	1a2ae <_flash_used+0xca>
   1a2a6:	4641      	mov	r1, r8
   1a2a8:	4628      	mov	r0, r5
   1a2aa:	f00f ff59 	bl	2a160 <_Bfree>
   1a2ae:	4631      	mov	r1, r6
   1a2b0:	4628      	mov	r0, r5
   1a2b2:	f00f ff55 	bl	2a160 <_Bfree>
   1a2b6:	e698      	b.n	19fea <_dtoa_r+0x6c2>
   1a2b8:	2400      	movs	r4, #0
   1a2ba:	4626      	mov	r6, r4
   1a2bc:	e7e1      	b.n	1a282 <_flash_used+0x9e>
   1a2be:	46c2      	mov	sl, r8
   1a2c0:	4626      	mov	r6, r4
   1a2c2:	e597      	b.n	19df4 <_dtoa_r+0x4cc>
   1a2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a2c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1a2ca:	2b00      	cmp	r3, #0
   1a2cc:	f000 80fd 	beq.w	1a4ca <_flash_used+0x2e6>
   1a2d0:	2f00      	cmp	r7, #0
   1a2d2:	dd05      	ble.n	1a2e0 <_flash_used+0xfc>
   1a2d4:	4631      	mov	r1, r6
   1a2d6:	463a      	mov	r2, r7
   1a2d8:	4628      	mov	r0, r5
   1a2da:	f010 f8c3 	bl	2a464 <__lshift>
   1a2de:	4606      	mov	r6, r0
   1a2e0:	f1b8 0f00 	cmp.w	r8, #0
   1a2e4:	d05c      	beq.n	1a3a0 <_flash_used+0x1bc>
   1a2e6:	6871      	ldr	r1, [r6, #4]
   1a2e8:	4628      	mov	r0, r5
   1a2ea:	f00f fef9 	bl	2a0e0 <_Balloc>
   1a2ee:	4607      	mov	r7, r0
   1a2f0:	b928      	cbnz	r0, 1a2fe <_flash_used+0x11a>
   1a2f2:	4b80      	ldr	r3, [pc, #512]	; (1a4f4 <_flash_used+0x310>)
   1a2f4:	4602      	mov	r2, r0
   1a2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
   1a2fa:	f7ff bb29 	b.w	19950 <_dtoa_r+0x28>
   1a2fe:	6932      	ldr	r2, [r6, #16]
   1a300:	f106 010c 	add.w	r1, r6, #12
   1a304:	300c      	adds	r0, #12
   1a306:	3202      	adds	r2, #2
   1a308:	0092      	lsls	r2, r2, #2
   1a30a:	f013 fc58 	bl	2dbbe <memcpy>
   1a30e:	2201      	movs	r2, #1
   1a310:	4639      	mov	r1, r7
   1a312:	4628      	mov	r0, r5
   1a314:	f010 f8a6 	bl	2a464 <__lshift>
   1a318:	9b03      	ldr	r3, [sp, #12]
   1a31a:	46b0      	mov	r8, r6
   1a31c:	4606      	mov	r6, r0
   1a31e:	3301      	adds	r3, #1
   1a320:	9308      	str	r3, [sp, #32]
   1a322:	9b03      	ldr	r3, [sp, #12]
   1a324:	444b      	add	r3, r9
   1a326:	930a      	str	r3, [sp, #40]	; 0x28
   1a328:	9b04      	ldr	r3, [sp, #16]
   1a32a:	f003 0301 	and.w	r3, r3, #1
   1a32e:	9309      	str	r3, [sp, #36]	; 0x24
   1a330:	9b08      	ldr	r3, [sp, #32]
   1a332:	4621      	mov	r1, r4
   1a334:	4658      	mov	r0, fp
   1a336:	3b01      	subs	r3, #1
   1a338:	9304      	str	r3, [sp, #16]
   1a33a:	f013 fe35 	bl	2dfa8 <quorem>
   1a33e:	4603      	mov	r3, r0
   1a340:	4641      	mov	r1, r8
   1a342:	9006      	str	r0, [sp, #24]
   1a344:	4658      	mov	r0, fp
   1a346:	3330      	adds	r3, #48	; 0x30
   1a348:	930b      	str	r3, [sp, #44]	; 0x2c
   1a34a:	f013 ff0f 	bl	2e16c <__mcmp>
   1a34e:	4632      	mov	r2, r6
   1a350:	4681      	mov	r9, r0
   1a352:	4621      	mov	r1, r4
   1a354:	4628      	mov	r0, r5
   1a356:	f010 f8f5 	bl	2a544 <__mdiff>
   1a35a:	68c2      	ldr	r2, [r0, #12]
   1a35c:	4607      	mov	r7, r0
   1a35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a360:	bb02      	cbnz	r2, 1a3a4 <_flash_used+0x1c0>
   1a362:	4601      	mov	r1, r0
   1a364:	4658      	mov	r0, fp
   1a366:	f013 ff01 	bl	2e16c <__mcmp>
   1a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a36c:	4602      	mov	r2, r0
   1a36e:	4639      	mov	r1, r7
   1a370:	4628      	mov	r0, r5
   1a372:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   1a376:	f00f fef3 	bl	2a160 <_Bfree>
   1a37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a37e:	9f08      	ldr	r7, [sp, #32]
   1a380:	ea43 0102 	orr.w	r1, r3, r2
   1a384:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a386:	430b      	orrs	r3, r1
   1a388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a38a:	d10d      	bne.n	1a3a8 <_flash_used+0x1c4>
   1a38c:	2b39      	cmp	r3, #57	; 0x39
   1a38e:	d029      	beq.n	1a3e4 <_flash_used+0x200>
   1a390:	f1b9 0f00 	cmp.w	r9, #0
   1a394:	dd01      	ble.n	1a39a <_flash_used+0x1b6>
   1a396:	9b06      	ldr	r3, [sp, #24]
   1a398:	3331      	adds	r3, #49	; 0x31
   1a39a:	9a04      	ldr	r2, [sp, #16]
   1a39c:	7013      	strb	r3, [r2, #0]
   1a39e:	e776      	b.n	1a28e <_flash_used+0xaa>
   1a3a0:	4630      	mov	r0, r6
   1a3a2:	e7b9      	b.n	1a318 <_flash_used+0x134>
   1a3a4:	2201      	movs	r2, #1
   1a3a6:	e7e2      	b.n	1a36e <_flash_used+0x18a>
   1a3a8:	f1b9 0f00 	cmp.w	r9, #0
   1a3ac:	db06      	blt.n	1a3bc <_flash_used+0x1d8>
   1a3ae:	9922      	ldr	r1, [sp, #136]	; 0x88
   1a3b0:	ea41 0909 	orr.w	r9, r1, r9
   1a3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a3b6:	ea59 0101 	orrs.w	r1, r9, r1
   1a3ba:	d120      	bne.n	1a3fe <_flash_used+0x21a>
   1a3bc:	2a00      	cmp	r2, #0
   1a3be:	ddec      	ble.n	1a39a <_flash_used+0x1b6>
   1a3c0:	4659      	mov	r1, fp
   1a3c2:	2201      	movs	r2, #1
   1a3c4:	4628      	mov	r0, r5
   1a3c6:	9308      	str	r3, [sp, #32]
   1a3c8:	f010 f84c 	bl	2a464 <__lshift>
   1a3cc:	4621      	mov	r1, r4
   1a3ce:	4683      	mov	fp, r0
   1a3d0:	f013 fecc 	bl	2e16c <__mcmp>
   1a3d4:	2800      	cmp	r0, #0
   1a3d6:	9b08      	ldr	r3, [sp, #32]
   1a3d8:	dc02      	bgt.n	1a3e0 <_flash_used+0x1fc>
   1a3da:	d1de      	bne.n	1a39a <_flash_used+0x1b6>
   1a3dc:	07da      	lsls	r2, r3, #31
   1a3de:	d5dc      	bpl.n	1a39a <_flash_used+0x1b6>
   1a3e0:	2b39      	cmp	r3, #57	; 0x39
   1a3e2:	d1d8      	bne.n	1a396 <_flash_used+0x1b2>
   1a3e4:	2339      	movs	r3, #57	; 0x39
   1a3e6:	9a04      	ldr	r2, [sp, #16]
   1a3e8:	7013      	strb	r3, [r2, #0]
   1a3ea:	463b      	mov	r3, r7
   1a3ec:	461f      	mov	r7, r3
   1a3ee:	3b01      	subs	r3, #1
   1a3f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   1a3f4:	2a39      	cmp	r2, #57	; 0x39
   1a3f6:	d050      	beq.n	1a49a <_flash_used+0x2b6>
   1a3f8:	3201      	adds	r2, #1
   1a3fa:	701a      	strb	r2, [r3, #0]
   1a3fc:	e747      	b.n	1a28e <_flash_used+0xaa>
   1a3fe:	2a00      	cmp	r2, #0
   1a400:	dd03      	ble.n	1a40a <_flash_used+0x226>
   1a402:	2b39      	cmp	r3, #57	; 0x39
   1a404:	d0ee      	beq.n	1a3e4 <_flash_used+0x200>
   1a406:	3301      	adds	r3, #1
   1a408:	e7c7      	b.n	1a39a <_flash_used+0x1b6>
   1a40a:	9a08      	ldr	r2, [sp, #32]
   1a40c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a40e:	f802 3c01 	strb.w	r3, [r2, #-1]
   1a412:	428a      	cmp	r2, r1
   1a414:	d02a      	beq.n	1a46c <_flash_used+0x288>
   1a416:	4659      	mov	r1, fp
   1a418:	2300      	movs	r3, #0
   1a41a:	220a      	movs	r2, #10
   1a41c:	4628      	mov	r0, r5
   1a41e:	f00f fec1 	bl	2a1a4 <__multadd>
   1a422:	45b0      	cmp	r8, r6
   1a424:	4683      	mov	fp, r0
   1a426:	f04f 0300 	mov.w	r3, #0
   1a42a:	f04f 020a 	mov.w	r2, #10
   1a42e:	4641      	mov	r1, r8
   1a430:	4628      	mov	r0, r5
   1a432:	d107      	bne.n	1a444 <_flash_used+0x260>
   1a434:	f00f feb6 	bl	2a1a4 <__multadd>
   1a438:	4680      	mov	r8, r0
   1a43a:	4606      	mov	r6, r0
   1a43c:	9b08      	ldr	r3, [sp, #32]
   1a43e:	3301      	adds	r3, #1
   1a440:	9308      	str	r3, [sp, #32]
   1a442:	e775      	b.n	1a330 <_flash_used+0x14c>
   1a444:	f00f feae 	bl	2a1a4 <__multadd>
   1a448:	4631      	mov	r1, r6
   1a44a:	4680      	mov	r8, r0
   1a44c:	2300      	movs	r3, #0
   1a44e:	220a      	movs	r2, #10
   1a450:	4628      	mov	r0, r5
   1a452:	f00f fea7 	bl	2a1a4 <__multadd>
   1a456:	4606      	mov	r6, r0
   1a458:	e7f0      	b.n	1a43c <_flash_used+0x258>
   1a45a:	f1b9 0f00 	cmp.w	r9, #0
   1a45e:	9a03      	ldr	r2, [sp, #12]
   1a460:	f04f 0800 	mov.w	r8, #0
   1a464:	bfcc      	ite	gt
   1a466:	464f      	movgt	r7, r9
   1a468:	2701      	movle	r7, #1
   1a46a:	4417      	add	r7, r2
   1a46c:	4659      	mov	r1, fp
   1a46e:	2201      	movs	r2, #1
   1a470:	4628      	mov	r0, r5
   1a472:	9308      	str	r3, [sp, #32]
   1a474:	f00f fff6 	bl	2a464 <__lshift>
   1a478:	4621      	mov	r1, r4
   1a47a:	4683      	mov	fp, r0
   1a47c:	f013 fe76 	bl	2e16c <__mcmp>
   1a480:	2800      	cmp	r0, #0
   1a482:	dcb2      	bgt.n	1a3ea <_flash_used+0x206>
   1a484:	d102      	bne.n	1a48c <_flash_used+0x2a8>
   1a486:	9b08      	ldr	r3, [sp, #32]
   1a488:	07db      	lsls	r3, r3, #31
   1a48a:	d4ae      	bmi.n	1a3ea <_flash_used+0x206>
   1a48c:	463b      	mov	r3, r7
   1a48e:	461f      	mov	r7, r3
   1a490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a494:	2a30      	cmp	r2, #48	; 0x30
   1a496:	d0fa      	beq.n	1a48e <_flash_used+0x2aa>
   1a498:	e6f9      	b.n	1a28e <_flash_used+0xaa>
   1a49a:	9a03      	ldr	r2, [sp, #12]
   1a49c:	429a      	cmp	r2, r3
   1a49e:	d1a5      	bne.n	1a3ec <_flash_used+0x208>
   1a4a0:	f10a 0a01 	add.w	sl, sl, #1
   1a4a4:	2331      	movs	r3, #49	; 0x31
   1a4a6:	e779      	b.n	1a39c <_flash_used+0x1b8>
   1a4a8:	4b13      	ldr	r3, [pc, #76]	; (1a4f8 <_flash_used+0x314>)
   1a4aa:	f7ff baa9 	b.w	19a00 <_dtoa_r+0xd8>
   1a4ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a4b0:	2b00      	cmp	r3, #0
   1a4b2:	f47f aa82 	bne.w	199ba <_dtoa_r+0x92>
   1a4b6:	4b11      	ldr	r3, [pc, #68]	; (1a4fc <_flash_used+0x318>)
   1a4b8:	f7ff baa2 	b.w	19a00 <_dtoa_r+0xd8>
   1a4bc:	f1b9 0f00 	cmp.w	r9, #0
   1a4c0:	dc03      	bgt.n	1a4ca <_flash_used+0x2e6>
   1a4c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a4c4:	2b02      	cmp	r3, #2
   1a4c6:	f73f aecb 	bgt.w	1a260 <_flash_used+0x7c>
   1a4ca:	9f03      	ldr	r7, [sp, #12]
   1a4cc:	4621      	mov	r1, r4
   1a4ce:	4658      	mov	r0, fp
   1a4d0:	f013 fd6a 	bl	2dfa8 <quorem>
   1a4d4:	9a03      	ldr	r2, [sp, #12]
   1a4d6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1a4da:	f807 3b01 	strb.w	r3, [r7], #1
   1a4de:	1aba      	subs	r2, r7, r2
   1a4e0:	4591      	cmp	r9, r2
   1a4e2:	ddba      	ble.n	1a45a <_flash_used+0x276>
   1a4e4:	4659      	mov	r1, fp
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	220a      	movs	r2, #10
   1a4ea:	4628      	mov	r0, r5
   1a4ec:	f00f fe5a 	bl	2a1a4 <__multadd>
   1a4f0:	4683      	mov	fp, r0
   1a4f2:	e7eb      	b.n	1a4cc <_flash_used+0x2e8>
   1a4f4:	00031d08 	.word	0x00031d08
   1a4f8:	000309e8 	.word	0x000309e8
   1a4fc:	00031c7d 	.word	0x00031c7d

0001a500 <lte_handler>:
	} while (err != 0);
	LOG_INF("Network time obtained");

}
static void lte_handler(const struct lte_lc_evt *const evt)
{
   1a500:	b510      	push	{r4, lr}
	switch (evt->type) {
   1a502:	7803      	ldrb	r3, [r0, #0]
{
   1a504:	4604      	mov	r4, r0
	switch (evt->type) {
   1a506:	b113      	cbz	r3, 1a50e <lte_handler+0xe>
   1a508:	2b04      	cmp	r3, #4
   1a50a:	d016      	beq.n	1a53a <lte_handler+0x3a>
			evt->cell.id, evt->cell.tac);
		break;
	default:
		break;
	}
}
   1a50c:	bd10      	pop	{r4, pc}
		LOG_DBG("LTE_LC_EVT_NW_REG_STATUS: %d", evt->nw_reg_status);
   1a50e:	7a02      	ldrb	r2, [r0, #8]
   1a510:	2144      	movs	r1, #68	; 0x44
   1a512:	480e      	ldr	r0, [pc, #56]	; (1a54c <lte_handler+0x4c>)
   1a514:	f011 fafb 	bl	2bb0e <z_log_minimal_printk>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1a518:	7a23      	ldrb	r3, [r4, #8]
   1a51a:	2b01      	cmp	r3, #1
   1a51c:	d00b      	beq.n	1a536 <lte_handler+0x36>
   1a51e:	2b05      	cmp	r3, #5
   1a520:	d1f4      	bne.n	1a50c <lte_handler+0xc>
		LOG_DBG("Network registration status: %s",
   1a522:	4a0b      	ldr	r2, [pc, #44]	; (1a550 <lte_handler+0x50>)
   1a524:	2144      	movs	r1, #68	; 0x44
   1a526:	480b      	ldr	r0, [pc, #44]	; (1a554 <lte_handler+0x54>)
   1a528:	f011 faf1 	bl	2bb0e <z_log_minimal_printk>
}
   1a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a530:	4809      	ldr	r0, [pc, #36]	; (1a558 <lte_handler+0x58>)
   1a532:	f00c b943 	b.w	267bc <z_impl_k_sem_give>
		LOG_DBG("Network registration status: %s",
   1a536:	4a09      	ldr	r2, [pc, #36]	; (1a55c <lte_handler+0x5c>)
   1a538:	e7f4      	b.n	1a524 <lte_handler+0x24>
		LOG_DBG("LTE cell changed: Cell ID: %d, Tracking area: %d",
   1a53a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1a53e:	2144      	movs	r1, #68	; 0x44
}
   1a540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_DBG("LTE cell changed: Cell ID: %d, Tracking area: %d",
   1a544:	4806      	ldr	r0, [pc, #24]	; (1a560 <lte_handler+0x60>)
   1a546:	f011 bae2 	b.w	2bb0e <z_log_minimal_printk>
   1a54a:	bf00      	nop
   1a54c:	0002eff1 	.word	0x0002eff1
   1a550:	0002efdd 	.word	0x0002efdd
   1a554:	0002f013 	.word	0x0002f013
   1a558:	2000ca8c 	.word	0x2000ca8c
   1a55c:	0002efc4 	.word	0x0002efc4
   1a560:	0002f038 	.word	0x0002f038

0001a564 <main>:
	return 0;

}

void main(void)
{
   1a564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	int64_t unix_time_ms=1;
   1a566:	2201      	movs	r2, #1
   1a568:	2300      	movs	r3, #0
	// unix_time_ms=&err;
	

	LOG_INF("Get time app");
   1a56a:	2149      	movs	r1, #73	; 0x49
   1a56c:	4849      	ldr	r0, [pc, #292]	; (1a694 <main+0x130>)
	int64_t unix_time_ms=1;
   1a56e:	e9cd 2300 	strd	r2, r3, [sp]
	LOG_INF("Get time app");
   1a572:	f011 facc 	bl	2bb0e <z_log_minimal_printk>
	modem_lib_init_result = nrf_modem_lib_init(NORMAL_MODE);
   1a576:	2000      	movs	r0, #0
   1a578:	f004 f8f2 	bl	1e760 <nrf_modem_lib_init>
	if (modem_lib_init_result) {
   1a57c:	4602      	mov	r2, r0
   1a57e:	b9c0      	cbnz	r0, 1a5b2 <main+0x4e>
	LOG_INF("Waiting for network...");
   1a580:	2149      	movs	r1, #73	; 0x49
   1a582:	4845      	ldr	r0, [pc, #276]	; (1a698 <main+0x134>)
   1a584:	f011 fac3 	bl	2bb0e <z_log_minimal_printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   1a588:	4844      	ldr	r0, [pc, #272]	; (1a69c <main+0x138>)
   1a58a:	f00c f9bb 	bl	26904 <z_impl_k_sem_reset>
	err = lte_lc_init_and_connect_async(lte_handler);
   1a58e:	4844      	ldr	r0, [pc, #272]	; (1a6a0 <main+0x13c>)
   1a590:	f012 f8af 	bl	2c6f2 <lte_lc_init_and_connect_async>
	if (err) {
   1a594:	4604      	mov	r4, r0
   1a596:	b1d0      	cbz	r0, 1a5ce <main+0x6a>
		LOG_ERR("Failed to init modem, error: %d", err);
   1a598:	4602      	mov	r2, r0
   1a59a:	2145      	movs	r1, #69	; 0x45
   1a59c:	4841      	ldr	r0, [pc, #260]	; (1a6a4 <main+0x140>)
   1a59e:	f011 fab6 	bl	2bb0e <z_log_minimal_printk>
		LOG_ERR("Failed to connect to cellular network: %d", err);
   1a5a2:	2145      	movs	r1, #69	; 0x45
   1a5a4:	4840      	ldr	r0, [pc, #256]	; (1a6a8 <main+0x144>)
   1a5a6:	4622      	mov	r2, r4
   1a5a8:	f011 fab1 	bl	2bb0e <z_log_minimal_printk>
		LOG_ERR("Connection set-up failed.");
   1a5ac:	2145      	movs	r1, #69	; 0x45
   1a5ae:	483f      	ldr	r0, [pc, #252]	; (1a6ac <main+0x148>)
   1a5b0:	e005      	b.n	1a5be <main+0x5a>
		LOG_ERR("Failed to initialize modem library: 0x%X", modem_lib_init_result);
   1a5b2:	2145      	movs	r1, #69	; 0x45
   1a5b4:	483e      	ldr	r0, [pc, #248]	; (1a6b0 <main+0x14c>)
   1a5b6:	f011 faaa 	bl	2bb0e <z_log_minimal_printk>
		LOG_ERR("Initialization failed.");
   1a5ba:	2145      	movs	r1, #69	; 0x45
   1a5bc:	483d      	ldr	r0, [pc, #244]	; (1a6b4 <main+0x150>)
		LOG_ERR("Connection set-up failed.");
   1a5be:	f011 faa6 	bl	2bb0e <z_log_minimal_printk>

	err = setup();
	if (err) {
		LOG_ERR("Setup failed, stopping.");
   1a5c2:	2145      	movs	r1, #69	; 0x45
   1a5c4:	483c      	ldr	r0, [pc, #240]	; (1a6b8 <main+0x154>)
   1a5c6:	f011 faa2 	bl	2bb0e <z_log_minimal_printk>
		LOG_INF("time nowsek: %i", (ptm->tm_sec));
		LOG_INF("time nowsek: %i", (ptm->tm_isdst));

	}
	
}
   1a5ca:	b004      	add	sp, #16
   1a5cc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1a5ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a5d6:	4831      	ldr	r0, [pc, #196]	; (1a69c <main+0x138>)
   1a5d8:	f00c f92a 	bl	26830 <z_impl_k_sem_take>
	LOG_INF("Connected to LTE");
   1a5dc:	2149      	movs	r1, #73	; 0x49
   1a5de:	4837      	ldr	r0, [pc, #220]	; (1a6bc <main+0x158>)
   1a5e0:	f011 fa95 	bl	2bb0e <z_log_minimal_printk>
	LOG_INF("Waiting for modem to acquire network time...");
   1a5e4:	2149      	movs	r1, #73	; 0x49
   1a5e6:	4836      	ldr	r0, [pc, #216]	; (1a6c0 <main+0x15c>)
   1a5e8:	f011 fa91 	bl	2bb0e <z_log_minimal_printk>
		err = nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a5ec:	4d35      	ldr	r5, [pc, #212]	; (1a6c4 <main+0x160>)
   1a5ee:	4e36      	ldr	r6, [pc, #216]	; (1a6c8 <main+0x164>)
			LOG_DBG("AT Clock Command Error %d... Retrying in 3 seconds.", err);
   1a5f0:	4c36      	ldr	r4, [pc, #216]	; (1a6cc <main+0x168>)
	return z_impl_k_sleep(timeout);
   1a5f2:	2100      	movs	r1, #0
   1a5f4:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   1a5f8:	f00d fb5a 	bl	27cb0 <z_impl_k_sleep>
		err = nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a5fc:	462a      	mov	r2, r5
   1a5fe:	2140      	movs	r1, #64	; 0x40
   1a600:	4630      	mov	r0, r6
   1a602:	f00a ffb5 	bl	25570 <nrf_modem_at_cmd>
		if (err) {
   1a606:	4602      	mov	r2, r0
   1a608:	b120      	cbz	r0, 1a614 <main+0xb0>
			LOG_DBG("AT Clock Command Error %d... Retrying in 3 seconds.", err);
   1a60a:	2144      	movs	r1, #68	; 0x44
   1a60c:	4620      	mov	r0, r4
   1a60e:	f011 fa7e 	bl	2bb0e <z_log_minimal_printk>
	} while (err != 0);
   1a612:	e7ee      	b.n	1a5f2 <main+0x8e>
	LOG_INF("Network time obtained");
   1a614:	2149      	movs	r1, #73	; 0x49
   1a616:	482e      	ldr	r0, [pc, #184]	; (1a6d0 <main+0x16c>)
   1a618:	f011 fa79 	bl	2bb0e <z_log_minimal_printk>
		nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a61c:	4e2a      	ldr	r6, [pc, #168]	; (1a6c8 <main+0x164>)
		LOG_INF("time now22: %i", (ptm->tm_hour));
   1a61e:	4d2d      	ldr	r5, [pc, #180]	; (1a6d4 <main+0x170>)
   1a620:	2100      	movs	r1, #0
   1a622:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   1a626:	f00d fb43 	bl	27cb0 <z_impl_k_sleep>
		nrf_modem_at_cmd(time_buf, sizeof(time_buf), "AT%%CCLK?");
   1a62a:	2140      	movs	r1, #64	; 0x40
   1a62c:	4630      	mov	r0, r6
   1a62e:	4a25      	ldr	r2, [pc, #148]	; (1a6c4 <main+0x160>)
   1a630:	f00a ff9e 	bl	25570 <nrf_modem_at_cmd>
		LOG_INF("time now: %s", time_buf);
   1a634:	4632      	mov	r2, r6
   1a636:	2149      	movs	r1, #73	; 0x49
   1a638:	4827      	ldr	r0, [pc, #156]	; (1a6d8 <main+0x174>)
   1a63a:	f011 fa68 	bl	2bb0e <z_log_minimal_printk>
		date_time_now(&unix_time_ms);
   1a63e:	4668      	mov	r0, sp
   1a640:	f006 fc26 	bl	20e90 <date_time_now>
		time_t nowish = unix_time_ms/1000;
   1a644:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a64c:	2300      	movs	r3, #0
   1a64e:	f7fe fcd7 	bl	19000 <__aeabi_ldivmod>
   1a652:	e9cd 0102 	strd	r0, r1, [sp, #8]
		struct tm *ptm = localtime(&nowish);
   1a656:	a802      	add	r0, sp, #8
   1a658:	f00e fae6 	bl	28c28 <localtime>
		LOG_INF("time now2: %lli", unix_time_ms);
   1a65c:	e9dd 2300 	ldrd	r2, r3, [sp]
		struct tm *ptm = localtime(&nowish);
   1a660:	4604      	mov	r4, r0
		LOG_INF("time now2: %lli", unix_time_ms);
   1a662:	2149      	movs	r1, #73	; 0x49
   1a664:	481d      	ldr	r0, [pc, #116]	; (1a6dc <main+0x178>)
   1a666:	f011 fa52 	bl	2bb0e <z_log_minimal_printk>
		LOG_INF("time now22: %i", (ptm->tm_hour));
   1a66a:	4628      	mov	r0, r5
   1a66c:	68a2      	ldr	r2, [r4, #8]
   1a66e:	2149      	movs	r1, #73	; 0x49
   1a670:	f011 fa4d 	bl	2bb0e <z_log_minimal_printk>
		LOG_INF("time now22: %i", (ptm->tm_min));
   1a674:	4628      	mov	r0, r5
   1a676:	6862      	ldr	r2, [r4, #4]
   1a678:	2149      	movs	r1, #73	; 0x49
   1a67a:	f011 fa48 	bl	2bb0e <z_log_minimal_printk>
		LOG_INF("time nowsek: %i", (ptm->tm_sec));
   1a67e:	6822      	ldr	r2, [r4, #0]
   1a680:	2149      	movs	r1, #73	; 0x49
   1a682:	4817      	ldr	r0, [pc, #92]	; (1a6e0 <main+0x17c>)
   1a684:	f011 fa43 	bl	2bb0e <z_log_minimal_printk>
		LOG_INF("time nowsek: %i", (ptm->tm_isdst));
   1a688:	2149      	movs	r1, #73	; 0x49
   1a68a:	6a22      	ldr	r2, [r4, #32]
   1a68c:	4814      	ldr	r0, [pc, #80]	; (1a6e0 <main+0x17c>)
   1a68e:	f011 fa3e 	bl	2bb0e <z_log_minimal_printk>
	while (true)
   1a692:	e7c5      	b.n	1a620 <main+0xbc>
   1a694:	0002f06e 	.word	0x0002f06e
   1a698:	0002f080 	.word	0x0002f080
   1a69c:	2000ca8c 	.word	0x2000ca8c
   1a6a0:	0001a501 	.word	0x0001a501
   1a6a4:	0002f0e6 	.word	0x0002f0e6
   1a6a8:	0002f10b 	.word	0x0002f10b
   1a6ac:	0002f13a 	.word	0x0002f13a
   1a6b0:	0002f09c 	.word	0x0002f09c
   1a6b4:	0002f0ca 	.word	0x0002f0ca
   1a6b8:	0002f234 	.word	0x0002f234
   1a6bc:	0002f159 	.word	0x0002f159
   1a6c0:	0002f16f 	.word	0x0002f16f
   1a6c4:	0002f1a1 	.word	0x0002f1a1
   1a6c8:	2000d4ce 	.word	0x2000d4ce
   1a6cc:	0002f1ab 	.word	0x0002f1ab
   1a6d0:	0002f251 	.word	0x0002f251
   1a6d4:	0002f20b 	.word	0x0002f20b
   1a6d8:	0002f1e4 	.word	0x0002f1e4
   1a6dc:	0002f1f6 	.word	0x0002f1f6
   1a6e0:	0002f21f 	.word	0x0002f21f

0001a6e4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a6e4:	2803      	cmp	r0, #3
{
   1a6e6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1a6e8:	d906      	bls.n	1a6f8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1a6ea:	f011 fb7b 	bl	2bde4 <__errno>
   1a6ee:	2309      	movs	r3, #9
   1a6f0:	6003      	str	r3, [r0, #0]
   1a6f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   1a6f6:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6f8:	4b04      	ldr	r3, [pc, #16]	; (1a70c <_check_fd+0x28>)
   1a6fa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a6fe:	3008      	adds	r0, #8
   1a700:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   1a704:	2b00      	cmp	r3, #0
   1a706:	d0f0      	beq.n	1a6ea <_check_fd+0x6>
	return 0;
   1a708:	2000      	movs	r0, #0
   1a70a:	e7f4      	b.n	1a6f6 <_check_fd+0x12>
   1a70c:	2000cdb0 	.word	0x2000cdb0

0001a710 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   1a710:	b570      	push	{r4, r5, r6, lr}
   1a712:	4604      	mov	r4, r0
   1a714:	460d      	mov	r5, r1
   1a716:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1a718:	f7ff ffe4 	bl	1a6e4 <_check_fd>
   1a71c:	2800      	cmp	r0, #0
   1a71e:	db09      	blt.n	1a734 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   1a720:	4b06      	ldr	r3, [pc, #24]	; (1a73c <z_get_fd_obj+0x2c>)
   1a722:	0160      	lsls	r0, r4, #5
   1a724:	b145      	cbz	r5, 1a738 <z_get_fd_obj+0x28>
   1a726:	181a      	adds	r2, r3, r0
   1a728:	6852      	ldr	r2, [r2, #4]
   1a72a:	42aa      	cmp	r2, r5
   1a72c:	d004      	beq.n	1a738 <z_get_fd_obj+0x28>
		errno = err;
   1a72e:	f011 fb59 	bl	2bde4 <__errno>
   1a732:	6006      	str	r6, [r0, #0]
		return NULL;
   1a734:	2000      	movs	r0, #0
   1a736:	e000      	b.n	1a73a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   1a738:	5818      	ldr	r0, [r3, r0]
}
   1a73a:	bd70      	pop	{r4, r5, r6, pc}
   1a73c:	2000cdb0 	.word	0x2000cdb0

0001a740 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   1a740:	b570      	push	{r4, r5, r6, lr}
   1a742:	4604      	mov	r4, r0
   1a744:	460e      	mov	r6, r1
   1a746:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1a748:	f7ff ffcc 	bl	1a6e4 <_check_fd>
   1a74c:	2800      	cmp	r0, #0
   1a74e:	db0c      	blt.n	1a76a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   1a750:	4b07      	ldr	r3, [pc, #28]	; (1a770 <z_get_fd_obj_and_vtable+0x30>)
   1a752:	0161      	lsls	r1, r4, #5
   1a754:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1a758:	6862      	ldr	r2, [r4, #4]
   1a75a:	6032      	str	r2, [r6, #0]

	if (lock) {
   1a75c:	b11d      	cbz	r5, 1a766 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   1a75e:	f101 020c 	add.w	r2, r1, #12
   1a762:	441a      	add	r2, r3
   1a764:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   1a766:	5858      	ldr	r0, [r3, r1]
}
   1a768:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1a76a:	2000      	movs	r0, #0
   1a76c:	e7fc      	b.n	1a768 <z_get_fd_obj_and_vtable+0x28>
   1a76e:	bf00      	nop
   1a770:	2000cdb0 	.word	0x2000cdb0

0001a774 <z_reserve_fd>:

int z_reserve_fd(void)
{
   1a774:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a776:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   1a778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a780:	4814      	ldr	r0, [pc, #80]	; (1a7d4 <z_reserve_fd+0x60>)
   1a782:	f00b fdcd 	bl	26320 <z_impl_k_mutex_lock>
   1a786:	4a14      	ldr	r2, [pc, #80]	; (1a7d8 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   1a788:	0163      	lsls	r3, r4, #5
   1a78a:	e8d2 1faf 	lda	r1, [r2]
   1a78e:	b179      	cbz	r1, 1a7b0 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1a790:	3401      	adds	r4, #1
   1a792:	2c04      	cmp	r4, #4
   1a794:	f102 0220 	add.w	r2, r2, #32
   1a798:	d1f6      	bne.n	1a788 <z_reserve_fd+0x14>
	errno = ENFILE;
   1a79a:	f011 fb23 	bl	2bde4 <__errno>
   1a79e:	2317      	movs	r3, #23
	return -1;
   1a7a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   1a7a4:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1a7a6:	480b      	ldr	r0, [pc, #44]	; (1a7d4 <z_reserve_fd+0x60>)
   1a7a8:	f00b fe8c 	bl	264c4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1a7ac:	4620      	mov	r0, r4
   1a7ae:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a7b0:	e8d2 0fef 	ldaex	r0, [r2]
   1a7b4:	3001      	adds	r0, #1
   1a7b6:	e8c2 0fec 	stlex	ip, r0, [r2]
   1a7ba:	f1bc 0f00 	cmp.w	ip, #0
   1a7be:	d1f7      	bne.n	1a7b0 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   1a7c0:	4806      	ldr	r0, [pc, #24]	; (1a7dc <z_reserve_fd+0x68>)
   1a7c2:	18c2      	adds	r2, r0, r3
   1a7c4:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   1a7c6:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   1a7c8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   1a7ca:	4418      	add	r0, r3
   1a7cc:	f013 f879 	bl	2d8c2 <z_impl_k_mutex_init>
   1a7d0:	e7e9      	b.n	1a7a6 <z_reserve_fd+0x32>
   1a7d2:	bf00      	nop
   1a7d4:	2000ca10 	.word	0x2000ca10
   1a7d8:	2000cdb8 	.word	0x2000cdb8
   1a7dc:	2000cdb0 	.word	0x2000cdb0

0001a7e0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   1a7e0:	b410      	push	{r4}
   1a7e2:	4604      	mov	r4, r0
   1a7e4:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1a7e6:	4b09      	ldr	r3, [pc, #36]	; (1a80c <z_finalize_fd+0x2c>)
   1a7e8:	0162      	lsls	r2, r4, #5
   1a7ea:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1a7ee:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   1a7f0:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   1a7f2:	b140      	cbz	r0, 1a806 <z_finalize_fd+0x26>
   1a7f4:	68c4      	ldr	r4, [r0, #12]
   1a7f6:	b134      	cbz	r4, 1a806 <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a7f8:	320c      	adds	r2, #12
   1a7fa:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   1a7fc:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1a7fe:	f240 1205 	movw	r2, #261	; 0x105
   1a802:	f010 bf5e 	b.w	2b6c2 <z_fdtable_call_ioctl.constprop.0>
}
   1a806:	bc10      	pop	{r4}
   1a808:	4770      	bx	lr
   1a80a:	bf00      	nop
   1a80c:	2000cdb0 	.word	0x2000cdb0

0001a810 <z_free_fd>:

void z_free_fd(int fd)
{
   1a810:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1a812:	490d      	ldr	r1, [pc, #52]	; (1a848 <z_free_fd+0x38>)
   1a814:	0140      	lsls	r0, r0, #5
   1a816:	f100 0308 	add.w	r3, r0, #8
   1a81a:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a81c:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   1a820:	b182      	cbz	r2, 1a844 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1a822:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a824:	e8d3 5fef 	ldaex	r5, [r3]
   1a828:	4295      	cmp	r5, r2
   1a82a:	d104      	bne.n	1a836 <z_free_fd+0x26>
   1a82c:	e8c3 4fec 	stlex	ip, r4, [r3]
   1a830:	f1bc 0f00 	cmp.w	ip, #0
   1a834:	d1f6      	bne.n	1a824 <z_free_fd+0x14>
   1a836:	d1f1      	bne.n	1a81c <z_free_fd+0xc>
	if (old_rc != 1) {
   1a838:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   1a83a:	bf01      	itttt	eq
   1a83c:	2300      	moveq	r3, #0
   1a83e:	180a      	addeq	r2, r1, r0
   1a840:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   1a842:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1a844:	bd30      	pop	{r4, r5, pc}
   1a846:	bf00      	nop
   1a848:	2000cdb0 	.word	0x2000cdb0

0001a84c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a84c:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1a84e:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   1a850:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1a854:	2b02      	cmp	r3, #2
{
   1a856:	4604      	mov	r4, r0
   1a858:	460e      	mov	r6, r1
	notify->result = res;
   1a85a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1a85c:	d010      	beq.n	1a880 <sys_notify_finalize+0x34>
   1a85e:	2b03      	cmp	r3, #3
   1a860:	d004      	beq.n	1a86c <sys_notify_finalize+0x20>
   1a862:	2b01      	cmp	r3, #1
   1a864:	d10f      	bne.n	1a886 <sys_notify_finalize+0x3a>
   1a866:	2500      	movs	r5, #0
   1a868:	4628      	mov	r0, r5
   1a86a:	e001      	b.n	1a870 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1a86c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1a86e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a870:	2300      	movs	r3, #0
   1a872:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1a874:	b110      	cbz	r0, 1a87c <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1a876:	4631      	mov	r1, r6
   1a878:	f00e f846 	bl	28908 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a87c:	4628      	mov	r0, r5
   1a87e:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   1a880:	2500      	movs	r5, #0
		sig = notify->method.signal;
   1a882:	6800      	ldr	r0, [r0, #0]
		break;
   1a884:	e7f4      	b.n	1a870 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1a886:	2245      	movs	r2, #69	; 0x45
   1a888:	4904      	ldr	r1, [pc, #16]	; (1a89c <sys_notify_finalize+0x50>)
   1a88a:	4805      	ldr	r0, [pc, #20]	; (1a8a0 <sys_notify_finalize+0x54>)
   1a88c:	f010 ff8e 	bl	2b7ac <printk>
   1a890:	2145      	movs	r1, #69	; 0x45
   1a892:	4802      	ldr	r0, [pc, #8]	; (1a89c <sys_notify_finalize+0x50>)
   1a894:	f011 f921 	bl	2bada <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1a898:	2500      	movs	r5, #0
   1a89a:	e7e8      	b.n	1a86e <sys_notify_finalize+0x22>
   1a89c:	0002f273 	.word	0x0002f273
   1a8a0:	0002f296 	.word	0x0002f296

0001a8a4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1a8a4:	680b      	ldr	r3, [r1, #0]
   1a8a6:	3301      	adds	r3, #1
   1a8a8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1a8aa:	4b01      	ldr	r3, [pc, #4]	; (1a8b0 <char_out+0xc>)
   1a8ac:	681b      	ldr	r3, [r3, #0]
   1a8ae:	4718      	bx	r3
   1a8b0:	2000c588 	.word	0x2000c588

0001a8b4 <__printk_hook_install>:
	_char_out = fn;
   1a8b4:	4b01      	ldr	r3, [pc, #4]	; (1a8bc <__printk_hook_install+0x8>)
   1a8b6:	6018      	str	r0, [r3, #0]
}
   1a8b8:	4770      	bx	lr
   1a8ba:	bf00      	nop
   1a8bc:	2000c588 	.word	0x2000c588

0001a8c0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   1a8c0:	b507      	push	{r0, r1, r2, lr}
   1a8c2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   1a8c4:	2100      	movs	r1, #0
{
   1a8c6:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   1a8c8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   1a8ca:	4803      	ldr	r0, [pc, #12]	; (1a8d8 <vprintk+0x18>)
   1a8cc:	a901      	add	r1, sp, #4
   1a8ce:	f000 fc71 	bl	1b1b4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   1a8d2:	b003      	add	sp, #12
   1a8d4:	f85d fb04 	ldr.w	pc, [sp], #4
   1a8d8:	0001a8a5 	.word	0x0001a8a5

0001a8dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1a8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a8e0:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
   1a8e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1a8e6:	f01a 0f08 	tst.w	sl, #8
{
   1a8ea:	4693      	mov	fp, r2
	if (processing) {
   1a8ec:	d01c      	beq.n	1a928 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
   1a8ee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1a8f0:	bf0c      	ite	eq
   1a8f2:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a8f6:	f04a 0a20 	orrne.w	sl, sl, #32
   1a8fa:	f8a0 a01c 	strh.w	sl, [r0, #28]
   1a8fe:	f104 0014 	add.w	r0, r4, #20
   1a902:	f00b fcc9 	bl	26298 <z_spin_unlock_valid>
   1a906:	b940      	cbnz	r0, 1a91a <process_event+0x3e>
   1a908:	4992      	ldr	r1, [pc, #584]	; (1ab54 <process_event+0x278>)
   1a90a:	4893      	ldr	r0, [pc, #588]	; (1ab58 <process_event+0x27c>)
   1a90c:	22b9      	movs	r2, #185	; 0xb9
   1a90e:	f010 ff4d 	bl	2b7ac <printk>
   1a912:	21b9      	movs	r1, #185	; 0xb9
   1a914:	488f      	ldr	r0, [pc, #572]	; (1ab54 <process_event+0x278>)
   1a916:	f011 f8e0 	bl	2bada <assert_post_action>
   1a91a:	f38b 8811 	msr	BASEPRI, fp
   1a91e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1a922:	b003      	add	sp, #12
   1a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1a928:	4f8c      	ldr	r7, [pc, #560]	; (1ab5c <process_event+0x280>)
   1a92a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1ab58 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a92e:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   1a932:	2902      	cmp	r1, #2
   1a934:	d106      	bne.n	1a944 <process_event+0x68>
			evt = process_recheck(mgr);
   1a936:	4620      	mov	r0, r4
   1a938:	f010 ff45 	bl	2b7c6 <process_recheck>
		if (evt == EVT_NOP) {
   1a93c:	2800      	cmp	r0, #0
   1a93e:	d0de      	beq.n	1a8fe <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1a940:	2801      	cmp	r0, #1
   1a942:	d163      	bne.n	1aa0c <process_event+0x130>
			res = mgr->last_res;
   1a944:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a948:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1a94a:	f1b9 0f00 	cmp.w	r9, #0
   1a94e:	da19      	bge.n	1a984 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1a950:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1a952:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a954:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1a958:	e9c4 6600 	strd	r6, r6, [r4]
   1a95c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a960:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a962:	8ba3      	ldrh	r3, [r4, #28]
   1a964:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1a968:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1a96a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
   1a96c:	d003      	beq.n	1a976 <process_event+0x9a>
		if (do_monitors
   1a96e:	68a2      	ldr	r2, [r4, #8]
   1a970:	2a00      	cmp	r2, #0
   1a972:	f040 80f5 	bne.w	1ab60 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
   1a976:	b915      	cbnz	r5, 1a97e <process_event+0xa2>
		    || (transit != NULL)) {
   1a978:	2e00      	cmp	r6, #0
   1a97a:	f000 812f 	beq.w	1abdc <process_event+0x300>
   1a97e:	f04f 0a00 	mov.w	sl, #0
   1a982:	e0ef      	b.n	1ab64 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a984:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1a988:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1a98a:	2901      	cmp	r1, #1
   1a98c:	d820      	bhi.n	1a9d0 <process_event+0xf4>
	list->head = NULL;
   1a98e:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a990:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1a994:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1a996:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a998:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1a99a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1a99e:	d10a      	bne.n	1a9b6 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1a9a0:	b13d      	cbz	r5, 1a9b2 <process_event+0xd6>
   1a9a2:	4629      	mov	r1, r5
   1a9a4:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1a9a6:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   1a9a8:	3201      	adds	r2, #1
   1a9aa:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1a9ac:	2900      	cmp	r1, #0
   1a9ae:	d1fa      	bne.n	1a9a6 <process_event+0xca>
   1a9b0:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a9b2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1a9b6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a9b8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1a9ba:	f010 ff04 	bl	2b7c6 <process_recheck>
   1a9be:	4606      	mov	r6, r0
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	d0ce      	beq.n	1a962 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a9c4:	8ba3      	ldrh	r3, [r4, #28]
   1a9c6:	f043 0320 	orr.w	r3, r3, #32
   1a9ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1a9cc:	2600      	movs	r6, #0
   1a9ce:	e7c8      	b.n	1a962 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1a9d0:	2a04      	cmp	r2, #4
   1a9d2:	d10d      	bne.n	1a9f0 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1a9d4:	f023 0307 	bic.w	r3, r3, #7
   1a9d8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   1a9da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1a9dc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1a9de:	f010 fef2 	bl	2b7c6 <process_recheck>
   1a9e2:	4605      	mov	r5, r0
   1a9e4:	b180      	cbz	r0, 1aa08 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1a9e6:	f042 0220 	orr.w	r2, r2, #32
   1a9ea:	2500      	movs	r5, #0
   1a9ec:	83a2      	strh	r2, [r4, #28]
   1a9ee:	e7ed      	b.n	1a9cc <process_event+0xf0>
		__ASSERT_NO_MSG(false);
   1a9f0:	f240 121b 	movw	r2, #283	; 0x11b
   1a9f4:	4639      	mov	r1, r7
   1a9f6:	4640      	mov	r0, r8
   1a9f8:	f010 fed8 	bl	2b7ac <printk>
   1a9fc:	f240 111b 	movw	r1, #283	; 0x11b
   1aa00:	4638      	mov	r0, r7
   1aa02:	f011 f86a 	bl	2bada <assert_post_action>
   1aa06:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1aa08:	462e      	mov	r6, r5
   1aa0a:	e7aa      	b.n	1a962 <process_event+0x86>
		} else if (evt == EVT_START) {
   1aa0c:	2803      	cmp	r0, #3
   1aa0e:	d131      	bne.n	1aa74 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1aa10:	f1ba 0f00 	cmp.w	sl, #0
   1aa14:	d00a      	beq.n	1aa2c <process_event+0x150>
   1aa16:	4639      	mov	r1, r7
   1aa18:	4640      	mov	r0, r8
   1aa1a:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1aa1e:	f010 fec5 	bl	2b7ac <printk>
   1aa22:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1aa26:	4638      	mov	r0, r7
   1aa28:	f011 f857 	bl	2bada <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1aa2c:	6823      	ldr	r3, [r4, #0]
   1aa2e:	b953      	cbnz	r3, 1aa46 <process_event+0x16a>
   1aa30:	4639      	mov	r1, r7
   1aa32:	4640      	mov	r0, r8
   1aa34:	f240 1257 	movw	r2, #343	; 0x157
   1aa38:	f010 feb8 	bl	2b7ac <printk>
   1aa3c:	f240 1157 	movw	r1, #343	; 0x157
   1aa40:	4638      	mov	r0, r7
   1aa42:	f011 f84a 	bl	2bada <assert_post_action>
			transit = mgr->transitions->start;
   1aa46:	6923      	ldr	r3, [r4, #16]
   1aa48:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1aa4a:	b956      	cbnz	r6, 1aa62 <process_event+0x186>
   1aa4c:	4639      	mov	r1, r7
   1aa4e:	4640      	mov	r0, r8
   1aa50:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   1aa54:	f010 feaa 	bl	2b7ac <printk>
   1aa58:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1aa5c:	4638      	mov	r0, r7
   1aa5e:	f011 f83c 	bl	2bada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1aa62:	8ba3      	ldrh	r3, [r4, #28]
   1aa64:	f023 0307 	bic.w	r3, r3, #7
   1aa68:	f043 0306 	orr.w	r3, r3, #6
}
   1aa6c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1aa6e:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1aa70:	46a9      	mov	r9, r5
}
   1aa72:	e776      	b.n	1a962 <process_event+0x86>
		} else if (evt == EVT_STOP) {
   1aa74:	2804      	cmp	r0, #4
   1aa76:	d12e      	bne.n	1aad6 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1aa78:	f1ba 0f02 	cmp.w	sl, #2
   1aa7c:	d00a      	beq.n	1aa94 <process_event+0x1b8>
   1aa7e:	4639      	mov	r1, r7
   1aa80:	4640      	mov	r0, r8
   1aa82:	f240 125d 	movw	r2, #349	; 0x15d
   1aa86:	f010 fe91 	bl	2b7ac <printk>
   1aa8a:	f240 115d 	movw	r1, #349	; 0x15d
   1aa8e:	4638      	mov	r0, r7
   1aa90:	f011 f823 	bl	2bada <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1aa94:	8be3      	ldrh	r3, [r4, #30]
   1aa96:	b153      	cbz	r3, 1aaae <process_event+0x1d2>
   1aa98:	4639      	mov	r1, r7
   1aa9a:	4640      	mov	r0, r8
   1aa9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
   1aaa0:	f010 fe84 	bl	2b7ac <printk>
   1aaa4:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1aaa8:	4638      	mov	r0, r7
   1aaaa:	f011 f816 	bl	2bada <assert_post_action>
			transit = mgr->transitions->stop;
   1aaae:	6923      	ldr	r3, [r4, #16]
   1aab0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1aab2:	b956      	cbnz	r6, 1aaca <process_event+0x1ee>
   1aab4:	4639      	mov	r1, r7
   1aab6:	4640      	mov	r0, r8
   1aab8:	f240 1261 	movw	r2, #353	; 0x161
   1aabc:	f010 fe76 	bl	2b7ac <printk>
   1aac0:	f240 1161 	movw	r1, #353	; 0x161
   1aac4:	4638      	mov	r0, r7
   1aac6:	f011 f808 	bl	2bada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1aaca:	8ba3      	ldrh	r3, [r4, #28]
   1aacc:	f023 0307 	bic.w	r3, r3, #7
   1aad0:	f043 0304 	orr.w	r3, r3, #4
   1aad4:	e7ca      	b.n	1aa6c <process_event+0x190>
		} else if (evt == EVT_RESET) {
   1aad6:	2805      	cmp	r0, #5
   1aad8:	d12e      	bne.n	1ab38 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1aada:	f1ba 0f01 	cmp.w	sl, #1
   1aade:	d00a      	beq.n	1aaf6 <process_event+0x21a>
   1aae0:	4639      	mov	r1, r7
   1aae2:	4640      	mov	r0, r8
   1aae4:	f44f 72b2 	mov.w	r2, #356	; 0x164
   1aae8:	f010 fe60 	bl	2b7ac <printk>
   1aaec:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1aaf0:	4638      	mov	r0, r7
   1aaf2:	f010 fff2 	bl	2bada <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1aaf6:	6823      	ldr	r3, [r4, #0]
   1aaf8:	b953      	cbnz	r3, 1ab10 <process_event+0x234>
   1aafa:	4639      	mov	r1, r7
   1aafc:	4640      	mov	r0, r8
   1aafe:	f240 1265 	movw	r2, #357	; 0x165
   1ab02:	f010 fe53 	bl	2b7ac <printk>
   1ab06:	f240 1165 	movw	r1, #357	; 0x165
   1ab0a:	4638      	mov	r0, r7
   1ab0c:	f010 ffe5 	bl	2bada <assert_post_action>
			transit = mgr->transitions->reset;
   1ab10:	6923      	ldr	r3, [r4, #16]
   1ab12:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   1ab14:	b956      	cbnz	r6, 1ab2c <process_event+0x250>
   1ab16:	4639      	mov	r1, r7
   1ab18:	4640      	mov	r0, r8
   1ab1a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1ab1e:	f010 fe45 	bl	2b7ac <printk>
   1ab22:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1ab26:	4638      	mov	r0, r7
   1ab28:	f010 ffd7 	bl	2bada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1ab2c:	8ba3      	ldrh	r3, [r4, #28]
   1ab2e:	f023 0307 	bic.w	r3, r3, #7
   1ab32:	f043 0305 	orr.w	r3, r3, #5
   1ab36:	e799      	b.n	1aa6c <process_event+0x190>
			__ASSERT_NO_MSG(false);
   1ab38:	2500      	movs	r5, #0
   1ab3a:	f240 126b 	movw	r2, #363	; 0x16b
   1ab3e:	4639      	mov	r1, r7
   1ab40:	4640      	mov	r0, r8
   1ab42:	f010 fe33 	bl	2b7ac <printk>
   1ab46:	f240 116b 	movw	r1, #363	; 0x16b
   1ab4a:	4638      	mov	r0, r7
   1ab4c:	f010 ffc5 	bl	2bada <assert_post_action>
		onoff_transition_fn transit = NULL;
   1ab50:	462e      	mov	r6, r5
   1ab52:	e78d      	b.n	1aa70 <process_event+0x194>
   1ab54:	0002f2d0 	.word	0x0002f2d0
   1ab58:	0002f296 	.word	0x0002f296
   1ab5c:	0002f2ae 	.word	0x0002f2ae
				   && !sys_slist_is_empty(&mgr->monitors);
   1ab60:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1ab64:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1ab68:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   1ab6a:	f104 0314 	add.w	r3, r4, #20
   1ab6e:	4618      	mov	r0, r3
   1ab70:	9301      	str	r3, [sp, #4]
   1ab72:	f00b fb91 	bl	26298 <z_spin_unlock_valid>
   1ab76:	b940      	cbnz	r0, 1ab8a <process_event+0x2ae>
   1ab78:	4640      	mov	r0, r8
   1ab7a:	4931      	ldr	r1, [pc, #196]	; (1ac40 <process_event+0x364>)
   1ab7c:	22b9      	movs	r2, #185	; 0xb9
   1ab7e:	f010 fe15 	bl	2b7ac <printk>
   1ab82:	21b9      	movs	r1, #185	; 0xb9
   1ab84:	482e      	ldr	r0, [pc, #184]	; (1ac40 <process_event+0x364>)
   1ab86:	f010 ffa8 	bl	2bada <assert_post_action>
   1ab8a:	f38b 8811 	msr	BASEPRI, fp
   1ab8e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1ab92:	f1ba 0f00 	cmp.w	sl, #0
   1ab96:	d130      	bne.n	1abfa <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
   1ab98:	2d00      	cmp	r5, #0
   1ab9a:	d140      	bne.n	1ac1e <process_event+0x342>
			if (transit != NULL) {
   1ab9c:	b116      	cbz	r6, 1aba4 <process_event+0x2c8>
				transit(mgr, transition_complete);
   1ab9e:	4620      	mov	r0, r4
   1aba0:	4928      	ldr	r1, [pc, #160]	; (1ac44 <process_event+0x368>)
   1aba2:	47b0      	blx	r6
	__asm__ volatile(
   1aba4:	f04f 0320 	mov.w	r3, #32
   1aba8:	f3ef 8b11 	mrs	fp, BASEPRI
   1abac:	f383 8812 	msr	BASEPRI_MAX, r3
   1abb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1abb4:	9801      	ldr	r0, [sp, #4]
   1abb6:	f00b fb61 	bl	2627c <z_spin_lock_valid>
   1abba:	b940      	cbnz	r0, 1abce <process_event+0x2f2>
   1abbc:	4640      	mov	r0, r8
   1abbe:	4920      	ldr	r1, [pc, #128]	; (1ac40 <process_event+0x364>)
   1abc0:	228e      	movs	r2, #142	; 0x8e
   1abc2:	f010 fdf3 	bl	2b7ac <printk>
   1abc6:	218e      	movs	r1, #142	; 0x8e
   1abc8:	481d      	ldr	r0, [pc, #116]	; (1ac40 <process_event+0x364>)
   1abca:	f010 ff86 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   1abce:	9801      	ldr	r0, [sp, #4]
   1abd0:	f00b fb70 	bl	262b4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1abd4:	8ba3      	ldrh	r3, [r4, #28]
   1abd6:	f023 0308 	bic.w	r3, r3, #8
   1abda:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1abdc:	8ba3      	ldrh	r3, [r4, #28]
   1abde:	06da      	lsls	r2, r3, #27
   1abe0:	d525      	bpl.n	1ac2e <process_event+0x352>
			evt = EVT_COMPLETE;
   1abe2:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1abe4:	f023 0310 	bic.w	r3, r3, #16
   1abe8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1abea:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   1abee:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
   1abf2:	2900      	cmp	r1, #0
   1abf4:	f47f ae9d 	bne.w	1a932 <process_event+0x56>
out:
   1abf8:	e681      	b.n	1a8fe <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1abfa:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1abfc:	2900      	cmp	r1, #0
   1abfe:	d0cb      	beq.n	1ab98 <process_event+0x2bc>
	return node->next;
   1ac00:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   1ac04:	464b      	mov	r3, r9
   1ac06:	4620      	mov	r0, r4
   1ac08:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1ac0c:	9a00      	ldr	r2, [sp, #0]
   1ac0e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1ac10:	f1ba 0f00 	cmp.w	sl, #0
   1ac14:	d0c0      	beq.n	1ab98 <process_event+0x2bc>
   1ac16:	4651      	mov	r1, sl
   1ac18:	f8da a000 	ldr.w	sl, [sl]
   1ac1c:	e7f2      	b.n	1ac04 <process_event+0x328>
   1ac1e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1ac20:	464b      	mov	r3, r9
   1ac22:	4620      	mov	r0, r4
   1ac24:	9a00      	ldr	r2, [sp, #0]
   1ac26:	682d      	ldr	r5, [r5, #0]
   1ac28:	f010 fde9 	bl	2b7fe <notify_one>
   1ac2c:	e7b4      	b.n	1ab98 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1ac2e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1ac32:	bf1e      	ittt	ne
   1ac34:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1ac38:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1ac3a:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   1ac3c:	e7d5      	b.n	1abea <process_event+0x30e>
   1ac3e:	bf00      	nop
   1ac40:	0002f2d0 	.word	0x0002f2d0
   1ac44:	0001ac49 	.word	0x0001ac49

0001ac48 <transition_complete>:
{
   1ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac4a:	4604      	mov	r4, r0
   1ac4c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1ac4e:	f100 0614 	add.w	r6, r0, #20
   1ac52:	f04f 0320 	mov.w	r3, #32
   1ac56:	f3ef 8711 	mrs	r7, BASEPRI
   1ac5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac62:	4630      	mov	r0, r6
   1ac64:	f00b fb0a 	bl	2627c <z_spin_lock_valid>
   1ac68:	b940      	cbnz	r0, 1ac7c <transition_complete+0x34>
   1ac6a:	490a      	ldr	r1, [pc, #40]	; (1ac94 <transition_complete+0x4c>)
   1ac6c:	480a      	ldr	r0, [pc, #40]	; (1ac98 <transition_complete+0x50>)
   1ac6e:	228e      	movs	r2, #142	; 0x8e
   1ac70:	f010 fd9c 	bl	2b7ac <printk>
   1ac74:	218e      	movs	r1, #142	; 0x8e
   1ac76:	4807      	ldr	r0, [pc, #28]	; (1ac94 <transition_complete+0x4c>)
   1ac78:	f010 ff2f 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac7c:	4630      	mov	r0, r6
   1ac7e:	f00b fb19 	bl	262b4 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   1ac82:	463a      	mov	r2, r7
   1ac84:	4620      	mov	r0, r4
	mgr->last_res = res;
   1ac86:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1ac88:	2101      	movs	r1, #1
}
   1ac8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1ac8e:	f7ff be25 	b.w	1a8dc <process_event>
   1ac92:	bf00      	nop
   1ac94:	0002f2d0 	.word	0x0002f2d0
   1ac98:	0002f296 	.word	0x0002f296

0001ac9c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aca0:	4604      	mov	r4, r0
   1aca2:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1aca4:	f010 fdc1 	bl	2b82a <validate_args>

	if (rv < 0) {
   1aca8:	1e05      	subs	r5, r0, #0
   1acaa:	db54      	blt.n	1ad56 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1acac:	f104 0914 	add.w	r9, r4, #20
   1acb0:	f04f 0320 	mov.w	r3, #32
   1acb4:	f3ef 8a11 	mrs	sl, BASEPRI
   1acb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1acbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1acc0:	4648      	mov	r0, r9
   1acc2:	f00b fadb 	bl	2627c <z_spin_lock_valid>
   1acc6:	b940      	cbnz	r0, 1acda <onoff_request+0x3e>
   1acc8:	4933      	ldr	r1, [pc, #204]	; (1ad98 <onoff_request+0xfc>)
   1acca:	4834      	ldr	r0, [pc, #208]	; (1ad9c <onoff_request+0x100>)
   1accc:	228e      	movs	r2, #142	; 0x8e
   1acce:	f010 fd6d 	bl	2b7ac <printk>
   1acd2:	218e      	movs	r1, #142	; 0x8e
   1acd4:	4830      	ldr	r0, [pc, #192]	; (1ad98 <onoff_request+0xfc>)
   1acd6:	f010 ff00 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   1acda:	4648      	mov	r0, r9
   1acdc:	f00b faea 	bl	262b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ace0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ace4:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ace6:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1ace8:	428b      	cmp	r3, r1
   1acea:	f002 0607 	and.w	r6, r2, #7
   1acee:	d04a      	beq.n	1ad86 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1acf0:	2e02      	cmp	r6, #2
   1acf2:	d11f      	bne.n	1ad34 <onoff_request+0x98>
	rv = state;
   1acf4:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   1acf6:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   1acfa:	3301      	adds	r3, #1
   1acfc:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1acfe:	4648      	mov	r0, r9
   1ad00:	f00b faca 	bl	26298 <z_spin_unlock_valid>
   1ad04:	b940      	cbnz	r0, 1ad18 <onoff_request+0x7c>
   1ad06:	4924      	ldr	r1, [pc, #144]	; (1ad98 <onoff_request+0xfc>)
   1ad08:	4824      	ldr	r0, [pc, #144]	; (1ad9c <onoff_request+0x100>)
   1ad0a:	22b9      	movs	r2, #185	; 0xb9
   1ad0c:	f010 fd4e 	bl	2b7ac <printk>
   1ad10:	21b9      	movs	r1, #185	; 0xb9
   1ad12:	4821      	ldr	r0, [pc, #132]	; (1ad98 <onoff_request+0xfc>)
   1ad14:	f010 fee1 	bl	2bada <assert_post_action>
	__asm__ volatile(
   1ad18:	f38a 8811 	msr	BASEPRI, sl
   1ad1c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ad20:	f1b8 0f00 	cmp.w	r8, #0
   1ad24:	d017      	beq.n	1ad56 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   1ad26:	2300      	movs	r3, #0
   1ad28:	4632      	mov	r2, r6
   1ad2a:	4639      	mov	r1, r7
   1ad2c:	4620      	mov	r0, r4
   1ad2e:	f010 fd66 	bl	2b7fe <notify_one>
   1ad32:	e010      	b.n	1ad56 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   1ad34:	0793      	lsls	r3, r2, #30
   1ad36:	d001      	beq.n	1ad3c <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ad38:	2e06      	cmp	r6, #6
   1ad3a:	d10f      	bne.n	1ad5c <onoff_request+0xc0>
	parent->next = child;
   1ad3c:	2300      	movs	r3, #0
   1ad3e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   1ad40:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1ad42:	b9eb      	cbnz	r3, 1ad80 <onoff_request+0xe4>
	list->head = node;
   1ad44:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1ad48:	4635      	mov	r5, r6
   1ad4a:	b9f6      	cbnz	r6, 1ad8a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   1ad4c:	4652      	mov	r2, sl
   1ad4e:	2102      	movs	r1, #2
   1ad50:	4620      	mov	r0, r4
   1ad52:	f7ff fdc3 	bl	1a8dc <process_event>
		}
	}

	return rv;
}
   1ad56:	4628      	mov	r0, r5
   1ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1ad5c:	2e05      	cmp	r6, #5
   1ad5e:	d017      	beq.n	1ad90 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1ad60:	2e01      	cmp	r6, #1
   1ad62:	d00a      	beq.n	1ad7a <onoff_request+0xde>
   1ad64:	490e      	ldr	r1, [pc, #56]	; (1ada0 <onoff_request+0x104>)
   1ad66:	480d      	ldr	r0, [pc, #52]	; (1ad9c <onoff_request+0x100>)
   1ad68:	f240 12c9 	movw	r2, #457	; 0x1c9
   1ad6c:	f010 fd1e 	bl	2b7ac <printk>
   1ad70:	f240 11c9 	movw	r1, #457	; 0x1c9
   1ad74:	480a      	ldr	r0, [pc, #40]	; (1ada0 <onoff_request+0x104>)
   1ad76:	f010 feb0 	bl	2bada <assert_post_action>
		rv = -EIO;
   1ad7a:	f06f 0504 	mvn.w	r5, #4
   1ad7e:	e004      	b.n	1ad8a <onoff_request+0xee>
	parent->next = child;
   1ad80:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1ad82:	6067      	str	r7, [r4, #4]
}
   1ad84:	e7e0      	b.n	1ad48 <onoff_request+0xac>
		rv = -EAGAIN;
   1ad86:	f06f 050a 	mvn.w	r5, #10
   1ad8a:	f04f 0800 	mov.w	r8, #0
   1ad8e:	e7b6      	b.n	1acfe <onoff_request+0x62>
		rv = -ENOTSUP;
   1ad90:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1ad94:	e7f9      	b.n	1ad8a <onoff_request+0xee>
   1ad96:	bf00      	nop
   1ad98:	0002f2d0 	.word	0x0002f2d0
   1ad9c:	0002f296 	.word	0x0002f296
   1ada0:	0002f2ae 	.word	0x0002f2ae

0001ada4 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   1ada4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   1ada8:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1adaa:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   1adac:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1adae:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   1adb2:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1adb4:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   1adb6:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1adb8:	18e4      	adds	r4, r4, r3
   1adba:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   1adbe:	2d02      	cmp	r5, #2
   1adc0:	bf8c      	ite	hi
   1adc2:	2300      	movhi	r3, #0
   1adc4:	2301      	movls	r3, #1
   1adc6:	1ae4      	subs	r4, r4, r3
   1adc8:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1adcc:	2900      	cmp	r1, #0
{
   1adce:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1add0:	da55      	bge.n	1ae7e <timeutil_timegm64+0xda>
   1add2:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1add6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1adda:	2300      	movs	r3, #0
   1addc:	1820      	adds	r0, r4, r0
   1adde:	f161 0100 	sbc.w	r1, r1, #0
   1ade2:	f7fe f90d 	bl	19000 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   1ade6:	4b28      	ldr	r3, [pc, #160]	; (1ae88 <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1ade8:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   1adea:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1adee:	e9d8 9000 	ldrd	r9, r0, [r8]
   1adf2:	233c      	movs	r3, #60	; 0x3c
   1adf4:	f8d8 8008 	ldr.w	r8, [r8, #8]
   1adf8:	17c6      	asrs	r6, r0, #31
   1adfa:	fbc8 0603 	smlal	r0, r6, r8, r3
   1adfe:	46b4      	mov	ip, r6
   1ae00:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1ae04:	2d02      	cmp	r5, #2
   1ae06:	bf8c      	ite	hi
   1ae08:	f06f 0e02 	mvnhi.w	lr, #2
   1ae0c:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1ae10:	fb03 660c 	mla	r6, r3, ip, r6
   1ae14:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1ae18:	f240 106d 	movw	r0, #365	; 0x16d
   1ae1c:	ea4f 0394 	mov.w	r3, r4, lsr #2
   1ae20:	fb00 3304 	mla	r3, r0, r4, r3
   1ae24:	f04f 0064 	mov.w	r0, #100	; 0x64
   1ae28:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1ae2c:	eb05 000e 	add.w	r0, r5, lr
   1ae30:	f04f 0599 	mov.w	r5, #153	; 0x99
   1ae34:	fb05 f000 	mul.w	r0, r5, r0
   1ae38:	f04f 0505 	mov.w	r5, #5
   1ae3c:	f100 0002 	add.w	r0, r0, #2
   1ae40:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1ae44:	443b      	add	r3, r7
   1ae46:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   1ae4a:	4c10      	ldr	r4, [pc, #64]	; (1ae8c <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1ae4c:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   1ae4e:	fba2 0204 	umull	r0, r2, r2, r4
   1ae52:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1ae56:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   1ae5a:	181b      	adds	r3, r3, r0
   1ae5c:	480c      	ldr	r0, [pc, #48]	; (1ae90 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   1ae5e:	4a0d      	ldr	r2, [pc, #52]	; (1ae94 <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   1ae60:	f141 0100 	adc.w	r1, r1, #0
   1ae64:	1818      	adds	r0, r3, r0
	time += 86400LL * ndays;
   1ae66:	fba0 0302 	umull	r0, r3, r0, r2
	return era * 146097 + (time_t)doe - 719468;
   1ae6a:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   1ae6e:	fb02 3101 	mla	r1, r2, r1, r3
   1ae72:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   1ae76:	eb41 0106 	adc.w	r1, r1, r6
   1ae7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1ae7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1ae82:	2300      	movs	r3, #0
   1ae84:	4620      	mov	r0, r4
   1ae86:	e7ac      	b.n	1ade2 <timeutil_timegm64+0x3e>
   1ae88:	fffffe70 	.word	0xfffffe70
   1ae8c:	00023ab1 	.word	0x00023ab1
   1ae90:	fff50594 	.word	0xfff50594
   1ae94:	00015180 	.word	0x00015180

0001ae98 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1ae98:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   1ae9a:	b379      	cbz	r1, 1aefc <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1ae9c:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ae9e:	1f0c      	subs	r4, r1, #4
   1aea0:	1b64      	subs	r4, r4, r5
   1aea2:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1aea4:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1aea8:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1aeaa:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1aeac:	07db      	lsls	r3, r3, #31
   1aeae:	d408      	bmi.n	1aec2 <sys_heap_free+0x2a>
   1aeb0:	4913      	ldr	r1, [pc, #76]	; (1af00 <sys_heap_free+0x68>)
   1aeb2:	4814      	ldr	r0, [pc, #80]	; (1af04 <sys_heap_free+0x6c>)
   1aeb4:	22a4      	movs	r2, #164	; 0xa4
   1aeb6:	f010 fc79 	bl	2b7ac <printk>
   1aeba:	21a4      	movs	r1, #164	; 0xa4
   1aebc:	4810      	ldr	r0, [pc, #64]	; (1af00 <sys_heap_free+0x68>)
   1aebe:	f010 fe0c 	bl	2bada <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1aec2:	4631      	mov	r1, r6
   1aec4:	4628      	mov	r0, r5
   1aec6:	f010 fcdc 	bl	2b882 <chunk_size>
   1aeca:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   1aecc:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1aed0:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1aed2:	4286      	cmp	r6, r0
   1aed4:	d008      	beq.n	1aee8 <sys_heap_free+0x50>
   1aed6:	490a      	ldr	r1, [pc, #40]	; (1af00 <sys_heap_free+0x68>)
   1aed8:	480a      	ldr	r0, [pc, #40]	; (1af04 <sys_heap_free+0x6c>)
   1aeda:	22ac      	movs	r2, #172	; 0xac
   1aedc:	f010 fc66 	bl	2b7ac <printk>
   1aee0:	21ac      	movs	r1, #172	; 0xac
   1aee2:	4807      	ldr	r0, [pc, #28]	; (1af00 <sys_heap_free+0x68>)
   1aee4:	f010 fdf9 	bl	2bada <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1aee8:	8863      	ldrh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   1aeea:	4631      	mov	r1, r6
   1aeec:	f023 0301 	bic.w	r3, r3, #1
   1aef0:	4628      	mov	r0, r5
   1aef2:	8063      	strh	r3, [r4, #2]
}
   1aef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   1aef8:	f010 bd7f 	b.w	2b9fa <free_chunk>
}
   1aefc:	bd70      	pop	{r4, r5, r6, pc}
   1aefe:	bf00      	nop
   1af00:	0002f2f6 	.word	0x0002f2f6
   1af04:	0002f296 	.word	0x0002f296

0001af08 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1af08:	424b      	negs	r3, r1
{
   1af0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1af0e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1af12:	ea31 0303 	bics.w	r3, r1, r3
{
   1af16:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1af18:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   1af1a:	d01b      	beq.n	1af54 <sys_heap_aligned_alloc+0x4c>
		return false;
   1af1c:	2f04      	cmp	r7, #4
   1af1e:	463d      	mov	r5, r7
   1af20:	bf28      	it	cs
   1af22:	2504      	movcs	r5, #4
   1af24:	46b9      	mov	r9, r7
		align -= rew;
   1af26:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1af28:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
   1af2c:	ea1a 0f07 	tst.w	sl, r7
   1af30:	d00a      	beq.n	1af48 <sys_heap_aligned_alloc+0x40>
   1af32:	4931      	ldr	r1, [pc, #196]	; (1aff8 <sys_heap_aligned_alloc+0xf0>)
   1af34:	4831      	ldr	r0, [pc, #196]	; (1affc <sys_heap_aligned_alloc+0xf4>)
   1af36:	f44f 729c 	mov.w	r2, #312	; 0x138
   1af3a:	f010 fc37 	bl	2b7ac <printk>
   1af3e:	f44f 719c 	mov.w	r1, #312	; 0x138
   1af42:	482d      	ldr	r0, [pc, #180]	; (1aff8 <sys_heap_aligned_alloc+0xf0>)
   1af44:	f010 fdc9 	bl	2bada <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1af48:	b97c      	cbnz	r4, 1af6a <sys_heap_aligned_alloc+0x62>
		return NULL;
   1af4a:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1af4e:	4648      	mov	r0, r9
   1af50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1af54:	2904      	cmp	r1, #4
   1af56:	d804      	bhi.n	1af62 <sys_heap_aligned_alloc+0x5a>
}
   1af58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1af5c:	4611      	mov	r1, r2
   1af5e:	f010 bd7d 	b.w	2ba5c <sys_heap_alloc>
		rew = 0;
   1af62:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1af66:	2504      	movs	r5, #4
   1af68:	e7de      	b.n	1af28 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1af6a:	68b3      	ldr	r3, [r6, #8]
   1af6c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1af70:	d9eb      	bls.n	1af4a <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1af72:	f104 010b 	add.w	r1, r4, #11
   1af76:	4439      	add	r1, r7
   1af78:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1af7a:	4630      	mov	r0, r6
   1af7c:	08c9      	lsrs	r1, r1, #3
   1af7e:	f010 fcd6 	bl	2b92e <alloc_chunk>
	if (c0 == 0) {
   1af82:	4680      	mov	r8, r0
   1af84:	2800      	cmp	r0, #0
   1af86:	d0e0      	beq.n	1af4a <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1af88:	f109 0504 	add.w	r5, r9, #4
   1af8c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1af90:	4435      	add	r5, r6
   1af92:	4455      	add	r5, sl
   1af94:	427f      	negs	r7, r7
   1af96:	402f      	ands	r7, r5
   1af98:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1af9c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1af9e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1afa2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1afa4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1afa6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1afaa:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1afac:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1afb0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1afb4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1afb8:	d208      	bcs.n	1afcc <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   1afba:	4601      	mov	r1, r0
   1afbc:	463a      	mov	r2, r7
   1afbe:	4630      	mov	r0, r6
   1afc0:	f010 fd01 	bl	2b9c6 <split_chunks>
		free_list_add(h, c0);
   1afc4:	4641      	mov	r1, r8
   1afc6:	4630      	mov	r0, r6
   1afc8:	f010 fc60 	bl	2b88c <free_list_add>
	return c + chunk_size(h, c);
   1afcc:	4639      	mov	r1, r7
   1afce:	4630      	mov	r0, r6
   1afd0:	f010 fc57 	bl	2b882 <chunk_size>
   1afd4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1afd6:	4284      	cmp	r4, r0
   1afd8:	d207      	bcs.n	1afea <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c, c_end);
   1afda:	4630      	mov	r0, r6
   1afdc:	4622      	mov	r2, r4
   1afde:	f010 fcf2 	bl	2b9c6 <split_chunks>
		free_list_add(h, c_end);
   1afe2:	4621      	mov	r1, r4
   1afe4:	4630      	mov	r0, r6
   1afe6:	f010 fc51 	bl	2b88c <free_list_add>
	void *cmem = &buf[c];
   1afea:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1afee:	8873      	ldrh	r3, [r6, #2]
   1aff0:	f043 0301 	orr.w	r3, r3, #1
   1aff4:	8073      	strh	r3, [r6, #2]
   1aff6:	e7aa      	b.n	1af4e <sys_heap_aligned_alloc+0x46>
   1aff8:	0002f2f6 	.word	0x0002f2f6
   1affc:	0002f296 	.word	0x0002f296

0001b000 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1b000:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   1b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b008:	4604      	mov	r4, r0
   1b00a:	460e      	mov	r6, r1
   1b00c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1b00e:	d35e      	bcc.n	1b0ce <sys_heap_init+0xce>
   1b010:	4936      	ldr	r1, [pc, #216]	; (1b0ec <sys_heap_init+0xec>)
   1b012:	f240 12db 	movw	r2, #475	; 0x1db
   1b016:	4836      	ldr	r0, [pc, #216]	; (1b0f0 <sys_heap_init+0xf0>)
   1b018:	f010 fbc8 	bl	2b7ac <printk>
   1b01c:	f240 11db 	movw	r1, #475	; 0x1db
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1b020:	4832      	ldr	r0, [pc, #200]	; (1b0ec <sys_heap_init+0xec>)
   1b022:	f010 fd5a 	bl	2bada <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1b026:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b028:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b02a:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b02c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b030:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1b034:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1b036:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1b038:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1b03c:	d80a      	bhi.n	1b054 <sys_heap_init+0x54>
   1b03e:	492b      	ldr	r1, [pc, #172]	; (1b0ec <sys_heap_init+0xec>)
   1b040:	482b      	ldr	r0, [pc, #172]	; (1b0f0 <sys_heap_init+0xf0>)
   1b042:	f240 12eb 	movw	r2, #491	; 0x1eb
   1b046:	f010 fbb1 	bl	2b7ac <printk>
   1b04a:	f240 11eb 	movw	r1, #491	; 0x1eb
   1b04e:	4827      	ldr	r0, [pc, #156]	; (1b0ec <sys_heap_init+0xec>)
   1b050:	f010 fd43 	bl	2bada <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1b054:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1b056:	fab7 f487 	clz	r4, r7
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1b05a:	2300      	movs	r3, #0
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1b05c:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1b060:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   1b064:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b066:	3407      	adds	r4, #7
   1b068:	08e4      	lsrs	r4, r4, #3
	h->avail_buckets = 0;
   1b06a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1b06c:	1c63      	adds	r3, r4, #1
   1b06e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   1b070:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1b072:	d90a      	bls.n	1b08a <sys_heap_init+0x8a>
   1b074:	491d      	ldr	r1, [pc, #116]	; (1b0ec <sys_heap_init+0xec>)
   1b076:	481e      	ldr	r0, [pc, #120]	; (1b0f0 <sys_heap_init+0xf0>)
   1b078:	f240 12fb 	movw	r2, #507	; 0x1fb
   1b07c:	f010 fb96 	bl	2b7ac <printk>
   1b080:	f240 11fb 	movw	r1, #507	; 0x1fb
   1b084:	4819      	ldr	r0, [pc, #100]	; (1b0ec <sys_heap_init+0xec>)
   1b086:	f010 fd28 	bl	2bada <assert_post_action>
   1b08a:	2200      	movs	r2, #0
   1b08c:	f105 0310 	add.w	r3, r5, #16
   1b090:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
   1b094:	4598      	cmp	r8, r3
   1b096:	d125      	bne.n	1b0e4 <sys_heap_init+0xe4>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b098:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b09a:	f043 0301 	orr.w	r3, r3, #1
   1b09e:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1b0a0:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
   1b0a2:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b0a6:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   1b0a8:	802a      	strh	r2, [r5, #0]
   1b0aa:	8048      	strh	r0, [r1, #2]
   1b0ac:	19a9      	adds	r1, r5, r6
   1b0ae:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   1b0b2:	804a      	strh	r2, [r1, #2]
   1b0b4:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   1b0b6:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b0ba:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1b0bc:	4621      	mov	r1, r4
   1b0be:	f042 0201 	orr.w	r2, r2, #1
   1b0c2:	4628      	mov	r0, r5
}
   1b0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b0c8:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   1b0ca:	f010 bbdf 	b.w	2b88c <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1b0ce:	2a04      	cmp	r2, #4
   1b0d0:	d8a9      	bhi.n	1b026 <sys_heap_init+0x26>
   1b0d2:	4906      	ldr	r1, [pc, #24]	; (1b0ec <sys_heap_init+0xec>)
   1b0d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
   1b0d8:	4805      	ldr	r0, [pc, #20]	; (1b0f0 <sys_heap_init+0xf0>)
   1b0da:	f010 fb67 	bl	2b7ac <printk>
   1b0de:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
   1b0e2:	e79d      	b.n	1b020 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   1b0e4:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   1b0e8:	e7d4      	b.n	1b094 <sys_heap_init+0x94>
   1b0ea:	bf00      	nop
   1b0ec:	0002f2f6 	.word	0x0002f2f6
   1b0f0:	0002f296 	.word	0x0002f296

0001b0f4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1b0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0f6:	4603      	mov	r3, r0
   1b0f8:	6802      	ldr	r2, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   1b0fa:	270a      	movs	r7, #10
	size_t val = 0;
   1b0fc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1b0fe:	4e06      	ldr	r6, [pc, #24]	; (1b118 <extract_decimal+0x24>)
   1b100:	4611      	mov	r1, r2
   1b102:	780c      	ldrb	r4, [r1, #0]
   1b104:	3201      	adds	r2, #1
   1b106:	5da5      	ldrb	r5, [r4, r6]
   1b108:	076d      	lsls	r5, r5, #29
   1b10a:	d401      	bmi.n	1b110 <extract_decimal+0x1c>
	}
	*str = sp;
   1b10c:	6019      	str	r1, [r3, #0]
	return val;
}
   1b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1b110:	fb07 4000 	mla	r0, r7, r0, r4
   1b114:	3830      	subs	r0, #48	; 0x30
   1b116:	e7f3      	b.n	1b100 <extract_decimal+0xc>
   1b118:	00031a3d 	.word	0x00031a3d

0001b11c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   1b11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b120:	4615      	mov	r5, r2
   1b122:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1b124:	78d3      	ldrb	r3, [r2, #3]
   1b126:	4a22      	ldr	r2, [pc, #136]	; (1b1b0 <encode_uint+0x94>)
	switch (specifier) {
   1b128:	2b6f      	cmp	r3, #111	; 0x6f
   1b12a:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   1b12e:	4680      	mov	r8, r0
   1b130:	460f      	mov	r7, r1
   1b132:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   1b136:	d029      	beq.n	1b18c <encode_uint+0x70>
   1b138:	d824      	bhi.n	1b184 <encode_uint+0x68>
		return 16;
   1b13a:	2b58      	cmp	r3, #88	; 0x58
   1b13c:	bf14      	ite	ne
   1b13e:	260a      	movne	r6, #10
   1b140:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1b142:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   1b146:	4632      	mov	r2, r6
   1b148:	2300      	movs	r3, #0
   1b14a:	4640      	mov	r0, r8
   1b14c:	4639      	mov	r1, r7
   1b14e:	f7fd ffa7 	bl	190a0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b152:	2a09      	cmp	r2, #9
   1b154:	b2d4      	uxtb	r4, r2
   1b156:	d81e      	bhi.n	1b196 <encode_uint+0x7a>
   1b158:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1b15a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b15c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1b15e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b162:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1b166:	d301      	bcc.n	1b16c <encode_uint+0x50>
   1b168:	45d1      	cmp	r9, sl
   1b16a:	d811      	bhi.n	1b190 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1b16c:	782b      	ldrb	r3, [r5, #0]
   1b16e:	069b      	lsls	r3, r3, #26
   1b170:	d505      	bpl.n	1b17e <encode_uint+0x62>
		if (radix == 8) {
   1b172:	2e08      	cmp	r6, #8
   1b174:	d115      	bne.n	1b1a2 <encode_uint+0x86>
			conv->altform_0 = true;
   1b176:	78ab      	ldrb	r3, [r5, #2]
   1b178:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1b17c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   1b17e:	4648      	mov	r0, r9
   1b180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b184:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1b188:	2b70      	cmp	r3, #112	; 0x70
   1b18a:	e7d7      	b.n	1b13c <encode_uint+0x20>
	switch (specifier) {
   1b18c:	2608      	movs	r6, #8
   1b18e:	e7d8      	b.n	1b142 <encode_uint+0x26>
		value /= radix;
   1b190:	4680      	mov	r8, r0
   1b192:	460f      	mov	r7, r1
   1b194:	e7d7      	b.n	1b146 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b196:	f1bb 0f01 	cmp.w	fp, #1
   1b19a:	bf0c      	ite	eq
   1b19c:	3437      	addeq	r4, #55	; 0x37
   1b19e:	3457      	addne	r4, #87	; 0x57
   1b1a0:	e7db      	b.n	1b15a <encode_uint+0x3e>
		} else if (radix == 16) {
   1b1a2:	2e10      	cmp	r6, #16
   1b1a4:	d1eb      	bne.n	1b17e <encode_uint+0x62>
			conv->altform_0c = true;
   1b1a6:	78ab      	ldrb	r3, [r5, #2]
   1b1a8:	f043 0310 	orr.w	r3, r3, #16
   1b1ac:	e7e6      	b.n	1b17c <encode_uint+0x60>
   1b1ae:	bf00      	nop
   1b1b0:	00031a3d 	.word	0x00031a3d

0001b1b4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1b8:	4682      	mov	sl, r0
   1b1ba:	468b      	mov	fp, r1
   1b1bc:	4691      	mov	r9, r2
   1b1be:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1b1c0:	2500      	movs	r5, #0
{
   1b1c2:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1b1c4:	f899 0000 	ldrb.w	r0, [r9]
   1b1c8:	b908      	cbnz	r0, 1b1ce <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1b1ca:	4628      	mov	r0, r5
   1b1cc:	e33d      	b.n	1b84a <cbvprintf+0x696>
			OUTC(*fp++);
   1b1ce:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
   1b1d2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1b1d4:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   1b1d6:	d006      	beq.n	1b1e6 <cbvprintf+0x32>
			OUTC('%');
   1b1d8:	4659      	mov	r1, fp
   1b1da:	47d0      	blx	sl
   1b1dc:	2800      	cmp	r0, #0
   1b1de:	f2c0 8334 	blt.w	1b84a <cbvprintf+0x696>
   1b1e2:	3501      	adds	r5, #1
			break;
   1b1e4:	e1f5      	b.n	1b5d2 <cbvprintf+0x41e>
		} state = {
   1b1e6:	2218      	movs	r2, #24
   1b1e8:	2100      	movs	r1, #0
   1b1ea:	a80c      	add	r0, sp, #48	; 0x30
   1b1ec:	f012 fcf4 	bl	2dbd8 <memset>
	if (*sp == '%') {
   1b1f0:	f899 3001 	ldrb.w	r3, [r9, #1]
   1b1f4:	2b25      	cmp	r3, #37	; 0x25
   1b1f6:	d05a      	beq.n	1b2ae <cbvprintf+0xfa>
   1b1f8:	f109 0201 	add.w	r2, r9, #1
   1b1fc:	4616      	mov	r6, r2
		switch (*sp) {
   1b1fe:	f812 3b01 	ldrb.w	r3, [r2], #1
   1b202:	2b2b      	cmp	r3, #43	; 0x2b
   1b204:	f000 808b 	beq.w	1b31e <cbvprintf+0x16a>
   1b208:	d879      	bhi.n	1b2fe <cbvprintf+0x14a>
   1b20a:	2b20      	cmp	r3, #32
   1b20c:	f000 808c 	beq.w	1b328 <cbvprintf+0x174>
   1b210:	2b23      	cmp	r3, #35	; 0x23
   1b212:	f000 808e 	beq.w	1b332 <cbvprintf+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
   1b216:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b21a:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1b21e:	2a44      	cmp	r2, #68	; 0x44
   1b220:	d103      	bne.n	1b22a <cbvprintf+0x76>
		conv->flag_zero = false;
   1b222:	f36f 1386 	bfc	r3, #6, #1
   1b226:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1b22a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b22e:	9605      	str	r6, [sp, #20]
   1b230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b234:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1b238:	7833      	ldrb	r3, [r6, #0]
   1b23a:	2b2a      	cmp	r3, #42	; 0x2a
   1b23c:	d17e      	bne.n	1b33c <cbvprintf+0x188>
		conv->width_star = true;
   1b23e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b242:	f043 0301 	orr.w	r3, r3, #1
   1b246:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1b24a:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   1b24c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1b24e:	781a      	ldrb	r2, [r3, #0]
   1b250:	2a2e      	cmp	r2, #46	; 0x2e
   1b252:	bf0c      	ite	eq
   1b254:	2101      	moveq	r1, #1
   1b256:	2100      	movne	r1, #0
   1b258:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b25c:	f361 0241 	bfi	r2, r1, #1, #1
   1b260:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1b264:	d10b      	bne.n	1b27e <cbvprintf+0xca>
	++sp;
   1b266:	1c5a      	adds	r2, r3, #1
   1b268:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   1b26a:	785a      	ldrb	r2, [r3, #1]
   1b26c:	2a2a      	cmp	r2, #42	; 0x2a
   1b26e:	d17b      	bne.n	1b368 <cbvprintf+0x1b4>
		conv->prec_star = true;
   1b270:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1b274:	3302      	adds	r3, #2
		conv->prec_star = true;
   1b276:	f042 0204 	orr.w	r2, r2, #4
   1b27a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   1b27e:	4619      	mov	r1, r3
   1b280:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b284:	286c      	cmp	r0, #108	; 0x6c
   1b286:	f000 80b6 	beq.w	1b3f6 <cbvprintf+0x242>
   1b28a:	d87d      	bhi.n	1b388 <cbvprintf+0x1d4>
   1b28c:	2868      	cmp	r0, #104	; 0x68
   1b28e:	f000 8084 	beq.w	1b39a <cbvprintf+0x1e6>
   1b292:	286a      	cmp	r0, #106	; 0x6a
   1b294:	f000 80b9 	beq.w	1b40a <cbvprintf+0x256>
   1b298:	284c      	cmp	r0, #76	; 0x4c
   1b29a:	f000 80bd 	beq.w	1b418 <cbvprintf+0x264>
		conv->length_mod = LENGTH_NONE;
   1b29e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1b2a2:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1b2a4:	f36f 02c6 	bfc	r2, #3, #4
   1b2a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1b2ac:	e080      	b.n	1b3b0 <cbvprintf+0x1fc>
		conv->specifier = *sp++;
   1b2ae:	f109 0202 	add.w	r2, r9, #2
   1b2b2:	9202      	str	r2, [sp, #8]
   1b2b4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1b2b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b2bc:	07d9      	lsls	r1, r3, #31
   1b2be:	f140 814a 	bpl.w	1b556 <cbvprintf+0x3a2>
			width = va_arg(ap, int);
   1b2c2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1b2c6:	f1b8 0f00 	cmp.w	r8, #0
   1b2ca:	da07      	bge.n	1b2dc <cbvprintf+0x128>
				conv->flag_dash = true;
   1b2cc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1b2d0:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   1b2d4:	f042 0204 	orr.w	r2, r2, #4
   1b2d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1b2dc:	075a      	lsls	r2, r3, #29
   1b2de:	f140 8143 	bpl.w	1b568 <cbvprintf+0x3b4>
			int arg = va_arg(ap, int);
   1b2e2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   1b2e6:	2f00      	cmp	r7, #0
   1b2e8:	f280 8142 	bge.w	1b570 <cbvprintf+0x3bc>
				conv->prec_present = false;
   1b2ec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b2f0:	f36f 0341 	bfc	r3, #1, #1
   1b2f4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1b2f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b2fc:	e138      	b.n	1b570 <cbvprintf+0x3bc>
		switch (*sp) {
   1b2fe:	2b2d      	cmp	r3, #45	; 0x2d
   1b300:	d006      	beq.n	1b310 <cbvprintf+0x15c>
   1b302:	2b30      	cmp	r3, #48	; 0x30
   1b304:	d187      	bne.n	1b216 <cbvprintf+0x62>
			conv->flag_zero = true;
   1b306:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b30e:	e003      	b.n	1b318 <cbvprintf+0x164>
			conv->flag_dash = true;
   1b310:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b314:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1b318:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1b31c:	e76e      	b.n	1b1fc <cbvprintf+0x48>
			conv->flag_plus = true;
   1b31e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b322:	f043 0308 	orr.w	r3, r3, #8
   1b326:	e7f7      	b.n	1b318 <cbvprintf+0x164>
			conv->flag_space = true;
   1b328:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b32c:	f043 0310 	orr.w	r3, r3, #16
   1b330:	e7f2      	b.n	1b318 <cbvprintf+0x164>
			conv->flag_hash = true;
   1b332:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b336:	f043 0320 	orr.w	r3, r3, #32
   1b33a:	e7ed      	b.n	1b318 <cbvprintf+0x164>
	size_t width = extract_decimal(&sp);
   1b33c:	a805      	add	r0, sp, #20
   1b33e:	f7ff fed9 	bl	1b0f4 <extract_decimal>
	if (sp != wp) {
   1b342:	9b05      	ldr	r3, [sp, #20]
   1b344:	42b3      	cmp	r3, r6
   1b346:	d081      	beq.n	1b24c <cbvprintf+0x98>
		conv->unsupported |= ((conv->width_value < 0)
   1b348:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   1b34c:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1b34e:	f3c1 0240 	ubfx	r2, r1, #1, #1
   1b352:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   1b356:	0052      	lsls	r2, r2, #1
   1b358:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b35c:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1b360:	430a      	orrs	r2, r1
   1b362:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1b366:	e771      	b.n	1b24c <cbvprintf+0x98>
	size_t prec = extract_decimal(&sp);
   1b368:	a805      	add	r0, sp, #20
   1b36a:	f7ff fec3 	bl	1b0f4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1b36e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1b372:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1b374:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b378:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1b37c:	f360 0341 	bfi	r3, r0, #1, #1
   1b380:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1b384:	9b05      	ldr	r3, [sp, #20]
   1b386:	e77a      	b.n	1b27e <cbvprintf+0xca>
	switch (*sp) {
   1b388:	2874      	cmp	r0, #116	; 0x74
   1b38a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b38e:	d040      	beq.n	1b412 <cbvprintf+0x25e>
   1b390:	287a      	cmp	r0, #122	; 0x7a
   1b392:	d184      	bne.n	1b29e <cbvprintf+0xea>
		conv->length_mod = LENGTH_Z;
   1b394:	4613      	mov	r3, r2
   1b396:	2206      	movs	r2, #6
   1b398:	e028      	b.n	1b3ec <cbvprintf+0x238>
		if (*++sp == 'h') {
   1b39a:	785a      	ldrb	r2, [r3, #1]
   1b39c:	2a68      	cmp	r2, #104	; 0x68
   1b39e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b3a2:	d121      	bne.n	1b3e8 <cbvprintf+0x234>
			conv->length_mod = LENGTH_HH;
   1b3a4:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1b3a6:	f361 02c6 	bfi	r2, r1, #3, #4
   1b3aa:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1b3ae:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1b3b0:	460b      	mov	r3, r1
   1b3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1b3b6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1b3b8:	9302      	str	r3, [sp, #8]
   1b3ba:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b3be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	switch (conv->specifier) {
   1b3c2:	f200 80c0 	bhi.w	1b546 <cbvprintf+0x392>
   1b3c6:	2a57      	cmp	r2, #87	; 0x57
   1b3c8:	d833      	bhi.n	1b432 <cbvprintf+0x27e>
   1b3ca:	2a41      	cmp	r2, #65	; 0x41
   1b3cc:	d003      	beq.n	1b3d6 <cbvprintf+0x222>
   1b3ce:	3a45      	subs	r2, #69	; 0x45
   1b3d0:	2a02      	cmp	r2, #2
   1b3d2:	f200 80b8 	bhi.w	1b546 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   1b3d6:	2204      	movs	r2, #4
   1b3d8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b3dc:	f362 0302 	bfi	r3, r2, #0, #3
   1b3e0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   1b3e4:	2301      	movs	r3, #1
			break;
   1b3e6:	e085      	b.n	1b4f4 <cbvprintf+0x340>
			conv->length_mod = LENGTH_H;
   1b3e8:	4613      	mov	r3, r2
   1b3ea:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1b3ec:	f362 03c6 	bfi	r3, r2, #3, #4
   1b3f0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1b3f4:	e7dc      	b.n	1b3b0 <cbvprintf+0x1fc>
		if (*++sp == 'l') {
   1b3f6:	785a      	ldrb	r2, [r3, #1]
   1b3f8:	2a6c      	cmp	r2, #108	; 0x6c
   1b3fa:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1b3fe:	d101      	bne.n	1b404 <cbvprintf+0x250>
			conv->length_mod = LENGTH_LL;
   1b400:	2104      	movs	r1, #4
   1b402:	e7d0      	b.n	1b3a6 <cbvprintf+0x1f2>
			conv->length_mod = LENGTH_L;
   1b404:	4613      	mov	r3, r2
   1b406:	2203      	movs	r2, #3
   1b408:	e7f0      	b.n	1b3ec <cbvprintf+0x238>
		conv->length_mod = LENGTH_J;
   1b40a:	2205      	movs	r2, #5
   1b40c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b410:	e7ec      	b.n	1b3ec <cbvprintf+0x238>
		conv->length_mod = LENGTH_T;
   1b412:	4613      	mov	r3, r2
   1b414:	2207      	movs	r2, #7
   1b416:	e7e9      	b.n	1b3ec <cbvprintf+0x238>
		conv->unsupported = true;
   1b418:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1b41c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1b420:	f023 0302 	bic.w	r3, r3, #2
   1b424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b428:	f043 0302 	orr.w	r3, r3, #2
   1b42c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1b430:	e7be      	b.n	1b3b0 <cbvprintf+0x1fc>
	switch (conv->specifier) {
   1b432:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1b436:	2920      	cmp	r1, #32
   1b438:	f200 8085 	bhi.w	1b546 <cbvprintf+0x392>
   1b43c:	a001      	add	r0, pc, #4	; (adr r0, 1b444 <cbvprintf+0x290>)
   1b43e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1b442:	bf00      	nop
   1b444:	0001b509 	.word	0x0001b509
   1b448:	0001b547 	.word	0x0001b547
   1b44c:	0001b547 	.word	0x0001b547
   1b450:	0001b547 	.word	0x0001b547
   1b454:	0001b547 	.word	0x0001b547
   1b458:	0001b547 	.word	0x0001b547
   1b45c:	0001b547 	.word	0x0001b547
   1b460:	0001b547 	.word	0x0001b547
   1b464:	0001b547 	.word	0x0001b547
   1b468:	0001b3d7 	.word	0x0001b3d7
   1b46c:	0001b547 	.word	0x0001b547
   1b470:	0001b509 	.word	0x0001b509
   1b474:	0001b4c9 	.word	0x0001b4c9
   1b478:	0001b3d7 	.word	0x0001b3d7
   1b47c:	0001b3d7 	.word	0x0001b3d7
   1b480:	0001b3d7 	.word	0x0001b3d7
   1b484:	0001b547 	.word	0x0001b547
   1b488:	0001b4c9 	.word	0x0001b4c9
   1b48c:	0001b547 	.word	0x0001b547
   1b490:	0001b547 	.word	0x0001b547
   1b494:	0001b547 	.word	0x0001b547
   1b498:	0001b547 	.word	0x0001b547
   1b49c:	0001b511 	.word	0x0001b511
   1b4a0:	0001b509 	.word	0x0001b509
   1b4a4:	0001b52d 	.word	0x0001b52d
   1b4a8:	0001b547 	.word	0x0001b547
   1b4ac:	0001b547 	.word	0x0001b547
   1b4b0:	0001b52d 	.word	0x0001b52d
   1b4b4:	0001b547 	.word	0x0001b547
   1b4b8:	0001b509 	.word	0x0001b509
   1b4bc:	0001b547 	.word	0x0001b547
   1b4c0:	0001b547 	.word	0x0001b547
   1b4c4:	0001b509 	.word	0x0001b509
		conv->specifier_cat = SPECIFIER_SINT;
   1b4c8:	2001      	movs	r0, #1
   1b4ca:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b4ce:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1b4d2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b4d6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1b4d8:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   1b4dc:	bf02      	ittt	eq
   1b4de:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1b4e2:	f041 0101 	orreq.w	r1, r1, #1
   1b4e6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1b4ea:	2a63      	cmp	r2, #99	; 0x63
   1b4ec:	d131      	bne.n	1b552 <cbvprintf+0x39e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1b4ee:	3b00      	subs	r3, #0
   1b4f0:	bf18      	it	ne
   1b4f2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1b4f4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1b4f8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1b4fc:	430b      	orrs	r3, r1
   1b4fe:	f363 0241 	bfi	r2, r3, #1, #1
   1b502:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1b506:	e6d7      	b.n	1b2b8 <cbvprintf+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
   1b508:	2002      	movs	r0, #2
   1b50a:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   1b50e:	e7de      	b.n	1b4ce <cbvprintf+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
   1b510:	2103      	movs	r1, #3
   1b512:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b516:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1b51a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1b51e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b522:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1b524:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1b528:	4143      	adcs	r3, r0
   1b52a:	e7e3      	b.n	1b4f4 <cbvprintf+0x340>
		conv->specifier_cat = SPECIFIER_PTR;
   1b52c:	2103      	movs	r1, #3
   1b52e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1b532:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1b536:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1b53a:	bf14      	ite	ne
   1b53c:	2301      	movne	r3, #1
   1b53e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   1b540:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1b544:	e7d6      	b.n	1b4f4 <cbvprintf+0x340>
		conv->invalid = true;
   1b546:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b54a:	f043 0301 	orr.w	r3, r3, #1
   1b54e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1b552:	2300      	movs	r3, #0
   1b554:	e7ce      	b.n	1b4f4 <cbvprintf+0x340>
		} else if (conv->width_present) {
   1b556:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1b55a:	2a00      	cmp	r2, #0
		int width = -1;
   1b55c:	bfac      	ite	ge
   1b55e:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
   1b562:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
   1b566:	e6b9      	b.n	1b2dc <cbvprintf+0x128>
		} else if (conv->prec_present) {
   1b568:	079f      	lsls	r7, r3, #30
   1b56a:	f57f aec5 	bpl.w	1b2f8 <cbvprintf+0x144>
			precision = conv->prec_value;
   1b56e:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   1b570:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1b572:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   1b576:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
   1b57a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
   1b57e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1b582:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1b584:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1b588:	d139      	bne.n	1b5fe <cbvprintf+0x44a>
			switch (length_mod) {
   1b58a:	1ecb      	subs	r3, r1, #3
   1b58c:	2b04      	cmp	r3, #4
   1b58e:	d823      	bhi.n	1b5d8 <cbvprintf+0x424>
   1b590:	e8df f003 	tbb	[pc, r3]
   1b594:	22090903 	.word	0x22090903
   1b598:	22          	.byte	0x22
   1b599:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1b59a:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1b59e:	17da      	asrs	r2, r3, #31
   1b5a0:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1b5a4:	e006      	b.n	1b5b4 <cbvprintf+0x400>
					(sint_value_type)va_arg(ap, intmax_t);
   1b5a6:	3407      	adds	r4, #7
   1b5a8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1b5ac:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1b5b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1b5b4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b5b8:	f013 0603 	ands.w	r6, r3, #3
   1b5bc:	d057      	beq.n	1b66e <cbvprintf+0x4ba>
			OUTS(sp, fp);
   1b5be:	464a      	mov	r2, r9
   1b5c0:	4659      	mov	r1, fp
   1b5c2:	4650      	mov	r0, sl
   1b5c4:	9b02      	ldr	r3, [sp, #8]
   1b5c6:	f010 fa72 	bl	2baae <outs>
   1b5ca:	2800      	cmp	r0, #0
   1b5cc:	f2c0 813d 	blt.w	1b84a <cbvprintf+0x696>
   1b5d0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1b5d2:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1b5d6:	e5f5      	b.n	1b1c4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1b5d8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1b5dc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1b5de:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1b5e2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1b5e6:	d105      	bne.n	1b5f4 <cbvprintf+0x440>
				value->uint = (unsigned char)value->uint;
   1b5e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   1b5ec:	930c      	str	r3, [sp, #48]	; 0x30
   1b5ee:	2300      	movs	r3, #0
   1b5f0:	930d      	str	r3, [sp, #52]	; 0x34
   1b5f2:	e7df      	b.n	1b5b4 <cbvprintf+0x400>
			} else if (length_mod == LENGTH_H) {
   1b5f4:	2902      	cmp	r1, #2
   1b5f6:	d1dd      	bne.n	1b5b4 <cbvprintf+0x400>
				value->sint = (short)value->sint;
   1b5f8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1b5fc:	e7cf      	b.n	1b59e <cbvprintf+0x3ea>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1b5fe:	2b02      	cmp	r3, #2
   1b600:	d123      	bne.n	1b64a <cbvprintf+0x496>
			switch (length_mod) {
   1b602:	1ecb      	subs	r3, r1, #3
   1b604:	2b04      	cmp	r3, #4
   1b606:	d813      	bhi.n	1b630 <cbvprintf+0x47c>
   1b608:	e8df f003 	tbb	[pc, r3]
   1b60c:	120a0a03 	.word	0x120a0a03
   1b610:	12          	.byte	0x12
   1b611:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1b612:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   1b614:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
   1b616:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1b618:	920c      	str	r2, [sp, #48]	; 0x30
   1b61a:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   1b61c:	4604      	mov	r4, r0
   1b61e:	e7c9      	b.n	1b5b4 <cbvprintf+0x400>
					(uint_value_type)va_arg(ap,
   1b620:	1de0      	adds	r0, r4, #7
   1b622:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   1b626:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   1b62a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   1b62e:	e7f5      	b.n	1b61c <cbvprintf+0x468>
					(uint_value_type)va_arg(ap, size_t);
   1b630:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1b634:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1b636:	930c      	str	r3, [sp, #48]	; 0x30
   1b638:	f04f 0300 	mov.w	r3, #0
   1b63c:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   1b63e:	d0d3      	beq.n	1b5e8 <cbvprintf+0x434>
			} else if (length_mod == LENGTH_H) {
   1b640:	2902      	cmp	r1, #2
   1b642:	d1b7      	bne.n	1b5b4 <cbvprintf+0x400>
				value->uint = (unsigned short)value->uint;
   1b644:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1b648:	e7d0      	b.n	1b5ec <cbvprintf+0x438>
		} else if (specifier_cat == SPECIFIER_FP) {
   1b64a:	2b04      	cmp	r3, #4
   1b64c:	d109      	bne.n	1b662 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, long long);
   1b64e:	1de3      	adds	r3, r4, #7
   1b650:	f023 0307 	bic.w	r3, r3, #7
   1b654:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1b658:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b65c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1b660:	e7a8      	b.n	1b5b4 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1b662:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1b664:	bf04      	itt	eq
   1b666:	f854 3b04 	ldreq.w	r3, [r4], #4
   1b66a:	930c      	streq	r3, [sp, #48]	; 0x30
   1b66c:	e7a2      	b.n	1b5b4 <cbvprintf+0x400>
		switch (conv->specifier) {
   1b66e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1b672:	2878      	cmp	r0, #120	; 0x78
   1b674:	d8ad      	bhi.n	1b5d2 <cbvprintf+0x41e>
   1b676:	2862      	cmp	r0, #98	; 0x62
   1b678:	d820      	bhi.n	1b6bc <cbvprintf+0x508>
   1b67a:	2825      	cmp	r0, #37	; 0x25
   1b67c:	f43f adac 	beq.w	1b1d8 <cbvprintf+0x24>
   1b680:	2858      	cmp	r0, #88	; 0x58
   1b682:	d1a6      	bne.n	1b5d2 <cbvprintf+0x41e>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1b684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1b688:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1b68c:	9300      	str	r3, [sp, #0]
   1b68e:	aa0e      	add	r2, sp, #56	; 0x38
   1b690:	ab06      	add	r3, sp, #24
   1b692:	f7ff fd43 	bl	1b11c <encode_uint>
   1b696:	4681      	mov	r9, r0
			if (precision >= 0) {
   1b698:	2f00      	cmp	r7, #0
   1b69a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1b69e:	db0b      	blt.n	1b6b8 <cbvprintf+0x504>
				conv->flag_zero = false;
   1b6a0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1b6a4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   1b6a8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1b6ac:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1b6ae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1b6b2:	d901      	bls.n	1b6b8 <cbvprintf+0x504>
					conv->pad0_value = precision - (int)len;
   1b6b4:	1afb      	subs	r3, r7, r3
   1b6b6:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1b6b8:	4607      	mov	r7, r0
   1b6ba:	e03c      	b.n	1b736 <cbvprintf+0x582>
		switch (conv->specifier) {
   1b6bc:	3863      	subs	r0, #99	; 0x63
   1b6be:	2815      	cmp	r0, #21
   1b6c0:	d887      	bhi.n	1b5d2 <cbvprintf+0x41e>
   1b6c2:	a201      	add	r2, pc, #4	; (adr r2, 1b6c8 <cbvprintf+0x514>)
   1b6c4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1b6c8:	0001b747 	.word	0x0001b747
   1b6cc:	0001b7a9 	.word	0x0001b7a9
   1b6d0:	0001b5d3 	.word	0x0001b5d3
   1b6d4:	0001b5d3 	.word	0x0001b5d3
   1b6d8:	0001b5d3 	.word	0x0001b5d3
   1b6dc:	0001b5d3 	.word	0x0001b5d3
   1b6e0:	0001b7a9 	.word	0x0001b7a9
   1b6e4:	0001b5d3 	.word	0x0001b5d3
   1b6e8:	0001b5d3 	.word	0x0001b5d3
   1b6ec:	0001b5d3 	.word	0x0001b5d3
   1b6f0:	0001b5d3 	.word	0x0001b5d3
   1b6f4:	0001b803 	.word	0x0001b803
   1b6f8:	0001b7d1 	.word	0x0001b7d1
   1b6fc:	0001b7d5 	.word	0x0001b7d5
   1b700:	0001b5d3 	.word	0x0001b5d3
   1b704:	0001b5d3 	.word	0x0001b5d3
   1b708:	0001b721 	.word	0x0001b721
   1b70c:	0001b5d3 	.word	0x0001b5d3
   1b710:	0001b7d1 	.word	0x0001b7d1
   1b714:	0001b5d3 	.word	0x0001b5d3
   1b718:	0001b5d3 	.word	0x0001b5d3
   1b71c:	0001b7d1 	.word	0x0001b7d1
			if (precision >= 0) {
   1b720:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   1b722:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   1b726:	db0a      	blt.n	1b73e <cbvprintf+0x58a>
				len = strnlen(bps, precision);
   1b728:	4639      	mov	r1, r7
   1b72a:	4648      	mov	r0, r9
   1b72c:	f012 fbeb 	bl	2df06 <strnlen>
		char sign = 0;
   1b730:	2600      	movs	r6, #0
			bpe = bps + len;
   1b732:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
   1b736:	f1b9 0f00 	cmp.w	r9, #0
   1b73a:	d10c      	bne.n	1b756 <cbvprintf+0x5a2>
   1b73c:	e749      	b.n	1b5d2 <cbvprintf+0x41e>
				len = strlen(bps);
   1b73e:	4648      	mov	r0, r9
   1b740:	f7fd ff0c 	bl	1955c <strlen>
   1b744:	e7f4      	b.n	1b730 <cbvprintf+0x57c>
			break;
   1b746:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1b748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1b74a:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1b74e:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
   1b752:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   1b756:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1b75a:	b106      	cbz	r6, 1b75e <cbvprintf+0x5aa>
			nj_len += 1U;
   1b75c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1b75e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1b762:	06d0      	lsls	r0, r2, #27
   1b764:	d566      	bpl.n	1b834 <cbvprintf+0x680>
			nj_len += 2U;
   1b766:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1b768:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1b76a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   1b76c:	bf48      	it	mi
   1b76e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   1b770:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1b772:	bf48      	it	mi
   1b774:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1b776:	f1b8 0f00 	cmp.w	r8, #0
   1b77a:	dd73      	ble.n	1b864 <cbvprintf+0x6b0>
			if (!conv->flag_dash) {
   1b77c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   1b780:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1b784:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1b788:	9303      	str	r3, [sp, #12]
   1b78a:	0753      	lsls	r3, r2, #29
   1b78c:	d46a      	bmi.n	1b864 <cbvprintf+0x6b0>
				if (conv->flag_zero) {
   1b78e:	0650      	lsls	r0, r2, #25
   1b790:	d55e      	bpl.n	1b850 <cbvprintf+0x69c>
					if (sign != 0) {
   1b792:	b13e      	cbz	r6, 1b7a4 <cbvprintf+0x5f0>
						OUTC(sign);
   1b794:	4659      	mov	r1, fp
   1b796:	4630      	mov	r0, r6
   1b798:	47d0      	blx	sl
   1b79a:	2800      	cmp	r0, #0
   1b79c:	db55      	blt.n	1b84a <cbvprintf+0x696>
						sign = 0;
   1b79e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1b7a0:	3501      	adds	r5, #1
						sign = 0;
   1b7a2:	461e      	mov	r6, r3
					pad = '0';
   1b7a4:	2330      	movs	r3, #48	; 0x30
   1b7a6:	e054      	b.n	1b852 <cbvprintf+0x69e>
			if (conv->flag_plus) {
   1b7a8:	071e      	lsls	r6, r3, #28
   1b7aa:	d40f      	bmi.n	1b7cc <cbvprintf+0x618>
				sign = ' ';
   1b7ac:	f013 0610 	ands.w	r6, r3, #16
   1b7b0:	bf18      	it	ne
   1b7b2:	2620      	movne	r6, #32
			sint = value->sint;
   1b7b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1b7b8:	2b00      	cmp	r3, #0
   1b7ba:	f6bf af63 	bge.w	1b684 <cbvprintf+0x4d0>
				value->uint = (uint_value_type)-sint;
   1b7be:	4252      	negs	r2, r2
   1b7c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1b7c4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1b7c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1b7ca:	e75b      	b.n	1b684 <cbvprintf+0x4d0>
				sign = '+';
   1b7cc:	262b      	movs	r6, #43	; 0x2b
   1b7ce:	e7f1      	b.n	1b7b4 <cbvprintf+0x600>
		switch (conv->specifier) {
   1b7d0:	2600      	movs	r6, #0
   1b7d2:	e757      	b.n	1b684 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
   1b7d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b7d6:	b340      	cbz	r0, 1b82a <cbvprintf+0x676>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1b7d8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1b7dc:	9300      	str	r3, [sp, #0]
   1b7de:	2100      	movs	r1, #0
   1b7e0:	ab06      	add	r3, sp, #24
   1b7e2:	aa0e      	add	r2, sp, #56	; 0x38
   1b7e4:	f7ff fc9a 	bl	1b11c <encode_uint>
				conv->altform_0c = true;
   1b7e8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1b7ec:	4681      	mov	r9, r0
				conv->altform_0c = true;
   1b7ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1b7f2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1b7f6:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1b7fa:	2600      	movs	r6, #0
				conv->altform_0c = true;
   1b7fc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1b800:	e74a      	b.n	1b698 <cbvprintf+0x4e4>
				store_count(conv, value->ptr, count);
   1b802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1b804:	2907      	cmp	r1, #7
   1b806:	f63f aee4 	bhi.w	1b5d2 <cbvprintf+0x41e>
   1b80a:	e8df f001 	tbb	[pc, r1]
   1b80e:	040c      	.short	0x040c
   1b810:	08080c06 	.word	0x08080c06
   1b814:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1b816:	701d      	strb	r5, [r3, #0]
		break;
   1b818:	e6db      	b.n	1b5d2 <cbvprintf+0x41e>
		*(short *)dp = (short)count;
   1b81a:	801d      	strh	r5, [r3, #0]
		break;
   1b81c:	e6d9      	b.n	1b5d2 <cbvprintf+0x41e>
		*(intmax_t *)dp = (intmax_t)count;
   1b81e:	17ea      	asrs	r2, r5, #31
   1b820:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   1b824:	e6d5      	b.n	1b5d2 <cbvprintf+0x41e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1b826:	601d      	str	r5, [r3, #0]
		break;
   1b828:	e6d3      	b.n	1b5d2 <cbvprintf+0x41e>
			bpe = bps + 5;
   1b82a:	4f2e      	ldr	r7, [pc, #184]	; (1b8e4 <cbvprintf+0x730>)
   1b82c:	4606      	mov	r6, r0
			bps = "(nil)";
   1b82e:	f1a7 0905 	sub.w	r9, r7, #5
   1b832:	e790      	b.n	1b756 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
   1b834:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1b836:	bf48      	it	mi
   1b838:	3301      	addmi	r3, #1
   1b83a:	e795      	b.n	1b768 <cbvprintf+0x5b4>
					OUTC(pad);
   1b83c:	4618      	mov	r0, r3
   1b83e:	4659      	mov	r1, fp
   1b840:	9303      	str	r3, [sp, #12]
   1b842:	47d0      	blx	sl
   1b844:	2800      	cmp	r0, #0
   1b846:	9b03      	ldr	r3, [sp, #12]
   1b848:	da04      	bge.n	1b854 <cbvprintf+0x6a0>
#undef OUTS
#undef OUTC
}
   1b84a:	b013      	add	sp, #76	; 0x4c
   1b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1b850:	2320      	movs	r3, #32
   1b852:	4445      	add	r5, r8
   1b854:	4642      	mov	r2, r8
				while (width-- > 0) {
   1b856:	2a00      	cmp	r2, #0
   1b858:	eba5 0108 	sub.w	r1, r5, r8
   1b85c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b860:	dcec      	bgt.n	1b83c <cbvprintf+0x688>
   1b862:	460d      	mov	r5, r1
		if (sign != 0) {
   1b864:	b12e      	cbz	r6, 1b872 <cbvprintf+0x6be>
			OUTC(sign);
   1b866:	4659      	mov	r1, fp
   1b868:	4630      	mov	r0, r6
   1b86a:	47d0      	blx	sl
   1b86c:	2800      	cmp	r0, #0
   1b86e:	dbec      	blt.n	1b84a <cbvprintf+0x696>
   1b870:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1b872:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b876:	06d9      	lsls	r1, r3, #27
   1b878:	d401      	bmi.n	1b87e <cbvprintf+0x6ca>
   1b87a:	071a      	lsls	r2, r3, #28
   1b87c:	d505      	bpl.n	1b88a <cbvprintf+0x6d6>
				OUTC('0');
   1b87e:	4659      	mov	r1, fp
   1b880:	2030      	movs	r0, #48	; 0x30
   1b882:	47d0      	blx	sl
   1b884:	2800      	cmp	r0, #0
   1b886:	dbe0      	blt.n	1b84a <cbvprintf+0x696>
   1b888:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1b88a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1b88e:	06db      	lsls	r3, r3, #27
   1b890:	d506      	bpl.n	1b8a0 <cbvprintf+0x6ec>
				OUTC(conv->specifier);
   1b892:	4659      	mov	r1, fp
   1b894:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1b898:	47d0      	blx	sl
   1b89a:	2800      	cmp	r0, #0
   1b89c:	dbd5      	blt.n	1b84a <cbvprintf+0x696>
   1b89e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1b8a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1b8a2:	442e      	add	r6, r5
   1b8a4:	1b73      	subs	r3, r6, r5
   1b8a6:	2b00      	cmp	r3, #0
   1b8a8:	dc15      	bgt.n	1b8d6 <cbvprintf+0x722>
			OUTS(bps, bpe);
   1b8aa:	463b      	mov	r3, r7
   1b8ac:	464a      	mov	r2, r9
   1b8ae:	4659      	mov	r1, fp
   1b8b0:	4650      	mov	r0, sl
   1b8b2:	f010 f8fc 	bl	2baae <outs>
   1b8b6:	2800      	cmp	r0, #0
   1b8b8:	dbc7      	blt.n	1b84a <cbvprintf+0x696>
   1b8ba:	4405      	add	r5, r0
		while (width > 0) {
   1b8bc:	44a8      	add	r8, r5
   1b8be:	eba8 0305 	sub.w	r3, r8, r5
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	f77f ae85 	ble.w	1b5d2 <cbvprintf+0x41e>
			OUTC(' ');
   1b8c8:	4659      	mov	r1, fp
   1b8ca:	2020      	movs	r0, #32
   1b8cc:	47d0      	blx	sl
   1b8ce:	2800      	cmp	r0, #0
   1b8d0:	dbbb      	blt.n	1b84a <cbvprintf+0x696>
   1b8d2:	3501      	adds	r5, #1
			--width;
   1b8d4:	e7f3      	b.n	1b8be <cbvprintf+0x70a>
				OUTC('0');
   1b8d6:	4659      	mov	r1, fp
   1b8d8:	2030      	movs	r0, #48	; 0x30
   1b8da:	47d0      	blx	sl
   1b8dc:	2800      	cmp	r0, #0
   1b8de:	dbb4      	blt.n	1b84a <cbvprintf+0x696>
   1b8e0:	3501      	adds	r5, #1
   1b8e2:	e7df      	b.n	1b8a4 <cbvprintf+0x6f0>
   1b8e4:	0002f31c 	.word	0x0002f31c

0001b8e8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1b8e8:	f04f 0220 	mov.w	r2, #32
   1b8ec:	f3ef 8311 	mrs	r3, BASEPRI
   1b8f0:	f382 8812 	msr	BASEPRI_MAX, r2
   1b8f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1b8f8:	2101      	movs	r1, #1
   1b8fa:	4a04      	ldr	r2, [pc, #16]	; (1b90c <nordicsemi_nrf91_init+0x24>)
   1b8fc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1b900:	f383 8811 	msr	BASEPRI, r3
   1b904:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1b908:	2000      	movs	r0, #0
   1b90a:	4770      	bx	lr
   1b90c:	40039000 	.word	0x40039000

0001b910 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1b910:	b120      	cbz	r0, 1b91c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1b912:	4b03      	ldr	r3, [pc, #12]	; (1b920 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1b914:	0180      	lsls	r0, r0, #6
   1b916:	f043 0301 	orr.w	r3, r3, #1
   1b91a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1b91c:	4770      	bx	lr
   1b91e:	bf00      	nop
   1b920:	0002ea90 	.word	0x0002ea90

0001b924 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1b924:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b926:	4605      	mov	r5, r0
   1b928:	b09b      	sub	sp, #108	; 0x6c
   1b92a:	460f      	mov	r7, r1
   1b92c:	4614      	mov	r4, r2
	struct sntp_pkt tx_pkt = { 0 };
   1b92e:	2100      	movs	r1, #0
   1b930:	2230      	movs	r2, #48	; 0x30
   1b932:	a802      	add	r0, sp, #8
   1b934:	f012 f950 	bl	2dbd8 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1b938:	2d00      	cmp	r5, #0
   1b93a:	f000 8085 	beq.w	1ba48 <sntp_query+0x124>
   1b93e:	2c00      	cmp	r4, #0
   1b940:	f000 8082 	beq.w	1ba48 <sntp_query+0x124>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1b944:	231b      	movs	r3, #27
   1b946:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   1b94a:	f012 f835 	bl	2d9b8 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1b94e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b952:	2600      	movs	r6, #0
   1b954:	fba0 0302 	umull	r0, r3, r0, r2
   1b958:	fb02 3101 	mla	r1, r2, r1, r3
   1b95c:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   1b95e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b962:	2300      	movs	r3, #0
   1b964:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1b968:	4631      	mov	r1, r6
   1b96a:	f7fd fb99 	bl	190a0 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1b96e:	4a38      	ldr	r2, [pc, #224]	; (1ba50 <sntp_query+0x12c>)
   1b970:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1b972:	0a13      	lsrs	r3, r2, #8
   1b974:	0211      	lsls	r1, r2, #8
   1b976:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b97a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b97e:	430b      	orrs	r3, r1
   1b980:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1b984:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1b988:	68e8      	ldr	r0, [r5, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1b98a:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1b98c:	930c      	str	r3, [sp, #48]	; 0x30
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1b98e:	2230      	movs	r2, #48	; 0x30
   1b990:	4633      	mov	r3, r6
   1b992:	e9cd 6600 	strd	r6, r6, [sp]
   1b996:	a902      	add	r1, sp, #8
   1b998:	f010 f95c 	bl	2bc54 <z_impl_zsock_sendto>
	if (ret < 0) {
   1b99c:	2800      	cmp	r0, #0
   1b99e:	db0f      	blt.n	1b9c0 <sntp_query+0x9c>
	struct sntp_pkt buf = { 0 };
   1b9a0:	4631      	mov	r1, r6
   1b9a2:	2230      	movs	r2, #48	; 0x30
   1b9a4:	a80e      	add	r0, sp, #56	; 0x38
   1b9a6:	f012 f917 	bl	2dbd8 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1b9aa:	68a9      	ldr	r1, [r5, #8]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1b9ac:	463a      	mov	r2, r7
   1b9ae:	4628      	mov	r0, r5
   1b9b0:	f010 f9b0 	bl	2bd14 <z_impl_zsock_poll>
	if (status < 0) {
   1b9b4:	42b0      	cmp	r0, r6
   1b9b6:	da05      	bge.n	1b9c4 <sntp_query+0xa0>
		return -errno;
   1b9b8:	f010 fa14 	bl	2bde4 <__errno>
   1b9bc:	6800      	ldr	r0, [r0, #0]
   1b9be:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1b9c0:	b01b      	add	sp, #108	; 0x6c
   1b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   1b9c4:	d037      	beq.n	1ba36 <sntp_query+0x112>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1b9c6:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1b9c8:	2230      	movs	r2, #48	; 0x30
   1b9ca:	4633      	mov	r3, r6
   1b9cc:	e9cd 6600 	strd	r6, r6, [sp]
   1b9d0:	a90e      	add	r1, sp, #56	; 0x38
   1b9d2:	f010 f96f 	bl	2bcb4 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1b9d6:	2800      	cmp	r0, #0
   1b9d8:	dbee      	blt.n	1b9b8 <sntp_query+0x94>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1b9da:	2830      	cmp	r0, #48	; 0x30
   1b9dc:	d12e      	bne.n	1ba3c <sntp_query+0x118>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1b9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b9e0:	692a      	ldr	r2, [r5, #16]
   1b9e2:	ba1b      	rev	r3, r3
   1b9e4:	429a      	cmp	r2, r3
   1b9e6:	d002      	beq.n	1b9ee <sntp_query+0xca>
		return -EINVAL;
   1b9e8:	f06f 0015 	mvn.w	r0, #21
   1b9ec:	e7e8      	b.n	1b9c0 <sntp_query+0x9c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1b9ee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1b9f2:	f003 0307 	and.w	r3, r3, #7
   1b9f6:	2b04      	cmp	r3, #4
   1b9f8:	d1f6      	bne.n	1b9e8 <sntp_query+0xc4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1b9fa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1b9fe:	b303      	cbz	r3, 1ba42 <sntp_query+0x11e>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1ba00:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ba02:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1ba04:	ba1b      	rev	r3, r3
   1ba06:	ba12      	rev	r2, r2
   1ba08:	ea53 0102 	orrs.w	r1, r3, r2
   1ba0c:	d0ec      	beq.n	1b9e8 <sntp_query+0xc4>
	if (ts & 0x80000000) {
   1ba0e:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1ba10:	60a2      	str	r2, [r4, #8]
	if (ts & 0x80000000) {
   1ba12:	da0a      	bge.n	1ba2a <sntp_query+0x106>
		if (ts >= OFFSET_1970_JAN_1) {
   1ba14:	4a0f      	ldr	r2, [pc, #60]	; (1ba54 <sntp_query+0x130>)
   1ba16:	4293      	cmp	r3, r2
   1ba18:	d9e6      	bls.n	1b9e8 <sntp_query+0xc4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1ba1a:	2000      	movs	r0, #0
   1ba1c:	4a0e      	ldr	r2, [pc, #56]	; (1ba58 <sntp_query+0x134>)
   1ba1e:	189b      	adds	r3, r3, r2
   1ba20:	f140 32ff 	adc.w	r2, r0, #4294967295	; 0xffffffff
   1ba24:	e9c4 3200 	strd	r3, r2, [r4]
   1ba28:	e7ca      	b.n	1b9c0 <sntp_query+0x9c>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1ba2a:	2000      	movs	r0, #0
   1ba2c:	4a0a      	ldr	r2, [pc, #40]	; (1ba58 <sntp_query+0x134>)
   1ba2e:	441a      	add	r2, r3
   1ba30:	e9c4 2000 	strd	r2, r0, [r4]
   1ba34:	e7c4      	b.n	1b9c0 <sntp_query+0x9c>
		return -ETIMEDOUT;
   1ba36:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1ba3a:	e7c1      	b.n	1b9c0 <sntp_query+0x9c>
		return -EMSGSIZE;
   1ba3c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ba40:	e7be      	b.n	1b9c0 <sntp_query+0x9c>
		return -EBUSY;
   1ba42:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1ba46:	e7bb      	b.n	1b9c0 <sntp_query+0x9c>
		return -EFAULT;
   1ba48:	f06f 000d 	mvn.w	r0, #13
   1ba4c:	e7b8      	b.n	1b9c0 <sntp_query+0x9c>
   1ba4e:	bf00      	nop
   1ba50:	83aa7e80 	.word	0x83aa7e80
   1ba54:	83aa7e7f 	.word	0x83aa7e7f
   1ba58:	7c558180 	.word	0x7c558180

0001ba5c <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   1ba5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba60:	4605      	mov	r5, r0
   1ba62:	460e      	mov	r6, r1
   1ba64:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1ba66:	4c1c      	ldr	r4, [pc, #112]	; (1bad8 <z_impl_zsock_socket+0x7c>)
   1ba68:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1badc <z_impl_zsock_socket+0x80>
   1ba6c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1bae0 <z_impl_zsock_socket+0x84>
   1ba70:	454c      	cmp	r4, r9
   1ba72:	d908      	bls.n	1ba86 <z_impl_zsock_socket+0x2a>
   1ba74:	4641      	mov	r1, r8
   1ba76:	481b      	ldr	r0, [pc, #108]	; (1bae4 <z_impl_zsock_socket+0x88>)
   1ba78:	22d5      	movs	r2, #213	; 0xd5
   1ba7a:	f00f fe97 	bl	2b7ac <printk>
   1ba7e:	21d5      	movs	r1, #213	; 0xd5
   1ba80:	4640      	mov	r0, r8
   1ba82:	f010 f82a 	bl	2bada <assert_post_action>
   1ba86:	454c      	cmp	r4, r9
   1ba88:	d307      	bcc.n	1ba9a <z_impl_zsock_socket+0x3e>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   1ba8a:	f010 f9ab 	bl	2bde4 <__errno>
   1ba8e:	236a      	movs	r3, #106	; 0x6a
   1ba90:	6003      	str	r3, [r0, #0]
	return -1;
}
   1ba92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   1ba9a:	6823      	ldr	r3, [r4, #0]
   1ba9c:	42ab      	cmp	r3, r5
   1ba9e:	d000      	beq.n	1baa2 <z_impl_zsock_socket+0x46>
   1baa0:	b9bb      	cbnz	r3, 1bad2 <z_impl_zsock_socket+0x76>
		NET_ASSERT(sock_family->is_supported);
   1baa2:	6863      	ldr	r3, [r4, #4]
   1baa4:	b943      	cbnz	r3, 1bab8 <z_impl_zsock_socket+0x5c>
   1baa6:	4641      	mov	r1, r8
   1baa8:	480e      	ldr	r0, [pc, #56]	; (1bae4 <z_impl_zsock_socket+0x88>)
   1baaa:	22db      	movs	r2, #219	; 0xdb
   1baac:	f00f fe7e 	bl	2b7ac <printk>
   1bab0:	21db      	movs	r1, #219	; 0xdb
   1bab2:	4640      	mov	r0, r8
   1bab4:	f010 f811 	bl	2bada <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   1bab8:	463a      	mov	r2, r7
   1baba:	4631      	mov	r1, r6
   1babc:	4628      	mov	r0, r5
   1babe:	6863      	ldr	r3, [r4, #4]
   1bac0:	4798      	blx	r3
   1bac2:	b130      	cbz	r0, 1bad2 <z_impl_zsock_socket+0x76>
		return sock_family->handler(family, type, proto);
   1bac4:	463a      	mov	r2, r7
   1bac6:	4631      	mov	r1, r6
   1bac8:	4628      	mov	r0, r5
   1baca:	68a3      	ldr	r3, [r4, #8]
}
   1bacc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   1bad0:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1bad2:	340c      	adds	r4, #12
   1bad4:	e7cc      	b.n	1ba70 <z_impl_zsock_socket+0x14>
   1bad6:	bf00      	nop
   1bad8:	0002e99c 	.word	0x0002e99c
   1badc:	0002e9a8 	.word	0x0002e9a8
   1bae0:	0002f34e 	.word	0x0002f34e
   1bae4:	0002f296 	.word	0x0002f296

0001bae8 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   1bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baec:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   1baee:	f04f 0800 	mov.w	r8, #0
{
   1baf2:	b09b      	sub	sp, #108	; 0x6c
   1baf4:	9104      	str	r1, [sp, #16]
   1baf6:	4610      	mov	r0, r2
   1baf8:	4619      	mov	r1, r3
   1bafa:	461d      	mov	r5, r3
   1bafc:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   1bafe:	f011 ff61 	bl	2d9c4 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bb02:	46b1      	mov	r9, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   1bb04:	46c2      	mov	sl, r8
	bool offload = false;
   1bb06:	4647      	mov	r7, r8
	pev = poll_events;
   1bb08:	ab0b      	add	r3, sp, #44	; 0x2c
   1bb0a:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   1bb0c:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bb10:	9b04      	ldr	r3, [sp, #16]
   1bb12:	9303      	str	r3, [sp, #12]
   1bb14:	9b03      	ldr	r3, [sp, #12]
   1bb16:	bb03      	cbnz	r3, 1bb5a <zsock_poll_internal+0x72>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   1bb18:	2f00      	cmp	r7, #0
   1bb1a:	d060      	beq.n	1bbde <zsock_poll_internal+0xf6>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bb1c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1bb20:	bf08      	it	eq
   1bb22:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
			return (uint32_t)((t * to_hz + off) / from_hz);
   1bb26:	bf16      	itet	ne
   1bb28:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   1bb2c:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   1bb30:	fba4 4000 	umullne	r4, r0, r4, r0
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   1bb34:	9b04      	ldr	r3, [sp, #16]
   1bb36:	bf1c      	itt	ne
   1bb38:	0be4      	lsrne	r4, r4, #15
   1bb3a:	ea44 4440 	orrne.w	r4, r4, r0, lsl #17
   1bb3e:	9300      	str	r3, [sp, #0]
   1bb40:	f44f 7282 	mov.w	r2, #260	; 0x104
   1bb44:	4633      	mov	r3, r6
   1bb46:	4641      	mov	r1, r8
   1bb48:	4650      	mov	r0, sl
   1bb4a:	9401      	str	r4, [sp, #4]
   1bb4c:	f010 f824 	bl	2bb98 <z_fdtable_call_ioctl>
   1bb50:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   1bb52:	4638      	mov	r0, r7
   1bb54:	b01b      	add	sp, #108	; 0x6c
   1bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   1bb5a:	f8d9 0000 	ldr.w	r0, [r9]
   1bb5e:	2800      	cmp	r0, #0
   1bb60:	db37      	blt.n	1bbd2 <zsock_poll_internal+0xea>
	ctx = z_get_fd_obj_and_vtable(sock,
   1bb62:	aa0a      	add	r2, sp, #40	; 0x28
   1bb64:	a909      	add	r1, sp, #36	; 0x24
   1bb66:	f7fe fdeb 	bl	1a740 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   1bb6a:	9007      	str	r0, [sp, #28]
   1bb6c:	b388      	cbz	r0, 1bbd2 <zsock_poll_internal+0xea>
		(void)k_mutex_lock(lock, K_FOREVER);
   1bb6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bb72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb76:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bb78:	f010 f81d 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   1bb7c:	ab1a      	add	r3, sp, #104	; 0x68
   1bb7e:	9301      	str	r3, [sp, #4]
   1bb80:	ab08      	add	r3, sp, #32
   1bb82:	9300      	str	r3, [sp, #0]
   1bb84:	f44f 7281 	mov.w	r2, #258	; 0x102
   1bb88:	464b      	mov	r3, r9
   1bb8a:	9907      	ldr	r1, [sp, #28]
   1bb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bb8e:	f010 f803 	bl	2bb98 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   1bb92:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   1bb96:	4683      	mov	fp, r0
		if (result == -EALREADY) {
   1bb98:	d00d      	beq.n	1bbb6 <zsock_poll_internal+0xce>
		} else if (result == -EXDEV) {
   1bb9a:	f110 0f12 	cmn.w	r0, #18
   1bb9e:	9907      	ldr	r1, [sp, #28]
   1bba0:	d10c      	bne.n	1bbbc <zsock_poll_internal+0xd4>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   1bba2:	f1ba 0f00 	cmp.w	sl, #0
   1bba6:	d102      	bne.n	1bbae <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   1bba8:	4688      	mov	r8, r1
   1bbaa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			result = 0;
   1bbae:	f04f 0b00 	mov.w	fp, #0
			offload = true;
   1bbb2:	2701      	movs	r7, #1
   1bbb4:	e002      	b.n	1bbbc <zsock_poll_internal+0xd4>
			timeout = K_NO_WAIT;
   1bbb6:	2400      	movs	r4, #0
   1bbb8:	4625      	mov	r5, r4
			result = 0;
   1bbba:	46a3      	mov	fp, r4
		k_mutex_unlock(lock);
   1bbbc:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bbbe:	f00f fffc 	bl	2bbba <k_mutex_unlock.isra.0>
		if (result < 0) {
   1bbc2:	f1bb 0f00 	cmp.w	fp, #0
   1bbc6:	da04      	bge.n	1bbd2 <zsock_poll_internal+0xea>
				errno = -result;
   1bbc8:	f010 f90c 	bl	2bde4 <__errno>
   1bbcc:	f1cb 0300 	rsb	r3, fp, #0
   1bbd0:	e036      	b.n	1bc40 <zsock_poll_internal+0x158>
	for (pfd = fds, i = nfds; i--; pfd++) {
   1bbd2:	9b03      	ldr	r3, [sp, #12]
   1bbd4:	f109 0908 	add.w	r9, r9, #8
   1bbd8:	3b01      	subs	r3, #1
   1bbda:	9303      	str	r3, [sp, #12]
   1bbdc:	e79a      	b.n	1bb14 <zsock_poll_internal+0x2c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bbde:	ea54 0305 	orrs.w	r3, r4, r5
   1bbe2:	d010      	beq.n	1bc06 <zsock_poll_internal+0x11e>
   1bbe4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1bbe8:	bf08      	it	eq
   1bbea:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1bbee:	d00a      	beq.n	1bc06 <zsock_poll_internal+0x11e>
		int64_t remaining = end - sys_clock_tick_get();
   1bbf0:	f00c fbf0 	bl	283d4 <sys_clock_tick_get>
   1bbf4:	9b05      	ldr	r3, [sp, #20]
   1bbf6:	1a1c      	subs	r4, r3, r0
   1bbf8:	9b06      	ldr	r3, [sp, #24]
   1bbfa:	eb63 0501 	sbc.w	r5, r3, r1
   1bbfe:	2d00      	cmp	r5, #0
   1bc00:	bfbc      	itt	lt
   1bc02:	463c      	movlt	r4, r7
   1bc04:	4625      	movlt	r5, r4
		ret = k_poll(poll_events, pev - poll_events, timeout);
   1bc06:	9908      	ldr	r1, [sp, #32]
   1bc08:	af0b      	add	r7, sp, #44	; 0x2c
   1bc0a:	4b3f      	ldr	r3, [pc, #252]	; (1bd08 <zsock_poll_internal+0x220>)
   1bc0c:	1bc9      	subs	r1, r1, r7
   1bc0e:	1089      	asrs	r1, r1, #2
   1bc10:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   1bc12:	462b      	mov	r3, r5
   1bc14:	4622      	mov	r2, r4
   1bc16:	4638      	mov	r0, r7
   1bc18:	f00c fda0 	bl	2875c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   1bc1c:	f100 030b 	add.w	r3, r0, #11
   1bc20:	2b0b      	cmp	r3, #11
   1bc22:	4681      	mov	r9, r0
   1bc24:	d808      	bhi.n	1bc38 <zsock_poll_internal+0x150>
   1bc26:	f640 0881 	movw	r8, #2177	; 0x881
   1bc2a:	fa28 f803 	lsr.w	r8, r8, r3
   1bc2e:	ea6f 0808 	mvn.w	r8, r8
   1bc32:	f018 0801 	ands.w	r8, r8, #1
   1bc36:	d007      	beq.n	1bc48 <zsock_poll_internal+0x160>
			errno = -ret;
   1bc38:	f010 f8d4 	bl	2bde4 <__errno>
   1bc3c:	f1c9 0300 	rsb	r3, r9, #0
			return -1;
   1bc40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			errno = -ret;
   1bc44:	6003      	str	r3, [r0, #0]
			return -1;
   1bc46:	e784      	b.n	1bb52 <zsock_poll_internal+0x6a>
		pev = poll_events;
   1bc48:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bc4a:	46b1      	mov	r9, r6
		ret = 0;
   1bc4c:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bc4e:	f8dd a010 	ldr.w	sl, [sp, #16]
   1bc52:	f1ba 0f00 	cmp.w	sl, #0
   1bc56:	d11c      	bne.n	1bc92 <zsock_poll_internal+0x1aa>
		if (retry) {
   1bc58:	f1b8 0f00 	cmp.w	r8, #0
   1bc5c:	f43f af79 	beq.w	1bb52 <zsock_poll_internal+0x6a>
			if (ret > 0) {
   1bc60:	2f00      	cmp	r7, #0
   1bc62:	f47f af76 	bne.w	1bb52 <zsock_poll_internal+0x6a>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bc66:	ea54 0305 	orrs.w	r3, r4, r5
   1bc6a:	f43f af72 	beq.w	1bb52 <zsock_poll_internal+0x6a>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bc6e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1bc72:	bf08      	it	eq
   1bc74:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1bc78:	d0c5      	beq.n	1bc06 <zsock_poll_internal+0x11e>
				int64_t remaining = end - sys_clock_tick_get();
   1bc7a:	f00c fbab 	bl	283d4 <sys_clock_tick_get>
   1bc7e:	9b05      	ldr	r3, [sp, #20]
   1bc80:	1a1c      	subs	r4, r3, r0
   1bc82:	9b06      	ldr	r3, [sp, #24]
   1bc84:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   1bc88:	2c01      	cmp	r4, #1
   1bc8a:	f175 0300 	sbcs.w	r3, r5, #0
   1bc8e:	daba      	bge.n	1bc06 <zsock_poll_internal+0x11e>
   1bc90:	e75f      	b.n	1bb52 <zsock_poll_internal+0x6a>
			pfd->revents = 0;
   1bc92:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   1bc96:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   1bc9a:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   1bc9e:	2800      	cmp	r0, #0
   1bca0:	db29      	blt.n	1bcf6 <zsock_poll_internal+0x20e>
	ctx = z_get_fd_obj_and_vtable(sock,
   1bca2:	aa0a      	add	r2, sp, #40	; 0x28
   1bca4:	a909      	add	r1, sp, #36	; 0x24
   1bca6:	f7fe fd4b 	bl	1a740 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   1bcaa:	4683      	mov	fp, r0
   1bcac:	b920      	cbnz	r0, 1bcb8 <zsock_poll_internal+0x1d0>
				pfd->revents = ZSOCK_POLLNVAL;
   1bcae:	2320      	movs	r3, #32
   1bcb0:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   1bcb4:	3701      	adds	r7, #1
   1bcb6:	e01e      	b.n	1bcf6 <zsock_poll_internal+0x20e>
			(void)k_mutex_lock(lock, K_FOREVER);
   1bcb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bcc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bcc2:	f00f ff78 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   1bcc6:	ab08      	add	r3, sp, #32
   1bcc8:	4659      	mov	r1, fp
   1bcca:	f240 1203 	movw	r2, #259	; 0x103
   1bcce:	9300      	str	r3, [sp, #0]
   1bcd0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bcd2:	464b      	mov	r3, r9
   1bcd4:	f00f ff60 	bl	2bb98 <z_fdtable_call_ioctl>
   1bcd8:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   1bcda:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bcdc:	f00f ff6d 	bl	2bbba <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   1bce0:	f11b 0f0b 	cmn.w	fp, #11
   1bce4:	d00c      	beq.n	1bd00 <zsock_poll_internal+0x218>
			} else if (result != 0) {
   1bce6:	f1bb 0f00 	cmp.w	fp, #0
   1bcea:	f47f af6d 	bne.w	1bbc8 <zsock_poll_internal+0xe0>
			if (pfd->revents != 0) {
   1bcee:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   1bcf2:	2b00      	cmp	r3, #0
   1bcf4:	d1de      	bne.n	1bcb4 <zsock_poll_internal+0x1cc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   1bcf6:	f109 0908 	add.w	r9, r9, #8
   1bcfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1bcfe:	e7a8      	b.n	1bc52 <zsock_poll_internal+0x16a>
				retry = true;
   1bd00:	f04f 0801 	mov.w	r8, #1
   1bd04:	e7f7      	b.n	1bcf6 <zsock_poll_internal+0x20e>
   1bd06:	bf00      	nop
   1bd08:	cccccccd 	.word	0xcccccccd

0001bd0c <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   1bd0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1bd0e:	4604      	mov	r4, r0
   1bd10:	b940      	cbnz	r0, 1bd24 <socket_offload_dns_register+0x18>
   1bd12:	490b      	ldr	r1, [pc, #44]	; (1bd40 <socket_offload_dns_register+0x34>)
   1bd14:	480b      	ldr	r0, [pc, #44]	; (1bd44 <socket_offload_dns_register+0x38>)
   1bd16:	2213      	movs	r2, #19
   1bd18:	f00f fd48 	bl	2b7ac <printk>
   1bd1c:	2113      	movs	r1, #19
   1bd1e:	4808      	ldr	r0, [pc, #32]	; (1bd40 <socket_offload_dns_register+0x34>)
   1bd20:	f00f fedb 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   1bd24:	4d08      	ldr	r5, [pc, #32]	; (1bd48 <socket_offload_dns_register+0x3c>)
   1bd26:	682b      	ldr	r3, [r5, #0]
   1bd28:	b143      	cbz	r3, 1bd3c <socket_offload_dns_register+0x30>
   1bd2a:	4905      	ldr	r1, [pc, #20]	; (1bd40 <socket_offload_dns_register+0x34>)
   1bd2c:	4805      	ldr	r0, [pc, #20]	; (1bd44 <socket_offload_dns_register+0x38>)
   1bd2e:	2214      	movs	r2, #20
   1bd30:	f00f fd3c 	bl	2b7ac <printk>
   1bd34:	2114      	movs	r1, #20
   1bd36:	4802      	ldr	r0, [pc, #8]	; (1bd40 <socket_offload_dns_register+0x34>)
   1bd38:	f00f fecf 	bl	2bada <assert_post_action>

	dns_offload = ops;
   1bd3c:	602c      	str	r4, [r5, #0]
}
   1bd3e:	bd38      	pop	{r3, r4, r5, pc}
   1bd40:	0002f382 	.word	0x0002f382
   1bd44:	0002f296 	.word	0x0002f296
   1bd48:	2000ce30 	.word	0x2000ce30

0001bd4c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   1bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   1bd50:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1bda8 <socket_offload_getaddrinfo+0x5c>
{
   1bd54:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   1bd56:	f8d8 3000 	ldr.w	r3, [r8]
{
   1bd5a:	4604      	mov	r4, r0
   1bd5c:	460d      	mov	r5, r1
   1bd5e:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   1bd60:	b943      	cbnz	r3, 1bd74 <socket_offload_getaddrinfo+0x28>
   1bd62:	4912      	ldr	r1, [pc, #72]	; (1bdac <socket_offload_getaddrinfo+0x60>)
   1bd64:	4812      	ldr	r0, [pc, #72]	; (1bdb0 <socket_offload_getaddrinfo+0x64>)
   1bd66:	221d      	movs	r2, #29
   1bd68:	f00f fd20 	bl	2b7ac <printk>
   1bd6c:	211d      	movs	r1, #29
   1bd6e:	480f      	ldr	r0, [pc, #60]	; (1bdac <socket_offload_getaddrinfo+0x60>)
   1bd70:	f00f feb3 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   1bd74:	f8d8 3000 	ldr.w	r3, [r8]
   1bd78:	681b      	ldr	r3, [r3, #0]
   1bd7a:	b943      	cbnz	r3, 1bd8e <socket_offload_getaddrinfo+0x42>
   1bd7c:	490b      	ldr	r1, [pc, #44]	; (1bdac <socket_offload_getaddrinfo+0x60>)
   1bd7e:	480c      	ldr	r0, [pc, #48]	; (1bdb0 <socket_offload_getaddrinfo+0x64>)
   1bd80:	221e      	movs	r2, #30
   1bd82:	f00f fd13 	bl	2b7ac <printk>
   1bd86:	211e      	movs	r1, #30
   1bd88:	4808      	ldr	r0, [pc, #32]	; (1bdac <socket_offload_getaddrinfo+0x60>)
   1bd8a:	f00f fea6 	bl	2bada <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   1bd8e:	f8d8 3000 	ldr.w	r3, [r8]
   1bd92:	4632      	mov	r2, r6
   1bd94:	f8d3 e000 	ldr.w	lr, [r3]
   1bd98:	4629      	mov	r1, r5
   1bd9a:	463b      	mov	r3, r7
   1bd9c:	4620      	mov	r0, r4
   1bd9e:	46f4      	mov	ip, lr
}
   1bda0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   1bda4:	4760      	bx	ip
   1bda6:	bf00      	nop
   1bda8:	2000ce30 	.word	0x2000ce30
   1bdac:	0002f382 	.word	0x0002f382
   1bdb0:	0002f296 	.word	0x0002f296

0001bdb4 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   1bdb4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   1bdb6:	4d0f      	ldr	r5, [pc, #60]	; (1bdf4 <socket_offload_freeaddrinfo+0x40>)
{
   1bdb8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   1bdba:	682b      	ldr	r3, [r5, #0]
   1bdbc:	b943      	cbnz	r3, 1bdd0 <socket_offload_freeaddrinfo+0x1c>
   1bdbe:	490e      	ldr	r1, [pc, #56]	; (1bdf8 <socket_offload_freeaddrinfo+0x44>)
   1bdc0:	480e      	ldr	r0, [pc, #56]	; (1bdfc <socket_offload_freeaddrinfo+0x48>)
   1bdc2:	2225      	movs	r2, #37	; 0x25
   1bdc4:	f00f fcf2 	bl	2b7ac <printk>
   1bdc8:	2125      	movs	r1, #37	; 0x25
   1bdca:	480b      	ldr	r0, [pc, #44]	; (1bdf8 <socket_offload_freeaddrinfo+0x44>)
   1bdcc:	f00f fe85 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   1bdd0:	682b      	ldr	r3, [r5, #0]
   1bdd2:	685b      	ldr	r3, [r3, #4]
   1bdd4:	b943      	cbnz	r3, 1bde8 <socket_offload_freeaddrinfo+0x34>
   1bdd6:	4908      	ldr	r1, [pc, #32]	; (1bdf8 <socket_offload_freeaddrinfo+0x44>)
   1bdd8:	4808      	ldr	r0, [pc, #32]	; (1bdfc <socket_offload_freeaddrinfo+0x48>)
   1bdda:	2226      	movs	r2, #38	; 0x26
   1bddc:	f00f fce6 	bl	2b7ac <printk>
   1bde0:	2126      	movs	r1, #38	; 0x26
   1bde2:	4805      	ldr	r0, [pc, #20]	; (1bdf8 <socket_offload_freeaddrinfo+0x44>)
   1bde4:	f00f fe79 	bl	2bada <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   1bde8:	682b      	ldr	r3, [r5, #0]
   1bdea:	4620      	mov	r0, r4
}
   1bdec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   1bdf0:	685b      	ldr	r3, [r3, #4]
   1bdf2:	4718      	bx	r3
   1bdf4:	2000ce30 	.word	0x2000ce30
   1bdf8:	0002f382 	.word	0x0002f382
   1bdfc:	0002f296 	.word	0x0002f296

0001be00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be04:	4605      	mov	r5, r0
	__asm__ volatile(
   1be06:	f04f 0320 	mov.w	r3, #32
   1be0a:	f3ef 8611 	mrs	r6, BASEPRI
   1be0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1be12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be16:	481d      	ldr	r0, [pc, #116]	; (1be8c <pm_state_notify+0x8c>)
   1be18:	f00a fa30 	bl	2627c <z_spin_lock_valid>
   1be1c:	b940      	cbnz	r0, 1be30 <pm_state_notify+0x30>
   1be1e:	491c      	ldr	r1, [pc, #112]	; (1be90 <pm_state_notify+0x90>)
   1be20:	481c      	ldr	r0, [pc, #112]	; (1be94 <pm_state_notify+0x94>)
   1be22:	228e      	movs	r2, #142	; 0x8e
   1be24:	f00f fcc2 	bl	2b7ac <printk>
   1be28:	218e      	movs	r1, #142	; 0x8e
   1be2a:	4819      	ldr	r0, [pc, #100]	; (1be90 <pm_state_notify+0x90>)
   1be2c:	f00f fe55 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   1be30:	4816      	ldr	r0, [pc, #88]	; (1be8c <pm_state_notify+0x8c>)
   1be32:	f00a fa3f 	bl	262b4 <z_spin_lock_set_owner>
	return list->head;
   1be36:	4b18      	ldr	r3, [pc, #96]	; (1be98 <pm_state_notify+0x98>)
   1be38:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1be3a:	b19c      	cbz	r4, 1be64 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1be3c:	f04f 090c 	mov.w	r9, #12
   1be40:	4f16      	ldr	r7, [pc, #88]	; (1be9c <pm_state_notify+0x9c>)
   1be42:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1bea0 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   1be46:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1be4a:	2d00      	cmp	r5, #0
   1be4c:	bf08      	it	eq
   1be4e:	4613      	moveq	r3, r2
		if (callback) {
   1be50:	b12b      	cbz	r3, 1be5e <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1be52:	f898 2014 	ldrb.w	r2, [r8, #20]
   1be56:	fb09 f202 	mul.w	r2, r9, r2
   1be5a:	5cb8      	ldrb	r0, [r7, r2]
   1be5c:	4798      	blx	r3
	return node->next;
   1be5e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1be60:	2c00      	cmp	r4, #0
   1be62:	d1f0      	bne.n	1be46 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be64:	4809      	ldr	r0, [pc, #36]	; (1be8c <pm_state_notify+0x8c>)
   1be66:	f00a fa17 	bl	26298 <z_spin_unlock_valid>
   1be6a:	b940      	cbnz	r0, 1be7e <pm_state_notify+0x7e>
   1be6c:	4908      	ldr	r1, [pc, #32]	; (1be90 <pm_state_notify+0x90>)
   1be6e:	4809      	ldr	r0, [pc, #36]	; (1be94 <pm_state_notify+0x94>)
   1be70:	22b9      	movs	r2, #185	; 0xb9
   1be72:	f00f fc9b 	bl	2b7ac <printk>
   1be76:	21b9      	movs	r1, #185	; 0xb9
   1be78:	4805      	ldr	r0, [pc, #20]	; (1be90 <pm_state_notify+0x90>)
   1be7a:	f00f fe2e 	bl	2bada <assert_post_action>
	__asm__ volatile(
   1be7e:	f386 8811 	msr	BASEPRI, r6
   1be82:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1be86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1be8a:	bf00      	nop
   1be8c:	2000ce34 	.word	0x2000ce34
   1be90:	0002f2d0 	.word	0x0002f2d0
   1be94:	0002f296 	.word	0x0002f296
   1be98:	2000ce38 	.word	0x2000ce38
   1be9c:	2000ce40 	.word	0x2000ce40
   1bea0:	2000d44c 	.word	0x2000d44c

0001bea4 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bea4:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bea6:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bea8:	f000 001f 	and.w	r0, r0, #31
   1beac:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1beb0:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1beb2:	4b05      	ldr	r3, [pc, #20]	; (1bec8 <atomic_clear_bit.constprop.0+0x24>)
   1beb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1beb8:	e8d3 2fef 	ldaex	r2, [r3]
   1bebc:	4002      	ands	r2, r0
   1bebe:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bec2:	2900      	cmp	r1, #0
   1bec4:	d1f8      	bne.n	1beb8 <atomic_clear_bit.constprop.0+0x14>
}
   1bec6:	4770      	bx	lr
   1bec8:	2000ce4c 	.word	0x2000ce4c

0001becc <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1becc:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   1bece:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   1bed0:	4b17      	ldr	r3, [pc, #92]	; (1bf30 <pm_system_resume+0x64>)
   1bed2:	7d1c      	ldrb	r4, [r3, #20]
   1bed4:	f004 031f 	and.w	r3, r4, #31
   1bed8:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1beda:	43d0      	mvns	r0, r2
   1bedc:	4b15      	ldr	r3, [pc, #84]	; (1bf34 <pm_system_resume+0x68>)
   1bede:	0961      	lsrs	r1, r4, #5
   1bee0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1bee4:	e8d3 1fef 	ldaex	r1, [r3]
   1bee8:	ea01 0500 	and.w	r5, r1, r0
   1beec:	e8c3 5fec 	stlex	ip, r5, [r3]
   1bef0:	f1bc 0f00 	cmp.w	ip, #0
   1bef4:	d1f6      	bne.n	1bee4 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1bef6:	4211      	tst	r1, r2
   1bef8:	d013      	beq.n	1bf22 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   1befa:	4b0f      	ldr	r3, [pc, #60]	; (1bf38 <pm_system_resume+0x6c>)
   1befc:	4d0f      	ldr	r5, [pc, #60]	; (1bf3c <pm_system_resume+0x70>)
   1befe:	b18b      	cbz	r3, 1bf24 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1bf00:	230c      	movs	r3, #12
   1bf02:	4363      	muls	r3, r4
   1bf04:	18ea      	adds	r2, r5, r3
   1bf06:	7851      	ldrb	r1, [r2, #1]
   1bf08:	5ce8      	ldrb	r0, [r5, r3]
   1bf0a:	f00f fdfa 	bl	2bb02 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   1bf0e:	2000      	movs	r0, #0
   1bf10:	f7ff ff76 	bl	1be00 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1bf14:	230c      	movs	r3, #12
   1bf16:	435c      	muls	r4, r3
   1bf18:	2300      	movs	r3, #0
   1bf1a:	192a      	adds	r2, r5, r4
   1bf1c:	512b      	str	r3, [r5, r4]
   1bf1e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1bf22:	bd38      	pop	{r3, r4, r5, pc}
   1bf24:	f383 8811 	msr	BASEPRI, r3
   1bf28:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1bf2c:	e7ef      	b.n	1bf0e <pm_system_resume+0x42>
   1bf2e:	bf00      	nop
   1bf30:	2000d44c 	.word	0x2000d44c
   1bf34:	2000ce50 	.word	0x2000ce50
   1bf38:	0002bb03 	.word	0x0002bb03
   1bf3c:	2000ce40 	.word	0x2000ce40

0001bf40 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   1bf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   1bf44:	4b2f      	ldr	r3, [pc, #188]	; (1c004 <pm_system_suspend+0xc4>)
{
   1bf46:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   1bf48:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bf4a:	ea4f 1854 	mov.w	r8, r4, lsr #5
   1bf4e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bf52:	4b2d      	ldr	r3, [pc, #180]	; (1c008 <pm_system_suspend+0xc8>)
   1bf54:	4443      	add	r3, r8
   1bf56:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bf5a:	f004 091f 	and.w	r9, r4, #31
   1bf5e:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   1bf62:	f013 0f01 	tst.w	r3, #1
   1bf66:	4e29      	ldr	r6, [pc, #164]	; (1c00c <pm_system_suspend+0xcc>)
   1bf68:	d10a      	bne.n	1bf80 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   1bf6a:	4601      	mov	r1, r0
   1bf6c:	4620      	mov	r0, r4
   1bf6e:	f000 f87b 	bl	1c068 <pm_policy_next_state>
		if (info != NULL) {
   1bf72:	b128      	cbz	r0, 1bf80 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   1bf74:	c807      	ldmia	r0, {r0, r1, r2}
   1bf76:	230c      	movs	r3, #12
   1bf78:	fb03 6304 	mla	r3, r3, r4, r6
   1bf7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1bf80:	230c      	movs	r3, #12
   1bf82:	4363      	muls	r3, r4
   1bf84:	5cf5      	ldrb	r5, [r6, r3]
   1bf86:	18f2      	adds	r2, r6, r3
   1bf88:	b92d      	cbnz	r5, 1bf96 <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   1bf8a:	4620      	mov	r0, r4
   1bf8c:	f7ff ff8a 	bl	1bea4 <atomic_clear_bit.constprop.0>
		ret = false;
   1bf90:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   1bf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   1bf96:	1c7b      	adds	r3, r7, #1
   1bf98:	d00f      	beq.n	1bfba <pm_system_suspend+0x7a>
   1bf9a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1bf9e:	2100      	movs	r1, #0
   1bfa0:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1bfa4:	481a      	ldr	r0, [pc, #104]	; (1c010 <pm_system_suspend+0xd0>)
   1bfa6:	2300      	movs	r3, #0
   1bfa8:	fbec 0105 	umlal	r0, r1, ip, r5
   1bfac:	4a19      	ldr	r2, [pc, #100]	; (1c014 <pm_system_suspend+0xd4>)
   1bfae:	f7fd f877 	bl	190a0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1bfb2:	2101      	movs	r1, #1
   1bfb4:	1a38      	subs	r0, r7, r0
   1bfb6:	f00c f931 	bl	2821c <z_set_timeout_expiry>
	k_sched_lock();
   1bfba:	f00b f869 	bl	27090 <k_sched_lock>
	pm_state_notify(true);
   1bfbe:	2001      	movs	r0, #1
   1bfc0:	f7ff ff1e 	bl	1be00 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bfc4:	2301      	movs	r3, #1
   1bfc6:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bfca:	4b13      	ldr	r3, [pc, #76]	; (1c018 <pm_system_suspend+0xd8>)
   1bfcc:	4498      	add	r8, r3
   1bfce:	e8d8 3fef 	ldaex	r3, [r8]
   1bfd2:	ea43 0309 	orr.w	r3, r3, r9
   1bfd6:	e8c8 3fe2 	stlex	r2, r3, [r8]
   1bfda:	2a00      	cmp	r2, #0
   1bfdc:	d1f7      	bne.n	1bfce <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   1bfde:	4b0f      	ldr	r3, [pc, #60]	; (1c01c <pm_system_suspend+0xdc>)
   1bfe0:	b133      	cbz	r3, 1bff0 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   1bfe2:	230c      	movs	r3, #12
   1bfe4:	4363      	muls	r3, r4
   1bfe6:	18f2      	adds	r2, r6, r3
   1bfe8:	7851      	ldrb	r1, [r2, #1]
   1bfea:	5cf0      	ldrb	r0, [r6, r3]
   1bfec:	f00f fd7d 	bl	2baea <pm_state_set>
	pm_system_resume();
   1bff0:	f7ff ff6c 	bl	1becc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   1bff4:	4620      	mov	r0, r4
   1bff6:	f7ff ff55 	bl	1bea4 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   1bffa:	f00b fca5 	bl	27948 <k_sched_unlock>
	bool ret = true;
   1bffe:	2001      	movs	r0, #1
   1c000:	e7c7      	b.n	1bf92 <pm_system_suspend+0x52>
   1c002:	bf00      	nop
   1c004:	2000d44c 	.word	0x2000d44c
   1c008:	2000ce4c 	.word	0x2000ce4c
   1c00c:	2000ce40 	.word	0x2000ce40
   1c010:	000f423f 	.word	0x000f423f
   1c014:	000f4240 	.word	0x000f4240
   1c018:	2000ce50 	.word	0x2000ce50
   1c01c:	0002baeb 	.word	0x0002baeb

0001c020 <pm_constraint_get>:
	(void)(v);
}

bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");
   1c020:	2806      	cmp	r0, #6
{
   1c022:	b510      	push	{r4, lr}
   1c024:	4604      	mov	r4, r0
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");
   1c026:	d908      	bls.n	1c03a <pm_constraint_get+0x1a>
   1c028:	4908      	ldr	r1, [pc, #32]	; (1c04c <pm_constraint_get+0x2c>)
   1c02a:	4809      	ldr	r0, [pc, #36]	; (1c050 <pm_constraint_get+0x30>)
   1c02c:	222c      	movs	r2, #44	; 0x2c
   1c02e:	f00f fbbd 	bl	2b7ac <printk>
   1c032:	212c      	movs	r1, #44	; 0x2c
   1c034:	4805      	ldr	r0, [pc, #20]	; (1c04c <pm_constraint_get+0x2c>)
   1c036:	f00f fd50 	bl	2bada <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c03a:	4806      	ldr	r0, [pc, #24]	; (1c054 <pm_constraint_get+0x34>)
   1c03c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1c040:	e8d4 0faf 	lda	r0, [r4]

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   1c044:	fab0 f080 	clz	r0, r0
   1c048:	0940      	lsrs	r0, r0, #5
   1c04a:	bd10      	pop	{r4, pc}
   1c04c:	0002f3c0 	.word	0x0002f3c0
   1c050:	0002f296 	.word	0x0002f296
   1c054:	2000ce54 	.word	0x2000ce54

0001c058 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   1c058:	b908      	cbnz	r0, 1c05e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1c05a:	4b02      	ldr	r3, [pc, #8]	; (1c064 <pm_state_cpu_get_all+0xc>)
   1c05c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1c05e:	2000      	movs	r0, #0
   1c060:	4770      	bx	lr
   1c062:	bf00      	nop
   1c064:	0002eb88 	.word	0x0002eb88

0001c068 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   1c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c06c:	b085      	sub	sp, #20
   1c06e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1c070:	a903      	add	r1, sp, #12
   1c072:	f7ff fff1 	bl	1c058 <pm_state_cpu_get_all>
   1c076:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1c07a:	f04f 0900 	mov.w	r9, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1c07e:	1e44      	subs	r4, r0, #1
   1c080:	f8df a068 	ldr.w	sl, [pc, #104]	; 1c0ec <pm_policy_next_state+0x84>
   1c084:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1c0f0 <pm_policy_next_state+0x88>
   1c088:	b224      	sxth	r4, r4
   1c08a:	1c63      	adds	r3, r4, #1
   1c08c:	d104      	bne.n	1c098 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   1c08e:	2500      	movs	r5, #0
}
   1c090:	4628      	mov	r0, r5
   1c092:	b005      	add	sp, #20
   1c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   1c098:	9a03      	ldr	r2, [sp, #12]
   1c09a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (!pm_constraint_get(state->state)) {
   1c09e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   1c0a2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   1c0a6:	f7ff ffbb 	bl	1c020 <pm_constraint_get>
   1c0aa:	b1e0      	cbz	r0, 1c0e6 <pm_policy_next_state+0x7e>
   1c0ac:	f04f 0b00 	mov.w	fp, #0
   1c0b0:	46d4      	mov	ip, sl
   1c0b2:	4659      	mov	r1, fp
   1c0b4:	6868      	ldr	r0, [r5, #4]
   1c0b6:	4642      	mov	r2, r8
   1c0b8:	fbe0 c107 	umlal	ip, r1, r0, r7
   1c0bc:	464b      	mov	r3, r9
   1c0be:	4660      	mov	r0, ip
   1c0c0:	f7fc ffee 	bl	190a0 <__aeabi_uldivmod>
   1c0c4:	46d4      	mov	ip, sl
   1c0c6:	4659      	mov	r1, fp
   1c0c8:	9001      	str	r0, [sp, #4]
   1c0ca:	68a8      	ldr	r0, [r5, #8]
   1c0cc:	4642      	mov	r2, r8
   1c0ce:	fbe0 c107 	umlal	ip, r1, r0, r7
   1c0d2:	464b      	mov	r3, r9
   1c0d4:	4660      	mov	r0, ip
   1c0d6:	f7fc ffe3 	bl	190a0 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   1c0da:	1c72      	adds	r2, r6, #1
   1c0dc:	d0d8      	beq.n	1c090 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
   1c0de:	9b01      	ldr	r3, [sp, #4]
   1c0e0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1c0e2:	42b0      	cmp	r0, r6
   1c0e4:	d9d4      	bls.n	1c090 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1c0e6:	3c01      	subs	r4, #1
   1c0e8:	b224      	sxth	r4, r4
   1c0ea:	e7ce      	b.n	1c08a <pm_policy_next_state+0x22>
   1c0ec:	000f423f 	.word	0x000f423f
   1c0f0:	000f4240 	.word	0x000f4240

0001c0f4 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   1c0f4:	b508      	push	{r3, lr}
	k_sched_lock();
   1c0f6:	f00a ffcb 	bl	27090 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   1c0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   1c0fe:	4801      	ldr	r0, [pc, #4]	; (1c104 <before_nse+0x10>)
   1c100:	f00f be45 	b.w	2bd8e <z_arm_save_fp_context>
   1c104:	2000ce70 	.word	0x2000ce70

0001c108 <after_nse>:

void after_nse(void)
{
   1c108:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   1c10a:	4803      	ldr	r0, [pc, #12]	; (1c118 <after_nse+0x10>)
   1c10c:	f00f fe40 	bl	2bd90 <z_arm_restore_fp_context>
	k_sched_unlock();
}
   1c110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_sched_unlock();
   1c114:	f00b bc18 	b.w	27948 <k_sched_unlock>
   1c118:	2000ce70 	.word	0x2000ce70

0001c11c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1c11c:	4901      	ldr	r1, [pc, #4]	; (1c124 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1c11e:	2210      	movs	r2, #16
	str	r2, [r1]
   1c120:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1c122:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1c124:	e000ed10 	.word	0xe000ed10

0001c128 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1c128:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1c12a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1c12c:	f380 8811 	msr	BASEPRI, r0
	isb
   1c130:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1c134:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1c138:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1c13a:	b662      	cpsie	i
	isb
   1c13c:	f3bf 8f6f 	isb	sy

	bx	lr
   1c140:	4770      	bx	lr
   1c142:	bf00      	nop

0001c144 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1c144:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1c146:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1c148:	f381 8811 	msr	BASEPRI, r1

	wfe
   1c14c:	bf20      	wfe

	msr	BASEPRI, r0
   1c14e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1c152:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1c154:	4770      	bx	lr
   1c156:	bf00      	nop

0001c158 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c158:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c15a:	4605      	mov	r5, r0

	if (esf != NULL) {
   1c15c:	460c      	mov	r4, r1
   1c15e:	b1c9      	cbz	r1, 1c194 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1c160:	688b      	ldr	r3, [r1, #8]
   1c162:	4810      	ldr	r0, [pc, #64]	; (1c1a4 <z_arm_fatal_error+0x4c>)
   1c164:	9300      	str	r3, [sp, #0]
   1c166:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c16a:	2145      	movs	r1, #69	; 0x45
   1c16c:	f00f fccf 	bl	2bb0e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1c170:	6963      	ldr	r3, [r4, #20]
   1c172:	2145      	movs	r1, #69	; 0x45
   1c174:	9300      	str	r3, [sp, #0]
   1c176:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1c17a:	480b      	ldr	r0, [pc, #44]	; (1c1a8 <z_arm_fatal_error+0x50>)
   1c17c:	f00f fcc7 	bl	2bb0e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1c180:	2145      	movs	r1, #69	; 0x45
   1c182:	69e2      	ldr	r2, [r4, #28]
   1c184:	4809      	ldr	r0, [pc, #36]	; (1c1ac <z_arm_fatal_error+0x54>)
   1c186:	f00f fcc2 	bl	2bb0e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1c18a:	2145      	movs	r1, #69	; 0x45
   1c18c:	69a2      	ldr	r2, [r4, #24]
   1c18e:	4808      	ldr	r0, [pc, #32]	; (1c1b0 <z_arm_fatal_error+0x58>)
   1c190:	f00f fcbd 	bl	2bb0e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1c194:	4621      	mov	r1, r4
   1c196:	4628      	mov	r0, r5
}
   1c198:	b003      	add	sp, #12
   1c19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   1c19e:	f009 bd15 	b.w	25bcc <z_fatal_error>
   1c1a2:	bf00      	nop
   1c1a4:	0002f3ea 	.word	0x0002f3ea
   1c1a8:	0002f41e 	.word	0x0002f41e
   1c1ac:	0002f452 	.word	0x0002f452
   1c1b0:	0002f466 	.word	0x0002f466

0001c1b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1c1b4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1c1b6:	2b00      	cmp	r3, #0
   1c1b8:	db08      	blt.n	1c1cc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c1ba:	2201      	movs	r2, #1
   1c1bc:	f000 001f 	and.w	r0, r0, #31
   1c1c0:	fa02 f000 	lsl.w	r0, r2, r0
   1c1c4:	4a02      	ldr	r2, [pc, #8]	; (1c1d0 <arch_irq_enable+0x1c>)
   1c1c6:	095b      	lsrs	r3, r3, #5
   1c1c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1c1cc:	4770      	bx	lr
   1c1ce:	bf00      	nop
   1c1d0:	e000e100 	.word	0xe000e100

0001c1d4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   1c1d4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1c1d6:	2b00      	cmp	r3, #0
   1c1d8:	db0d      	blt.n	1c1f6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c1da:	2201      	movs	r2, #1
   1c1dc:	f000 001f 	and.w	r0, r0, #31
   1c1e0:	fa02 f000 	lsl.w	r0, r2, r0
   1c1e4:	095b      	lsrs	r3, r3, #5
   1c1e6:	4a04      	ldr	r2, [pc, #16]	; (1c1f8 <arch_irq_disable+0x24>)
   1c1e8:	3320      	adds	r3, #32
   1c1ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1c1ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c1f2:	f3bf 8f6f 	isb	sy
}
   1c1f6:	4770      	bx	lr
   1c1f8:	e000e100 	.word	0xe000e100

0001c1fc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1c1fc:	4b05      	ldr	r3, [pc, #20]	; (1c214 <arch_irq_is_enabled+0x18>)
   1c1fe:	0942      	lsrs	r2, r0, #5
   1c200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1c204:	2301      	movs	r3, #1
   1c206:	f000 001f 	and.w	r0, r0, #31
   1c20a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1c20e:	4010      	ands	r0, r2
   1c210:	4770      	bx	lr
   1c212:	bf00      	nop
   1c214:	e000e100 	.word	0xe000e100

0001c218 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1c218:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1c21a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1c21c:	2c07      	cmp	r4, #7
{
   1c21e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   1c220:	d908      	bls.n	1c234 <z_arm_irq_priority_set+0x1c>
   1c222:	490d      	ldr	r1, [pc, #52]	; (1c258 <z_arm_irq_priority_set+0x40>)
   1c224:	480d      	ldr	r0, [pc, #52]	; (1c25c <z_arm_irq_priority_set+0x44>)
   1c226:	2257      	movs	r2, #87	; 0x57
   1c228:	f00f fac0 	bl	2b7ac <printk>
   1c22c:	2157      	movs	r1, #87	; 0x57
   1c22e:	480a      	ldr	r0, [pc, #40]	; (1c258 <z_arm_irq_priority_set+0x40>)
   1c230:	f00f fc53 	bl	2bada <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1c234:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1c236:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c238:	bfac      	ite	ge
   1c23a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c23e:	4b08      	ldrlt	r3, [pc, #32]	; (1c260 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c240:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1c244:	b2e4      	uxtb	r4, r4
   1c246:	bfab      	itete	ge
   1c248:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c24c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c250:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c254:	555c      	strblt	r4, [r3, r5]
}
   1c256:	bd38      	pop	{r3, r4, r5, pc}
   1c258:	0002f499 	.word	0x0002f499
   1c25c:	0002f296 	.word	0x0002f296
   1c260:	e000ed14 	.word	0xe000ed14

0001c264 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1c264:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1c266:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1c268:	4b04      	ldr	r3, [pc, #16]	; (1c27c <_arch_isr_direct_pm+0x18>)
   1c26a:	699a      	ldr	r2, [r3, #24]
   1c26c:	b11a      	cbz	r2, 1c276 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1c26e:	2200      	movs	r2, #0
   1c270:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1c272:	f011 fb17 	bl	2d8a4 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1c276:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1c278:	bd08      	pop	{r3, pc}
   1c27a:	bf00      	nop
   1c27c:	2000d44c 	.word	0x2000d44c

0001c280 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1c280:	bf30      	wfi
    b z_SysNmiOnReset
   1c282:	f7ff bffd 	b.w	1c280 <z_SysNmiOnReset>
   1c286:	bf00      	nop

0001c288 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c288:	4a0b      	ldr	r2, [pc, #44]	; (1c2b8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1c28a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1c28c:	4b0b      	ldr	r3, [pc, #44]	; (1c2bc <z_arm_prep_c+0x34>)
   1c28e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1c292:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1c294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c298:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1c29c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1c2a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1c2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1c2a8:	f009 fd06 	bl	25cb8 <z_bss_zero>
	z_data_copy();
   1c2ac:	f00b fe32 	bl	27f14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1c2b0:	f000 fae0 	bl	1c874 <z_arm_interrupt_init>
	z_cstart();
   1c2b4:	f009 fd40 	bl	25d38 <z_cstart>
   1c2b8:	00018200 	.word	0x00018200
   1c2bc:	e000ed00 	.word	0xe000ed00

0001c2c0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1c2c0:	4a09      	ldr	r2, [pc, #36]	; (1c2e8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1c2c2:	490a      	ldr	r1, [pc, #40]	; (1c2ec <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1c2c4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1c2c6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1c2c8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1c2ca:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c2cc:	4908      	ldr	r1, [pc, #32]	; (1c2f0 <arch_swap+0x30>)
   1c2ce:	684b      	ldr	r3, [r1, #4]
   1c2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c2d4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1c2d6:	2300      	movs	r3, #0
   1c2d8:	f383 8811 	msr	BASEPRI, r3
   1c2dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1c2e0:	6893      	ldr	r3, [r2, #8]
}
   1c2e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1c2e4:	4770      	bx	lr
   1c2e6:	bf00      	nop
   1c2e8:	2000d44c 	.word	0x2000d44c
   1c2ec:	0002ee9c 	.word	0x0002ee9c
   1c2f0:	e000ed00 	.word	0xe000ed00

0001c2f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1c2f4:	4913      	ldr	r1, [pc, #76]	; (1c344 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1c2f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1c2f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1c2fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1c2fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1c302:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c306:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   1c308:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1c30c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1c310:	4f0d      	ldr	r7, [pc, #52]	; (1c348 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1c312:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1c316:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1c318:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1c31a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1c31c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   1c31e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1c320:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1c322:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1c326:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1c32a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1c32e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1c332:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1c336:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1c338:	f00f fd25 	bl	2bd86 <configure_builtin_stack_guard>
    pop {r2, lr}
   1c33c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1c340:	4770      	bx	lr
   1c342:	0000      	.short	0x0000
    ldr r1, =_kernel
   1c344:	2000d44c 	.word	0x2000d44c
    ldr v4, =_SCS_ICSR
   1c348:	e000ed04 	.word	0xe000ed04

0001c34c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1c34c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1c350:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1c352:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1c356:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1c35a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1c35c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1c360:	2902      	cmp	r1, #2
    beq _oops
   1c362:	d0ff      	beq.n	1c364 <_oops>

0001c364 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1c364:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1c366:	f00f fcff 	bl	2bd68 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1c36a:	bd01      	pop	{r0, pc}

0001c36c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1c36c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1c370:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1c372:	490b      	ldr	r1, [pc, #44]	; (1c3a0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   1c374:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1c378:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1c37a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1c37e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1c382:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1c384:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1c388:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1c38c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1c390:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1c394:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1c396:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1c398:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1c39a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1c39c:	4770      	bx	lr
   1c39e:	bf00      	nop
   1c3a0:	0002b86f 	.word	0x0002b86f

0001c3a4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1c3a4:	4b08      	ldr	r3, [pc, #32]	; (1c3c8 <arch_switch_to_main_thread+0x24>)
   1c3a6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1c3a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1c3aa:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1c3ae:	4610      	mov	r0, r2
   1c3b0:	f381 8809 	msr	PSP, r1
   1c3b4:	2100      	movs	r1, #0
   1c3b6:	b663      	cpsie	if
   1c3b8:	f381 8811 	msr	BASEPRI, r1
   1c3bc:	f3bf 8f6f 	isb	sy
   1c3c0:	2200      	movs	r2, #0
   1c3c2:	2300      	movs	r3, #0
   1c3c4:	f00f fa53 	bl	2b86e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1c3c8:	2000d44c 	.word	0x2000d44c

0001c3cc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1c3cc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1c3ce:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1c3d0:	4a0b      	ldr	r2, [pc, #44]	; (1c400 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1c3d2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1c3d4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1c3d6:	bf1e      	ittt	ne
	movne	r1, #0
   1c3d8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1c3da:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1c3dc:	f011 fa62 	blne	2d8a4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1c3e0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1c3e2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1c3e6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1c3ea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1c3ee:	4905      	ldr	r1, [pc, #20]	; (1c404 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1c3f0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1c3f2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1c3f4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1c3f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1c3fa:	4903      	ldr	r1, [pc, #12]	; (1c408 <_isr_wrapper+0x3c>)
	bx r1
   1c3fc:	4708      	bx	r1
   1c3fe:	0000      	.short	0x0000
	ldr r2, =_kernel
   1c400:	2000d44c 	.word	0x2000d44c
	ldr r1, =_sw_isr_table
   1c404:	0002e794 	.word	0x0002e794
	ldr r1, =z_arm_int_exit
   1c408:	0001c40d 	.word	0x0001c40d

0001c40c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1c40c:	4b04      	ldr	r3, [pc, #16]	; (1c420 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1c40e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1c410:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1c412:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1c414:	d003      	beq.n	1c41e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1c416:	4903      	ldr	r1, [pc, #12]	; (1c424 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1c418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1c41c:	600a      	str	r2, [r1, #0]

0001c41e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1c41e:	4770      	bx	lr
	ldr r3, =_kernel
   1c420:	2000d44c 	.word	0x2000d44c
	ldr r1, =_SCS_ICSR
   1c424:	e000ed04 	.word	0xe000ed04

0001c428 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1c428:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c42a:	4c21      	ldr	r4, [pc, #132]	; (1c4b0 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1c42c:	2145      	movs	r1, #69	; 0x45
   1c42e:	4821      	ldr	r0, [pc, #132]	; (1c4b4 <usage_fault.constprop.0+0x8c>)
   1c430:	f00f fb6d 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1c434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c436:	019d      	lsls	r5, r3, #6
   1c438:	d503      	bpl.n	1c442 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   1c43a:	2145      	movs	r1, #69	; 0x45
   1c43c:	481e      	ldr	r0, [pc, #120]	; (1c4b8 <usage_fault.constprop.0+0x90>)
   1c43e:	f00f fb66 	bl	2bb0e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1c442:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c444:	01dc      	lsls	r4, r3, #7
   1c446:	d503      	bpl.n	1c450 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   1c448:	2145      	movs	r1, #69	; 0x45
   1c44a:	481c      	ldr	r0, [pc, #112]	; (1c4bc <usage_fault.constprop.0+0x94>)
   1c44c:	f00f fb5f 	bl	2bb0e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1c450:	4d17      	ldr	r5, [pc, #92]	; (1c4b0 <usage_fault.constprop.0+0x88>)
   1c452:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1c454:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   1c458:	d004      	beq.n	1c464 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1c45a:	2145      	movs	r1, #69	; 0x45
   1c45c:	4818      	ldr	r0, [pc, #96]	; (1c4c0 <usage_fault.constprop.0+0x98>)
   1c45e:	f00f fb56 	bl	2bb0e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1c462:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1c464:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c466:	0318      	lsls	r0, r3, #12
   1c468:	d503      	bpl.n	1c472 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   1c46a:	2145      	movs	r1, #69	; 0x45
   1c46c:	4815      	ldr	r0, [pc, #84]	; (1c4c4 <usage_fault.constprop.0+0x9c>)
   1c46e:	f00f fb4e 	bl	2bb0e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1c472:	4d0f      	ldr	r5, [pc, #60]	; (1c4b0 <usage_fault.constprop.0+0x88>)
   1c474:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c476:	0359      	lsls	r1, r3, #13
   1c478:	d503      	bpl.n	1c482 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1c47a:	2145      	movs	r1, #69	; 0x45
   1c47c:	4812      	ldr	r0, [pc, #72]	; (1c4c8 <usage_fault.constprop.0+0xa0>)
   1c47e:	f00f fb46 	bl	2bb0e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1c482:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c484:	039a      	lsls	r2, r3, #14
   1c486:	d503      	bpl.n	1c490 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1c488:	2145      	movs	r1, #69	; 0x45
   1c48a:	4810      	ldr	r0, [pc, #64]	; (1c4cc <usage_fault.constprop.0+0xa4>)
   1c48c:	f00f fb3f 	bl	2bb0e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1c490:	4d07      	ldr	r5, [pc, #28]	; (1c4b0 <usage_fault.constprop.0+0x88>)
   1c492:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c494:	03db      	lsls	r3, r3, #15
   1c496:	d503      	bpl.n	1c4a0 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1c498:	2145      	movs	r1, #69	; 0x45
   1c49a:	480d      	ldr	r0, [pc, #52]	; (1c4d0 <usage_fault.constprop.0+0xa8>)
   1c49c:	f00f fb37 	bl	2bb0e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c4a0:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   1c4a2:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1c4a4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1c4a8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1c4ac:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1c4ae:	bd38      	pop	{r3, r4, r5, pc}
   1c4b0:	e000ed00 	.word	0xe000ed00
   1c4b4:	0002f4cf 	.word	0x0002f4cf
   1c4b8:	0002f4ec 	.word	0x0002f4ec
   1c4bc:	0002f504 	.word	0x0002f504
   1c4c0:	0002f523 	.word	0x0002f523
   1c4c4:	0002f552 	.word	0x0002f552
   1c4c8:	0002f575 	.word	0x0002f575
   1c4cc:	0002f59f 	.word	0x0002f59f
   1c4d0:	0002f5be 	.word	0x0002f5be

0001c4d4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1c4d4:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1c4d6:	4c23      	ldr	r4, [pc, #140]	; (1c564 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1c4d8:	4606      	mov	r6, r0
   1c4da:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1c4dc:	4822      	ldr	r0, [pc, #136]	; (1c568 <bus_fault.constprop.0+0x94>)
   1c4de:	2145      	movs	r1, #69	; 0x45
   1c4e0:	f00f fb15 	bl	2bb0e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1c4e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c4e6:	04d9      	lsls	r1, r3, #19
   1c4e8:	d503      	bpl.n	1c4f2 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1c4ea:	2145      	movs	r1, #69	; 0x45
   1c4ec:	481f      	ldr	r0, [pc, #124]	; (1c56c <bus_fault.constprop.0+0x98>)
   1c4ee:	f00f fb0e 	bl	2bb0e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1c4f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c4f4:	051a      	lsls	r2, r3, #20
   1c4f6:	d503      	bpl.n	1c500 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   1c4f8:	2145      	movs	r1, #69	; 0x45
   1c4fa:	481d      	ldr	r0, [pc, #116]	; (1c570 <bus_fault.constprop.0+0x9c>)
   1c4fc:	f00f fb07 	bl	2bb0e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1c500:	4c18      	ldr	r4, [pc, #96]	; (1c564 <bus_fault.constprop.0+0x90>)
   1c502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c504:	059b      	lsls	r3, r3, #22
   1c506:	d510      	bpl.n	1c52a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   1c508:	481a      	ldr	r0, [pc, #104]	; (1c574 <bus_fault.constprop.0+0xa0>)
   1c50a:	2145      	movs	r1, #69	; 0x45
   1c50c:	f00f faff 	bl	2bb0e <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   1c510:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1c512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c514:	0418      	lsls	r0, r3, #16
   1c516:	d508      	bpl.n	1c52a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1c518:	2145      	movs	r1, #69	; 0x45
   1c51a:	4817      	ldr	r0, [pc, #92]	; (1c578 <bus_fault.constprop.0+0xa4>)
   1c51c:	f00f faf7 	bl	2bb0e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1c520:	b11e      	cbz	r6, 1c52a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1c522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c524:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1c528:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1c52a:	4c0e      	ldr	r4, [pc, #56]	; (1c564 <bus_fault.constprop.0+0x90>)
   1c52c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c52e:	0559      	lsls	r1, r3, #21
   1c530:	d503      	bpl.n	1c53a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1c532:	2145      	movs	r1, #69	; 0x45
   1c534:	4811      	ldr	r0, [pc, #68]	; (1c57c <bus_fault.constprop.0+0xa8>)
   1c536:	f00f faea 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1c53a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c53c:	05da      	lsls	r2, r3, #23
   1c53e:	d50b      	bpl.n	1c558 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   1c540:	2145      	movs	r1, #69	; 0x45
   1c542:	480f      	ldr	r0, [pc, #60]	; (1c580 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c544:	f00f fae3 	bl	2bb0e <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   1c548:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1c54a:	4a06      	ldr	r2, [pc, #24]	; (1c564 <bus_fault.constprop.0+0x90>)
   1c54c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c54e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1c552:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c554:	7028      	strb	r0, [r5, #0]
}
   1c556:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1c558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c55a:	049b      	lsls	r3, r3, #18
   1c55c:	d5f4      	bpl.n	1c548 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1c55e:	2145      	movs	r1, #69	; 0x45
   1c560:	4808      	ldr	r0, [pc, #32]	; (1c584 <bus_fault.constprop.0+0xb0>)
   1c562:	e7ef      	b.n	1c544 <bus_fault.constprop.0+0x70>
   1c564:	e000ed00 	.word	0xe000ed00
   1c568:	0002f5ee 	.word	0x0002f5ee
   1c56c:	0002f609 	.word	0x0002f609
   1c570:	0002f61f 	.word	0x0002f61f
   1c574:	0002f637 	.word	0x0002f637
   1c578:	0002f655 	.word	0x0002f655
   1c57c:	0002f66f 	.word	0x0002f66f
   1c580:	0002f68f 	.word	0x0002f68f
   1c584:	0002f6ac 	.word	0x0002f6ac

0001c588 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c588:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c58a:	4c2b      	ldr	r4, [pc, #172]	; (1c638 <mem_manage_fault.constprop.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1c58c:	4606      	mov	r6, r0
   1c58e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1c590:	482a      	ldr	r0, [pc, #168]	; (1c63c <mem_manage_fault.constprop.0+0xb4>)
   1c592:	2145      	movs	r1, #69	; 0x45
   1c594:	f00f fabb 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1c598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c59a:	06d8      	lsls	r0, r3, #27
   1c59c:	d503      	bpl.n	1c5a6 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1c59e:	2145      	movs	r1, #69	; 0x45
   1c5a0:	4827      	ldr	r0, [pc, #156]	; (1c640 <mem_manage_fault.constprop.0+0xb8>)
   1c5a2:	f00f fab4 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1c5a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5a8:	0719      	lsls	r1, r3, #28
   1c5aa:	d503      	bpl.n	1c5b4 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   1c5ac:	2145      	movs	r1, #69	; 0x45
   1c5ae:	4825      	ldr	r0, [pc, #148]	; (1c644 <mem_manage_fault.constprop.0+0xbc>)
   1c5b0:	f00f faad 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1c5b4:	4c20      	ldr	r4, [pc, #128]	; (1c638 <mem_manage_fault.constprop.0+0xb0>)
   1c5b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5b8:	079a      	lsls	r2, r3, #30
   1c5ba:	d510      	bpl.n	1c5de <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   1c5bc:	2145      	movs	r1, #69	; 0x45
   1c5be:	4822      	ldr	r0, [pc, #136]	; (1c648 <mem_manage_fault.constprop.0+0xc0>)
   1c5c0:	f00f faa5 	bl	2bb0e <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   1c5c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1c5c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5c8:	061b      	lsls	r3, r3, #24
   1c5ca:	d508      	bpl.n	1c5de <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1c5cc:	2145      	movs	r1, #69	; 0x45
   1c5ce:	481f      	ldr	r0, [pc, #124]	; (1c64c <mem_manage_fault.constprop.0+0xc4>)
   1c5d0:	f00f fa9d 	bl	2bb0e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1c5d4:	b11e      	cbz	r6, 1c5de <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1c5d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c5dc:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1c5de:	4c16      	ldr	r4, [pc, #88]	; (1c638 <mem_manage_fault.constprop.0+0xb0>)
   1c5e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5e2:	07de      	lsls	r6, r3, #31
   1c5e4:	d503      	bpl.n	1c5ee <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   1c5e6:	2145      	movs	r1, #69	; 0x45
   1c5e8:	4819      	ldr	r0, [pc, #100]	; (1c650 <mem_manage_fault.constprop.0+0xc8>)
   1c5ea:	f00f fa90 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1c5ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c5f0:	0698      	lsls	r0, r3, #26
   1c5f2:	d503      	bpl.n	1c5fc <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   1c5f4:	2145      	movs	r1, #69	; 0x45
   1c5f6:	4817      	ldr	r0, [pc, #92]	; (1c654 <mem_manage_fault.constprop.0+0xcc>)
   1c5f8:	f00f fa89 	bl	2bb0e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c5fc:	4b0e      	ldr	r3, [pc, #56]	; (1c638 <mem_manage_fault.constprop.0+0xb0>)
   1c5fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c600:	06d1      	lsls	r1, r2, #27
   1c602:	d402      	bmi.n	1c60a <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1c604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1c606:	0792      	lsls	r2, r2, #30
   1c608:	d50d      	bpl.n	1c626 <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c60c:	06db      	lsls	r3, r3, #27
   1c60e:	d50a      	bpl.n	1c626 <mem_manage_fault.constprop.0+0x9e>
   1c610:	4911      	ldr	r1, [pc, #68]	; (1c658 <mem_manage_fault.constprop.0+0xd0>)
   1c612:	4812      	ldr	r0, [pc, #72]	; (1c65c <mem_manage_fault.constprop.0+0xd4>)
   1c614:	f240 124f 	movw	r2, #335	; 0x14f
   1c618:	f00f f8c8 	bl	2b7ac <printk>
   1c61c:	f240 114f 	movw	r1, #335	; 0x14f
   1c620:	480d      	ldr	r0, [pc, #52]	; (1c658 <mem_manage_fault.constprop.0+0xd0>)
   1c622:	f00f fa5a 	bl	2bada <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   1c626:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1c628:	4a03      	ldr	r2, [pc, #12]	; (1c638 <mem_manage_fault.constprop.0+0xb0>)
   1c62a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c62c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1c630:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1c632:	7028      	strb	r0, [r5, #0]
}
   1c634:	bd70      	pop	{r4, r5, r6, pc}
   1c636:	bf00      	nop
   1c638:	e000ed00 	.word	0xe000ed00
   1c63c:	0002f6e0 	.word	0x0002f6e0
   1c640:	0002f6fb 	.word	0x0002f6fb
   1c644:	0002f61f 	.word	0x0002f61f
   1c648:	0002f733 	.word	0x0002f733
   1c64c:	0002f750 	.word	0x0002f750
   1c650:	0002f76b 	.word	0x0002f76b
   1c654:	0002f6ac 	.word	0x0002f6ac
   1c658:	0002f78f 	.word	0x0002f78f
   1c65c:	0002f296 	.word	0x0002f296

0001c660 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1c660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c664:	4b6b      	ldr	r3, [pc, #428]	; (1c814 <z_arm_fault+0x1b4>)
{
   1c666:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c668:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1c66c:	4689      	mov	r9, r1
   1c66e:	4614      	mov	r4, r2
   1c670:	2700      	movs	r7, #0
   1c672:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1c674:	f3c8 0608 	ubfx	r6, r8, #0, #9
   1c678:	f387 8811 	msr	BASEPRI, r7
   1c67c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1c680:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1c684:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c688:	d111      	bne.n	1c6ae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1c68a:	07d0      	lsls	r0, r2, #31
   1c68c:	d40f      	bmi.n	1c6ae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1c68e:	0651      	lsls	r1, r2, #25
   1c690:	d403      	bmi.n	1c69a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1c692:	0722      	lsls	r2, r4, #28
   1c694:	d408      	bmi.n	1c6a8 <z_arm_fault+0x48>
			*nested_exc = true;
   1c696:	2701      	movs	r7, #1
   1c698:	e008      	b.n	1c6ac <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1c69a:	2145      	movs	r1, #69	; 0x45
   1c69c:	485e      	ldr	r0, [pc, #376]	; (1c818 <z_arm_fault+0x1b8>)
   1c69e:	f00f fa36 	bl	2bb0e <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1c6a2:	f014 0404 	ands.w	r4, r4, #4
   1c6a6:	d000      	beq.n	1c6aa <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
   1c6a8:	464d      	mov	r5, r9
	*nested_exc = false;
   1c6aa:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1c6ac:	b95d      	cbnz	r5, 1c6c6 <z_arm_fault+0x66>
   1c6ae:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
   1c6b2:	495a      	ldr	r1, [pc, #360]	; (1c81c <z_arm_fault+0x1bc>)
   1c6b4:	485a      	ldr	r0, [pc, #360]	; (1c820 <z_arm_fault+0x1c0>)
   1c6b6:	f00f f879 	bl	2b7ac <printk>
   1c6ba:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   1c6be:	4857      	ldr	r0, [pc, #348]	; (1c81c <z_arm_fault+0x1bc>)
   1c6c0:	f00f fa0b 	bl	2bada <assert_post_action>
   1c6c4:	2500      	movs	r5, #0
	*recoverable = false;
   1c6c6:	2400      	movs	r4, #0
	switch (fault) {
   1c6c8:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
   1c6ca:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   1c6ce:	2b09      	cmp	r3, #9
   1c6d0:	f200 808d 	bhi.w	1c7ee <z_arm_fault+0x18e>
   1c6d4:	e8df f003 	tbb	[pc, r3]
   1c6d8:	68848005 	.word	0x68848005
   1c6dc:	8b8b8b8b 	.word	0x8b8b8b8b
   1c6e0:	888b      	.short	0x888b
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c6e2:	4e4c      	ldr	r6, [pc, #304]	; (1c814 <z_arm_fault+0x1b4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   1c6e4:	2145      	movs	r1, #69	; 0x45
   1c6e6:	484f      	ldr	r0, [pc, #316]	; (1c824 <z_arm_fault+0x1c4>)
   1c6e8:	f00f fa11 	bl	2bb0e <z_log_minimal_printk>
	*recoverable = false;
   1c6ec:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1c6f0:	6af4      	ldr	r4, [r6, #44]	; 0x2c
   1c6f2:	f014 0402 	ands.w	r4, r4, #2
   1c6f6:	d005      	beq.n	1c704 <z_arm_fault+0xa4>
		PR_EXC("  Bus fault on vector table read");
   1c6f8:	2145      	movs	r1, #69	; 0x45
   1c6fa:	484b      	ldr	r0, [pc, #300]	; (1c828 <z_arm_fault+0x1c8>)
	PR_FAULT_INFO(
   1c6fc:	f00f fa07 	bl	2bb0e <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1c700:	2400      	movs	r4, #0
}
   1c702:	e006      	b.n	1c712 <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1c704:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1c706:	2b00      	cmp	r3, #0
   1c708:	da23      	bge.n	1c752 <z_arm_fault+0xf2>
		PR_EXC("  Debug event");
   1c70a:	2145      	movs	r1, #69	; 0x45
   1c70c:	4847      	ldr	r0, [pc, #284]	; (1c82c <z_arm_fault+0x1cc>)
   1c70e:	f00f f9fe 	bl	2bb0e <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1c712:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c716:	b9cb      	cbnz	r3, 1c74c <z_arm_fault+0xec>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1c718:	aa02      	add	r2, sp, #8
   1c71a:	f105 0620 	add.w	r6, r5, #32
   1c71e:	4613      	mov	r3, r2
   1c720:	6828      	ldr	r0, [r5, #0]
   1c722:	6869      	ldr	r1, [r5, #4]
   1c724:	3508      	adds	r5, #8
   1c726:	c303      	stmia	r3!, {r0, r1}
   1c728:	42b5      	cmp	r5, r6
   1c72a:	461a      	mov	r2, r3
   1c72c:	d1f7      	bne.n	1c71e <z_arm_fault+0xbe>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c730:	2f00      	cmp	r7, #0
   1c732:	d069      	beq.n	1c808 <z_arm_fault+0x1a8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1c734:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1c738:	b922      	cbnz	r2, 1c744 <z_arm_fault+0xe4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1c73a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1c73e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c742:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1c744:	4620      	mov	r0, r4
   1c746:	a902      	add	r1, sp, #8
   1c748:	f7ff fd06 	bl	1c158 <z_arm_fatal_error>
}
   1c74c:	b00b      	add	sp, #44	; 0x2c
   1c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1c752:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1c754:	005b      	lsls	r3, r3, #1
   1c756:	d536      	bpl.n	1c7c6 <z_arm_fault+0x166>
		PR_EXC("  Fault escalation (see below)");
   1c758:	2145      	movs	r1, #69	; 0x45
   1c75a:	4835      	ldr	r0, [pc, #212]	; (1c830 <z_arm_fault+0x1d0>)
   1c75c:	f00f f9d7 	bl	2bb0e <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   1c760:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1c762:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   1c766:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1c76a:	429a      	cmp	r2, r3
   1c76c:	d106      	bne.n	1c77c <z_arm_fault+0x11c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1c76e:	2145      	movs	r1, #69	; 0x45
   1c770:	682a      	ldr	r2, [r5, #0]
   1c772:	4830      	ldr	r0, [pc, #192]	; (1c834 <z_arm_fault+0x1d4>)
   1c774:	f00f f9cb 	bl	2bb0e <z_log_minimal_printk>
			reason = esf->basic.r0;
   1c778:	682c      	ldr	r4, [r5, #0]
   1c77a:	e7ca      	b.n	1c712 <z_arm_fault+0xb2>
		} else if (SCB_MMFSR != 0) {
   1c77c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1c780:	b133      	cbz	r3, 1c790 <z_arm_fault+0x130>
			reason = mem_manage_fault(esf, 1, recoverable);
   1c782:	2001      	movs	r0, #1
   1c784:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1c788:	f7ff fefe 	bl	1c588 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   1c78c:	4604      	mov	r4, r0
		break;
   1c78e:	e7c0      	b.n	1c712 <z_arm_fault+0xb2>
		} else if (SCB_BFSR != 0) {
   1c790:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   1c794:	b12b      	cbz	r3, 1c7a2 <z_arm_fault+0x142>
			reason = bus_fault(esf, 1, recoverable);
   1c796:	2001      	movs	r0, #1
   1c798:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1c79c:	f7ff fe9a 	bl	1c4d4 <bus_fault.constprop.0>
   1c7a0:	e7f4      	b.n	1c78c <z_arm_fault+0x12c>
		} else if (SCB_UFSR != 0) {
   1c7a2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   1c7a4:	b29b      	uxth	r3, r3
   1c7a6:	b113      	cbz	r3, 1c7ae <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   1c7a8:	f7ff fe3e 	bl	1c428 <usage_fault.constprop.0>
   1c7ac:	e7ee      	b.n	1c78c <z_arm_fault+0x12c>
			__ASSERT(0,
   1c7ae:	491b      	ldr	r1, [pc, #108]	; (1c81c <z_arm_fault+0x1bc>)
   1c7b0:	f240 22c2 	movw	r2, #706	; 0x2c2
   1c7b4:	481a      	ldr	r0, [pc, #104]	; (1c820 <z_arm_fault+0x1c0>)
   1c7b6:	f00e fff9 	bl	2b7ac <printk>
   1c7ba:	f240 21c2 	movw	r1, #706	; 0x2c2
		__ASSERT(0,
   1c7be:	4817      	ldr	r0, [pc, #92]	; (1c81c <z_arm_fault+0x1bc>)
   1c7c0:	f00f f98b 	bl	2bada <assert_post_action>
   1c7c4:	e7a5      	b.n	1c712 <z_arm_fault+0xb2>
   1c7c6:	4915      	ldr	r1, [pc, #84]	; (1c81c <z_arm_fault+0x1bc>)
   1c7c8:	f240 22c6 	movw	r2, #710	; 0x2c6
   1c7cc:	4814      	ldr	r0, [pc, #80]	; (1c820 <z_arm_fault+0x1c0>)
   1c7ce:	f00e ffed 	bl	2b7ac <printk>
   1c7d2:	f240 21c6 	movw	r1, #710	; 0x2c6
   1c7d6:	e7f2      	b.n	1c7be <z_arm_fault+0x15e>
		reason = mem_manage_fault(esf, 0, recoverable);
   1c7d8:	2000      	movs	r0, #0
   1c7da:	f10d 0107 	add.w	r1, sp, #7
   1c7de:	e7d3      	b.n	1c788 <z_arm_fault+0x128>
		reason = bus_fault(esf, 0, recoverable);
   1c7e0:	2000      	movs	r0, #0
   1c7e2:	f10d 0107 	add.w	r1, sp, #7
   1c7e6:	e7d9      	b.n	1c79c <z_arm_fault+0x13c>
	PR_FAULT_INFO(
   1c7e8:	2145      	movs	r1, #69	; 0x45
   1c7ea:	4813      	ldr	r0, [pc, #76]	; (1c838 <z_arm_fault+0x1d8>)
   1c7ec:	e786      	b.n	1c6fc <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   1c7ee:	4913      	ldr	r1, [pc, #76]	; (1c83c <z_arm_fault+0x1dc>)
   1c7f0:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1c7f4:	4a12      	ldr	r2, [pc, #72]	; (1c840 <z_arm_fault+0x1e0>)
   1c7f6:	4813      	ldr	r0, [pc, #76]	; (1c844 <z_arm_fault+0x1e4>)
   1c7f8:	bf08      	it	eq
   1c7fa:	460a      	moveq	r2, r1
   1c7fc:	f1a6 0310 	sub.w	r3, r6, #16
   1c800:	2145      	movs	r1, #69	; 0x45
   1c802:	f00f f984 	bl	2bb0e <z_log_minimal_printk>
   1c806:	e77b      	b.n	1c700 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1c808:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1c80c:	f023 0301 	bic.w	r3, r3, #1
   1c810:	e797      	b.n	1c742 <z_arm_fault+0xe2>
   1c812:	bf00      	nop
   1c814:	e000ed00 	.word	0xe000ed00
   1c818:	0002f7f7 	.word	0x0002f7f7
   1c81c:	0002f78f 	.word	0x0002f78f
   1c820:	0002f296 	.word	0x0002f296
   1c824:	0002f81f 	.word	0x0002f81f
   1c828:	0002f83b 	.word	0x0002f83b
   1c82c:	0002f861 	.word	0x0002f861
   1c830:	0002f874 	.word	0x0002f874
   1c834:	0002f898 	.word	0x0002f898
   1c838:	0002f8b9 	.word	0x0002f8b9
   1c83c:	0002f7c9 	.word	0x0002f7c9
   1c840:	0002f7de 	.word	0x0002f7de
   1c844:	0002f8e2 	.word	0x0002f8e2

0001c848 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1c848:	4b04      	ldr	r3, [pc, #16]	; (1c85c <z_arm_fault_init+0x14>)
   1c84a:	695a      	ldr	r2, [r3, #20]
   1c84c:	f042 0210 	orr.w	r2, r2, #16
   1c850:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1c852:	695a      	ldr	r2, [r3, #20]
   1c854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1c858:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1c85a:	4770      	bx	lr
   1c85c:	e000ed00 	.word	0xe000ed00

0001c860 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1c860:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1c864:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1c868:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1c86a:	4672      	mov	r2, lr
	bl z_arm_fault
   1c86c:	f7ff fef8 	bl	1c660 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1c870:	bd01      	pop	{r0, pc}
   1c872:	bf00      	nop

0001c874 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1c874:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c876:	2120      	movs	r1, #32
   1c878:	4803      	ldr	r0, [pc, #12]	; (1c888 <z_arm_interrupt_init+0x14>)
   1c87a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1c87c:	3301      	adds	r3, #1
   1c87e:	2b41      	cmp	r3, #65	; 0x41
   1c880:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1c884:	d1f9      	bne.n	1c87a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1c886:	4770      	bx	lr
   1c888:	e000e100 	.word	0xe000e100

0001c88c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1c88c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1c88e:	f380 8814 	msr	CONTROL, r0
    isb
   1c892:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1c896:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1c898:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1c89c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1c8a0:	f011 feda 	bl	2e658 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1c8a4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1c8a6:	490e      	ldr	r1, [pc, #56]	; (1c8e0 <__start+0x54>)
    str r0, [r1]
   1c8a8:	6008      	str	r0, [r1, #0]
    dsb
   1c8aa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c8ae:	480d      	ldr	r0, [pc, #52]	; (1c8e4 <__start+0x58>)
    msr msp, r0
   1c8b0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1c8b4:	f000 f83e 	bl	1c934 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1c8b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1c8ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1c8be:	480a      	ldr	r0, [pc, #40]	; (1c8e8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1c8c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1c8c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1c8c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1c8ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1c8ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1c8d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1c8d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1c8d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1c8da:	f7ff fcd5 	bl	1c288 <z_arm_prep_c>
   1c8de:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1c8e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1c8e4:	20010548 	.word	0x20010548
    ldr r0, =z_interrupt_stacks
   1c8e8:	20010688 	.word	0x20010688

0001c8ec <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1c8ec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c8f0:	4905      	ldr	r1, [pc, #20]	; (1c908 <sys_arch_reboot+0x1c>)
   1c8f2:	4b06      	ldr	r3, [pc, #24]	; (1c90c <sys_arch_reboot+0x20>)
   1c8f4:	68ca      	ldr	r2, [r1, #12]
   1c8f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c8fa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c8fc:	60cb      	str	r3, [r1, #12]
   1c8fe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c902:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c904:	e7fd      	b.n	1c902 <sys_arch_reboot+0x16>
   1c906:	bf00      	nop
   1c908:	e000ed00 	.word	0xe000ed00
   1c90c:	05fa0004 	.word	0x05fa0004

0001c910 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   1c910:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   1c912:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1c914:	4906      	ldr	r1, [pc, #24]	; (1c930 <z_arm_clear_arm_mpu_config+0x20>)
   1c916:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   1c91a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   1c91e:	4293      	cmp	r3, r2
   1c920:	d100      	bne.n	1c924 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1c922:	4770      	bx	lr
  mpu->RNR = rnr;
   1c924:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   1c928:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1c92c:	3301      	adds	r3, #1
   1c92e:	e7f6      	b.n	1c91e <z_arm_clear_arm_mpu_config+0xe>
   1c930:	e000ed00 	.word	0xe000ed00

0001c934 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1c934:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1c936:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1c938:	2400      	movs	r4, #0
   1c93a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1c93e:	f7ff ffe7 	bl	1c910 <z_arm_clear_arm_mpu_config>
   1c942:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c948:	4a0b      	ldr	r2, [pc, #44]	; (1c978 <z_arm_init_arch_hw_at_boot+0x44>)
   1c94a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c94e:	3301      	adds	r3, #1
   1c950:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1c952:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1c956:	d1f8      	bne.n	1c94a <z_arm_init_arch_hw_at_boot+0x16>
   1c958:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c95a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c95e:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c962:	3301      	adds	r3, #1
   1c964:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1c966:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1c96a:	d1f8      	bne.n	1c95e <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   1c96c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1c96e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c972:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1c976:	bd10      	pop	{r4, pc}
   1c978:	e000e100 	.word	0xe000e100

0001c97c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1c97c:	4b06      	ldr	r3, [pc, #24]	; (1c998 <z_impl_k_thread_abort+0x1c>)
   1c97e:	689b      	ldr	r3, [r3, #8]
   1c980:	4283      	cmp	r3, r0
   1c982:	d107      	bne.n	1c994 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c984:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1c988:	b123      	cbz	r3, 1c994 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1c98a:	4a04      	ldr	r2, [pc, #16]	; (1c99c <z_impl_k_thread_abort+0x20>)
   1c98c:	6853      	ldr	r3, [r2, #4]
   1c98e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c992:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   1c994:	f00b b9d2 	b.w	27d3c <z_thread_abort>
   1c998:	2000d44c 	.word	0x2000d44c
   1c99c:	e000ed00 	.word	0xe000ed00

0001c9a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1c9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1c9a2:	4c09      	ldr	r4, [pc, #36]	; (1c9c8 <z_arm_configure_static_mpu_regions+0x28>)
   1c9a4:	4a09      	ldr	r2, [pc, #36]	; (1c9cc <z_arm_configure_static_mpu_regions+0x2c>)
   1c9a6:	4623      	mov	r3, r4
   1c9a8:	2101      	movs	r1, #1
   1c9aa:	4809      	ldr	r0, [pc, #36]	; (1c9d0 <z_arm_configure_static_mpu_regions+0x30>)
   1c9ac:	f000 f92c 	bl	1cc08 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c9b0:	2300      	movs	r3, #0
   1c9b2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1c9b4:	4b07      	ldr	r3, [pc, #28]	; (1c9d4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c9b6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1c9b8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c9ba:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1c9bc:	9301      	str	r3, [sp, #4]
   1c9be:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1c9c0:	f000 f93e 	bl	1cc40 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1c9c4:	b004      	add	sp, #16
   1c9c6:	bd10      	pop	{r4, pc}
   1c9c8:	20040000 	.word	0x20040000
   1c9cc:	2000c500 	.word	0x2000c500
   1c9d0:	0002eb88 	.word	0x0002eb88
   1c9d4:	2000caf8 	.word	0x2000caf8

0001c9d8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1c9d8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c9da:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1c9dc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1c9de:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1c9e2:	f004 031f 	and.w	r3, r4, #31
   1c9e6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c9e8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c9ea:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1c9ec:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1c9f0:	4905      	ldr	r1, [pc, #20]	; (1ca08 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1c9f2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1c9f6:	f043 0301 	orr.w	r3, r3, #1
   1c9fa:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   1c9fe:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   1ca02:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1ca06:	bd10      	pop	{r4, pc}
   1ca08:	e000ed00 	.word	0xe000ed00

0001ca0c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   1ca0c:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1ca0e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1ca10:	680c      	ldr	r4, [r1, #0]
{
   1ca12:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   1ca14:	890a      	ldrh	r2, [r1, #8]
   1ca16:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   1ca18:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ca1a:	3b01      	subs	r3, #1
   1ca1c:	f024 041f 	bic.w	r4, r4, #31
   1ca20:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1ca22:	f002 021f 	and.w	r2, r2, #31
   1ca26:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ca2a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1ca2e:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1ca30:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   1ca32:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1ca36:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   1ca38:	d909      	bls.n	1ca4e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1ca3a:	4602      	mov	r2, r0
   1ca3c:	2145      	movs	r1, #69	; 0x45
   1ca3e:	4806      	ldr	r0, [pc, #24]	; (1ca58 <mpu_configure_region+0x4c>)
   1ca40:	f00f f865 	bl	2bb0e <z_log_minimal_printk>
   1ca44:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   1ca48:	4620      	mov	r0, r4
   1ca4a:	b005      	add	sp, #20
   1ca4c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1ca4e:	4669      	mov	r1, sp
   1ca50:	f7ff ffc2 	bl	1c9d8 <region_init>
	return region_allocate_and_init(index,
   1ca54:	e7f8      	b.n	1ca48 <mpu_configure_region+0x3c>
   1ca56:	bf00      	nop
   1ca58:	0002f8fe 	.word	0x0002f8fe

0001ca5c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca60:	4689      	mov	r9, r1
   1ca62:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1ca64:	4606      	mov	r6, r0
   1ca66:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   1ca6a:	4d58      	ldr	r5, [pc, #352]	; (1cbcc <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   1ca6c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1ca6e:	45c8      	cmp	r8, r9
   1ca70:	da27      	bge.n	1cac2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   1ca72:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1ca76:	f1ba 0f00 	cmp.w	sl, #0
   1ca7a:	d044      	beq.n	1cb06 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   1ca7c:	f1ba 0f1f 	cmp.w	sl, #31
   1ca80:	d918      	bls.n	1cab4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   1ca82:	f01a 0f1f 	tst.w	sl, #31
   1ca86:	d115      	bne.n	1cab4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   1ca88:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   1ca8c:	f01b 0f1f 	tst.w	fp, #31
   1ca90:	d110      	bne.n	1cab4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1ca92:	4658      	mov	r0, fp
   1ca94:	f00f f97d 	bl	2bd92 <arm_cmse_mpu_region_get>
   1ca98:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1ca9a:	eb0a 000b 	add.w	r0, sl, fp
   1ca9e:	3801      	subs	r0, #1
   1caa0:	f00f f977 	bl	2bd92 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1caa4:	4287      	cmp	r7, r0
   1caa6:	d010      	beq.n	1caca <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   1caa8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1caac:	463a      	mov	r2, r7
   1caae:	2145      	movs	r1, #69	; 0x45
   1cab0:	4847      	ldr	r0, [pc, #284]	; (1cbd0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   1cab2:	e002      	b.n	1caba <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1cab4:	4642      	mov	r2, r8
   1cab6:	2145      	movs	r1, #69	; 0x45
   1cab8:	4846      	ldr	r0, [pc, #280]	; (1cbd4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1caba:	f00f f828 	bl	2bb0e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1cabe:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1cac2:	4620      	mov	r0, r4
   1cac4:	b005      	add	sp, #20
   1cac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   1caca:	f117 0f16 	cmn.w	r7, #22
   1cace:	d0ed      	beq.n	1caac <mpu_configure_regions_and_partition.constprop.0+0x50>
   1cad0:	42bc      	cmp	r4, r7
   1cad2:	ddeb      	ble.n	1caac <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   1cad4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1cad8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   1cadc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1cae0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1cae4:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1cae8:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1caec:	e9d6 3200 	ldrd	r3, r2, [r6]
   1caf0:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   1caf2:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1caf4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   1caf8:	d11d      	bne.n	1cb36 <mpu_configure_regions_and_partition.constprop.0+0xda>
   1cafa:	45d3      	cmp	fp, sl
   1cafc:	d107      	bne.n	1cb0e <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   1cafe:	4631      	mov	r1, r6
   1cb00:	b2f8      	uxtb	r0, r7
   1cb02:	f7ff ff83 	bl	1ca0c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1cb06:	f108 0801 	add.w	r8, r8, #1
   1cb0a:	360c      	adds	r6, #12
   1cb0c:	e7af      	b.n	1ca6e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   1cb0e:	4631      	mov	r1, r6
	MPU->RNR = index;
   1cb10:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1cb14:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   1cb18:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1cb1c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1cb20:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1cb22:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1cb26:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   1cb28:	f7ff ff70 	bl	1ca0c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1cb2c:	f110 0f16 	cmn.w	r0, #22
   1cb30:	d0c5      	beq.n	1cabe <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   1cb32:	1c44      	adds	r4, r0, #1
   1cb34:	e7e7      	b.n	1cb06 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   1cb36:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   1cb38:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   1cb3a:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   1cb3c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   1cb40:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   1cb44:	d108      	bne.n	1cb58 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1cb46:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1cb4a:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1cb4c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1cb50:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1cb52:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   1cb56:	e7e7      	b.n	1cb28 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1cb58:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   1cb5c:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1cb60:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1cb62:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1cb66:	4631      	mov	r1, r6
   1cb68:	f7ff ff50 	bl	1ca0c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1cb6c:	f110 0f16 	cmn.w	r0, #22
   1cb70:	d0a5      	beq.n	1cabe <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   1cb72:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   1cb76:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   1cb7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   1cb7e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   1cb82:	f362 0304 	bfi	r3, r2, #0, #5
   1cb86:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1cb8a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1cb8e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1cb92:	085b      	lsrs	r3, r3, #1
   1cb94:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   1cb98:	e9d6 3100 	ldrd	r3, r1, [r6]
   1cb9c:	440b      	add	r3, r1
   1cb9e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   1cba0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1cba4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1cba6:	445b      	add	r3, fp
   1cba8:	eba3 030a 	sub.w	r3, r3, sl
   1cbac:	b2c0      	uxtb	r0, r0
   1cbae:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1cbb2:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1cbb4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   1cbb8:	9303      	str	r3, [sp, #12]
   1cbba:	d903      	bls.n	1cbc4 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1cbbc:	4602      	mov	r2, r0
   1cbbe:	2145      	movs	r1, #69	; 0x45
   1cbc0:	4805      	ldr	r0, [pc, #20]	; (1cbd8 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   1cbc2:	e77a      	b.n	1caba <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   1cbc4:	4669      	mov	r1, sp
   1cbc6:	f7ff ff07 	bl	1c9d8 <region_init>
   1cbca:	e7b2      	b.n	1cb32 <mpu_configure_regions_and_partition.constprop.0+0xd6>
   1cbcc:	e000ed00 	.word	0xe000ed00
   1cbd0:	0002f951 	.word	0x0002f951
   1cbd4:	0002f929 	.word	0x0002f929
   1cbd8:	0002f8fe 	.word	0x0002f8fe

0001cbdc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1cbdc:	2205      	movs	r2, #5
   1cbde:	4b04      	ldr	r3, [pc, #16]	; (1cbf0 <arm_core_mpu_enable+0x14>)
   1cbe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1cbe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cbe8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1cbec:	4770      	bx	lr
   1cbee:	bf00      	nop
   1cbf0:	e000ed00 	.word	0xe000ed00

0001cbf4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1cbf4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1cbf8:	2200      	movs	r2, #0
   1cbfa:	4b02      	ldr	r3, [pc, #8]	; (1cc04 <arm_core_mpu_disable+0x10>)
   1cbfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1cc00:	4770      	bx	lr
   1cc02:	bf00      	nop
   1cc04:	e000ed00 	.word	0xe000ed00

0001cc08 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1cc08:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1cc0a:	4c0a      	ldr	r4, [pc, #40]	; (1cc34 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1cc0c:	7822      	ldrb	r2, [r4, #0]
   1cc0e:	f7ff ff25 	bl	1ca5c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1cc12:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1cc14:	3016      	adds	r0, #22
   1cc16:	d10c      	bne.n	1cc32 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1cc18:	4907      	ldr	r1, [pc, #28]	; (1cc38 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1cc1a:	4808      	ldr	r0, [pc, #32]	; (1cc3c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1cc1c:	f240 1211 	movw	r2, #273	; 0x111
   1cc20:	f00e fdc4 	bl	2b7ac <printk>
			regions_num);
	}
}
   1cc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1cc28:	f240 1111 	movw	r1, #273	; 0x111
   1cc2c:	4802      	ldr	r0, [pc, #8]	; (1cc38 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1cc2e:	f00e bf54 	b.w	2bada <assert_post_action>
}
   1cc32:	bd10      	pop	{r4, pc}
   1cc34:	2000d50e 	.word	0x2000d50e
   1cc38:	0002f979 	.word	0x0002f979
   1cc3c:	0002f296 	.word	0x0002f296

0001cc40 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1cc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc44:	4d30      	ldr	r5, [pc, #192]	; (1cd08 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   1cc46:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cc48:	4606      	mov	r6, r0
   1cc4a:	f04f 0800 	mov.w	r8, #0
   1cc4e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1cc50:	4f2e      	ldr	r7, [pc, #184]	; (1cd0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1cc52:	45d0      	cmp	r8, sl
   1cc54:	db02      	blt.n	1cc5c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1cc56:	b003      	add	sp, #12
   1cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   1cc5c:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1cc60:	f1b9 0f00 	cmp.w	r9, #0
   1cc64:	d04a      	beq.n	1ccfc <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1cc66:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cc68:	4608      	mov	r0, r1
   1cc6a:	9101      	str	r1, [sp, #4]
   1cc6c:	f00f f891 	bl	2bd92 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cc70:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1cc72:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1cc74:	eb09 0001 	add.w	r0, r9, r1
   1cc78:	3801      	subs	r0, #1
   1cc7a:	f00f f88a 	bl	2bd92 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1cc7e:	4284      	cmp	r4, r0
   1cc80:	f04f 0214 	mov.w	r2, #20
   1cc84:	4b22      	ldr	r3, [pc, #136]	; (1cd10 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   1cc86:	d013      	beq.n	1ccb0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   1cc88:	f06f 0315 	mvn.w	r3, #21
   1cc8c:	fb02 f808 	mul.w	r8, r2, r8
   1cc90:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1cc94:	f240 1221 	movw	r2, #289	; 0x121
   1cc98:	491e      	ldr	r1, [pc, #120]	; (1cd14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1cc9a:	481f      	ldr	r0, [pc, #124]	; (1cd18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1cc9c:	f00e fd86 	bl	2b7ac <printk>
   1cca0:	f240 1121 	movw	r1, #289	; 0x121
   1cca4:	481b      	ldr	r0, [pc, #108]	; (1cd14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   1cca6:	b003      	add	sp, #12
   1cca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1ccac:	f00e bf15 	b.w	2bada <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1ccb0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1ccb4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1ccb6:	d0ed      	beq.n	1cc94 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1ccb8:	7819      	ldrb	r1, [r3, #0]
   1ccba:	42a1      	cmp	r1, r4
   1ccbc:	ddea      	ble.n	1cc94 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   1ccbe:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1ccc2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   1ccc6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   1ccca:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   1ccce:	f100 0108 	add.w	r1, r0, #8
   1ccd2:	7b00      	ldrb	r0, [r0, #12]
   1ccd4:	f364 0004 	bfi	r0, r4, #0, #5
   1ccd8:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1ccda:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1ccde:	790c      	ldrb	r4, [r1, #4]
   1cce0:	0840      	lsrs	r0, r0, #1
   1cce2:	f360 1447 	bfi	r4, r0, #5, #3
   1cce6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1cce8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   1ccec:	f021 011f 	bic.w	r1, r1, #31
   1ccf0:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1ccf2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   1ccf6:	f021 011f 	bic.w	r1, r1, #31
   1ccfa:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1ccfc:	f108 0801 	add.w	r8, r8, #1
   1cd00:	3514      	adds	r5, #20
   1cd02:	360c      	adds	r6, #12
   1cd04:	e7a5      	b.n	1cc52 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1cd06:	bf00      	nop
   1cd08:	2000cef8 	.word	0x2000cef8
   1cd0c:	e000ed00 	.word	0xe000ed00
   1cd10:	2000d50e 	.word	0x2000d50e
   1cd14:	0002f979 	.word	0x0002f979
   1cd18:	0002f296 	.word	0x0002f296

0001cd1c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1cd1c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1cd1e:	4d1d      	ldr	r5, [pc, #116]	; (1cd94 <z_arm_mpu_init+0x78>)
   1cd20:	682c      	ldr	r4, [r5, #0]
   1cd22:	2c10      	cmp	r4, #16
   1cd24:	d90d      	bls.n	1cd42 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   1cd26:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cd2a:	491b      	ldr	r1, [pc, #108]	; (1cd98 <z_arm_mpu_init+0x7c>)
   1cd2c:	481b      	ldr	r0, [pc, #108]	; (1cd9c <z_arm_mpu_init+0x80>)
   1cd2e:	f00e fd3d 	bl	2b7ac <printk>
   1cd32:	4819      	ldr	r0, [pc, #100]	; (1cd98 <z_arm_mpu_init+0x7c>)
   1cd34:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1cd38:	f00e fecf 	bl	2bada <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   1cd3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1cd40:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cd42:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1cd44:	f7ff ff56 	bl	1cbf4 <arm_core_mpu_disable>
	MPU->MAIR0 =
   1cd48:	4b15      	ldr	r3, [pc, #84]	; (1cda0 <z_arm_mpu_init+0x84>)
   1cd4a:	4a16      	ldr	r2, [pc, #88]	; (1cda4 <z_arm_mpu_init+0x88>)
   1cd4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cd50:	4284      	cmp	r4, r0
   1cd52:	d117      	bne.n	1cd84 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   1cd54:	4b14      	ldr	r3, [pc, #80]	; (1cda8 <z_arm_mpu_init+0x8c>)
   1cd56:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1cd58:	f7ff ff40 	bl	1cbdc <arm_core_mpu_enable>
	__ASSERT(
   1cd5c:	4b10      	ldr	r3, [pc, #64]	; (1cda0 <z_arm_mpu_init+0x84>)
   1cd5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1cd62:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cd66:	2b10      	cmp	r3, #16
   1cd68:	d00a      	beq.n	1cd80 <z_arm_mpu_init+0x64>
   1cd6a:	490b      	ldr	r1, [pc, #44]	; (1cd98 <z_arm_mpu_init+0x7c>)
   1cd6c:	480b      	ldr	r0, [pc, #44]	; (1cd9c <z_arm_mpu_init+0x80>)
   1cd6e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   1cd72:	f00e fd1b 	bl	2b7ac <printk>
   1cd76:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1cd7a:	4807      	ldr	r0, [pc, #28]	; (1cd98 <z_arm_mpu_init+0x7c>)
   1cd7c:	f00e fead 	bl	2bada <assert_post_action>
	return 0;
   1cd80:	2000      	movs	r0, #0
   1cd82:	e7dd      	b.n	1cd40 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1cd84:	6869      	ldr	r1, [r5, #4]
   1cd86:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1cd8a:	f7ff fe25 	bl	1c9d8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1cd8e:	3001      	adds	r0, #1
   1cd90:	e7de      	b.n	1cd50 <z_arm_mpu_init+0x34>
   1cd92:	bf00      	nop
   1cd94:	0002eb94 	.word	0x0002eb94
   1cd98:	0002f979 	.word	0x0002f979
   1cd9c:	0002f296 	.word	0x0002f296
   1cda0:	e000ed00 	.word	0xe000ed00
   1cda4:	0044ffaa 	.word	0x0044ffaa
   1cda8:	2000d50e 	.word	0x2000d50e

0001cdac <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   1cdac:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   1cdae:	4b09      	ldr	r3, [pc, #36]	; (1cdd4 <malloc_prepare+0x28>)
   1cdb0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   1cdb4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1cdb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1cdbc:	d208      	bcs.n	1cdd0 <malloc_prepare+0x24>
   1cdbe:	4906      	ldr	r1, [pc, #24]	; (1cdd8 <malloc_prepare+0x2c>)
   1cdc0:	4806      	ldr	r0, [pc, #24]	; (1cddc <malloc_prepare+0x30>)
   1cdc2:	2281      	movs	r2, #129	; 0x81
   1cdc4:	f00e fcf2 	bl	2b7ac <printk>
   1cdc8:	2181      	movs	r1, #129	; 0x81
   1cdca:	4803      	ldr	r0, [pc, #12]	; (1cdd8 <malloc_prepare+0x2c>)
   1cdcc:	f00e fe85 	bl	2bada <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   1cdd0:	2000      	movs	r0, #0
   1cdd2:	bd08      	pop	{r3, pc}
   1cdd4:	20012640 	.word	0x20012640
   1cdd8:	0002f9b0 	.word	0x0002f9b0
   1cddc:	0002f296 	.word	0x0002f296

0001cde0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1cde0:	4b01      	ldr	r3, [pc, #4]	; (1cde8 <__stdout_hook_install+0x8>)
   1cde2:	6018      	str	r0, [r3, #0]
}
   1cde4:	4770      	bx	lr
   1cde6:	bf00      	nop
   1cde8:	2000c590 	.word	0x2000c590

0001cdec <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   1cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cdee:	4606      	mov	r6, r0
   1cdf0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1cdf2:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1cdf4:	4f06      	ldr	r7, [pc, #24]	; (1ce10 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1cdf6:	42ac      	cmp	r4, r5
   1cdf8:	da08      	bge.n	1ce0c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   1cdfa:	683b      	ldr	r3, [r7, #0]
   1cdfc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1cdfe:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1ce00:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   1ce02:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1ce06:	d001      	beq.n	1ce0c <z_impl_zephyr_read_stdin+0x20>
   1ce08:	280d      	cmp	r0, #13
   1ce0a:	d1f4      	bne.n	1cdf6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   1ce0c:	4620      	mov	r0, r4
   1ce0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ce10:	2000c58c 	.word	0x2000c58c

0001ce14 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce16:	460d      	mov	r5, r1
   1ce18:	4f09      	ldr	r7, [pc, #36]	; (1ce40 <z_impl_zephyr_write_stdout+0x2c>)
   1ce1a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   1ce1c:	f1c0 0401 	rsb	r4, r0, #1
   1ce20:	19a3      	adds	r3, r4, r6
   1ce22:	429d      	cmp	r5, r3
   1ce24:	dc01      	bgt.n	1ce2a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1ce26:	4628      	mov	r0, r5
   1ce28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   1ce2a:	7873      	ldrb	r3, [r6, #1]
   1ce2c:	2b0a      	cmp	r3, #10
   1ce2e:	d102      	bne.n	1ce36 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1ce30:	200d      	movs	r0, #13
   1ce32:	683b      	ldr	r3, [r7, #0]
   1ce34:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1ce36:	683b      	ldr	r3, [r7, #0]
   1ce38:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   1ce3c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1ce3e:	e7ef      	b.n	1ce20 <z_impl_zephyr_write_stdout+0xc>
   1ce40:	2000c590 	.word	0x2000c590

0001ce44 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1ce44:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1ce46:	2105      	movs	r1, #5
   1ce48:	4801      	ldr	r0, [pc, #4]	; (1ce50 <_exit+0xc>)
   1ce4a:	f7ff ffe3 	bl	1ce14 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   1ce4e:	e7fe      	b.n	1ce4e <_exit+0xa>
   1ce50:	0002f9e0 	.word	0x0002f9e0

0001ce54 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1ce54:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ce56:	4c07      	ldr	r4, [pc, #28]	; (1ce74 <_sbrk+0x20>)
   1ce58:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1ce5a:	18c2      	adds	r2, r0, r3
   1ce5c:	4806      	ldr	r0, [pc, #24]	; (1ce78 <_sbrk+0x24>)
   1ce5e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1ce62:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   1ce66:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   1ce68:	bf2e      	itee	cs
   1ce6a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1ce6e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   1ce70:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   1ce72:	bd10      	pop	{r4, pc}
   1ce74:	2000cf0c 	.word	0x2000cf0c
   1ce78:	20012640 	.word	0x20012640

0001ce7c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1ce7c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1ce7e:	4604      	mov	r4, r0
   1ce80:	b950      	cbnz	r0, 1ce98 <__retarget_lock_init_recursive+0x1c>
   1ce82:	4910      	ldr	r1, [pc, #64]	; (1cec4 <__retarget_lock_init_recursive+0x48>)
   1ce84:	4810      	ldr	r0, [pc, #64]	; (1cec8 <__retarget_lock_init_recursive+0x4c>)
   1ce86:	f240 1277 	movw	r2, #375	; 0x177
   1ce8a:	f00e fc8f 	bl	2b7ac <printk>
   1ce8e:	f240 1177 	movw	r1, #375	; 0x177
   1ce92:	480c      	ldr	r0, [pc, #48]	; (1cec4 <__retarget_lock_init_recursive+0x48>)
   1ce94:	f00e fe21 	bl	2bada <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   1ce98:	2014      	movs	r0, #20
   1ce9a:	f00b ffd5 	bl	28e48 <malloc>
   1ce9e:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   1cea0:	b950      	cbnz	r0, 1ceb8 <__retarget_lock_init_recursive+0x3c>
   1cea2:	4908      	ldr	r1, [pc, #32]	; (1cec4 <__retarget_lock_init_recursive+0x48>)
   1cea4:	4808      	ldr	r0, [pc, #32]	; (1cec8 <__retarget_lock_init_recursive+0x4c>)
   1cea6:	f240 127f 	movw	r2, #383	; 0x17f
   1ceaa:	f00e fc7f 	bl	2b7ac <printk>
   1ceae:	f240 117f 	movw	r1, #383	; 0x17f
   1ceb2:	4804      	ldr	r0, [pc, #16]	; (1cec4 <__retarget_lock_init_recursive+0x48>)
   1ceb4:	f00e fe11 	bl	2bada <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   1ceb8:	6820      	ldr	r0, [r4, #0]
}
   1ceba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   1cebe:	f010 bd00 	b.w	2d8c2 <z_impl_k_mutex_init>
   1cec2:	bf00      	nop
   1cec4:	0002f9b0 	.word	0x0002f9b0
   1cec8:	0002f296 	.word	0x0002f296

0001cecc <__retarget_lock_acquire>:
#endif /* !CONFIG_USERSPACE */
}

/* Acquiure non-recursive lock */
void __retarget_lock_acquire(_LOCK_T lock)
{
   1cecc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cece:	4604      	mov	r4, r0
   1ced0:	b950      	cbnz	r0, 1cee8 <__retarget_lock_acquire+0x1c>
   1ced2:	490a      	ldr	r1, [pc, #40]	; (1cefc <__retarget_lock_acquire+0x30>)
   1ced4:	480a      	ldr	r0, [pc, #40]	; (1cf00 <__retarget_lock_acquire+0x34>)
   1ced6:	f240 129d 	movw	r2, #413	; 0x19d
   1ceda:	f00e fc67 	bl	2b7ac <printk>
   1cede:	f240 119d 	movw	r1, #413	; 0x19d
   1cee2:	4806      	ldr	r0, [pc, #24]	; (1cefc <__retarget_lock_acquire+0x30>)
   1cee4:	f00e fdf9 	bl	2bada <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1cee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ceec:	4620      	mov	r0, r4
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}
   1ceee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cef6:	f009 bc9b 	b.w	26830 <z_impl_k_sem_take>
   1cefa:	bf00      	nop
   1cefc:	0002f9b0 	.word	0x0002f9b0
   1cf00:	0002f296 	.word	0x0002f296

0001cf04 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   1cf04:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cf06:	4604      	mov	r4, r0
   1cf08:	b950      	cbnz	r0, 1cf20 <__retarget_lock_acquire_recursive+0x1c>
   1cf0a:	490a      	ldr	r1, [pc, #40]	; (1cf34 <__retarget_lock_acquire_recursive+0x30>)
   1cf0c:	480a      	ldr	r0, [pc, #40]	; (1cf38 <__retarget_lock_acquire_recursive+0x34>)
   1cf0e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1cf12:	f00e fc4b 	bl	2b7ac <printk>
   1cf16:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1cf1a:	4806      	ldr	r0, [pc, #24]	; (1cf34 <__retarget_lock_acquire_recursive+0x30>)
   1cf1c:	f00e fddd 	bl	2bada <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   1cf20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf24:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1cf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf2e:	f009 b9f7 	b.w	26320 <z_impl_k_mutex_lock>
   1cf32:	bf00      	nop
   1cf34:	0002f9b0 	.word	0x0002f9b0
   1cf38:	0002f296 	.word	0x0002f296

0001cf3c <__retarget_lock_release>:
	return !k_mutex_lock((struct k_mutex *)lock, K_NO_WAIT);
}

/* Release non-recursive lock */
void __retarget_lock_release(_LOCK_T lock)
{
   1cf3c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cf3e:	4604      	mov	r4, r0
   1cf40:	b950      	cbnz	r0, 1cf58 <__retarget_lock_release+0x1c>
   1cf42:	4908      	ldr	r1, [pc, #32]	; (1cf64 <__retarget_lock_release+0x28>)
   1cf44:	4808      	ldr	r0, [pc, #32]	; (1cf68 <__retarget_lock_release+0x2c>)
   1cf46:	f240 12b9 	movw	r2, #441	; 0x1b9
   1cf4a:	f00e fc2f 	bl	2b7ac <printk>
   1cf4e:	f240 11b9 	movw	r1, #441	; 0x1b9
   1cf52:	4804      	ldr	r0, [pc, #16]	; (1cf64 <__retarget_lock_release+0x28>)
   1cf54:	f00e fdc1 	bl	2bada <assert_post_action>
	z_impl_k_sem_give(sem);
   1cf58:	4620      	mov	r0, r4
	k_sem_give((struct k_sem *)lock);
}
   1cf5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf5e:	f009 bc2d 	b.w	267bc <z_impl_k_sem_give>
   1cf62:	bf00      	nop
   1cf64:	0002f9b0 	.word	0x0002f9b0
   1cf68:	0002f296 	.word	0x0002f296

0001cf6c <__retarget_lock_release_recursive>:

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   1cf6c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   1cf6e:	4604      	mov	r4, r0
   1cf70:	b950      	cbnz	r0, 1cf88 <__retarget_lock_release_recursive+0x1c>
   1cf72:	4908      	ldr	r1, [pc, #32]	; (1cf94 <__retarget_lock_release_recursive+0x28>)
   1cf74:	4808      	ldr	r0, [pc, #32]	; (1cf98 <__retarget_lock_release_recursive+0x2c>)
   1cf76:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1cf7a:	f00e fc17 	bl	2b7ac <printk>
   1cf7e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1cf82:	4804      	ldr	r0, [pc, #16]	; (1cf94 <__retarget_lock_release_recursive+0x28>)
   1cf84:	f00e fda9 	bl	2bada <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   1cf88:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   1cf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf8e:	f009 ba99 	b.w	264c4 <z_impl_k_mutex_unlock>
   1cf92:	bf00      	nop
   1cf94:	0002f9b0 	.word	0x0002f9b0
   1cf98:	0002f296 	.word	0x0002f296

0001cf9c <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   1cf9c:	b510      	push	{r4, lr}
	err = nrf_modem_lib_get_init_ret();
   1cf9e:	f001 fbe9 	bl	1e774 <nrf_modem_lib_get_init_ret>
	if (err < 0) {
   1cfa2:	1e04      	subs	r4, r0, #0
   1cfa4:	da0a      	bge.n	1cfbc <thingy91_board_init+0x20>
		LOG_ERR("nrf_modem_lib_get_init_ret failed, error: %d", err);
   1cfa6:	4622      	mov	r2, r4
   1cfa8:	2145      	movs	r1, #69	; 0x45
   1cfaa:	4814      	ldr	r0, [pc, #80]	; (1cffc <thingy91_board_init+0x60>)
   1cfac:	f00e fdaf 	bl	2bb0e <z_log_minimal_printk>
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   1cfb0:	4622      	mov	r2, r4
   1cfb2:	2145      	movs	r1, #69	; 0x45
   1cfb4:	4812      	ldr	r0, [pc, #72]	; (1d000 <thingy91_board_init+0x64>)
   1cfb6:	f00e fdaa 	bl	2bb0e <z_log_minimal_printk>
		return err;
   1cfba:	e01d      	b.n	1cff8 <thingy91_board_init+0x5c>
	} else if (err > 0) {
   1cfbc:	d004      	beq.n	1cfc8 <thingy91_board_init+0x2c>
		LOG_WRN("A modem firmware upgrade has been performed, reboot is expected.");
   1cfbe:	2157      	movs	r1, #87	; 0x57
   1cfc0:	4810      	ldr	r0, [pc, #64]	; (1d004 <thingy91_board_init+0x68>)
   1cfc2:	f00e fda4 	bl	2bb0e <z_log_minimal_printk>
		return err;
   1cfc6:	e7f3      	b.n	1cfb0 <thingy91_board_init+0x14>
	err = nrf_modem_at_printf(AT_CMD_TRACE);
   1cfc8:	480f      	ldr	r0, [pc, #60]	; (1d008 <thingy91_board_init+0x6c>)
   1cfca:	f008 faa9 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   1cfce:	b130      	cbz	r0, 1cfde <thingy91_board_init+0x42>
		LOG_ERR("XMODEMTRACE received unexpected response");
   1cfd0:	2145      	movs	r1, #69	; 0x45
   1cfd2:	480e      	ldr	r0, [pc, #56]	; (1d00c <thingy91_board_init+0x70>)
		LOG_ERR("MAGPIO command failed");
   1cfd4:	f00e fd9b 	bl	2bb0e <z_log_minimal_printk>
		return -EIO;
   1cfd8:	f06f 0404 	mvn.w	r4, #4
   1cfdc:	e7e8      	b.n	1cfb0 <thingy91_board_init+0x14>
	err = nrf_modem_at_printf(AT_CMD_MAGPIO);
   1cfde:	480c      	ldr	r0, [pc, #48]	; (1d010 <thingy91_board_init+0x74>)
   1cfe0:	f008 fa9e 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   1cfe4:	b110      	cbz	r0, 1cfec <thingy91_board_init+0x50>
		LOG_ERR("MAGPIO command failed");
   1cfe6:	2145      	movs	r1, #69	; 0x45
   1cfe8:	480a      	ldr	r0, [pc, #40]	; (1d014 <thingy91_board_init+0x78>)
   1cfea:	e7f3      	b.n	1cfd4 <thingy91_board_init+0x38>
	err = nrf_modem_at_printf(AT_CMD_COEX0);
   1cfec:	480a      	ldr	r0, [pc, #40]	; (1d018 <thingy91_board_init+0x7c>)
   1cfee:	f008 fa97 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   1cff2:	4604      	mov	r4, r0
   1cff4:	2800      	cmp	r0, #0
   1cff6:	d1f6      	bne.n	1cfe6 <thingy91_board_init+0x4a>
	}

	return 0;
}
   1cff8:	4620      	mov	r0, r4
   1cffa:	bd10      	pop	{r4, pc}
   1cffc:	0002f9f5 	.word	0x0002f9f5
   1d000:	0002fb3f 	.word	0x0002fb3f
   1d004:	0002fa27 	.word	0x0002fa27
   1d008:	0002fa6d 	.word	0x0002fa6d
   1d00c:	0002fa7f 	.word	0x0002fa7f
   1d010:	0002faad 	.word	0x0002faad
   1d014:	0002fb0b 	.word	0x0002fb0b
   1d018:	0002fb26 	.word	0x0002fb26

0001d01c <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   1d01c:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   1d01e:	4604      	mov	r4, r0
   1d020:	b950      	cbnz	r0, 1d038 <net_if_flag_set.constprop.0+0x1c>
   1d022:	490b      	ldr	r1, [pc, #44]	; (1d050 <net_if_flag_set.constprop.0+0x34>)
   1d024:	480b      	ldr	r0, [pc, #44]	; (1d054 <net_if_flag_set.constprop.0+0x38>)
   1d026:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   1d02a:	f00e fbbf 	bl	2b7ac <printk>
   1d02e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1d032:	4807      	ldr	r0, [pc, #28]	; (1d050 <net_if_flag_set.constprop.0+0x34>)
   1d034:	f00e fd51 	bl	2bada <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d038:	6823      	ldr	r3, [r4, #0]
   1d03a:	330c      	adds	r3, #12
   1d03c:	e8d3 2fef 	ldaex	r2, [r3]
   1d040:	f042 0201 	orr.w	r2, r2, #1
   1d044:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d048:	2900      	cmp	r1, #0
   1d04a:	d1f7      	bne.n	1d03c <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   1d04c:	bd10      	pop	{r4, pc}
   1d04e:	bf00      	nop
   1d050:	0002fb8c 	.word	0x0002fb8c
   1d054:	0002f296 	.word	0x0002f296

0001d058 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1d058:	4602      	mov	r2, r0
   1d05a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d05c:	4801      	ldr	r0, [pc, #4]	; (1d064 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1d05e:	f009 b95f 	b.w	26320 <z_impl_k_mutex_lock>
   1d062:	bf00      	nop
   1d064:	2000ca4c 	.word	0x2000ca4c

0001d068 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1d068:	4801      	ldr	r0, [pc, #4]	; (1d070 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1d06a:	f009 ba2b 	b.w	264c4 <z_impl_k_mutex_unlock>
   1d06e:	bf00      	nop
   1d070:	2000ca4c 	.word	0x2000ca4c

0001d074 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1d074:	b538      	push	{r3, r4, r5, lr}
   1d076:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   1d078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d080:	f7ff ffea 	bl	1d058 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1d084:	2100      	movs	r1, #0
   1d086:	4628      	mov	r0, r5
   1d088:	f00e feba 	bl	2be00 <net_if_flag_is_set>
   1d08c:	4604      	mov	r4, r0
   1d08e:	bb48      	cbnz	r0, 1d0e4 <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   1d090:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   1d092:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1d094:	7e9b      	ldrb	r3, [r3, #26]
   1d096:	b12b      	cbz	r3, 1d0a4 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   1d098:	f7ff ffc0 	bl	1d01c <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   1d09c:	f7ff ffe4 	bl	1d068 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   1d0a0:	4620      	mov	r0, r4
   1d0a2:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1d0a4:	f00e fea7 	bl	2bdf6 <net_if_l2>
   1d0a8:	4604      	mov	r4, r0
   1d0aa:	b130      	cbz	r0, 1d0ba <net_if_up+0x46>
   1d0ac:	6884      	ldr	r4, [r0, #8]
   1d0ae:	b124      	cbz	r4, 1d0ba <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   1d0b0:	2101      	movs	r1, #1
   1d0b2:	4628      	mov	r0, r5
   1d0b4:	47a0      	blx	r4
	if (status < 0) {
   1d0b6:	1e04      	subs	r4, r0, #0
   1d0b8:	dbf0      	blt.n	1d09c <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   1d0ba:	682b      	ldr	r3, [r5, #0]
   1d0bc:	691b      	ldr	r3, [r3, #16]
   1d0be:	b953      	cbnz	r3, 1d0d6 <net_if_up+0x62>
   1d0c0:	490a      	ldr	r1, [pc, #40]	; (1d0ec <net_if_up+0x78>)
   1d0c2:	480b      	ldr	r0, [pc, #44]	; (1d0f0 <net_if_up+0x7c>)
   1d0c4:	f640 72ca 	movw	r2, #4042	; 0xfca
   1d0c8:	f00e fb70 	bl	2b7ac <printk>
   1d0cc:	f640 71ca 	movw	r1, #4042	; 0xfca
   1d0d0:	4806      	ldr	r0, [pc, #24]	; (1d0ec <net_if_up+0x78>)
   1d0d2:	f00e fd02 	bl	2bada <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   1d0d6:	4628      	mov	r0, r5
   1d0d8:	f7ff ffa0 	bl	1d01c <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1d0dc:	4628      	mov	r0, r5
   1d0de:	f00e fe98 	bl	2be12 <l2_flags_get.isra.0>
notify:
   1d0e2:	e7db      	b.n	1d09c <net_if_up+0x28>
		status = -EALREADY;
   1d0e4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1d0e8:	e7d8      	b.n	1d09c <net_if_up+0x28>
   1d0ea:	bf00      	nop
   1d0ec:	0002fbb4 	.word	0x0002fbb4
   1d0f0:	0002f296 	.word	0x0002f296

0001d0f4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   1d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   1d0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d0fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d0fe:	f7ff ffab 	bl	1d058 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   1d102:	4c11      	ldr	r4, [pc, #68]	; (1d148 <net_if_init+0x54>)
   1d104:	4d11      	ldr	r5, [pc, #68]	; (1d14c <net_if_init+0x58>)
   1d106:	4f12      	ldr	r7, [pc, #72]	; (1d150 <net_if_init+0x5c>)
   1d108:	42ac      	cmp	r4, r5
   1d10a:	4626      	mov	r6, r4
   1d10c:	d90a      	bls.n	1d124 <net_if_init+0x30>
   1d10e:	4639      	mov	r1, r7
   1d110:	4810      	ldr	r0, [pc, #64]	; (1d154 <net_if_init+0x60>)
   1d112:	f241 02e5 	movw	r2, #4325	; 0x10e5
   1d116:	f00e fb49 	bl	2b7ac <printk>
   1d11a:	f241 01e5 	movw	r1, #4325	; 0x10e5
   1d11e:	4638      	mov	r0, r7
   1d120:	f00e fcdb 	bl	2bada <assert_post_action>
   1d124:	42ac      	cmp	r4, r5
   1d126:	d303      	bcc.n	1d130 <net_if_init+0x3c>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   1d128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   1d12c:	f7ff bf9c 	b.w	1d068 <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   1d130:	6833      	ldr	r3, [r6, #0]
   1d132:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1d134:	681b      	ldr	r3, [r3, #0]
   1d136:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1d138:	2b00      	cmp	r3, #0
   1d13a:	d0e5      	beq.n	1d108 <net_if_init+0x14>
   1d13c:	681b      	ldr	r3, [r3, #0]
   1d13e:	2b00      	cmp	r3, #0
   1d140:	d0e2      	beq.n	1d108 <net_if_init+0x14>
	api->init(iface);
   1d142:	4630      	mov	r0, r6
   1d144:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1d146:	e7df      	b.n	1d108 <net_if_init+0x14>
   1d148:	2000cad8 	.word	0x2000cad8
   1d14c:	2000cadc 	.word	0x2000cadc
   1d150:	0002fbb4 	.word	0x0002fbb4
   1d154:	0002f296 	.word	0x0002f296

0001d158 <net_if_post_init>:

void net_if_post_init(void)
{
   1d158:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1d15a:	4c0e      	ldr	r4, [pc, #56]	; (1d194 <net_if_post_init+0x3c>)
   1d15c:	4d0e      	ldr	r5, [pc, #56]	; (1d198 <net_if_post_init+0x40>)
   1d15e:	4e0f      	ldr	r6, [pc, #60]	; (1d19c <net_if_post_init+0x44>)
   1d160:	42ac      	cmp	r4, r5
   1d162:	d90a      	bls.n	1d17a <net_if_post_init+0x22>
   1d164:	4631      	mov	r1, r6
   1d166:	480e      	ldr	r0, [pc, #56]	; (1d1a0 <net_if_post_init+0x48>)
   1d168:	f241 1217 	movw	r2, #4375	; 0x1117
   1d16c:	f00e fb1e 	bl	2b7ac <printk>
   1d170:	f241 1117 	movw	r1, #4375	; 0x1117
   1d174:	4630      	mov	r0, r6
   1d176:	f00e fcb0 	bl	2bada <assert_post_action>
   1d17a:	42ac      	cmp	r4, r5
   1d17c:	d300      	bcc.n	1d180 <net_if_post_init+0x28>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   1d17e:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   1d180:	2103      	movs	r1, #3
   1d182:	4620      	mov	r0, r4
   1d184:	f00e fe3c 	bl	2be00 <net_if_flag_is_set>
   1d188:	b910      	cbnz	r0, 1d190 <net_if_post_init+0x38>
			net_if_up(iface);
   1d18a:	4620      	mov	r0, r4
   1d18c:	f7ff ff72 	bl	1d074 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   1d190:	3404      	adds	r4, #4
   1d192:	e7e5      	b.n	1d160 <net_if_post_init+0x8>
   1d194:	2000cad8 	.word	0x2000cad8
   1d198:	2000cadc 	.word	0x2000cadc
   1d19c:	0002fbb4 	.word	0x0002fbb4
   1d1a0:	0002f296 	.word	0x0002f296

0001d1a4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d1a6:	2340      	movs	r3, #64	; 0x40
{
   1d1a8:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d1aa:	490a      	ldr	r1, [pc, #40]	; (1d1d4 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d1ac:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1d1ae:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d1b0:	1149      	asrs	r1, r1, #5
{
   1d1b2:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d1b4:	4623      	mov	r3, r4
   1d1b6:	4a08      	ldr	r2, [pc, #32]	; (1d1d8 <onoff_start+0x34>)
   1d1b8:	4808      	ldr	r0, [pc, #32]	; (1d1dc <onoff_start+0x38>)
   1d1ba:	f00e fe49 	bl	2be50 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d1be:	1e01      	subs	r1, r0, #0
   1d1c0:	da05      	bge.n	1d1ce <onoff_start+0x2a>
		notify(mgr, err);
   1d1c2:	4628      	mov	r0, r5
   1d1c4:	4623      	mov	r3, r4
	}
}
   1d1c6:	b003      	add	sp, #12
   1d1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1d1cc:	4718      	bx	r3
}
   1d1ce:	b003      	add	sp, #12
   1d1d0:	bd30      	pop	{r4, r5, pc}
   1d1d2:	bf00      	nop
   1d1d4:	2000cf24 	.word	0x2000cf24
   1d1d8:	0002bebf 	.word	0x0002bebf
   1d1dc:	0002e704 	.word	0x0002e704

0001d1e0 <get_status>:
{
   1d1e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d1e2:	b2cc      	uxtb	r4, r1
   1d1e4:	2c01      	cmp	r4, #1
{
   1d1e6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d1e8:	d908      	bls.n	1d1fc <get_status+0x1c>
   1d1ea:	4908      	ldr	r1, [pc, #32]	; (1d20c <get_status+0x2c>)
   1d1ec:	4808      	ldr	r0, [pc, #32]	; (1d210 <get_status+0x30>)
   1d1ee:	2279      	movs	r2, #121	; 0x79
   1d1f0:	f00e fadc 	bl	2b7ac <printk>
   1d1f4:	2179      	movs	r1, #121	; 0x79
   1d1f6:	4805      	ldr	r0, [pc, #20]	; (1d20c <get_status+0x2c>)
   1d1f8:	f00e fc6f 	bl	2bada <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d1fc:	230c      	movs	r3, #12
   1d1fe:	6929      	ldr	r1, [r5, #16]
   1d200:	fb04 1403 	mla	r4, r4, r3, r1
   1d204:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1d206:	f000 0007 	and.w	r0, r0, #7
   1d20a:	bd38      	pop	{r3, r4, r5, pc}
   1d20c:	0002fbde 	.word	0x0002fbde
   1d210:	0002f296 	.word	0x0002f296

0001d214 <stop>:
{
   1d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d216:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d218:	2c01      	cmp	r4, #1
{
   1d21a:	4605      	mov	r5, r0
   1d21c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   1d21e:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1d220:	d90a      	bls.n	1d238 <stop+0x24>
   1d222:	4918      	ldr	r1, [pc, #96]	; (1d284 <stop+0x70>)
   1d224:	4818      	ldr	r0, [pc, #96]	; (1d288 <stop+0x74>)
   1d226:	f240 124d 	movw	r2, #333	; 0x14d
   1d22a:	f00e fabf 	bl	2b7ac <printk>
   1d22e:	f240 114d 	movw	r1, #333	; 0x14d
   1d232:	4814      	ldr	r0, [pc, #80]	; (1d284 <stop+0x70>)
   1d234:	f00e fc51 	bl	2bada <assert_post_action>
	__asm__ volatile(
   1d238:	f04f 0320 	mov.w	r3, #32
   1d23c:	f3ef 8111 	mrs	r1, BASEPRI
   1d240:	f383 8812 	msr	BASEPRI_MAX, r3
   1d244:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d248:	220c      	movs	r2, #12
   1d24a:	fb02 6304 	mla	r3, r2, r4, r6
   1d24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d250:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d254:	d001      	beq.n	1d25a <stop+0x46>
   1d256:	429f      	cmp	r7, r3
   1d258:	d111      	bne.n	1d27e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d25a:	2301      	movs	r3, #1
	int err = 0;
   1d25c:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d25e:	fb02 6604 	mla	r6, r2, r4, r6
   1d262:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   1d264:	f381 8811 	msr	BASEPRI, r1
   1d268:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1d26c:	b930      	cbnz	r0, 1d27c <stop+0x68>
	get_sub_config(dev, type)->stop();
   1d26e:	230c      	movs	r3, #12
   1d270:	6869      	ldr	r1, [r5, #4]
   1d272:	fb03 1404 	mla	r4, r3, r4, r1
   1d276:	6863      	ldr	r3, [r4, #4]
   1d278:	4798      	blx	r3
	return 0;
   1d27a:	2000      	movs	r0, #0
}
   1d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1d27e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d282:	e7ef      	b.n	1d264 <stop+0x50>
   1d284:	0002fbde 	.word	0x0002fbde
   1d288:	0002f296 	.word	0x0002f296

0001d28c <onoff_stop>:
{
   1d28c:	b570      	push	{r4, r5, r6, lr}
   1d28e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d290:	4906      	ldr	r1, [pc, #24]	; (1d2ac <onoff_stop+0x20>)
{
   1d292:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1d294:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d296:	1149      	asrs	r1, r1, #5
   1d298:	2240      	movs	r2, #64	; 0x40
   1d29a:	4805      	ldr	r0, [pc, #20]	; (1d2b0 <onoff_stop+0x24>)
   1d29c:	f7ff ffba 	bl	1d214 <stop>
	notify(mgr, res);
   1d2a0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d2a2:	4601      	mov	r1, r0
	notify(mgr, res);
   1d2a4:	4620      	mov	r0, r4
}
   1d2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d2aa:	4718      	bx	r3
   1d2ac:	2000cf24 	.word	0x2000cf24
   1d2b0:	0002e704 	.word	0x0002e704

0001d2b4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d2b4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d2b6:	2200      	movs	r2, #0
   1d2b8:	2101      	movs	r1, #1
{
   1d2ba:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d2bc:	2005      	movs	r0, #5
   1d2be:	f7fe ffab 	bl	1c218 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d2c2:	2005      	movs	r0, #5
   1d2c4:	f7fe ff76 	bl	1c1b4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d2c8:	480f      	ldr	r0, [pc, #60]	; (1d308 <clk_init+0x54>)
   1d2ca:	f004 f949 	bl	21560 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d2ce:	4b0f      	ldr	r3, [pc, #60]	; (1d30c <clk_init+0x58>)
   1d2d0:	4298      	cmp	r0, r3
   1d2d2:	d115      	bne.n	1d300 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d2d4:	f004 f964 	bl	215a0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1d2d8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d2da:	490d      	ldr	r1, [pc, #52]	; (1d310 <clk_init+0x5c>)
   1d2dc:	4630      	mov	r0, r6
   1d2de:	f00e fab3 	bl	2b848 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d2e2:	2800      	cmp	r0, #0
   1d2e4:	db0b      	blt.n	1d2fe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d2e6:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   1d2e8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d2ea:	4909      	ldr	r1, [pc, #36]	; (1d310 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d2ec:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d2ee:	f104 0020 	add.w	r0, r4, #32
   1d2f2:	f00e faa9 	bl	2b848 <onoff_manager_init>
		if (err < 0) {
   1d2f6:	2800      	cmp	r0, #0
   1d2f8:	db01      	blt.n	1d2fe <clk_init+0x4a>
	}

	return 0;
   1d2fa:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d2fc:	6565      	str	r5, [r4, #84]	; 0x54
}
   1d2fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d300:	f06f 0004 	mvn.w	r0, #4
   1d304:	e7fb      	b.n	1d2fe <clk_init+0x4a>
   1d306:	bf00      	nop
   1d308:	0001d349 	.word	0x0001d349
   1d30c:	0bad0000 	.word	0x0bad0000
   1d310:	0002ebec 	.word	0x0002ebec

0001d314 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d314:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d316:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1d318:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1d31a:	434b      	muls	r3, r1
   1d31c:	4808      	ldr	r0, [pc, #32]	; (1d340 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   1d31e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d320:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1d322:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   1d324:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d328:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1d32a:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1d32c:	f00e fd7d 	bl	2be2a <set_on_state>
	if (callback) {
   1d330:	b12d      	cbz	r5, 1d33e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d332:	4632      	mov	r2, r6
   1d334:	462b      	mov	r3, r5
}
   1d336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d33a:	4802      	ldr	r0, [pc, #8]	; (1d344 <clkstarted_handle.constprop.0+0x30>)
   1d33c:	4718      	bx	r3
}
   1d33e:	bd70      	pop	{r4, r5, r6, pc}
   1d340:	2000cf24 	.word	0x2000cf24
   1d344:	0002e704 	.word	0x0002e704

0001d348 <clock_event_handler>:
	switch (event) {
   1d348:	2801      	cmp	r0, #1
{
   1d34a:	b508      	push	{r3, lr}
	switch (event) {
   1d34c:	d006      	beq.n	1d35c <clock_event_handler+0x14>
   1d34e:	2803      	cmp	r0, #3
   1d350:	d008      	beq.n	1d364 <clock_event_handler+0x1c>
   1d352:	b9a0      	cbnz	r0, 1d37e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d354:	4b0f      	ldr	r3, [pc, #60]	; (1d394 <clock_event_handler+0x4c>)
   1d356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d358:	075b      	lsls	r3, r3, #29
   1d35a:	d119      	bne.n	1d390 <clock_event_handler+0x48>
}
   1d35c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d360:	f7ff bfd8 	b.w	1d314 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1d364:	490c      	ldr	r1, [pc, #48]	; (1d398 <clock_event_handler+0x50>)
   1d366:	f240 225e 	movw	r2, #606	; 0x25e
   1d36a:	480c      	ldr	r0, [pc, #48]	; (1d39c <clock_event_handler+0x54>)
   1d36c:	f00e fa1e 	bl	2b7ac <printk>
   1d370:	f240 215e 	movw	r1, #606	; 0x25e
}
   1d374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1d378:	4807      	ldr	r0, [pc, #28]	; (1d398 <clock_event_handler+0x50>)
   1d37a:	f00e bbae 	b.w	2bada <assert_post_action>
   1d37e:	4906      	ldr	r1, [pc, #24]	; (1d398 <clock_event_handler+0x50>)
   1d380:	f240 2262 	movw	r2, #610	; 0x262
   1d384:	4805      	ldr	r0, [pc, #20]	; (1d39c <clock_event_handler+0x54>)
   1d386:	f00e fa11 	bl	2b7ac <printk>
   1d38a:	f240 2162 	movw	r1, #610	; 0x262
   1d38e:	e7f1      	b.n	1d374 <clock_event_handler+0x2c>
}
   1d390:	bd08      	pop	{r3, pc}
   1d392:	bf00      	nop
   1d394:	2000cf24 	.word	0x2000cf24
   1d398:	0002fbde 	.word	0x0002fbde
   1d39c:	0002f296 	.word	0x0002f296

0001d3a0 <generic_hfclk_start>:
{
   1d3a0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d3a2:	f04f 0320 	mov.w	r3, #32
   1d3a6:	f3ef 8111 	mrs	r1, BASEPRI
   1d3aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d3b2:	4a11      	ldr	r2, [pc, #68]	; (1d3f8 <generic_hfclk_start+0x58>)
   1d3b4:	6813      	ldr	r3, [r2, #0]
   1d3b6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d3ba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d3be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d3c0:	d00b      	beq.n	1d3da <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d3c2:	4a0e      	ldr	r2, [pc, #56]	; (1d3fc <generic_hfclk_start+0x5c>)
   1d3c4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d3c8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d3cc:	f013 0301 	ands.w	r3, r3, #1
   1d3d0:	d003      	beq.n	1d3da <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   1d3d2:	480b      	ldr	r0, [pc, #44]	; (1d400 <generic_hfclk_start+0x60>)
   1d3d4:	f00e fd29 	bl	2be2a <set_on_state>
			already_started = true;
   1d3d8:	2301      	movs	r3, #1
	__asm__ volatile(
   1d3da:	f381 8811 	msr	BASEPRI, r1
   1d3de:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d3e2:	b123      	cbz	r3, 1d3ee <generic_hfclk_start+0x4e>
}
   1d3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1d3e8:	2000      	movs	r0, #0
   1d3ea:	f7ff bf93 	b.w	1d314 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d3ee:	2001      	movs	r0, #1
}
   1d3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d3f4:	f004 b8f2 	b.w	215dc <nrfx_clock_start>
   1d3f8:	2000cf7c 	.word	0x2000cf7c
   1d3fc:	40005000 	.word	0x40005000
   1d400:	2000cf6c 	.word	0x2000cf6c

0001d404 <api_blocking_start>:
{
   1d404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d406:	2200      	movs	r2, #0
   1d408:	2301      	movs	r3, #1
   1d40a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d40e:	ab04      	add	r3, sp, #16
   1d410:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d414:	4a09      	ldr	r2, [pc, #36]	; (1d43c <api_blocking_start+0x38>)
   1d416:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d418:	f8cd d000 	str.w	sp, [sp]
   1d41c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d420:	f00e fd46 	bl	2beb0 <api_start>
	if (err < 0) {
   1d424:	2800      	cmp	r0, #0
   1d426:	db05      	blt.n	1d434 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d42c:	2300      	movs	r3, #0
   1d42e:	4668      	mov	r0, sp
   1d430:	f009 f9fe 	bl	26830 <z_impl_k_sem_take>
}
   1d434:	b007      	add	sp, #28
   1d436:	f85d fb04 	ldr.w	pc, [sp], #4
   1d43a:	bf00      	nop
   1d43c:	0002bedd 	.word	0x0002bedd

0001d440 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d440:	4b07      	ldr	r3, [pc, #28]	; (1d460 <generic_hfclk_stop+0x20>)
   1d442:	e8d3 2fef 	ldaex	r2, [r3]
   1d446:	f022 0102 	bic.w	r1, r2, #2
   1d44a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1d44e:	2800      	cmp	r0, #0
   1d450:	d1f7      	bne.n	1d442 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d452:	07d3      	lsls	r3, r2, #31
   1d454:	d402      	bmi.n	1d45c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d456:	2001      	movs	r0, #1
   1d458:	f004 b90c 	b.w	21674 <nrfx_clock_stop>
}
   1d45c:	4770      	bx	lr
   1d45e:	bf00      	nop
   1d460:	2000cf7c 	.word	0x2000cf7c

0001d464 <z_nrf_clock_control_lf_on>:
{
   1d464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d468:	2201      	movs	r2, #1
   1d46a:	4606      	mov	r6, r0
   1d46c:	4942      	ldr	r1, [pc, #264]	; (1d578 <z_nrf_clock_control_lf_on+0x114>)
   1d46e:	e8d1 3fef 	ldaex	r3, [r1]
   1d472:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1d476:	2800      	cmp	r0, #0
   1d478:	d1f9      	bne.n	1d46e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1d47a:	b99b      	cbnz	r3, 1d4a4 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d47c:	493f      	ldr	r1, [pc, #252]	; (1d57c <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   1d47e:	4840      	ldr	r0, [pc, #256]	; (1d580 <z_nrf_clock_control_lf_on+0x11c>)
   1d480:	604b      	str	r3, [r1, #4]
   1d482:	60cb      	str	r3, [r1, #12]
   1d484:	608a      	str	r2, [r1, #8]
   1d486:	f7fd fc09 	bl	1ac9c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1d48a:	2800      	cmp	r0, #0
   1d48c:	da0a      	bge.n	1d4a4 <z_nrf_clock_control_lf_on+0x40>
   1d48e:	493d      	ldr	r1, [pc, #244]	; (1d584 <z_nrf_clock_control_lf_on+0x120>)
   1d490:	483d      	ldr	r0, [pc, #244]	; (1d588 <z_nrf_clock_control_lf_on+0x124>)
   1d492:	f44f 7208 	mov.w	r2, #544	; 0x220
   1d496:	f00e f989 	bl	2b7ac <printk>
   1d49a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d49e:	4839      	ldr	r0, [pc, #228]	; (1d584 <z_nrf_clock_control_lf_on+0x120>)
   1d4a0:	f00e fb1b 	bl	2bada <assert_post_action>
	switch (start_mode) {
   1d4a4:	b386      	cbz	r6, 1d508 <z_nrf_clock_control_lf_on+0xa4>
   1d4a6:	1e73      	subs	r3, r6, #1
   1d4a8:	2b01      	cmp	r3, #1
   1d4aa:	d852      	bhi.n	1d552 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d4ac:	2e01      	cmp	r6, #1
   1d4ae:	d106      	bne.n	1d4be <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d4b0:	4b36      	ldr	r3, [pc, #216]	; (1d58c <z_nrf_clock_control_lf_on+0x128>)
   1d4b2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d4b6:	f003 0303 	and.w	r3, r3, #3
   1d4ba:	2b02      	cmp	r3, #2
   1d4bc:	d024      	beq.n	1d508 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d4be:	f010 f9e4 	bl	2d88a <k_is_in_isr>
   1d4c2:	4604      	mov	r4, r0
   1d4c4:	b918      	cbnz	r0, 1d4ce <z_nrf_clock_control_lf_on+0x6a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1d4c6:	4b32      	ldr	r3, [pc, #200]	; (1d590 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
   1d4c8:	781b      	ldrb	r3, [r3, #0]
   1d4ca:	2b00      	cmp	r3, #0
   1d4cc:	d14e      	bne.n	1d56c <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
   1d4ce:	f04f 0320 	mov.w	r3, #32
   1d4d2:	f3ef 8711 	mrs	r7, BASEPRI
   1d4d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4da:	f3bf 8f6f 	isb	sy
   1d4de:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d4e0:	4d2a      	ldr	r5, [pc, #168]	; (1d58c <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d4e2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1d594 <z_nrf_clock_control_lf_on+0x130>
   1d4e6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d4ea:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1d4ee:	03d2      	lsls	r2, r2, #15
   1d4f0:	d50c      	bpl.n	1d50c <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d4f2:	f003 0303 	and.w	r3, r3, #3
   1d4f6:	2b02      	cmp	r3, #2
   1d4f8:	d001      	beq.n	1d4fe <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d4fa:	2e01      	cmp	r6, #1
   1d4fc:	d106      	bne.n	1d50c <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
   1d4fe:	b324      	cbz	r4, 1d54a <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
   1d500:	f387 8811 	msr	BASEPRI, r7
   1d504:	f3bf 8f6f 	isb	sy
}
   1d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d50c:	b1c4      	cbz	r4, 1d540 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d50e:	4638      	mov	r0, r7
   1d510:	f7fe fe18 	bl	1c144 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d514:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d518:	b2db      	uxtb	r3, r3
   1d51a:	2b01      	cmp	r3, #1
   1d51c:	d1e3      	bne.n	1d4e6 <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d51e:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1d522:	2a00      	cmp	r2, #0
   1d524:	d0df      	beq.n	1d4e6 <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d526:	2200      	movs	r2, #0
   1d528:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d52c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d530:	2202      	movs	r2, #2
   1d532:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   1d536:	2220      	movs	r2, #32
   1d538:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d53c:	60ab      	str	r3, [r5, #8]
}
   1d53e:	e7d2      	b.n	1d4e6 <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
   1d540:	2100      	movs	r1, #0
   1d542:	2021      	movs	r0, #33	; 0x21
   1d544:	f00a fbb4 	bl	27cb0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d548:	e7e4      	b.n	1d514 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
   1d54a:	2302      	movs	r3, #2
   1d54c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   1d550:	e7da      	b.n	1d508 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
   1d552:	490c      	ldr	r1, [pc, #48]	; (1d584 <z_nrf_clock_control_lf_on+0x120>)
   1d554:	480c      	ldr	r0, [pc, #48]	; (1d588 <z_nrf_clock_control_lf_on+0x124>)
   1d556:	f240 2232 	movw	r2, #562	; 0x232
   1d55a:	f00e f927 	bl	2b7ac <printk>
}
   1d55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   1d562:	f240 2132 	movw	r1, #562	; 0x232
   1d566:	4807      	ldr	r0, [pc, #28]	; (1d584 <z_nrf_clock_control_lf_on+0x120>)
   1d568:	f00e bab7 	b.w	2bada <assert_post_action>
    p_reg->INTENCLR = mask;
   1d56c:	2202      	movs	r2, #2
   1d56e:	4b07      	ldr	r3, [pc, #28]	; (1d58c <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
   1d570:	4607      	mov	r7, r0
   1d572:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d576:	e7b3      	b.n	1d4e0 <z_nrf_clock_control_lf_on+0x7c>
   1d578:	2000cf80 	.word	0x2000cf80
   1d57c:	2000cf14 	.word	0x2000cf14
   1d580:	2000cf44 	.word	0x2000cf44
   1d584:	0002fbde 	.word	0x0002fbde
   1d588:	0002f296 	.word	0x0002f296
   1d58c:	40005000 	.word	0x40005000
   1d590:	2000db8d 	.word	0x2000db8d
   1d594:	e000e100 	.word	0xe000e100

0001d598 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1d598:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1d59a:	4c04      	ldr	r4, [pc, #16]	; (1d5ac <rtt_console_init+0x14>)
   1d59c:	4620      	mov	r0, r4
   1d59e:	f7fd f989 	bl	1a8b4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1d5a2:	4620      	mov	r0, r4
   1d5a4:	f7ff fc1c 	bl	1cde0 <__stdout_hook_install>

	return 0;
}
   1d5a8:	2000      	movs	r0, #0
   1d5aa:	bd10      	pop	{r4, pc}
   1d5ac:	0001d5b1 	.word	0x0001d5b1

0001d5b0 <rtt_console_out>:
{
   1d5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d5b2:	4604      	mov	r4, r0
	char c = (char)character;
   1d5b4:	2503      	movs	r5, #3
   1d5b6:	4e13      	ldr	r6, [pc, #76]	; (1d604 <rtt_console_out+0x54>)
   1d5b8:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
   1d5bc:	f3ef 8711 	mrs	r7, BASEPRI
   1d5c0:	f04f 0120 	mov.w	r1, #32
   1d5c4:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1d5c8:	2201      	movs	r2, #1
   1d5ca:	f10d 0107 	add.w	r1, sp, #7
   1d5ce:	2000      	movs	r0, #0
   1d5d0:	f005 fc9c 	bl	22f0c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   1d5d4:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   1d5d8:	b120      	cbz	r0, 1d5e4 <rtt_console_out+0x34>
			host_present = true;
   1d5da:	2301      	movs	r3, #1
   1d5dc:	7033      	strb	r3, [r6, #0]
}
   1d5de:	4620      	mov	r0, r4
   1d5e0:	b003      	add	sp, #12
   1d5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1d5e4:	7833      	ldrb	r3, [r6, #0]
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	d0f9      	beq.n	1d5de <rtt_console_out+0x2e>
			if (max_cnt) {
   1d5ea:	3d01      	subs	r5, #1
   1d5ec:	d008      	beq.n	1d600 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1d5ee:	f010 f94c 	bl	2d88a <k_is_in_isr>
   1d5f2:	2800      	cmp	r0, #0
   1d5f4:	d1e2      	bne.n	1d5bc <rtt_console_out+0xc>
   1d5f6:	2100      	movs	r1, #0
   1d5f8:	2042      	movs	r0, #66	; 0x42
   1d5fa:	f00a fb59 	bl	27cb0 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1d5fe:	e7dd      	b.n	1d5bc <rtt_console_out+0xc>
				host_present = false;
   1d600:	7035      	strb	r5, [r6, #0]
   1d602:	e7ec      	b.n	1d5de <rtt_console_out+0x2e>
   1d604:	2000d50f 	.word	0x2000d50f

0001d608 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d608:	b570      	push	{r4, r5, r6, lr}
   1d60a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d60c:	460c      	mov	r4, r1
	return port->data;
   1d60e:	6905      	ldr	r5, [r0, #16]
   1d610:	b941      	cbnz	r1, 1d624 <gpio_nrfx_manage_callback+0x1c>
   1d612:	491e      	ldr	r1, [pc, #120]	; (1d68c <gpio_nrfx_manage_callback+0x84>)
   1d614:	481e      	ldr	r0, [pc, #120]	; (1d690 <gpio_nrfx_manage_callback+0x88>)
   1d616:	2224      	movs	r2, #36	; 0x24
   1d618:	f00e f8c8 	bl	2b7ac <printk>
   1d61c:	2124      	movs	r1, #36	; 0x24
   1d61e:	481b      	ldr	r0, [pc, #108]	; (1d68c <gpio_nrfx_manage_callback+0x84>)
   1d620:	f00e fa5b 	bl	2bada <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d624:	6863      	ldr	r3, [r4, #4]
   1d626:	b943      	cbnz	r3, 1d63a <gpio_nrfx_manage_callback+0x32>
   1d628:	4918      	ldr	r1, [pc, #96]	; (1d68c <gpio_nrfx_manage_callback+0x84>)
   1d62a:	4819      	ldr	r0, [pc, #100]	; (1d690 <gpio_nrfx_manage_callback+0x88>)
   1d62c:	2225      	movs	r2, #37	; 0x25
   1d62e:	f00e f8bd 	bl	2b7ac <printk>
   1d632:	2125      	movs	r1, #37	; 0x25
   1d634:	4815      	ldr	r0, [pc, #84]	; (1d68c <gpio_nrfx_manage_callback+0x84>)
   1d636:	f00e fa50 	bl	2bada <assert_post_action>
	return list->head;
   1d63a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d63c:	b15b      	cbz	r3, 1d656 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d63e:	2200      	movs	r2, #0
   1d640:	429c      	cmp	r4, r3
   1d642:	d112      	bne.n	1d66a <gpio_nrfx_manage_callback+0x62>
	return node->next;
   1d644:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1d646:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   1d648:	b952      	cbnz	r2, 1d660 <gpio_nrfx_manage_callback+0x58>
   1d64a:	42a1      	cmp	r1, r4
	list->head = node;
   1d64c:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d64e:	d100      	bne.n	1d652 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d650:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1d652:	2300      	movs	r3, #0
   1d654:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d656:	b96e      	cbnz	r6, 1d674 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d658:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1d65a:	bd70      	pop	{r4, r5, r6, pc}
   1d65c:	460b      	mov	r3, r1
   1d65e:	e7ef      	b.n	1d640 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   1d660:	42a1      	cmp	r1, r4
	parent->next = child;
   1d662:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d664:	bf08      	it	eq
   1d666:	60aa      	streq	r2, [r5, #8]
}
   1d668:	e7f3      	b.n	1d652 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1d66a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d66c:	461a      	mov	r2, r3
   1d66e:	2900      	cmp	r1, #0
   1d670:	d1f4      	bne.n	1d65c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d672:	b13e      	cbz	r6, 1d684 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   1d674:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d676:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   1d678:	6023      	str	r3, [r4, #0]
	list->head = node;
   1d67a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d67c:	2800      	cmp	r0, #0
   1d67e:	d1eb      	bne.n	1d658 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d680:	60ac      	str	r4, [r5, #8]
}
   1d682:	e7ea      	b.n	1d65a <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d684:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d688:	e7e7      	b.n	1d65a <gpio_nrfx_manage_callback+0x52>
   1d68a:	bf00      	nop
   1d68c:	0002fc3b 	.word	0x0002fc3b
   1d690:	0002f296 	.word	0x0002f296

0001d694 <gpio_nrfx_pin_interrupt_configure>:
{
   1d694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   1d696:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d698:	f001 041f 	and.w	r4, r1, #31
   1d69c:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d69e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d6a2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1d6a6:	f04f 0500 	mov.w	r5, #0
   1d6aa:	d104      	bne.n	1d6b6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1d6ac:	4620      	mov	r0, r4
   1d6ae:	f004 fb2d 	bl	21d0c <nrfx_gpiote_trigger_disable>
	return 0;
   1d6b2:	2000      	movs	r0, #0
   1d6b4:	e04b      	b.n	1d74e <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d6b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d6ba:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d6be:	d148      	bne.n	1d752 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d6c4:	bf0c      	ite	eq
   1d6c6:	2304      	moveq	r3, #4
   1d6c8:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d6ca:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1d6ce:	6883      	ldr	r3, [r0, #8]
   1d6d0:	fa23 f101 	lsr.w	r1, r3, r1
   1d6d4:	07c9      	lsls	r1, r1, #31
   1d6d6:	d448      	bmi.n	1d76a <gpio_nrfx_pin_interrupt_configure+0xd6>
   1d6d8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1d6dc:	d145      	bne.n	1d76a <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d6de:	0966      	lsrs	r6, r4, #5
   1d6e0:	bf0c      	ite	eq
   1d6e2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1d6e6:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d6e8:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d6ec:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d6ee:	07da      	lsls	r2, r3, #31
   1d6f0:	d40a      	bmi.n	1d708 <gpio_nrfx_pin_interrupt_configure+0x74>
   1d6f2:	4926      	ldr	r1, [pc, #152]	; (1d78c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d6f4:	4826      	ldr	r0, [pc, #152]	; (1d790 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d6f6:	f240 2229 	movw	r2, #553	; 0x229
   1d6fa:	f00e f857 	bl	2b7ac <printk>
   1d6fe:	f240 2129 	movw	r1, #553	; 0x229
   1d702:	4822      	ldr	r0, [pc, #136]	; (1d78c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d704:	f00e f9e9 	bl	2bada <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d708:	b156      	cbz	r6, 1d720 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   1d70a:	4920      	ldr	r1, [pc, #128]	; (1d78c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d70c:	4820      	ldr	r0, [pc, #128]	; (1d790 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1d70e:	f240 222e 	movw	r2, #558	; 0x22e
   1d712:	f00e f84b 	bl	2b7ac <printk>
   1d716:	f240 212e 	movw	r1, #558	; 0x22e
   1d71a:	481c      	ldr	r0, [pc, #112]	; (1d78c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1d71c:	f00e f9dd 	bl	2bada <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d720:	4b1c      	ldr	r3, [pc, #112]	; (1d794 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1d722:	3580      	adds	r5, #128	; 0x80
   1d724:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1d728:	07db      	lsls	r3, r3, #31
   1d72a:	d41e      	bmi.n	1d76a <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1d72c:	f10d 0507 	add.w	r5, sp, #7
   1d730:	4629      	mov	r1, r5
   1d732:	4620      	mov	r0, r4
   1d734:	f004 fa18 	bl	21b68 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1d738:	4b17      	ldr	r3, [pc, #92]	; (1d798 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1d73a:	4298      	cmp	r0, r3
   1d73c:	d114      	bne.n	1d768 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   1d73e:	4628      	mov	r0, r5
   1d740:	f004 fa72 	bl	21c28 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1d744:	4b15      	ldr	r3, [pc, #84]	; (1d79c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d746:	4298      	cmp	r0, r3
   1d748:	d00e      	beq.n	1d768 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   1d74a:	f06f 000b 	mvn.w	r0, #11
}
   1d74e:	b004      	add	sp, #16
   1d750:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d752:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d756:	d005      	beq.n	1d764 <gpio_nrfx_pin_interrupt_configure+0xd0>
   1d758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1d75c:	bf0c      	ite	eq
   1d75e:	2302      	moveq	r3, #2
   1d760:	2301      	movne	r3, #1
   1d762:	e7b2      	b.n	1d6ca <gpio_nrfx_pin_interrupt_configure+0x36>
   1d764:	2303      	movs	r3, #3
   1d766:	e7b0      	b.n	1d6ca <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   1d768:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d76a:	2300      	movs	r3, #0
   1d76c:	4620      	mov	r0, r4
   1d76e:	4619      	mov	r1, r3
   1d770:	aa02      	add	r2, sp, #8
   1d772:	f004 f8cf 	bl	21914 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d776:	4b09      	ldr	r3, [pc, #36]	; (1d79c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1d778:	4298      	cmp	r0, r3
   1d77a:	d104      	bne.n	1d786 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1d77c:	2101      	movs	r1, #1
   1d77e:	4620      	mov	r0, r4
   1d780:	f004 fa58 	bl	21c34 <nrfx_gpiote_trigger_enable>
   1d784:	e795      	b.n	1d6b2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   1d786:	f06f 0004 	mvn.w	r0, #4
   1d78a:	e7e0      	b.n	1d74e <gpio_nrfx_pin_interrupt_configure+0xba>
   1d78c:	0002fc68 	.word	0x0002fc68
   1d790:	0002f296 	.word	0x0002f296
   1d794:	40842500 	.word	0x40842500
   1d798:	0bad0004 	.word	0x0bad0004
   1d79c:	0bad0000 	.word	0x0bad0000

0001d7a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d7a0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1d7a2:	f004 fa31 	bl	21c08 <nrfx_gpiote_is_init>
   1d7a6:	4604      	mov	r4, r0
   1d7a8:	b968      	cbnz	r0, 1d7c6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1d7aa:	f004 fa05 	bl	21bb8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1d7ae:	4b08      	ldr	r3, [pc, #32]	; (1d7d0 <gpio_nrfx_init+0x30>)
   1d7b0:	4298      	cmp	r0, r3
   1d7b2:	d10a      	bne.n	1d7ca <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1d7b4:	4621      	mov	r1, r4
   1d7b6:	4807      	ldr	r0, [pc, #28]	; (1d7d4 <gpio_nrfx_init+0x34>)
   1d7b8:	f004 f9d0 	bl	21b5c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d7bc:	4622      	mov	r2, r4
   1d7be:	2105      	movs	r1, #5
   1d7c0:	2031      	movs	r0, #49	; 0x31
   1d7c2:	f7fe fd29 	bl	1c218 <z_arm_irq_priority_set>
		return 0;
   1d7c6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1d7c8:	bd10      	pop	{r4, pc}
		return -EIO;
   1d7ca:	f06f 0004 	mvn.w	r0, #4
   1d7ce:	e7fb      	b.n	1d7c8 <gpio_nrfx_init+0x28>
   1d7d0:	0bad0000 	.word	0x0bad0000
   1d7d4:	0001d7d9 	.word	0x0001d7d9

0001d7d8 <nrfx_gpio_handler>:
{
   1d7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1d7dc:	0943      	lsrs	r3, r0, #5
   1d7de:	d122      	bne.n	1d826 <nrfx_gpio_handler+0x4e>
	return list->head;
   1d7e0:	4b12      	ldr	r3, [pc, #72]	; (1d82c <nrfx_gpio_handler+0x54>)
   1d7e2:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d7e4:	b1fc      	cbz	r4, 1d826 <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   1d7e6:	2601      	movs	r6, #1
	return node->next;
   1d7e8:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d7ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d830 <nrfx_gpio_handler+0x58>
			__ASSERT(cb->handler, "No callback handler!");
   1d7ee:	4f11      	ldr	r7, [pc, #68]	; (1d834 <nrfx_gpio_handler+0x5c>)
   1d7f0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1d838 <nrfx_gpio_handler+0x60>
   1d7f4:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   1d7f6:	68a3      	ldr	r3, [r4, #8]
   1d7f8:	421e      	tst	r6, r3
   1d7fa:	d010      	beq.n	1d81e <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   1d7fc:	6863      	ldr	r3, [r4, #4]
   1d7fe:	b943      	cbnz	r3, 1d812 <nrfx_gpio_handler+0x3a>
   1d800:	4639      	mov	r1, r7
   1d802:	4648      	mov	r0, r9
   1d804:	2245      	movs	r2, #69	; 0x45
   1d806:	f00d ffd1 	bl	2b7ac <printk>
   1d80a:	2145      	movs	r1, #69	; 0x45
   1d80c:	4638      	mov	r0, r7
   1d80e:	f00e f964 	bl	2bada <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d812:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d816:	4621      	mov	r1, r4
   1d818:	4640      	mov	r0, r8
   1d81a:	4032      	ands	r2, r6
   1d81c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d81e:	b115      	cbz	r5, 1d826 <nrfx_gpio_handler+0x4e>
   1d820:	462c      	mov	r4, r5
   1d822:	682d      	ldr	r5, [r5, #0]
   1d824:	e7e7      	b.n	1d7f6 <nrfx_gpio_handler+0x1e>
}
   1d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d82a:	bf00      	nop
   1d82c:	2000cf84 	.word	0x2000cf84
   1d830:	0002e71c 	.word	0x0002e71c
   1d834:	0002fc3b 	.word	0x0002fc3b
   1d838:	0002f296 	.word	0x0002f296

0001d83c <gpio_nrfx_pin_configure>:
{
   1d83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   1d840:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d842:	f001 051f 	and.w	r5, r1, #31
   1d846:	7b3b      	ldrb	r3, [r7, #12]
{
   1d848:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   1d84a:	4614      	mov	r4, r2
{
   1d84c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d84e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1d852:	b9ca      	cbnz	r2, 1d888 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d854:	a902      	add	r1, sp, #8
   1d856:	4628      	mov	r0, r5
   1d858:	f004 f986 	bl	21b68 <nrfx_gpiote_channel_get>
   1d85c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1d85e:	4628      	mov	r0, r5
   1d860:	f004 fa7e 	bl	21d60 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1d864:	4b47      	ldr	r3, [pc, #284]	; (1d984 <gpio_nrfx_pin_configure+0x148>)
   1d866:	4298      	cmp	r0, r3
   1d868:	d004      	beq.n	1d874 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1d86a:	f06f 0004 	mvn.w	r0, #4
}
   1d86e:	b005      	add	sp, #20
   1d870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1d874:	4284      	cmp	r4, r0
   1d876:	d105      	bne.n	1d884 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1d878:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1d87c:	f004 f9ce 	bl	21c1c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1d880:	42a0      	cmp	r0, r4
   1d882:	d1f2      	bne.n	1d86a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d884:	2000      	movs	r0, #0
   1d886:	e7f2      	b.n	1d86e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d888:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d88c:	f10d 0103 	add.w	r1, sp, #3
   1d890:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1d892:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d896:	f004 f967 	bl	21b68 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d89a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1d89c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1d89e:	4649      	mov	r1, r9
   1d8a0:	4628      	mov	r0, r5
   1d8a2:	aa02      	add	r2, sp, #8
   1d8a4:	f004 f836 	bl	21914 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1d8a8:	4b36      	ldr	r3, [pc, #216]	; (1d984 <gpio_nrfx_pin_configure+0x148>)
   1d8aa:	4298      	cmp	r0, r3
   1d8ac:	d002      	beq.n	1d8b4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8ae:	f06f 0015 	mvn.w	r0, #21
   1d8b2:	e7dc      	b.n	1d86e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1d8b4:	4580      	cmp	r8, r0
   1d8b6:	d103      	bne.n	1d8c0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1d8b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1d8bc:	f004 f9ae 	bl	21c1c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1d8c0:	05a3      	lsls	r3, r4, #22
   1d8c2:	d54c      	bpl.n	1d95e <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8c4:	4b30      	ldr	r3, [pc, #192]	; (1d988 <gpio_nrfx_pin_configure+0x14c>)
   1d8c6:	4a31      	ldr	r2, [pc, #196]	; (1d98c <gpio_nrfx_pin_configure+0x150>)
   1d8c8:	4023      	ands	r3, r4
   1d8ca:	4293      	cmp	r3, r2
   1d8cc:	d039      	beq.n	1d942 <gpio_nrfx_pin_configure+0x106>
   1d8ce:	d80c      	bhi.n	1d8ea <gpio_nrfx_pin_configure+0xae>
   1d8d0:	2b06      	cmp	r3, #6
   1d8d2:	d014      	beq.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
   1d8d4:	d804      	bhi.n	1d8e0 <gpio_nrfx_pin_configure+0xa4>
   1d8d6:	b193      	cbz	r3, 1d8fe <gpio_nrfx_pin_configure+0xc2>
   1d8d8:	2b02      	cmp	r3, #2
   1d8da:	d1e8      	bne.n	1d8ae <gpio_nrfx_pin_configure+0x72>
   1d8dc:	2304      	movs	r3, #4
   1d8de:	e00e      	b.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
   1d8e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d8e4:	d1e3      	bne.n	1d8ae <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1d8e6:	2301      	movs	r3, #1
   1d8e8:	e009      	b.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8ea:	4a29      	ldr	r2, [pc, #164]	; (1d990 <gpio_nrfx_pin_configure+0x154>)
   1d8ec:	4293      	cmp	r3, r2
   1d8ee:	d02a      	beq.n	1d946 <gpio_nrfx_pin_configure+0x10a>
   1d8f0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d8f4:	d029      	beq.n	1d94a <gpio_nrfx_pin_configure+0x10e>
   1d8f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d8fa:	d1d8      	bne.n	1d8ae <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1d8fc:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1d8fe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1d902:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1d906:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1d90a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d90c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1d910:	bf4c      	ite	mi
   1d912:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   1d914:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d918:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1d91a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d91e:	d516      	bpl.n	1d94e <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d920:	2101      	movs	r1, #1
   1d922:	687b      	ldr	r3, [r7, #4]
   1d924:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1d928:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d92a:	2200      	movs	r2, #0
   1d92c:	4628      	mov	r0, r5
   1d92e:	a901      	add	r1, sp, #4
   1d930:	f004 f89c 	bl	21a6c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d934:	4b13      	ldr	r3, [pc, #76]	; (1d984 <gpio_nrfx_pin_configure+0x148>)
   1d936:	4298      	cmp	r0, r3
   1d938:	bf14      	ite	ne
   1d93a:	f06f 0015 	mvnne.w	r0, #21
   1d93e:	2000      	moveq	r0, #0
   1d940:	e795      	b.n	1d86e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1d942:	2307      	movs	r3, #7
   1d944:	e7db      	b.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1d946:	2305      	movs	r3, #5
   1d948:	e7d9      	b.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1d94a:	2303      	movs	r3, #3
   1d94c:	e7d7      	b.n	1d8fe <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d94e:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d950:	bf41      	itttt	mi
   1d952:	2101      	movmi	r1, #1
   1d954:	687b      	ldrmi	r3, [r7, #4]
   1d956:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1d95a:	60de      	strmi	r6, [r3, #12]
}
   1d95c:	e7e5      	b.n	1d92a <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   1d95e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d960:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1d964:	bf4c      	ite	mi
   1d966:	2403      	movmi	r4, #3
   1d968:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d96c:	461a      	mov	r2, r3
   1d96e:	4628      	mov	r0, r5
   1d970:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1d972:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d976:	f003 ffcd 	bl	21914 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d97a:	4b02      	ldr	r3, [pc, #8]	; (1d984 <gpio_nrfx_pin_configure+0x148>)
   1d97c:	4298      	cmp	r0, r3
   1d97e:	d081      	beq.n	1d884 <gpio_nrfx_pin_configure+0x48>
   1d980:	e795      	b.n	1d8ae <gpio_nrfx_pin_configure+0x72>
   1d982:	bf00      	nop
   1d984:	0bad0000 	.word	0x0bad0000
   1d988:	00f00006 	.word	0x00f00006
   1d98c:	00100006 	.word	0x00100006
   1d990:	00400002 	.word	0x00400002

0001d994 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   1d994:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d996:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1d998:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   1d99c:	f005 fa22 	bl	22de4 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1d9a0:	4b03      	ldr	r3, [pc, #12]	; (1d9b0 <i2c_nrfx_twim_recover_bus+0x1c>)
   1d9a2:	4298      	cmp	r0, r3
}
   1d9a4:	bf14      	ite	ne
   1d9a6:	f06f 000f 	mvnne.w	r0, #15
   1d9aa:	2000      	moveq	r0, #0
   1d9ac:	bd08      	pop	{r3, pc}
   1d9ae:	bf00      	nop
   1d9b0:	0bad0000 	.word	0x0bad0000

0001d9b4 <init_twim>:
{
   1d9b4:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1d9b6:	6905      	ldr	r5, [r0, #16]
{
   1d9b8:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   1d9ba:	462b      	mov	r3, r5
   1d9bc:	4a0a      	ldr	r2, [pc, #40]	; (1d9e8 <init_twim+0x34>)
   1d9be:	6840      	ldr	r0, [r0, #4]
   1d9c0:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1d9c4:	f004 fe06 	bl	225d4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1d9c8:	4b08      	ldr	r3, [pc, #32]	; (1d9ec <init_twim+0x38>)
   1d9ca:	4298      	cmp	r0, r3
   1d9cc:	d007      	beq.n	1d9de <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1d9ce:	4808      	ldr	r0, [pc, #32]	; (1d9f0 <init_twim+0x3c>)
   1d9d0:	2145      	movs	r1, #69	; 0x45
   1d9d2:	6822      	ldr	r2, [r4, #0]
   1d9d4:	f00e f89b 	bl	2bb0e <z_log_minimal_printk>
   1d9d8:	f06f 0004 	mvn.w	r0, #4
}
   1d9dc:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
   1d9de:	2301      	movs	r3, #1
	return 0;
   1d9e0:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
   1d9e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   1d9e6:	e7f9      	b.n	1d9dc <init_twim+0x28>
   1d9e8:	0001da51 	.word	0x0001da51
   1d9ec:	0bad0000 	.word	0x0bad0000
   1d9f0:	0002fca6 	.word	0x0002fca6

0001d9f4 <i2c_nrfx_twim_configure>:
{
   1d9f4:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d9f6:	07cb      	lsls	r3, r1, #31
{
   1d9f8:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   1d9fa:	d409      	bmi.n	1da10 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
   1d9fc:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1da00:	2901      	cmp	r1, #1
   1da02:	d008      	beq.n	1da16 <i2c_nrfx_twim_configure+0x22>
   1da04:	2902      	cmp	r1, #2
   1da06:	d01b      	beq.n	1da40 <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
   1da08:	2145      	movs	r1, #69	; 0x45
   1da0a:	4810      	ldr	r0, [pc, #64]	; (1da4c <i2c_nrfx_twim_configure+0x58>)
   1da0c:	f00e f87f 	bl	2bb0e <z_log_minimal_printk>
		return -EINVAL;
   1da10:	f06f 0015 	mvn.w	r0, #21
}
   1da14:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   1da16:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1da1a:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   1da1c:	6baa      	ldr	r2, [r5, #56]	; 0x38
   1da1e:	4293      	cmp	r3, r2
   1da20:	d011      	beq.n	1da46 <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
   1da22:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   1da24:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1da28:	b12b      	cbz	r3, 1da36 <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
   1da2a:	6860      	ldr	r0, [r4, #4]
   1da2c:	f004 fe9e 	bl	2276c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   1da30:	2300      	movs	r3, #0
   1da32:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   1da36:	4620      	mov	r0, r4
}
   1da38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   1da3c:	f7ff bfba 	b.w	1d9b4 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   1da40:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   1da44:	e7e9      	b.n	1da1a <i2c_nrfx_twim_configure+0x26>
	return 0;
   1da46:	2000      	movs	r0, #0
   1da48:	e7e4      	b.n	1da14 <i2c_nrfx_twim_configure+0x20>
   1da4a:	bf00      	nop
   1da4c:	0002fccb 	.word	0x0002fccb

0001da50 <event_handler>:
	switch (p_event->type) {
   1da50:	7803      	ldrb	r3, [r0, #0]
   1da52:	2b01      	cmp	r3, #1
   1da54:	d008      	beq.n	1da68 <event_handler+0x18>
   1da56:	2b02      	cmp	r3, #2
   1da58:	d008      	beq.n	1da6c <event_handler+0x1c>
   1da5a:	b94b      	cbnz	r3, 1da70 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1da5c:	4b05      	ldr	r3, [pc, #20]	; (1da74 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1da5e:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   1da60:	f101 0018 	add.w	r0, r1, #24
   1da64:	f008 beaa 	b.w	267bc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1da68:	4b03      	ldr	r3, [pc, #12]	; (1da78 <event_handler+0x28>)
   1da6a:	e7f8      	b.n	1da5e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1da6c:	4b03      	ldr	r3, [pc, #12]	; (1da7c <event_handler+0x2c>)
   1da6e:	e7f6      	b.n	1da5e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1da70:	4b03      	ldr	r3, [pc, #12]	; (1da80 <event_handler+0x30>)
   1da72:	e7f4      	b.n	1da5e <event_handler+0xe>
   1da74:	0bad0000 	.word	0x0bad0000
   1da78:	0bae0001 	.word	0x0bae0001
   1da7c:	0bae0002 	.word	0x0bae0002
   1da80:	0bad0001 	.word	0x0bad0001

0001da84 <i2c_nrfx_twim_transfer>:
{
   1da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da88:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1da8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1da8e:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1da90:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1da92:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
   1da96:	9203      	str	r2, [sp, #12]
   1da98:	4607      	mov	r7, r0
   1da9a:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1da9c:	2214      	movs	r2, #20
   1da9e:	2100      	movs	r1, #0
   1daa0:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   1daa2:	9302      	str	r3, [sp, #8]
	uint8_t *msg_buf = dev_data->msg_buf;
   1daa4:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   1daa8:	f010 f896 	bl	2dbd8 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   1daac:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   1dab0:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   1dab4:	b1c3      	cbz	r3, 1dae8 <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
   1dab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1daba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dabe:	4630      	mov	r0, r6
   1dac0:	f008 feb6 	bl	26830 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1dac4:	f106 0b18 	add.w	fp, r6, #24
	for (size_t i = 0; i < num_msgs; i++) {
   1dac8:	f04f 0900 	mov.w	r9, #0
   1dacc:	2200      	movs	r2, #0
   1dace:	2300      	movs	r3, #0
   1dad0:	4658      	mov	r0, fp
   1dad2:	f008 fead 	bl	26830 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   1dad6:	4640      	mov	r0, r8
   1dad8:	f004 fdec 	bl	226b4 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   1dadc:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
   1dade:	9b03      	ldr	r3, [sp, #12]
   1dae0:	4599      	cmp	r9, r3
   1dae2:	d309      	bcc.n	1daf8 <i2c_nrfx_twim_transfer+0x74>
   1dae4:	2400      	movs	r4, #0
   1dae6:	e030      	b.n	1db4a <i2c_nrfx_twim_transfer+0xc6>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   1dae8:	4638      	mov	r0, r7
   1daea:	f7ff ff63 	bl	1d9b4 <init_twim>
   1daee:	2800      	cmp	r0, #0
   1daf0:	dae1      	bge.n	1dab6 <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
   1daf2:	f06f 0404 	mvn.w	r4, #4
   1daf6:	e02e      	b.n	1db56 <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1daf8:	7a21      	ldrb	r1, [r4, #8]
   1dafa:	070b      	lsls	r3, r1, #28
   1dafc:	f100 80b9 	bmi.w	1dc72 <i2c_nrfx_twim_transfer+0x1ee>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db00:	9a03      	ldr	r2, [sp, #12]
		bool concat_next = ((i + 1) < num_msgs)
   1db02:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db06:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   1db08:	9304      	str	r3, [sp, #16]
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db0a:	d20a      	bcs.n	1db22 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1db0c:	0788      	lsls	r0, r1, #30
   1db0e:	d408      	bmi.n	1db22 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1db10:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   1db12:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db16:	f002 0201 	and.w	r2, r2, #1
   1db1a:	f003 0304 	and.w	r3, r3, #4
   1db1e:	4313      	orrs	r3, r2
   1db20:	d01d      	beq.n	1db5e <i2c_nrfx_twim_transfer+0xda>
		if (concat_next || (msg_buf_used != 0)) {
   1db22:	b385      	cbz	r5, 1db86 <i2c_nrfx_twim_transfer+0x102>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db24:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   1db26:	6862      	ldr	r2, [r4, #4]
   1db28:	f8dd c008 	ldr.w	ip, [sp, #8]
   1db2c:	18a8      	adds	r0, r5, r2
   1db2e:	4560      	cmp	r0, ip
   1db30:	d917      	bls.n	1db62 <i2c_nrfx_twim_transfer+0xde>
				LOG_ERR("Need to use concatenation buffer and "
   1db32:	683b      	ldr	r3, [r7, #0]
   1db34:	2145      	movs	r1, #69	; 0x45
   1db36:	9301      	str	r3, [sp, #4]
   1db38:	484f      	ldr	r0, [pc, #316]	; (1dc78 <i2c_nrfx_twim_transfer+0x1f4>)
   1db3a:	4613      	mov	r3, r2
   1db3c:	f8cd c000 	str.w	ip, [sp]
   1db40:	462a      	mov	r2, r5
   1db42:	f00d ffe4 	bl	2bb0e <z_log_minimal_printk>
				ret = -ENOSPC;
   1db46:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   1db4a:	4640      	mov	r0, r8
   1db4c:	f004 fdda 	bl	22704 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   1db50:	4630      	mov	r0, r6
   1db52:	f008 fe33 	bl	267bc <z_impl_k_sem_give>
}
   1db56:	4620      	mov	r0, r4
   1db58:	b00d      	add	sp, #52	; 0x34
   1db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   1db5e:	2301      	movs	r3, #1
   1db60:	e7e1      	b.n	1db26 <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   1db62:	07c9      	lsls	r1, r1, #31
   1db64:	d406      	bmi.n	1db74 <i2c_nrfx_twim_transfer+0xf0>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1db66:	6821      	ldr	r1, [r4, #0]
   1db68:	eb0a 0005 	add.w	r0, sl, r5
   1db6c:	9305      	str	r3, [sp, #20]
   1db6e:	f010 f826 	bl	2dbbe <memcpy>
   1db72:	9b05      	ldr	r3, [sp, #20]
			msg_buf_used += msgs[i].len;
   1db74:	6862      	ldr	r2, [r4, #4]
   1db76:	4415      	add	r5, r2
   1db78:	b2ad      	uxth	r5, r5
		if (concat_next) {
   1db7a:	2b00      	cmp	r3, #0
   1db7c:	d03a      	beq.n	1dbf4 <i2c_nrfx_twim_transfer+0x170>
		bool concat_next = ((i + 1) < num_msgs)
   1db7e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1db82:	340c      	adds	r4, #12
   1db84:	e7ab      	b.n	1dade <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1db86:	07ca      	lsls	r2, r1, #31
   1db88:	d51d      	bpl.n	1dbc6 <i2c_nrfx_twim_transfer+0x142>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1db8a:	2500      	movs	r5, #0
   1db8c:	6823      	ldr	r3, [r4, #0]
   1db8e:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   1db90:	6863      	ldr	r3, [r4, #4]
   1db92:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1db94:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1db96:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1db98:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1db9c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1dba0:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1dba4:	a907      	add	r1, sp, #28
   1dba6:	bf0c      	ite	eq
   1dba8:	2220      	moveq	r2, #32
   1dbaa:	2200      	movne	r2, #0
   1dbac:	f004 fe2e 	bl	2280c <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   1dbb0:	4b32      	ldr	r3, [pc, #200]	; (1dc7c <i2c_nrfx_twim_transfer+0x1f8>)
   1dbb2:	4298      	cmp	r0, r3
   1dbb4:	d024      	beq.n	1dc00 <i2c_nrfx_twim_transfer+0x17c>
			if (res == NRFX_ERROR_BUSY) {
   1dbb6:	330b      	adds	r3, #11
				ret = -EIO;
   1dbb8:	4298      	cmp	r0, r3
   1dbba:	bf0c      	ite	eq
   1dbbc:	f06f 040f 	mvneq.w	r4, #15
   1dbc0:	f06f 0404 	mvnne.w	r4, #4
   1dbc4:	e7c1      	b.n	1db4a <i2c_nrfx_twim_transfer+0xc6>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1dbc6:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1dbc8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1dbcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1dbd0:	d0db      	beq.n	1db8a <i2c_nrfx_twim_transfer+0x106>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1dbd2:	6862      	ldr	r2, [r4, #4]
   1dbd4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1dbd8:	4293      	cmp	r3, r2
   1dbda:	d207      	bcs.n	1dbec <i2c_nrfx_twim_transfer+0x168>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   1dbdc:	2145      	movs	r1, #69	; 0x45
   1dbde:	683b      	ldr	r3, [r7, #0]
   1dbe0:	4827      	ldr	r0, [pc, #156]	; (1dc80 <i2c_nrfx_twim_transfer+0x1fc>)
   1dbe2:	f00d ff94 	bl	2bb0e <z_log_minimal_printk>
				ret = -EINVAL;
   1dbe6:	f06f 0415 	mvn.w	r4, #21
				break;
   1dbea:	e7ae      	b.n	1db4a <i2c_nrfx_twim_transfer+0xc6>
   1dbec:	4650      	mov	r0, sl
   1dbee:	f00f ffe6 	bl	2dbbe <memcpy>
			msg_buf_used = msgs[i].len;
   1dbf2:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   1dbf4:	2d00      	cmp	r5, #0
   1dbf6:	d0c8      	beq.n	1db8a <i2c_nrfx_twim_transfer+0x106>
			cur_xfer.p_primary_buf = msg_buf;
   1dbf8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   1dbfc:	9508      	str	r5, [sp, #32]
   1dbfe:	e7c9      	b.n	1db94 <i2c_nrfx_twim_transfer+0x110>
	return z_impl_k_sem_take(sem, timeout);
   1dc00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dc04:	2300      	movs	r3, #0
   1dc06:	4658      	mov	r0, fp
   1dc08:	f008 fe12 	bl	26830 <z_impl_k_sem_take>
		if (ret != 0) {
   1dc0c:	b170      	cbz	r0, 1dc2c <i2c_nrfx_twim_transfer+0x1a8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1dc0e:	2145      	movs	r1, #69	; 0x45
   1dc10:	464a      	mov	r2, r9
   1dc12:	481c      	ldr	r0, [pc, #112]	; (1dc84 <i2c_nrfx_twim_transfer+0x200>)
   1dc14:	f00d ff7b 	bl	2bb0e <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   1dc18:	4640      	mov	r0, r8
   1dc1a:	f004 fd73 	bl	22704 <nrfx_twim_disable>
   1dc1e:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   1dc22:	f005 f8df 	bl	22de4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1dc26:	f06f 0404 	mvn.w	r4, #4
			break;
   1dc2a:	e78e      	b.n	1db4a <i2c_nrfx_twim_transfer+0xc6>
		res = dev_data->res;
   1dc2c:	6c72      	ldr	r2, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   1dc2e:	4b13      	ldr	r3, [pc, #76]	; (1dc7c <i2c_nrfx_twim_transfer+0x1f8>)
   1dc30:	429a      	cmp	r2, r3
   1dc32:	d005      	beq.n	1dc40 <i2c_nrfx_twim_transfer+0x1bc>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1dc34:	464b      	mov	r3, r9
   1dc36:	2145      	movs	r1, #69	; 0x45
   1dc38:	4813      	ldr	r0, [pc, #76]	; (1dc88 <i2c_nrfx_twim_transfer+0x204>)
   1dc3a:	f00d ff68 	bl	2bb0e <z_log_minimal_printk>
   1dc3e:	e7f2      	b.n	1dc26 <i2c_nrfx_twim_transfer+0x1a2>
		if ((msgs[i].flags & I2C_MSG_READ)
   1dc40:	7a23      	ldrb	r3, [r4, #8]
   1dc42:	07db      	lsls	r3, r3, #31
   1dc44:	d401      	bmi.n	1dc4a <i2c_nrfx_twim_transfer+0x1c6>
		msg_buf_used = 0;
   1dc46:	2500      	movs	r5, #0
   1dc48:	e799      	b.n	1db7e <i2c_nrfx_twim_transfer+0xfa>
		    && cur_xfer.p_primary_buf == msg_buf) {
   1dc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dc4c:	459a      	cmp	sl, r3
   1dc4e:	d1fa      	bne.n	1dc46 <i2c_nrfx_twim_transfer+0x1c2>
   1dc50:	46a1      	mov	r9, r4
   1dc52:	e007      	b.n	1dc64 <i2c_nrfx_twim_transfer+0x1e0>
				msg_buf_used -= msgs[j].len;
   1dc54:	1aa9      	subs	r1, r5, r2
   1dc56:	b28d      	uxth	r5, r1
   1dc58:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1dc5c:	fa1a f181 	uxtah	r1, sl, r1
   1dc60:	f00f ffad 	bl	2dbbe <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   1dc64:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1dc68:	f1a9 090c 	sub.w	r9, r9, #12
   1dc6c:	4295      	cmp	r5, r2
   1dc6e:	d2f1      	bcs.n	1dc54 <i2c_nrfx_twim_transfer+0x1d0>
   1dc70:	e7e9      	b.n	1dc46 <i2c_nrfx_twim_transfer+0x1c2>
			ret = -ENOTSUP;
   1dc72:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dc76:	e768      	b.n	1db4a <i2c_nrfx_twim_transfer+0xc6>
   1dc78:	0002fce2 	.word	0x0002fce2
   1dc7c:	0bad0000 	.word	0x0bad0000
   1dc80:	0002fd77 	.word	0x0002fd77
   1dc84:	0002fde2 	.word	0x0002fde2
   1dc88:	0002fe11 	.word	0x0002fe11

0001dc8c <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1dc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc90:	2501      	movs	r5, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1dc92:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc94:	7903      	ldrb	r3, [r0, #4]
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1dc96:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc98:	409d      	lsls	r5, r3
   1dc9a:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_data *const data =
   1dc9c:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc9e:	681b      	ldr	r3, [r3, #0]
   1dca0:	421d      	tst	r5, r3
   1dca2:	d10a      	bne.n	1dcba <gpio_pin_set_dt.isra.0+0x2e>
   1dca4:	4914      	ldr	r1, [pc, #80]	; (1dcf8 <gpio_pin_set_dt.isra.0+0x6c>)
   1dca6:	4815      	ldr	r0, [pc, #84]	; (1dcfc <gpio_pin_set_dt.isra.0+0x70>)
   1dca8:	f240 42c3 	movw	r2, #1219	; 0x4c3
   1dcac:	f00d fd7e 	bl	2b7ac <printk>
   1dcb0:	f240 41c3 	movw	r1, #1219	; 0x4c3
   1dcb4:	4810      	ldr	r0, [pc, #64]	; (1dcf8 <gpio_pin_set_dt.isra.0+0x6c>)
   1dcb6:	f00d ff10 	bl	2bada <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dcba:	683b      	ldr	r3, [r7, #0]
   1dcbc:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dcbe:	6863      	ldr	r3, [r4, #4]
   1dcc0:	bf18      	it	ne
   1dcc2:	f086 0601 	eorne.w	r6, r6, #1
   1dcc6:	681b      	ldr	r3, [r3, #0]
   1dcc8:	421d      	tst	r5, r3
   1dcca:	d10a      	bne.n	1dce2 <gpio_pin_set_dt.isra.0+0x56>
   1dccc:	490a      	ldr	r1, [pc, #40]	; (1dcf8 <gpio_pin_set_dt.isra.0+0x6c>)
   1dcce:	480b      	ldr	r0, [pc, #44]	; (1dcfc <gpio_pin_set_dt.isra.0+0x70>)
   1dcd0:	f240 4299 	movw	r2, #1177	; 0x499
   1dcd4:	f00d fd6a 	bl	2b7ac <printk>
   1dcd8:	f240 4199 	movw	r1, #1177	; 0x499
   1dcdc:	4806      	ldr	r0, [pc, #24]	; (1dcf8 <gpio_pin_set_dt.isra.0+0x6c>)
   1dcde:	f00d fefc 	bl	2bada <assert_post_action>
	if (value != 0)	{
   1dce2:	b136      	cbz	r6, 1dcf2 <gpio_pin_set_dt.isra.0+0x66>
	return api->port_set_bits_raw(port, pins);
   1dce4:	68a3      	ldr	r3, [r4, #8]
   1dce6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1dce8:	4629      	mov	r1, r5
   1dcea:	4620      	mov	r0, r4
}
   1dcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1dcf0:	4718      	bx	r3
   1dcf2:	68a3      	ldr	r3, [r4, #8]
   1dcf4:	691b      	ldr	r3, [r3, #16]
   1dcf6:	e7f7      	b.n	1dce8 <gpio_pin_set_dt.isra.0+0x5c>
   1dcf8:	0002fe4f 	.word	0x0002fe4f
   1dcfc:	0002f296 	.word	0x0002f296

0001dd00 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd04:	f8d0 8010 	ldr.w	r8, [r0, #16]
   1dd08:	2200      	movs	r2, #0
   1dd0a:	2101      	movs	r1, #1
   1dd0c:	200b      	movs	r0, #11
   1dd0e:	b085      	sub	sp, #20
   1dd10:	f7fe fa82 	bl	1c218 <z_arm_irq_priority_set>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1dd14:	4e3d      	ldr	r6, [pc, #244]	; (1de0c <spi_3_init+0x10c>)
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1dd16:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1dd1a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1de10 <spi_3_init+0x110>
   1dd1e:	e9d8 3202 	ldrd	r3, r2, [r8, #8]
   1dd22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1dd26:	429c      	cmp	r4, r3
   1dd28:	d304      	bcc.n	1dd34 <spi_3_init+0x34>
   1dd2a:	4640      	mov	r0, r8
   1dd2c:	f00e f938 	bl	2bfa0 <spi_context_unlock_unconditionally>
   1dd30:	2000      	movs	r0, #0
   1dd32:	e00c      	b.n	1dd4e <spi_3_init+0x4e>
		if (!device_is_ready(cs_gpio->port)) {
   1dd34:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1dd36:	f00f fd88 	bl	2d84a <z_device_is_ready>
   1dd3a:	b958      	cbnz	r0, 1dd54 <spi_3_init+0x54>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1dd3c:	6822      	ldr	r2, [r4, #0]
   1dd3e:	4835      	ldr	r0, [pc, #212]	; (1de14 <spi_3_init+0x114>)
   1dd40:	2145      	movs	r1, #69	; 0x45
   1dd42:	7923      	ldrb	r3, [r4, #4]
   1dd44:	6812      	ldr	r2, [r2, #0]
   1dd46:	f00d fee2 	bl	2bb0e <z_log_minimal_printk>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   1dd4a:	f06f 0012 	mvn.w	r0, #18
   1dd4e:	b005      	add	sp, #20
   1dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return gpio_pin_configure(spec->port,
   1dd54:	f8d4 9000 	ldr.w	r9, [r4]
   1dd58:	f894 b004 	ldrb.w	fp, [r4, #4]
				  spec->dt_flags | extra_flags);
   1dd5c:	7965      	ldrb	r5, [r4, #5]
	const struct gpio_driver_api *api =
   1dd5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1dd62:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
   1dd64:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1dd68:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
   1dd6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1dd6e:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1dd70:	f005 0330 	and.w	r3, r5, #48	; 0x30
   1dd74:	2b30      	cmp	r3, #48	; 0x30
   1dd76:	d10a      	bne.n	1dd8e <spi_3_init+0x8e>
   1dd78:	4631      	mov	r1, r6
   1dd7a:	4650      	mov	r0, sl
   1dd7c:	f240 22e9 	movw	r2, #745	; 0x2e9
   1dd80:	f00d fd14 	bl	2b7ac <printk>
   1dd84:	f240 21e9 	movw	r1, #745	; 0x2e9
   1dd88:	4630      	mov	r0, r6
   1dd8a:	f00d fea6 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1dd8e:	f005 0306 	and.w	r3, r5, #6
   1dd92:	2b04      	cmp	r3, #4
   1dd94:	d10a      	bne.n	1ddac <spi_3_init+0xac>
   1dd96:	4631      	mov	r1, r6
   1dd98:	4650      	mov	r0, sl
   1dd9a:	f240 22f1 	movw	r2, #753	; 0x2f1
   1dd9e:	f00d fd05 	bl	2b7ac <printk>
   1dda2:	f240 21f1 	movw	r1, #753	; 0x2f1
   1dda6:	4630      	mov	r0, r6
   1dda8:	f00d fe97 	bl	2bada <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ddac:	2701      	movs	r7, #1
   1ddae:	9a03      	ldr	r2, [sp, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1ddb0:	07e8      	lsls	r0, r5, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ddb2:	6812      	ldr	r2, [r2, #0]
   1ddb4:	fa07 f70b 	lsl.w	r7, r7, fp
	return gpio_pin_configure(spec->port,
   1ddb8:	bf54      	ite	pl
   1ddba:	f445 55b0 	orrpl.w	r5, r5, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1ddbe:	f485 55d0 	eormi.w	r5, r5, #6656	; 0x1a00
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ddc2:	4217      	tst	r7, r2
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1ddc4:	f425 5380 	bic.w	r3, r5, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1ddc8:	d10c      	bne.n	1dde4 <spi_3_init+0xe4>
   1ddca:	f240 3205 	movw	r2, #773	; 0x305
   1ddce:	4631      	mov	r1, r6
   1ddd0:	4650      	mov	r0, sl
   1ddd2:	9303      	str	r3, [sp, #12]
   1ddd4:	f00d fcea 	bl	2b7ac <printk>
   1ddd8:	f240 3105 	movw	r1, #773	; 0x305
   1dddc:	4630      	mov	r0, r6
   1ddde:	f00d fe7c 	bl	2bada <assert_post_action>
   1dde2:	9b03      	ldr	r3, [sp, #12]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dde4:	9a01      	ldr	r2, [sp, #4]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1dde6:	07e9      	lsls	r1, r5, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dde8:	6812      	ldr	r2, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1ddea:	4659      	mov	r1, fp
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ddec:	bf4c      	ite	mi
   1ddee:	4317      	orrmi	r7, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ddf0:	ea22 0707 	bicpl.w	r7, r2, r7
   1ddf4:	9a01      	ldr	r2, [sp, #4]
	return api->pin_configure(port, pin, flags);
   1ddf6:	4648      	mov	r0, r9
   1ddf8:	6017      	str	r7, [r2, #0]
   1ddfa:	9a02      	ldr	r2, [sp, #8]
   1ddfc:	6815      	ldr	r5, [r2, #0]
   1ddfe:	461a      	mov	r2, r3
   1de00:	47a8      	blx	r5
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1de02:	2800      	cmp	r0, #0
   1de04:	dba3      	blt.n	1dd4e <spi_3_init+0x4e>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1de06:	3408      	adds	r4, #8
   1de08:	e789      	b.n	1dd1e <spi_3_init+0x1e>
   1de0a:	bf00      	nop
   1de0c:	0002fe4f 	.word	0x0002fe4f
   1de10:	0002f296 	.word	0x0002f296
   1de14:	0002fe79 	.word	0x0002fe79

0001de18 <transfer_next_chunk>:
{
   1de18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1de1c:	6905      	ldr	r5, [r0, #16]
{
   1de1e:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1de20:	6daf      	ldr	r7, [r5, #88]	; 0x58
		return ctx->rx_len;
   1de22:	6e2c      	ldr	r4, [r5, #96]	; 0x60
	if (!ctx->tx_len) {
   1de24:	b98f      	cbnz	r7, 1de4a <transfer_next_chunk+0x32>
	if (chunk_len > 0) {
   1de26:	2c00      	cmp	r4, #0
   1de28:	d14c      	bne.n	1dec4 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
   1de2a:	2200      	movs	r2, #0
   1de2c:	4628      	mov	r0, r5
   1de2e:	4611      	mov	r1, r2
   1de30:	f00e f894 	bl	2bf5c <_spi_context_cs_control>
	ctx->sync_status = status;
   1de34:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1de36:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1de3a:	f008 fcbf 	bl	267bc <z_impl_k_sem_give>
	dev_data->busy = false;
   1de3e:	2300      	movs	r3, #0
   1de40:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   1de44:	b005      	add	sp, #20
   1de46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (!ctx->rx_len) {
   1de4a:	463e      	mov	r6, r7
   1de4c:	b114      	cbz	r4, 1de54 <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1de4e:	42a7      	cmp	r7, r4
   1de50:	bf28      	it	cs
   1de52:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
   1de54:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = dev->config;
   1de58:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   1de5c:	f1b8 0f00 	cmp.w	r8, #0
   1de60:	d032      	beq.n	1dec8 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1de62:	b38f      	cbz	r7, 1dec8 <transfer_next_chunk+0xb0>
   1de64:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
   1de68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1de6c:	d02c      	beq.n	1dec8 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
   1de6e:	2e08      	cmp	r6, #8
   1de70:	bf28      	it	cs
   1de72:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1de74:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   1de78:	4618      	mov	r0, r3
   1de7a:	4632      	mov	r2, r6
   1de7c:	4641      	mov	r1, r8
   1de7e:	f00f fe9e 	bl	2dbbe <memcpy>
   1de82:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
   1de84:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
   1de88:	9300      	str	r3, [sp, #0]
   1de8a:	4296      	cmp	r6, r2
   1de8c:	bf28      	it	cs
   1de8e:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
   1de90:	66ae      	str	r6, [r5, #104]	; 0x68
   1de92:	f1b8 0f00 	cmp.w	r8, #0
   1de96:	d019      	beq.n	1decc <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1de98:	2f00      	cmp	r7, #0
   1de9a:	bf18      	it	ne
   1de9c:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
   1de9e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dea0:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dea2:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dea4:	b1a3      	cbz	r3, 1ded0 <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dea6:	2c00      	cmp	r4, #0
   1dea8:	bf18      	it	ne
   1deaa:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1deac:	2200      	movs	r2, #0
   1deae:	4669      	mov	r1, sp
   1deb0:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1deb2:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1deb4:	f004 fa5a 	bl	2236c <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1deb8:	4b06      	ldr	r3, [pc, #24]	; (1ded4 <transfer_next_chunk+0xbc>)
   1deba:	4298      	cmp	r0, r3
   1debc:	d0c2      	beq.n	1de44 <transfer_next_chunk+0x2c>
			error = -EIO;
   1debe:	f06f 0404 	mvn.w	r4, #4
   1dec2:	e7b2      	b.n	1de2a <transfer_next_chunk+0x12>
   1dec4:	4626      	mov	r6, r4
   1dec6:	e7c5      	b.n	1de54 <transfer_next_chunk+0x3c>
   1dec8:	4643      	mov	r3, r8
   1deca:	e7db      	b.n	1de84 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1decc:	4647      	mov	r7, r8
   1dece:	e7e6      	b.n	1de9e <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1ded0:	461c      	mov	r4, r3
   1ded2:	e7eb      	b.n	1deac <transfer_next_chunk+0x94>
   1ded4:	0bad0000 	.word	0x0bad0000

0001ded8 <event_handler>:
{
   1ded8:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1deda:	7803      	ldrb	r3, [r0, #0]
{
   1dedc:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1dede:	2b00      	cmp	r3, #0
   1dee0:	d147      	bne.n	1df72 <event_handler+0x9a>
	if (!ctx->tx_len) {
   1dee2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1dee4:	b133      	cbz	r3, 1def4 <event_handler+0x1c>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dee6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   1dee8:	429a      	cmp	r2, r3
   1deea:	d911      	bls.n	1df10 <event_handler+0x38>
		LOG_ERR("Update exceeds current buffer");
   1deec:	2145      	movs	r1, #69	; 0x45
   1deee:	4821      	ldr	r0, [pc, #132]	; (1df74 <event_handler+0x9c>)
   1def0:	f00d fe0d 	bl	2bb0e <z_log_minimal_printk>
	if (!ctx->rx_len) {
   1def4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1def6:	b133      	cbz	r3, 1df06 <event_handler+0x2e>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1def8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   1defa:	429a      	cmp	r2, r3
   1defc:	d920      	bls.n	1df40 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
   1defe:	2145      	movs	r1, #69	; 0x45
   1df00:	481c      	ldr	r0, [pc, #112]	; (1df74 <event_handler+0x9c>)
   1df02:	f00d fe04 	bl	2bb0e <z_log_minimal_printk>
		transfer_next_chunk(dev_data->dev);
   1df06:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1df08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1df0c:	f7ff bf84 	b.w	1de18 <transfer_next_chunk>
	ctx->tx_len -= len;
   1df10:	1a9b      	subs	r3, r3, r2
   1df12:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1df14:	b973      	cbnz	r3, 1df34 <event_handler+0x5c>
		++ctx->current_tx;
   1df16:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1df18:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1df1c:	3308      	adds	r3, #8
   1df1e:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1df20:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1df22:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1df26:	3b01      	subs	r3, #1
   1df28:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1df2a:	3148      	adds	r1, #72	; 0x48
   1df2c:	f00e f805 	bl	2bf3a <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1df30:	6560      	str	r0, [r4, #84]	; 0x54
   1df32:	e7df      	b.n	1def4 <event_handler+0x1c>
	} else if (ctx->tx_buf) {
   1df34:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1df36:	2b00      	cmp	r3, #0
   1df38:	d0dc      	beq.n	1def4 <event_handler+0x1c>
		ctx->tx_buf += dfs * len;
   1df3a:	4413      	add	r3, r2
   1df3c:	654b      	str	r3, [r1, #84]	; 0x54
   1df3e:	e7d9      	b.n	1def4 <event_handler+0x1c>
	ctx->rx_len -= len;
   1df40:	1a9b      	subs	r3, r3, r2
   1df42:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1df44:	b97b      	cbnz	r3, 1df66 <event_handler+0x8e>
		++ctx->current_rx;
   1df46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1df48:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1df4c:	3308      	adds	r3, #8
   1df4e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1df50:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1df52:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1df56:	3b01      	subs	r3, #1
   1df58:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1df5a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1df5e:	f00d ffec 	bl	2bf3a <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1df62:	65e0      	str	r0, [r4, #92]	; 0x5c
   1df64:	e7cf      	b.n	1df06 <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   1df66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1df68:	2b00      	cmp	r3, #0
   1df6a:	d0cc      	beq.n	1df06 <event_handler+0x2e>
		ctx->rx_buf += dfs * len;
   1df6c:	4413      	add	r3, r2
   1df6e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1df70:	e7c9      	b.n	1df06 <event_handler+0x2e>
}
   1df72:	bd10      	pop	{r4, pc}
   1df74:	0002fea2 	.word	0x0002fea2

0001df78 <spi_nrfx_transceive>:
{
   1df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df7c:	b08b      	sub	sp, #44	; 0x2c
   1df7e:	9301      	str	r3, [sp, #4]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1df80:	888b      	ldrh	r3, [r1, #4]
   1df82:	4680      	mov	r8, r0
   1df84:	049f      	lsls	r7, r3, #18
   1df86:	460e      	mov	r6, r1
   1df88:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   1df8a:	6904      	ldr	r4, [r0, #16]
   1df8c:	d42f      	bmi.n	1dfee <spi_nrfx_transceive+0x76>
	return z_impl_k_sem_take(sem, timeout);
   1df8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1df92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1df96:	f104 0010 	add.w	r0, r4, #16
   1df9a:	f008 fc49 	bl	26830 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1df9e:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1dfa0:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1dfa4:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1dfa8:	f8db 300c 	ldr.w	r3, [fp, #12]
   1dfac:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1dfae:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   1dfb2:	9302      	str	r3, [sp, #8]
   1dfb4:	b123      	cbz	r3, 1dfc0 <spi_nrfx_transceive+0x48>
   1dfb6:	f8da 3000 	ldr.w	r3, [sl]
   1dfba:	429e      	cmp	r6, r3
   1dfbc:	f000 80a5 	beq.w	1e10a <spi_nrfx_transceive+0x192>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1dfc0:	88b7      	ldrh	r7, [r6, #4]
   1dfc2:	053d      	lsls	r5, r7, #20
   1dfc4:	d51a      	bpl.n	1dffc <spi_nrfx_transceive+0x84>
		LOG_ERR("Half-duplex not supported");
   1dfc6:	2145      	movs	r1, #69	; 0x45
   1dfc8:	4882      	ldr	r0, [pc, #520]	; (1e1d4 <spi_nrfx_transceive+0x25c>)
   1dfca:	f00d fda0 	bl	2bb0e <z_log_minimal_printk>
		return -ENOTSUP;
   1dfce:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1dfd2:	6823      	ldr	r3, [r4, #0]
   1dfd4:	889b      	ldrh	r3, [r3, #4]
   1dfd6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1dfda:	d104      	bne.n	1dfe6 <spi_nrfx_transceive+0x6e>
		ctx->owner = NULL;
   1dfdc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1dfde:	f104 0010 	add.w	r0, r4, #16
   1dfe2:	f008 fbeb 	bl	267bc <z_impl_k_sem_give>
}
   1dfe6:	4628      	mov	r0, r5
   1dfe8:	b00b      	add	sp, #44	; 0x2c
   1dfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dfee:	69a3      	ldr	r3, [r4, #24]
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	d1cc      	bne.n	1df8e <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1dff4:	6863      	ldr	r3, [r4, #4]
   1dff6:	4299      	cmp	r1, r3
   1dff8:	d1c9      	bne.n	1df8e <spi_nrfx_transceive+0x16>
   1dffa:	e7d1      	b.n	1dfa0 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1dffc:	07f8      	lsls	r0, r7, #31
   1dffe:	d508      	bpl.n	1e012 <spi_nrfx_transceive+0x9a>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1e000:	2145      	movs	r1, #69	; 0x45
   1e002:	f8d8 2000 	ldr.w	r2, [r8]
   1e006:	4874      	ldr	r0, [pc, #464]	; (1e1d8 <spi_nrfx_transceive+0x260>)
   1e008:	f00d fd81 	bl	2bb0e <z_log_minimal_printk>
		return -EINVAL;
   1e00c:	f06f 0515 	mvn.w	r5, #21
   1e010:	e7df      	b.n	1dfd2 <spi_nrfx_transceive+0x5a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1e012:	0739      	lsls	r1, r7, #28
   1e014:	d504      	bpl.n	1e020 <spi_nrfx_transceive+0xa8>
		LOG_ERR("Loopback mode is not supported");
   1e016:	2145      	movs	r1, #69	; 0x45
   1e018:	4870      	ldr	r0, [pc, #448]	; (1e1dc <spi_nrfx_transceive+0x264>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e01a:	f00d fd78 	bl	2bb0e <z_log_minimal_printk>
   1e01e:	e7f5      	b.n	1e00c <spi_nrfx_transceive+0x94>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1e020:	f3c7 1345 	ubfx	r3, r7, #5, #6
   1e024:	2b08      	cmp	r3, #8
   1e026:	d002      	beq.n	1e02e <spi_nrfx_transceive+0xb6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1e028:	2145      	movs	r1, #69	; 0x45
   1e02a:	486d      	ldr	r0, [pc, #436]	; (1e1e0 <spi_nrfx_transceive+0x268>)
   1e02c:	e7f5      	b.n	1e01a <spi_nrfx_transceive+0xa2>
	if (spi_cfg->frequency < 125000) {
   1e02e:	6835      	ldr	r5, [r6, #0]
   1e030:	4b6c      	ldr	r3, [pc, #432]	; (1e1e4 <spi_nrfx_transceive+0x26c>)
   1e032:	429d      	cmp	r5, r3
   1e034:	d802      	bhi.n	1e03c <spi_nrfx_transceive+0xc4>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1e036:	2145      	movs	r1, #69	; 0x45
   1e038:	486b      	ldr	r0, [pc, #428]	; (1e1e8 <spi_nrfx_transceive+0x270>)
   1e03a:	e7ee      	b.n	1e01a <spi_nrfx_transceive+0xa2>
	config = dev_config->def_config;
   1e03c:	f10d 0c14 	add.w	ip, sp, #20
   1e040:	f10b 0e10 	add.w	lr, fp, #16
   1e044:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1e048:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1e04c:	f8de 3000 	ldr.w	r3, [lr]
   1e050:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e054:	9b03      	ldr	r3, [sp, #12]
   1e056:	42ab      	cmp	r3, r5
   1e058:	bf28      	it	cs
   1e05a:	462b      	movcs	r3, r5
   1e05c:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1e05e:	4b63      	ldr	r3, [pc, #396]	; (1e1ec <spi_nrfx_transceive+0x274>)
   1e060:	429d      	cmp	r5, r3
   1e062:	d93a      	bls.n	1e0da <spi_nrfx_transceive+0x162>
	} else if (frequency < 500000) {
   1e064:	4b62      	ldr	r3, [pc, #392]	; (1e1f0 <spi_nrfx_transceive+0x278>)
   1e066:	429d      	cmp	r5, r3
   1e068:	d93a      	bls.n	1e0e0 <spi_nrfx_transceive+0x168>
	} else if (frequency < 1000000) {
   1e06a:	4b62      	ldr	r3, [pc, #392]	; (1e1f4 <spi_nrfx_transceive+0x27c>)
   1e06c:	429d      	cmp	r5, r3
   1e06e:	d93a      	bls.n	1e0e6 <spi_nrfx_transceive+0x16e>
	} else if (frequency < 2000000) {
   1e070:	4b61      	ldr	r3, [pc, #388]	; (1e1f8 <spi_nrfx_transceive+0x280>)
   1e072:	429d      	cmp	r5, r3
   1e074:	d93a      	bls.n	1e0ec <spi_nrfx_transceive+0x174>
	} else if (frequency < 4000000) {
   1e076:	4b61      	ldr	r3, [pc, #388]	; (1e1fc <spi_nrfx_transceive+0x284>)
   1e078:	429d      	cmp	r5, r3
   1e07a:	d93a      	bls.n	1e0f2 <spi_nrfx_transceive+0x17a>
		return NRF_SPIM_FREQ_8M;
   1e07c:	4b60      	ldr	r3, [pc, #384]	; (1e200 <spi_nrfx_transceive+0x288>)
   1e07e:	429d      	cmp	r5, r3
   1e080:	bf34      	ite	cc
   1e082:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   1e086:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e08a:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1e08c:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1e08e:	f007 0304 	and.w	r3, r7, #4
   1e092:	d531      	bpl.n	1e0f8 <spi_nrfx_transceive+0x180>
			return NRF_SPIM_MODE_2;
   1e094:	2b00      	cmp	r3, #0
   1e096:	bf14      	ite	ne
   1e098:	2303      	movne	r3, #3
   1e09a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1e09c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
   1e0a0:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
   1e0a2:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1e0a6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	if (dev_data->initialized) {
   1e0aa:	b12b      	cbz	r3, 1e0b8 <spi_nrfx_transceive+0x140>
		nrfx_spim_uninit(&dev_config->spim);
   1e0ac:	4658      	mov	r0, fp
   1e0ae:	f004 f903 	bl	222b8 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1e0b2:	2300      	movs	r3, #0
   1e0b4:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1e0b8:	4653      	mov	r3, sl
   1e0ba:	4a52      	ldr	r2, [pc, #328]	; (1e204 <spi_nrfx_transceive+0x28c>)
   1e0bc:	4658      	mov	r0, fp
   1e0be:	a905      	add	r1, sp, #20
   1e0c0:	f004 f832 	bl	22128 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1e0c4:	4b50      	ldr	r3, [pc, #320]	; (1e208 <spi_nrfx_transceive+0x290>)
	result = nrfx_spim_init(&dev_config->spim, &config,
   1e0c6:	4602      	mov	r2, r0
	if (result != NRFX_SUCCESS) {
   1e0c8:	4298      	cmp	r0, r3
   1e0ca:	d019      	beq.n	1e100 <spi_nrfx_transceive+0x188>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1e0cc:	2145      	movs	r1, #69	; 0x45
   1e0ce:	484f      	ldr	r0, [pc, #316]	; (1e20c <spi_nrfx_transceive+0x294>)
   1e0d0:	f00d fd1d 	bl	2bb0e <z_log_minimal_printk>
		return -EIO;
   1e0d4:	f06f 0504 	mvn.w	r5, #4
   1e0d8:	e77b      	b.n	1dfd2 <spi_nrfx_transceive+0x5a>
		return NRF_SPIM_FREQ_125K;
   1e0da:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1e0de:	e7d4      	b.n	1e08a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_250K;
   1e0e0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1e0e4:	e7d1      	b.n	1e08a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_500K;
   1e0e6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1e0ea:	e7ce      	b.n	1e08a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_1M;
   1e0ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1e0f0:	e7cb      	b.n	1e08a <spi_nrfx_transceive+0x112>
		return NRF_SPIM_FREQ_2M;
   1e0f2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1e0f6:	e7c8      	b.n	1e08a <spi_nrfx_transceive+0x112>
			return NRF_SPIM_MODE_0;
   1e0f8:	3b00      	subs	r3, #0
   1e0fa:	bf18      	it	ne
   1e0fc:	2301      	movne	r3, #1
   1e0fe:	e7cd      	b.n	1e09c <spi_nrfx_transceive+0x124>
	dev_data->initialized = true;
   1e100:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1e102:	f8ca 6000 	str.w	r6, [sl]
	dev_data->initialized = true;
   1e106:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   1e10a:	2301      	movs	r3, #1
   1e10c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e110:	f1b9 0f00 	cmp.w	r9, #0
   1e114:	d14c      	bne.n	1e1b0 <spi_nrfx_transceive+0x238>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e116:	464a      	mov	r2, r9
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e118:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e11c:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1e11e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1e122:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1e126:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1e12a:	f00d ff06 	bl	2bf3a <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e12e:	9b01      	ldr	r3, [sp, #4]
	ctx->tx_buf = (const uint8_t *)
   1e130:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e132:	2b00      	cmp	r3, #0
   1e134:	d144      	bne.n	1e1c0 <spi_nrfx_transceive+0x248>
   1e136:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e138:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1e13a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1e13e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1e142:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1e146:	f00d fef8 	bl	2bf3a <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1e14a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1e14c:	2101      	movs	r1, #1
   1e14e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1e150:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1e152:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1e154:	4620      	mov	r0, r4
   1e156:	f00d ff01 	bl	2bf5c <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e15a:	4640      	mov	r0, r8
   1e15c:	f7ff fe5c 	bl	1de18 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e160:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e162:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1e164:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e166:	429d      	cmp	r5, r3
   1e168:	bf38      	it	cc
   1e16a:	461d      	movcc	r5, r3
   1e16c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1e170:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1e172:	f857 3b28 	ldr.w	r3, [r7], #40
			return ((t * to_hz + off) / from_hz);
   1e176:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1e17a:	681b      	ldr	r3, [r3, #0]
   1e17c:	4631      	mov	r1, r6
   1e17e:	fbb5 f5f3 	udiv	r5, r5, r3
   1e182:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1e186:	35c8      	adds	r5, #200	; 0xc8
   1e188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e18c:	2300      	movs	r3, #0
   1e18e:	fbe5 010c 	umlal	r0, r1, r5, ip
   1e192:	f7fa ff85 	bl	190a0 <__aeabi_uldivmod>
   1e196:	4602      	mov	r2, r0
   1e198:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e19a:	4638      	mov	r0, r7
   1e19c:	f008 fb48 	bl	26830 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1e1a0:	b1b0      	cbz	r0, 1e1d0 <spi_nrfx_transceive+0x258>
		LOG_ERR("Timeout waiting for transfer complete");
   1e1a2:	2145      	movs	r1, #69	; 0x45
   1e1a4:	481a      	ldr	r0, [pc, #104]	; (1e210 <spi_nrfx_transceive+0x298>)
   1e1a6:	f00d fcb2 	bl	2bb0e <z_log_minimal_printk>
		return -ETIMEDOUT;
   1e1aa:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1e1ae:	e710      	b.n	1dfd2 <spi_nrfx_transceive+0x5a>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1e1b0:	f8d9 2000 	ldr.w	r2, [r9]
   1e1b4:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1e1b6:	2a00      	cmp	r2, #0
   1e1b8:	d0b0      	beq.n	1e11c <spi_nrfx_transceive+0x1a4>
   1e1ba:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e1be:	e7ad      	b.n	1e11c <spi_nrfx_transceive+0x1a4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1e1c0:	9b01      	ldr	r3, [sp, #4]
   1e1c2:	681b      	ldr	r3, [r3, #0]
   1e1c4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1e1c6:	2b00      	cmp	r3, #0
   1e1c8:	d0b6      	beq.n	1e138 <spi_nrfx_transceive+0x1c0>
   1e1ca:	9b01      	ldr	r3, [sp, #4]
   1e1cc:	685b      	ldr	r3, [r3, #4]
   1e1ce:	e7b3      	b.n	1e138 <spi_nrfx_transceive+0x1c0>
	status = ctx->sync_status;
   1e1d0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1e1d2:	e6fe      	b.n	1dfd2 <spi_nrfx_transceive+0x5a>
   1e1d4:	0002fec5 	.word	0x0002fec5
   1e1d8:	0002fee4 	.word	0x0002fee4
   1e1dc:	0002ff0b 	.word	0x0002ff0b
   1e1e0:	0002ff2f 	.word	0x0002ff2f
   1e1e4:	0001e847 	.word	0x0001e847
   1e1e8:	0002ff63 	.word	0x0002ff63
   1e1ec:	0003d08f 	.word	0x0003d08f
   1e1f0:	0007a11f 	.word	0x0007a11f
   1e1f4:	000f423f 	.word	0x000f423f
   1e1f8:	001e847f 	.word	0x001e847f
   1e1fc:	003d08ff 	.word	0x003d08ff
   1e200:	007a1200 	.word	0x007a1200
   1e204:	0001ded9 	.word	0x0001ded9
   1e208:	0bad0000 	.word	0x0bad0000
   1e20c:	0002ff99 	.word	0x0002ff99
   1e210:	0002ffc5 	.word	0x0002ffc5

0001e214 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1e214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e216:	460f      	mov	r7, r1
   1e218:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1e21a:	b940      	cbnz	r0, 1e22e <entropy_cc3xx_rng_get_entropy+0x1a>
   1e21c:	4918      	ldr	r1, [pc, #96]	; (1e280 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e21e:	4819      	ldr	r0, [pc, #100]	; (1e284 <entropy_cc3xx_rng_get_entropy+0x70>)
   1e220:	2220      	movs	r2, #32
   1e222:	f00d fac3 	bl	2b7ac <printk>
   1e226:	2120      	movs	r1, #32
   1e228:	4815      	ldr	r0, [pc, #84]	; (1e280 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e22a:	f00d fc56 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e22e:	b947      	cbnz	r7, 1e242 <entropy_cc3xx_rng_get_entropy+0x2e>
   1e230:	4913      	ldr	r1, [pc, #76]	; (1e280 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e232:	4814      	ldr	r0, [pc, #80]	; (1e284 <entropy_cc3xx_rng_get_entropy+0x70>)
   1e234:	2221      	movs	r2, #33	; 0x21
   1e236:	f00d fab9 	bl	2b7ac <printk>
   1e23a:	2121      	movs	r1, #33	; 0x21
   1e23c:	4810      	ldr	r0, [pc, #64]	; (1e280 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1e23e:	f00d fc4c 	bl	2bada <assert_post_action>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e242:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1e246:	2400      	movs	r4, #0
	while (offset < length) {
   1e248:	42a6      	cmp	r6, r4
   1e24a:	d803      	bhi.n	1e254 <entropy_cc3xx_rng_get_entropy+0x40>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1e24c:	d116      	bne.n	1e27c <entropy_cc3xx_rng_get_entropy+0x68>
		err = 0;
   1e24e:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1e250:	b003      	add	sp, #12
   1e252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1e254:	1b33      	subs	r3, r6, r4
   1e256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e25a:	bf38      	it	cc
   1e25c:	461d      	movcc	r5, r3
		ret = spm_request_random_number(buffer + offset,
   1e25e:	aa01      	add	r2, sp, #4
   1e260:	4629      	mov	r1, r5
   1e262:	1938      	adds	r0, r7, r4
   1e264:	f00d fd74 	bl	2bd50 <spm_request_random_number>
		if (ret != 0) {
   1e268:	2800      	cmp	r0, #0
   1e26a:	d1f1      	bne.n	1e250 <entropy_cc3xx_rng_get_entropy+0x3c>
		if (olen != chunk_size) {
   1e26c:	9b01      	ldr	r3, [sp, #4]
   1e26e:	42ab      	cmp	r3, r5
   1e270:	d101      	bne.n	1e276 <entropy_cc3xx_rng_get_entropy+0x62>
		offset += chunk_size;
   1e272:	442c      	add	r4, r5
   1e274:	e7e8      	b.n	1e248 <entropy_cc3xx_rng_get_entropy+0x34>
			return -EINVAL;
   1e276:	f06f 0015 	mvn.w	r0, #21
   1e27a:	e7e9      	b.n	1e250 <entropy_cc3xx_rng_get_entropy+0x3c>
	int err = EINVAL;
   1e27c:	2016      	movs	r0, #22
   1e27e:	e7e7      	b.n	1e250 <entropy_cc3xx_rng_get_entropy+0x3c>
   1e280:	00030004 	.word	0x00030004
   1e284:	0002f296 	.word	0x0002f296

0001e288 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e288:	2301      	movs	r3, #1
   1e28a:	4083      	lsls	r3, r0
{
   1e28c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e28e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e290:	4a0c      	ldr	r2, [pc, #48]	; (1e2c4 <compare_int_lock+0x3c>)
   1e292:	e8d2 1fef 	ldaex	r1, [r2]
   1e296:	ea01 0c04 	and.w	ip, r1, r4
   1e29a:	e8c2 cfee 	stlex	lr, ip, [r2]
   1e29e:	f1be 0f00 	cmp.w	lr, #0
   1e2a2:	d1f6      	bne.n	1e292 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e2a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e2a8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e2ac:	4a06      	ldr	r2, [pc, #24]	; (1e2c8 <compare_int_lock+0x40>)
   1e2ae:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   1e2b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e2b6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e2ba:	420b      	tst	r3, r1
}
   1e2bc:	bf14      	ite	ne
   1e2be:	2001      	movne	r0, #1
   1e2c0:	2000      	moveq	r0, #0
   1e2c2:	bd10      	pop	{r4, pc}
   1e2c4:	2000cf94 	.word	0x2000cf94
   1e2c8:	40015000 	.word	0x40015000

0001e2cc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e2cc:	4919      	ldr	r1, [pc, #100]	; (1e334 <sys_clock_timeout_handler+0x68>)
{
   1e2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2d0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e2d2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e2d6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e2d8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e2dc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e2e0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e2e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e2e6:	d222      	bcs.n	1e32e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e2e8:	4b13      	ldr	r3, [pc, #76]	; (1e338 <sys_clock_timeout_handler+0x6c>)
   1e2ea:	681b      	ldr	r3, [r3, #0]
   1e2ec:	0a1a      	lsrs	r2, r3, #8
   1e2ee:	061b      	lsls	r3, r3, #24
   1e2f0:	195e      	adds	r6, r3, r5
   1e2f2:	4b12      	ldr	r3, [pc, #72]	; (1e33c <sys_clock_timeout_handler+0x70>)
   1e2f4:	f142 0700 	adc.w	r7, r2, #0
   1e2f8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1e2fc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e2fe:	f009 ffcb 	bl	28298 <sys_clock_announce>
    return p_reg->CC[ch];
   1e302:	00a3      	lsls	r3, r4, #2
   1e304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e308:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1e30c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e310:	42aa      	cmp	r2, r5
   1e312:	d10b      	bne.n	1e32c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1e314:	b91e      	cbnz	r6, 1e31e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1e316:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e31a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e31e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e322:	4b07      	ldr	r3, [pc, #28]	; (1e340 <sys_clock_timeout_handler+0x74>)
   1e324:	fa00 f404 	lsl.w	r4, r0, r4
   1e328:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1e32e:	2600      	movs	r6, #0
   1e330:	e7e5      	b.n	1e2fe <sys_clock_timeout_handler+0x32>
   1e332:	bf00      	nop
   1e334:	2000cb20 	.word	0x2000cb20
   1e338:	2000cf98 	.word	0x2000cf98
   1e33c:	2000cb08 	.word	0x2000cb08
   1e340:	40015000 	.word	0x40015000

0001e344 <compare_int_unlock>:
	if (key) {
   1e344:	b1e1      	cbz	r1, 1e380 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   1e346:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e348:	4a0e      	ldr	r2, [pc, #56]	; (1e384 <compare_int_unlock+0x40>)
   1e34a:	4083      	lsls	r3, r0
   1e34c:	e8d2 1fef 	ldaex	r1, [r2]
   1e350:	4319      	orrs	r1, r3
   1e352:	e8c2 1fec 	stlex	ip, r1, [r2]
   1e356:	f1bc 0f00 	cmp.w	ip, #0
   1e35a:	d1f7      	bne.n	1e34c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e35c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e360:	4a09      	ldr	r2, [pc, #36]	; (1e388 <compare_int_unlock+0x44>)
   1e362:	4083      	lsls	r3, r0
   1e364:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e368:	4b08      	ldr	r3, [pc, #32]	; (1e38c <compare_int_unlock+0x48>)
   1e36a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e36e:	fa23 f000 	lsr.w	r0, r3, r0
   1e372:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e374:	bf42      	ittt	mi
   1e376:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e37a:	4b05      	ldrmi	r3, [pc, #20]	; (1e390 <compare_int_unlock+0x4c>)
   1e37c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e380:	4770      	bx	lr
   1e382:	bf00      	nop
   1e384:	2000cf94 	.word	0x2000cf94
   1e388:	40015000 	.word	0x40015000
   1e38c:	2000cf90 	.word	0x2000cf90
   1e390:	e000e100 	.word	0xe000e100

0001e394 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e394:	4b0d      	ldr	r3, [pc, #52]	; (1e3cc <z_nrf_rtc_timer_read+0x38>)
   1e396:	6818      	ldr	r0, [r3, #0]
   1e398:	0a01      	lsrs	r1, r0, #8
   1e39a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e39c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e3a0:	4b0b      	ldr	r3, [pc, #44]	; (1e3d0 <z_nrf_rtc_timer_read+0x3c>)
   1e3a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e3a6:	1818      	adds	r0, r3, r0
   1e3a8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e3ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e3b0:	d20a      	bcs.n	1e3c8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e3b2:	4b08      	ldr	r3, [pc, #32]	; (1e3d4 <z_nrf_rtc_timer_read+0x40>)
   1e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3b8:	4290      	cmp	r0, r2
   1e3ba:	eb71 0303 	sbcs.w	r3, r1, r3
   1e3be:	d203      	bcs.n	1e3c8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e3c0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e3c4:	f141 0100 	adc.w	r1, r1, #0
}
   1e3c8:	4770      	bx	lr
   1e3ca:	bf00      	nop
   1e3cc:	2000cf98 	.word	0x2000cf98
   1e3d0:	40015000 	.word	0x40015000
   1e3d4:	2000cb08 	.word	0x2000cb08

0001e3d8 <compare_set>:
{
   1e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3dc:	b085      	sub	sp, #20
   1e3de:	4616      	mov	r6, r2
   1e3e0:	4698      	mov	r8, r3
   1e3e2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1e3e4:	f7ff ff50 	bl	1e288 <compare_int_lock>
   1e3e8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e3ea:	f7ff ffd3 	bl	1e394 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e3ee:	42b0      	cmp	r0, r6
   1e3f0:	eb71 0308 	sbcs.w	r3, r1, r8
   1e3f4:	d276      	bcs.n	1e4e4 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e3f6:	4b43      	ldr	r3, [pc, #268]	; (1e504 <compare_set+0x12c>)
   1e3f8:	1a30      	subs	r0, r6, r0
   1e3fa:	eb68 0101 	sbc.w	r1, r8, r1
   1e3fe:	4298      	cmp	r0, r3
   1e400:	f171 0300 	sbcs.w	r3, r1, #0
   1e404:	d27b      	bcs.n	1e4fe <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
   1e406:	4b40      	ldr	r3, [pc, #256]	; (1e508 <compare_set+0x130>)
   1e408:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1e40c:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1e410:	45d8      	cmp	r8, fp
   1e412:	bf08      	it	eq
   1e414:	4556      	cmpeq	r6, sl
   1e416:	d050      	beq.n	1e4ba <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1e41c:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e420:	4614      	mov	r4, r2
   1e422:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e426:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1e42a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1e42e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e430:	40ab      	lsls	r3, r5
   1e432:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e436:	b2bf      	uxth	r7, r7
   1e438:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   1e43c:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   1e43e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e442:	4b32      	ldr	r3, [pc, #200]	; (1e50c <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e444:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   1e448:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e44c:	1a40      	subs	r0, r0, r1
   1e44e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e452:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e456:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e458:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e45c:	d107      	bne.n	1e46e <compare_set+0x96>
   1e45e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1e462:	2013      	movs	r0, #19
   1e464:	f00f faaa 	bl	2d9bc <z_impl_k_busy_wait>
   1e468:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1e46c:	4b27      	ldr	r3, [pc, #156]	; (1e50c <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e46e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1e472:	eba4 000c 	sub.w	r0, r4, ip
   1e476:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1e47a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e47e:	bf88      	it	hi
   1e480:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e482:	2000      	movs	r0, #0
   1e484:	6038      	str	r0, [r7, #0]
   1e486:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1e488:	9801      	ldr	r0, [sp, #4]
   1e48a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e48e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e492:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e496:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e49a:	4281      	cmp	r1, r0
   1e49c:	d006      	beq.n	1e4ac <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   1e49e:	1a20      	subs	r0, r4, r0
   1e4a0:	3802      	subs	r0, #2
   1e4a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e4a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e4aa:	d819      	bhi.n	1e4e0 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
   1e4ac:	1aa4      	subs	r4, r4, r2
   1e4ae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e4b2:	eb14 0a06 	adds.w	sl, r4, r6
   1e4b6:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   1e4ba:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1e4bc:	4912      	ldr	r1, [pc, #72]	; (1e508 <compare_set+0x130>)
	cc_data[chan].callback = handler;
   1e4be:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e4c0:	012b      	lsls	r3, r5, #4
   1e4c2:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   1e4c6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   1e4c8:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   1e4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e4ce:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e4d0:	4628      	mov	r0, r5
   1e4d2:	9900      	ldr	r1, [sp, #0]
   1e4d4:	f7ff ff36 	bl	1e344 <compare_int_unlock>
}
   1e4d8:	4620      	mov	r0, r4
   1e4da:	b005      	add	sp, #20
   1e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e0:	4620      	mov	r0, r4
   1e4e2:	e7b1      	b.n	1e448 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
   1e4e4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e4e6:	4a0a      	ldr	r2, [pc, #40]	; (1e510 <compare_set+0x138>)
   1e4e8:	40ab      	lsls	r3, r5
   1e4ea:	e8d2 1fef 	ldaex	r1, [r2]
   1e4ee:	4319      	orrs	r1, r3
   1e4f0:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1e4f4:	2800      	cmp	r0, #0
   1e4f6:	d1f8      	bne.n	1e4ea <compare_set+0x112>
   1e4f8:	46b2      	mov	sl, r6
   1e4fa:	46c3      	mov	fp, r8
   1e4fc:	e7dd      	b.n	1e4ba <compare_set+0xe2>
			return -EINVAL;
   1e4fe:	f06f 0415 	mvn.w	r4, #21
   1e502:	e7e5      	b.n	1e4d0 <compare_set+0xf8>
   1e504:	01000001 	.word	0x01000001
   1e508:	2000cb10 	.word	0x2000cb10
   1e50c:	40015000 	.word	0x40015000
   1e510:	2000cf90 	.word	0x2000cf90

0001e514 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e514:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   1e516:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e51c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e520:	4d16      	ldr	r5, [pc, #88]	; (1e57c <sys_clock_driver_init+0x68>)
   1e522:	4b17      	ldr	r3, [pc, #92]	; (1e580 <sys_clock_driver_init+0x6c>)
   1e524:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1e528:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e52c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e530:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e536:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1e53a:	4b12      	ldr	r3, [pc, #72]	; (1e584 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e53c:	2101      	movs	r1, #1
   1e53e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1e542:	2015      	movs	r0, #21
   1e544:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e548:	4622      	mov	r2, r4
   1e54a:	f7fd fe65 	bl	1c218 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e54e:	2015      	movs	r0, #21
   1e550:	f7fd fe30 	bl	1c1b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e554:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e556:	4a0c      	ldr	r2, [pc, #48]	; (1e588 <sys_clock_driver_init+0x74>)
   1e558:	60ab      	str	r3, [r5, #8]
   1e55a:	602b      	str	r3, [r5, #0]
   1e55c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e55e:	4b0b      	ldr	r3, [pc, #44]	; (1e58c <sys_clock_driver_init+0x78>)
   1e560:	4a0b      	ldr	r2, [pc, #44]	; (1e590 <sys_clock_driver_init+0x7c>)
   1e562:	9300      	str	r3, [sp, #0]
   1e564:	4620      	mov	r0, r4
   1e566:	2300      	movs	r3, #0
   1e568:	9401      	str	r4, [sp, #4]
   1e56a:	f7ff ff35 	bl	1e3d8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e56e:	4630      	mov	r0, r6
   1e570:	f7fe ff78 	bl	1d464 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e574:	4620      	mov	r0, r4
   1e576:	b002      	add	sp, #8
   1e578:	bd70      	pop	{r4, r5, r6, pc}
   1e57a:	bf00      	nop
   1e57c:	40015000 	.word	0x40015000
   1e580:	2000cb10 	.word	0x2000cb10
   1e584:	e000e100 	.word	0xe000e100
   1e588:	2000cf94 	.word	0x2000cf94
   1e58c:	0001e2cd 	.word	0x0001e2cd
   1e590:	007fffff 	.word	0x007fffff

0001e594 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   1e594:	4b35      	ldr	r3, [pc, #212]	; (1e66c <rtc_nrf_isr+0xd8>)
{
   1e596:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e59a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e59e:	0791      	lsls	r1, r2, #30
   1e5a0:	d50b      	bpl.n	1e5ba <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e5a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e5a6:	b142      	cbz	r2, 1e5ba <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e5a8:	2200      	movs	r2, #0
   1e5aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e5ae:	4a30      	ldr	r2, [pc, #192]	; (1e670 <rtc_nrf_isr+0xdc>)
   1e5b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e5b4:	6813      	ldr	r3, [r2, #0]
   1e5b6:	3301      	adds	r3, #1
   1e5b8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1e5ba:	f04f 0320 	mov.w	r3, #32
   1e5be:	f3ef 8111 	mrs	r1, BASEPRI
   1e5c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e5c6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   1e5ca:	4b28      	ldr	r3, [pc, #160]	; (1e66c <rtc_nrf_isr+0xd8>)
   1e5cc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e5d0:	03d2      	lsls	r2, r2, #15
   1e5d2:	d50e      	bpl.n	1e5f2 <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e5d4:	4a27      	ldr	r2, [pc, #156]	; (1e674 <rtc_nrf_isr+0xe0>)
   1e5d6:	e8d2 0fef 	ldaex	r0, [r2]
   1e5da:	f020 0401 	bic.w	r4, r0, #1
   1e5de:	e8c2 4fe5 	stlex	r5, r4, [r2]
   1e5e2:	2d00      	cmp	r5, #0
   1e5e4:	d1f7      	bne.n	1e5d6 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e5e6:	2800      	cmp	r0, #0
   1e5e8:	d137      	bne.n	1e65a <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e5ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   1e5ee:	2a00      	cmp	r2, #0
   1e5f0:	d133      	bne.n	1e65a <rtc_nrf_isr+0xc6>
{
   1e5f2:	2300      	movs	r3, #0
	__asm__ volatile(
   1e5f4:	f381 8811 	msr	BASEPRI, r1
   1e5f8:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1e5fc:	b353      	cbz	r3, 1e654 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
   1e5fe:	f7ff fec9 	bl	1e394 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e602:	f04f 0320 	mov.w	r3, #32
   1e606:	f3ef 8711 	mrs	r7, BASEPRI
   1e60a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e60e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e612:	4b19      	ldr	r3, [pc, #100]	; (1e678 <rtc_nrf_isr+0xe4>)
   1e614:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   1e618:	42a0      	cmp	r0, r4
   1e61a:	eb71 0205 	sbcs.w	r2, r1, r5
   1e61e:	f04f 0200 	mov.w	r2, #0
   1e622:	d321      	bcc.n	1e668 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
   1e624:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e628:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1e62c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
   1e630:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e636:	e9c3 8902 	strd	r8, r9, [r3, #8]
   1e63a:	4b0c      	ldr	r3, [pc, #48]	; (1e66c <rtc_nrf_isr+0xd8>)
   1e63c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   1e640:	f387 8811 	msr	BASEPRI, r7
   1e644:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e648:	b121      	cbz	r1, 1e654 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
   1e64a:	4622      	mov	r2, r4
   1e64c:	462b      	mov	r3, r5
   1e64e:	2000      	movs	r0, #0
   1e650:	9600      	str	r6, [sp, #0]
   1e652:	4788      	blx	r1
}
   1e654:	b003      	add	sp, #12
   1e656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e65a:	2200      	movs	r2, #0
   1e65c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   1e660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e664:	2301      	movs	r3, #1
}
   1e666:	e7c5      	b.n	1e5f4 <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e668:	4611      	mov	r1, r2
   1e66a:	e7e9      	b.n	1e640 <rtc_nrf_isr+0xac>
   1e66c:	40015000 	.word	0x40015000
   1e670:	2000cf98 	.word	0x2000cf98
   1e674:	2000cf90 	.word	0x2000cf90
   1e678:	2000cb10 	.word	0x2000cb10

0001e67c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e67c:	1c43      	adds	r3, r0, #1
{
   1e67e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e680:	d020      	beq.n	1e6c4 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e682:	2801      	cmp	r0, #1
   1e684:	dd20      	ble.n	1e6c8 <sys_clock_set_timeout+0x4c>
   1e686:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e68a:	da1f      	bge.n	1e6cc <sys_clock_set_timeout+0x50>
   1e68c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e68e:	f7ff fe81 	bl	1e394 <z_nrf_rtc_timer_read>
   1e692:	4b0f      	ldr	r3, [pc, #60]	; (1e6d0 <sys_clock_set_timeout+0x54>)
   1e694:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e698:	1a40      	subs	r0, r0, r1
		ticks = 0;
   1e69a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e69e:	bf28      	it	cs
   1e6a0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e6a2:	3001      	adds	r0, #1
   1e6a4:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   1e6a6:	480b      	ldr	r0, [pc, #44]	; (1e6d4 <sys_clock_set_timeout+0x58>)
   1e6a8:	4282      	cmp	r2, r0
   1e6aa:	bf28      	it	cs
   1e6ac:	4602      	movcs	r2, r0
   1e6ae:	2000      	movs	r0, #0
   1e6b0:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e6b2:	4909      	ldr	r1, [pc, #36]	; (1e6d8 <sys_clock_set_timeout+0x5c>)
   1e6b4:	9001      	str	r0, [sp, #4]
   1e6b6:	9100      	str	r1, [sp, #0]
   1e6b8:	f143 0300 	adc.w	r3, r3, #0
   1e6bc:	f7ff fe8c 	bl	1e3d8 <compare_set>
}
   1e6c0:	b002      	add	sp, #8
   1e6c2:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e6c4:	4803      	ldr	r0, [pc, #12]	; (1e6d4 <sys_clock_set_timeout+0x58>)
   1e6c6:	e7e1      	b.n	1e68c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e6c8:	2400      	movs	r4, #0
   1e6ca:	e7e0      	b.n	1e68e <sys_clock_set_timeout+0x12>
   1e6cc:	4c01      	ldr	r4, [pc, #4]	; (1e6d4 <sys_clock_set_timeout+0x58>)
   1e6ce:	e7de      	b.n	1e68e <sys_clock_set_timeout+0x12>
   1e6d0:	2000cb20 	.word	0x2000cb20
   1e6d4:	007fffff 	.word	0x007fffff
   1e6d8:	0001e2cd 	.word	0x0001e2cd

0001e6dc <sys_clock_elapsed>:
{
   1e6dc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e6de:	f7ff fe59 	bl	1e394 <z_nrf_rtc_timer_read>
   1e6e2:	4b02      	ldr	r3, [pc, #8]	; (1e6ec <sys_clock_elapsed+0x10>)
   1e6e4:	681b      	ldr	r3, [r3, #0]
}
   1e6e6:	1ac0      	subs	r0, r0, r3
   1e6e8:	bd08      	pop	{r3, pc}
   1e6ea:	bf00      	nop
   1e6ec:	2000cb20 	.word	0x2000cb20

0001e6f0 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   1e6f0:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   1e6f2:	4d16      	ldr	r5, [pc, #88]	; (1e74c <_nrf_modem_lib_init+0x5c>)
   1e6f4:	4c16      	ldr	r4, [pc, #88]	; (1e750 <_nrf_modem_lib_init+0x60>)
   1e6f6:	782b      	ldrb	r3, [r5, #0]
   1e6f8:	b933      	cbnz	r3, 1e708 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   1e6fa:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1e6fe:	4815      	ldr	r0, [pc, #84]	; (1e754 <_nrf_modem_lib_init+0x64>)
   1e700:	f00f f8df 	bl	2d8c2 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   1e704:	2301      	movs	r3, #1
   1e706:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   1e708:	2200      	movs	r2, #0
   1e70a:	202a      	movs	r0, #42	; 0x2a
   1e70c:	4611      	mov	r1, r2
   1e70e:	f7fd fd83 	bl	1c218 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   1e712:	2100      	movs	r1, #0
   1e714:	4810      	ldr	r0, [pc, #64]	; (1e758 <_nrf_modem_lib_init+0x68>)
   1e716:	f007 f9d7 	bl	25ac8 <nrf_modem_init>
   1e71a:	4b10      	ldr	r3, [pc, #64]	; (1e75c <_nrf_modem_lib_init+0x6c>)
   1e71c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1e71e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e726:	480b      	ldr	r0, [pc, #44]	; (1e754 <_nrf_modem_lib_init+0x64>)
   1e728:	f007 fdfa 	bl	26320 <z_impl_k_mutex_lock>
	return list->head;
   1e72c:	6820      	ldr	r0, [r4, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   1e72e:	b138      	cbz	r0, 1e740 <_nrf_modem_lib_init+0x50>
	return node->next;
   1e730:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   1e732:	3004      	adds	r0, #4
   1e734:	f008 f842 	bl	267bc <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1e738:	b114      	cbz	r4, 1e740 <_nrf_modem_lib_init+0x50>
   1e73a:	4620      	mov	r0, r4
   1e73c:	6824      	ldr	r4, [r4, #0]
   1e73e:	e7f8      	b.n	1e732 <_nrf_modem_lib_init+0x42>
	return z_impl_k_mutex_unlock(mutex);
   1e740:	4804      	ldr	r0, [pc, #16]	; (1e754 <_nrf_modem_lib_init+0x64>)
   1e742:	f007 febf 	bl	264c4 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   1e746:	2000      	movs	r0, #0
   1e748:	bd38      	pop	{r3, r4, r5, pc}
   1e74a:	bf00      	nop
   1e74c:	2000d520 	.word	0x2000d520
   1e750:	2000cfa0 	.word	0x2000cfa0
   1e754:	2000cfa8 	.word	0x2000cfa8
   1e758:	0002ec94 	.word	0x0002ec94
   1e75c:	2000cf9c 	.word	0x2000cf9c

0001e760 <nrf_modem_lib_init>:
	k_mutex_unlock(&slist_mutex);
}

int nrf_modem_lib_init(enum nrf_modem_mode_t mode)
{
	if (mode == NORMAL_MODE) {
   1e760:	b908      	cbnz	r0, 1e766 <nrf_modem_lib_init+0x6>
		return _nrf_modem_lib_init(NULL);
   1e762:	f7ff bfc5 	b.w	1e6f0 <_nrf_modem_lib_init>
	} else {
		return nrf_modem_init(&init_params, FULL_DFU_MODE);
   1e766:	2101      	movs	r1, #1
   1e768:	4801      	ldr	r0, [pc, #4]	; (1e770 <nrf_modem_lib_init+0x10>)
   1e76a:	f007 b9ad 	b.w	25ac8 <nrf_modem_init>
   1e76e:	bf00      	nop
   1e770:	0002ec94 	.word	0x0002ec94

0001e774 <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   1e774:	4b01      	ldr	r3, [pc, #4]	; (1e77c <nrf_modem_lib_get_init_ret+0x8>)
   1e776:	6818      	ldr	r0, [r3, #0]
   1e778:	4770      	bx	lr
   1e77a:	bf00      	nop
   1e77c:	2000cf9c 	.word	0x2000cf9c

0001e780 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1e780:	4b10      	ldr	r3, [pc, #64]	; (1e7c4 <thread_monitor_entry_get+0x44>)
{
   1e782:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   1e784:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1e786:	4b10      	ldr	r3, [pc, #64]	; (1e7c8 <thread_monitor_entry_get+0x48>)
{
   1e788:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   1e78a:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   1e78c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   1e78e:	4618      	mov	r0, r3
   1e790:	461f      	mov	r7, r3
		if (entry->id == id) {
   1e792:	6804      	ldr	r4, [r0, #0]
   1e794:	428c      	cmp	r4, r1
   1e796:	d011      	beq.n	1e7bc <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   1e798:	b18c      	cbz	r4, 1e7be <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   1e79a:	6844      	ldr	r4, [r0, #4]
   1e79c:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   1e79e:	42b4      	cmp	r4, r6
   1e7a0:	bfc8      	it	gt
   1e7a2:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e7a4:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   1e7a8:	bfc8      	it	gt
   1e7aa:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1e7ac:	42b8      	cmp	r0, r7
   1e7ae:	d301      	bcc.n	1e7b4 <thread_monitor_entry_get+0x34>
   1e7b0:	3d01      	subs	r5, #1
   1e7b2:	d1ee      	bne.n	1e792 <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   1e7b4:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   1e7b6:	3a01      	subs	r2, #1
	new_entry->id = id;
   1e7b8:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1e7ba:	605a      	str	r2, [r3, #4]
}
   1e7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7be:	4603      	mov	r3, r0
   1e7c0:	e7f8      	b.n	1e7b4 <thread_monitor_entry_get+0x34>
   1e7c2:	bf00      	nop
   1e7c4:	2000d008 	.word	0x2000d008
   1e7c8:	2000d030 	.word	0x2000d030

0001e7cc <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_enable(void)
{
	irq_enable(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1e7cc:	4668      	mov	r0, sp
   1e7ce:	f020 0107 	bic.w	r1, r0, #7
   1e7d2:	468d      	mov	sp, r1
   1e7d4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e7d6:	4b0d      	ldr	r3, [pc, #52]	; (1e80c <rpc_proxy_irq_handler+0x40>)
   1e7d8:	e8d3 2fef 	ldaex	r2, [r3]
   1e7dc:	3201      	adds	r2, #1
   1e7de:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e7e2:	2900      	cmp	r1, #0
   1e7e4:	d1f8      	bne.n	1e7d8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   1e7e6:	f004 fe33 	bl	23450 <nrf_modem_application_irq_handler>
	return list->head;
   1e7ea:	4b09      	ldr	r3, [pc, #36]	; (1e810 <rpc_proxy_irq_handler+0x44>)
   1e7ec:	681c      	ldr	r4, [r3, #0]

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1e7ee:	b93c      	cbnz	r4, 1e800 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1e7f0:	f7fd fd38 	bl	1c264 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1e7f4:	f7fd fe0a 	bl	1c40c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1e7f8:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   1e7fc:	4685      	mov	sp, r0
   1e7fe:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   1e800:	1d20      	adds	r0, r4, #4
   1e802:	f007 ffdb 	bl	267bc <z_impl_k_sem_give>
	return node->next;
   1e806:	6824      	ldr	r4, [r4, #0]
   1e808:	e7f1      	b.n	1e7ee <rpc_proxy_irq_handler+0x22>
   1e80a:	bf00      	nop
   1e80c:	2000d008 	.word	0x2000d008
   1e810:	2000d028 	.word	0x2000d028

0001e814 <nrf_modem_os_timedwait>:
{
   1e814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e818:	460c      	mov	r4, r1
   1e81a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   1e81c:	f00f f8cc 	bl	2d9b8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   1e820:	6823      	ldr	r3, [r4, #0]
   1e822:	4605      	mov	r5, r0
   1e824:	2b00      	cmp	r3, #0
   1e826:	460f      	mov	r7, r1
   1e828:	d103      	bne.n	1e832 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   1e82a:	f009 f933 	bl	27a94 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   1e82e:	2074      	movs	r0, #116	; 0x74
   1e830:	e08e      	b.n	1e950 <nrf_modem_os_timedwait+0x13c>
		*timeout = SYS_FOREVER_MS;
   1e832:	bfbc      	itt	lt
   1e834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   1e838:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e83a:	2201      	movs	r2, #1
   1e83c:	2100      	movs	r1, #0
   1e83e:	a802      	add	r0, sp, #8
   1e840:	f00f f85d 	bl	2d8fe <z_impl_k_sem_init>
   1e844:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   1e846:	f04f 0320 	mov.w	r3, #32
   1e84a:	f3ef 8911 	mrs	r9, BASEPRI
   1e84e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e852:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1e856:	f009 fa5b 	bl	27d10 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1e85a:	f7ff ff91 	bl	1e780 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   1e85e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1e974 <nrf_modem_os_timedwait+0x160>
   1e862:	6843      	ldr	r3, [r0, #4]
   1e864:	f8d8 2000 	ldr.w	r2, [r8]
   1e868:	4293      	cmp	r3, r2
   1e86a:	f04f 0300 	mov.w	r3, #0
   1e86e:	d108      	bne.n	1e882 <nrf_modem_os_timedwait+0x6e>
	parent->next = child;
   1e870:	9301      	str	r3, [sp, #4]
	return list->tail;
   1e872:	4b41      	ldr	r3, [pc, #260]	; (1e978 <nrf_modem_os_timedwait+0x164>)
   1e874:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1e876:	2a00      	cmp	r2, #0
   1e878:	d16d      	bne.n	1e956 <nrf_modem_os_timedwait+0x142>
	list->head = node;
   1e87a:	e9c3 6600 	strd	r6, r6, [r3]
		allow_to_sleep = true;
   1e87e:	2301      	movs	r3, #1
}
   1e880:	e000      	b.n	1e884 <nrf_modem_os_timedwait+0x70>
	entry->cnt = rpc_event_cnt;
   1e882:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   1e884:	f389 8811 	msr	BASEPRI, r9
   1e888:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1e88c:	2b00      	cmp	r3, #0
   1e88e:	d05e      	beq.n	1e94e <nrf_modem_os_timedwait+0x13a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1e890:	6823      	ldr	r3, [r4, #0]
   1e892:	1c5a      	adds	r2, r3, #1
   1e894:	d062      	beq.n	1e95c <nrf_modem_os_timedwait+0x148>
   1e896:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1e89a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e89e:	2100      	movs	r1, #0
   1e8a0:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1e8a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e8a8:	2300      	movs	r3, #0
   1e8aa:	fbcc 010e 	smlal	r0, r1, ip, lr
   1e8ae:	f7fa fbf7 	bl	190a0 <__aeabi_uldivmod>
   1e8b2:	4602      	mov	r2, r0
   1e8b4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1e8b6:	a802      	add	r0, sp, #8
   1e8b8:	f007 ffba 	bl	26830 <z_impl_k_sem_take>
	__asm__ volatile(
   1e8bc:	f04f 0320 	mov.w	r3, #32
   1e8c0:	f3ef 8911 	mrs	r9, BASEPRI
   1e8c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8c8:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e8cc:	2100      	movs	r1, #0
	return list->head;
   1e8ce:	4a2a      	ldr	r2, [pc, #168]	; (1e978 <nrf_modem_os_timedwait+0x164>)
   1e8d0:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e8d2:	b15b      	cbz	r3, 1e8ec <nrf_modem_os_timedwait+0xd8>
   1e8d4:	42b3      	cmp	r3, r6
   1e8d6:	d14a      	bne.n	1e96e <nrf_modem_os_timedwait+0x15a>
	return node->next;
   1e8d8:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   1e8da:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e8dc:	2900      	cmp	r1, #0
   1e8de:	d141      	bne.n	1e964 <nrf_modem_os_timedwait+0x150>
   1e8e0:	429e      	cmp	r6, r3
	list->head = node;
   1e8e2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e8e4:	d100      	bne.n	1e8e8 <nrf_modem_os_timedwait+0xd4>
	list->tail = node;
   1e8e6:	6050      	str	r0, [r2, #4]
	parent->next = child;
   1e8e8:	2300      	movs	r3, #0
   1e8ea:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1e8ec:	f009 fa10 	bl	27d10 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1e8f0:	f7ff ff46 	bl	1e780 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   1e8f4:	f8d8 3000 	ldr.w	r3, [r8]
   1e8f8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   1e8fa:	f389 8811 	msr	BASEPRI, r9
   1e8fe:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   1e902:	6826      	ldr	r6, [r4, #0]
   1e904:	1c73      	adds	r3, r6, #1
   1e906:	d022      	beq.n	1e94e <nrf_modem_os_timedwait+0x13a>
	return z_impl_k_uptime_ticks();
   1e908:	f00f f856 	bl	2d9b8 <z_impl_k_uptime_ticks>
   1e90c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   1e910:	fba0 300e 	umull	r3, r0, r0, lr
   1e914:	fba5 250e 	umull	r2, r5, r5, lr
   1e918:	fb0e 0101 	mla	r1, lr, r1, r0
   1e91c:	fb0e 5707 	mla	r7, lr, r7, r5
   1e920:	0bdb      	lsrs	r3, r3, #15
   1e922:	0bd2      	lsrs	r2, r2, #15
   1e924:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1e928:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   1e92c:	1a9b      	subs	r3, r3, r2
   1e92e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   1e932:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   1e936:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   1e93a:	1af3      	subs	r3, r6, r3
   1e93c:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   1e940:	2900      	cmp	r1, #0
   1e942:	bfb8      	it	lt
   1e944:	2300      	movlt	r3, #0
   1e946:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   1e948:	2b00      	cmp	r3, #0
   1e94a:	f43f af70 	beq.w	1e82e <nrf_modem_os_timedwait+0x1a>
	return 0;
   1e94e:	2000      	movs	r0, #0
}
   1e950:	b009      	add	sp, #36	; 0x24
   1e952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e956:	6016      	str	r6, [r2, #0]
	list->tail = node;
   1e958:	605e      	str	r6, [r3, #4]
   1e95a:	e790      	b.n	1e87e <nrf_modem_os_timedwait+0x6a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   1e95c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e960:	4613      	mov	r3, r2
   1e962:	e7a8      	b.n	1e8b6 <nrf_modem_os_timedwait+0xa2>
Z_GENLIST_REMOVE(slist, snode)
   1e964:	429e      	cmp	r6, r3
	parent->next = child;
   1e966:	6008      	str	r0, [r1, #0]
	list->tail = node;
   1e968:	bf08      	it	eq
   1e96a:	6051      	streq	r1, [r2, #4]
}
   1e96c:	e7bc      	b.n	1e8e8 <nrf_modem_os_timedwait+0xd4>
	return node->next;
   1e96e:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e970:	681b      	ldr	r3, [r3, #0]
   1e972:	e7ae      	b.n	1e8d2 <nrf_modem_os_timedwait+0xbe>
   1e974:	2000d008 	.word	0x2000d008
   1e978:	2000d028 	.word	0x2000d028

0001e97c <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1e97c:	6803      	ldr	r3, [r0, #0]
{
   1e97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e982:	4604      	mov	r4, r0
   1e984:	460e      	mov	r6, r1
   1e986:	4617      	mov	r7, r2
   1e988:	4d13      	ldr	r5, [pc, #76]	; (1e9d8 <nrf_modem_os_sem_init+0x5c>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   1e98a:	b12b      	cbz	r3, 1e998 <nrf_modem_os_sem_init+0x1c>
   1e98c:	42ab      	cmp	r3, r5
   1e98e:	d303      	bcc.n	1e998 <nrf_modem_os_sem_init+0x1c>
   1e990:	f105 0248 	add.w	r2, r5, #72	; 0x48
   1e994:	4293      	cmp	r3, r2
   1e996:	d318      	bcc.n	1e9ca <nrf_modem_os_sem_init+0x4e>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   1e998:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1e9dc <nrf_modem_os_sem_init+0x60>
   1e99c:	f898 3000 	ldrb.w	r3, [r8]
   1e9a0:	2b02      	cmp	r3, #2
   1e9a2:	d908      	bls.n	1e9b6 <nrf_modem_os_sem_init+0x3a>
   1e9a4:	490e      	ldr	r1, [pc, #56]	; (1e9e0 <nrf_modem_os_sem_init+0x64>)
   1e9a6:	480f      	ldr	r0, [pc, #60]	; (1e9e4 <nrf_modem_os_sem_init+0x68>)
   1e9a8:	22f4      	movs	r2, #244	; 0xf4
   1e9aa:	f00c feff 	bl	2b7ac <printk>
   1e9ae:	21f4      	movs	r1, #244	; 0xf4
   1e9b0:	480b      	ldr	r0, [pc, #44]	; (1e9e0 <nrf_modem_os_sem_init+0x64>)
   1e9b2:	f00d f892 	bl	2bada <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   1e9b6:	f898 3000 	ldrb.w	r3, [r8]
   1e9ba:	1c5a      	adds	r2, r3, #1
   1e9bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e9c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1e9c4:	f888 2000 	strb.w	r2, [r8]
   1e9c8:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1e9ca:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e9cc:	463a      	mov	r2, r7
   1e9ce:	4631      	mov	r1, r6
}
   1e9d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e9d4:	f00e bf93 	b.w	2d8fe <z_impl_k_sem_init>
   1e9d8:	2000cfc0 	.word	0x2000cfc0
   1e9dc:	2000d521 	.word	0x2000d521
   1e9e0:	00030042 	.word	0x00030042
   1e9e4:	0002f296 	.word	0x0002f296

0001e9e8 <nrf_modem_os_sem_give>:
{
   1e9e8:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1e9ea:	4604      	mov	r4, r0
   1e9ec:	b128      	cbz	r0, 1e9fa <nrf_modem_os_sem_give+0x12>
   1e9ee:	4b0a      	ldr	r3, [pc, #40]	; (1ea18 <nrf_modem_os_sem_give+0x30>)
   1e9f0:	4298      	cmp	r0, r3
   1e9f2:	d302      	bcc.n	1e9fa <nrf_modem_os_sem_give+0x12>
   1e9f4:	3348      	adds	r3, #72	; 0x48
   1e9f6:	4298      	cmp	r0, r3
   1e9f8:	d308      	bcc.n	1ea0c <nrf_modem_os_sem_give+0x24>
   1e9fa:	4908      	ldr	r1, [pc, #32]	; (1ea1c <nrf_modem_os_sem_give+0x34>)
   1e9fc:	4808      	ldr	r0, [pc, #32]	; (1ea20 <nrf_modem_os_sem_give+0x38>)
   1e9fe:	22ff      	movs	r2, #255	; 0xff
   1ea00:	f00c fed4 	bl	2b7ac <printk>
   1ea04:	21ff      	movs	r1, #255	; 0xff
   1ea06:	4805      	ldr	r0, [pc, #20]	; (1ea1c <nrf_modem_os_sem_give+0x34>)
   1ea08:	f00d f867 	bl	2bada <assert_post_action>
	z_impl_k_sem_give(sem);
   1ea0c:	4620      	mov	r0, r4
}
   1ea0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ea12:	f007 bed3 	b.w	267bc <z_impl_k_sem_give>
   1ea16:	bf00      	nop
   1ea18:	2000cfc0 	.word	0x2000cfc0
   1ea1c:	00030042 	.word	0x00030042
   1ea20:	0002f296 	.word	0x0002f296

0001ea24 <nrf_modem_os_sem_take>:
{
   1ea24:	b570      	push	{r4, r5, r6, lr}
   1ea26:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   1ea28:	4605      	mov	r5, r0
   1ea2a:	b128      	cbz	r0, 1ea38 <nrf_modem_os_sem_take+0x14>
   1ea2c:	4b17      	ldr	r3, [pc, #92]	; (1ea8c <nrf_modem_os_sem_take+0x68>)
   1ea2e:	4298      	cmp	r0, r3
   1ea30:	d302      	bcc.n	1ea38 <nrf_modem_os_sem_take+0x14>
   1ea32:	3348      	adds	r3, #72	; 0x48
   1ea34:	4298      	cmp	r0, r3
   1ea36:	d30a      	bcc.n	1ea4e <nrf_modem_os_sem_take+0x2a>
   1ea38:	4915      	ldr	r1, [pc, #84]	; (1ea90 <nrf_modem_os_sem_take+0x6c>)
   1ea3a:	4816      	ldr	r0, [pc, #88]	; (1ea94 <nrf_modem_os_sem_take+0x70>)
   1ea3c:	f240 1209 	movw	r2, #265	; 0x109
   1ea40:	f00c feb4 	bl	2b7ac <printk>
   1ea44:	f240 1109 	movw	r1, #265	; 0x109
   1ea48:	4811      	ldr	r0, [pc, #68]	; (1ea90 <nrf_modem_os_sem_take+0x6c>)
   1ea4a:	f00d f846 	bl	2bada <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1ea4e:	1c63      	adds	r3, r4, #1
   1ea50:	d018      	beq.n	1ea84 <nrf_modem_os_sem_take+0x60>
   1ea52:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ea56:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ea5a:	2100      	movs	r1, #0
   1ea5c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1ea60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ea64:	2300      	movs	r3, #0
   1ea66:	fbc4 0106 	smlal	r0, r1, r4, r6
   1ea6a:	f7fa fb19 	bl	190a0 <__aeabi_uldivmod>
   1ea6e:	4602      	mov	r2, r0
   1ea70:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ea72:	4628      	mov	r0, r5
   1ea74:	f007 fedc 	bl	26830 <z_impl_k_sem_take>
		return NRF_ETIMEDOUT;
   1ea78:	f110 0f0b 	cmn.w	r0, #11
}
   1ea7c:	bf0c      	ite	eq
   1ea7e:	2074      	moveq	r0, #116	; 0x74
   1ea80:	2000      	movne	r0, #0
   1ea82:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   1ea84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ea88:	4613      	mov	r3, r2
   1ea8a:	e7f2      	b.n	1ea72 <nrf_modem_os_sem_take+0x4e>
   1ea8c:	2000cfc0 	.word	0x2000cfc0
   1ea90:	00030042 	.word	0x00030042
   1ea94:	0002f296 	.word	0x0002f296

0001ea98 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ea9c:	4b01      	ldr	r3, [pc, #4]	; (1eaa4 <nrf_modem_os_application_irq_set+0xc>)
   1ea9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1eaa2:	4770      	bx	lr
   1eaa4:	e000e100 	.word	0xe000e100

0001eaa8 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eaa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1eaac:	4b01      	ldr	r3, [pc, #4]	; (1eab4 <nrf_modem_os_application_irq_clear+0xc>)
   1eaae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1eab2:	4770      	bx	lr
   1eab4:	e000e100 	.word	0xe000e100

0001eab8 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eab8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1eabc:	4b01      	ldr	r3, [pc, #4]	; (1eac4 <nrf_modem_os_trace_irq_set+0xc>)
   1eabe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1eac2:	4770      	bx	lr
   1eac4:	e000e100 	.word	0xe000e100

0001eac8 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eac8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1eacc:	4b01      	ldr	r3, [pc, #4]	; (1ead4 <nrf_modem_os_trace_irq_clear+0xc>)
   1eace:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1ead2:	4770      	bx	lr
   1ead4:	e000e100 	.word	0xe000e100

0001ead8 <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   1ead8:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   1eada:	2200      	movs	r2, #0
   1eadc:	2300      	movs	r3, #0
   1eade:	4801      	ldr	r0, [pc, #4]	; (1eae4 <nrf_modem_os_alloc+0xc>)
   1eae0:	f00e bec9 	b.w	2d876 <k_heap_alloc>
   1eae4:	2000c994 	.word	0x2000c994

0001eae8 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   1eae8:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   1eaea:	4801      	ldr	r0, [pc, #4]	; (1eaf0 <nrf_modem_os_free+0x8>)
   1eaec:	f007 ba3a 	b.w	25f64 <k_heap_free>
   1eaf0:	2000c994 	.word	0x2000c994

0001eaf4 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   1eaf4:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   1eaf6:	2200      	movs	r2, #0
   1eaf8:	2300      	movs	r3, #0
   1eafa:	4801      	ldr	r0, [pc, #4]	; (1eb00 <nrf_modem_os_shm_tx_alloc+0xc>)
   1eafc:	f00e bebb 	b.w	2d876 <k_heap_alloc>
   1eb00:	2000d010 	.word	0x2000d010

0001eb04 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   1eb04:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   1eb06:	4801      	ldr	r0, [pc, #4]	; (1eb0c <nrf_modem_os_shm_tx_free+0x8>)
   1eb08:	f007 ba2c 	b.w	25f64 <k_heap_free>
   1eb0c:	2000d010 	.word	0x2000d010

0001eb10 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   1eb10:	b510      	push	{r4, lr}
	list->head = NULL;
   1eb12:	2400      	movs	r4, #0
   1eb14:	4b0b      	ldr	r3, [pc, #44]	; (1eb44 <nrf_modem_os_init+0x34>)
	list->tail = NULL;
   1eb16:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1eb1a:	4b0b      	ldr	r3, [pc, #44]	; (1eb48 <nrf_modem_os_init+0x38>)
   1eb1c:	e8d3 2fef 	ldaex	r2, [r3]
   1eb20:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1eb24:	2900      	cmp	r1, #0
   1eb26:	d1f9      	bne.n	1eb1c <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   1eb28:	f00d fa69 	bl	2bffe <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1eb2c:	4b07      	ldr	r3, [pc, #28]	; (1eb4c <nrf_modem_os_init+0x3c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   1eb2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   1eb32:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1eb34:	4b06      	ldr	r3, [pc, #24]	; (1eb50 <nrf_modem_os_init+0x40>)
	k_heap_init(&shmem_heap,
   1eb36:	4907      	ldr	r1, [pc, #28]	; (1eb54 <nrf_modem_os_init+0x44>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1eb38:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   1eb3a:	4807      	ldr	r0, [pc, #28]	; (1eb58 <nrf_modem_os_init+0x48>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   1eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   1eb40:	f00e be91 	b.w	2d866 <k_heap_init>
   1eb44:	2000d028 	.word	0x2000d028
   1eb48:	2000d008 	.word	0x2000d008
   1eb4c:	2000cfbc 	.word	0x2000cfbc
   1eb50:	2000d00c 	.word	0x2000d00c
   1eb54:	200084e8 	.word	0x200084e8
   1eb58:	2000d010 	.word	0x2000d010

0001eb5c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   1eb5c:	2801      	cmp	r0, #1
   1eb5e:	d021      	beq.n	1eba4 <z_to_nrf_optname+0x48>
   1eb60:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   1eb64:	d126      	bne.n	1ebb4 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   1eb66:	3901      	subs	r1, #1
   1eb68:	290b      	cmp	r1, #11
   1eb6a:	d823      	bhi.n	1ebb4 <z_to_nrf_optname+0x58>
   1eb6c:	e8df f001 	tbb	[pc, r1]
   1eb70:	0e0c0a06 	.word	0x0e0c0a06
   1eb74:	22221210 	.word	0x22221210
   1eb78:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   1eb7c:	2302      	movs	r3, #2
	int retval = 0;
   1eb7e:	2000      	movs	r0, #0
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1eb80:	6013      	str	r3, [r2, #0]
			break;
   1eb82:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   1eb84:	2305      	movs	r3, #5
   1eb86:	e7fa      	b.n	1eb7e <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   1eb88:	2306      	movs	r3, #6
   1eb8a:	e7f8      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   1eb8c:	2307      	movs	r3, #7
   1eb8e:	e7f6      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   1eb90:	2304      	movs	r3, #4
   1eb92:	e7f4      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   1eb94:	2301      	movs	r3, #1
   1eb96:	e7f2      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   1eb98:	2303      	movs	r3, #3
   1eb9a:	e7f0      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   1eb9c:	2309      	movs	r3, #9
   1eb9e:	e7ee      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   1eba0:	2308      	movs	r3, #8
   1eba2:	e7ec      	b.n	1eb7e <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   1eba4:	2937      	cmp	r1, #55	; 0x37
   1eba6:	dc05      	bgt.n	1ebb4 <z_to_nrf_optname+0x58>
   1eba8:	2913      	cmp	r1, #19
   1ebaa:	dc06      	bgt.n	1ebba <z_to_nrf_optname+0x5e>
   1ebac:	2902      	cmp	r1, #2
   1ebae:	d059      	beq.n	1ec64 <z_to_nrf_optname+0x108>
   1ebb0:	2904      	cmp	r1, #4
   1ebb2:	d0ed      	beq.n	1eb90 <z_to_nrf_optname+0x34>
   1ebb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   1ebb8:	4770      	bx	lr
   1ebba:	3914      	subs	r1, #20
   1ebbc:	2923      	cmp	r1, #35	; 0x23
   1ebbe:	d8f9      	bhi.n	1ebb4 <z_to_nrf_optname+0x58>
   1ebc0:	a301      	add	r3, pc, #4	; (adr r3, 1ebc8 <z_to_nrf_optname+0x6c>)
   1ebc2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1ebc6:	bf00      	nop
   1ebc8:	0001ec59 	.word	0x0001ec59
   1ebcc:	0001ec5d 	.word	0x0001ec5d
   1ebd0:	0001ebb5 	.word	0x0001ebb5
   1ebd4:	0001ebb5 	.word	0x0001ebb5
   1ebd8:	0001ebb5 	.word	0x0001ebb5
   1ebdc:	0001ec61 	.word	0x0001ec61
   1ebe0:	0001ebb5 	.word	0x0001ebb5
   1ebe4:	0001ebb5 	.word	0x0001ebb5
   1ebe8:	0001ebb5 	.word	0x0001ebb5
   1ebec:	0001ebb5 	.word	0x0001ebb5
   1ebf0:	0001ec69 	.word	0x0001ec69
   1ebf4:	0001ec6d 	.word	0x0001ec6d
   1ebf8:	0001ec71 	.word	0x0001ec71
   1ebfc:	0001ebb5 	.word	0x0001ebb5
   1ec00:	0001ebb5 	.word	0x0001ebb5
   1ec04:	0001ebb5 	.word	0x0001ebb5
   1ec08:	0001ebb5 	.word	0x0001ebb5
   1ec0c:	0001ebb5 	.word	0x0001ebb5
   1ec10:	0001ebb5 	.word	0x0001ebb5
   1ec14:	0001ebb5 	.word	0x0001ebb5
   1ec18:	0001ebb5 	.word	0x0001ebb5
   1ec1c:	0001ebb5 	.word	0x0001ebb5
   1ec20:	0001ebb5 	.word	0x0001ebb5
   1ec24:	0001ebb5 	.word	0x0001ebb5
   1ec28:	0001ebb5 	.word	0x0001ebb5
   1ec2c:	0001ebb5 	.word	0x0001ebb5
   1ec30:	0001ebb5 	.word	0x0001ebb5
   1ec34:	0001ebb5 	.word	0x0001ebb5
   1ec38:	0001ebb5 	.word	0x0001ebb5
   1ec3c:	0001ebb5 	.word	0x0001ebb5
   1ec40:	0001ec79 	.word	0x0001ec79
   1ec44:	0001ec7d 	.word	0x0001ec7d
   1ec48:	0001ec81 	.word	0x0001ec81
   1ec4c:	0001ec85 	.word	0x0001ec85
   1ec50:	0001ec89 	.word	0x0001ec89
   1ec54:	0001ec75 	.word	0x0001ec75
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   1ec58:	2314      	movs	r3, #20
   1ec5a:	e790      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   1ec5c:	2315      	movs	r3, #21
   1ec5e:	e78e      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   1ec60:	2319      	movs	r3, #25
   1ec62:	e78c      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   1ec64:	2328      	movs	r3, #40	; 0x28
   1ec66:	e78a      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   1ec68:	231e      	movs	r3, #30
   1ec6a:	e788      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   1ec6c:	231f      	movs	r3, #31
   1ec6e:	e786      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   1ec70:	2320      	movs	r3, #32
   1ec72:	e784      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   1ec74:	2337      	movs	r3, #55	; 0x37
   1ec76:	e782      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   1ec78:	2332      	movs	r3, #50	; 0x32
   1ec7a:	e780      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   1ec7c:	2333      	movs	r3, #51	; 0x33
   1ec7e:	e77e      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   1ec80:	2334      	movs	r3, #52	; 0x34
   1ec82:	e77c      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   1ec84:	2335      	movs	r3, #53	; 0x35
   1ec86:	e77a      	b.n	1eb7e <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   1ec88:	2336      	movs	r3, #54	; 0x36
   1ec8a:	e778      	b.n	1eb7e <z_to_nrf_optname+0x22>

0001ec8c <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   1ec8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec90:	4b05      	ldr	r3, [pc, #20]	; (1eca8 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   1ec92:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   1ec94:	601a      	str	r2, [r3, #0]
   1ec96:	609a      	str	r2, [r3, #8]
   1ec98:	611a      	str	r2, [r3, #16]
   1ec9a:	619a      	str	r2, [r3, #24]
   1ec9c:	621a      	str	r2, [r3, #32]
   1ec9e:	629a      	str	r2, [r3, #40]	; 0x28
   1eca0:	631a      	str	r2, [r3, #48]	; 0x30
   1eca2:	639a      	str	r2, [r3, #56]	; 0x38
}
   1eca4:	4770      	bx	lr
   1eca6:	bf00      	nop
   1eca8:	2000d084 	.word	0x2000d084

0001ecac <nrf91_socket_offload_ioctl>:
{
   1ecac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   1ecb0:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   1ecb4:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   1ecb6:	2b03      	cmp	r3, #3
   1ecb8:	d878      	bhi.n	1edac <nrf91_socket_offload_ioctl+0x100>
   1ecba:	e8df f003 	tbb	[pc, r3]
   1ecbe:	0296      	.short	0x0296
   1ecc0:	7308      	.short	0x7308
   1ecc2:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   1ecc6:	4620      	mov	r0, r4
   1ecc8:	b011      	add	sp, #68	; 0x44
   1ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   1ecce:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   1ecd2:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1ecd6:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   1ecd8:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   1ecdc:	4668      	mov	r0, sp
   1ecde:	2240      	movs	r2, #64	; 0x40
   1ece0:	f00e ff7a 	bl	2dbd8 <memset>
	for (int i = 0; i < nfds; i++) {
   1ece4:	466e      	mov	r6, sp
   1ece6:	464d      	mov	r5, r9
   1ece8:	464f      	mov	r7, r9
	int retval = 0;
   1ecea:	4654      	mov	r4, sl
		tmp[i].events = 0;
   1ecec:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   1ecee:	4940      	ldr	r1, [pc, #256]	; (1edf0 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   1ecf0:	45d0      	cmp	r8, sl
   1ecf2:	dc0a      	bgt.n	1ed0a <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   1ecf4:	2c00      	cmp	r4, #0
   1ecf6:	d1e6      	bne.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   1ecf8:	465a      	mov	r2, fp
   1ecfa:	4641      	mov	r1, r8
   1ecfc:	4668      	mov	r0, sp
   1ecfe:	f00e fd70 	bl	2d7e2 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   1ed02:	45a0      	cmp	r8, r4
   1ed04:	dc26      	bgt.n	1ed54 <nrf91_socket_offload_ioctl+0xa8>
	return retval;
   1ed06:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   1ed08:	e7dd      	b.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   1ed0a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   1ed0c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   1ed0e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   1ed10:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1ed12:	da05      	bge.n	1ed20 <nrf91_socket_offload_ioctl+0x74>
			tmp[i].fd = fds[i].fd;
   1ed14:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1ed16:	f10a 0a01 	add.w	sl, sl, #1
   1ed1a:	3608      	adds	r6, #8
   1ed1c:	3708      	adds	r7, #8
   1ed1e:	e7e7      	b.n	1ecf0 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   1ed20:	2286      	movs	r2, #134	; 0x86
   1ed22:	f7fb fcf5 	bl	1a710 <z_get_fd_obj>
			if (obj != NULL) {
   1ed26:	2300      	movs	r3, #0
   1ed28:	4931      	ldr	r1, [pc, #196]	; (1edf0 <nrf91_socket_offload_ioctl+0x144>)
   1ed2a:	b178      	cbz	r0, 1ed4c <nrf91_socket_offload_ioctl+0xa0>
				tmp[i].fd = OBJ_TO_SD(obj);
   1ed2c:	6802      	ldr	r2, [r0, #0]
   1ed2e:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   1ed30:	88b8      	ldrh	r0, [r7, #4]
   1ed32:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1ed34:	bf42      	ittt	mi
   1ed36:	88b2      	ldrhmi	r2, [r6, #4]
   1ed38:	f042 0201 	orrmi.w	r2, r2, #1
   1ed3c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   1ed3e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   1ed40:	bf42      	ittt	mi
   1ed42:	88b2      	ldrhmi	r2, [r6, #4]
   1ed44:	f042 0202 	orrmi.w	r2, r2, #2
   1ed48:	80b2      	strhmi	r2, [r6, #4]
   1ed4a:	e7e4      	b.n	1ed16 <nrf91_socket_offload_ioctl+0x6a>
				fds[i].revents = POLLNVAL;
   1ed4c:	2220      	movs	r2, #32
				retval++;
   1ed4e:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   1ed50:	80fa      	strh	r2, [r7, #6]
				retval++;
   1ed52:	e7ed      	b.n	1ed30 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   1ed54:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
   1ed58:	2b00      	cmp	r3, #0
   1ed5a:	db20      	blt.n	1ed9e <nrf91_socket_offload_ioctl+0xf2>
		if (tmp[i].revents & NRF_POLLIN) {
   1ed5c:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
   1ed60:	88db      	ldrh	r3, [r3, #6]
   1ed62:	07df      	lsls	r7, r3, #31
			fds[i].revents |= POLLIN;
   1ed64:	bf42      	ittt	mi
   1ed66:	88ea      	ldrhmi	r2, [r5, #6]
   1ed68:	f042 0201 	orrmi.w	r2, r2, #1
   1ed6c:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   1ed6e:	079e      	lsls	r6, r3, #30
			fds[i].revents |= POLLOUT;
   1ed70:	bf42      	ittt	mi
   1ed72:	88ea      	ldrhmi	r2, [r5, #6]
   1ed74:	f042 0204 	orrmi.w	r2, r2, #4
   1ed78:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   1ed7a:	0759      	lsls	r1, r3, #29
			fds[i].revents |= POLLERR;
   1ed7c:	bf42      	ittt	mi
   1ed7e:	88ea      	ldrhmi	r2, [r5, #6]
   1ed80:	f042 0208 	orrmi.w	r2, r2, #8
   1ed84:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   1ed86:	06da      	lsls	r2, r3, #27
			fds[i].revents |= POLLNVAL;
   1ed88:	bf42      	ittt	mi
   1ed8a:	88ea      	ldrhmi	r2, [r5, #6]
   1ed8c:	f042 0220 	orrmi.w	r2, r2, #32
   1ed90:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   1ed92:	071b      	lsls	r3, r3, #28
			fds[i].revents |= POLLHUP;
   1ed94:	bf42      	ittt	mi
   1ed96:	88eb      	ldrhmi	r3, [r5, #6]
   1ed98:	f043 0310 	orrmi.w	r3, r3, #16
   1ed9c:	80eb      	strhmi	r3, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   1ed9e:	3401      	adds	r4, #1
   1eda0:	3508      	adds	r5, #8
   1eda2:	e7ae      	b.n	1ed02 <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   1eda4:	6813      	ldr	r3, [r2, #0]
		return 0;
   1eda6:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   1eda8:	6043      	str	r3, [r0, #4]
		return 0;
   1edaa:	e78c      	b.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   1edac:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   1edae:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   1edb0:	d00c      	beq.n	1edcc <nrf91_socket_offload_ioctl+0x120>
   1edb2:	2904      	cmp	r1, #4
   1edb4:	d112      	bne.n	1eddc <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   1edb6:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   1edb8:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   1edbc:	d10e      	bne.n	1eddc <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1edbe:	2101      	movs	r1, #1
   1edc0:	1392      	asrs	r2, r2, #14
}
   1edc2:	b011      	add	sp, #68	; 0x44
   1edc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   1edc8:	f00e bd0d 	b.w	2d7e6 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   1edcc:	2200      	movs	r2, #0
   1edce:	2102      	movs	r1, #2
   1edd0:	f00e fd09 	bl	2d7e6 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   1edd4:	0384      	lsls	r4, r0, #14
   1edd6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   1edda:	e774      	b.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   1eddc:	f00d f802 	bl	2bde4 <__errno>
   1ede0:	2316      	movs	r3, #22
	return retval;
   1ede2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   1ede6:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   1ede8:	e76d      	b.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   1edea:	f06f 0411 	mvn.w	r4, #17
   1edee:	e76a      	b.n	1ecc6 <nrf91_socket_offload_ioctl+0x1a>
   1edf0:	0002ecc0 	.word	0x0002ecc0

0001edf4 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   1edf4:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   1edf6:	4b03      	ldr	r3, [pc, #12]	; (1ee04 <nrf91_socket_iface_init+0x10>)
   1edf8:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   1edfa:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1edfc:	4802      	ldr	r0, [pc, #8]	; (1ee08 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   1edfe:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   1ee00:	f7fc bf84 	b.w	1bd0c <socket_offload_dns_register>
   1ee04:	2000d080 	.word	0x2000d080
   1ee08:	0002ecb8 	.word	0x0002ecb8

0001ee0c <nrf91_socket_is_supported>:
	if (offload_disabled) {
   1ee0c:	4b0c      	ldr	r3, [pc, #48]	; (1ee40 <nrf91_socket_is_supported+0x34>)
   1ee0e:	781b      	ldrb	r3, [r3, #0]
   1ee10:	b98b      	cbnz	r3, 1ee36 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1ee12:	4b0c      	ldr	r3, [pc, #48]	; (1ee44 <nrf91_socket_is_supported+0x38>)
   1ee14:	781b      	ldrb	r3, [r3, #0]
   1ee16:	b183      	cbz	r3, 1ee3a <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ee18:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   1ee1c:	2b02      	cmp	r3, #2
   1ee1e:	d908      	bls.n	1ee32 <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   1ee20:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ee24:	2801      	cmp	r0, #1
   1ee26:	bf8c      	ite	hi
   1ee28:	2000      	movhi	r0, #0
   1ee2a:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   1ee2c:	f080 0001 	eor.w	r0, r0, #1
   1ee30:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   1ee32:	2001      	movs	r0, #1
   1ee34:	e7fa      	b.n	1ee2c <nrf91_socket_is_supported+0x20>
		return false;
   1ee36:	2000      	movs	r0, #0
   1ee38:	4770      	bx	lr
	return true;
   1ee3a:	2001      	movs	r0, #1
}
   1ee3c:	4770      	bx	lr
   1ee3e:	bf00      	nop
   1ee40:	2000d5a2 	.word	0x2000d5a2
   1ee44:	2000d5a3 	.word	0x2000d5a3

0001ee48 <nrf91_socket_offload_getaddrinfo>:
{
   1ee48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ee4c:	4614      	mov	r4, r2
   1ee4e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1ee50:	2100      	movs	r1, #0
{
   1ee52:	b08a      	sub	sp, #40	; 0x28
   1ee54:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ee56:	2220      	movs	r2, #32
   1ee58:	a802      	add	r0, sp, #8
{
   1ee5a:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1ee5c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1ee5e:	f00e febb 	bl	2dbd8 <memset>
	if (hints != NULL) {
   1ee62:	b1fc      	cbz	r4, 1eea4 <nrf91_socket_offload_getaddrinfo+0x5c>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1ee64:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   1ee66:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   1ee6a:	04d0      	lsls	r0, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   1ee6c:	bf48      	it	mi
   1ee6e:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1ee72:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1ee74:	68e3      	ldr	r3, [r4, #12]
   1ee76:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   1ee78:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   1ee7a:	2b03      	cmp	r3, #3
   1ee7c:	f200 80e5 	bhi.w	1f04a <nrf91_socket_offload_getaddrinfo+0x202>
   1ee80:	4a75      	ldr	r2, [pc, #468]	; (1f058 <nrf91_socket_offload_getaddrinfo+0x210>)
   1ee82:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   1ee84:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   1ee88:	f000 80df 	beq.w	1f04a <nrf91_socket_offload_getaddrinfo+0x202>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ee8c:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   1ee8e:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1ee90:	f00d f8d4 	bl	2c03c <z_to_nrf_protocol>
   1ee94:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1ee96:	307b      	adds	r0, #123	; 0x7b
   1ee98:	f000 80da 	beq.w	1f050 <nrf91_socket_offload_getaddrinfo+0x208>
	if (z_in->ai_canonname != NULL) {
   1ee9c:	69e3      	ldr	r3, [r4, #28]
   1ee9e:	b103      	cbz	r3, 1eea2 <nrf91_socket_offload_getaddrinfo+0x5a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1eea0:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   1eea2:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   1eea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eeac:	486b      	ldr	r0, [pc, #428]	; (1f05c <nrf91_socket_offload_getaddrinfo+0x214>)
   1eeae:	f00d fa19 	bl	2c2e4 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1eeb2:	4622      	mov	r2, r4
   1eeb4:	4631      	mov	r1, r6
   1eeb6:	4628      	mov	r0, r5
   1eeb8:	ab01      	add	r3, sp, #4
   1eeba:	f00e fc8e 	bl	2d7da <nrf_getaddrinfo>
	if (retval != 0) {
   1eebe:	4604      	mov	r4, r0
   1eec0:	2800      	cmp	r0, #0
   1eec2:	d043      	beq.n	1ef4c <nrf91_socket_offload_getaddrinfo+0x104>
	switch (nrf_gai_err) {
   1eec4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1eec8:	440c      	add	r4, r1
   1eeca:	2c14      	cmp	r4, #20
   1eecc:	d830      	bhi.n	1ef30 <nrf91_socket_offload_getaddrinfo+0xe8>
   1eece:	e8df f004 	tbb	[pc, r4]
   1eed2:	0bb9      	.short	0x0bb9
   1eed4:	2f2f143a 	.word	0x2f2f143a
   1eed8:	2f2f2f2f 	.word	0x2f2f2f2f
   1eedc:	172f2f2f 	.word	0x172f2f2f
   1eee0:	23201d1a 	.word	0x23201d1a
   1eee4:	2926      	.short	0x2926
   1eee6:	2c          	.byte	0x2c
   1eee7:	00          	.byte	0x00
   1eee8:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   1eeec:	485b      	ldr	r0, [pc, #364]	; (1f05c <nrf91_socket_offload_getaddrinfo+0x214>)
   1eeee:	f00d f9fb 	bl	2c2e8 <k_mutex_unlock.isra.0>
}
   1eef2:	4620      	mov	r0, r4
   1eef4:	b00a      	add	sp, #40	; 0x28
   1eef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return DNS_EAI_FAIL;
   1eefa:	f06f 0403 	mvn.w	r4, #3
   1eefe:	e7f5      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_FAMILY;
   1ef00:	f06f 0405 	mvn.w	r4, #5
   1ef04:	e7f2      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_MEMORY;
   1ef06:	f06f 0409 	mvn.w	r4, #9
   1ef0a:	e7ef      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NODATA;
   1ef0c:	f06f 0404 	mvn.w	r4, #4
   1ef10:	e7ec      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NONAME;
   1ef12:	f06f 0401 	mvn.w	r4, #1
   1ef16:	e7e9      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SERVICE;
   1ef18:	f06f 0407 	mvn.w	r4, #7
   1ef1c:	e7e6      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SOCKTYPE;
   1ef1e:	f06f 0406 	mvn.w	r4, #6
   1ef22:	e7e3      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_INPROGRESS;
   1ef24:	f06f 0463 	mvn.w	r4, #99	; 0x63
   1ef28:	e7e0      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SYSTEM;
   1ef2a:	f06f 040a 	mvn.w	r4, #10
   1ef2e:	e7dd      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   1ef30:	494b      	ldr	r1, [pc, #300]	; (1f060 <nrf91_socket_offload_getaddrinfo+0x218>)
   1ef32:	484c      	ldr	r0, [pc, #304]	; (1f064 <nrf91_socket_offload_getaddrinfo+0x21c>)
   1ef34:	f240 12bd 	movw	r2, #445	; 0x1bd
   1ef38:	f00c fc38 	bl	2b7ac <printk>
   1ef3c:	f240 11bd 	movw	r1, #445	; 0x1bd
   1ef40:	4847      	ldr	r0, [pc, #284]	; (1f060 <nrf91_socket_offload_getaddrinfo+0x218>)
   1ef42:	f00c fdca 	bl	2bada <assert_post_action>
		return -1;
   1ef46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ef4a:	e7cf      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
	struct zsock_addrinfo *latest_z_res = NULL;
   1ef4c:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   1ef4e:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1ef50:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1ef52:	f8df a114 	ldr.w	sl, [pc, #276]	; 1f068 <nrf91_socket_offload_getaddrinfo+0x220>
   1ef56:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1ef58:	b91e      	cbnz	r6, 1ef62 <nrf91_socket_offload_getaddrinfo+0x11a>
	nrf_freeaddrinfo(nrf_res);
   1ef5a:	9801      	ldr	r0, [sp, #4]
   1ef5c:	f00e fc3f 	bl	2d7de <nrf_freeaddrinfo>
   1ef60:	e7c4      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
					k_malloc(sizeof(struct zsock_addrinfo));
   1ef62:	2050      	movs	r0, #80	; 0x50
   1ef64:	f00e fdf7 	bl	2db56 <k_malloc>
		if (next_z_res == NULL) {
   1ef68:	4605      	mov	r5, r0
   1ef6a:	2800      	cmp	r0, #0
   1ef6c:	d059      	beq.n	1f022 <nrf91_socket_offload_getaddrinfo+0x1da>
	family = nrf_to_z_family(nrf_in->ai_family);
   1ef6e:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1ef70:	68b3      	ldr	r3, [r6, #8]
   1ef72:	2a0a      	cmp	r2, #10
	z_out->ai_next = NULL;
   1ef74:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1ef78:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1ef7c:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1ef80:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   1ef82:	d851      	bhi.n	1f028 <nrf91_socket_offload_getaddrinfo+0x1e0>
   1ef84:	f91a 3002 	ldrsb.w	r3, [sl, r2]
	if (family == -EAFNOSUPPORT) {
   1ef88:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   1ef8c:	d04c      	beq.n	1f028 <nrf91_socket_offload_getaddrinfo+0x1e0>
	z_out->ai_family = family;
   1ef8e:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ef90:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   1ef92:	2b02      	cmp	r3, #2
   1ef94:	d031      	beq.n	1effa <nrf91_socket_offload_getaddrinfo+0x1b2>
   1ef96:	dc0d      	bgt.n	1efb4 <nrf91_socket_offload_getaddrinfo+0x16c>
   1ef98:	b1a3      	cbz	r3, 1efc4 <nrf91_socket_offload_getaddrinfo+0x17c>
   1ef9a:	2b01      	cmp	r3, #1
   1ef9c:	d02f      	beq.n	1effe <nrf91_socket_offload_getaddrinfo+0x1b6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1ef9e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1efa2:	612b      	str	r3, [r5, #16]
		z_out->ai_addr = NULL;
   1efa4:	2300      	movs	r3, #0
   1efa6:	61ab      	str	r3, [r5, #24]
			k_free(next_z_res);
   1efa8:	4628      	mov	r0, r5
   1efaa:	f00e fdcd 	bl	2db48 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1efae:	f06f 0406 	mvn.w	r4, #6
   1efb2:	e03e      	b.n	1f032 <nrf91_socket_offload_getaddrinfo+0x1ea>
	switch (proto) {
   1efb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1efb8:	d01c      	beq.n	1eff4 <nrf91_socket_offload_getaddrinfo+0x1ac>
   1efba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1efbe:	d1ee      	bne.n	1ef9e <nrf91_socket_offload_getaddrinfo+0x156>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1efc0:	f240 1311 	movw	r3, #273	; 0x111
	if (nrf_in->ai_family == NRF_AF_INET) {
   1efc4:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1efc6:	612b      	str	r3, [r5, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1efc8:	d11b      	bne.n	1f002 <nrf91_socket_offload_getaddrinfo+0x1ba>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1efca:	2008      	movs	r0, #8
   1efcc:	f00e fdc3 	bl	2db56 <k_malloc>
   1efd0:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   1efd2:	b318      	cbz	r0, 1f01c <nrf91_socket_offload_getaddrinfo+0x1d4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1efd4:	2308      	movs	r3, #8
   1efd6:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1efd8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1efda:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1efdc:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1efde:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1efe0:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1efe2:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1efe4:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1efe6:	f1b8 0f00 	cmp.w	r8, #0
   1efea:	d128      	bne.n	1f03e <nrf91_socket_offload_getaddrinfo+0x1f6>
			*res = next_z_res;
   1efec:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   1efee:	46a8      	mov	r8, r5
   1eff0:	69f6      	ldr	r6, [r6, #28]
   1eff2:	e7b1      	b.n	1ef58 <nrf91_socket_offload_getaddrinfo+0x110>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1eff4:	f44f 7381 	mov.w	r3, #258	; 0x102
   1eff8:	e7e4      	b.n	1efc4 <nrf91_socket_offload_getaddrinfo+0x17c>
   1effa:	2311      	movs	r3, #17
   1effc:	e7e2      	b.n	1efc4 <nrf91_socket_offload_getaddrinfo+0x17c>
   1effe:	2306      	movs	r3, #6
   1f000:	e7e0      	b.n	1efc4 <nrf91_socket_offload_getaddrinfo+0x17c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1f002:	2a0a      	cmp	r2, #10
   1f004:	d1d0      	bne.n	1efa8 <nrf91_socket_offload_getaddrinfo+0x160>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1f006:	2018      	movs	r0, #24
   1f008:	f00e fda5 	bl	2db56 <k_malloc>
   1f00c:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   1f00e:	b128      	cbz	r0, 1f01c <nrf91_socket_offload_getaddrinfo+0x1d4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1f010:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   1f012:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1f014:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   1f016:	f00d f892 	bl	2c13e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   1f01a:	e7e4      	b.n	1efe6 <nrf91_socket_offload_getaddrinfo+0x19e>
			k_free(next_z_res);
   1f01c:	4628      	mov	r0, r5
   1f01e:	f00e fd93 	bl	2db48 <k_free>
			retval = DNS_EAI_MEMORY;
   1f022:	f06f 0409 	mvn.w	r4, #9
   1f026:	e004      	b.n	1f032 <nrf91_socket_offload_getaddrinfo+0x1ea>
			k_free(next_z_res);
   1f028:	4628      	mov	r0, r5
   1f02a:	f00e fd8d 	bl	2db48 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1f02e:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   1f032:	6838      	ldr	r0, [r7, #0]
   1f034:	f00d f876 	bl	2c124 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1f038:	2300      	movs	r3, #0
   1f03a:	603b      	str	r3, [r7, #0]
   1f03c:	e78d      	b.n	1ef5a <nrf91_socket_offload_getaddrinfo+0x112>
			latest_z_res->ai_next = next_z_res;
   1f03e:	f8c8 5000 	str.w	r5, [r8]
   1f042:	e7d4      	b.n	1efee <nrf91_socket_offload_getaddrinfo+0x1a6>
		return DNS_EAI_ADDRFAMILY;
   1f044:	f06f 0408 	mvn.w	r4, #8
   1f048:	e750      	b.n	1eeec <nrf91_socket_offload_getaddrinfo+0xa4>
			return DNS_EAI_ADDRFAMILY;
   1f04a:	f06f 0408 	mvn.w	r4, #8
   1f04e:	e750      	b.n	1eef2 <nrf91_socket_offload_getaddrinfo+0xaa>
			return DNS_EAI_SOCKTYPE;
   1f050:	f06f 0406 	mvn.w	r4, #6
   1f054:	e74d      	b.n	1eef2 <nrf91_socket_offload_getaddrinfo+0xaa>
   1f056:	bf00      	nop
   1f058:	000300c0 	.word	0x000300c0
   1f05c:	2000ca24 	.word	0x2000ca24
   1f060:	00030081 	.word	0x00030081
   1f064:	0002f296 	.word	0x0002f296
   1f068:	000300c4 	.word	0x000300c4

0001f06c <nrf91_socket_offload_sendmsg>:
{
   1f06c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f070:	4680      	mov	r8, r0
   1f072:	4691      	mov	r9, r2
	if (msg == NULL) {
   1f074:	460c      	mov	r4, r1
   1f076:	b1f9      	cbz	r1, 1f0b8 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f078:	2300      	movs	r3, #0
	ssize_t len = 0;
   1f07a:	461a      	mov	r2, r3
   1f07c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f07e:	4298      	cmp	r0, r3
   1f080:	d124      	bne.n	1f0cc <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   1f082:	2a80      	cmp	r2, #128	; 0x80
   1f084:	d86d      	bhi.n	1f162 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f086:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   1f088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f090:	4836      	ldr	r0, [pc, #216]	; (1f16c <nrf91_socket_offload_sendmsg+0x100>)
   1f092:	f00d f927 	bl	2c2e4 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   1f096:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1f098:	4e35      	ldr	r6, [pc, #212]	; (1f170 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f09a:	68e3      	ldr	r3, [r4, #12]
   1f09c:	429d      	cmp	r5, r3
   1f09e:	d31c      	bcc.n	1f0da <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   1f0a0:	2600      	movs	r6, #0
		ret = 0;
   1f0a2:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   1f0a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1f170 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   1f0a8:	42b7      	cmp	r7, r6
   1f0aa:	dd01      	ble.n	1f0b0 <nrf91_socket_offload_sendmsg+0x44>
   1f0ac:	2d00      	cmp	r5, #0
   1f0ae:	da25      	bge.n	1f0fc <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   1f0b0:	482e      	ldr	r0, [pc, #184]	; (1f16c <nrf91_socket_offload_sendmsg+0x100>)
   1f0b2:	f00d f919 	bl	2c2e8 <k_mutex_unlock.isra.0>
		return ret;
   1f0b6:	e005      	b.n	1f0c4 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   1f0b8:	f00c fe94 	bl	2bde4 <__errno>
   1f0bc:	2316      	movs	r3, #22
		return -1;
   1f0be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   1f0c2:	6003      	str	r3, [r0, #0]
}
   1f0c4:	4628      	mov	r0, r5
   1f0c6:	b002      	add	sp, #8
   1f0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   1f0cc:	68a1      	ldr	r1, [r4, #8]
   1f0ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f0d2:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f0d4:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   1f0d6:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f0d8:	e7d1      	b.n	1f07e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   1f0da:	68a1      	ldr	r1, [r4, #8]
   1f0dc:	19f0      	adds	r0, r6, r7
   1f0de:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   1f0e2:	685a      	ldr	r2, [r3, #4]
   1f0e4:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   1f0e8:	f00e fd69 	bl	2dbbe <memcpy>
			len += msg->msg_iov[i].iov_len;
   1f0ec:	68a3      	ldr	r3, [r4, #8]
   1f0ee:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1f0f2:	4453      	add	r3, sl
   1f0f4:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f0f6:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   1f0f8:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   1f0fa:	e7ce      	b.n	1f09a <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   1f0fc:	6863      	ldr	r3, [r4, #4]
   1f0fe:	1bba      	subs	r2, r7, r6
   1f100:	9301      	str	r3, [sp, #4]
   1f102:	6823      	ldr	r3, [r4, #0]
   1f104:	eb0a 0106 	add.w	r1, sl, r6
   1f108:	9300      	str	r3, [sp, #0]
   1f10a:	4640      	mov	r0, r8
   1f10c:	464b      	mov	r3, r9
   1f10e:	f00d f843 	bl	2c198 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   1f112:	1e05      	subs	r5, r0, #0
				offset += ret;
   1f114:	bfc8      	it	gt
   1f116:	1976      	addgt	r6, r6, r5
   1f118:	e7c6      	b.n	1f0a8 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   1f11a:	68a3      	ldr	r3, [r4, #8]
   1f11c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   1f120:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f124:	685b      	ldr	r3, [r3, #4]
   1f126:	b133      	cbz	r3, 1f136 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   1f128:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   1f12a:	68a3      	ldr	r3, [r4, #8]
   1f12c:	eb03 020a 	add.w	r2, r3, sl
   1f130:	6852      	ldr	r2, [r2, #4]
   1f132:	4297      	cmp	r7, r2
   1f134:	d304      	bcc.n	1f140 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f136:	3601      	adds	r6, #1
   1f138:	68e3      	ldr	r3, [r4, #12]
   1f13a:	42b3      	cmp	r3, r6
   1f13c:	d8ed      	bhi.n	1f11a <nrf91_socket_offload_sendmsg+0xae>
   1f13e:	e7c1      	b.n	1f0c4 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   1f140:	f853 100a 	ldr.w	r1, [r3, sl]
   1f144:	6863      	ldr	r3, [r4, #4]
   1f146:	4439      	add	r1, r7
   1f148:	9301      	str	r3, [sp, #4]
   1f14a:	6823      	ldr	r3, [r4, #0]
   1f14c:	4640      	mov	r0, r8
   1f14e:	9300      	str	r3, [sp, #0]
   1f150:	1bd2      	subs	r2, r2, r7
   1f152:	464b      	mov	r3, r9
   1f154:	f00d f820 	bl	2c198 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   1f158:	1e01      	subs	r1, r0, #0
   1f15a:	db05      	blt.n	1f168 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   1f15c:	440f      	add	r7, r1
			len += ret;
   1f15e:	440d      	add	r5, r1
   1f160:	e7e3      	b.n	1f12a <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   1f162:	2600      	movs	r6, #0
	len = 0;
   1f164:	4635      	mov	r5, r6
   1f166:	e7e7      	b.n	1f138 <nrf91_socket_offload_sendmsg+0xcc>
   1f168:	460d      	mov	r5, r1
   1f16a:	e7ab      	b.n	1f0c4 <nrf91_socket_offload_sendmsg+0x58>
   1f16c:	2000ca60 	.word	0x2000ca60
   1f170:	2000d522 	.word	0x2000d522

0001f174 <allocate_ctx>:
{
   1f174:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   1f17e:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f180:	480b      	ldr	r0, [pc, #44]	; (1f1b0 <allocate_ctx+0x3c>)
   1f182:	f00d f8af 	bl	2c2e4 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f186:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   1f188:	4a0a      	ldr	r2, [pc, #40]	; (1f1b4 <allocate_ctx+0x40>)
   1f18a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1f18e:	3101      	adds	r1, #1
   1f190:	d108      	bne.n	1f1a4 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   1f192:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   1f196:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   1f19a:	4805      	ldr	r0, [pc, #20]	; (1f1b0 <allocate_ctx+0x3c>)
   1f19c:	f00d f8a4 	bl	2c2e8 <k_mutex_unlock.isra.0>
}
   1f1a0:	4628      	mov	r0, r5
   1f1a2:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1f1a4:	3301      	adds	r3, #1
   1f1a6:	2b08      	cmp	r3, #8
   1f1a8:	d1ef      	bne.n	1f18a <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   1f1aa:	2500      	movs	r5, #0
   1f1ac:	e7f5      	b.n	1f19a <allocate_ctx+0x26>
   1f1ae:	bf00      	nop
   1f1b0:	2000c9fc 	.word	0x2000c9fc
   1f1b4:	2000d084 	.word	0x2000d084

0001f1b8 <release_ctx>:
{
   1f1b8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f1ba:	4d09      	ldr	r5, [pc, #36]	; (1f1e0 <release_ctx+0x28>)
{
   1f1bc:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   1f1be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f1c2:	4628      	mov	r0, r5
   1f1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1c8:	f00d f88c 	bl	2c2e4 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   1f1cc:	2300      	movs	r3, #0
   1f1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	k_mutex_unlock(&ctx_lock);
   1f1d2:	4628      	mov	r0, r5
	ctx->lock = NULL;
   1f1d4:	e9c4 2300 	strd	r2, r3, [r4]
}
   1f1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   1f1dc:	f00d b884 	b.w	2c2e8 <k_mutex_unlock.isra.0>
   1f1e0:	2000c9fc 	.word	0x2000c9fc

0001f1e4 <nrf91_socket_offload_accept>:
{
   1f1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f1e8:	b08b      	sub	sp, #44	; 0x2c
   1f1ea:	4607      	mov	r7, r0
   1f1ec:	460c      	mov	r4, r1
   1f1ee:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   1f1f0:	f7fb fac0 	bl	1a774 <z_reserve_fd>
   1f1f4:	4606      	mov	r6, r0
	if (fd < 0) {
   1f1f6:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   1f1f8:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   1f1fa:	db23      	blt.n	1f244 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f1fc:	b32c      	cbz	r4, 1f24a <nrf91_socket_offload_accept+0x66>
   1f1fe:	b33d      	cbz	r5, 1f250 <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f200:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1f202:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   1f204:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   1f206:	bf0c      	ite	eq
   1f208:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1f20a:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1f20c:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   1f20e:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   1f210:	4639      	mov	r1, r7
   1f212:	f00e fa86 	bl	2d722 <nrf_accept>
	if (new_sd < 0) {
   1f216:	f1b0 0900 	subs.w	r9, r0, #0
   1f21a:	db3c      	blt.n	1f296 <nrf91_socket_offload_accept+0xb2>
	ctx = allocate_ctx(new_sd);
   1f21c:	f7ff ffaa 	bl	1f174 <allocate_ctx>
	if (ctx == NULL) {
   1f220:	4680      	mov	r8, r0
   1f222:	b9c0      	cbnz	r0, 1f256 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   1f224:	f00c fdde 	bl	2bde4 <__errno>
   1f228:	230c      	movs	r3, #12
   1f22a:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   1f22c:	4648      	mov	r0, r9
   1f22e:	f00e fa15 	bl	2d65c <nrf_close>
	if (ctx != NULL) {
   1f232:	f1b8 0f00 	cmp.w	r8, #0
   1f236:	d002      	beq.n	1f23e <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   1f238:	4640      	mov	r0, r8
   1f23a:	f7ff ffbd 	bl	1f1b8 <release_ctx>
	z_free_fd(fd);
   1f23e:	4630      	mov	r0, r6
   1f240:	f7fb fae6 	bl	1a810 <z_free_fd>
		return -1;
   1f244:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f248:	e018      	b.n	1f27c <nrf91_socket_offload_accept+0x98>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f24a:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f24c:	4627      	mov	r7, r4
   1f24e:	e7df      	b.n	1f210 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   1f250:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1f252:	462f      	mov	r7, r5
   1f254:	e7dc      	b.n	1f210 <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   1f256:	b164      	cbz	r4, 1f272 <nrf91_socket_offload_accept+0x8e>
   1f258:	b15d      	cbz	r5, 1f272 <nrf91_socket_offload_accept+0x8e>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1f25a:	687b      	ldr	r3, [r7, #4]
   1f25c:	2b02      	cmp	r3, #2
   1f25e:	d111      	bne.n	1f284 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in);
   1f260:	2308      	movs	r3, #8
   1f262:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   1f264:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f268:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1f26a:	2301      	movs	r3, #1
   1f26c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1f26e:	9b04      	ldr	r3, [sp, #16]
   1f270:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   1f272:	4641      	mov	r1, r8
   1f274:	4630      	mov	r0, r6
   1f276:	4a0b      	ldr	r2, [pc, #44]	; (1f2a4 <nrf91_socket_offload_accept+0xc0>)
   1f278:	f7fb fab2 	bl	1a7e0 <z_finalize_fd>
}
   1f27c:	4630      	mov	r0, r6
   1f27e:	b00b      	add	sp, #44	; 0x2c
   1f280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   1f284:	2b0a      	cmp	r3, #10
   1f286:	d1d1      	bne.n	1f22c <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   1f288:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   1f28a:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   1f28c:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   1f28e:	a901      	add	r1, sp, #4
   1f290:	f00c ff55 	bl	2c13e <nrf_to_z_ipv6>
   1f294:	e7ed      	b.n	1f272 <nrf91_socket_offload_accept+0x8e>
	if (new_sd != -1) {
   1f296:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1f29a:	d0d0      	beq.n	1f23e <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   1f29c:	f04f 0800 	mov.w	r8, #0
   1f2a0:	e7c4      	b.n	1f22c <nrf91_socket_offload_accept+0x48>
   1f2a2:	bf00      	nop
   1f2a4:	0002ecc0 	.word	0x0002ecc0

0001f2a8 <nrf91_socket_create>:
{
   1f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   1f2ac:	1e0e      	subs	r6, r1, #0
{
   1f2ae:	4605      	mov	r5, r0
   1f2b0:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   1f2b2:	da15      	bge.n	1f2e0 <nrf91_socket_create+0x38>
	k_sched_lock();
   1f2b4:	f007 feec 	bl	27090 <k_sched_lock>
	*offload_lock = true;
   1f2b8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1f360 <nrf91_socket_create+0xb8>
   1f2bc:	2301      	movs	r3, #1
   1f2be:	f888 3000 	strb.w	r3, [r8]
	return z_impl_zsock_socket(family, type, proto);
   1f2c2:	463a      	mov	r2, r7
   1f2c4:	4628      	mov	r0, r5
   1f2c6:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   1f2ca:	f7fc fbc7 	bl	1ba5c <z_impl_zsock_socket>
	*offload_lock = false;
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	f888 3000 	strb.w	r3, [r8]
   1f2d4:	4604      	mov	r4, r0
	k_sched_unlock();
   1f2d6:	f008 fb37 	bl	27948 <k_sched_unlock>
}
   1f2da:	4620      	mov	r0, r4
   1f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   1f2e0:	0073      	lsls	r3, r6, #1
   1f2e2:	d504      	bpl.n	1f2ee <nrf91_socket_create+0x46>
	k_sched_lock();
   1f2e4:	f007 fed4 	bl	27090 <k_sched_lock>
	*offload_lock = true;
   1f2e8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1f364 <nrf91_socket_create+0xbc>
   1f2ec:	e7e6      	b.n	1f2bc <nrf91_socket_create+0x14>
	fd = z_reserve_fd();
   1f2ee:	f7fb fa41 	bl	1a774 <z_reserve_fd>
	if (fd < 0) {
   1f2f2:	1e04      	subs	r4, r0, #0
   1f2f4:	db0e      	blt.n	1f314 <nrf91_socket_create+0x6c>
	family = z_to_nrf_family(family);
   1f2f6:	b2ad      	uxth	r5, r5
	switch (z_family) {
   1f2f8:	2d03      	cmp	r5, #3
   1f2fa:	d804      	bhi.n	1f306 <nrf91_socket_create+0x5e>
   1f2fc:	4b1a      	ldr	r3, [pc, #104]	; (1f368 <nrf91_socket_create+0xc0>)
   1f2fe:	575d      	ldrsb	r5, [r3, r5]
	if (family == -EAFNOSUPPORT) {
   1f300:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   1f304:	d109      	bne.n	1f31a <nrf91_socket_create+0x72>
		errno = EAFNOSUPPORT;
   1f306:	f00c fd6d 	bl	2bde4 <__errno>
   1f30a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   1f30c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   1f30e:	4620      	mov	r0, r4
   1f310:	f7fb fa7e 	bl	1a810 <z_free_fd>
		return -1;
   1f314:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f318:	e7df      	b.n	1f2da <nrf91_socket_create+0x32>
	proto = z_to_nrf_protocol(proto);
   1f31a:	4638      	mov	r0, r7
   1f31c:	f00c fe8e 	bl	2c03c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   1f320:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   1f324:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   1f326:	d103      	bne.n	1f330 <nrf91_socket_create+0x88>
		errno = EPROTONOSUPPORT;
   1f328:	f00c fd5c 	bl	2bde4 <__errno>
   1f32c:	237b      	movs	r3, #123	; 0x7b
   1f32e:	e7ed      	b.n	1f30c <nrf91_socket_create+0x64>
	retval = nrf_socket(family, type, proto);
   1f330:	4628      	mov	r0, r5
   1f332:	4631      	mov	r1, r6
   1f334:	f00e f981 	bl	2d63a <nrf_socket>
	if (sd < 0) {
   1f338:	1e05      	subs	r5, r0, #0
   1f33a:	dbe8      	blt.n	1f30e <nrf91_socket_create+0x66>
	ctx = allocate_ctx(sd);
   1f33c:	f7ff ff1a 	bl	1f174 <allocate_ctx>
	if (ctx == NULL) {
   1f340:	4601      	mov	r1, r0
   1f342:	b938      	cbnz	r0, 1f354 <nrf91_socket_create+0xac>
		errno = ENOMEM;
   1f344:	f00c fd4e 	bl	2bde4 <__errno>
   1f348:	230c      	movs	r3, #12
   1f34a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   1f34c:	4628      	mov	r0, r5
   1f34e:	f00e f985 	bl	2d65c <nrf_close>
   1f352:	e7dc      	b.n	1f30e <nrf91_socket_create+0x66>
	z_finalize_fd(fd, ctx,
   1f354:	4620      	mov	r0, r4
   1f356:	4a05      	ldr	r2, [pc, #20]	; (1f36c <nrf91_socket_create+0xc4>)
   1f358:	f7fb fa42 	bl	1a7e0 <z_finalize_fd>
	return fd;
   1f35c:	e7bd      	b.n	1f2da <nrf91_socket_create+0x32>
   1f35e:	bf00      	nop
   1f360:	2000d5a2 	.word	0x2000d5a2
   1f364:	2000d5a3 	.word	0x2000d5a3
   1f368:	000300c0 	.word	0x000300c0
   1f36c:	0002ecc0 	.word	0x0002ecc0

0001f370 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   1f370:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   1f372:	4805      	ldr	r0, [pc, #20]	; (1f388 <at_monitor_sys_init+0x18>)
   1f374:	f006 f8ce 	bl	25514 <nrf_modem_at_notif_handler_set>
	if (err) {
   1f378:	4602      	mov	r2, r0
   1f37a:	b118      	cbz	r0, 1f384 <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   1f37c:	2145      	movs	r1, #69	; 0x45
   1f37e:	4803      	ldr	r0, [pc, #12]	; (1f38c <at_monitor_sys_init+0x1c>)
   1f380:	f00c fbc5 	bl	2bb0e <z_log_minimal_printk>
	}

	return 0;
}
   1f384:	2000      	movs	r0, #0
   1f386:	bd08      	pop	{r3, pc}
   1f388:	0001f391 	.word	0x0001f391
   1f38c:	000300cf 	.word	0x000300cf

0001f390 <at_monitor_dispatch>:
{
   1f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(notif != NULL);
   1f392:	4604      	mov	r4, r0
   1f394:	b940      	cbnz	r0, 1f3a8 <at_monitor_dispatch+0x18>
   1f396:	4931      	ldr	r1, [pc, #196]	; (1f45c <at_monitor_dispatch+0xcc>)
   1f398:	4831      	ldr	r0, [pc, #196]	; (1f460 <at_monitor_dispatch+0xd0>)
   1f39a:	2224      	movs	r2, #36	; 0x24
   1f39c:	f00c fa06 	bl	2b7ac <printk>
   1f3a0:	2124      	movs	r1, #36	; 0x24
   1f3a2:	482e      	ldr	r0, [pc, #184]	; (1f45c <at_monitor_dispatch+0xcc>)
   1f3a4:	f00c fb99 	bl	2bada <assert_post_action>
{
   1f3a8:	4d2e      	ldr	r5, [pc, #184]	; (1f464 <at_monitor_dispatch+0xd4>)
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1f3aa:	4e2f      	ldr	r6, [pc, #188]	; (1f468 <at_monitor_dispatch+0xd8>)
   1f3ac:	4f2b      	ldr	r7, [pc, #172]	; (1f45c <at_monitor_dispatch+0xcc>)
   1f3ae:	42b5      	cmp	r5, r6
   1f3b0:	d908      	bls.n	1f3c4 <at_monitor_dispatch+0x34>
   1f3b2:	4639      	mov	r1, r7
   1f3b4:	482a      	ldr	r0, [pc, #168]	; (1f460 <at_monitor_dispatch+0xd0>)
   1f3b6:	222a      	movs	r2, #42	; 0x2a
   1f3b8:	f00c f9f8 	bl	2b7ac <printk>
   1f3bc:	212a      	movs	r1, #42	; 0x2a
   1f3be:	4638      	mov	r0, r7
   1f3c0:	f00c fb8b 	bl	2bada <assert_post_action>
   1f3c4:	42b5      	cmp	r5, r6
   1f3c6:	d310      	bcc.n	1f3ea <at_monitor_dispatch+0x5a>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f3c8:	4d28      	ldr	r5, [pc, #160]	; (1f46c <at_monitor_dispatch+0xdc>)
   1f3ca:	4e29      	ldr	r6, [pc, #164]	; (1f470 <at_monitor_dispatch+0xe0>)
   1f3cc:	4f23      	ldr	r7, [pc, #140]	; (1f45c <at_monitor_dispatch+0xcc>)
   1f3ce:	42b5      	cmp	r5, r6
   1f3d0:	d908      	bls.n	1f3e4 <at_monitor_dispatch+0x54>
   1f3d2:	4639      	mov	r1, r7
   1f3d4:	4822      	ldr	r0, [pc, #136]	; (1f460 <at_monitor_dispatch+0xd0>)
   1f3d6:	2232      	movs	r2, #50	; 0x32
   1f3d8:	f00c f9e8 	bl	2b7ac <printk>
   1f3dc:	2132      	movs	r1, #50	; 0x32
   1f3de:	4638      	mov	r0, r7
   1f3e0:	f00c fb7b 	bl	2bada <assert_post_action>
   1f3e4:	42b5      	cmp	r5, r6
   1f3e6:	d30f      	bcc.n	1f408 <at_monitor_dispatch+0x78>
}
   1f3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f3ea:	7a2b      	ldrb	r3, [r5, #8]
   1f3ec:	b923      	cbnz	r3, 1f3f8 <at_monitor_dispatch+0x68>
   1f3ee:	6829      	ldr	r1, [r5, #0]
   1f3f0:	b921      	cbnz	r1, 1f3fc <at_monitor_dispatch+0x6c>
			e->handler(notif);
   1f3f2:	4620      	mov	r0, r4
   1f3f4:	686b      	ldr	r3, [r5, #4]
   1f3f6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   1f3f8:	350c      	adds	r5, #12
   1f3fa:	e7d8      	b.n	1f3ae <at_monitor_dispatch+0x1e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f3fc:	4620      	mov	r0, r4
   1f3fe:	f00e fd8e 	bl	2df1e <strstr>
   1f402:	2800      	cmp	r0, #0
   1f404:	d1f5      	bne.n	1f3f2 <at_monitor_dispatch+0x62>
   1f406:	e7f7      	b.n	1f3f8 <at_monitor_dispatch+0x68>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f408:	7a2b      	ldrb	r3, [r5, #8]
   1f40a:	b9c3      	cbnz	r3, 1f43e <at_monitor_dispatch+0xae>
   1f40c:	6829      	ldr	r1, [r5, #0]
   1f40e:	b989      	cbnz	r1, 1f434 <at_monitor_dispatch+0xa4>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   1f410:	4620      	mov	r0, r4
   1f412:	f7fa f8a3 	bl	1955c <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   1f416:	2200      	movs	r2, #0
   1f418:	1d41      	adds	r1, r0, #5
   1f41a:	2300      	movs	r3, #0
   1f41c:	4815      	ldr	r0, [pc, #84]	; (1f474 <at_monitor_dispatch+0xe4>)
   1f41e:	f00e fa2a 	bl	2d876 <k_heap_alloc>
	if (!at_notif) {
   1f422:	4605      	mov	r5, r0
   1f424:	b968      	cbnz	r0, 1f442 <at_monitor_dispatch+0xb2>
		LOG_WRN("No heap space for incoming notification: %s",
   1f426:	4622      	mov	r2, r4
}
   1f428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   1f42c:	2157      	movs	r1, #87	; 0x57
   1f42e:	4812      	ldr	r0, [pc, #72]	; (1f478 <at_monitor_dispatch+0xe8>)
   1f430:	f00c bb6d 	b.w	2bb0e <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   1f434:	4620      	mov	r0, r4
   1f436:	f00e fd72 	bl	2df1e <strstr>
   1f43a:	2800      	cmp	r0, #0
   1f43c:	d1e8      	bne.n	1f410 <at_monitor_dispatch+0x80>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f43e:	350c      	adds	r5, #12
   1f440:	e7c5      	b.n	1f3ce <at_monitor_dispatch+0x3e>
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1f442:	4621      	mov	r1, r4
   1f444:	3004      	adds	r0, #4
   1f446:	f00e fd2f 	bl	2dea8 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   1f44a:	4629      	mov	r1, r5
   1f44c:	480b      	ldr	r0, [pc, #44]	; (1f47c <at_monitor_dispatch+0xec>)
   1f44e:	f00e fa4b 	bl	2d8e8 <k_queue_append>
}
   1f452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   1f456:	480a      	ldr	r0, [pc, #40]	; (1f480 <at_monitor_dispatch+0xf0>)
   1f458:	f007 bca0 	b.w	26d9c <k_work_submit>
   1f45c:	00030101 	.word	0x00030101
   1f460:	0002f296 	.word	0x0002f296
   1f464:	2000c91c 	.word	0x2000c91c
   1f468:	2000c91c 	.word	0x2000c91c
   1f46c:	2000c8bc 	.word	0x2000c8bc
   1f470:	2000c91c 	.word	0x2000c91c
   1f474:	2000c97c 	.word	0x2000c97c
   1f478:	0003012d 	.word	0x0003012d
   1f47c:	2000cabc 	.word	0x2000cabc
   1f480:	2000c65c 	.word	0x2000c65c

0001f484 <at_monitor_task>:
{
   1f484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   1f488:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1f4ec <at_monitor_task+0x68>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f48c:	4f18      	ldr	r7, [pc, #96]	; (1f4f0 <at_monitor_task+0x6c>)
   1f48e:	2200      	movs	r2, #0
   1f490:	2300      	movs	r3, #0
   1f492:	4648      	mov	r0, r9
   1f494:	f007 f936 	bl	26704 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   1f498:	4605      	mov	r5, r0
   1f49a:	bb10      	cbnz	r0, 1f4e2 <at_monitor_task+0x5e>
}
   1f49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   1f4a0:	7a23      	ldrb	r3, [r4, #8]
   1f4a2:	b92b      	cbnz	r3, 1f4b0 <at_monitor_task+0x2c>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   1f4a4:	6821      	ldr	r1, [r4, #0]
   1f4a6:	1d2e      	adds	r6, r5, #4
			if (!e->paused &&
   1f4a8:	b9a9      	cbnz	r1, 1f4d6 <at_monitor_task+0x52>
				e->handler(at_notif->data);
   1f4aa:	4630      	mov	r0, r6
   1f4ac:	6863      	ldr	r3, [r4, #4]
   1f4ae:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f4b0:	340c      	adds	r4, #12
   1f4b2:	42bc      	cmp	r4, r7
   1f4b4:	d908      	bls.n	1f4c8 <at_monitor_task+0x44>
   1f4b6:	4641      	mov	r1, r8
   1f4b8:	480e      	ldr	r0, [pc, #56]	; (1f4f4 <at_monitor_task+0x70>)
   1f4ba:	2253      	movs	r2, #83	; 0x53
   1f4bc:	f00c f976 	bl	2b7ac <printk>
   1f4c0:	2153      	movs	r1, #83	; 0x53
   1f4c2:	4640      	mov	r0, r8
   1f4c4:	f00c fb09 	bl	2bada <assert_post_action>
   1f4c8:	42bc      	cmp	r4, r7
   1f4ca:	d3e9      	bcc.n	1f4a0 <at_monitor_task+0x1c>
		k_heap_free(&at_monitor_heap, at_notif);
   1f4cc:	4629      	mov	r1, r5
   1f4ce:	480a      	ldr	r0, [pc, #40]	; (1f4f8 <at_monitor_task+0x74>)
   1f4d0:	f006 fd48 	bl	25f64 <k_heap_free>
   1f4d4:	e7db      	b.n	1f48e <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   1f4d6:	4630      	mov	r0, r6
   1f4d8:	f00e fd21 	bl	2df1e <strstr>
   1f4dc:	2800      	cmp	r0, #0
   1f4de:	d1e4      	bne.n	1f4aa <at_monitor_task+0x26>
   1f4e0:	e7e6      	b.n	1f4b0 <at_monitor_task+0x2c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   1f4e2:	4c06      	ldr	r4, [pc, #24]	; (1f4fc <at_monitor_task+0x78>)
   1f4e4:	f8df 8018 	ldr.w	r8, [pc, #24]	; 1f500 <at_monitor_task+0x7c>
   1f4e8:	e7e3      	b.n	1f4b2 <at_monitor_task+0x2e>
   1f4ea:	bf00      	nop
   1f4ec:	2000cabc 	.word	0x2000cabc
   1f4f0:	2000c91c 	.word	0x2000c91c
   1f4f4:	0002f296 	.word	0x0002f296
   1f4f8:	2000c97c 	.word	0x2000c97c
   1f4fc:	2000c8bc 	.word	0x2000c8bc
   1f500:	00030101 	.word	0x00030101

0001f504 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   1f504:	4b06      	ldr	r3, [pc, #24]	; (1f520 <is_valid_notification_char+0x1c>)
   1f506:	5cc3      	ldrb	r3, [r0, r3]
   1f508:	f003 0303 	and.w	r3, r3, #3
   1f50c:	2b02      	cmp	r3, #2
   1f50e:	bf08      	it	eq
   1f510:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   1f512:	3841      	subs	r0, #65	; 0x41
   1f514:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   1f516:	2819      	cmp	r0, #25
   1f518:	bf8c      	ite	hi
   1f51a:	2000      	movhi	r0, #0
   1f51c:	2001      	movls	r0, #1
   1f51e:	4770      	bx	lr
   1f520:	00031a3d 	.word	0x00031a3d

0001f524 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   1f524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f526:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f528:	2400      	movs	r4, #0
   1f52a:	4e09      	ldr	r6, [pc, #36]	; (1f550 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   1f52c:	f856 7b04 	ldr.w	r7, [r6], #4
   1f530:	4638      	mov	r0, r7
   1f532:	f7fa f813 	bl	1955c <strlen>
   1f536:	4639      	mov	r1, r7
   1f538:	4602      	mov	r2, r0
   1f53a:	4628      	mov	r0, r5
   1f53c:	f00e fcbc 	bl	2deb8 <strncmp>
		if (!diff) {
   1f540:	b120      	cbz	r0, 1f54c <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   1f542:	3401      	adds	r4, #1
   1f544:	2c04      	cmp	r4, #4
   1f546:	d1f1      	bne.n	1f52c <is_result+0x8>
			return true;
		}
	}

	return false;
   1f548:	2000      	movs	r0, #0
}
   1f54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   1f54c:	2001      	movs	r0, #1
   1f54e:	e7fc      	b.n	1f54a <is_result+0x26>
   1f550:	0002ecfc 	.word	0x0002ecfc

0001f554 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1f554:	b510      	push	{r4, lr}
   1f556:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1f558:	f7fa f800 	bl	1955c <strlen>
   1f55c:	2801      	cmp	r0, #1
   1f55e:	d921      	bls.n	1f5a4 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1f560:	7823      	ldrb	r3, [r4, #0]
   1f562:	4912      	ldr	r1, [pc, #72]	; (1f5ac <is_command+0x58>)
   1f564:	5c5a      	ldrb	r2, [r3, r1]
   1f566:	f002 0203 	and.w	r2, r2, #3
   1f56a:	2a02      	cmp	r2, #2
   1f56c:	bf08      	it	eq
   1f56e:	3b20      	subeq	r3, #32
   1f570:	2b41      	cmp	r3, #65	; 0x41
   1f572:	d117      	bne.n	1f5a4 <is_command+0x50>
   1f574:	7863      	ldrb	r3, [r4, #1]
   1f576:	5cca      	ldrb	r2, [r1, r3]
   1f578:	f002 0203 	and.w	r2, r2, #3
   1f57c:	2a02      	cmp	r2, #2
   1f57e:	bf08      	it	eq
   1f580:	3b20      	subeq	r3, #32
   1f582:	2b54      	cmp	r3, #84	; 0x54
   1f584:	d10e      	bne.n	1f5a4 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f586:	78a2      	ldrb	r2, [r4, #2]
   1f588:	2a25      	cmp	r2, #37	; 0x25
   1f58a:	d00d      	beq.n	1f5a8 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1f58c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1f590:	2b23      	cmp	r3, #35	; 0x23
   1f592:	d009      	beq.n	1f5a8 <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1f594:	4610      	mov	r0, r2
   1f596:	f00c ff48 	bl	2c42a <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1f59a:	b910      	cbnz	r0, 1f5a2 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f59c:	fab2 f082 	clz	r0, r2
   1f5a0:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1f5a2:	bd10      	pop	{r4, pc}
		return false;
   1f5a4:	2000      	movs	r0, #0
   1f5a6:	e7fc      	b.n	1f5a2 <is_command+0x4e>
		return true;
   1f5a8:	2001      	movs	r0, #1
   1f5aa:	e7fa      	b.n	1f5a2 <is_command+0x4e>
   1f5ac:	00031a3d 	.word	0x00031a3d

0001f5b0 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   1f5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   1f5b4:	6805      	ldr	r5, [r0, #0]
{
   1f5b6:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   1f5b8:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f5ba:	782b      	ldrb	r3, [r5, #0]
{
   1f5bc:	4680      	mov	r8, r0
   1f5be:	460f      	mov	r7, r1
   1f5c0:	4616      	mov	r6, r2
   1f5c2:	2b00      	cmp	r3, #0
   1f5c4:	f000 80ca 	beq.w	1f75c <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   1f5c8:	4b66      	ldr	r3, [pc, #408]	; (1f764 <at_parse_process_element+0x1b4>)
   1f5ca:	781c      	ldrb	r4, [r3, #0]
   1f5cc:	2c06      	cmp	r4, #6
   1f5ce:	d110      	bne.n	1f5f2 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   1f5d0:	1c6b      	adds	r3, r5, #1
   1f5d2:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   1f5d4:	9a00      	ldr	r2, [sp, #0]
   1f5d6:	7810      	ldrb	r0, [r2, #0]
   1f5d8:	f7ff ff94 	bl	1f504 <is_valid_notification_char>
   1f5dc:	b930      	cbnz	r0, 1f5ec <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f5de:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   1f5e0:	462a      	mov	r2, r5
   1f5e2:	4639      	mov	r1, r7
   1f5e4:	4630      	mov	r0, r6
   1f5e6:	f00c ff89 	bl	2c4fc <at_params_string_put>
   1f5ea:	e01c      	b.n	1f626 <at_parse_process_element+0x76>
			tmpstr++;
   1f5ec:	3201      	adds	r2, #1
   1f5ee:	9200      	str	r2, [sp, #0]
   1f5f0:	e7f0      	b.n	1f5d4 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   1f5f2:	2c07      	cmp	r4, #7
   1f5f4:	d125      	bne.n	1f642 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   1f5f6:	4668      	mov	r0, sp
   1f5f8:	f00c ff20 	bl	2c43c <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   1f5fc:	4a5a      	ldr	r2, [pc, #360]	; (1f768 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   1f5fe:	9b00      	ldr	r3, [sp, #0]
   1f600:	7819      	ldrb	r1, [r3, #0]
   1f602:	5c89      	ldrb	r1, [r1, r2]
   1f604:	0749      	lsls	r1, r1, #29
   1f606:	d115      	bne.n	1f634 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   1f608:	462a      	mov	r2, r5
   1f60a:	1b5b      	subs	r3, r3, r5
   1f60c:	4639      	mov	r1, r7
   1f60e:	4630      	mov	r0, r6
   1f610:	f00c ff74 	bl	2c4fc <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   1f614:	9b00      	ldr	r3, [sp, #0]
   1f616:	781a      	ldrb	r2, [r3, #0]
   1f618:	2a3d      	cmp	r2, #61	; 0x3d
   1f61a:	d10e      	bne.n	1f63a <at_parse_process_element+0x8a>
   1f61c:	785a      	ldrb	r2, [r3, #1]
   1f61e:	2a3f      	cmp	r2, #63	; 0x3f
   1f620:	d101      	bne.n	1f626 <at_parse_process_element+0x76>
			tmpstr += 2;
   1f622:	3302      	adds	r3, #2
			tmpstr++;
   1f624:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   1f626:	2000      	movs	r0, #0
	*str = tmpstr;
   1f628:	9b00      	ldr	r3, [sp, #0]
   1f62a:	f8c8 3000 	str.w	r3, [r8]
}
   1f62e:	b023      	add	sp, #140	; 0x8c
   1f630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   1f634:	3301      	adds	r3, #1
   1f636:	9300      	str	r3, [sp, #0]
   1f638:	e7e1      	b.n	1f5fe <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   1f63a:	2a3f      	cmp	r2, #63	; 0x3f
   1f63c:	d1f3      	bne.n	1f626 <at_parse_process_element+0x76>
			tmpstr++;
   1f63e:	3301      	adds	r3, #1
   1f640:	e7f0      	b.n	1f624 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   1f642:	2c08      	cmp	r4, #8
   1f644:	d103      	bne.n	1f64e <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   1f646:	4610      	mov	r0, r2
   1f648:	f00c ff2a 	bl	2c4a0 <at_params_empty_put>
   1f64c:	e7eb      	b.n	1f626 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   1f64e:	2c02      	cmp	r4, #2
   1f650:	d111      	bne.n	1f676 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   1f652:	9a00      	ldr	r2, [sp, #0]
   1f654:	7811      	ldrb	r1, [r2, #0]
   1f656:	4608      	mov	r0, r1
   1f658:	f00c fee7 	bl	2c42a <is_lfcr>
   1f65c:	b918      	cbnz	r0, 1f666 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f65e:	b111      	cbz	r1, 1f666 <at_parse_process_element+0xb6>
			tmpstr++;
   1f660:	3201      	adds	r2, #1
   1f662:	9200      	str	r2, [sp, #0]
   1f664:	e7f5      	b.n	1f652 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   1f666:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   1f668:	462a      	mov	r2, r5
   1f66a:	4639      	mov	r1, r7
   1f66c:	4630      	mov	r0, r6
   1f66e:	f00c ff45 	bl	2c4fc <at_params_string_put>
		tmpstr++;
   1f672:	9b00      	ldr	r3, [sp, #0]
   1f674:	e7e3      	b.n	1f63e <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   1f676:	2c03      	cmp	r4, #3
   1f678:	d109      	bne.n	1f68e <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   1f67a:	9b00      	ldr	r3, [sp, #0]
   1f67c:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   1f67e:	2a22      	cmp	r2, #34	; 0x22
   1f680:	d003      	beq.n	1f68a <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f682:	b112      	cbz	r2, 1f68a <at_parse_process_element+0xda>
			tmpstr++;
   1f684:	3301      	adds	r3, #1
   1f686:	9300      	str	r3, [sp, #0]
   1f688:	e7f7      	b.n	1f67a <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   1f68a:	1b5b      	subs	r3, r3, r5
   1f68c:	e7ec      	b.n	1f668 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   1f68e:	2c01      	cmp	r4, #1
   1f690:	d13c      	bne.n	1f70c <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f692:	4628      	mov	r0, r5
   1f694:	220a      	movs	r2, #10
   1f696:	a901      	add	r1, sp, #4
   1f698:	f00a f9e6 	bl	29a68 <strtoul>
		tmpstr = next;
   1f69c:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f69e:	4d33      	ldr	r5, [pc, #204]	; (1f76c <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   1f6a0:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   1f6a2:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   1f6a4:	9800      	ldr	r0, [sp, #0]
   1f6a6:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   1f6a8:	2b29      	cmp	r3, #41	; 0x29
   1f6aa:	d01f      	beq.n	1f6ec <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f6ac:	b1f3      	cbz	r3, 1f6ec <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f6ae:	3b2c      	subs	r3, #44	; 0x2c
   1f6b0:	b2db      	uxtb	r3, r3
   1f6b2:	3001      	adds	r0, #1
   1f6b4:	2b11      	cmp	r3, #17
				tmparray[i++] =
   1f6b6:	9000      	str	r0, [sp, #0]
   1f6b8:	d826      	bhi.n	1f708 <at_parse_process_element+0x158>
   1f6ba:	fa25 f303 	lsr.w	r3, r5, r3
   1f6be:	07db      	lsls	r3, r3, #31
   1f6c0:	d522      	bpl.n	1f708 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   1f6c2:	220a      	movs	r2, #10
   1f6c4:	a901      	add	r1, sp, #4
   1f6c6:	f00a f9cf 	bl	29a68 <strtoul>
				tmparray[i++] =
   1f6ca:	ab22      	add	r3, sp, #136	; 0x88
   1f6cc:	f104 0901 	add.w	r9, r4, #1
   1f6d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1f6d4:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   1f6d8:	9800      	ldr	r0, [sp, #0]
   1f6da:	f7f9 ff3f 	bl	1955c <strlen>
   1f6de:	4604      	mov	r4, r0
   1f6e0:	9801      	ldr	r0, [sp, #4]
   1f6e2:	f7f9 ff3b 	bl	1955c <strlen>
   1f6e6:	4284      	cmp	r4, r0
   1f6e8:	d107      	bne.n	1f6fa <at_parse_process_element+0x14a>
				tmparray[i++] =
   1f6ea:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   1f6ec:	4639      	mov	r1, r7
   1f6ee:	4630      	mov	r0, r6
   1f6f0:	00a3      	lsls	r3, r4, #2
   1f6f2:	aa02      	add	r2, sp, #8
   1f6f4:	f00c ff28 	bl	2c548 <at_params_array_put>
		tmpstr++;
   1f6f8:	e7bb      	b.n	1f672 <at_parse_process_element+0xc2>
					tmpstr = next;
   1f6fa:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f6fc:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   1f700:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   1f702:	d0f2      	beq.n	1f6ea <at_parse_process_element+0x13a>
				tmpstr++;
   1f704:	464c      	mov	r4, r9
   1f706:	e7cd      	b.n	1f6a4 <at_parse_process_element+0xf4>
   1f708:	46a1      	mov	r9, r4
   1f70a:	e7fb      	b.n	1f704 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   1f70c:	2c04      	cmp	r4, #4
   1f70e:	d10d      	bne.n	1f72c <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f710:	220a      	movs	r2, #10
   1f712:	4628      	mov	r0, r5
   1f714:	a902      	add	r1, sp, #8
   1f716:	f00a f92b 	bl	29970 <strtoll>
   1f71a:	460b      	mov	r3, r1
		tmpstr = next;
   1f71c:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   1f71e:	4602      	mov	r2, r0
		tmpstr = next;
   1f720:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   1f722:	4630      	mov	r0, r6
   1f724:	4639      	mov	r1, r7
   1f726:	f00c fed2 	bl	2c4ce <at_params_int_put>
   1f72a:	e77c      	b.n	1f626 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   1f72c:	2c05      	cmp	r4, #5
   1f72e:	d10b      	bne.n	1f748 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   1f730:	490d      	ldr	r1, [pc, #52]	; (1f768 <at_parse_process_element+0x1b8>)
   1f732:	9b00      	ldr	r3, [sp, #0]
   1f734:	781a      	ldrb	r2, [r3, #0]
   1f736:	5c52      	ldrb	r2, [r2, r1]
   1f738:	f012 0f44 	tst.w	r2, #68	; 0x44
   1f73c:	d101      	bne.n	1f742 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   1f73e:	1b5b      	subs	r3, r3, r5
   1f740:	e74e      	b.n	1f5e0 <at_parse_process_element+0x30>
			tmpstr++;
   1f742:	3301      	adds	r3, #1
   1f744:	9300      	str	r3, [sp, #0]
   1f746:	e7f4      	b.n	1f732 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   1f748:	2c09      	cmp	r4, #9
   1f74a:	f47f af6c 	bne.w	1f626 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   1f74e:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f750:	781a      	ldrb	r2, [r3, #0]
   1f752:	2a00      	cmp	r2, #0
   1f754:	d0f3      	beq.n	1f73e <at_parse_process_element+0x18e>
			tmpstr++;
   1f756:	3301      	adds	r3, #1
   1f758:	9300      	str	r3, [sp, #0]
   1f75a:	e7f8      	b.n	1f74e <at_parse_process_element+0x19e>
		return -1;
   1f75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f760:	e765      	b.n	1f62e <at_parse_process_element+0x7e>
   1f762:	bf00      	nop
   1f764:	2000d5a5 	.word	0x2000d5a5
   1f768:	00031a3d 	.word	0x00031a3d
   1f76c:	00024001 	.word	0x00024001

0001f770 <at_parse_detect_type>:
{
   1f770:	b570      	push	{r4, r5, r6, lr}
   1f772:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   1f774:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   1f776:	4e64      	ldr	r6, [pc, #400]	; (1f908 <at_parse_detect_type+0x198>)
   1f778:	2900      	cmp	r1, #0
   1f77a:	d137      	bne.n	1f7ec <at_parse_detect_type+0x7c>
   1f77c:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f77e:	2b2b      	cmp	r3, #43	; 0x2b
   1f780:	d001      	beq.n	1f786 <at_parse_detect_type+0x16>
   1f782:	2b25      	cmp	r3, #37	; 0x25
   1f784:	d132      	bne.n	1f7ec <at_parse_detect_type+0x7c>
	state = new_state;
   1f786:	2206      	movs	r2, #6
   1f788:	4b60      	ldr	r3, [pc, #384]	; (1f90c <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f78a:	4620      	mov	r0, r4
	state = new_state;
   1f78c:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f78e:	4960      	ldr	r1, [pc, #384]	; (1f910 <at_parse_detect_type+0x1a0>)
   1f790:	2205      	movs	r2, #5
   1f792:	f00e fb91 	bl	2deb8 <strncmp>
   1f796:	b920      	cbnz	r0, 1f7a2 <at_parse_detect_type+0x32>
			retval = true;
   1f798:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   1f79a:	7030      	strb	r0, [r6, #0]
	return 0;
   1f79c:	2000      	movs	r0, #0
	*str = tmpstr;
   1f79e:	602c      	str	r4, [r5, #0]
	return 0;
   1f7a0:	e064      	b.n	1f86c <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f7a2:	2205      	movs	r2, #5
   1f7a4:	4620      	mov	r0, r4
   1f7a6:	495b      	ldr	r1, [pc, #364]	; (1f914 <at_parse_detect_type+0x1a4>)
   1f7a8:	f00e fb86 	bl	2deb8 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   1f7ac:	2800      	cmp	r0, #0
   1f7ae:	d0f3      	beq.n	1f798 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f7b0:	220b      	movs	r2, #11
   1f7b2:	4620      	mov	r0, r4
   1f7b4:	4958      	ldr	r1, [pc, #352]	; (1f918 <at_parse_detect_type+0x1a8>)
   1f7b6:	f00e fb7f 	bl	2deb8 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   1f7ba:	2800      	cmp	r0, #0
   1f7bc:	d0ec      	beq.n	1f798 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f7be:	220a      	movs	r2, #10
   1f7c0:	4620      	mov	r0, r4
   1f7c2:	4956      	ldr	r1, [pc, #344]	; (1f91c <at_parse_detect_type+0x1ac>)
   1f7c4:	f00e fb78 	bl	2deb8 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   1f7c8:	2800      	cmp	r0, #0
   1f7ca:	d0e5      	beq.n	1f798 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f7cc:	220b      	movs	r2, #11
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	4953      	ldr	r1, [pc, #332]	; (1f920 <at_parse_detect_type+0x1b0>)
   1f7d2:	f00e fb71 	bl	2deb8 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   1f7d6:	2800      	cmp	r0, #0
   1f7d8:	d0de      	beq.n	1f798 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   1f7da:	2207      	movs	r2, #7
   1f7dc:	4620      	mov	r0, r4
   1f7de:	4951      	ldr	r1, [pc, #324]	; (1f924 <at_parse_detect_type+0x1b4>)
   1f7e0:	f00e fb6a 	bl	2deb8 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   1f7e4:	fab0 f080 	clz	r0, r0
   1f7e8:	0940      	lsrs	r0, r0, #5
   1f7ea:	e7d6      	b.n	1f79a <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   1f7ec:	7833      	ldrb	r3, [r6, #0]
   1f7ee:	b113      	cbz	r3, 1f7f6 <at_parse_detect_type+0x86>
	state = new_state;
   1f7f0:	4b46      	ldr	r3, [pc, #280]	; (1f90c <at_parse_detect_type+0x19c>)
   1f7f2:	2202      	movs	r2, #2
   1f7f4:	e043      	b.n	1f87e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   1f7f6:	2900      	cmp	r1, #0
   1f7f8:	dd39      	ble.n	1f86e <at_parse_detect_type+0xfe>
   1f7fa:	4622      	mov	r2, r4
   1f7fc:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   1f7fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f802:	f00c fe12 	bl	2c42a <is_lfcr>
   1f806:	2800      	cmp	r0, #0
   1f808:	d1f8      	bne.n	1f7fc <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   1f80a:	4630      	mov	r0, r6
   1f80c:	f7f9 fea6 	bl	1955c <strlen>
   1f810:	2803      	cmp	r0, #3
   1f812:	d970      	bls.n	1f8f6 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   1f814:	7833      	ldrb	r3, [r6, #0]
   1f816:	4a44      	ldr	r2, [pc, #272]	; (1f928 <at_parse_detect_type+0x1b8>)
   1f818:	5c99      	ldrb	r1, [r3, r2]
   1f81a:	f001 0103 	and.w	r1, r1, #3
   1f81e:	2902      	cmp	r1, #2
   1f820:	bf08      	it	eq
   1f822:	3b20      	subeq	r3, #32
   1f824:	2b41      	cmp	r3, #65	; 0x41
   1f826:	d166      	bne.n	1f8f6 <at_parse_detect_type+0x186>
   1f828:	7873      	ldrb	r3, [r6, #1]
   1f82a:	5cd1      	ldrb	r1, [r2, r3]
   1f82c:	f001 0103 	and.w	r1, r1, #3
   1f830:	2902      	cmp	r1, #2
   1f832:	bf08      	it	eq
   1f834:	3b20      	subeq	r3, #32
   1f836:	2b54      	cmp	r3, #84	; 0x54
   1f838:	d15d      	bne.n	1f8f6 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   1f83a:	78b3      	ldrb	r3, [r6, #2]
   1f83c:	5cd1      	ldrb	r1, [r2, r3]
   1f83e:	f001 0103 	and.w	r1, r1, #3
   1f842:	2902      	cmp	r1, #2
   1f844:	bf08      	it	eq
   1f846:	3b20      	subeq	r3, #32
   1f848:	2b2b      	cmp	r3, #43	; 0x2b
   1f84a:	d00a      	beq.n	1f862 <at_parse_detect_type+0xf2>
   1f84c:	2b25      	cmp	r3, #37	; 0x25
   1f84e:	d152      	bne.n	1f8f6 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   1f850:	78f3      	ldrb	r3, [r6, #3]
   1f852:	5cd2      	ldrb	r2, [r2, r3]
   1f854:	f002 0203 	and.w	r2, r2, #3
   1f858:	2a02      	cmp	r2, #2
   1f85a:	bf08      	it	eq
   1f85c:	3b20      	subeq	r3, #32
   1f85e:	2b58      	cmp	r3, #88	; 0x58
   1f860:	d049      	beq.n	1f8f6 <at_parse_detect_type+0x186>
	state = new_state;
   1f862:	2209      	movs	r2, #9
		return -2;
   1f864:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   1f868:	4b28      	ldr	r3, [pc, #160]	; (1f90c <at_parse_detect_type+0x19c>)
   1f86a:	701a      	strb	r2, [r3, #0]
}
   1f86c:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   1f86e:	d108      	bne.n	1f882 <at_parse_detect_type+0x112>
   1f870:	4620      	mov	r0, r4
   1f872:	f7ff fe6f 	bl	1f554 <is_command>
   1f876:	4b25      	ldr	r3, [pc, #148]	; (1f90c <at_parse_detect_type+0x19c>)
   1f878:	2800      	cmp	r0, #0
   1f87a:	d0ba      	beq.n	1f7f2 <at_parse_detect_type+0x82>
	state = new_state;
   1f87c:	2207      	movs	r2, #7
   1f87e:	701a      	strb	r2, [r3, #0]
}
   1f880:	e78c      	b.n	1f79c <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   1f882:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   1f884:	4b28      	ldr	r3, [pc, #160]	; (1f928 <at_parse_detect_type+0x1b8>)
   1f886:	5cd3      	ldrb	r3, [r2, r3]
   1f888:	0759      	lsls	r1, r3, #29
   1f88a:	d403      	bmi.n	1f894 <at_parse_detect_type+0x124>
   1f88c:	2a2d      	cmp	r2, #45	; 0x2d
   1f88e:	d001      	beq.n	1f894 <at_parse_detect_type+0x124>
   1f890:	2a2b      	cmp	r2, #43	; 0x2b
   1f892:	d102      	bne.n	1f89a <at_parse_detect_type+0x12a>
	state = new_state;
   1f894:	2204      	movs	r2, #4
   1f896:	4b1d      	ldr	r3, [pc, #116]	; (1f90c <at_parse_detect_type+0x19c>)
   1f898:	e7f1      	b.n	1f87e <at_parse_detect_type+0x10e>
	if (chr == '"') {
   1f89a:	2a22      	cmp	r2, #34	; 0x22
   1f89c:	d006      	beq.n	1f8ac <at_parse_detect_type+0x13c>
	if (chr == '(') {
   1f89e:	2a28      	cmp	r2, #40	; 0x28
   1f8a0:	d109      	bne.n	1f8b6 <at_parse_detect_type+0x146>
   1f8a2:	2201      	movs	r2, #1
   1f8a4:	4b19      	ldr	r3, [pc, #100]	; (1f90c <at_parse_detect_type+0x19c>)
		tmpstr++;
   1f8a6:	4414      	add	r4, r2
	state = new_state;
   1f8a8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1f8aa:	e777      	b.n	1f79c <at_parse_detect_type+0x2c>
	state = new_state;
   1f8ac:	2203      	movs	r2, #3
   1f8ae:	4b17      	ldr	r3, [pc, #92]	; (1f90c <at_parse_detect_type+0x19c>)
		tmpstr++;
   1f8b0:	3401      	adds	r4, #1
	state = new_state;
   1f8b2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   1f8b4:	e772      	b.n	1f79c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   1f8b6:	4610      	mov	r0, r2
   1f8b8:	f00c fdb7 	bl	2c42a <is_lfcr>
   1f8bc:	b178      	cbz	r0, 1f8de <at_parse_detect_type+0x16e>
   1f8be:	4913      	ldr	r1, [pc, #76]	; (1f90c <at_parse_detect_type+0x19c>)
   1f8c0:	780b      	ldrb	r3, [r1, #0]
   1f8c2:	2b04      	cmp	r3, #4
   1f8c4:	d108      	bne.n	1f8d8 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   1f8c6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1f8ca:	f00c fdae 	bl	2c42a <is_lfcr>
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	d1f9      	bne.n	1f8c6 <at_parse_detect_type+0x156>
	state = new_state;
   1f8d2:	2305      	movs	r3, #5
   1f8d4:	700b      	strb	r3, [r1, #0]
}
   1f8d6:	e761      	b.n	1f79c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   1f8d8:	2b08      	cmp	r3, #8
   1f8da:	f43f af5f 	beq.w	1f79c <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f8de:	3a2c      	subs	r2, #44	; 0x2c
   1f8e0:	b2d2      	uxtb	r2, r2
   1f8e2:	2a11      	cmp	r2, #17
   1f8e4:	d80c      	bhi.n	1f900 <at_parse_detect_type+0x190>
   1f8e6:	4b11      	ldr	r3, [pc, #68]	; (1f92c <at_parse_detect_type+0x1bc>)
   1f8e8:	fa23 f202 	lsr.w	r2, r3, r2
   1f8ec:	07d3      	lsls	r3, r2, #31
   1f8ee:	d507      	bpl.n	1f900 <at_parse_detect_type+0x190>
	state = new_state;
   1f8f0:	2208      	movs	r2, #8
   1f8f2:	4b06      	ldr	r3, [pc, #24]	; (1f90c <at_parse_detect_type+0x19c>)
   1f8f4:	e7c3      	b.n	1f87e <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   1f8f6:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1f8f8:	2b2b      	cmp	r3, #43	; 0x2b
   1f8fa:	d001      	beq.n	1f900 <at_parse_detect_type+0x190>
   1f8fc:	2b25      	cmp	r3, #37	; 0x25
   1f8fe:	d1c0      	bne.n	1f882 <at_parse_detect_type+0x112>
		return -1;
   1f900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		*str = tmpstr;
   1f904:	602c      	str	r4, [r5, #0]
		return -1;
   1f906:	e7b1      	b.n	1f86c <at_parse_detect_type+0xfc>
   1f908:	2000d5a4 	.word	0x2000d5a4
   1f90c:	2000d5a5 	.word	0x2000d5a5
   1f910:	00030169 	.word	0x00030169
   1f914:	0003016f 	.word	0x0003016f
   1f918:	00030175 	.word	0x00030175
   1f91c:	00030181 	.word	0x00030181
   1f920:	0003018c 	.word	0x0003018c
   1f924:	00030198 	.word	0x00030198
   1f928:	00031a3d 	.word	0x00031a3d
   1f92c:	00024001 	.word	0x00024001

0001f930 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   1f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f934:	4689      	mov	r9, r1
   1f936:	4616      	mov	r6, r2
   1f938:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1f93a:	4680      	mov	r8, r0
{
   1f93c:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   1f93e:	2800      	cmp	r0, #0
   1f940:	f000 8097 	beq.w	1fa72 <at_parser_max_params_from_str+0x142>
   1f944:	2a00      	cmp	r2, #0
   1f946:	f000 8094 	beq.w	1fa72 <at_parser_max_params_from_str+0x142>
   1f94a:	6853      	ldr	r3, [r2, #4]
   1f94c:	2b00      	cmp	r3, #0
   1f94e:	f000 8090 	beq.w	1fa72 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   1f952:	2500      	movs	r5, #0
	int index = 0;
   1f954:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   1f956:	4610      	mov	r0, r2
   1f958:	f000 f8e8 	bl	1fb2c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   1f95c:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   1f95e:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   1f962:	429f      	cmp	r7, r3
   1f964:	bf28      	it	cs
   1f966:	461f      	movcs	r7, r3
	state = IDLE;
   1f968:	4b43      	ldr	r3, [pc, #268]	; (1fa78 <at_parser_max_params_from_str+0x148>)
   1f96a:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   1f96c:	4b43      	ldr	r3, [pc, #268]	; (1fa7c <at_parser_max_params_from_str+0x14c>)
   1f96e:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   1f970:	9b03      	ldr	r3, [sp, #12]
   1f972:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1f974:	2a00      	cmp	r2, #0
   1f976:	d055      	beq.n	1fa24 <at_parser_max_params_from_str+0xf4>
   1f978:	42a7      	cmp	r7, r4
   1f97a:	d953      	bls.n	1fa24 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   1f97c:	4940      	ldr	r1, [pc, #256]	; (1fa80 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   1f97e:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   1f980:	5c52      	ldrb	r2, [r2, r1]
   1f982:	0711      	lsls	r1, r2, #28
			str++;
   1f984:	bf48      	it	mi
   1f986:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   1f988:	4621      	mov	r1, r4
			str++;
   1f98a:	bf48      	it	mi
   1f98c:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   1f98e:	f7ff feef 	bl	1f770 <at_parse_detect_type>
		if (ret == -1) {
   1f992:	1c42      	adds	r2, r0, #1
   1f994:	d046      	beq.n	1fa24 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   1f996:	3002      	adds	r0, #2
			index = 0;
   1f998:	bf08      	it	eq
   1f99a:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   1f99c:	4632      	mov	r2, r6
   1f99e:	4621      	mov	r1, r4
   1f9a0:	a803      	add	r0, sp, #12
			str = *at_params_str;
   1f9a2:	bf08      	it	eq
   1f9a4:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   1f9a8:	f7ff fe02 	bl	1f5b0 <at_parse_process_element>
   1f9ac:	3001      	adds	r0, #1
   1f9ae:	d039      	beq.n	1fa24 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   1f9b0:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   1f9b2:	7813      	ldrb	r3, [r2, #0]
   1f9b4:	3b2c      	subs	r3, #44	; 0x2c
   1f9b6:	b2db      	uxtb	r3, r3
   1f9b8:	2b11      	cmp	r3, #17
   1f9ba:	d81b      	bhi.n	1f9f4 <at_parser_max_params_from_str+0xc4>
   1f9bc:	4931      	ldr	r1, [pc, #196]	; (1fa84 <at_parser_max_params_from_str+0x154>)
   1f9be:	fa21 f303 	lsr.w	r3, r1, r3
   1f9c2:	07db      	lsls	r3, r3, #31
   1f9c4:	d516      	bpl.n	1f9f4 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   1f9c6:	7850      	ldrb	r0, [r2, #1]
   1f9c8:	f00c fd2f 	bl	2c42a <is_lfcr>
   1f9cc:	b178      	cbz	r0, 1f9ee <at_parser_max_params_from_str+0xbe>
				index++;
   1f9ce:	3401      	adds	r4, #1
				if (index == max_params) {
   1f9d0:	42bc      	cmp	r4, r7
   1f9d2:	d046      	beq.n	1fa62 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   1f9d4:	4621      	mov	r1, r4
   1f9d6:	a803      	add	r0, sp, #12
   1f9d8:	f7ff feca 	bl	1f770 <at_parse_detect_type>
   1f9dc:	3001      	adds	r0, #1
   1f9de:	d021      	beq.n	1fa24 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   1f9e0:	4632      	mov	r2, r6
   1f9e2:	4621      	mov	r1, r4
   1f9e4:	a803      	add	r0, sp, #12
   1f9e6:	f7ff fde3 	bl	1f5b0 <at_parse_process_element>
   1f9ea:	3001      	adds	r0, #1
   1f9ec:	d01a      	beq.n	1fa24 <at_parser_max_params_from_str+0xf4>
			str++;
   1f9ee:	9b03      	ldr	r3, [sp, #12]
   1f9f0:	3301      	adds	r3, #1
   1f9f2:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   1f9f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1f9f8:	f89b 0000 	ldrb.w	r0, [fp]
   1f9fc:	f00c fd15 	bl	2c42a <is_lfcr>
   1fa00:	b350      	cbz	r0, 1fa58 <at_parser_max_params_from_str+0x128>
   1fa02:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   1fa06:	9101      	str	r1, [sp, #4]
   1fa08:	eba1 0a0b 	sub.w	sl, r1, fp
   1fa0c:	f811 2b01 	ldrb.w	r2, [r1], #1
   1fa10:	4610      	mov	r0, r2
   1fa12:	f00c fd0a 	bl	2c42a <is_lfcr>
   1fa16:	9b01      	ldr	r3, [sp, #4]
   1fa18:	2800      	cmp	r0, #0
   1fa1a:	d1f4      	bne.n	1fa06 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1fa1c:	b99a      	cbnz	r2, 1fa46 <at_parser_max_params_from_str+0x116>
				str += i;
   1fa1e:	9b03      	ldr	r3, [sp, #12]
   1fa20:	4453      	add	r3, sl
   1fa22:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   1fa24:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   1fa26:	b9f5      	cbnz	r5, 1fa66 <at_parser_max_params_from_str+0x136>
   1fa28:	7823      	ldrb	r3, [r4, #0]
   1fa2a:	b11b      	cbz	r3, 1fa34 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   1fa2c:	4620      	mov	r0, r4
   1fa2e:	f7ff fd79 	bl	1f524 <is_result>
   1fa32:	b1d8      	cbz	r0, 1fa6c <at_parser_max_params_from_str+0x13c>
	return 0;
   1fa34:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   1fa36:	f1b9 0f00 	cmp.w	r9, #0
   1fa3a:	d001      	beq.n	1fa40 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   1fa3c:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   1fa40:	b005      	add	sp, #20
   1fa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1fa46:	2a2b      	cmp	r2, #43	; 0x2b
   1fa48:	d0e9      	beq.n	1fa1e <at_parser_max_params_from_str+0xee>
   1fa4a:	2a25      	cmp	r2, #37	; 0x25
   1fa4c:	d0e7      	beq.n	1fa1e <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   1fa4e:	4618      	mov	r0, r3
   1fa50:	f7ff fd68 	bl	1f524 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   1fa54:	2800      	cmp	r0, #0
   1fa56:	d1e2      	bne.n	1fa1e <at_parser_max_params_from_str+0xee>
		index++;
   1fa58:	3401      	adds	r4, #1
			oversized = true;
   1fa5a:	42bc      	cmp	r4, r7
   1fa5c:	bf08      	it	eq
   1fa5e:	2501      	moveq	r5, #1
   1fa60:	e786      	b.n	1f970 <at_parser_max_params_from_str+0x40>
					oversized = true;
   1fa62:	4605      	mov	r5, r0
   1fa64:	e7de      	b.n	1fa24 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   1fa66:	f06f 0006 	mvn.w	r0, #6
   1fa6a:	e7e4      	b.n	1fa36 <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   1fa6c:	f06f 000a 	mvn.w	r0, #10
   1fa70:	e7e1      	b.n	1fa36 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   1fa72:	f06f 0015 	mvn.w	r0, #21
   1fa76:	e7e3      	b.n	1fa40 <at_parser_max_params_from_str+0x110>
   1fa78:	2000d5a5 	.word	0x2000d5a5
   1fa7c:	2000d5a4 	.word	0x2000d5a4
   1fa80:	00031a3d 	.word	0x00031a3d
   1fa84:	00024001 	.word	0x00024001

0001fa88 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   1fa88:	b538      	push	{r3, r4, r5, lr}
   1fa8a:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   1fa8c:	4604      	mov	r4, r0
   1fa8e:	b940      	cbnz	r0, 1faa2 <at_params_get+0x1a>
   1fa90:	4908      	ldr	r1, [pc, #32]	; (1fab4 <at_params_get+0x2c>)
   1fa92:	4809      	ldr	r0, [pc, #36]	; (1fab8 <at_params_get+0x30>)
   1fa94:	222b      	movs	r2, #43	; 0x2b
   1fa96:	f00b fe89 	bl	2b7ac <printk>
   1fa9a:	212b      	movs	r1, #43	; 0x2b
   1fa9c:	4805      	ldr	r0, [pc, #20]	; (1fab4 <at_params_get+0x2c>)
   1fa9e:	f00c f81c 	bl	2bada <assert_post_action>

	if (index >= list->param_count) {
   1faa2:	6823      	ldr	r3, [r4, #0]
   1faa4:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1faa6:	bf8a      	itet	hi
   1faa8:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   1faaa:	2000      	movls	r0, #0
	return &param[index];
   1faac:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   1fab0:	bd38      	pop	{r3, r4, r5, pc}
   1fab2:	bf00      	nop
   1fab4:	000301c3 	.word	0x000301c3
   1fab8:	0002f296 	.word	0x0002f296

0001fabc <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   1fabc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1fabe:	4604      	mov	r4, r0
   1fac0:	b940      	cbnz	r0, 1fad4 <at_param_size+0x18>
   1fac2:	490a      	ldr	r1, [pc, #40]	; (1faec <at_param_size+0x30>)
   1fac4:	480a      	ldr	r0, [pc, #40]	; (1faf0 <at_param_size+0x34>)
   1fac6:	2239      	movs	r2, #57	; 0x39
   1fac8:	f00b fe70 	bl	2b7ac <printk>
   1facc:	2139      	movs	r1, #57	; 0x39
   1face:	4807      	ldr	r0, [pc, #28]	; (1faec <at_param_size+0x30>)
   1fad0:	f00c f803 	bl	2bada <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1fad4:	7823      	ldrb	r3, [r4, #0]
   1fad6:	2b01      	cmp	r3, #1
   1fad8:	d004      	beq.n	1fae4 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fada:	3b02      	subs	r3, #2
   1fadc:	2b01      	cmp	r3, #1
   1fade:	d803      	bhi.n	1fae8 <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1fae0:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   1fae2:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   1fae4:	2008      	movs	r0, #8
   1fae6:	e7fc      	b.n	1fae2 <at_param_size+0x26>
	return 0;
   1fae8:	2000      	movs	r0, #0
   1faea:	e7fa      	b.n	1fae2 <at_param_size+0x26>
   1faec:	000301c3 	.word	0x000301c3
   1faf0:	0002f296 	.word	0x0002f296

0001faf4 <at_param_clear>:
{
   1faf4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1faf6:	4604      	mov	r4, r0
   1faf8:	b940      	cbnz	r0, 1fb0c <at_param_clear+0x18>
   1fafa:	490a      	ldr	r1, [pc, #40]	; (1fb24 <at_param_clear+0x30>)
   1fafc:	480a      	ldr	r0, [pc, #40]	; (1fb28 <at_param_clear+0x34>)
   1fafe:	221d      	movs	r2, #29
   1fb00:	f00b fe54 	bl	2b7ac <printk>
   1fb04:	211d      	movs	r1, #29
   1fb06:	4807      	ldr	r0, [pc, #28]	; (1fb24 <at_param_clear+0x30>)
   1fb08:	f00b ffe7 	bl	2bada <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fb0c:	7823      	ldrb	r3, [r4, #0]
   1fb0e:	3b02      	subs	r3, #2
   1fb10:	2b01      	cmp	r3, #1
   1fb12:	d802      	bhi.n	1fb1a <at_param_clear+0x26>
		k_free(param->value.str_val);
   1fb14:	68a0      	ldr	r0, [r4, #8]
   1fb16:	f00e f817 	bl	2db48 <k_free>
	param->value.int_val = 0;
   1fb1a:	2200      	movs	r2, #0
   1fb1c:	2300      	movs	r3, #0
   1fb1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   1fb22:	bd10      	pop	{r4, pc}
   1fb24:	000301c3 	.word	0x000301c3
   1fb28:	0002f296 	.word	0x0002f296

0001fb2c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   1fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   1fb30:	4604      	mov	r4, r0
   1fb32:	b140      	cbz	r0, 1fb46 <at_params_list_clear+0x1a>
   1fb34:	6843      	ldr	r3, [r0, #4]
   1fb36:	b133      	cbz	r3, 1fb46 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   1fb38:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1fb3a:	4f0f      	ldr	r7, [pc, #60]	; (1fb78 <at_params_list_clear+0x4c>)
   1fb3c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1fb7c <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   1fb40:	6823      	ldr	r3, [r4, #0]
   1fb42:	429e      	cmp	r6, r3
   1fb44:	d301      	bcc.n	1fb4a <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   1fb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   1fb4a:	6865      	ldr	r5, [r4, #4]
   1fb4c:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   1fb50:	4628      	mov	r0, r5
   1fb52:	f7ff ffcf 	bl	1faf4 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   1fb56:	b945      	cbnz	r5, 1fb6a <at_params_list_clear+0x3e>
   1fb58:	4639      	mov	r1, r7
   1fb5a:	4640      	mov	r0, r8
   1fb5c:	2214      	movs	r2, #20
   1fb5e:	f00b fe25 	bl	2b7ac <printk>
   1fb62:	2114      	movs	r1, #20
   1fb64:	4638      	mov	r0, r7
   1fb66:	f00b ffb8 	bl	2bada <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   1fb6a:	2210      	movs	r2, #16
   1fb6c:	2100      	movs	r1, #0
   1fb6e:	4628      	mov	r0, r5
   1fb70:	f00e f832 	bl	2dbd8 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   1fb74:	3601      	adds	r6, #1
   1fb76:	e7e3      	b.n	1fb40 <at_params_list_clear+0x14>
   1fb78:	000301c3 	.word	0x000301c3
   1fb7c:	0002f296 	.word	0x0002f296

0001fb80 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   1fb80:	b510      	push	{r4, lr}
   1fb82:	4604      	mov	r4, r0
   1fb84:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fb86:	2240      	movs	r2, #64	; 0x40
   1fb88:	2100      	movs	r1, #0
   1fb8a:	4668      	mov	r0, sp
   1fb8c:	f00e f824 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fb90:	b954      	cbnz	r4, 1fba8 <at_handler_cscon+0x28>
   1fb92:	490f      	ldr	r1, [pc, #60]	; (1fbd0 <at_handler_cscon+0x50>)
   1fb94:	480f      	ldr	r0, [pc, #60]	; (1fbd4 <at_handler_cscon+0x54>)
   1fb96:	f44f 7293 	mov.w	r2, #294	; 0x126
   1fb9a:	f00b fe07 	bl	2b7ac <printk>
   1fb9e:	f44f 7193 	mov.w	r1, #294	; 0x126
   1fba2:	480b      	ldr	r0, [pc, #44]	; (1fbd0 <at_handler_cscon+0x50>)
   1fba4:	f00b ff99 	bl	2bada <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   1fba8:	2201      	movs	r2, #1
   1fbaa:	4620      	mov	r0, r4
   1fbac:	a902      	add	r1, sp, #8
   1fbae:	f000 fe0d 	bl	207cc <parse_rrc_mode>
	if (err) {
   1fbb2:	4602      	mov	r2, r0
   1fbb4:	b128      	cbz	r0, 1fbc2 <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   1fbb6:	2145      	movs	r1, #69	; 0x45
   1fbb8:	4807      	ldr	r0, [pc, #28]	; (1fbd8 <at_handler_cscon+0x58>)
   1fbba:	f00b ffa8 	bl	2bb0e <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   1fbbe:	b010      	add	sp, #64	; 0x40
   1fbc0:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1fbc2:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   1fbc4:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   1fbc6:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fbca:	f000 fd35 	bl	20638 <event_handler_list_dispatch>
   1fbce:	e7f6      	b.n	1fbbe <at_handler_cscon+0x3e>
   1fbd0:	000301f1 	.word	0x000301f1
   1fbd4:	0002f296 	.word	0x0002f296
   1fbd8:	0003021f 	.word	0x0003021f

0001fbdc <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   1fbdc:	b510      	push	{r4, lr}
   1fbde:	4604      	mov	r4, r0
   1fbe0:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fbe2:	2240      	movs	r2, #64	; 0x40
   1fbe4:	2100      	movs	r1, #0
   1fbe6:	4668      	mov	r0, sp
   1fbe8:	f00d fff6 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fbec:	b954      	cbnz	r4, 1fc04 <at_handler_cedrxp+0x28>
   1fbee:	490f      	ldr	r1, [pc, #60]	; (1fc2c <at_handler_cedrxp+0x50>)
   1fbf0:	480f      	ldr	r0, [pc, #60]	; (1fc30 <at_handler_cedrxp+0x54>)
   1fbf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fbf6:	f00b fdd9 	bl	2b7ac <printk>
   1fbfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1fbfe:	480b      	ldr	r0, [pc, #44]	; (1fc2c <at_handler_cedrxp+0x50>)
   1fc00:	f00b ff6b 	bl	2bada <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   1fc04:	4620      	mov	r0, r4
   1fc06:	a902      	add	r1, sp, #8
   1fc08:	f7f9 fdbe 	bl	19788 <parse_edrx>
	if (err) {
   1fc0c:	4602      	mov	r2, r0
   1fc0e:	b128      	cbz	r0, 1fc1c <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   1fc10:	2145      	movs	r1, #69	; 0x45
   1fc12:	4808      	ldr	r0, [pc, #32]	; (1fc34 <at_handler_cedrxp+0x58>)
   1fc14:	f00b ff7b 	bl	2bb0e <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   1fc18:	b010      	add	sp, #64	; 0x40
   1fc1a:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1fc1c:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   1fc1e:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1fc20:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fc24:	f000 fd08 	bl	20638 <event_handler_list_dispatch>
   1fc28:	e7f6      	b.n	1fc18 <at_handler_cedrxp+0x3c>
   1fc2a:	bf00      	nop
   1fc2c:	000301f1 	.word	0x000301f1
   1fc30:	0002f296 	.word	0x0002f296
   1fc34:	0003024b 	.word	0x0003024b

0001fc38 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   1fc38:	b510      	push	{r4, lr}
   1fc3a:	4604      	mov	r4, r0
   1fc3c:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fc3e:	2240      	movs	r2, #64	; 0x40
   1fc40:	2100      	movs	r1, #0
   1fc42:	4668      	mov	r0, sp
   1fc44:	f00d ffc8 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fc48:	b954      	cbnz	r4, 1fc60 <at_handler_xt3412+0x28>
   1fc4a:	4912      	ldr	r1, [pc, #72]	; (1fc94 <at_handler_xt3412+0x5c>)
   1fc4c:	4812      	ldr	r0, [pc, #72]	; (1fc98 <at_handler_xt3412+0x60>)
   1fc4e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1fc52:	f00b fdab 	bl	2b7ac <printk>
   1fc56:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1fc5a:	480e      	ldr	r0, [pc, #56]	; (1fc94 <at_handler_xt3412+0x5c>)
   1fc5c:	f00b ff3d 	bl	2bada <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   1fc60:	4620      	mov	r0, r4
   1fc62:	a902      	add	r1, sp, #8
   1fc64:	f000 fece 	bl	20a04 <parse_xt3412>
	if (err) {
   1fc68:	4602      	mov	r2, r0
   1fc6a:	b128      	cbz	r0, 1fc78 <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   1fc6c:	2145      	movs	r1, #69	; 0x45
   1fc6e:	480b      	ldr	r0, [pc, #44]	; (1fc9c <at_handler_xt3412+0x64>)
   1fc70:	f00b ff4d 	bl	2bb0e <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   1fc74:	b010      	add	sp, #64	; 0x40
   1fc76:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   1fc78:	9b02      	ldr	r3, [sp, #8]
   1fc7a:	9a03      	ldr	r2, [sp, #12]
   1fc7c:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   1fc80:	3b08      	subs	r3, #8
   1fc82:	4313      	orrs	r3, r2
   1fc84:	d1f6      	bne.n	1fc74 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1fc86:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   1fc88:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   1fc8a:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fc8e:	f000 fcd3 	bl	20638 <event_handler_list_dispatch>
   1fc92:	e7ef      	b.n	1fc74 <at_handler_xt3412+0x3c>
   1fc94:	000301f1 	.word	0x000301f1
   1fc98:	0002f296 	.word	0x0002f296
   1fc9c:	0003026c 	.word	0x0003026c

0001fca0 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   1fca0:	b530      	push	{r4, r5, lr}
   1fca2:	4605      	mov	r5, r0
   1fca4:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   1fca6:	2240      	movs	r2, #64	; 0x40
   1fca8:	2100      	movs	r1, #0
   1fcaa:	4668      	mov	r0, sp
   1fcac:	f00d ff94 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fcb0:	b955      	cbnz	r5, 1fcc8 <at_handler_ncellmeas+0x28>
   1fcb2:	4921      	ldr	r1, [pc, #132]	; (1fd38 <at_handler_ncellmeas+0x98>)
   1fcb4:	4821      	ldr	r0, [pc, #132]	; (1fd3c <at_handler_ncellmeas+0x9c>)
   1fcb6:	f240 126f 	movw	r2, #367	; 0x16f
   1fcba:	f00b fd77 	bl	2b7ac <printk>
   1fcbe:	f240 116f 	movw	r1, #367	; 0x16f
   1fcc2:	481d      	ldr	r0, [pc, #116]	; (1fd38 <at_handler_ncellmeas+0x98>)
   1fcc4:	f00b ff09 	bl	2bada <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   1fcc8:	4628      	mov	r0, r5
   1fcca:	f000 fee9 	bl	20aa0 <neighborcell_count_get>
   1fcce:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   1fcd0:	f000 fc7a 	bl	205c8 <event_handler_list_is_empty>
   1fcd4:	b950      	cbnz	r0, 1fcec <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   1fcd6:	b15c      	cbz	r4, 1fcf0 <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   1fcd8:	4620      	mov	r0, r4
   1fcda:	2110      	movs	r1, #16
   1fcdc:	f00d ff3f 	bl	2db5e <k_calloc>
		if (neighbor_cells == NULL) {
   1fce0:	4604      	mov	r4, r0
   1fce2:	b928      	cbnz	r0, 1fcf0 <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   1fce4:	2145      	movs	r1, #69	; 0x45
   1fce6:	4816      	ldr	r0, [pc, #88]	; (1fd40 <at_handler_ncellmeas+0xa0>)
   1fce8:	f00b ff11 	bl	2bb0e <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   1fcec:	b011      	add	sp, #68	; 0x44
   1fcee:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   1fcf0:	4628      	mov	r0, r5
   1fcf2:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   1fcf4:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   1fcf6:	f000 feef 	bl	20ad8 <parse_ncellmeas>
	switch (err) {
   1fcfa:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   1fcfc:	4602      	mov	r2, r0
	switch (err) {
   1fcfe:	d006      	beq.n	1fd0e <at_handler_ncellmeas+0x6e>
   1fd00:	2801      	cmp	r0, #1
   1fd02:	d90d      	bls.n	1fd20 <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   1fd04:	2145      	movs	r1, #69	; 0x45
   1fd06:	480f      	ldr	r0, [pc, #60]	; (1fd44 <at_handler_ncellmeas+0xa4>)
   1fd08:	f00b ff01 	bl	2bb0e <z_log_minimal_printk>
   1fd0c:	e00e      	b.n	1fd2c <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   1fd0e:	2157      	movs	r1, #87	; 0x57
   1fd10:	480d      	ldr	r0, [pc, #52]	; (1fd48 <at_handler_ncellmeas+0xa8>)
   1fd12:	f00b fefc 	bl	2bb0e <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   1fd16:	220a      	movs	r2, #10
   1fd18:	2157      	movs	r1, #87	; 0x57
   1fd1a:	480c      	ldr	r0, [pc, #48]	; (1fd4c <at_handler_ncellmeas+0xac>)
   1fd1c:	f00b fef7 	bl	2bb0e <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fd20:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   1fd22:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   1fd24:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   1fd28:	f000 fc86 	bl	20638 <event_handler_list_dispatch>
	if (neighbor_cells) {
   1fd2c:	2c00      	cmp	r4, #0
   1fd2e:	d0dd      	beq.n	1fcec <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   1fd30:	4620      	mov	r0, r4
   1fd32:	f00d ff09 	bl	2db48 <k_free>
   1fd36:	e7d9      	b.n	1fcec <at_handler_ncellmeas+0x4c>
   1fd38:	000301f1 	.word	0x000301f1
   1fd3c:	0002f296 	.word	0x0002f296
   1fd40:	000302a5 	.word	0x000302a5
   1fd44:	00030342 	.word	0x00030342
   1fd48:	000302d7 	.word	0x000302d7
   1fd4c:	00030303 	.word	0x00030303

0001fd50 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   1fd50:	b510      	push	{r4, lr}
   1fd52:	4604      	mov	r4, r0
   1fd54:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fd56:	2240      	movs	r2, #64	; 0x40
   1fd58:	2100      	movs	r1, #0
   1fd5a:	4668      	mov	r0, sp
   1fd5c:	f00d ff3c 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fd60:	b954      	cbnz	r4, 1fd78 <at_handler_xmodemsleep+0x28>
   1fd62:	4919      	ldr	r1, [pc, #100]	; (1fdc8 <at_handler_xmodemsleep+0x78>)
   1fd64:	4819      	ldr	r0, [pc, #100]	; (1fdcc <at_handler_xmodemsleep+0x7c>)
   1fd66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1fd6a:	f00b fd1f 	bl	2b7ac <printk>
   1fd6e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1fd72:	4815      	ldr	r0, [pc, #84]	; (1fdc8 <at_handler_xmodemsleep+0x78>)
   1fd74:	f00b feb1 	bl	2bada <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   1fd78:	4620      	mov	r0, r4
   1fd7a:	a902      	add	r1, sp, #8
   1fd7c:	f000 fff6 	bl	20d6c <parse_xmodemsleep>
	if (err) {
   1fd80:	4602      	mov	r2, r0
   1fd82:	b128      	cbz	r0, 1fd90 <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   1fd84:	2145      	movs	r1, #69	; 0x45
   1fd86:	4812      	ldr	r0, [pc, #72]	; (1fdd0 <at_handler_xmodemsleep+0x80>)
   1fd88:	f00b fec1 	bl	2bb0e <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   1fd8c:	b010      	add	sp, #64	; 0x40
   1fd8e:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   1fd90:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1fd94:	1e5a      	subs	r2, r3, #1
   1fd96:	2a01      	cmp	r2, #1
   1fd98:	d901      	bls.n	1fd9e <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   1fd9a:	2b04      	cmp	r3, #4
   1fd9c:	d1f6      	bne.n	1fd8c <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   1fd9e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1fda2:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   1fda6:	3b08      	subs	r3, #8
   1fda8:	4313      	orrs	r3, r2
   1fdaa:	d106      	bne.n	1fdba <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   1fdac:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   1fdae:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   1fdb0:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fdb4:	f000 fc40 	bl	20638 <event_handler_list_dispatch>
   1fdb8:	e7e8      	b.n	1fd8c <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   1fdba:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   1fdbe:	bf0c      	ite	eq
   1fdc0:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   1fdc2:	230a      	movne	r3, #10
   1fdc4:	e7f3      	b.n	1fdae <at_handler_xmodemsleep+0x5e>
   1fdc6:	bf00      	nop
   1fdc8:	000301f1 	.word	0x000301f1
   1fdcc:	0002f296 	.word	0x0002f296
   1fdd0:	00030371 	.word	0x00030371

0001fdd4 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   1fdd4:	b510      	push	{r4, lr}
   1fdd6:	4604      	mov	r4, r0
   1fdd8:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   1fdda:	2240      	movs	r2, #64	; 0x40
   1fddc:	2100      	movs	r1, #0
   1fdde:	4668      	mov	r0, sp
   1fde0:	f00d fefa 	bl	2dbd8 <memset>

	__ASSERT_NO_MSG(response != NULL);
   1fde4:	b954      	cbnz	r4, 1fdfc <at_handler_mdmev+0x28>
   1fde6:	490f      	ldr	r1, [pc, #60]	; (1fe24 <at_handler_mdmev+0x50>)
   1fde8:	480f      	ldr	r0, [pc, #60]	; (1fe28 <at_handler_mdmev+0x54>)
   1fdea:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
   1fdee:	f00b fcdd 	bl	2b7ac <printk>
   1fdf2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   1fdf6:	480b      	ldr	r0, [pc, #44]	; (1fe24 <at_handler_mdmev+0x50>)
   1fdf8:	f00b fe6f 	bl	2bada <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   1fdfc:	4620      	mov	r0, r4
   1fdfe:	a902      	add	r1, sp, #8
   1fe00:	f001 f810 	bl	20e24 <parse_mdmev>
	if (err) {
   1fe04:	4602      	mov	r2, r0
   1fe06:	b128      	cbz	r0, 1fe14 <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   1fe08:	2145      	movs	r1, #69	; 0x45
   1fe0a:	4808      	ldr	r0, [pc, #32]	; (1fe2c <at_handler_mdmev+0x58>)
   1fe0c:	f00b fe7f 	bl	2bb0e <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   1fe10:	b010      	add	sp, #64	; 0x40
   1fe12:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fe14:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   1fe16:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   1fe18:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   1fe1c:	f000 fc0c 	bl	20638 <event_handler_list_dispatch>
   1fe20:	e7f6      	b.n	1fe10 <at_handler_mdmev+0x3c>
   1fe22:	bf00      	nop
   1fe24:	000301f1 	.word	0x000301f1
   1fe28:	0002f296 	.word	0x0002f296
   1fe2c:	000303b2 	.word	0x000303b2

0001fe30 <enable_notifications>:

static int enable_notifications(void)
{
   1fe30:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fe32:	4818      	ldr	r0, [pc, #96]	; (1fe94 <enable_notifications+0x64>)
{
   1fe34:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   1fe36:	f005 fb73 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   1fe3a:	4602      	mov	r2, r0
   1fe3c:	b138      	cbz	r0, 1fe4e <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   1fe3e:	4816      	ldr	r0, [pc, #88]	; (1fe98 <enable_notifications+0x68>)
   1fe40:	2145      	movs	r1, #69	; 0x45
   1fe42:	f00b fe64 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   1fe46:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   1fe4a:	b00e      	add	sp, #56	; 0x38
   1fe4c:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   1fe4e:	4813      	ldr	r0, [pc, #76]	; (1fe9c <enable_notifications+0x6c>)
   1fe50:	f005 fb66 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   1fe54:	2800      	cmp	r0, #0
   1fe56:	d0f8      	beq.n	1fe4a <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   1fe58:	4602      	mov	r2, r0
   1fe5a:	2157      	movs	r1, #87	; 0x57
   1fe5c:	4810      	ldr	r0, [pc, #64]	; (1fea0 <enable_notifications+0x70>)
   1fe5e:	f00b fe56 	bl	2bb0e <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   1fe62:	2157      	movs	r1, #87	; 0x57
   1fe64:	480f      	ldr	r0, [pc, #60]	; (1fea4 <enable_notifications+0x74>)
   1fe66:	f00b fe52 	bl	2bb0e <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   1fe6a:	2132      	movs	r1, #50	; 0x32
   1fe6c:	4a0e      	ldr	r2, [pc, #56]	; (1fea8 <enable_notifications+0x78>)
   1fe6e:	a801      	add	r0, sp, #4
   1fe70:	f005 fb7e 	bl	25570 <nrf_modem_at_cmd>
		if (err == 0) {
   1fe74:	4604      	mov	r4, r0
   1fe76:	b950      	cbnz	r0, 1fe8e <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   1fe78:	490c      	ldr	r1, [pc, #48]	; (1feac <enable_notifications+0x7c>)
   1fe7a:	a801      	add	r0, sp, #4
   1fe7c:	f00e f84f 	bl	2df1e <strstr>
			if (end) {
   1fe80:	b100      	cbz	r0, 1fe84 <enable_notifications+0x54>
				*end = '\0';
   1fe82:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   1fe84:	2157      	movs	r1, #87	; 0x57
   1fe86:	480a      	ldr	r0, [pc, #40]	; (1feb0 <enable_notifications+0x80>)
   1fe88:	aa01      	add	r2, sp, #4
   1fe8a:	f00b fe40 	bl	2bb0e <z_log_minimal_printk>
	return 0;
   1fe8e:	2000      	movs	r0, #0
   1fe90:	e7db      	b.n	1fe4a <enable_notifications+0x1a>
   1fe92:	bf00      	nop
   1fe94:	000303e7 	.word	0x000303e7
   1fe98:	000303f2 	.word	0x000303f2
   1fe9c:	00030a1b 	.word	0x00030a1b
   1fea0:	0003042d 	.word	0x0003042d
   1fea4:	0003046a 	.word	0x0003046a
   1fea8:	000304a0 	.word	0x000304a0
   1feac:	000304a8 	.word	0x000304a8
   1feb0:	000304ad 	.word	0x000304ad

0001feb4 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   1feb4:	b918      	cbnz	r0, 1febe <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   1feb6:	2149      	movs	r1, #73	; 0x49
   1feb8:	4802      	ldr	r0, [pc, #8]	; (1fec4 <lte_lc_register_handler+0x10>)
   1feba:	f00b be28 	b.w	2bb0e <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   1febe:	f000 bb8b 	b.w	205d8 <event_handler_list_append_handler>
   1fec2:	bf00      	nop
   1fec4:	000304d5 	.word	0x000304d5

0001fec8 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   1fec8:	2300      	movs	r3, #0
{
   1feca:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fecc:	b08d      	sub	sp, #52	; 0x34
   1fece:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   1fed0:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   1fed2:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   1fed6:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   1feda:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   1fede:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   1fee2:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   1fee6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   1feea:	2800      	cmp	r0, #0
   1feec:	d054      	beq.n	1ff98 <lte_lc_psm_get+0xd0>
   1feee:	2900      	cmp	r1, #0
   1fef0:	d052      	beq.n	1ff98 <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   1fef2:	4c2b      	ldr	r4, [pc, #172]	; (1ffa0 <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fef4:	4a2b      	ldr	r2, [pc, #172]	; (1ffa4 <lte_lc_psm_get+0xdc>)
   1fef6:	21a0      	movs	r1, #160	; 0xa0
   1fef8:	4620      	mov	r0, r4
	response[0] = '\0';
   1fefa:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   1fefc:	f005 fb38 	bl	25570 <nrf_modem_at_cmd>
	if (err < 0) {
   1ff00:	1e02      	subs	r2, r0, #0
   1ff02:	da08      	bge.n	1ff16 <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   1ff04:	2145      	movs	r1, #69	; 0x45
   1ff06:	4828      	ldr	r0, [pc, #160]	; (1ffa8 <lte_lc_psm_get+0xe0>)
   1ff08:	f00b fe01 	bl	2bb0e <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   1ff0c:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   1ff10:	4620      	mov	r0, r4
   1ff12:	b00d      	add	sp, #52	; 0x34
   1ff14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   1ff16:	4620      	mov	r0, r4
   1ff18:	212c      	movs	r1, #44	; 0x2c
   1ff1a:	f00d ffb8 	bl	2de8e <strchr>
   1ff1e:	270c      	movs	r7, #12
   1ff20:	4604      	mov	r4, r0
		if (comma_ptr) {
   1ff22:	b37c      	cbz	r4, 1ff84 <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   1ff24:	1c60      	adds	r0, r4, #1
   1ff26:	212c      	movs	r1, #44	; 0x2c
   1ff28:	f00d ffb1 	bl	2de8e <strchr>
	for (int i = 0; i < 12; i++) {
   1ff2c:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   1ff2e:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   1ff30:	d1f7      	bne.n	1ff22 <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   1ff32:	b338      	cbz	r0, 1ff84 <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   1ff34:	1c81      	adds	r1, r0, #2
   1ff36:	2208      	movs	r2, #8
   1ff38:	a803      	add	r0, sp, #12
   1ff3a:	f00d ffd1 	bl	2dee0 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1ff3e:	1c60      	adds	r0, r4, #1
   1ff40:	212c      	movs	r1, #44	; 0x2c
   1ff42:	f00d ffa4 	bl	2de8e <strchr>
	if (comma_ptr) {
   1ff46:	4604      	mov	r4, r0
   1ff48:	b1e0      	cbz	r0, 1ff84 <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   1ff4a:	1c81      	adds	r1, r0, #2
   1ff4c:	2208      	movs	r2, #8
   1ff4e:	a806      	add	r0, sp, #24
   1ff50:	f00d ffc6 	bl	2dee0 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   1ff54:	212c      	movs	r1, #44	; 0x2c
   1ff56:	1c60      	adds	r0, r4, #1
   1ff58:	f00d ff99 	bl	2de8e <strchr>
	if (comma_ptr) {
   1ff5c:	b120      	cbz	r0, 1ff68 <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   1ff5e:	1c81      	adds	r1, r0, #2
   1ff60:	2208      	movs	r2, #8
   1ff62:	a809      	add	r0, sp, #36	; 0x24
   1ff64:	f00d ffbc 	bl	2dee0 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   1ff68:	ab01      	add	r3, sp, #4
   1ff6a:	aa09      	add	r2, sp, #36	; 0x24
   1ff6c:	a906      	add	r1, sp, #24
   1ff6e:	a803      	add	r0, sp, #12
   1ff70:	f000 fb9e 	bl	206b0 <parse_psm>
	if (err) {
   1ff74:	4604      	mov	r4, r0
   1ff76:	b150      	cbz	r0, 1ff8e <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   1ff78:	4602      	mov	r2, r0
   1ff7a:	2145      	movs	r1, #69	; 0x45
   1ff7c:	480b      	ldr	r0, [pc, #44]	; (1ffac <lte_lc_psm_get+0xe4>)
   1ff7e:	f00b fdc6 	bl	2bb0e <z_log_minimal_printk>
		return err;
   1ff82:	e7c5      	b.n	1ff10 <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   1ff84:	2145      	movs	r1, #69	; 0x45
   1ff86:	480a      	ldr	r0, [pc, #40]	; (1ffb0 <lte_lc_psm_get+0xe8>)
   1ff88:	f00b fdc1 	bl	2bb0e <z_log_minimal_printk>
   1ff8c:	e7be      	b.n	1ff0c <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   1ff8e:	9b01      	ldr	r3, [sp, #4]
   1ff90:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   1ff92:	9b02      	ldr	r3, [sp, #8]
   1ff94:	602b      	str	r3, [r5, #0]
	return 0;
   1ff96:	e7bb      	b.n	1ff10 <lte_lc_psm_get+0x48>
		return -EINVAL;
   1ff98:	f06f 0415 	mvn.w	r4, #21
   1ff9c:	e7b8      	b.n	1ff10 <lte_lc_psm_get+0x48>
   1ff9e:	bf00      	nop
   1ffa0:	2000d5ab 	.word	0x2000d5ab
   1ffa4:	0003054c 	.word	0x0003054c
   1ffa8:	00030559 	.word	0x00030559
   1ffac:	0003059a 	.word	0x0003059a
   1ffb0:	0003057b 	.word	0x0003057b

0001ffb4 <at_handler_cereg>:
{
   1ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffb6:	4604      	mov	r4, r0
   1ffb8:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   1ffba:	2240      	movs	r2, #64	; 0x40
   1ffbc:	2100      	movs	r1, #0
   1ffbe:	a812      	add	r0, sp, #72	; 0x48
   1ffc0:	f00d fe0a 	bl	2dbd8 <memset>
	__ASSERT_NO_MSG(response != NULL);
   1ffc4:	b944      	cbnz	r4, 1ffd8 <at_handler_cereg+0x24>
   1ffc6:	494e      	ldr	r1, [pc, #312]	; (20100 <at_handler_cereg+0x14c>)
   1ffc8:	484e      	ldr	r0, [pc, #312]	; (20104 <at_handler_cereg+0x150>)
   1ffca:	22ad      	movs	r2, #173	; 0xad
   1ffcc:	f00b fbee 	bl	2b7ac <printk>
   1ffd0:	21ad      	movs	r1, #173	; 0xad
   1ffd2:	484b      	ldr	r0, [pc, #300]	; (20100 <at_handler_cereg+0x14c>)
   1ffd4:	f00b fd81 	bl	2bada <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   1ffd8:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   1ffda:	2230      	movs	r2, #48	; 0x30
   1ffdc:	4629      	mov	r1, r5
   1ffde:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   1ffe0:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   1ffe4:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   1ffe6:	f00d fdf7 	bl	2dbd8 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1ffea:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   1ffee:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fff0:	f10d 020e 	add.w	r2, sp, #14
   1fff4:	9300      	str	r3, [sp, #0]
   1fff6:	2101      	movs	r1, #1
   1fff8:	4620      	mov	r0, r4
   1fffa:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   1fffc:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   1fffe:	f000 fc2d 	bl	2085c <parse_cereg>
	if (err) {
   20002:	4602      	mov	r2, r0
   20004:	b130      	cbz	r0, 20014 <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   20006:	4623      	mov	r3, r4
   20008:	2145      	movs	r1, #69	; 0x45
   2000a:	483f      	ldr	r0, [pc, #252]	; (20108 <at_handler_cereg+0x154>)
   2000c:	f00b fd7f 	bl	2bb0e <z_log_minimal_printk>
}
   20010:	b023      	add	sp, #140	; 0x8c
   20012:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   20014:	f89d 300e 	ldrb.w	r3, [sp, #14]
   20018:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2001c:	2b01      	cmp	r3, #1
   2001e:	d105      	bne.n	2002c <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   20020:	9b08      	ldr	r3, [sp, #32]
   20022:	3301      	adds	r3, #1
   20024:	d053      	beq.n	200ce <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   20026:	4839      	ldr	r0, [pc, #228]	; (2010c <at_handler_cereg+0x158>)
   20028:	f006 fbc8 	bl	267bc <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   2002c:	f000 facc 	bl	205c8 <event_handler_list_is_empty>
   20030:	2800      	cmp	r0, #0
   20032:	d1ed      	bne.n	20010 <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   20034:	4a36      	ldr	r2, [pc, #216]	; (20110 <at_handler_cereg+0x15c>)
   20036:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2003a:	7811      	ldrb	r1, [r2, #0]
   2003c:	4299      	cmp	r1, r3
   2003e:	d007      	beq.n	20050 <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   20040:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   20044:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   20046:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   20048:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   2004c:	f000 faf4 	bl	20638 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   20050:	2230      	movs	r2, #48	; 0x30
   20052:	4930      	ldr	r1, [pc, #192]	; (20114 <at_handler_cereg+0x160>)
   20054:	a806      	add	r0, sp, #24
   20056:	f00d fda2 	bl	2db9e <memcmp>
   2005a:	b1c8      	cbz	r0, 20090 <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   2005c:	2304      	movs	r3, #4
   2005e:	4d2d      	ldr	r5, [pc, #180]	; (20114 <at_handler_cereg+0x160>)
   20060:	ac06      	add	r4, sp, #24
   20062:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   20066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2006a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2006c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2006e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20072:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   20076:	ae14      	add	r6, sp, #80	; 0x50
   20078:	ad06      	add	r5, sp, #24
   2007a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2007c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2007e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20080:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20082:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   20086:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   2008a:	a812      	add	r0, sp, #72	; 0x48
   2008c:	f000 fad4 	bl	20638 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   20090:	4a21      	ldr	r2, [pc, #132]	; (20118 <at_handler_cereg+0x164>)
   20092:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20096:	7811      	ldrb	r1, [r2, #0]
   20098:	4299      	cmp	r1, r3
   2009a:	d008      	beq.n	200ae <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   2009c:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2009e:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   200a0:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   200a2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   200a6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   200aa:	f000 fac5 	bl	20638 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   200ae:	f89d 400e 	ldrb.w	r4, [sp, #14]
   200b2:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   200b6:	2c01      	cmp	r4, #1
   200b8:	d1aa      	bne.n	20010 <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   200ba:	4638      	mov	r0, r7
   200bc:	a905      	add	r1, sp, #20
   200be:	f7ff ff03 	bl	1fec8 <lte_lc_psm_get>
	if (err) {
   200c2:	b140      	cbz	r0, 200d6 <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   200c4:	2145      	movs	r1, #69	; 0x45
   200c6:	4815      	ldr	r0, [pc, #84]	; (2011c <at_handler_cereg+0x168>)
   200c8:	f00b fd21 	bl	2bb0e <z_log_minimal_printk>
		return;
   200cc:	e7a0      	b.n	20010 <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   200ce:	2304      	movs	r3, #4
   200d0:	f88d 300e 	strb.w	r3, [sp, #14]
   200d4:	e7aa      	b.n	2002c <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   200d6:	4d12      	ldr	r5, [pc, #72]	; (20120 <at_handler_cereg+0x16c>)
   200d8:	2208      	movs	r2, #8
   200da:	4629      	mov	r1, r5
   200dc:	4638      	mov	r0, r7
   200de:	f00d fd5e 	bl	2db9e <memcmp>
   200e2:	2800      	cmp	r0, #0
   200e4:	d094      	beq.n	20010 <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   200e6:	e897 0003 	ldmia.w	r7, {r0, r1}
   200ea:	ab14      	add	r3, sp, #80	; 0x50
   200ec:	e885 0003 	stmia.w	r5, {r0, r1}
   200f0:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   200f4:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   200f6:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   200fa:	f000 fa9d 	bl	20638 <event_handler_list_dispatch>
   200fe:	e787      	b.n	20010 <at_handler_cereg+0x5c>
   20100:	000301f1 	.word	0x000301f1
   20104:	0002f296 	.word	0x0002f296
   20108:	000305cc 	.word	0x000305cc
   2010c:	2000d0c8 	.word	0x2000d0c8
   20110:	2000d5aa 	.word	0x2000d5aa
   20114:	2000cb28 	.word	0x2000cb28
   20118:	2000d5a9 	.word	0x2000d5a9
   2011c:	000305fd 	.word	0x000305fd
   20120:	2000d0e0 	.word	0x2000d0e0

00020124 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   20124:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   20126:	2400      	movs	r4, #0

	if (status == NULL) {
   20128:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   2012a:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   2012c:	b1a8      	cbz	r0, 2015a <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   2012e:	f10d 0202 	add.w	r2, sp, #2
   20132:	490b      	ldr	r1, [pc, #44]	; (20160 <lte_lc_nw_reg_status_get+0x3c>)
   20134:	480b      	ldr	r0, [pc, #44]	; (20164 <lte_lc_nw_reg_status_get+0x40>)
   20136:	ab01      	add	r3, sp, #4
   20138:	f005 fa80 	bl	2563c <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   2013c:	1e02      	subs	r2, r0, #0
   2013e:	dc07      	bgt.n	20150 <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   20140:	4809      	ldr	r0, [pc, #36]	; (20168 <lte_lc_nw_reg_status_get+0x44>)
   20142:	2145      	movs	r1, #69	; 0x45
   20144:	f00b fce3 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   20148:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   2014c:	b003      	add	sp, #12
   2014e:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   20150:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   20154:	4620      	mov	r0, r4
	*status = status_tmp;
   20156:	702b      	strb	r3, [r5, #0]
	return 0;
   20158:	e7f8      	b.n	2014c <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   2015a:	f06f 0015 	mvn.w	r0, #21
   2015e:	e7f5      	b.n	2014c <lte_lc_nw_reg_status_get+0x28>
   20160:	00030620 	.word	0x00030620
   20164:	0003063c 	.word	0x0003063c
   20168:	00030646 	.word	0x00030646

0002016c <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   2016c:	2807      	cmp	r0, #7
{
   2016e:	b538      	push	{r3, r4, r5, lr}
   20170:	4605      	mov	r5, r0
   20172:	460c      	mov	r4, r1
	switch (mode) {
   20174:	d907      	bls.n	20186 <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   20176:	2145      	movs	r1, #69	; 0x45
   20178:	4602      	mov	r2, r0
   2017a:	4813      	ldr	r0, [pc, #76]	; (201c8 <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   2017c:	f00b fcc7 	bl	2bb0e <z_log_minimal_printk>
		return -EINVAL;
   20180:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   20184:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   20186:	2904      	cmp	r1, #4
   20188:	d903      	bls.n	20192 <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   2018a:	460a      	mov	r2, r1
   2018c:	480f      	ldr	r0, [pc, #60]	; (201cc <lte_lc_system_mode_set+0x60>)
   2018e:	2145      	movs	r1, #69	; 0x45
   20190:	e7f4      	b.n	2017c <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   20192:	4b0f      	ldr	r3, [pc, #60]	; (201d0 <lte_lc_system_mode_set+0x64>)
   20194:	5c5a      	ldrb	r2, [r3, r1]
   20196:	4b0f      	ldr	r3, [pc, #60]	; (201d4 <lte_lc_system_mode_set+0x68>)
   20198:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   2019c:	480e      	ldr	r0, [pc, #56]	; (201d8 <lte_lc_system_mode_set+0x6c>)
   2019e:	f005 f9bf 	bl	25520 <nrf_modem_at_printf>
	if (err) {
   201a2:	b138      	cbz	r0, 201b4 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   201a4:	4602      	mov	r2, r0
   201a6:	2145      	movs	r1, #69	; 0x45
   201a8:	480c      	ldr	r0, [pc, #48]	; (201dc <lte_lc_system_mode_set+0x70>)
   201aa:	f00b fcb0 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   201ae:	f06f 000d 	mvn.w	r0, #13
   201b2:	e7e7      	b.n	20184 <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   201b4:	4b0a      	ldr	r3, [pc, #40]	; (201e0 <lte_lc_system_mode_set+0x74>)
   201b6:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   201b8:	4b0a      	ldr	r3, [pc, #40]	; (201e4 <lte_lc_system_mode_set+0x78>)
   201ba:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   201bc:	4b0a      	ldr	r3, [pc, #40]	; (201e8 <lte_lc_system_mode_set+0x7c>)
   201be:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   201c0:	4b0a      	ldr	r3, [pc, #40]	; (201ec <lte_lc_system_mode_set+0x80>)
   201c2:	701c      	strb	r4, [r3, #0]
	return 0;
   201c4:	e7de      	b.n	20184 <lte_lc_system_mode_set+0x18>
   201c6:	bf00      	nop
   201c8:	00030678 	.word	0x00030678
   201cc:	0003069f 	.word	0x0003069f
   201d0:	00030a26 	.word	0x00030a26
   201d4:	0002ed0c 	.word	0x0002ed0c
   201d8:	000306c9 	.word	0x000306c9
   201dc:	000306df 	.word	0x000306df
   201e0:	2000d64b 	.word	0x2000d64b
   201e4:	2000c8b8 	.word	0x2000c8b8
   201e8:	2000d5a7 	.word	0x2000d5a7
   201ec:	2000d5a8 	.word	0x2000d5a8

000201f0 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   201f0:	b530      	push	{r4, r5, lr}
   201f2:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   201f4:	4605      	mov	r5, r0
{
   201f6:	b087      	sub	sp, #28
	if (mode == NULL) {
   201f8:	2800      	cmp	r0, #0
   201fa:	d06b      	beq.n	202d4 <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   201fc:	ab05      	add	r3, sp, #20
   201fe:	9301      	str	r3, [sp, #4]
   20200:	ab04      	add	r3, sp, #16
   20202:	9300      	str	r3, [sp, #0]
   20204:	aa02      	add	r2, sp, #8
   20206:	4935      	ldr	r1, [pc, #212]	; (202dc <lte_lc_system_mode_get+0xec>)
   20208:	4835      	ldr	r0, [pc, #212]	; (202e0 <lte_lc_system_mode_get+0xf0>)
   2020a:	ab03      	add	r3, sp, #12
   2020c:	f005 fa16 	bl	2563c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   20210:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   20212:	4602      	mov	r2, r0
	if (err != 4) {
   20214:	d004      	beq.n	20220 <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   20216:	2145      	movs	r1, #69	; 0x45
   20218:	4832      	ldr	r0, [pc, #200]	; (202e4 <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   2021a:	f00b fc78 	bl	2bb0e <z_log_minimal_printk>
			return -EFAULT;
   2021e:	e039      	b.n	20294 <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   20220:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   20222:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   20224:	2b00      	cmp	r3, #0
   20226:	bf14      	ite	ne
   20228:	2302      	movne	r3, #2
   2022a:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2022c:	2a00      	cmp	r2, #0
   2022e:	bf14      	ite	ne
   20230:	2204      	movne	r2, #4
   20232:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   20234:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   20236:	9a04      	ldr	r2, [sp, #16]
   20238:	2a00      	cmp	r2, #0
   2023a:	bf14      	ite	ne
   2023c:	2208      	movne	r2, #8
   2023e:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   20240:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   20242:	2b0e      	cmp	r3, #14
   20244:	d822      	bhi.n	2028c <lte_lc_system_mode_get+0x9c>
   20246:	e8df f003 	tbb	[pc, r3]
   2024a:	2108      	.short	0x2108
   2024c:	21152113 	.word	0x21152113
   20250:	2117211d 	.word	0x2117211d
   20254:	211b2119 	.word	0x211b2119
   20258:	1f          	.byte	0x1f
   20259:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2025a:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   2025c:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   2025e:	b1fc      	cbz	r4, 202a0 <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   20260:	9a05      	ldr	r2, [sp, #20]
   20262:	2a04      	cmp	r2, #4
   20264:	d833      	bhi.n	202ce <lte_lc_system_mode_get+0xde>
   20266:	e8df f002 	tbb	[pc, r2]
   2026a:	2a19      	.short	0x2a19
   2026c:	2e2c      	.short	0x2e2c
   2026e:	30          	.byte	0x30
   2026f:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   20270:	2301      	movs	r3, #1
   20272:	e7f3      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   20274:	2302      	movs	r3, #2
   20276:	e7f1      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   20278:	2303      	movs	r3, #3
   2027a:	e7ef      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2027c:	2304      	movs	r3, #4
   2027e:	e7ed      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   20280:	2305      	movs	r3, #5
   20282:	e7eb      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   20284:	2306      	movs	r3, #6
   20286:	e7e9      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   20288:	2307      	movs	r3, #7
   2028a:	e7e7      	b.n	2025c <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2028c:	2145      	movs	r1, #69	; 0x45
   2028e:	4816      	ldr	r0, [pc, #88]	; (202e8 <lte_lc_system_mode_get+0xf8>)
   20290:	f00b fc3d 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   20294:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   20298:	b007      	add	sp, #28
   2029a:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   2029c:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2029e:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   202a0:	4b12      	ldr	r3, [pc, #72]	; (202ec <lte_lc_system_mode_get+0xfc>)
   202a2:	782a      	ldrb	r2, [r5, #0]
   202a4:	7819      	ldrb	r1, [r3, #0]
   202a6:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   202a8:	bf18      	it	ne
   202aa:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   202ac:	b12c      	cbz	r4, 202ba <lte_lc_system_mode_get+0xca>
   202ae:	4b10      	ldr	r3, [pc, #64]	; (202f0 <lte_lc_system_mode_get+0x100>)
   202b0:	7822      	ldrb	r2, [r4, #0]
   202b2:	7819      	ldrb	r1, [r3, #0]
   202b4:	4291      	cmp	r1, r2
   202b6:	d000      	beq.n	202ba <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   202b8:	701a      	strb	r2, [r3, #0]
	return 0;
   202ba:	2000      	movs	r0, #0
   202bc:	e7ec      	b.n	20298 <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   202be:	2301      	movs	r3, #1
   202c0:	e7ed      	b.n	2029e <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   202c2:	2302      	movs	r3, #2
   202c4:	e7eb      	b.n	2029e <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   202c6:	2303      	movs	r3, #3
   202c8:	e7e9      	b.n	2029e <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   202ca:	2304      	movs	r3, #4
   202cc:	e7e7      	b.n	2029e <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   202ce:	2145      	movs	r1, #69	; 0x45
   202d0:	4808      	ldr	r0, [pc, #32]	; (202f4 <lte_lc_system_mode_get+0x104>)
   202d2:	e7a2      	b.n	2021a <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   202d4:	f06f 0015 	mvn.w	r0, #21
   202d8:	e7de      	b.n	20298 <lte_lc_system_mode_get+0xa8>
   202da:	bf00      	nop
   202dc:	00030709 	.word	0x00030709
   202e0:	00030724 	.word	0x00030724
   202e4:	00030734 	.word	0x00030734
   202e8:	0003075e 	.word	0x0003075e
   202ec:	2000d64b 	.word	0x2000d64b
   202f0:	2000d5a7 	.word	0x2000d5a7
   202f4:	0003078f 	.word	0x0003078f

000202f8 <init_and_config>:
{
   202f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   202fa:	4d1b      	ldr	r5, [pc, #108]	; (20368 <init_and_config+0x70>)
   202fc:	7829      	ldrb	r1, [r5, #0]
   202fe:	bb81      	cbnz	r1, 20362 <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   20300:	4e1a      	ldr	r6, [pc, #104]	; (2036c <init_and_config+0x74>)
   20302:	4f1b      	ldr	r7, [pc, #108]	; (20370 <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   20304:	2201      	movs	r2, #1
   20306:	481b      	ldr	r0, [pc, #108]	; (20374 <init_and_config+0x7c>)
   20308:	f00d faf9 	bl	2d8fe <z_impl_k_sem_init>
   2030c:	4631      	mov	r1, r6
   2030e:	4638      	mov	r0, r7
   20310:	f7ff ff6e 	bl	201f0 <lte_lc_system_mode_get>
	if (err) {
   20314:	4604      	mov	r4, r0
   20316:	b130      	cbz	r0, 20326 <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   20318:	2145      	movs	r1, #69	; 0x45
   2031a:	4602      	mov	r2, r0
   2031c:	4816      	ldr	r0, [pc, #88]	; (20378 <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   2031e:	f00b fbf6 	bl	2bb0e <z_log_minimal_printk>
}
   20322:	4620      	mov	r0, r4
   20324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   20326:	4b15      	ldr	r3, [pc, #84]	; (2037c <init_and_config+0x84>)
   20328:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   2032a:	4b15      	ldr	r3, [pc, #84]	; (20380 <init_and_config+0x88>)
   2032c:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   2032e:	783b      	ldrb	r3, [r7, #0]
   20330:	4283      	cmp	r3, r0
   20332:	d102      	bne.n	2033a <init_and_config+0x42>
   20334:	7833      	ldrb	r3, [r6, #0]
   20336:	428b      	cmp	r3, r1
   20338:	d007      	beq.n	2034a <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   2033a:	f7ff ff17 	bl	2016c <lte_lc_system_mode_set>
		if (err) {
   2033e:	4604      	mov	r4, r0
   20340:	b118      	cbz	r0, 2034a <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   20342:	4602      	mov	r2, r0
   20344:	2145      	movs	r1, #69	; 0x45
   20346:	480f      	ldr	r0, [pc, #60]	; (20384 <init_and_config+0x8c>)
   20348:	e7e9      	b.n	2031e <init_and_config+0x26>
	err = enable_notifications();
   2034a:	f7ff fd71 	bl	1fe30 <enable_notifications>
	if (err) {
   2034e:	4604      	mov	r4, r0
   20350:	b120      	cbz	r0, 2035c <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   20352:	2145      	movs	r1, #69	; 0x45
   20354:	480c      	ldr	r0, [pc, #48]	; (20388 <init_and_config+0x90>)
   20356:	f00b fbda 	bl	2bb0e <z_log_minimal_printk>
		return err;
   2035a:	e7e2      	b.n	20322 <init_and_config+0x2a>
	is_initialized = true;
   2035c:	2301      	movs	r3, #1
   2035e:	702b      	strb	r3, [r5, #0]
	return 0;
   20360:	e7df      	b.n	20322 <init_and_config+0x2a>
		return 0;
   20362:	2400      	movs	r4, #0
   20364:	e7dd      	b.n	20322 <init_and_config+0x2a>
   20366:	bf00      	nop
   20368:	2000d5a6 	.word	0x2000d5a6
   2036c:	2000d5a7 	.word	0x2000d5a7
   20370:	2000d64b 	.word	0x2000d64b
   20374:	2000d0c8 	.word	0x2000d0c8
   20378:	000307b3 	.word	0x000307b3
   2037c:	2000c8b8 	.word	0x2000c8b8
   20380:	2000d5a8 	.word	0x2000d5a8
   20384:	000307e5 	.word	0x000307e5
   20388:	0003080f 	.word	0x0003080f

0002038c <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   2038c:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   2038e:	4604      	mov	r4, r0
   20390:	b1a8      	cbz	r0, 203be <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   20392:	f10d 0206 	add.w	r2, sp, #6
   20396:	490b      	ldr	r1, [pc, #44]	; (203c4 <lte_lc_func_mode_get+0x38>)
   20398:	480b      	ldr	r0, [pc, #44]	; (203c8 <lte_lc_func_mode_get+0x3c>)
   2039a:	f005 f94f 	bl	2563c <nrf_modem_at_scanf>
	if (err != 1) {
   2039e:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   203a0:	4602      	mov	r2, r0
	if (err != 1) {
   203a2:	d007      	beq.n	203b4 <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   203a4:	4809      	ldr	r0, [pc, #36]	; (203cc <lte_lc_func_mode_get+0x40>)
   203a6:	2145      	movs	r1, #69	; 0x45
   203a8:	f00b fbb1 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   203ac:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   203b0:	b002      	add	sp, #8
   203b2:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   203b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   203b8:	2000      	movs	r0, #0
	*mode = mode_tmp;
   203ba:	7023      	strb	r3, [r4, #0]
	return 0;
   203bc:	e7f8      	b.n	203b0 <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   203be:	f06f 0015 	mvn.w	r0, #21
   203c2:	e7f5      	b.n	203b0 <lte_lc_func_mode_get+0x24>
   203c4:	00030833 	.word	0x00030833
   203c8:	0003083e 	.word	0x0003083e
   203cc:	00030847 	.word	0x00030847

000203d0 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   203d0:	2804      	cmp	r0, #4
{
   203d2:	b510      	push	{r4, lr}
   203d4:	4604      	mov	r4, r0
	switch (mode) {
   203d6:	d819      	bhi.n	2040c <lte_lc_func_mode_set+0x3c>
   203d8:	2804      	cmp	r0, #4
   203da:	d81c      	bhi.n	20416 <lte_lc_func_mode_set+0x46>
   203dc:	e8df f000 	tbb	[pc, r0]
   203e0:	1b230b23 	.word	0x1b230b23
   203e4:	23          	.byte	0x23
   203e5:	00          	.byte	0x00
   203e6:	2201      	movs	r2, #1
   203e8:	fa02 f303 	lsl.w	r3, r2, r3
   203ec:	4a12      	ldr	r2, [pc, #72]	; (20438 <lte_lc_func_mode_set+0x68>)
   203ee:	4213      	tst	r3, r2
   203f0:	d119      	bne.n	20426 <lte_lc_func_mode_set+0x56>
   203f2:	079b      	lsls	r3, r3, #30
   203f4:	d50f      	bpl.n	20416 <lte_lc_func_mode_set+0x46>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   203f6:	f7ff fd1b 	bl	1fe30 <enable_notifications>
		if (err) {
   203fa:	4602      	mov	r2, r0
   203fc:	b198      	cbz	r0, 20426 <lte_lc_func_mode_set+0x56>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   203fe:	480f      	ldr	r0, [pc, #60]	; (2043c <lte_lc_func_mode_set+0x6c>)
   20400:	2145      	movs	r1, #69	; 0x45
   20402:	f00b fb84 	bl	2bb0e <z_log_minimal_printk>
			return -EFAULT;
   20406:	f06f 000d 	mvn.w	r0, #13
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
}
   2040a:	bd10      	pop	{r4, pc}
	switch (mode) {
   2040c:	f1a0 0314 	sub.w	r3, r0, #20
   20410:	b2db      	uxtb	r3, r3
   20412:	2b18      	cmp	r3, #24
   20414:	d9e7      	bls.n	203e6 <lte_lc_func_mode_set+0x16>
		LOG_ERR("Invalid functional mode: %d", mode);
   20416:	480a      	ldr	r0, [pc, #40]	; (20440 <lte_lc_func_mode_set+0x70>)
   20418:	4622      	mov	r2, r4
   2041a:	2145      	movs	r1, #69	; 0x45
   2041c:	f00b fb77 	bl	2bb0e <z_log_minimal_printk>
		return -EINVAL;
   20420:	f06f 0015 	mvn.w	r0, #21
   20424:	e7f1      	b.n	2040a <lte_lc_func_mode_set+0x3a>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   20426:	4621      	mov	r1, r4
   20428:	4806      	ldr	r0, [pc, #24]	; (20444 <lte_lc_func_mode_set+0x74>)
   2042a:	f005 f879 	bl	25520 <nrf_modem_at_printf>
   2042e:	2800      	cmp	r0, #0
   20430:	bf18      	it	ne
   20432:	f06f 000d 	mvnne.w	r0, #13
   20436:	e7e8      	b.n	2040a <lte_lc_func_mode_set+0x3a>
   20438:	01300c01 	.word	0x01300c01
   2043c:	00030887 	.word	0x00030887
   20440:	000308b6 	.word	0x000308b6
   20444:	000308d7 	.word	0x000308d7

00020448 <connect_lte>:
	if (!is_initialized) {
   20448:	4b3e      	ldr	r3, [pc, #248]	; (20544 <connect_lte+0xfc>)
{
   2044a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   2044e:	781b      	ldrb	r3, [r3, #0]
{
   20450:	4605      	mov	r5, r0
	if (!is_initialized) {
   20452:	b943      	cbnz	r3, 20466 <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   20454:	483c      	ldr	r0, [pc, #240]	; (20548 <connect_lte+0x100>)
   20456:	2145      	movs	r1, #69	; 0x45
   20458:	f00b fb59 	bl	2bb0e <z_log_minimal_printk>
		return -EPERM;
   2045c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20460:	b002      	add	sp, #8
   20462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20466:	2601      	movs	r6, #1
   20468:	4c38      	ldr	r4, [pc, #224]	; (2054c <connect_lte+0x104>)
   2046a:	e8d4 3fef 	ldaex	r3, [r4]
   2046e:	e8c4 6fe2 	stlex	r2, r6, [r4]
   20472:	2a00      	cmp	r2, #0
   20474:	d1f9      	bne.n	2046a <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   20476:	2b00      	cmp	r3, #0
   20478:	d160      	bne.n	2053c <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   2047a:	f10d 0007 	add.w	r0, sp, #7
   2047e:	f7ff fe51 	bl	20124 <lte_lc_nw_reg_status_get>
	if (err) {
   20482:	b130      	cbz	r0, 20492 <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   20484:	4832      	ldr	r0, [pc, #200]	; (20550 <connect_lte+0x108>)
   20486:	2145      	movs	r1, #69	; 0x45
   20488:	f00b fb41 	bl	2bb0e <z_log_minimal_printk>
		return -EFAULT;
   2048c:	f06f 000d 	mvn.w	r0, #13
   20490:	e7e6      	b.n	20460 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   20492:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20496:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2049a:	2b01      	cmp	r3, #1
   2049c:	d0e0      	beq.n	20460 <connect_lte+0x18>
	if (blocking) {
   2049e:	b125      	cbz	r5, 204aa <connect_lte+0x62>
   204a0:	4601      	mov	r1, r0
   204a2:	4632      	mov	r2, r6
   204a4:	482b      	ldr	r0, [pc, #172]	; (20554 <connect_lte+0x10c>)
   204a6:	f00d fa2a 	bl	2d8fe <z_impl_k_sem_init>
{
   204aa:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   204ac:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 20558 <connect_lte+0x110>
   204b0:	4e2a      	ldr	r6, [pc, #168]	; (2055c <connect_lte+0x114>)
		err = lte_lc_func_mode_get(&current_func_mode);
   204b2:	f10d 0006 	add.w	r0, sp, #6
   204b6:	f7ff ff69 	bl	2038c <lte_lc_func_mode_get>
		if (err) {
   204ba:	b9b8      	cbnz	r0, 204ec <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   204bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   204c0:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   204c4:	d00b      	beq.n	204de <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   204c6:	2001      	movs	r0, #1
   204c8:	f7ff ff82 	bl	203d0 <lte_lc_func_mode_set>
		if (err || !blocking) {
   204cc:	b188      	cbz	r0, 204f2 <connect_lte+0xaa>
   204ce:	2300      	movs	r3, #0
   204d0:	e8d4 2fef 	ldaex	r2, [r4]
   204d4:	e8c4 3fe1 	stlex	r1, r3, [r4]
   204d8:	2900      	cmp	r1, #0
   204da:	d0c1      	beq.n	20460 <connect_lte+0x18>
   204dc:	e7f8      	b.n	204d0 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   204de:	f898 1000 	ldrb.w	r1, [r8]
   204e2:	7830      	ldrb	r0, [r6, #0]
   204e4:	f7ff fe42 	bl	2016c <lte_lc_system_mode_set>
			if (err) {
   204e8:	2800      	cmp	r0, #0
   204ea:	d0ec      	beq.n	204c6 <connect_lte+0x7e>
			err = -EFAULT;
   204ec:	f06f 000d 	mvn.w	r0, #13
   204f0:	e7ed      	b.n	204ce <connect_lte+0x86>
		if (err || !blocking) {
   204f2:	2d00      	cmp	r5, #0
   204f4:	d0eb      	beq.n	204ce <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   204f6:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   204fa:	2300      	movs	r3, #0
   204fc:	4815      	ldr	r0, [pc, #84]	; (20554 <connect_lte+0x10c>)
   204fe:	f006 f997 	bl	26830 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   20502:	f110 0f0b 	cmn.w	r0, #11
   20506:	d1e2      	bne.n	204ce <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   20508:	2149      	movs	r1, #73	; 0x49
   2050a:	4815      	ldr	r0, [pc, #84]	; (20560 <connect_lte+0x118>)
   2050c:	f00b faff 	bl	2bb0e <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   20510:	2f01      	cmp	r7, #1
   20512:	d010      	beq.n	20536 <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   20514:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   20516:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   20518:	2b01      	cmp	r3, #1
   2051a:	bf0c      	ite	eq
   2051c:	2302      	moveq	r3, #2
   2051e:	2301      	movne	r3, #1
   20520:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   20522:	f7ff ff55 	bl	203d0 <lte_lc_func_mode_set>
				if (err) {
   20526:	2800      	cmp	r0, #0
   20528:	d1e0      	bne.n	204ec <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   2052a:	2149      	movs	r1, #73	; 0x49
   2052c:	480d      	ldr	r0, [pc, #52]	; (20564 <connect_lte+0x11c>)
   2052e:	f00b faee 	bl	2bb0e <z_log_minimal_printk>
   20532:	2701      	movs	r7, #1
   20534:	e7bd      	b.n	204b2 <connect_lte+0x6a>
				err = -ETIMEDOUT;
   20536:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2053a:	e7c8      	b.n	204ce <connect_lte+0x86>
		return -EINPROGRESS;
   2053c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   20540:	e78e      	b.n	20460 <connect_lte+0x18>
   20542:	bf00      	nop
   20544:	2000d5a6 	.word	0x2000d5a6
   20548:	000308e2 	.word	0x000308e2
   2054c:	2000d0c4 	.word	0x2000d0c4
   20550:	00030912 	.word	0x00030912
   20554:	2000d0c8 	.word	0x2000d0c8
   20558:	2000d5a7 	.word	0x2000d5a7
   2055c:	2000c8b8 	.word	0x2000c8b8
   20560:	00030941 	.word	0x00030941
   20564:	0003096b 	.word	0x0003096b

00020568 <lte_lc_connect_async>:
{
   20568:	b508      	push	{r3, lr}
	if (handler) {
   2056a:	b130      	cbz	r0, 2057a <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   2056c:	f000 f834 	bl	205d8 <event_handler_list_append_handler>
}
   20570:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   20574:	2000      	movs	r0, #0
   20576:	f7ff bf67 	b.w	20448 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   2057a:	f000 f825 	bl	205c8 <event_handler_list_is_empty>
   2057e:	2800      	cmp	r0, #0
   20580:	d0f6      	beq.n	20570 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   20582:	2145      	movs	r1, #69	; 0x45
   20584:	4802      	ldr	r0, [pc, #8]	; (20590 <lte_lc_connect_async+0x28>)
   20586:	f00b fac2 	bl	2bb0e <z_log_minimal_printk>
}
   2058a:	f06f 0015 	mvn.w	r0, #21
   2058e:	bd08      	pop	{r3, pc}
   20590:	0003098c 	.word	0x0003098c

00020594 <event_handler_list_find_node>:
	return list->head;
   20594:	4b08      	ldr	r3, [pc, #32]	; (205b8 <event_handler_list_find_node+0x24>)
{
   20596:	4602      	mov	r2, r0
   20598:	6818      	ldr	r0, [r3, #0]
   2059a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2059c:	b120      	cbz	r0, 205a8 <event_handler_list_find_node+0x14>
   2059e:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   205a0:	6843      	ldr	r3, [r0, #4]
   205a2:	428b      	cmp	r3, r1
   205a4:	d101      	bne.n	205aa <event_handler_list_find_node+0x16>
			*prev_out = prev;
   205a6:	6014      	str	r4, [r2, #0]
}
   205a8:	bd10      	pop	{r4, pc}
	return node->next;
   205aa:	6803      	ldr	r3, [r0, #0]
   205ac:	4604      	mov	r4, r0
   205ae:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   205b0:	2b00      	cmp	r3, #0
   205b2:	d1f5      	bne.n	205a0 <event_handler_list_find_node+0xc>
   205b4:	e7f8      	b.n	205a8 <event_handler_list_find_node+0x14>
   205b6:	bf00      	nop
   205b8:	2000d0e8 	.word	0x2000d0e8

000205bc <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   205bc:	4801      	ldr	r0, [pc, #4]	; (205c4 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   205be:	f005 bf81 	b.w	264c4 <z_impl_k_mutex_unlock>
   205c2:	bf00      	nop
   205c4:	2000ca38 	.word	0x2000ca38

000205c8 <event_handler_list_is_empty>:
	return list->head;
   205c8:	4b02      	ldr	r3, [pc, #8]	; (205d4 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   205ca:	6818      	ldr	r0, [r3, #0]
}
   205cc:	fab0 f080 	clz	r0, r0
   205d0:	0940      	lsrs	r0, r0, #5
   205d2:	4770      	bx	lr
   205d4:	2000d0e8 	.word	0x2000d0e8

000205d8 <event_handler_list_append_handler>:
{
   205d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   205da:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   205dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   205e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205e4:	4812      	ldr	r0, [pc, #72]	; (20630 <event_handler_list_append_handler+0x58>)
   205e6:	f005 fe9b 	bl	26320 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   205ea:	4629      	mov	r1, r5
   205ec:	a801      	add	r0, sp, #4
   205ee:	f7ff ffd1 	bl	20594 <event_handler_list_find_node>
   205f2:	4604      	mov	r4, r0
   205f4:	b120      	cbz	r0, 20600 <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   205f6:	f7ff ffe1 	bl	205bc <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   205fa:	2000      	movs	r0, #0
}
   205fc:	b003      	add	sp, #12
   205fe:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   20600:	2008      	movs	r0, #8
   20602:	f00d faa8 	bl	2db56 <k_malloc>
   20606:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   20608:	b920      	cbnz	r0, 20614 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   2060a:	f7ff ffd7 	bl	205bc <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   2060e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20612:	e7f3      	b.n	205fc <event_handler_list_append_handler+0x24>
	return list->tail;
   20614:	4a07      	ldr	r2, [pc, #28]	; (20634 <event_handler_list_append_handler+0x5c>)
   20616:	6004      	str	r4, [r0, #0]
   20618:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   2061a:	9b01      	ldr	r3, [sp, #4]
   2061c:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   2061e:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   20622:	b911      	cbnz	r1, 2062a <event_handler_list_append_handler+0x52>
	list->head = node;
   20624:	e9c2 3300 	strd	r3, r3, [r2]
}
   20628:	e7e5      	b.n	205f6 <event_handler_list_append_handler+0x1e>
	parent->next = child;
   2062a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2062c:	6053      	str	r3, [r2, #4]
}
   2062e:	e7e2      	b.n	205f6 <event_handler_list_append_handler+0x1e>
   20630:	2000ca38 	.word	0x2000ca38
   20634:	2000d0e8 	.word	0x2000d0e8

00020638 <event_handler_list_dispatch>:
{
   20638:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2063a:	4c0d      	ldr	r4, [pc, #52]	; (20670 <event_handler_list_dispatch+0x38>)
   2063c:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   2063e:	6823      	ldr	r3, [r4, #0]
   20640:	b1ab      	cbz	r3, 2066e <event_handler_list_dispatch+0x36>
   20642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2064a:	480a      	ldr	r0, [pc, #40]	; (20674 <event_handler_list_dispatch+0x3c>)
   2064c:	f005 fe68 	bl	26320 <z_impl_k_mutex_lock>
   20650:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20652:	b91b      	cbnz	r3, 2065c <event_handler_list_dispatch+0x24>
}
   20654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   20658:	f7ff bfb0 	b.w	205bc <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   2065c:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   2065e:	4628      	mov	r0, r5
   20660:	685b      	ldr	r3, [r3, #4]
   20662:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   20664:	2c00      	cmp	r4, #0
   20666:	d0f5      	beq.n	20654 <event_handler_list_dispatch+0x1c>
   20668:	4623      	mov	r3, r4
   2066a:	6824      	ldr	r4, [r4, #0]
   2066c:	e7f7      	b.n	2065e <event_handler_list_dispatch+0x26>
}
   2066e:	bd38      	pop	{r3, r4, r5, pc}
   20670:	2000d0e8 	.word	0x2000d0e8
   20674:	2000ca38 	.word	0x2000ca38

00020678 <response_is_valid>:
{
   20678:	b570      	push	{r4, r5, r6, lr}
   2067a:	460e      	mov	r6, r1
   2067c:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   2067e:	4605      	mov	r5, r0
   20680:	b100      	cbz	r0, 20684 <response_is_valid+0xc>
   20682:	b92a      	cbnz	r2, 20690 <response_is_valid+0x18>
		LOG_ERR("Invalid pointer provided");
   20684:	2145      	movs	r1, #69	; 0x45
   20686:	4809      	ldr	r0, [pc, #36]	; (206ac <response_is_valid+0x34>)
   20688:	f00b fa41 	bl	2bb0e <z_log_minimal_printk>
		return false;
   2068c:	2000      	movs	r0, #0
   2068e:	e00c      	b.n	206aa <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   20690:	4610      	mov	r0, r2
   20692:	f7f8 ff63 	bl	1955c <strlen>
   20696:	4286      	cmp	r6, r0
   20698:	d3f8      	bcc.n	2068c <response_is_valid+0x14>
	    (memcmp(response, check, response_len) != 0)) {
   2069a:	4632      	mov	r2, r6
   2069c:	4621      	mov	r1, r4
   2069e:	4628      	mov	r0, r5
   206a0:	f00d fa7d 	bl	2db9e <memcmp>
	if ((response_len < strlen(check)) ||
   206a4:	fab0 f080 	clz	r0, r0
   206a8:	0940      	lsrs	r0, r0, #5
}
   206aa:	bd70      	pop	{r4, r5, r6, pc}
   206ac:	00030a2b 	.word	0x00030a2b

000206b0 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   206b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   206b4:	f04f 0800 	mov.w	r8, #0
{
   206b8:	4606      	mov	r6, r0
   206ba:	460f      	mov	r7, r1
   206bc:	4614      	mov	r4, r2
   206be:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   206c0:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   206c4:	f7f8 ff4a 	bl	1955c <strlen>
   206c8:	2808      	cmp	r0, #8
   206ca:	d004      	beq.n	206d6 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   206cc:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   206d0:	b003      	add	sp, #12
   206d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   206d6:	4638      	mov	r0, r7
   206d8:	f7f8 ff40 	bl	1955c <strlen>
   206dc:	2808      	cmp	r0, #8
   206de:	d1f5      	bne.n	206cc <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   206e0:	883a      	ldrh	r2, [r7, #0]
   206e2:	78bb      	ldrb	r3, [r7, #2]
   206e4:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   206e8:	4641      	mov	r1, r8
   206ea:	2202      	movs	r2, #2
   206ec:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   206ee:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   206f2:	f009 f9b9 	bl	29a68 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   206f6:	2807      	cmp	r0, #7
   206f8:	d904      	bls.n	20704 <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   206fa:	2145      	movs	r1, #69	; 0x45
   206fc:	482d      	ldr	r0, [pc, #180]	; (207b4 <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   206fe:	f00b fa06 	bl	2bb0e <z_log_minimal_printk>
   20702:	e7e3      	b.n	206cc <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   20704:	4b2c      	ldr	r3, [pc, #176]	; (207b8 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   20706:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   20708:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   2070c:	4641      	mov	r1, r8
   2070e:	1cf8      	adds	r0, r7, #3
   20710:	f009 f9aa 	bl	29a68 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20714:	f1b9 0f00 	cmp.w	r9, #0
   20718:	d118      	bne.n	2074c <parse_psm+0x9c>
   2071a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2071e:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   20720:	b1cc      	cbz	r4, 20756 <parse_psm+0xa6>
   20722:	4620      	mov	r0, r4
   20724:	f7f8 ff1a 	bl	1955c <strlen>
   20728:	2808      	cmp	r0, #8
   2072a:	d114      	bne.n	20756 <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   2072c:	8822      	ldrh	r2, [r4, #0]
   2072e:	78a3      	ldrb	r3, [r4, #2]
   20730:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   20734:	2100      	movs	r1, #0
   20736:	2202      	movs	r2, #2
   20738:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   2073a:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   2073e:	f009 f993 	bl	29a68 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   20742:	2807      	cmp	r0, #7
   20744:	d917      	bls.n	20776 <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   20746:	2145      	movs	r1, #69	; 0x45
   20748:	481c      	ldr	r0, [pc, #112]	; (207bc <parse_psm+0x10c>)
   2074a:	e7d8      	b.n	206fe <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2074c:	fb09 f000 	mul.w	r0, r9, r0
   20750:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   20752:	3001      	adds	r0, #1
   20754:	d0e4      	beq.n	20720 <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   20756:	8832      	ldrh	r2, [r6, #0]
   20758:	78b3      	ldrb	r3, [r6, #2]
   2075a:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2075e:	2100      	movs	r1, #0
   20760:	2202      	movs	r2, #2
   20762:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   20764:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   20768:	f009 f97e 	bl	29a68 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2076c:	2807      	cmp	r0, #7
   2076e:	d911      	bls.n	20794 <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   20770:	2145      	movs	r1, #69	; 0x45
   20772:	4813      	ldr	r0, [pc, #76]	; (207c0 <parse_psm+0x110>)
   20774:	e7c3      	b.n	206fe <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   20776:	4b13      	ldr	r3, [pc, #76]	; (207c4 <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   20778:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   2077a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2077e:	2100      	movs	r1, #0
   20780:	1ce0      	adds	r0, r4, #3
   20782:	f009 f971 	bl	29a68 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   20786:	b117      	cbz	r7, 2078e <parse_psm+0xde>
   20788:	4378      	muls	r0, r7
   2078a:	6028      	str	r0, [r5, #0]
   2078c:	e7e3      	b.n	20756 <parse_psm+0xa6>
   2078e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20792:	e7fa      	b.n	2078a <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   20794:	4b0c      	ldr	r3, [pc, #48]	; (207c8 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   20796:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   20798:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   2079c:	2100      	movs	r1, #0
   2079e:	1cf0      	adds	r0, r6, #3
   207a0:	f009 f962 	bl	29a68 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   207a4:	b11c      	cbz	r4, 207ae <parse_psm+0xfe>
   207a6:	4360      	muls	r0, r4
   207a8:	6068      	str	r0, [r5, #4]
	return 0;
   207aa:	2000      	movs	r0, #0
   207ac:	e790      	b.n	206d0 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   207ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   207b2:	e7f9      	b.n	207a8 <parse_psm+0xf8>
   207b4:	00030ba8 	.word	0x00030ba8
   207b8:	0002ed60 	.word	0x0002ed60
   207bc:	00030be2 	.word	0x00030be2
   207c0:	00030c13 	.word	0x00030c13
   207c4:	0002ed40 	.word	0x0002ed40
   207c8:	0002ed40 	.word	0x0002ed40

000207cc <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   207cc:	2300      	movs	r3, #0
{
   207ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   207d0:	b085      	sub	sp, #20
   207d2:	4607      	mov	r7, r0
   207d4:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   207d6:	a802      	add	r0, sp, #8
   207d8:	2104      	movs	r1, #4
{
   207da:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   207dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   207e0:	f00b fe3d 	bl	2c45e <at_params_list_init>
	if (err) {
   207e4:	4604      	mov	r4, r0
   207e6:	b138      	cbz	r0, 207f8 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   207e8:	4602      	mov	r2, r0
   207ea:	2145      	movs	r1, #69	; 0x45
   207ec:	4817      	ldr	r0, [pc, #92]	; (2084c <parse_rrc_mode+0x80>)
   207ee:	f00b f98e 	bl	2bb0e <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   207f2:	4620      	mov	r0, r4
   207f4:	b005      	add	sp, #20
   207f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   207f8:	4601      	mov	r1, r0
   207fa:	aa02      	add	r2, sp, #8
   207fc:	4638      	mov	r0, r7
   207fe:	f00b fe2b 	bl	2c458 <at_parser_params_from_str>
	if (err) {
   20802:	4604      	mov	r4, r0
   20804:	b140      	cbz	r0, 20818 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   20806:	2145      	movs	r1, #69	; 0x45
   20808:	4602      	mov	r2, r0
   2080a:	4811      	ldr	r0, [pc, #68]	; (20850 <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   2080c:	f00b f97f 	bl	2bb0e <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   20810:	a802      	add	r0, sp, #8
   20812:	f00b fe37 	bl	2c484 <at_params_list_free>
	return err;
   20816:	e7ec      	b.n	207f2 <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   20818:	4631      	mov	r1, r6
   2081a:	aa01      	add	r2, sp, #4
   2081c:	a802      	add	r0, sp, #8
   2081e:	f00b fef5 	bl	2c60c <at_params_int_get>
	if (err) {
   20822:	4604      	mov	r4, r0
   20824:	b118      	cbz	r0, 2082e <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   20826:	4602      	mov	r2, r0
   20828:	2145      	movs	r1, #69	; 0x45
   2082a:	480a      	ldr	r0, [pc, #40]	; (20854 <parse_rrc_mode+0x88>)
   2082c:	e7ee      	b.n	2080c <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   2082e:	9a01      	ldr	r2, [sp, #4]
   20830:	b90a      	cbnz	r2, 20836 <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   20832:	7028      	strb	r0, [r5, #0]
   20834:	e7ec      	b.n	20810 <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   20836:	2a01      	cmp	r2, #1
   20838:	d101      	bne.n	2083e <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   2083a:	702a      	strb	r2, [r5, #0]
   2083c:	e7e8      	b.n	20810 <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   2083e:	2145      	movs	r1, #69	; 0x45
   20840:	4805      	ldr	r0, [pc, #20]	; (20858 <parse_rrc_mode+0x8c>)
   20842:	f00b f964 	bl	2bb0e <z_log_minimal_printk>
		err = -EINVAL;
   20846:	f06f 0415 	mvn.w	r4, #21
   2084a:	e7e1      	b.n	20810 <parse_rrc_mode+0x44>
   2084c:	00030a49 	.word	0x00030a49
   20850:	00030c3b 	.word	0x00030c3b
   20854:	00030c6b 	.word	0x00030c6b
   20858:	00030c99 	.word	0x00030c99

0002085c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   2085c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20860:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   20862:	2300      	movs	r3, #0
{
   20864:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   20866:	9303      	str	r3, [sp, #12]
   20868:	f8ad 3010 	strh.w	r3, [sp, #16]
   2086c:	f88d 3012 	strb.w	r3, [sp, #18]
{
   20870:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   20872:	2309      	movs	r3, #9
   20874:	2207      	movs	r2, #7
{
   20876:	4605      	mov	r5, r0
   20878:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2087a:	a805      	add	r0, sp, #20
   2087c:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   2087e:	e9cd 2300 	strd	r2, r3, [sp]
{
   20882:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   20886:	f00b fdea 	bl	2c45e <at_params_list_init>
	if (err) {
   2088a:	4604      	mov	r4, r0
   2088c:	b140      	cbz	r0, 208a0 <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2088e:	4602      	mov	r2, r0
   20890:	2145      	movs	r1, #69	; 0x45
   20892:	4854      	ldr	r0, [pc, #336]	; (209e4 <parse_cereg+0x188>)
   20894:	f00b f93b 	bl	2bb0e <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   20898:	4620      	mov	r0, r4
   2089a:	b00b      	add	sp, #44	; 0x2c
   2089c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   208a0:	4601      	mov	r1, r0
   208a2:	aa05      	add	r2, sp, #20
   208a4:	4628      	mov	r0, r5
   208a6:	f00b fdd7 	bl	2c458 <at_parser_params_from_str>
	if (err) {
   208aa:	4604      	mov	r4, r0
   208ac:	b140      	cbz	r0, 208c0 <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   208ae:	2145      	movs	r1, #69	; 0x45
   208b0:	4602      	mov	r2, r0
   208b2:	484d      	ldr	r0, [pc, #308]	; (209e8 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   208b4:	f00b f92b 	bl	2bb0e <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   208b8:	a805      	add	r0, sp, #20
   208ba:	f00b fde3 	bl	2c484 <at_params_list_free>
	return err;
   208be:	e7eb      	b.n	20898 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   208c0:	4601      	mov	r1, r0
   208c2:	466b      	mov	r3, sp
   208c4:	aa03      	add	r2, sp, #12
   208c6:	a805      	add	r0, sp, #20
   208c8:	f00b fed5 	bl	2c676 <at_params_string_get>
	if (err) {
   208cc:	4604      	mov	r4, r0
   208ce:	b118      	cbz	r0, 208d8 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   208d0:	4602      	mov	r2, r0
   208d2:	2145      	movs	r1, #69	; 0x45
   208d4:	4845      	ldr	r0, [pc, #276]	; (209ec <parse_cereg+0x190>)
   208d6:	e7ed      	b.n	208b4 <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   208d8:	4a45      	ldr	r2, [pc, #276]	; (209f0 <parse_cereg+0x194>)
   208da:	9900      	ldr	r1, [sp, #0]
   208dc:	a803      	add	r0, sp, #12
   208de:	f7ff fecb 	bl	20678 <response_is_valid>
   208e2:	2800      	cmp	r0, #0
   208e4:	d0e8      	beq.n	208b8 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   208e6:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   208e8:	bf14      	ite	ne
   208ea:	2101      	movne	r1, #1
   208ec:	2102      	moveq	r1, #2
   208ee:	aa07      	add	r2, sp, #28
   208f0:	a805      	add	r0, sp, #20
   208f2:	f00b fe8b 	bl	2c60c <at_params_int_get>
	if (err) {
   208f6:	1e05      	subs	r5, r0, #0
   208f8:	d132      	bne.n	20960 <parse_cereg+0x104>
	switch (reg_status) {
   208fa:	9d07      	ldr	r5, [sp, #28]
   208fc:	2d08      	cmp	r5, #8
   208fe:	d012      	beq.n	20926 <parse_cereg+0xca>
   20900:	dc0f      	bgt.n	20922 <parse_cereg+0xc6>
   20902:	2d05      	cmp	r5, #5
   20904:	d90f      	bls.n	20926 <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   20906:	462a      	mov	r2, r5
   20908:	2145      	movs	r1, #69	; 0x45
   2090a:	483a      	ldr	r0, [pc, #232]	; (209f4 <parse_cereg+0x198>)
   2090c:	f00b f8ff 	bl	2bb0e <z_log_minimal_printk>
		return -EINVAL;
   20910:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   20914:	462a      	mov	r2, r5
   20916:	2145      	movs	r1, #69	; 0x45
   20918:	4837      	ldr	r0, [pc, #220]	; (209f8 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   2091a:	f00b f8f8 	bl	2bb0e <z_log_minimal_printk>
			goto clean_exit;
   2091e:	462c      	mov	r4, r5
   20920:	e7ca      	b.n	208b8 <parse_cereg+0x5c>
	switch (reg_status) {
   20922:	2d5a      	cmp	r5, #90	; 0x5a
   20924:	d1ef      	bne.n	20906 <parse_cereg+0xaa>
	if (reg_status) {
   20926:	f1b9 0f00 	cmp.w	r9, #0
   2092a:	d001      	beq.n	20930 <parse_cereg+0xd4>
		*reg_status = status;
   2092c:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   20930:	2e00      	cmp	r6, #0
   20932:	d03e      	beq.n	209b2 <parse_cereg+0x156>
   20934:	2d5a      	cmp	r5, #90	; 0x5a
   20936:	d050      	beq.n	209da <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   20938:	a805      	add	r0, sp, #20
   2093a:	f00b fec3 	bl	2c6c4 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2093e:	2803      	cmp	r0, #3
   20940:	d94b      	bls.n	209da <parse_cereg+0x17e>
		err = at_params_string_get(
   20942:	2f00      	cmp	r7, #0
   20944:	bf14      	ite	ne
   20946:	2102      	movne	r1, #2
   20948:	2103      	moveq	r1, #3
   2094a:	ab01      	add	r3, sp, #4
   2094c:	aa07      	add	r2, sp, #28
   2094e:	a805      	add	r0, sp, #20
   20950:	f00b fe91 	bl	2c676 <at_params_string_get>
		if (err) {
   20954:	4605      	mov	r5, r0
   20956:	b128      	cbz	r0, 20964 <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   20958:	4602      	mov	r2, r0
   2095a:	2145      	movs	r1, #69	; 0x45
   2095c:	4827      	ldr	r0, [pc, #156]	; (209fc <parse_cereg+0x1a0>)
   2095e:	e7dc      	b.n	2091a <parse_cereg+0xbe>
	if (status < 0) {
   20960:	dae1      	bge.n	20926 <parse_cereg+0xca>
   20962:	e7d7      	b.n	20914 <parse_cereg+0xb8>
		str_buf[len] = '\0';
   20964:	9b01      	ldr	r3, [sp, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   20966:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   20968:	3328      	adds	r3, #40	; 0x28
   2096a:	446b      	add	r3, sp
   2096c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   20970:	2210      	movs	r2, #16
   20972:	a807      	add	r0, sp, #28
   20974:	f009 f878 	bl	29a68 <strtoul>
		len = sizeof(str_buf) - 1;
   20978:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   2097a:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   2097c:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   2097e:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   20980:	bf14      	ite	ne
   20982:	2103      	movne	r1, #3
   20984:	2104      	moveq	r1, #4
   20986:	ab01      	add	r3, sp, #4
   20988:	aa07      	add	r2, sp, #28
   2098a:	a805      	add	r0, sp, #20
   2098c:	f00b fe73 	bl	2c676 <at_params_string_get>
		if (err) {
   20990:	4605      	mov	r5, r0
   20992:	b118      	cbz	r0, 2099c <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   20994:	4602      	mov	r2, r0
   20996:	2145      	movs	r1, #69	; 0x45
   20998:	4819      	ldr	r0, [pc, #100]	; (20a00 <parse_cereg+0x1a4>)
   2099a:	e7be      	b.n	2091a <parse_cereg+0xbe>
		str_buf[len] = '\0';
   2099c:	9b01      	ldr	r3, [sp, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   2099e:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   209a0:	3328      	adds	r3, #40	; 0x28
   209a2:	446b      	add	r3, sp
   209a4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   209a8:	2210      	movs	r2, #16
   209aa:	a807      	add	r0, sp, #28
   209ac:	f009 f85c 	bl	29a68 <strtoul>
   209b0:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   209b2:	f1b8 0f00 	cmp.w	r8, #0
   209b6:	f43f af7f 	beq.w	208b8 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   209ba:	2f00      	cmp	r7, #0
   209bc:	bf14      	ite	ne
   209be:	2104      	movne	r1, #4
   209c0:	2105      	moveq	r1, #5
   209c2:	aa02      	add	r2, sp, #8
   209c4:	a805      	add	r0, sp, #20
   209c6:	f00b fe21 	bl	2c60c <at_params_int_get>
		if (err) {
   209ca:	b920      	cbnz	r0, 209d6 <parse_cereg+0x17a>
			*lte_mode = mode;
   209cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   209d0:	f888 3000 	strb.w	r3, [r8]
   209d4:	e770      	b.n	208b8 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   209d6:	2300      	movs	r3, #0
   209d8:	e7fa      	b.n	209d0 <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   209da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   209de:	e9c6 3302 	strd	r3, r3, [r6, #8]
   209e2:	e7e6      	b.n	209b2 <parse_cereg+0x156>
   209e4:	00030a49 	.word	0x00030a49
   209e8:	00030cba 	.word	0x00030cba
   209ec:	00030cec 	.word	0x00030cec
   209f0:	000309dd 	.word	0x000309dd
   209f4:	00030d1a 	.word	0x00030d1a
   209f8:	00030646 	.word	0x00030646
   209fc:	00030d47 	.word	0x00030d47
   20a00:	00030d78 	.word	0x00030d78

00020a04 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   20a04:	2300      	movs	r3, #0
{
   20a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20a08:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   20a0a:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   20a0c:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   20a10:	b3c9      	cbz	r1, 20a86 <parse_xt3412+0x82>
   20a12:	b3c0      	cbz	r0, 20a86 <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   20a14:	2104      	movs	r1, #4
   20a16:	4668      	mov	r0, sp
   20a18:	f00b fd21 	bl	2c45e <at_params_list_init>
	if (err) {
   20a1c:	4604      	mov	r4, r0
   20a1e:	b138      	cbz	r0, 20a30 <parse_xt3412+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20a20:	4602      	mov	r2, r0
   20a22:	2145      	movs	r1, #69	; 0x45
   20a24:	4819      	ldr	r0, [pc, #100]	; (20a8c <parse_xt3412+0x88>)
   20a26:	f00b f872 	bl	2bb0e <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   20a2a:	4620      	mov	r0, r4
   20a2c:	b002      	add	sp, #8
   20a2e:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20a30:	4601      	mov	r1, r0
   20a32:	466a      	mov	r2, sp
   20a34:	4630      	mov	r0, r6
   20a36:	f00b fd0f 	bl	2c458 <at_parser_params_from_str>
	if (err) {
   20a3a:	4604      	mov	r4, r0
   20a3c:	b140      	cbz	r0, 20a50 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   20a3e:	2145      	movs	r1, #69	; 0x45
   20a40:	4602      	mov	r2, r0
   20a42:	4813      	ldr	r0, [pc, #76]	; (20a90 <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   20a44:	f00b f863 	bl	2bb0e <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   20a48:	4668      	mov	r0, sp
   20a4a:	f00b fd1b 	bl	2c484 <at_params_list_free>
	return err;
   20a4e:	e7ec      	b.n	20a2a <parse_xt3412+0x26>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   20a50:	462a      	mov	r2, r5
   20a52:	2102      	movs	r1, #2
   20a54:	4668      	mov	r0, sp
   20a56:	f00b fdf6 	bl	2c646 <at_params_int64_get>
	if (err) {
   20a5a:	4604      	mov	r4, r0
   20a5c:	b118      	cbz	r0, 20a66 <parse_xt3412+0x62>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   20a5e:	4602      	mov	r2, r0
   20a60:	2145      	movs	r1, #69	; 0x45
   20a62:	480c      	ldr	r0, [pc, #48]	; (20a94 <parse_xt3412+0x90>)
   20a64:	e7ee      	b.n	20a44 <parse_xt3412+0x40>
	if ((*time > T3412_MAX) || *time < 0) {
   20a66:	490c      	ldr	r1, [pc, #48]	; (20a98 <parse_xt3412+0x94>)
   20a68:	e9d5 2300 	ldrd	r2, r3, [r5]
   20a6c:	4291      	cmp	r1, r2
   20a6e:	f04f 0208 	mov.w	r2, #8
   20a72:	eb72 0303 	sbcs.w	r3, r2, r3
   20a76:	d2e7      	bcs.n	20a48 <parse_xt3412+0x44>
		LOG_WRN("Parsed time parameter not within valid range");
   20a78:	2157      	movs	r1, #87	; 0x57
   20a7a:	4808      	ldr	r0, [pc, #32]	; (20a9c <parse_xt3412+0x98>)
   20a7c:	f00b f847 	bl	2bb0e <z_log_minimal_printk>
		err = -EINVAL;
   20a80:	f06f 0415 	mvn.w	r4, #21
   20a84:	e7e0      	b.n	20a48 <parse_xt3412+0x44>
		return -EINVAL;
   20a86:	f06f 0415 	mvn.w	r4, #21
   20a8a:	e7ce      	b.n	20a2a <parse_xt3412+0x26>
   20a8c:	00030a49 	.word	0x00030a49
   20a90:	00030d9e 	.word	0x00030d9e
   20a94:	00030dd0 	.word	0x00030dd0
   20a98:	5099e000 	.word	0x5099e000
   20a9c:	00030e02 	.word	0x00030e02

00020aa0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   20aa0:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   20aa2:	4604      	mov	r4, r0
   20aa4:	b928      	cbnz	r0, 20ab2 <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   20aa6:	480b      	ldr	r0, [pc, #44]	; (20ad4 <neighborcell_count_get+0x34>)
   20aa8:	2145      	movs	r1, #69	; 0x45
   20aaa:	f00b f830 	bl	2bb0e <z_log_minimal_printk>
   20aae:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   20ab0:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   20ab2:	2400      	movs	r4, #0
   20ab4:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   20ab6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   20aba:	282c      	cmp	r0, #44	; 0x2c
   20abc:	d101      	bne.n	20ac2 <neighborcell_count_get+0x22>
			count++;
   20abe:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   20ac0:	e7f9      	b.n	20ab6 <neighborcell_count_get+0x16>
   20ac2:	2800      	cmp	r0, #0
   20ac4:	d1f7      	bne.n	20ab6 <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   20ac6:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   20ac8:	bf82      	ittt	hi
   20aca:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   20acc:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   20ace:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   20ad2:	e7ed      	b.n	20ab0 <neighborcell_count_get+0x10>
   20ad4:	00030e34 	.word	0x00030e34

00020ad8 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   20ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   20adc:	230b      	movs	r3, #11
{
   20ade:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20ae0:	2100      	movs	r1, #0
{
   20ae2:	4606      	mov	r6, r0
   20ae4:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20ae6:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   20aea:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   20aec:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   20af0:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   20af2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20af6:	2b2c      	cmp	r3, #44	; 0x2c
   20af8:	d101      	bne.n	20afe <parse_ncellmeas+0x26>
			count++;
   20afa:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   20afc:	e7f9      	b.n	20af2 <parse_ncellmeas+0x1a>
   20afe:	2b00      	cmp	r3, #0
   20b00:	d1f7      	bne.n	20af2 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   20b02:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	err = at_params_list_init(&resp_list, param_count);
   20b0a:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20b0c:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   20b0e:	a807      	add	r0, sp, #28
   20b10:	f00b fca5 	bl	2c45e <at_params_list_init>
	if (err) {
   20b14:	4604      	mov	r4, r0
   20b16:	b140      	cbz	r0, 20b2a <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20b18:	4602      	mov	r2, r0
   20b1a:	2145      	movs	r1, #69	; 0x45
   20b1c:	488f      	ldr	r0, [pc, #572]	; (20d5c <parse_ncellmeas+0x284>)
   20b1e:	f00a fff6 	bl	2bb0e <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   20b22:	4620      	mov	r0, r4
   20b24:	b00d      	add	sp, #52	; 0x34
   20b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   20b2a:	4601      	mov	r1, r0
   20b2c:	aa07      	add	r2, sp, #28
   20b2e:	4630      	mov	r0, r6
   20b30:	f00b fc92 	bl	2c458 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   20b34:	4604      	mov	r4, r0
   20b36:	b150      	cbz	r0, 20b4e <parse_ncellmeas+0x76>
   20b38:	1dc3      	adds	r3, r0, #7
   20b3a:	d015      	beq.n	20b68 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   20b3c:	2145      	movs	r1, #69	; 0x45
   20b3e:	4602      	mov	r2, r0
   20b40:	4887      	ldr	r0, [pc, #540]	; (20d60 <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   20b42:	f00a ffe4 	bl	2bb0e <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   20b46:	a807      	add	r0, sp, #28
   20b48:	f00b fc9c 	bl	2c484 <at_params_list_free>
	return err;
   20b4c:	e7e9      	b.n	20b22 <parse_ncellmeas+0x4a>
	bool incomplete = false;
   20b4e:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   20b50:	2100      	movs	r1, #0
   20b52:	ab04      	add	r3, sp, #16
   20b54:	aa09      	add	r2, sp, #36	; 0x24
   20b56:	a807      	add	r0, sp, #28
   20b58:	f00b fd8d 	bl	2c676 <at_params_string_get>
	if (err) {
   20b5c:	4604      	mov	r4, r0
   20b5e:	b128      	cbz	r0, 20b6c <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   20b60:	4602      	mov	r2, r0
   20b62:	2145      	movs	r1, #69	; 0x45
   20b64:	487f      	ldr	r0, [pc, #508]	; (20d64 <parse_ncellmeas+0x28c>)
   20b66:	e7ec      	b.n	20b42 <parse_ncellmeas+0x6a>
		incomplete = true;
   20b68:	2701      	movs	r7, #1
   20b6a:	e7f1      	b.n	20b50 <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   20b6c:	4a7e      	ldr	r2, [pc, #504]	; (20d68 <parse_ncellmeas+0x290>)
   20b6e:	9904      	ldr	r1, [sp, #16]
   20b70:	a809      	add	r0, sp, #36	; 0x24
   20b72:	f7ff fd81 	bl	20678 <response_is_valid>
   20b76:	2800      	cmp	r0, #0
   20b78:	d0e5      	beq.n	20b46 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   20b7a:	2101      	movs	r1, #1
   20b7c:	aa01      	add	r2, sp, #4
   20b7e:	a807      	add	r0, sp, #28
   20b80:	f00b fd44 	bl	2c60c <at_params_int_get>
	if (err) {
   20b84:	4604      	mov	r4, r0
   20b86:	2800      	cmp	r0, #0
   20b88:	d1dd      	bne.n	20b46 <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   20b8a:	9b01      	ldr	r3, [sp, #4]
   20b8c:	2b00      	cmp	r3, #0
   20b8e:	f040 80e2 	bne.w	20d56 <parse_ncellmeas+0x27e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   20b92:	2102      	movs	r1, #2
   20b94:	aa02      	add	r2, sp, #8
   20b96:	a807      	add	r0, sp, #28
   20b98:	f00b fdde 	bl	2c758 <string_param_to_int.constprop.0>
	if (err) {
   20b9c:	4604      	mov	r4, r0
   20b9e:	2800      	cmp	r0, #0
   20ba0:	d1d1      	bne.n	20b46 <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20ba2:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   20ba4:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   20ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   20bac:	bfa4      	itt	ge
   20bae:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   20bb2:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   20bb4:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20bb6:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   20bb8:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20bba:	aa05      	add	r2, sp, #20
   20bbc:	ab03      	add	r3, sp, #12
   20bbe:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   20bc0:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   20bc4:	f00b fd57 	bl	2c676 <at_params_string_get>
	if (err) {
   20bc8:	4604      	mov	r4, r0
   20bca:	2800      	cmp	r0, #0
   20bcc:	d1bb      	bne.n	20b46 <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   20bce:	9b03      	ldr	r3, [sp, #12]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   20bd0:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   20bd2:	3330      	adds	r3, #48	; 0x30
   20bd4:	446b      	add	r3, sp
   20bd6:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   20bda:	1d2a      	adds	r2, r5, #4
   20bdc:	f10d 0017 	add.w	r0, sp, #23
   20be0:	f00b fd94 	bl	2c70c <string_to_int>
	if (err) {
   20be4:	4604      	mov	r4, r0
   20be6:	2800      	cmp	r0, #0
   20be8:	d1ad      	bne.n	20b46 <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   20bea:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   20bee:	462a      	mov	r2, r5
   20bf0:	210a      	movs	r1, #10
   20bf2:	a805      	add	r0, sp, #20
   20bf4:	f00b fd8a 	bl	2c70c <string_to_int>
	if (err) {
   20bf8:	4604      	mov	r4, r0
   20bfa:	2800      	cmp	r0, #0
   20bfc:	d1a3      	bne.n	20b46 <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   20bfe:	2104      	movs	r1, #4
   20c00:	aa02      	add	r2, sp, #8
   20c02:	a807      	add	r0, sp, #28
   20c04:	f00b fda8 	bl	2c758 <string_param_to_int.constprop.0>
	if (err) {
   20c08:	4604      	mov	r4, r0
   20c0a:	2800      	cmp	r0, #0
   20c0c:	d19b      	bne.n	20b46 <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   20c0e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20c10:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   20c12:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   20c14:	aa02      	add	r2, sp, #8
   20c16:	a807      	add	r0, sp, #28
   20c18:	f00b fcf8 	bl	2c60c <at_params_int_get>
	if (err) {
   20c1c:	4604      	mov	r4, r0
   20c1e:	2800      	cmp	r0, #0
   20c20:	d191      	bne.n	20b46 <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   20c22:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20c24:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   20c26:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   20c28:	f105 0210 	add.w	r2, r5, #16
   20c2c:	a807      	add	r0, sp, #28
   20c2e:	f00b fced 	bl	2c60c <at_params_int_get>
	if (err) {
   20c32:	4604      	mov	r4, r0
   20c34:	2800      	cmp	r0, #0
   20c36:	d186      	bne.n	20b46 <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   20c38:	4641      	mov	r1, r8
   20c3a:	f105 0228 	add.w	r2, r5, #40	; 0x28
   20c3e:	a807      	add	r0, sp, #28
   20c40:	f00b fca8 	bl	2c594 <at_params_short_get>
	if (err) {
   20c44:	4604      	mov	r4, r0
   20c46:	2800      	cmp	r0, #0
   20c48:	f47f af7d 	bne.w	20b46 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   20c4c:	2108      	movs	r1, #8
   20c4e:	aa02      	add	r2, sp, #8
   20c50:	a807      	add	r0, sp, #28
   20c52:	f00b fcdb 	bl	2c60c <at_params_int_get>
	if (err) {
   20c56:	4604      	mov	r4, r0
   20c58:	2800      	cmp	r0, #0
   20c5a:	f47f af74 	bne.w	20b46 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   20c5e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   20c60:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   20c62:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   20c64:	aa02      	add	r2, sp, #8
   20c66:	a807      	add	r0, sp, #28
   20c68:	f00b fcd0 	bl	2c60c <at_params_int_get>
	if (err) {
   20c6c:	4604      	mov	r4, r0
   20c6e:	2800      	cmp	r0, #0
   20c70:	f47f af69 	bne.w	20b46 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   20c74:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   20c76:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   20c78:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   20c7a:	f105 0220 	add.w	r2, r5, #32
   20c7e:	a807      	add	r0, sp, #28
   20c80:	f00b fce1 	bl	2c646 <at_params_int64_get>
	if (err) {
   20c84:	4604      	mov	r4, r0
   20c86:	2800      	cmp	r0, #0
   20c88:	f47f af5d 	bne.w	20b46 <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   20c8c:	4630      	mov	r0, r6
   20c8e:	f7ff ff07 	bl	20aa0 <neighborcell_count_get>
   20c92:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   20c96:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   20c98:	a807      	add	r0, sp, #28
   20c9a:	f00b fd13 	bl	2c6c4 <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   20c9e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   20ca2:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   20ca4:	4286      	cmp	r6, r0
   20ca6:	d208      	bcs.n	20cba <parse_ncellmeas+0x1e2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   20ca8:	4631      	mov	r1, r6
   20caa:	f105 0218 	add.w	r2, r5, #24
   20cae:	a807      	add	r0, sp, #28
   20cb0:	f00b fcc9 	bl	2c646 <at_params_int64_get>
		if (err) {
   20cb4:	b128      	cbz	r0, 20cc2 <parse_ncellmeas+0x1ea>
   20cb6:	4604      	mov	r4, r0
   20cb8:	e745      	b.n	20b46 <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   20cba:	2200      	movs	r2, #0
   20cbc:	2300      	movs	r3, #0
   20cbe:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   20cc2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	f43f af3d 	beq.w	20b46 <parse_ncellmeas+0x6e>
   20ccc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20cce:	2b00      	cmp	r3, #0
   20cd0:	f43f af39 	beq.w	20b46 <parse_ncellmeas+0x6e>
   20cd4:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20cd6:	f04f 0800 	mov.w	r8, #0
   20cda:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   20cde:	4598      	cmp	r8, r3
   20ce0:	d304      	bcc.n	20cec <parse_ncellmeas+0x214>
		err = -E2BIG;
   20ce2:	2f00      	cmp	r7, #0
   20ce4:	bf18      	it	ne
   20ce6:	f06f 0406 	mvnne.w	r4, #6
   20cea:	e72c      	b.n	20b46 <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   20cec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   20cee:	1f31      	subs	r1, r6, #4
   20cf0:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   20cf4:	a807      	add	r0, sp, #28
   20cf6:	ea4f 1908 	mov.w	r9, r8, lsl #4
   20cfa:	f00b fc87 	bl	2c60c <at_params_int_get>
		if (err) {
   20cfe:	2800      	cmp	r0, #0
   20d00:	d1d9      	bne.n	20cb6 <parse_ncellmeas+0x1de>
					  &cells->neighbor_cells[i].phys_cell_id);
   20d02:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   20d04:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   20d06:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   20d08:	3208      	adds	r2, #8
   20d0a:	a807      	add	r0, sp, #28
   20d0c:	f00b fc42 	bl	2c594 <at_params_short_get>
		if (err) {
   20d10:	2800      	cmp	r0, #0
   20d12:	d1d0      	bne.n	20cb6 <parse_ncellmeas+0x1de>
		err = at_params_int_get(&resp_list,
   20d14:	aa02      	add	r2, sp, #8
   20d16:	1eb1      	subs	r1, r6, #2
   20d18:	a807      	add	r0, sp, #28
   20d1a:	f00b fc77 	bl	2c60c <at_params_int_get>
		if (err) {
   20d1e:	2800      	cmp	r0, #0
   20d20:	d1c9      	bne.n	20cb6 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrp = tmp;
   20d22:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   20d24:	9a02      	ldr	r2, [sp, #8]
   20d26:	444b      	add	r3, r9
   20d28:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   20d2a:	1e71      	subs	r1, r6, #1
   20d2c:	aa02      	add	r2, sp, #8
   20d2e:	a807      	add	r0, sp, #28
   20d30:	f00b fc6c 	bl	2c60c <at_params_int_get>
		if (err) {
   20d34:	2800      	cmp	r0, #0
   20d36:	d1be      	bne.n	20cb6 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrq = tmp;
   20d38:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   20d3a:	9b02      	ldr	r3, [sp, #8]
   20d3c:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   20d3e:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   20d40:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   20d42:	a807      	add	r0, sp, #28
   20d44:	3204      	adds	r2, #4
   20d46:	f00b fc61 	bl	2c60c <at_params_int_get>
		if (err) {
   20d4a:	3605      	adds	r6, #5
   20d4c:	2800      	cmp	r0, #0
   20d4e:	d1b2      	bne.n	20cb6 <parse_ncellmeas+0x1de>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   20d50:	f108 0801 	add.w	r8, r8, #1
   20d54:	e7c1      	b.n	20cda <parse_ncellmeas+0x202>
		err = 1;
   20d56:	2401      	movs	r4, #1
   20d58:	e6f5      	b.n	20b46 <parse_ncellmeas+0x6e>
   20d5a:	bf00      	nop
   20d5c:	00030a49 	.word	0x00030a49
   20d60:	00030e63 	.word	0x00030e63
   20d64:	00030cec 	.word	0x00030cec
   20d68:	000309bb 	.word	0x000309bb

00020d6c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   20d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   20d6e:	2300      	movs	r3, #0
{
   20d70:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   20d72:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   20d74:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   20d78:	2900      	cmp	r1, #0
   20d7a:	d047      	beq.n	20e0c <parse_xmodemsleep+0xa0>
   20d7c:	2800      	cmp	r0, #0
   20d7e:	d045      	beq.n	20e0c <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   20d80:	2104      	movs	r1, #4
   20d82:	a802      	add	r0, sp, #8
   20d84:	f00b fb6b 	bl	2c45e <at_params_list_init>
	if (err) {
   20d88:	4604      	mov	r4, r0
   20d8a:	b138      	cbz	r0, 20d9c <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   20d8c:	4602      	mov	r2, r0
   20d8e:	2145      	movs	r1, #69	; 0x45
   20d90:	4820      	ldr	r0, [pc, #128]	; (20e14 <parse_xmodemsleep+0xa8>)
   20d92:	f00a febc 	bl	2bb0e <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   20d96:	4620      	mov	r0, r4
   20d98:	b004      	add	sp, #16
   20d9a:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   20d9c:	4601      	mov	r1, r0
   20d9e:	aa02      	add	r2, sp, #8
   20da0:	4630      	mov	r0, r6
   20da2:	f00b fb59 	bl	2c458 <at_parser_params_from_str>
	if (err) {
   20da6:	4604      	mov	r4, r0
   20da8:	b128      	cbz	r0, 20db6 <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   20daa:	2145      	movs	r1, #69	; 0x45
   20dac:	4602      	mov	r2, r0
   20dae:	481a      	ldr	r0, [pc, #104]	; (20e18 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20db0:	f00a fead 	bl	2bb0e <z_log_minimal_printk>
		goto clean_exit;
   20db4:	e019      	b.n	20dea <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   20db6:	2101      	movs	r1, #1
   20db8:	f10d 0206 	add.w	r2, sp, #6
   20dbc:	a802      	add	r0, sp, #8
   20dbe:	f00b fc09 	bl	2c5d4 <at_params_unsigned_short_get>
	if (err) {
   20dc2:	4604      	mov	r4, r0
   20dc4:	b118      	cbz	r0, 20dce <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   20dc6:	4602      	mov	r2, r0
   20dc8:	2145      	movs	r1, #69	; 0x45
   20dca:	4814      	ldr	r0, [pc, #80]	; (20e1c <parse_xmodemsleep+0xb0>)
   20dcc:	e7f0      	b.n	20db0 <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   20dce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20dd2:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   20dd4:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   20dd6:	f00b fc75 	bl	2c6c4 <at_params_valid_count_get>
   20dda:	2802      	cmp	r0, #2
   20ddc:	d809      	bhi.n	20df2 <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   20dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20de6:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   20dea:	a802      	add	r0, sp, #8
   20dec:	f00b fb4a 	bl	2c484 <at_params_list_free>
	return err;
   20df0:	e7d1      	b.n	20d96 <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   20df2:	2102      	movs	r1, #2
   20df4:	f105 0208 	add.w	r2, r5, #8
   20df8:	a802      	add	r0, sp, #8
   20dfa:	f00b fc24 	bl	2c646 <at_params_int64_get>
	if (err) {
   20dfe:	4604      	mov	r4, r0
   20e00:	2800      	cmp	r0, #0
   20e02:	d0f2      	beq.n	20dea <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   20e04:	4602      	mov	r2, r0
   20e06:	2145      	movs	r1, #69	; 0x45
   20e08:	4805      	ldr	r0, [pc, #20]	; (20e20 <parse_xmodemsleep+0xb4>)
   20e0a:	e7d1      	b.n	20db0 <parse_xmodemsleep+0x44>
		return -EINVAL;
   20e0c:	f06f 0415 	mvn.w	r4, #21
   20e10:	e7c1      	b.n	20d96 <parse_xmodemsleep+0x2a>
   20e12:	bf00      	nop
   20e14:	00030a49 	.word	0x00030a49
   20e18:	00030e9a 	.word	0x00030e9a
   20e1c:	00030ed1 	.word	0x00030ed1
   20e20:	00030eff 	.word	0x00030eff

00020e24 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   20e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e26:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   20e28:	4604      	mov	r4, r0
   20e2a:	b1e8      	cbz	r0, 20e68 <parse_mdmev+0x44>
   20e2c:	b1e1      	cbz	r1, 20e68 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   20e2e:	2108      	movs	r1, #8
   20e30:	4a0f      	ldr	r2, [pc, #60]	; (20e70 <parse_mdmev+0x4c>)
   20e32:	f7ff fc21 	bl	20678 <response_is_valid>
   20e36:	b930      	cbnz	r0, 20e46 <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   20e38:	480e      	ldr	r0, [pc, #56]	; (20e74 <parse_mdmev+0x50>)
   20e3a:	2145      	movs	r1, #69	; 0x45
   20e3c:	f00a fe67 	bl	2bb0e <z_log_minimal_printk>
		return -EIO;
   20e40:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   20e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20e46:	2500      	movs	r5, #0
   20e48:	4f0b      	ldr	r7, [pc, #44]	; (20e78 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   20e4a:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   20e4c:	4621      	mov	r1, r4
   20e4e:	f857 0b04 	ldr.w	r0, [r7], #4
   20e52:	f7f8 fb79 	bl	19548 <strcmp>
   20e56:	b908      	cbnz	r0, 20e5c <parse_mdmev+0x38>
			*modem_evt = i;
   20e58:	7035      	strb	r5, [r6, #0]
			return 0;
   20e5a:	e7f3      	b.n	20e44 <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   20e5c:	3501      	adds	r5, #1
   20e5e:	2d05      	cmp	r5, #5
   20e60:	d1f4      	bne.n	20e4c <parse_mdmev+0x28>
	return -ENODATA;
   20e62:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20e66:	e7ed      	b.n	20e44 <parse_mdmev+0x20>
		return -EINVAL;
   20e68:	f06f 0015 	mvn.w	r0, #21
   20e6c:	e7ea      	b.n	20e44 <parse_mdmev+0x20>
   20e6e:	bf00      	nop
   20e70:	00030f39 	.word	0x00030f39
   20e74:	00030f42 	.word	0x00030f42
   20e78:	0002ed2c 	.word	0x0002ed2c

00020e7c <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   20e7c:	4803      	ldr	r0, [pc, #12]	; (20e8c <k_sys_fatal_error_handler+0x10>)
   20e7e:	2145      	movs	r1, #69	; 0x45
{
   20e80:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   20e82:	f00a fe44 	bl	2bb0e <z_log_minimal_printk>
		sys_arch_reboot(0);
   20e86:	2000      	movs	r0, #0
   20e88:	f7fb fd30 	bl	1c8ec <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   20e8c:	00030fbf 	.word	0x00030fbf

00020e90 <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   20e90:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   20e92:	4604      	mov	r4, r0
   20e94:	b930      	cbnz	r0, 20ea4 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   20e96:	480b      	ldr	r0, [pc, #44]	; (20ec4 <date_time_now+0x34>)
   20e98:	2145      	movs	r1, #69	; 0x45
   20e9a:	f00a fe38 	bl	2bb0e <z_log_minimal_printk>
   20e9e:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   20ea2:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   20ea4:	f000 f88a 	bl	20fbc <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   20ea8:	b930      	cbnz	r0, 20eb8 <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   20eaa:	4807      	ldr	r0, [pc, #28]	; (20ec8 <date_time_now+0x38>)
   20eac:	2157      	movs	r1, #87	; 0x57
   20eae:	f00a fe2e 	bl	2bb0e <z_log_minimal_printk>
		return -ENODATA;
   20eb2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   20eb6:	e7f4      	b.n	20ea2 <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   20eb8:	4620      	mov	r0, r4
}
   20eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   20ebe:	f000 b853 	b.w	20f68 <date_time_core_now>
   20ec2:	bf00      	nop
   20ec4:	00030fe1 	.word	0x00030fe1
   20ec8:	0003113e 	.word	0x0003113e

00020ecc <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   20ecc:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   20ece:	bf1c      	itt	ne
   20ed0:	4b03      	ldrne	r3, [pc, #12]	; (20ee0 <date_time_core_notify_event+0x14>)
   20ed2:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   20ed4:	4b03      	ldr	r3, [pc, #12]	; (20ee4 <date_time_core_notify_event+0x18>)
   20ed6:	681b      	ldr	r3, [r3, #0]
   20ed8:	b10b      	cbz	r3, 20ede <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   20eda:	4801      	ldr	r0, [pc, #4]	; (20ee0 <date_time_core_notify_event+0x14>)
   20edc:	4718      	bx	r3
	}
}
   20ede:	4770      	bx	lr
   20ee0:	2000d64c 	.word	0x2000d64c
   20ee4:	2000d0f0 	.word	0x2000d0f0

00020ee8 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   20ee8:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   20eea:	7803      	ldrb	r3, [r0, #0]
   20eec:	b9e3      	cbnz	r3, 20f28 <date_time_lte_ind_handler+0x40>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   20eee:	7a03      	ldrb	r3, [r0, #8]
   20ef0:	3b01      	subs	r3, #1
   20ef2:	2b07      	cmp	r3, #7
   20ef4:	d818      	bhi.n	20f28 <date_time_lte_ind_handler+0x40>
   20ef6:	e8df f003 	tbb	[pc, r3]
   20efa:	1304      	.short	0x1304
   20efc:	17041717 	.word	0x17041717
   20f00:	0417      	.short	0x0417
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid() && !k_work_delayable_is_pending(&time_work)) {
   20f02:	f00b fc48 	bl	2c796 <date_time_is_valid>
   20f06:	b978      	cbnz	r0, 20f28 <date_time_lte_ind_handler+0x40>
	return k_work_delayable_busy_get(dwork) != 0;
   20f08:	4808      	ldr	r0, [pc, #32]	; (20f2c <date_time_lte_ind_handler+0x44>)
   20f0a:	f00c fd1a 	bl	2d942 <k_work_delayable_busy_get>
   20f0e:	b958      	cbnz	r0, 20f28 <date_time_lte_ind_handler+0x40>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   20f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_schedule(&time_work, K_SECONDS(1));
   20f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   20f18:	2300      	movs	r3, #0
   20f1a:	4804      	ldr	r0, [pc, #16]	; (20f2c <date_time_lte_ind_handler+0x44>)
   20f1c:	f006 b812 	b.w	26f44 <k_work_schedule>
}
   20f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   20f24:	f000 ba74 	b.w	21410 <date_time_modem_xtime_subscribe>
}
   20f28:	bd10      	pop	{r4, pc}
   20f2a:	bf00      	nop
   20f2c:	2000c500 	.word	0x2000c500

00020f30 <date_time_handler>:
	z_impl_k_sem_give(sem);
   20f30:	4801      	ldr	r0, [pc, #4]	; (20f38 <date_time_handler+0x8>)
   20f32:	f005 bc43 	b.w	267bc <z_impl_k_sem_give>
   20f36:	bf00      	nop
   20f38:	2000caa4 	.word	0x2000caa4

00020f3c <date_time_core_schedule_update>:
{
   20f3c:	b510      	push	{r4, lr}
   20f3e:	4806      	ldr	r0, [pc, #24]	; (20f58 <date_time_core_schedule_update+0x1c>)
   20f40:	f00c fcff 	bl	2d942 <k_work_delayable_busy_get>
	if (CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0 &&
   20f44:	b938      	cbnz	r0, 20f56 <date_time_core_schedule_update+0x1a>
}
   20f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   20f4a:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   20f4e:	2300      	movs	r3, #0
   20f50:	4801      	ldr	r0, [pc, #4]	; (20f58 <date_time_core_schedule_update+0x1c>)
   20f52:	f005 bff7 	b.w	26f44 <k_work_schedule>
}
   20f56:	bd10      	pop	{r4, pc}
   20f58:	2000c500 	.word	0x2000c500

00020f5c <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   20f5c:	4801      	ldr	r0, [pc, #4]	; (20f64 <date_time_core_init+0x8>)
   20f5e:	f7fe bfa9 	b.w	1feb4 <lte_lc_register_handler>
   20f62:	bf00      	nop
   20f64:	00020ee9 	.word	0x00020ee9

00020f68 <date_time_core_now>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   20f68:	b530      	push	{r4, r5, lr}
   20f6a:	4604      	mov	r4, r0
   20f6c:	b085      	sub	sp, #20
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   20f6e:	2001      	movs	r0, #1
   20f70:	4669      	mov	r1, sp
   20f72:	f7f8 fafd 	bl	19570 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   20f76:	b150      	cbz	r0, 20f8e <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   20f78:	f00a ff34 	bl	2bde4 <__errno>
   20f7c:	2157      	movs	r1, #87	; 0x57
   20f7e:	6802      	ldr	r2, [r0, #0]
   20f80:	480c      	ldr	r0, [pc, #48]	; (20fb4 <date_time_core_now+0x4c>)
   20f82:	f00a fdc4 	bl	2bb0e <z_log_minimal_printk>
		return -ENODATA;
   20f86:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   20f8a:	b005      	add	sp, #20
   20f8c:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   20f8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20f92:	9b00      	ldr	r3, [sp, #0]
   20f94:	9d01      	ldr	r5, [sp, #4]
   20f96:	fba3 3201 	umull	r3, r2, r3, r1
   20f9a:	fb01 2205 	mla	r2, r1, r5, r2
   20f9e:	9902      	ldr	r1, [sp, #8]
   20fa0:	4d05      	ldr	r5, [pc, #20]	; (20fb8 <date_time_core_now+0x50>)
   20fa2:	fb91 f1f5 	sdiv	r1, r1, r5
   20fa6:	185b      	adds	r3, r3, r1
   20fa8:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   20fac:	e9c4 3200 	strd	r3, r2, [r4]
	return 0;
   20fb0:	e7eb      	b.n	20f8a <date_time_core_now+0x22>
   20fb2:	bf00      	nop
   20fb4:	00031170 	.word	0x00031170
   20fb8:	000f4240 	.word	0x000f4240

00020fbc <date_time_core_is_valid>:
	app_evt_handler = evt_handler;
}

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   20fbc:	4b03      	ldr	r3, [pc, #12]	; (20fcc <date_time_core_is_valid+0x10>)
   20fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   20fc2:	4313      	orrs	r3, r2
}
   20fc4:	bf14      	ite	ne
   20fc6:	2001      	movne	r0, #1
   20fc8:	2000      	moveq	r0, #0
   20fca:	4770      	bx	lr
   20fcc:	2000cbd8 	.word	0x2000cbd8

00020fd0 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   20fd0:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   20fd2:	4c10      	ldr	r4, [pc, #64]	; (21014 <date_time_core_current_check+0x44>)
   20fd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   20fd8:	4313      	orrs	r3, r2
   20fda:	d016      	beq.n	2100a <date_time_core_current_check+0x3a>
	return z_impl_k_uptime_ticks();
   20fdc:	f00c fcec 	bl	2d9b8 <z_impl_k_uptime_ticks>
   20fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20fe4:	fba0 0302 	umull	r0, r3, r0, r2
   20fe8:	fb02 3101 	mla	r1, r2, r1, r3
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   20fec:	e9d4 3200 	ldrd	r3, r2, [r4]
   20ff0:	0bc0      	lsrs	r0, r0, #15
   20ff2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   20ff6:	1ac0      	subs	r0, r0, r3
   20ff8:	4b07      	ldr	r3, [pc, #28]	; (21018 <date_time_core_current_check+0x48>)
   20ffa:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   20ffe:	eb61 0102 	sbc.w	r1, r1, r2
   21002:	4298      	cmp	r0, r3
   21004:	f171 0300 	sbcs.w	r3, r1, #0
   21008:	db02      	blt.n	21010 <date_time_core_current_check+0x40>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   2100a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   2100e:	bd10      	pop	{r4, pc}
	return 0;
   21010:	2000      	movs	r0, #0
   21012:	e7fc      	b.n	2100e <date_time_core_current_check+0x3e>
   21014:	2000cbd8 	.word	0x2000cbd8
   21018:	0036ee80 	.word	0x0036ee80

0002101c <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   2101c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2101e:	b08f      	sub	sp, #60	; 0x3c
   21020:	4606      	mov	r6, r0
   21022:	460d      	mov	r5, r1
   21024:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   21026:	2100      	movs	r1, #0
   21028:	2210      	movs	r2, #16
   2102a:	4668      	mov	r0, sp
   2102c:	f00c fdd4 	bl	2dbd8 <memset>
	struct tm ltm = { 0 };
   21030:	2224      	movs	r2, #36	; 0x24
   21032:	2100      	movs	r1, #0
   21034:	a805      	add	r0, sp, #20
   21036:	f00c fdcf 	bl	2dbd8 <memset>
   2103a:	f00c fcbd 	bl	2d9b8 <z_impl_k_uptime_ticks>
   2103e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21042:	fba0 3004 	umull	r3, r0, r0, r4
   21046:	fb04 0401 	mla	r4, r4, r1, r0
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   2104a:	4a1a      	ldr	r2, [pc, #104]	; (210b4 <date_time_core_store+0x98>)
   2104c:	0bdb      	lsrs	r3, r3, #15
   2104e:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
   21052:	0be4      	lsrs	r4, r4, #15
   21054:	e9c2 3400 	strd	r3, r4, [r2]

	date_time_core_schedule_update();
   21058:	f7ff ff70 	bl	20f3c <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   2105c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21060:	2300      	movs	r3, #0
   21062:	4630      	mov	r0, r6
   21064:	4629      	mov	r1, r5
   21066:	f7f7 ffcb 	bl	19000 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   2106a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   2106e:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   21072:	2300      	movs	r3, #0
   21074:	4630      	mov	r0, r6
   21076:	4629      	mov	r1, r5
   21078:	f7f7 ffc2 	bl	19000 <__aeabi_ldivmod>
   2107c:	4b0e      	ldr	r3, [pc, #56]	; (210b8 <date_time_core_store+0x9c>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   2107e:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   21080:	435a      	muls	r2, r3
	ret = clock_settime(CLOCK_REALTIME, &tp);
   21082:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   21084:	9202      	str	r2, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   21086:	f7f8 faff 	bl	19688 <clock_settime>
	if (ret != 0) {
   2108a:	4602      	mov	r2, r0
   2108c:	b140      	cbz	r0, 210a0 <date_time_core_store+0x84>
		LOG_ERR("Could not set system time, %d", ret);
   2108e:	480b      	ldr	r0, [pc, #44]	; (210bc <date_time_core_store+0xa0>)
   21090:	2145      	movs	r1, #69	; 0x45
   21092:	f00a fd3c 	bl	2bb0e <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   21096:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   21098:	f7ff ff18 	bl	20ecc <date_time_core_notify_event>
}
   2109c:	b00f      	add	sp, #60	; 0x3c
   2109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   210a0:	a905      	add	r1, sp, #20
   210a2:	4668      	mov	r0, sp
   210a4:	f007 fd14 	bl	28ad0 <gmtime_r>
	date_time_modem_store(&ltm);
   210a8:	a805      	add	r0, sp, #20
   210aa:	f000 f987 	bl	213bc <date_time_modem_store>
	date_time_core_notify_event(time_source);
   210ae:	4638      	mov	r0, r7
   210b0:	e7f2      	b.n	21098 <date_time_core_store+0x7c>
   210b2:	bf00      	nop
   210b4:	2000cbd8 	.word	0x2000cbd8
   210b8:	000f4240 	.word	0x000f4240
   210bc:	00031194 	.word	0x00031194

000210c0 <date_time_update_thread>:
{
   210c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   210c2:	2400      	movs	r4, #0
   210c4:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   210c6:	4e15      	ldr	r6, [pc, #84]	; (2111c <date_time_update_thread+0x5c>)
   210c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   210cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   210d0:	4630      	mov	r0, r6
   210d2:	f005 fbad 	bl	26830 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   210d6:	f7ff ff7b 	bl	20fd0 <date_time_core_current_check>
		if (err == 0) {
   210da:	b928      	cbnz	r0, 210e8 <date_time_update_thread+0x28>
			date_time_core_schedule_update();
   210dc:	f7ff ff2e 	bl	20f3c <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   210e0:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   210e2:	f7ff fef3 	bl	20ecc <date_time_core_notify_event>
   210e6:	e7ef      	b.n	210c8 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   210e8:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   210ea:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   210ee:	f000 f92b 	bl	21348 <date_time_modem_get>
		if (err == 0) {
   210f2:	4602      	mov	r2, r0
   210f4:	b920      	cbnz	r0, 21100 <date_time_update_thread+0x40>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   210f6:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   210fa:	f7ff ff8f 	bl	2101c <date_time_core_store>
			continue;
   210fe:	e7e3      	b.n	210c8 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   21100:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   21102:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   21106:	f000 f80b 	bl	21120 <date_time_ntp_get>
		if (err == 0) {
   2110a:	b918      	cbnz	r0, 21114 <date_time_update_thread+0x54>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   2110c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21110:	2201      	movs	r2, #1
   21112:	e7f2      	b.n	210fa <date_time_update_thread+0x3a>
		date_time_core_schedule_update();
   21114:	f7ff ff12 	bl	20f3c <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   21118:	2003      	movs	r0, #3
   2111a:	e7e2      	b.n	210e2 <date_time_update_thread+0x22>
   2111c:	2000caa4 	.word	0x2000caa4

00021120 <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   21120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21124:	b09a      	sub	sp, #104	; 0x68
   21126:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   21128:	a806      	add	r0, sp, #24
   2112a:	f7fe fffb 	bl	20124 <lte_lc_nw_reg_status_get>
	if (err) {
   2112e:	4605      	mov	r5, r0
   21130:	b138      	cbz	r0, 21142 <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   21132:	4602      	mov	r2, r0
   21134:	2157      	movs	r1, #87	; 0x57
   21136:	4832      	ldr	r0, [pc, #200]	; (21200 <date_time_ntp_get+0xe0>)
   21138:	f00a fce9 	bl	2bb0e <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   2113c:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   21140:	e04d      	b.n	211de <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   21142:	f89d 3018 	ldrb.w	r3, [sp, #24]
   21146:	2b08      	cmp	r3, #8
   21148:	d003      	beq.n	21152 <date_time_ntp_get+0x32>
   2114a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2114e:	2b01      	cmp	r3, #1
   21150:	d1f4      	bne.n	2113c <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   21152:	4f2c      	ldr	r7, [pc, #176]	; (21204 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   21154:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 21208 <date_time_ntp_get+0xe8>
	err = sntp_query(&sntp_ctx, timeout, time);
   21158:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2120c <date_time_ntp_get+0xec>
		LOG_WRN("sntp_query, error: %d", err);
   2115c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 21210 <date_time_ntp_get+0xf0>
	struct addrinfo hints = {
   21160:	2250      	movs	r2, #80	; 0x50
   21162:	2100      	movs	r1, #0
   21164:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   21166:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   2116a:	f00c fd35 	bl	2dbd8 <memset>
   2116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21172:	aa06      	add	r2, sp, #24
   21174:	9307      	str	r3, [sp, #28]
   21176:	4641      	mov	r1, r8
   21178:	466b      	mov	r3, sp
   2117a:	4620      	mov	r0, r4
   2117c:	f00a fd08 	bl	2bb90 <zsock_getaddrinfo>
	if (err) {
   21180:	4602      	mov	r2, r0
   21182:	b160      	cbz	r0, 2119e <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   21184:	2157      	movs	r1, #87	; 0x57
   21186:	4823      	ldr	r0, [pc, #140]	; (21214 <date_time_ntp_get+0xf4>)
   21188:	f00a fcc1 	bl	2bb0e <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2118c:	2d01      	cmp	r5, #1
   2118e:	d104      	bne.n	2119a <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   21190:	2157      	movs	r1, #87	; 0x57
   21192:	4821      	ldr	r0, [pc, #132]	; (21218 <date_time_ntp_get+0xf8>)
   21194:	f00a fcbb 	bl	2bb0e <z_log_minimal_printk>
   21198:	e7d0      	b.n	2113c <date_time_ntp_get+0x1c>
   2119a:	2501      	movs	r5, #1
   2119c:	e7e0      	b.n	21160 <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   2119e:	9b00      	ldr	r3, [sp, #0]
   211a0:	a801      	add	r0, sp, #4
   211a2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   211a6:	f00a fcbf 	bl	2bb28 <sntp_init>
	if (err) {
   211aa:	4604      	mov	r4, r0
   211ac:	b1d8      	cbz	r0, 211e6 <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   211ae:	2157      	movs	r1, #87	; 0x57
   211b0:	4602      	mov	r2, r0
   211b2:	481a      	ldr	r0, [pc, #104]	; (2121c <date_time_ntp_get+0xfc>)
		LOG_WRN("sntp_query, error: %d", err);
   211b4:	f00a fcab 	bl	2bb0e <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   211b8:	9800      	ldr	r0, [sp, #0]
   211ba:	f00a fceb 	bl	2bb94 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   211be:	a801      	add	r0, sp, #4
   211c0:	f00a fce1 	bl	2bb86 <sntp_close>
		if (err) {
   211c4:	2c00      	cmp	r4, #0
   211c6:	d1e1      	bne.n	2118c <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   211c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   211cc:	480f      	ldr	r0, [pc, #60]	; (2120c <date_time_ntp_get+0xec>)
   211ce:	6803      	ldr	r3, [r0, #0]
   211d0:	6845      	ldr	r5, [r0, #4]
   211d2:	fba3 3201 	umull	r3, r2, r3, r1
   211d6:	fb01 2205 	mla	r2, r1, r5, r2
   211da:	e9c6 3200 	strd	r3, r2, [r6]
}
   211de:	4620      	mov	r0, r4
   211e0:	b01a      	add	sp, #104	; 0x68
   211e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   211e6:	464a      	mov	r2, r9
   211e8:	f241 3188 	movw	r1, #5000	; 0x1388
   211ec:	a801      	add	r0, sp, #4
   211ee:	f7fa fb99 	bl	1b924 <sntp_query>
	if (err) {
   211f2:	4604      	mov	r4, r0
   211f4:	2800      	cmp	r0, #0
   211f6:	d0df      	beq.n	211b8 <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   211f8:	4602      	mov	r2, r0
   211fa:	2157      	movs	r1, #87	; 0x57
   211fc:	4650      	mov	r0, sl
   211fe:	e7d9      	b.n	211b4 <date_time_ntp_get+0x94>
   21200:	000311c3 	.word	0x000311c3
   21204:	0002ed80 	.word	0x0002ed80
   21208:	00031202 	.word	0x00031202
   2120c:	2000cbe0 	.word	0x2000cbe0
   21210:	0003123c 	.word	0x0003123c
   21214:	00031206 	.word	0x00031206
   21218:	00031257 	.word	0x00031257
   2121c:	00031222 	.word	0x00031222

00021220 <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   21220:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   21222:	4604      	mov	r4, r0
{
   21224:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   21226:	2800      	cmp	r0, #0
   21228:	f000 8082 	beq.w	21330 <date_time_at_xtime_handler+0x110>
		return;
	}
	modem_valid_network_time = true;
   2122c:	2201      	movs	r2, #1
   2122e:	4b41      	ldr	r3, [pc, #260]	; (21334 <date_time_at_xtime_handler+0x114>)
   21230:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   21232:	f7ff fecd 	bl	20fd0 <date_time_core_current_check>
	if (err == 0) {
   21236:	2800      	cmp	r0, #0
   21238:	d07a      	beq.n	21330 <date_time_at_xtime_handler+0x110>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   2123a:	212c      	movs	r1, #44	; 0x2c
   2123c:	4620      	mov	r0, r4
   2123e:	f00c fe26 	bl	2de8e <strchr>
	if (time_str_start == NULL) {
   21242:	4605      	mov	r5, r0
   21244:	b938      	cbnz	r0, 21256 <date_time_at_xtime_handler+0x36>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   21246:	4622      	mov	r2, r4
   21248:	2145      	movs	r1, #69	; 0x45
   2124a:	483b      	ldr	r0, [pc, #236]	; (21338 <date_time_at_xtime_handler+0x118>)
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   2124c:	b00d      	add	sp, #52	; 0x34
   2124e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   21252:	f00a bc5c 	b.w	2bb0e <z_log_minimal_printk>
	if (strlen(time_str_start) < 17) {
   21256:	f7f8 f981 	bl	1955c <strlen>
   2125a:	2810      	cmp	r0, #16
   2125c:	d803      	bhi.n	21266 <date_time_at_xtime_handler+0x46>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   2125e:	4622      	mov	r2, r4
   21260:	2145      	movs	r1, #69	; 0x45
   21262:	4836      	ldr	r0, [pc, #216]	; (2133c <date_time_at_xtime_handler+0x11c>)
   21264:	e7f2      	b.n	2124c <date_time_at_xtime_handler+0x2c>
	if (*(time_str_start + 1) != '"') {
   21266:	786b      	ldrb	r3, [r5, #1]
   21268:	2b22      	cmp	r3, #34	; 0x22
   2126a:	d003      	beq.n	21274 <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   2126c:	4622      	mov	r2, r4
   2126e:	2145      	movs	r1, #69	; 0x45
   21270:	4833      	ldr	r0, [pc, #204]	; (21340 <date_time_at_xtime_handler+0x120>)
   21272:	e7eb      	b.n	2124c <date_time_at_xtime_handler+0x2c>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   21274:	aa01      	add	r2, sp, #4
   21276:	2306      	movs	r3, #6
   21278:	210c      	movs	r1, #12
   2127a:	1ca8      	adds	r0, r5, #2
   2127c:	f00a fa48 	bl	2b710 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   21280:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   21282:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   21284:	d804      	bhi.n	21290 <date_time_at_xtime_handler+0x70>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   21286:	4623      	mov	r3, r4
   21288:	2145      	movs	r1, #69	; 0x45
   2128a:	482e      	ldr	r0, [pc, #184]	; (21344 <date_time_at_xtime_handler+0x124>)
   2128c:	f00a fc3f 	bl	2bb0e <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   21290:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   21294:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   21298:	f001 000f 	and.w	r0, r1, #15
   2129c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   212a0:	0909      	lsrs	r1, r1, #4
   212a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   212a6:	b2c9      	uxtb	r1, r1
   212a8:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   212aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   212ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   212b2:	f001 000f 	and.w	r0, r1, #15
   212b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   212ba:	0909      	lsrs	r1, r1, #4
   212bc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   212c0:	b2c9      	uxtb	r1, r1
   212c2:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   212c4:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   212c8:	f001 000f 	and.w	r0, r1, #15
   212cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   212d0:	0909      	lsrs	r1, r1, #4
   212d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   212d6:	b2c9      	uxtb	r1, r1
   212d8:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   212da:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   212de:	f001 000f 	and.w	r0, r1, #15
   212e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   212e6:	0909      	lsrs	r1, r1, #4
   212e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   212ec:	b2c9      	uxtb	r1, r1
   212ee:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   212f0:	f002 010f 	and.w	r1, r2, #15
   212f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   212f8:	0912      	lsrs	r2, r2, #4
   212fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   212fe:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   21300:	3264      	adds	r2, #100	; 0x64
   21302:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   21304:	f003 020f 	and.w	r2, r3, #15
   21308:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2130c:	091b      	lsrs	r3, r3, #4
   2130e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   21312:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   21314:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   21316:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   21318:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2131a:	f7f9 fd43 	bl	1ada4 <timeutil_timegm64>
   2131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21322:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   21326:	2200      	movs	r2, #0
   21328:	fb03 4101 	mla	r1, r3, r1, r4
   2132c:	f7ff fe76 	bl	2101c <date_time_core_store>
}
   21330:	b00d      	add	sp, #52	; 0x34
   21332:	bd30      	pop	{r4, r5, pc}
   21334:	2000d64d 	.word	0x2000d64d
   21338:	0003129c 	.word	0x0003129c
   2133c:	000312ce 	.word	0x000312ce
   21340:	000312f6 	.word	0x000312f6
   21344:	00031332 	.word	0x00031332

00021348 <date_time_modem_get>:
{
   21348:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   2134a:	4b18      	ldr	r3, [pc, #96]	; (213ac <date_time_modem_get+0x64>)
{
   2134c:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   2134e:	781b      	ldrb	r3, [r3, #0]
{
   21350:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   21352:	b1a3      	cbz	r3, 2137e <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   21354:	ab06      	add	r3, sp, #24
   21356:	9302      	str	r3, [sp, #8]
   21358:	ab07      	add	r3, sp, #28
   2135a:	9301      	str	r3, [sp, #4]
   2135c:	ad05      	add	r5, sp, #20
   2135e:	ab08      	add	r3, sp, #32
   21360:	9300      	str	r3, [sp, #0]
   21362:	aa0a      	add	r2, sp, #40	; 0x28
   21364:	4912      	ldr	r1, [pc, #72]	; (213b0 <date_time_modem_get+0x68>)
   21366:	4813      	ldr	r0, [pc, #76]	; (213b4 <date_time_modem_get+0x6c>)
   21368:	9503      	str	r5, [sp, #12]
   2136a:	ab09      	add	r3, sp, #36	; 0x24
   2136c:	f004 f966 	bl	2563c <nrf_modem_at_scanf>
	if (rc != 6) {
   21370:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   21372:	4602      	mov	r2, r0
	if (rc != 6) {
   21374:	d006      	beq.n	21384 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   21376:	2157      	movs	r1, #87	; 0x57
   21378:	480f      	ldr	r0, [pc, #60]	; (213b8 <date_time_modem_get+0x70>)
   2137a:	f00a fbc8 	bl	2bb0e <z_log_minimal_printk>
		return -ENODATA;
   2137e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   21382:	e011      	b.n	213a8 <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   21384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   21386:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   21388:	3364      	adds	r3, #100	; 0x64
   2138a:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   2138c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2138e:	3b01      	subs	r3, #1
   21390:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   21392:	f7f9 fd07 	bl	1ada4 <timeutil_timegm64>
   21396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2139a:	fba0 3002 	umull	r3, r0, r0, r2
   2139e:	fb02 0001 	mla	r0, r2, r1, r0
   213a2:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
   213a6:	2000      	movs	r0, #0
}
   213a8:	b00f      	add	sp, #60	; 0x3c
   213aa:	bd30      	pop	{r4, r5, pc}
   213ac:	2000d64d 	.word	0x2000d64d
   213b0:	00031369 	.word	0x00031369
   213b4:	00031383 	.word	0x00031383
   213b8:	0003138c 	.word	0x0003138c

000213bc <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   213bc:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   213be:	4b11      	ldr	r3, [pc, #68]	; (21404 <date_time_modem_store+0x48>)
{
   213c0:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   213c2:	781b      	ldrb	r3, [r3, #0]
   213c4:	b9db      	cbnz	r3, 213fe <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   213c6:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   213ca:	2464      	movs	r4, #100	; 0x64
   213cc:	fb91 f5f4 	sdiv	r5, r1, r4
   213d0:	9303      	str	r3, [sp, #12]
   213d2:	6803      	ldr	r3, [r0, #0]
   213d4:	3201      	adds	r2, #1
   213d6:	9302      	str	r3, [sp, #8]
   213d8:	6843      	ldr	r3, [r0, #4]
   213da:	fb04 1115 	mls	r1, r4, r5, r1
   213de:	9301      	str	r3, [sp, #4]
   213e0:	6883      	ldr	r3, [r0, #8]
   213e2:	9300      	str	r3, [sp, #0]
   213e4:	68c3      	ldr	r3, [r0, #12]
   213e6:	4808      	ldr	r0, [pc, #32]	; (21408 <date_time_modem_store+0x4c>)
   213e8:	f004 f89a 	bl	25520 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   213ec:	4602      	mov	r2, r0
   213ee:	b130      	cbz	r0, 213fe <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   213f0:	2145      	movs	r1, #69	; 0x45
   213f2:	4806      	ldr	r0, [pc, #24]	; (2140c <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   213f4:	b005      	add	sp, #20
   213f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   213fa:	f00a bb88 	b.w	2bb0e <z_log_minimal_printk>
}
   213fe:	b005      	add	sp, #20
   21400:	bd30      	pop	{r4, r5, pc}
   21402:	bf00      	nop
   21404:	2000d64d 	.word	0x2000d64d
   21408:	00031421 	.word	0x00031421
   2140c:	0003144e 	.word	0x0003144e

00021410 <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   21410:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   21412:	4806      	ldr	r0, [pc, #24]	; (2142c <date_time_modem_xtime_subscribe+0x1c>)
   21414:	f004 f884 	bl	25520 <nrf_modem_at_printf>

	if (err) {
   21418:	4602      	mov	r2, r0
   2141a:	b128      	cbz	r0, 21428 <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   2141c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   21420:	2145      	movs	r1, #69	; 0x45
   21422:	4803      	ldr	r0, [pc, #12]	; (21430 <date_time_modem_xtime_subscribe+0x20>)
   21424:	f00a bb73 	b.w	2bb0e <z_log_minimal_printk>
}
   21428:	bd08      	pop	{r3, pc}
   2142a:	bf00      	nop
   2142c:	00031471 	.word	0x00031471
   21430:	0003147d 	.word	0x0003147d

00021434 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   21434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21438:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2143a:	4c21      	ldr	r4, [pc, #132]	; (214c0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   2143c:	4e21      	ldr	r6, [pc, #132]	; (214c4 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2143e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   21442:	f8df 9084 	ldr.w	r9, [pc, #132]	; 214c8 <check_ext_api_requests+0x94>
{
   21446:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21448:	45a8      	cmp	r8, r5
   2144a:	d803      	bhi.n	21454 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2144c:	2000      	movs	r0, #0
   2144e:	b005      	add	sp, #20
   21450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   21454:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21456:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2145a:	681f      	ldr	r7, [r3, #0]
   2145c:	ab01      	add	r3, sp, #4
   2145e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   21462:	220c      	movs	r2, #12
   21464:	4619      	mov	r1, r3
   21466:	4638      	mov	r0, r7
   21468:	f00c fb99 	bl	2db9e <memcmp>
   2146c:	b990      	cbnz	r0, 21494 <check_ext_api_requests+0x60>
   2146e:	b18f      	cbz	r7, 21494 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   21470:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   21472:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   21474:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   21476:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21478:	4291      	cmp	r1, r2
   2147a:	d10b      	bne.n	21494 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2147c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2147e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   21480:	4291      	cmp	r1, r2
   21482:	d807      	bhi.n	21494 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   21484:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   21486:	4291      	cmp	r1, r2
   21488:	d904      	bls.n	21494 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2148a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2148c:	695b      	ldr	r3, [r3, #20]
   2148e:	ea32 0303 	bics.w	r3, r2, r3
   21492:	d00a      	beq.n	214aa <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   21494:	6a27      	ldr	r7, [r4, #32]
   21496:	b167      	cbz	r7, 214b2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   21498:	480c      	ldr	r0, [pc, #48]	; (214cc <check_ext_api_requests+0x98>)
   2149a:	f00a f987 	bl	2b7ac <printk>
			k_panic();
   2149e:	4040      	eors	r0, r0
   214a0:	f380 8811 	msr	BASEPRI, r0
   214a4:	f04f 0004 	mov.w	r0, #4
   214a8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   214aa:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   214ac:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   214ae:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   214b0:	e7ca      	b.n	21448 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   214b2:	4648      	mov	r0, r9
   214b4:	f00a f97a 	bl	2b7ac <printk>
			*ext_api_req->ext_api = NULL;
   214b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   214ba:	601f      	str	r7, [r3, #0]
   214bc:	e7f5      	b.n	214aa <check_ext_api_requests+0x76>
   214be:	bf00      	nop
   214c0:	0001843c 	.word	0x0001843c
   214c4:	0002ea60 	.word	0x0002ea60
   214c8:	000314ee 	.word	0x000314ee
   214cc:	000314c5 	.word	0x000314c5

000214d0 <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   214d0:	4b01      	ldr	r3, [pc, #4]	; (214d8 <SystemInit+0x8>)
   214d2:	4a02      	ldr	r2, [pc, #8]	; (214dc <SystemInit+0xc>)
   214d4:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   214d6:	4770      	bx	lr
   214d8:	2000c66c 	.word	0x2000c66c
   214dc:	03d09000 	.word	0x03d09000

000214e0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   214e0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   214e2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   214e4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   214e6:	fab2 f382 	clz	r3, r2
   214ea:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   214ee:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   214f0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   214f2:	d010      	beq.n	21516 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   214f4:	fa05 f303 	lsl.w	r3, r5, r3
   214f8:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   214fc:	e8d0 6fef 	ldaex	r6, [r0]
   21500:	4296      	cmp	r6, r2
   21502:	d104      	bne.n	2150e <nrfx_flag32_alloc+0x2e>
   21504:	e8c0 3fec 	stlex	ip, r3, [r0]
   21508:	f1bc 0f00 	cmp.w	ip, #0
   2150c:	d1f6      	bne.n	214fc <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2150e:	d1e9      	bne.n	214e4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   21510:	4802      	ldr	r0, [pc, #8]	; (2151c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   21512:	700c      	strb	r4, [r1, #0]
}
   21514:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   21516:	4802      	ldr	r0, [pc, #8]	; (21520 <nrfx_flag32_alloc+0x40>)
   21518:	e7fc      	b.n	21514 <nrfx_flag32_alloc+0x34>
   2151a:	bf00      	nop
   2151c:	0bad0000 	.word	0x0bad0000
   21520:	0bad0002 	.word	0x0bad0002

00021524 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21524:	6803      	ldr	r3, [r0, #0]
{
   21526:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   21528:	40cb      	lsrs	r3, r1
   2152a:	07db      	lsls	r3, r3, #31
   2152c:	d411      	bmi.n	21552 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2152e:	2301      	movs	r3, #1
   21530:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   21534:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   21536:	ea41 0203 	orr.w	r2, r1, r3
   2153a:	e8d0 4fef 	ldaex	r4, [r0]
   2153e:	429c      	cmp	r4, r3
   21540:	d104      	bne.n	2154c <nrfx_flag32_free+0x28>
   21542:	e8c0 2fec 	stlex	ip, r2, [r0]
   21546:	f1bc 0f00 	cmp.w	ip, #0
   2154a:	d1f6      	bne.n	2153a <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2154c:	d1f2      	bne.n	21534 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2154e:	4802      	ldr	r0, [pc, #8]	; (21558 <nrfx_flag32_free+0x34>)
}
   21550:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21552:	4802      	ldr	r0, [pc, #8]	; (2155c <nrfx_flag32_free+0x38>)
   21554:	e7fc      	b.n	21550 <nrfx_flag32_free+0x2c>
   21556:	bf00      	nop
   21558:	0bad0000 	.word	0x0bad0000
   2155c:	0bad0004 	.word	0x0bad0004

00021560 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21560:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21562:	4604      	mov	r4, r0
   21564:	b940      	cbnz	r0, 21578 <nrfx_clock_init+0x18>
   21566:	4909      	ldr	r1, [pc, #36]	; (2158c <nrfx_clock_init+0x2c>)
   21568:	4809      	ldr	r0, [pc, #36]	; (21590 <nrfx_clock_init+0x30>)
   2156a:	22bd      	movs	r2, #189	; 0xbd
   2156c:	f00a f91e 	bl	2b7ac <printk>
   21570:	21bd      	movs	r1, #189	; 0xbd
   21572:	4806      	ldr	r0, [pc, #24]	; (2158c <nrfx_clock_init+0x2c>)
   21574:	f00a fab1 	bl	2bada <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21578:	4b06      	ldr	r3, [pc, #24]	; (21594 <nrfx_clock_init+0x34>)
   2157a:	791a      	ldrb	r2, [r3, #4]
   2157c:	b922      	cbnz	r2, 21588 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2157e:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21580:	4805      	ldr	r0, [pc, #20]	; (21598 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   21582:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21584:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21586:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21588:	4804      	ldr	r0, [pc, #16]	; (2159c <nrfx_clock_init+0x3c>)
    return err_code;
   2158a:	e7fc      	b.n	21586 <nrfx_clock_init+0x26>
   2158c:	00031521 	.word	0x00031521
   21590:	0002f296 	.word	0x0002f296
   21594:	2000d0f4 	.word	0x2000d0f4
   21598:	0bad0000 	.word	0x0bad0000
   2159c:	0bad000c 	.word	0x0bad000c

000215a0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   215a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   215a2:	4b0b      	ldr	r3, [pc, #44]	; (215d0 <nrfx_clock_enable+0x30>)
   215a4:	791b      	ldrb	r3, [r3, #4]
   215a6:	b943      	cbnz	r3, 215ba <nrfx_clock_enable+0x1a>
   215a8:	490a      	ldr	r1, [pc, #40]	; (215d4 <nrfx_clock_enable+0x34>)
   215aa:	480b      	ldr	r0, [pc, #44]	; (215d8 <nrfx_clock_enable+0x38>)
   215ac:	22d6      	movs	r2, #214	; 0xd6
   215ae:	f00a f8fd 	bl	2b7ac <printk>
   215b2:	21d6      	movs	r1, #214	; 0xd6
   215b4:	4807      	ldr	r0, [pc, #28]	; (215d4 <nrfx_clock_enable+0x34>)
   215b6:	f00a fa90 	bl	2bada <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   215ba:	2005      	movs	r0, #5
   215bc:	f7fa fe1e 	bl	1c1fc <arch_irq_is_enabled>
   215c0:	b920      	cbnz	r0, 215cc <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   215c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   215c6:	2005      	movs	r0, #5
   215c8:	f7fa bdf4 	b.w	1c1b4 <arch_irq_enable>
   215cc:	bd08      	pop	{r3, pc}
   215ce:	bf00      	nop
   215d0:	2000d0f4 	.word	0x2000d0f4
   215d4:	00031521 	.word	0x00031521
   215d8:	0002f296 	.word	0x0002f296

000215dc <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   215dc:	4b21      	ldr	r3, [pc, #132]	; (21664 <nrfx_clock_start+0x88>)
{
   215de:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   215e0:	791b      	ldrb	r3, [r3, #4]
{
   215e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   215e4:	b953      	cbnz	r3, 215fc <nrfx_clock_start+0x20>
   215e6:	4920      	ldr	r1, [pc, #128]	; (21668 <nrfx_clock_start+0x8c>)
   215e8:	4820      	ldr	r0, [pc, #128]	; (2166c <nrfx_clock_start+0x90>)
   215ea:	f44f 7289 	mov.w	r2, #274	; 0x112
   215ee:	f00a f8dd 	bl	2b7ac <printk>
   215f2:	f44f 7189 	mov.w	r1, #274	; 0x112
   215f6:	481c      	ldr	r0, [pc, #112]	; (21668 <nrfx_clock_start+0x8c>)
   215f8:	f00a fa6f 	bl	2bada <assert_post_action>
    switch (domain)
   215fc:	b174      	cbz	r4, 2161c <nrfx_clock_start+0x40>
   215fe:	2c01      	cmp	r4, #1
   21600:	d026      	beq.n	21650 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   21602:	4919      	ldr	r1, [pc, #100]	; (21668 <nrfx_clock_start+0x8c>)
   21604:	4819      	ldr	r0, [pc, #100]	; (2166c <nrfx_clock_start+0x90>)
   21606:	f44f 72a2 	mov.w	r2, #324	; 0x144
   2160a:	f00a f8cf 	bl	2b7ac <printk>
            break;
    }
}
   2160e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   21612:	f44f 71a2 	mov.w	r1, #324	; 0x144
   21616:	4814      	ldr	r0, [pc, #80]	; (21668 <nrfx_clock_start+0x8c>)
   21618:	f00a ba5f 	b.w	2bada <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2161c:	4b14      	ldr	r3, [pc, #80]	; (21670 <nrfx_clock_start+0x94>)
   2161e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21622:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   21626:	03c9      	lsls	r1, r1, #15
   21628:	d510      	bpl.n	2164c <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2162a:	f002 0203 	and.w	r2, r2, #3
   2162e:	2a02      	cmp	r2, #2
   21630:	d10c      	bne.n	2164c <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21632:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21636:	2200      	movs	r2, #0
   21638:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2163c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   21640:	2202      	movs	r2, #2
   21642:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21646:	2201      	movs	r2, #1
   21648:	609a      	str	r2, [r3, #8]
}
   2164a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   2164c:	2201      	movs	r2, #1
   2164e:	e7f0      	b.n	21632 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21650:	2200      	movs	r2, #0
   21652:	4b07      	ldr	r3, [pc, #28]	; (21670 <nrfx_clock_start+0x94>)
   21654:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   21658:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2165c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21660:	601c      	str	r4, [r3, #0]
}
   21662:	e7f2      	b.n	2164a <nrfx_clock_start+0x6e>
   21664:	2000d0f4 	.word	0x2000d0f4
   21668:	00031521 	.word	0x00031521
   2166c:	0002f296 	.word	0x0002f296
   21670:	40005000 	.word	0x40005000

00021674 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   21674:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21676:	4b27      	ldr	r3, [pc, #156]	; (21714 <nrfx_clock_stop+0xa0>)
{
   21678:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2167a:	791b      	ldrb	r3, [r3, #4]
   2167c:	b953      	cbnz	r3, 21694 <nrfx_clock_stop+0x20>
   2167e:	4926      	ldr	r1, [pc, #152]	; (21718 <nrfx_clock_stop+0xa4>)
   21680:	4826      	ldr	r0, [pc, #152]	; (2171c <nrfx_clock_stop+0xa8>)
   21682:	f240 124b 	movw	r2, #331	; 0x14b
   21686:	f00a f891 	bl	2b7ac <printk>
   2168a:	f240 114b 	movw	r1, #331	; 0x14b
   2168e:	4822      	ldr	r0, [pc, #136]	; (21718 <nrfx_clock_stop+0xa4>)
   21690:	f00a fa23 	bl	2bada <assert_post_action>
    switch (domain)
   21694:	b174      	cbz	r4, 216b4 <nrfx_clock_stop+0x40>
   21696:	2c01      	cmp	r4, #1
   21698:	d022      	beq.n	216e0 <nrfx_clock_stop+0x6c>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2169a:	491f      	ldr	r1, [pc, #124]	; (21718 <nrfx_clock_stop+0xa4>)
   2169c:	481f      	ldr	r0, [pc, #124]	; (2171c <nrfx_clock_stop+0xa8>)
   2169e:	f240 1267 	movw	r2, #359	; 0x167
   216a2:	f00a f883 	bl	2b7ac <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   216a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
   216aa:	f240 1167 	movw	r1, #359	; 0x167
   216ae:	481a      	ldr	r0, [pc, #104]	; (21718 <nrfx_clock_stop+0xa4>)
   216b0:	f00a ba13 	b.w	2bada <assert_post_action>
    p_reg->INTENCLR = mask;
   216b4:	2302      	movs	r3, #2
   216b6:	4d1a      	ldr	r5, [pc, #104]	; (21720 <nrfx_clock_stop+0xac>)
   216b8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216bc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
   216c0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216c4:	2301      	movs	r3, #1
   216c6:	f242 7410 	movw	r4, #10000	; 0x2710
   216ca:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   216cc:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
   216d0:	03db      	lsls	r3, r3, #15
   216d2:	d51e      	bpl.n	21712 <nrfx_clock_stop+0x9e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   216d4:	2001      	movs	r0, #1
   216d6:	f00b f861 	bl	2c79c <nrfx_busy_wait>
   216da:	3c01      	subs	r4, #1
   216dc:	d1f6      	bne.n	216cc <nrfx_clock_stop+0x58>
   216de:	e018      	b.n	21712 <nrfx_clock_stop+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216e0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   216e2:	4d0f      	ldr	r5, [pc, #60]	; (21720 <nrfx_clock_stop+0xac>)
   216e4:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216e8:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   216ec:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216f0:	606c      	str	r4, [r5, #4]
   216f2:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   216f6:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   216fa:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   216fe:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   21702:	03d2      	lsls	r2, r2, #15
   21704:	d505      	bpl.n	21712 <nrfx_clock_stop+0x9e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   21706:	b123      	cbz	r3, 21712 <nrfx_clock_stop+0x9e>
   21708:	2001      	movs	r0, #1
   2170a:	f00b f847 	bl	2c79c <nrfx_busy_wait>
   2170e:	3c01      	subs	r4, #1
   21710:	d1f1      	bne.n	216f6 <nrfx_clock_stop+0x82>
}
   21712:	bd38      	pop	{r3, r4, r5, pc}
   21714:	2000d0f4 	.word	0x2000d0f4
   21718:	00031521 	.word	0x00031521
   2171c:	0002f296 	.word	0x0002f296
   21720:	40005000 	.word	0x40005000

00021724 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21724:	4b17      	ldr	r3, [pc, #92]	; (21784 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   21726:	b510      	push	{r4, lr}
   21728:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2172c:	b152      	cbz	r2, 21744 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2172e:	2000      	movs	r0, #0
   21730:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   21734:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   21738:	2201      	movs	r2, #1
   2173a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2173e:	4b12      	ldr	r3, [pc, #72]	; (21788 <nrfx_power_clock_irq_handler+0x64>)
   21740:	681b      	ldr	r3, [r3, #0]
   21742:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21744:	4b0f      	ldr	r3, [pc, #60]	; (21784 <nrfx_power_clock_irq_handler+0x60>)
   21746:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2174a:	b18a      	cbz	r2, 21770 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2174c:	2200      	movs	r2, #0
   2174e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   21752:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21756:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2175a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2175e:	f002 0203 	and.w	r2, r2, #3
   21762:	2a01      	cmp	r2, #1
   21764:	f04f 0102 	mov.w	r1, #2
   21768:	d103      	bne.n	21772 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2176a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2176e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   21770:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   21772:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21776:	4b04      	ldr	r3, [pc, #16]	; (21788 <nrfx_power_clock_irq_handler+0x64>)
   21778:	2001      	movs	r0, #1
}
   2177a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2177e:	681b      	ldr	r3, [r3, #0]
   21780:	4718      	bx	r3
   21782:	bf00      	nop
   21784:	40005000 	.word	0x40005000
   21788:	2000d0f4 	.word	0x2000d0f4

0002178c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2178c:	4b03      	ldr	r3, [pc, #12]	; (2179c <pin_in_use_by_te+0x10>)
   2178e:	3008      	adds	r0, #8
   21790:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21794:	f3c0 1040 	ubfx	r0, r0, #5, #1
   21798:	4770      	bx	lr
   2179a:	bf00      	nop
   2179c:	2000c670 	.word	0x2000c670

000217a0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   217a0:	4b04      	ldr	r3, [pc, #16]	; (217b4 <pin_has_trigger+0x14>)
   217a2:	3008      	adds	r0, #8
   217a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   217a8:	f010 001c 	ands.w	r0, r0, #28
   217ac:	bf18      	it	ne
   217ae:	2001      	movne	r0, #1
   217b0:	4770      	bx	lr
   217b2:	bf00      	nop
   217b4:	2000c670 	.word	0x2000c670

000217b8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   217b8:	4b03      	ldr	r3, [pc, #12]	; (217c8 <pin_is_output+0x10>)
   217ba:	3008      	adds	r0, #8
   217bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   217c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   217c4:	4770      	bx	lr
   217c6:	bf00      	nop
   217c8:	2000c670 	.word	0x2000c670

000217cc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   217cc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   217ce:	4c0d      	ldr	r4, [pc, #52]	; (21804 <call_handler+0x38>)
   217d0:	f100 0308 	add.w	r3, r0, #8
   217d4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   217d8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   217da:	05da      	lsls	r2, r3, #23
{
   217dc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   217de:	d507      	bpl.n	217f0 <call_handler+0x24>
   217e0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   217e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   217e8:	6852      	ldr	r2, [r2, #4]
   217ea:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   217ee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   217f0:	68a3      	ldr	r3, [r4, #8]
   217f2:	b12b      	cbz	r3, 21800 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   217f4:	4631      	mov	r1, r6
   217f6:	4628      	mov	r0, r5
   217f8:	68e2      	ldr	r2, [r4, #12]
    }
}
   217fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   217fe:	4718      	bx	r3
}
   21800:	bd70      	pop	{r4, r5, r6, pc}
   21802:	bf00      	nop
   21804:	2000c670 	.word	0x2000c670

00021808 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21808:	4a19      	ldr	r2, [pc, #100]	; (21870 <release_handler+0x68>)
   2180a:	3008      	adds	r0, #8
   2180c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   21810:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21812:	05d9      	lsls	r1, r3, #23
   21814:	d51d      	bpl.n	21852 <release_handler+0x4a>
   21816:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2181a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2181e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21822:	2000      	movs	r0, #0
   21824:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21828:	f834 3b02 	ldrh.w	r3, [r4], #2
   2182c:	f413 7f80 	tst.w	r3, #256	; 0x100
   21830:	d003      	beq.n	2183a <release_handler+0x32>
   21832:	f3c3 2343 	ubfx	r3, r3, #9, #4
   21836:	4299      	cmp	r1, r3
   21838:	d00b      	beq.n	21852 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2183a:	3001      	adds	r0, #1
   2183c:	2820      	cmp	r0, #32
   2183e:	d1f3      	bne.n	21828 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21840:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21842:	480c      	ldr	r0, [pc, #48]	; (21874 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   21844:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21848:	f7ff fe6c 	bl	21524 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2184c:	4b0a      	ldr	r3, [pc, #40]	; (21878 <release_handler+0x70>)
   2184e:	4298      	cmp	r0, r3
   21850:	d100      	bne.n	21854 <release_handler+0x4c>
}
   21852:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21854:	4909      	ldr	r1, [pc, #36]	; (2187c <release_handler+0x74>)
   21856:	480a      	ldr	r0, [pc, #40]	; (21880 <release_handler+0x78>)
   21858:	f44f 7299 	mov.w	r2, #306	; 0x132
   2185c:	f009 ffa6 	bl	2b7ac <printk>
}
   21860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21864:	f44f 7199 	mov.w	r1, #306	; 0x132
   21868:	4804      	ldr	r0, [pc, #16]	; (2187c <release_handler+0x74>)
   2186a:	f00a b936 	b.w	2bada <assert_post_action>
   2186e:	bf00      	nop
   21870:	2000c670 	.word	0x2000c670
   21874:	2000c6c4 	.word	0x2000c6c4
   21878:	0bad0000 	.word	0x0bad0000
   2187c:	0003155e 	.word	0x0003155e
   21880:	0002f296 	.word	0x0002f296

00021884 <pin_handler_trigger_uninit>:
{
   21884:	b538      	push	{r3, r4, r5, lr}
   21886:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21888:	f7ff ff80 	bl	2178c <pin_in_use_by_te>
   2188c:	4c0b      	ldr	r4, [pc, #44]	; (218bc <pin_handler_trigger_uninit+0x38>)
   2188e:	f102 0508 	add.w	r5, r2, #8
   21892:	b160      	cbz	r0, 218ae <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21894:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21896:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2189a:	0b5b      	lsrs	r3, r3, #13
   2189c:	009b      	lsls	r3, r3, #2
   2189e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   218a2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   218a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   218aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   218ae:	4610      	mov	r0, r2
   218b0:	f7ff ffaa 	bl	21808 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   218b4:	2300      	movs	r3, #0
   218b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   218ba:	bd38      	pop	{r3, r4, r5, pc}
   218bc:	2000c670 	.word	0x2000c670

000218c0 <nrf_gpio_pin_port_decode>:
{
   218c0:	b510      	push	{r4, lr}
   218c2:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   218c4:	6800      	ldr	r0, [r0, #0]
   218c6:	f00a ff6b 	bl	2c7a0 <nrf_gpio_pin_present_check>
   218ca:	b950      	cbnz	r0, 218e2 <nrf_gpio_pin_port_decode+0x22>
   218cc:	490e      	ldr	r1, [pc, #56]	; (21908 <nrf_gpio_pin_port_decode+0x48>)
   218ce:	480f      	ldr	r0, [pc, #60]	; (2190c <nrf_gpio_pin_port_decode+0x4c>)
   218d0:	f240 2229 	movw	r2, #553	; 0x229
   218d4:	f009 ff6a 	bl	2b7ac <printk>
   218d8:	f240 2129 	movw	r1, #553	; 0x229
   218dc:	480a      	ldr	r0, [pc, #40]	; (21908 <nrf_gpio_pin_port_decode+0x48>)
   218de:	f00a f8fc 	bl	2bada <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   218e2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   218e4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   218e8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   218ea:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   218ec:	d00a      	beq.n	21904 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   218ee:	4906      	ldr	r1, [pc, #24]	; (21908 <nrf_gpio_pin_port_decode+0x48>)
   218f0:	4806      	ldr	r0, [pc, #24]	; (2190c <nrf_gpio_pin_port_decode+0x4c>)
   218f2:	f240 222e 	movw	r2, #558	; 0x22e
   218f6:	f009 ff59 	bl	2b7ac <printk>
   218fa:	f240 212e 	movw	r1, #558	; 0x22e
   218fe:	4802      	ldr	r0, [pc, #8]	; (21908 <nrf_gpio_pin_port_decode+0x48>)
   21900:	f00a f8eb 	bl	2bada <assert_post_action>
}
   21904:	4802      	ldr	r0, [pc, #8]	; (21910 <nrf_gpio_pin_port_decode+0x50>)
   21906:	bd10      	pop	{r4, pc}
   21908:	0002fc68 	.word	0x0002fc68
   2190c:	0002f296 	.word	0x0002f296
   21910:	40842500 	.word	0x40842500

00021914 <nrfx_gpiote_input_configure>:
{
   21914:	b5f0      	push	{r4, r5, r6, r7, lr}
   21916:	4604      	mov	r4, r0
   21918:	4617      	mov	r7, r2
   2191a:	461d      	mov	r5, r3
   2191c:	b085      	sub	sp, #20
    if (p_input_config)
   2191e:	b1f1      	cbz	r1, 2195e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   21920:	f00a ff4a 	bl	2c7b8 <pin_is_task_output>
   21924:	b110      	cbz	r0, 2192c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   21926:	484d      	ldr	r0, [pc, #308]	; (21a5c <nrfx_gpiote_input_configure+0x148>)
}
   21928:	b005      	add	sp, #20
   2192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2192c:	460b      	mov	r3, r1
   2192e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21932:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   21936:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2193a:	f10d 020f 	add.w	r2, sp, #15
   2193e:	f10d 010e 	add.w	r1, sp, #14
   21942:	4620      	mov	r0, r4
   21944:	f00a ff47 	bl	2c7d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21948:	4a45      	ldr	r2, [pc, #276]	; (21a60 <nrfx_gpiote_input_configure+0x14c>)
   2194a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2194e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21952:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21956:	f043 0301 	orr.w	r3, r3, #1
   2195a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2195e:	b197      	cbz	r7, 21986 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   21960:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21962:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21964:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   21966:	f7ff ff27 	bl	217b8 <pin_is_output>
   2196a:	b180      	cbz	r0, 2198e <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   2196c:	2a00      	cmp	r2, #0
   2196e:	d1da      	bne.n	21926 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   21970:	4a3b      	ldr	r2, [pc, #236]	; (21a60 <nrfx_gpiote_input_configure+0x14c>)
   21972:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21976:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2197a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2197e:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
   21982:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
   21986:	2d00      	cmp	r5, #0
   21988:	d13e      	bne.n	21a08 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   2198a:	4836      	ldr	r0, [pc, #216]	; (21a64 <nrfx_gpiote_input_configure+0x150>)
   2198c:	e7cc      	b.n	21928 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2198e:	4834      	ldr	r0, [pc, #208]	; (21a60 <nrfx_gpiote_input_configure+0x14c>)
   21990:	f104 0708 	add.w	r7, r4, #8
   21994:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
   21998:	f021 0120 	bic.w	r1, r1, #32
   2199c:	04c9      	lsls	r1, r1, #19
   2199e:	0cc9      	lsrs	r1, r1, #19
   219a0:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
   219a4:	2a00      	cmp	r2, #0
   219a6:	d0e3      	beq.n	21970 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   219a8:	2e03      	cmp	r6, #3
   219aa:	d8bc      	bhi.n	21926 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   219ac:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   219b0:	4662      	mov	r2, ip
   219b2:	0092      	lsls	r2, r2, #2
   219b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   219b8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   219bc:	b926      	cbnz	r6, 219c8 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   219be:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   219c2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
   219c6:	e7d3      	b.n	21970 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   219c8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   219cc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   219d0:	f023 0303 	bic.w	r3, r3, #3
   219d4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   219d8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   219dc:	f041 0120 	orr.w	r1, r1, #32
   219e0:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   219e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   219e8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   219ec:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   219f0:	0223      	lsls	r3, r4, #8
   219f2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   219f6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   219fa:	ea43 030e 	orr.w	r3, r3, lr
   219fe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   21a02:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
   21a06:	e7b3      	b.n	21970 <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
   21a08:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21a0a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21a0e:	f7ff fefb 	bl	21808 <release_handler>
    if (!handler)
   21a12:	2e00      	cmp	r6, #0
   21a14:	d0b9      	beq.n	2198a <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   21a16:	4d12      	ldr	r5, [pc, #72]	; (21a60 <nrfx_gpiote_input_configure+0x14c>)
   21a18:	682b      	ldr	r3, [r5, #0]
   21a1a:	429e      	cmp	r6, r3
   21a1c:	d104      	bne.n	21a28 <nrfx_gpiote_input_configure+0x114>
   21a1e:	686b      	ldr	r3, [r5, #4]
   21a20:	429f      	cmp	r7, r3
   21a22:	d101      	bne.n	21a28 <nrfx_gpiote_input_configure+0x114>
   21a24:	2200      	movs	r2, #0
   21a26:	e00a      	b.n	21a3e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21a28:	480f      	ldr	r0, [pc, #60]	; (21a68 <nrfx_gpiote_input_configure+0x154>)
   21a2a:	f10d 010f 	add.w	r1, sp, #15
   21a2e:	f7ff fd57 	bl	214e0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21a32:	4b0c      	ldr	r3, [pc, #48]	; (21a64 <nrfx_gpiote_input_configure+0x150>)
   21a34:	4298      	cmp	r0, r3
   21a36:	f47f af77 	bne.w	21928 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   21a3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   21a3e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21a42:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   21a44:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21a46:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   21a4a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   21a4e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21a56:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   21a5a:	e796      	b.n	2198a <nrfx_gpiote_input_configure+0x76>
   21a5c:	0bad0004 	.word	0x0bad0004
   21a60:	2000c670 	.word	0x2000c670
   21a64:	0bad0000 	.word	0x0bad0000
   21a68:	2000c6c4 	.word	0x2000c6c4

00021a6c <nrfx_gpiote_output_configure>:
{
   21a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a6e:	4604      	mov	r4, r0
   21a70:	4615      	mov	r5, r2
   21a72:	b085      	sub	sp, #20
    if (p_config)
   21a74:	b321      	cbz	r1, 21ac0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   21a76:	f7ff fe9f 	bl	217b8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21a7a:	b920      	cbnz	r0, 21a86 <nrfx_gpiote_output_configure+0x1a>
   21a7c:	4620      	mov	r0, r4
   21a7e:	f7ff fe85 	bl	2178c <pin_in_use_by_te>
   21a82:	2800      	cmp	r0, #0
   21a84:	d161      	bne.n	21b4a <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21a86:	4620      	mov	r0, r4
   21a88:	f7ff fe8a 	bl	217a0 <pin_has_trigger>
   21a8c:	b110      	cbz	r0, 21a94 <nrfx_gpiote_output_configure+0x28>
   21a8e:	784b      	ldrb	r3, [r1, #1]
   21a90:	2b01      	cmp	r3, #1
   21a92:	d05a      	beq.n	21b4a <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   21a94:	2301      	movs	r3, #1
   21a96:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   21a9a:	2300      	movs	r3, #0
   21a9c:	1c4a      	adds	r2, r1, #1
   21a9e:	e9cd 1300 	strd	r1, r3, [sp]
   21aa2:	4620      	mov	r0, r4
   21aa4:	1c8b      	adds	r3, r1, #2
   21aa6:	f10d 010f 	add.w	r1, sp, #15
   21aaa:	f00a fe94 	bl	2c7d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   21aae:	4a28      	ldr	r2, [pc, #160]	; (21b50 <nrfx_gpiote_output_configure+0xe4>)
   21ab0:	f104 0108 	add.w	r1, r4, #8
   21ab4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21ab8:	f043 0303 	orr.w	r3, r3, #3
   21abc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   21ac0:	b915      	cbnz	r5, 21ac8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   21ac2:	4824      	ldr	r0, [pc, #144]	; (21b54 <nrfx_gpiote_output_configure+0xe8>)
}
   21ac4:	b005      	add	sp, #20
   21ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   21ac8:	4620      	mov	r0, r4
   21aca:	f7ff fe75 	bl	217b8 <pin_is_output>
        if (pin_is_input(pin))
   21ace:	2800      	cmp	r0, #0
   21ad0:	d03b      	beq.n	21b4a <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   21ad2:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   21ad6:	2300      	movs	r3, #0
   21ad8:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21ada:	4e1d      	ldr	r6, [pc, #116]	; (21b50 <nrfx_gpiote_output_configure+0xe4>)
   21adc:	f104 0708 	add.w	r7, r4, #8
   21ae0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   21ae4:	0089      	lsls	r1, r1, #2
   21ae6:	f020 0020 	bic.w	r0, r0, #32
   21aea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21aee:	04c0      	lsls	r0, r0, #19
   21af0:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   21af4:	0cc0      	lsrs	r0, r0, #19
   21af6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21afa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   21afe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   21b02:	786a      	ldrb	r2, [r5, #1]
   21b04:	2a00      	cmp	r2, #0
   21b06:	d0dc      	beq.n	21ac2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21b08:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   21b0c:	78ad      	ldrb	r5, [r5, #2]
   21b0e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   21b12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21b16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21b1a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21b1e:	0223      	lsls	r3, r4, #8
   21b20:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21b24:	0412      	lsls	r2, r2, #16
   21b26:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21b2a:	ea43 030e 	orr.w	r3, r3, lr
   21b2e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21b30:	052a      	lsls	r2, r5, #20
   21b32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21b36:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21b3a:	4313      	orrs	r3, r2
   21b3c:	f040 0020 	orr.w	r0, r0, #32
   21b40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21b44:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21b48:	e7bb      	b.n	21ac2 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   21b4a:	4803      	ldr	r0, [pc, #12]	; (21b58 <nrfx_gpiote_output_configure+0xec>)
   21b4c:	e7ba      	b.n	21ac4 <nrfx_gpiote_output_configure+0x58>
   21b4e:	bf00      	nop
   21b50:	2000c670 	.word	0x2000c670
   21b54:	0bad0000 	.word	0x0bad0000
   21b58:	0bad0004 	.word	0x0bad0004

00021b5c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21b5c:	4b01      	ldr	r3, [pc, #4]	; (21b64 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   21b5e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   21b62:	4770      	bx	lr
   21b64:	2000c670 	.word	0x2000c670

00021b68 <nrfx_gpiote_channel_get>:
{
   21b68:	b538      	push	{r3, r4, r5, lr}
   21b6a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   21b6c:	460d      	mov	r5, r1
   21b6e:	b951      	cbnz	r1, 21b86 <nrfx_gpiote_channel_get+0x1e>
   21b70:	490c      	ldr	r1, [pc, #48]	; (21ba4 <nrfx_gpiote_channel_get+0x3c>)
   21b72:	480d      	ldr	r0, [pc, #52]	; (21ba8 <nrfx_gpiote_channel_get+0x40>)
   21b74:	f240 2235 	movw	r2, #565	; 0x235
   21b78:	f009 fe18 	bl	2b7ac <printk>
   21b7c:	f240 2135 	movw	r1, #565	; 0x235
   21b80:	4808      	ldr	r0, [pc, #32]	; (21ba4 <nrfx_gpiote_channel_get+0x3c>)
   21b82:	f009 ffaa 	bl	2bada <assert_post_action>
    if (pin_in_use_by_te(pin))
   21b86:	4620      	mov	r0, r4
   21b88:	f7ff fe00 	bl	2178c <pin_in_use_by_te>
   21b8c:	b138      	cbz	r0, 21b9e <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21b8e:	4b07      	ldr	r3, [pc, #28]	; (21bac <nrfx_gpiote_channel_get+0x44>)
   21b90:	3408      	adds	r4, #8
   21b92:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
   21b96:	4806      	ldr	r0, [pc, #24]	; (21bb0 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21b98:	0b5b      	lsrs	r3, r3, #13
   21b9a:	702b      	strb	r3, [r5, #0]
}
   21b9c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21b9e:	4805      	ldr	r0, [pc, #20]	; (21bb4 <nrfx_gpiote_channel_get+0x4c>)
   21ba0:	e7fc      	b.n	21b9c <nrfx_gpiote_channel_get+0x34>
   21ba2:	bf00      	nop
   21ba4:	0003155e 	.word	0x0003155e
   21ba8:	0002f296 	.word	0x0002f296
   21bac:	2000c670 	.word	0x2000c670
   21bb0:	0bad0000 	.word	0x0bad0000
   21bb4:	0bad0004 	.word	0x0bad0004

00021bb8 <nrfx_gpiote_init>:
{
   21bb8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21bba:	4c0f      	ldr	r4, [pc, #60]	; (21bf8 <nrfx_gpiote_init+0x40>)
   21bbc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   21bc0:	b9bd      	cbnz	r5, 21bf2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   21bc2:	2240      	movs	r2, #64	; 0x40
   21bc4:	4629      	mov	r1, r5
   21bc6:	f104 0010 	add.w	r0, r4, #16
   21bca:	f00c f805 	bl	2dbd8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   21bce:	2031      	movs	r0, #49	; 0x31
   21bd0:	f7fa faf0 	bl	1c1b4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21bd4:	4b09      	ldr	r3, [pc, #36]	; (21bfc <nrfx_gpiote_init+0x44>)
    return err_code;
   21bd6:	480a      	ldr	r0, [pc, #40]	; (21c00 <nrfx_gpiote_init+0x48>)
   21bd8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   21bdc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   21be0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21be4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21be8:	2301      	movs	r3, #1
   21bea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   21bee:	6563      	str	r3, [r4, #84]	; 0x54
}
   21bf0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   21bf2:	4804      	ldr	r0, [pc, #16]	; (21c04 <nrfx_gpiote_init+0x4c>)
   21bf4:	e7fc      	b.n	21bf0 <nrfx_gpiote_init+0x38>
   21bf6:	bf00      	nop
   21bf8:	2000c670 	.word	0x2000c670
   21bfc:	40031000 	.word	0x40031000
   21c00:	0bad0000 	.word	0x0bad0000
   21c04:	0bad0005 	.word	0x0bad0005

00021c08 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21c08:	4b03      	ldr	r3, [pc, #12]	; (21c18 <nrfx_gpiote_is_init+0x10>)
   21c0a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   21c0e:	3800      	subs	r0, #0
   21c10:	bf18      	it	ne
   21c12:	2001      	movne	r0, #1
   21c14:	4770      	bx	lr
   21c16:	bf00      	nop
   21c18:	2000c670 	.word	0x2000c670

00021c1c <nrfx_gpiote_channel_free>:
{
   21c1c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21c1e:	4801      	ldr	r0, [pc, #4]	; (21c24 <nrfx_gpiote_channel_free+0x8>)
   21c20:	f7ff bc80 	b.w	21524 <nrfx_flag32_free>
   21c24:	2000c6c0 	.word	0x2000c6c0

00021c28 <nrfx_gpiote_channel_alloc>:
{
   21c28:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21c2a:	4801      	ldr	r0, [pc, #4]	; (21c30 <nrfx_gpiote_channel_alloc+0x8>)
   21c2c:	f7ff bc58 	b.w	214e0 <nrfx_flag32_alloc>
   21c30:	2000c6c0 	.word	0x2000c6c0

00021c34 <nrfx_gpiote_trigger_enable>:
{
   21c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21c36:	4604      	mov	r4, r0
   21c38:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   21c3a:	f7ff fdb1 	bl	217a0 <pin_has_trigger>
   21c3e:	b950      	cbnz	r0, 21c56 <nrfx_gpiote_trigger_enable+0x22>
   21c40:	492e      	ldr	r1, [pc, #184]	; (21cfc <nrfx_gpiote_trigger_enable+0xc8>)
   21c42:	482f      	ldr	r0, [pc, #188]	; (21d00 <nrfx_gpiote_trigger_enable+0xcc>)
   21c44:	f240 32df 	movw	r2, #991	; 0x3df
   21c48:	f009 fdb0 	bl	2b7ac <printk>
   21c4c:	f240 31df 	movw	r1, #991	; 0x3df
   21c50:	482a      	ldr	r0, [pc, #168]	; (21cfc <nrfx_gpiote_trigger_enable+0xc8>)
   21c52:	f009 ff42 	bl	2bada <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21c56:	4620      	mov	r0, r4
   21c58:	f7ff fd98 	bl	2178c <pin_in_use_by_te>
   21c5c:	4e29      	ldr	r6, [pc, #164]	; (21d04 <nrfx_gpiote_trigger_enable+0xd0>)
   21c5e:	f104 0708 	add.w	r7, r4, #8
   21c62:	b318      	cbz	r0, 21cac <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   21c64:	4620      	mov	r0, r4
   21c66:	f7ff fda7 	bl	217b8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21c6a:	4602      	mov	r2, r0
   21c6c:	b9f0      	cbnz	r0, 21cac <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21c6e:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   21c72:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   21c74:	4608      	mov	r0, r1
   21c76:	f00a fdaa 	bl	2c7ce <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   21c7a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   21c7e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21c82:	601a      	str	r2, [r3, #0]
   21c84:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21c86:	008b      	lsls	r3, r1, #2
   21c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21c8c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21c90:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21c94:	f042 0201 	orr.w	r2, r2, #1
   21c98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   21c9c:	b125      	cbz	r5, 21ca8 <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21c9e:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   21ca0:	4a19      	ldr	r2, [pc, #100]	; (21d08 <nrfx_gpiote_trigger_enable+0xd4>)
   21ca2:	408b      	lsls	r3, r1
   21ca4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21ca8:	b003      	add	sp, #12
   21caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   21cac:	b955      	cbnz	r5, 21cc4 <nrfx_gpiote_trigger_enable+0x90>
   21cae:	4913      	ldr	r1, [pc, #76]	; (21cfc <nrfx_gpiote_trigger_enable+0xc8>)
   21cb0:	4813      	ldr	r0, [pc, #76]	; (21d00 <nrfx_gpiote_trigger_enable+0xcc>)
   21cb2:	f240 32ee 	movw	r2, #1006	; 0x3ee
   21cb6:	f009 fd79 	bl	2b7ac <printk>
   21cba:	f240 31ee 	movw	r1, #1006	; 0x3ee
   21cbe:	480f      	ldr	r0, [pc, #60]	; (21cfc <nrfx_gpiote_trigger_enable+0xc8>)
   21cc0:	f009 ff0b 	bl	2bada <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21cc4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   21cc8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   21ccc:	2b04      	cmp	r3, #4
   21cce:	d011      	beq.n	21cf4 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   21cd0:	2b05      	cmp	r3, #5
   21cd2:	d011      	beq.n	21cf8 <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21cd4:	a801      	add	r0, sp, #4
   21cd6:	9401      	str	r4, [sp, #4]
   21cd8:	f7ff fdf2 	bl	218c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21cdc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   21cde:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   21ce0:	40d9      	lsrs	r1, r3
   21ce2:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21ce6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21ce8:	4620      	mov	r0, r4
}
   21cea:	b003      	add	sp, #12
   21cec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   21cf0:	f00a bdbc 	b.w	2c86c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   21cf4:	2103      	movs	r1, #3
   21cf6:	e7f7      	b.n	21ce8 <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   21cf8:	2102      	movs	r1, #2
   21cfa:	e7f5      	b.n	21ce8 <nrfx_gpiote_trigger_enable+0xb4>
   21cfc:	0003155e 	.word	0x0003155e
   21d00:	0002f296 	.word	0x0002f296
   21d04:	2000c670 	.word	0x2000c670
   21d08:	40031000 	.word	0x40031000

00021d0c <nrfx_gpiote_trigger_disable>:
{
   21d0c:	b508      	push	{r3, lr}
   21d0e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21d10:	f7ff fd3c 	bl	2178c <pin_in_use_by_te>
   21d14:	b1c8      	cbz	r0, 21d4a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   21d16:	4610      	mov	r0, r2
   21d18:	f7ff fd4e 	bl	217b8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21d1c:	b9a8      	cbnz	r0, 21d4a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21d1e:	4b0e      	ldr	r3, [pc, #56]	; (21d58 <nrfx_gpiote_trigger_disable+0x4c>)
   21d20:	3208      	adds	r2, #8
   21d22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21d26:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21d28:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21d2a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21d2c:	490b      	ldr	r1, [pc, #44]	; (21d5c <nrfx_gpiote_trigger_disable+0x50>)
   21d2e:	009b      	lsls	r3, r3, #2
   21d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21d34:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21d38:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21d3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21d40:	f022 0203 	bic.w	r2, r2, #3
   21d44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21d48:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21d4a:	2100      	movs	r1, #0
}
   21d4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21d50:	4610      	mov	r0, r2
   21d52:	f00a bd8b 	b.w	2c86c <nrf_gpio_cfg_sense_set>
   21d56:	bf00      	nop
   21d58:	2000c670 	.word	0x2000c670
   21d5c:	40031000 	.word	0x40031000

00021d60 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21d60:	4b0d      	ldr	r3, [pc, #52]	; (21d98 <nrfx_gpiote_pin_uninit+0x38>)
   21d62:	f100 0208 	add.w	r2, r0, #8
   21d66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   21d6a:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   21d6c:	07db      	lsls	r3, r3, #31
{
   21d6e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21d70:	d510      	bpl.n	21d94 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   21d72:	f7ff ffcb 	bl	21d0c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21d76:	4620      	mov	r0, r4
   21d78:	f7ff fd84 	bl	21884 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21d7c:	a801      	add	r0, sp, #4
   21d7e:	9401      	str	r4, [sp, #4]
   21d80:	f7ff fd9e 	bl	218c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21d84:	2202      	movs	r2, #2
   21d86:	9b01      	ldr	r3, [sp, #4]
   21d88:	3380      	adds	r3, #128	; 0x80
   21d8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21d8e:	4803      	ldr	r0, [pc, #12]	; (21d9c <nrfx_gpiote_pin_uninit+0x3c>)
}
   21d90:	b002      	add	sp, #8
   21d92:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21d94:	4802      	ldr	r0, [pc, #8]	; (21da0 <nrfx_gpiote_pin_uninit+0x40>)
   21d96:	e7fb      	b.n	21d90 <nrfx_gpiote_pin_uninit+0x30>
   21d98:	2000c670 	.word	0x2000c670
   21d9c:	0bad0000 	.word	0x0bad0000
   21da0:	0bad0004 	.word	0x0bad0004

00021da4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   21da8:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21daa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21dac:	4634      	mov	r4, r6
{
   21dae:	4b53      	ldr	r3, [pc, #332]	; (21efc <nrfx_gpiote_irq_handler+0x158>)
    return p_reg->INTENSET & mask;
   21db0:	4853      	ldr	r0, [pc, #332]	; (21f00 <nrfx_gpiote_irq_handler+0x15c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21db2:	4954      	ldr	r1, [pc, #336]	; (21f04 <nrfx_gpiote_irq_handler+0x160>)
{
   21db4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21db6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   21db8:	b135      	cbz	r5, 21dc8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   21dba:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   21dbe:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21dc0:	bf1e      	ittt	ne
   21dc2:	601c      	strne	r4, [r3, #0]
   21dc4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   21dc6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21dc8:	3304      	adds	r3, #4
   21dca:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   21dcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21dd0:	d1f1      	bne.n	21db6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21dd2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 21f00 <nrfx_gpiote_irq_handler+0x15c>
   21dd6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   21dda:	b183      	cbz	r3, 21dfe <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   21ddc:	4f4a      	ldr	r7, [pc, #296]	; (21f08 <nrfx_gpiote_irq_handler+0x164>)
   21dde:	6a3b      	ldr	r3, [r7, #32]
   21de0:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21de2:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   21de4:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   21de8:	9c02      	ldr	r4, [sp, #8]
   21dea:	b954      	cbnz	r4, 21e02 <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21dec:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   21df0:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   21df4:	6a3b      	ldr	r3, [r7, #32]
   21df6:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   21df8:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   21dfa:	2b00      	cmp	r3, #0
   21dfc:	d1f2      	bne.n	21de4 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   21dfe:	2401      	movs	r4, #1
   21e00:	e076      	b.n	21ef0 <nrfx_gpiote_irq_handler+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
   21e02:	fa94 f4a4 	rbit	r4, r4
   21e06:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21e0a:	4a40      	ldr	r2, [pc, #256]	; (21f0c <nrfx_gpiote_irq_handler+0x168>)
   21e0c:	f104 0308 	add.w	r3, r4, #8
   21e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21e14:	08e5      	lsrs	r5, r4, #3
   21e16:	089a      	lsrs	r2, r3, #2
   21e18:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   21e1c:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   21e20:	ab02      	add	r3, sp, #8
   21e22:	fa09 f001 	lsl.w	r0, r9, r1
   21e26:	5d59      	ldrb	r1, [r3, r5]
   21e28:	9201      	str	r2, [sp, #4]
   21e2a:	ea21 0100 	bic.w	r1, r1, r0
   21e2e:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e30:	a803      	add	r0, sp, #12
   21e32:	9403      	str	r4, [sp, #12]
   21e34:	f7ff fd44 	bl	218c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21e38:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   21e3a:	9a01      	ldr	r2, [sp, #4]
   21e3c:	3180      	adds	r1, #128	; 0x80
   21e3e:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   21e42:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21e44:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21e46:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   21e4a:	d521      	bpl.n	21e90 <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   21e4c:	4659      	mov	r1, fp
   21e4e:	4620      	mov	r0, r4
   21e50:	f7ff fcbc 	bl	217cc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e54:	a803      	add	r0, sp, #12
   21e56:	9403      	str	r4, [sp, #12]
   21e58:	f7ff fd32 	bl	218c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21e5c:	9b03      	ldr	r3, [sp, #12]
   21e5e:	b2ed      	uxtb	r5, r5
   21e60:	3380      	adds	r3, #128	; 0x80
   21e62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21e66:	f3c3 4301 	ubfx	r3, r3, #16, #2
   21e6a:	429d      	cmp	r5, r3
   21e6c:	d107      	bne.n	21e7e <nrfx_gpiote_irq_handler+0xda>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21e6e:	2100      	movs	r1, #0
   21e70:	4620      	mov	r0, r4
   21e72:	f00a fcfb 	bl	2c86c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21e76:	4629      	mov	r1, r5
   21e78:	4620      	mov	r0, r4
   21e7a:	f00a fcf7 	bl	2c86c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21e7e:	a803      	add	r0, sp, #12
   21e80:	9403      	str	r4, [sp, #12]
   21e82:	f7ff fd1d 	bl	218c0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   21e86:	9b03      	ldr	r3, [sp, #12]
   21e88:	fa09 f303 	lsl.w	r3, r9, r3
   21e8c:	6203      	str	r3, [r0, #32]
   21e8e:	e7ab      	b.n	21de8 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21e90:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21e92:	bf0c      	ite	eq
   21e94:	2103      	moveq	r1, #3
   21e96:	2102      	movne	r1, #2
   21e98:	4620      	mov	r0, r4
   21e9a:	f00a fce7 	bl	2c86c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   21e9e:	f1bb 0f03 	cmp.w	fp, #3
   21ea2:	d004      	beq.n	21eae <nrfx_gpiote_irq_handler+0x10a>
   21ea4:	2d02      	cmp	r5, #2
   21ea6:	d107      	bne.n	21eb8 <nrfx_gpiote_irq_handler+0x114>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21ea8:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21eac:	d1e7      	bne.n	21e7e <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   21eae:	4651      	mov	r1, sl
   21eb0:	4620      	mov	r0, r4
   21eb2:	f7ff fc8b 	bl	217cc <call_handler>
   21eb6:	e7e2      	b.n	21e7e <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   21eb8:	2d03      	cmp	r5, #3
   21eba:	d1e0      	bne.n	21e7e <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   21ebc:	f1bb 0f02 	cmp.w	fp, #2
   21ec0:	e7f4      	b.n	21eac <nrfx_gpiote_irq_handler+0x108>
        uint32_t ch = NRF_CTZ(mask);
   21ec2:	fa96 f3a6 	rbit	r3, r6
   21ec6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   21eca:	fa04 f203 	lsl.w	r2, r4, r3
   21ece:	009b      	lsls	r3, r3, #2
   21ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21ed4:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21ed8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21edc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21ee0:	f3c0 2004 	ubfx	r0, r0, #8, #5
   21ee4:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   21ee8:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21eec:	f7ff fc6e 	bl	217cc <call_handler>
    while (mask)
   21ef0:	2e00      	cmp	r6, #0
   21ef2:	d1e6      	bne.n	21ec2 <nrfx_gpiote_irq_handler+0x11e>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   21ef4:	b005      	add	sp, #20
   21ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21efa:	bf00      	nop
   21efc:	40031100 	.word	0x40031100
   21f00:	40031000 	.word	0x40031000
   21f04:	40031120 	.word	0x40031120
   21f08:	40842500 	.word	0x40842500
   21f0c:	2000c670 	.word	0x2000c670

00021f10 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   21f10:	b570      	push	{r4, r5, r6, lr}
   21f12:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   21f14:	460d      	mov	r5, r1
   21f16:	b941      	cbnz	r1, 21f2a <nrfx_ipc_init+0x1a>
   21f18:	490b      	ldr	r1, [pc, #44]	; (21f48 <nrfx_ipc_init+0x38>)
   21f1a:	480c      	ldr	r0, [pc, #48]	; (21f4c <nrfx_ipc_init+0x3c>)
   21f1c:	2234      	movs	r2, #52	; 0x34
   21f1e:	f009 fc45 	bl	2b7ac <printk>
   21f22:	2134      	movs	r1, #52	; 0x34
   21f24:	4808      	ldr	r0, [pc, #32]	; (21f48 <nrfx_ipc_init+0x38>)
   21f26:	f009 fdd8 	bl	2bada <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21f2a:	4c09      	ldr	r4, [pc, #36]	; (21f50 <nrfx_ipc_init+0x40>)
   21f2c:	7923      	ldrb	r3, [r4, #4]
   21f2e:	b943      	cbnz	r3, 21f42 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   21f30:	202a      	movs	r0, #42	; 0x2a
   21f32:	f7fa f93f 	bl	1c1b4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21f36:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   21f38:	4806      	ldr	r0, [pc, #24]	; (21f54 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21f3a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   21f3c:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   21f3e:	60a6      	str	r6, [r4, #8]
}
   21f40:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   21f42:	4805      	ldr	r0, [pc, #20]	; (21f58 <nrfx_ipc_init+0x48>)
   21f44:	e7fc      	b.n	21f40 <nrfx_ipc_init+0x30>
   21f46:	bf00      	nop
   21f48:	0003159c 	.word	0x0003159c
   21f4c:	0002f296 	.word	0x0002f296
   21f50:	2000d0fc 	.word	0x2000d0fc
   21f54:	0bad0000 	.word	0x0bad0000
   21f58:	0bad000c 	.word	0x0bad000c

00021f5c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   21f5c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   21f5e:	4604      	mov	r4, r0
   21f60:	b940      	cbnz	r0, 21f74 <nrfx_ipc_config_load+0x18>
   21f62:	4919      	ldr	r1, [pc, #100]	; (21fc8 <nrfx_ipc_config_load+0x6c>)
   21f64:	4819      	ldr	r0, [pc, #100]	; (21fcc <nrfx_ipc_config_load+0x70>)
   21f66:	2246      	movs	r2, #70	; 0x46
   21f68:	f009 fc20 	bl	2b7ac <printk>
   21f6c:	2146      	movs	r1, #70	; 0x46
   21f6e:	4816      	ldr	r0, [pc, #88]	; (21fc8 <nrfx_ipc_config_load+0x6c>)
   21f70:	f009 fdb3 	bl	2bada <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21f74:	4b16      	ldr	r3, [pc, #88]	; (21fd0 <nrfx_ipc_config_load+0x74>)
   21f76:	791b      	ldrb	r3, [r3, #4]
   21f78:	2b01      	cmp	r3, #1
   21f7a:	d008      	beq.n	21f8e <nrfx_ipc_config_load+0x32>
   21f7c:	4912      	ldr	r1, [pc, #72]	; (21fc8 <nrfx_ipc_config_load+0x6c>)
   21f7e:	4813      	ldr	r0, [pc, #76]	; (21fcc <nrfx_ipc_config_load+0x70>)
   21f80:	2247      	movs	r2, #71	; 0x47
   21f82:	f009 fc13 	bl	2b7ac <printk>
   21f86:	2147      	movs	r1, #71	; 0x47
   21f88:	480f      	ldr	r0, [pc, #60]	; (21fc8 <nrfx_ipc_config_load+0x6c>)
   21f8a:	f009 fda6 	bl	2bada <assert_post_action>
{
   21f8e:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   21f90:	4a10      	ldr	r2, [pc, #64]	; (21fd4 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   21f92:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   21f96:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21f9a:	3301      	adds	r3, #1
   21f9c:	2b08      	cmp	r3, #8
   21f9e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   21fa2:	d1f6      	bne.n	21f92 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   21fa4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   21fa6:	4a0b      	ldr	r2, [pc, #44]	; (21fd4 <nrfx_ipc_config_load+0x78>)
   21fa8:	f104 0120 	add.w	r1, r4, #32
   21fac:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   21fb0:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21fb4:	3301      	adds	r3, #1
   21fb6:	2b08      	cmp	r3, #8
   21fb8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   21fbc:	d1f6      	bne.n	21fac <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   21fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   21fc0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21fc4:	bd38      	pop	{r3, r4, r5, pc}
   21fc6:	bf00      	nop
   21fc8:	0003159c 	.word	0x0003159c
   21fcc:	0002f296 	.word	0x0002f296
   21fd0:	2000d0fc 	.word	0x2000d0fc
   21fd4:	4002a000 	.word	0x4002a000

00021fd8 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   21fd8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21fda:	4c1a      	ldr	r4, [pc, #104]	; (22044 <nrfx_ipc_uninit+0x6c>)
   21fdc:	7923      	ldrb	r3, [r4, #4]
   21fde:	2b01      	cmp	r3, #1
   21fe0:	d008      	beq.n	21ff4 <nrfx_ipc_uninit+0x1c>
   21fe2:	4919      	ldr	r1, [pc, #100]	; (22048 <nrfx_ipc_uninit+0x70>)
   21fe4:	4819      	ldr	r0, [pc, #100]	; (2204c <nrfx_ipc_uninit+0x74>)
   21fe6:	2259      	movs	r2, #89	; 0x59
   21fe8:	f009 fbe0 	bl	2b7ac <printk>
   21fec:	2159      	movs	r1, #89	; 0x59
   21fee:	4816      	ldr	r0, [pc, #88]	; (22048 <nrfx_ipc_uninit+0x70>)
   21ff0:	f009 fd73 	bl	2bada <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   21ff4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   21ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
   21ffa:	4a15      	ldr	r2, [pc, #84]	; (22050 <nrfx_ipc_uninit+0x78>)
   21ffc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   22000:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   22004:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   22008:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   2200c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   22010:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   22014:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   22018:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2201c:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   22020:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   22024:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   22028:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   2202c:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   22030:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   22034:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   22038:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   2203c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   22040:	7123      	strb	r3, [r4, #4]
}
   22042:	bd10      	pop	{r4, pc}
   22044:	2000d0fc 	.word	0x2000d0fc
   22048:	0003159c 	.word	0x0003159c
   2204c:	0002f296 	.word	0x0002f296
   22050:	4002a000 	.word	0x4002a000

00022054 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   22054:	4b16      	ldr	r3, [pc, #88]	; (220b0 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   22056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2205a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   2205e:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   22062:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   22064:	4f13      	ldr	r7, [pc, #76]	; (220b4 <nrfx_ipc_irq_handler+0x60>)
   22066:	f8df 9050 	ldr.w	r9, [pc, #80]	; 220b8 <nrfx_ipc_irq_handler+0x64>
    while (bitmask)
   2206a:	b935      	cbnz	r5, 2207a <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2206c:	4b13      	ldr	r3, [pc, #76]	; (220bc <nrfx_ipc_irq_handler+0x68>)
   2206e:	4630      	mov	r0, r6
}
   22070:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   22074:	681a      	ldr	r2, [r3, #0]
   22076:	6899      	ldr	r1, [r3, #8]
   22078:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   2207a:	fa95 f4a5 	rbit	r4, r5
   2207e:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   22082:	fa08 f304 	lsl.w	r3, r8, r4
   22086:	2c07      	cmp	r4, #7
   22088:	ea25 0503 	bic.w	r5, r5, r3
   2208c:	dd0a      	ble.n	220a4 <nrfx_ipc_irq_handler+0x50>
   2208e:	4639      	mov	r1, r7
   22090:	4648      	mov	r0, r9
   22092:	f240 12e7 	movw	r2, #487	; 0x1e7
   22096:	f009 fb89 	bl	2b7ac <printk>
   2209a:	f240 11e7 	movw	r1, #487	; 0x1e7
   2209e:	4638      	mov	r0, r7
   220a0:	f009 fd1b 	bl	2bada <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220a4:	2200      	movs	r2, #0
   220a6:	4b06      	ldr	r3, [pc, #24]	; (220c0 <nrfx_ipc_irq_handler+0x6c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   220a8:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220aa:	511a      	str	r2, [r3, r4]
}
   220ac:	e7dd      	b.n	2206a <nrfx_ipc_irq_handler+0x16>
   220ae:	bf00      	nop
   220b0:	4002a000 	.word	0x4002a000
   220b4:	000315d7 	.word	0x000315d7
   220b8:	0002f296 	.word	0x0002f296
   220bc:	2000d0fc 	.word	0x2000d0fc
   220c0:	4002a100 	.word	0x4002a100

000220c4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   220c4:	6803      	ldr	r3, [r0, #0]
{
   220c6:	b510      	push	{r4, lr}
    switch (port)
   220c8:	095a      	lsrs	r2, r3, #5
   220ca:	bf0c      	ite	eq
   220cc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   220d0:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   220d2:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   220d6:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   220da:	07db      	lsls	r3, r3, #31
{
   220dc:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   220de:	d40a      	bmi.n	220f6 <nrf_gpio_pin_port_decode+0x32>
   220e0:	490e      	ldr	r1, [pc, #56]	; (2211c <nrf_gpio_pin_port_decode+0x58>)
   220e2:	480f      	ldr	r0, [pc, #60]	; (22120 <nrf_gpio_pin_port_decode+0x5c>)
   220e4:	f240 2229 	movw	r2, #553	; 0x229
   220e8:	f009 fb60 	bl	2b7ac <printk>
   220ec:	f240 2129 	movw	r1, #553	; 0x229
   220f0:	480a      	ldr	r0, [pc, #40]	; (2211c <nrf_gpio_pin_port_decode+0x58>)
   220f2:	f009 fcf2 	bl	2bada <assert_post_action>
    uint32_t pin_number = *p_pin;
   220f6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   220f8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   220fc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   220fe:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22100:	d00a      	beq.n	22118 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   22102:	4906      	ldr	r1, [pc, #24]	; (2211c <nrf_gpio_pin_port_decode+0x58>)
   22104:	4806      	ldr	r0, [pc, #24]	; (22120 <nrf_gpio_pin_port_decode+0x5c>)
   22106:	f240 222e 	movw	r2, #558	; 0x22e
   2210a:	f009 fb4f 	bl	2b7ac <printk>
   2210e:	f240 212e 	movw	r1, #558	; 0x22e
   22112:	4802      	ldr	r0, [pc, #8]	; (2211c <nrf_gpio_pin_port_decode+0x58>)
   22114:	f009 fce1 	bl	2bada <assert_post_action>
}
   22118:	4802      	ldr	r0, [pc, #8]	; (22124 <nrf_gpio_pin_port_decode+0x60>)
   2211a:	bd10      	pop	{r4, pc}
   2211c:	0002fc68 	.word	0x0002fc68
   22120:	0002f296 	.word	0x0002f296
   22124:	40842500 	.word	0x40842500

00022128 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   22128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2212c:	4606      	mov	r6, r0
   2212e:	4691      	mov	r9, r2
   22130:	469a      	mov	sl, r3
    NRFX_ASSERT(p_config);
   22132:	460c      	mov	r4, r1
   22134:	b951      	cbnz	r1, 2214c <nrfx_spim_init+0x24>
   22136:	495b      	ldr	r1, [pc, #364]	; (222a4 <nrfx_spim_init+0x17c>)
   22138:	485b      	ldr	r0, [pc, #364]	; (222a8 <nrfx_spim_init+0x180>)
   2213a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
   2213e:	f009 fb35 	bl	2b7ac <printk>
   22142:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   22146:	4857      	ldr	r0, [pc, #348]	; (222a4 <nrfx_spim_init+0x17c>)
   22148:	f009 fcc7 	bl	2bada <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2214c:	7931      	ldrb	r1, [r6, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2214e:	4d57      	ldr	r5, [pc, #348]	; (222ac <nrfx_spim_init+0x184>)
   22150:	014f      	lsls	r7, r1, #5
   22152:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   22156:	7f0b      	ldrb	r3, [r1, #28]
   22158:	2b00      	cmp	r3, #0
   2215a:	f040 80a0 	bne.w	2229e <nrfx_spim_init+0x176>
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2215e:	7be2      	ldrb	r2, [r4, #15]
   22160:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   22162:	7920      	ldrb	r0, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   22164:	f362 0300 	bfi	r3, r2, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
   22168:	f360 0341 	bfi	r3, r0, #1, #1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2216c:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   22170:	f845 9007 	str.w	r9, [r5, r7]
    p_cb->p_context = p_context;
   22174:	f8c1 a004 	str.w	sl, [r1, #4]
    p_cb->ss_active_high = p_config->ss_active_high;
   22178:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
   2217a:	78e3      	ldrb	r3, [r4, #3]
   2217c:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
   2217e:	f8d6 9000 	ldr.w	r9, [r6]
    if (!p_config->skip_gpio_cfg)
   22182:	2a00      	cmp	r2, #0
   22184:	d148      	bne.n	22218 <nrfx_spim_init+0xf0>
        nrf_gpio_pin_write(p_config->sck_pin,
   22186:	7b21      	ldrb	r1, [r4, #12]
   22188:	7820      	ldrb	r0, [r4, #0]
   2218a:	2901      	cmp	r1, #1
   2218c:	bf94      	ite	ls
   2218e:	2100      	movls	r1, #0
   22190:	2101      	movhi	r1, #1
   22192:	f00a fb7a 	bl	2c88a <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   22196:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22198:	a801      	add	r0, sp, #4
   2219a:	9301      	str	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = cnf;
   2219c:	f04f 0a01 	mov.w	sl, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221a0:	f7ff ff90 	bl	220c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221a4:	9b01      	ldr	r3, [sp, #4]
   221a6:	3380      	adds	r3, #128	; 0x80
   221a8:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   221ac:	7863      	ldrb	r3, [r4, #1]
   221ae:	2bff      	cmp	r3, #255	; 0xff
   221b0:	d011      	beq.n	221d6 <nrfx_spim_init+0xae>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221b2:	a801      	add	r0, sp, #4
            nrf_gpio_pin_write(p_config->mosi_pin, 0);
   221b4:	9301      	str	r3, [sp, #4]
   221b6:	f7ff ff85 	bl	220c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   221ba:	9b01      	ldr	r3, [sp, #4]
   221bc:	fa0a f303 	lsl.w	r3, sl, r3
    p_reg->OUTCLR = clr_mask;
   221c0:	60c3      	str	r3, [r0, #12]
            nrf_gpio_cfg(p_config->mosi_pin,
   221c2:	7863      	ldrb	r3, [r4, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221c4:	a801      	add	r0, sp, #4
   221c6:	9301      	str	r3, [sp, #4]
   221c8:	f7ff ff7c 	bl	220c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221cc:	2203      	movs	r2, #3
   221ce:	9b01      	ldr	r3, [sp, #4]
   221d0:	3380      	adds	r3, #128	; 0x80
   221d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   221d6:	78a3      	ldrb	r3, [r4, #2]
   221d8:	2bff      	cmp	r3, #255	; 0xff
   221da:	d00b      	beq.n	221f4 <nrfx_spim_init+0xcc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221dc:	a801      	add	r0, sp, #4
            nrf_gpio_cfg(p_config->miso_pin,
   221de:	f894 a00e 	ldrb.w	sl, [r4, #14]
   221e2:	9301      	str	r3, [sp, #4]
   221e4:	f7ff ff6e 	bl	220c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221e8:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   221ea:	ea4f 028a 	mov.w	r2, sl, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   221ee:	3380      	adds	r3, #128	; 0x80
   221f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   221f4:	78e0      	ldrb	r0, [r4, #3]
   221f6:	28ff      	cmp	r0, #255	; 0xff
   221f8:	d00e      	beq.n	22218 <nrfx_spim_init+0xf0>
                               p_config->ss_active_high ? 0 : 1);
   221fa:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   221fc:	f081 0101 	eor.w	r1, r1, #1
   22200:	f00a fb43 	bl	2c88a <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   22204:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22206:	a801      	add	r0, sp, #4
   22208:	9301      	str	r3, [sp, #4]
   2220a:	f7ff ff5b 	bl	220c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2220e:	2203      	movs	r2, #3
   22210:	9b01      	ldr	r3, [sp, #4]
   22212:	3380      	adds	r3, #128	; 0x80
   22214:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22218:	7c23      	ldrb	r3, [r4, #16]
   2221a:	b993      	cbnz	r3, 22242 <nrfx_spim_init+0x11a>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2221c:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2221e:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22220:	2bff      	cmp	r3, #255	; 0xff
   22222:	bf18      	it	ne
   22224:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   22226:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   22228:	bf08      	it	eq
   2222a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   2222e:	2bff      	cmp	r3, #255	; 0xff
   22230:	bf08      	it	eq
   22232:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   22236:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   2223a:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2223e:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   22242:	68a3      	ldr	r3, [r4, #8]
   22244:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   22248:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2224a:	7b22      	ldrb	r2, [r4, #12]
   2224c:	3b00      	subs	r3, #0
   2224e:	bf18      	it	ne
   22250:	2301      	movne	r3, #1
    switch (spi_mode)
   22252:	2a02      	cmp	r2, #2
   22254:	d01d      	beq.n	22292 <nrfx_spim_init+0x16a>
   22256:	2a03      	cmp	r2, #3
   22258:	d01e      	beq.n	22298 <nrfx_spim_init+0x170>
   2225a:	2a01      	cmp	r2, #1
   2225c:	d101      	bne.n	22262 <nrfx_spim_init+0x13a>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2225e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   22262:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   22266:	79a3      	ldrb	r3, [r4, #6]
   22268:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2226c:	2307      	movs	r3, #7
   2226e:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   22272:	59eb      	ldr	r3, [r5, r7]
   22274:	b123      	cbz	r3, 22280 <nrfx_spim_init+0x158>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   22276:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   22278:	f340 3007 	sbfx	r0, r0, #12, #8
   2227c:	f7f9 ff9a 	bl	1c1b4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   22280:	2300      	movs	r3, #0
   22282:	443d      	add	r5, r7
   22284:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22286:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22288:	4809      	ldr	r0, [pc, #36]	; (222b0 <nrfx_spim_init+0x188>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2228a:	772b      	strb	r3, [r5, #28]
}
   2228c:	b002      	add	sp, #8
   2228e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   22292:	f043 0304 	orr.w	r3, r3, #4
        break;
   22296:	e7e4      	b.n	22262 <nrfx_spim_init+0x13a>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   22298:	f043 0306 	orr.w	r3, r3, #6
        break;
   2229c:	e7e1      	b.n	22262 <nrfx_spim_init+0x13a>
        return err_code;
   2229e:	4805      	ldr	r0, [pc, #20]	; (222b4 <nrfx_spim_init+0x18c>)
   222a0:	e7f4      	b.n	2228c <nrfx_spim_init+0x164>
   222a2:	bf00      	nop
   222a4:	00031609 	.word	0x00031609
   222a8:	0002f296 	.word	0x0002f296
   222ac:	2000d108 	.word	0x2000d108
   222b0:	0bad0000 	.word	0x0bad0000
   222b4:	0bad0005 	.word	0x0bad0005

000222b8 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   222ba:	4c28      	ldr	r4, [pc, #160]	; (2235c <nrfx_spim_uninit+0xa4>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   222bc:	7903      	ldrb	r3, [r0, #4]
{
   222be:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   222c0:	015e      	lsls	r6, r3, #5
   222c2:	eb04 1343 	add.w	r3, r4, r3, lsl #5
   222c6:	7f1b      	ldrb	r3, [r3, #28]
   222c8:	b953      	cbnz	r3, 222e0 <nrfx_spim_uninit+0x28>
   222ca:	4925      	ldr	r1, [pc, #148]	; (22360 <nrfx_spim_uninit+0xa8>)
   222cc:	4825      	ldr	r0, [pc, #148]	; (22364 <nrfx_spim_uninit+0xac>)
   222ce:	f240 220f 	movw	r2, #527	; 0x20f
   222d2:	f009 fa6b 	bl	2b7ac <printk>
   222d6:	f240 210f 	movw	r1, #527	; 0x20f
   222da:	4821      	ldr	r0, [pc, #132]	; (22360 <nrfx_spim_uninit+0xa8>)
   222dc:	f009 fbfd 	bl	2bada <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   222e0:	59a3      	ldr	r3, [r4, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   222e2:	682d      	ldr	r5, [r5, #0]
    if (p_cb->handler)
   222e4:	19a7      	adds	r7, r4, r6
   222e6:	b1b3      	cbz	r3, 22316 <nrfx_spim_uninit+0x5e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   222e8:	f345 3007 	sbfx	r0, r5, #12, #8
   222ec:	f7f9 ff72 	bl	1c1d4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   222f0:	4b1d      	ldr	r3, [pc, #116]	; (22368 <nrfx_spim_uninit+0xb0>)
   222f2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   222f6:	7f7b      	ldrb	r3, [r7, #29]
   222f8:	b16b      	cbz	r3, 22316 <nrfx_spim_uninit+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   222fa:	2301      	movs	r3, #1
   222fc:	2764      	movs	r7, #100	; 0x64
   222fe:	616b      	str	r3, [r5, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22300:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   22304:	b923      	cbnz	r3, 22310 <nrfx_spim_uninit+0x58>
   22306:	2001      	movs	r0, #1
   22308:	f00a fa48 	bl	2c79c <nrfx_busy_wait>
   2230c:	3f01      	subs	r7, #1
   2230e:	d1f7      	bne.n	22300 <nrfx_spim_uninit+0x48>
    p_cb->transfer_in_progress = false;
   22310:	2200      	movs	r2, #0
   22312:	19a3      	adds	r3, r4, r6
   22314:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   22316:	2300      	movs	r3, #0
   22318:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   2231c:	19a3      	adds	r3, r4, r6
   2231e:	7f9b      	ldrb	r3, [r3, #30]
   22320:	07d8      	lsls	r0, r3, #31
   22322:	d417      	bmi.n	22354 <nrfx_spim_uninit+0x9c>
    return p_reg->PSEL.SCK;
   22324:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   22328:	1c41      	adds	r1, r0, #1
   2232a:	d001      	beq.n	22330 <nrfx_spim_uninit+0x78>
    nrf_gpio_cfg_default(pin);
   2232c:	f00a facd 	bl	2c8ca <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   22330:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   22334:	1c42      	adds	r2, r0, #1
   22336:	d001      	beq.n	2233c <nrfx_spim_uninit+0x84>
    nrf_gpio_cfg_default(pin);
   22338:	f00a fac7 	bl	2c8ca <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   2233c:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   22340:	1c43      	adds	r3, r0, #1
   22342:	d001      	beq.n	22348 <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg_default(pin);
   22344:	f00a fac1 	bl	2c8ca <nrf_gpio_cfg_default>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22348:	19a3      	adds	r3, r4, r6
   2234a:	7fd8      	ldrb	r0, [r3, #31]
   2234c:	28ff      	cmp	r0, #255	; 0xff
   2234e:	d001      	beq.n	22354 <nrfx_spim_uninit+0x9c>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   22350:	f00a fabb 	bl	2c8ca <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   22354:	2300      	movs	r3, #0
   22356:	4434      	add	r4, r6
   22358:	7723      	strb	r3, [r4, #28]
}
   2235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2235c:	2000d108 	.word	0x2000d108
   22360:	00031609 	.word	0x00031609
   22364:	0002f296 	.word	0x0002f296
   22368:	00080152 	.word	0x00080152

0002236c <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22370:	4f61      	ldr	r7, [pc, #388]	; (224f8 <nrfx_spim_xfer+0x18c>)
   22372:	7903      	ldrb	r3, [r0, #4]
{
   22374:	4680      	mov	r8, r0
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22376:	eb07 1943 	add.w	r9, r7, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2237a:	015e      	lsls	r6, r3, #5
   2237c:	f899 301c 	ldrb.w	r3, [r9, #28]
{
   22380:	460c      	mov	r4, r1
   22382:	4615      	mov	r5, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22384:	b953      	cbnz	r3, 2239c <nrfx_spim_xfer+0x30>
   22386:	495d      	ldr	r1, [pc, #372]	; (224fc <nrfx_spim_xfer+0x190>)
   22388:	485d      	ldr	r0, [pc, #372]	; (22500 <nrfx_spim_xfer+0x194>)
   2238a:	f240 22de 	movw	r2, #734	; 0x2de
   2238e:	f009 fa0d 	bl	2b7ac <printk>
   22392:	f240 21de 	movw	r1, #734	; 0x2de
   22396:	4859      	ldr	r0, [pc, #356]	; (224fc <nrfx_spim_xfer+0x190>)
   22398:	f009 fb9f 	bl	2bada <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2239c:	6823      	ldr	r3, [r4, #0]
   2239e:	b963      	cbnz	r3, 223ba <nrfx_spim_xfer+0x4e>
   223a0:	6863      	ldr	r3, [r4, #4]
   223a2:	b153      	cbz	r3, 223ba <nrfx_spim_xfer+0x4e>
   223a4:	4955      	ldr	r1, [pc, #340]	; (224fc <nrfx_spim_xfer+0x190>)
   223a6:	4856      	ldr	r0, [pc, #344]	; (22500 <nrfx_spim_xfer+0x194>)
   223a8:	f240 22df 	movw	r2, #735	; 0x2df
   223ac:	f009 f9fe 	bl	2b7ac <printk>
   223b0:	f240 21df 	movw	r1, #735	; 0x2df
   223b4:	4851      	ldr	r0, [pc, #324]	; (224fc <nrfx_spim_xfer+0x190>)
   223b6:	f009 fb90 	bl	2bada <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   223ba:	68a3      	ldr	r3, [r4, #8]
   223bc:	b963      	cbnz	r3, 223d8 <nrfx_spim_xfer+0x6c>
   223be:	68e3      	ldr	r3, [r4, #12]
   223c0:	b153      	cbz	r3, 223d8 <nrfx_spim_xfer+0x6c>
   223c2:	494e      	ldr	r1, [pc, #312]	; (224fc <nrfx_spim_xfer+0x190>)
   223c4:	484e      	ldr	r0, [pc, #312]	; (22500 <nrfx_spim_xfer+0x194>)
   223c6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
   223ca:	f009 f9ef 	bl	2b7ac <printk>
   223ce:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   223d2:	484a      	ldr	r0, [pc, #296]	; (224fc <nrfx_spim_xfer+0x190>)
   223d4:	f009 fb81 	bl	2bada <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   223d8:	f898 3004 	ldrb.w	r3, [r8, #4]
   223dc:	b93b      	cbnz	r3, 223ee <nrfx_spim_xfer+0x82>
   223de:	68e3      	ldr	r3, [r4, #12]
   223e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   223e4:	d203      	bcs.n	223ee <nrfx_spim_xfer+0x82>
   223e6:	6863      	ldr	r3, [r4, #4]
   223e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   223ec:	d30a      	bcc.n	22404 <nrfx_spim_xfer+0x98>
   223ee:	4943      	ldr	r1, [pc, #268]	; (224fc <nrfx_spim_xfer+0x190>)
   223f0:	4843      	ldr	r0, [pc, #268]	; (22500 <nrfx_spim_xfer+0x194>)
   223f2:	f240 22e1 	movw	r2, #737	; 0x2e1
   223f6:	f009 f9d9 	bl	2b7ac <printk>
   223fa:	f240 21e1 	movw	r1, #737	; 0x2e1
   223fe:	483f      	ldr	r0, [pc, #252]	; (224fc <nrfx_spim_xfer+0x190>)
   22400:	f009 fb6b 	bl	2bada <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   22404:	f015 0a08 	ands.w	sl, r5, #8
   22408:	d00e      	beq.n	22428 <nrfx_spim_xfer+0xbc>
   2240a:	19bb      	adds	r3, r7, r6
   2240c:	7fdb      	ldrb	r3, [r3, #31]
   2240e:	2bff      	cmp	r3, #255	; 0xff
   22410:	d00a      	beq.n	22428 <nrfx_spim_xfer+0xbc>
   22412:	493a      	ldr	r1, [pc, #232]	; (224fc <nrfx_spim_xfer+0x190>)
   22414:	483a      	ldr	r0, [pc, #232]	; (22500 <nrfx_spim_xfer+0x194>)
   22416:	f44f 7239 	mov.w	r2, #740	; 0x2e4
   2241a:	f009 f9c7 	bl	2b7ac <printk>
   2241e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   22422:	4836      	ldr	r0, [pc, #216]	; (224fc <nrfx_spim_xfer+0x190>)
   22424:	f009 fb59 	bl	2bada <assert_post_action>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   22428:	19bb      	adds	r3, r7, r6
   2242a:	7f5a      	ldrb	r2, [r3, #29]
   2242c:	2a00      	cmp	r2, #0
   2242e:	d160      	bne.n	224f2 <nrfx_spim_xfer+0x186>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   22430:	59ba      	ldr	r2, [r7, r6]
   22432:	b122      	cbz	r2, 2243e <nrfx_spim_xfer+0xd2>
   22434:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   22438:	bf04      	itt	eq
   2243a:	2201      	moveq	r2, #1
   2243c:	775a      	strbeq	r2, [r3, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2243e:	eb07 0c06 	add.w	ip, r7, r6
   22442:	f10c 0c0c 	add.w	ip, ip, #12
   22446:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2244a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   2244e:	2101      	movs	r1, #1
   22450:	4648      	mov	r0, r9
   22452:	f00a fa2e 	bl	2c8b2 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   22456:	6821      	ldr	r1, [r4, #0]
   22458:	b121      	cbz	r1, 22464 <nrfx_spim_xfer+0xf8>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2245a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   2245e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22462:	d106      	bne.n	22472 <nrfx_spim_xfer+0x106>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   22464:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   22466:	b152      	cbz	r2, 2247e <nrfx_spim_xfer+0x112>
   22468:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2246c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22470:	d005      	beq.n	2247e <nrfx_spim_xfer+0x112>
        p_cb->transfer_in_progress = false;
   22472:	2300      	movs	r3, #0
   22474:	443e      	add	r6, r7
        return err_code;
   22476:	4823      	ldr	r0, [pc, #140]	; (22504 <nrfx_spim_xfer+0x198>)
        p_cb->transfer_in_progress = false;
   22478:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   2247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2247e:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   22482:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22484:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22488:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2248c:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2248e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22492:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   22494:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22498:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2249c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   224a0:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   224a4:	bf18      	it	ne
   224a6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   224a8:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   224ac:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   224b0:	bf18      	it	ne
   224b2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   224b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   224b8:	f1ba 0f00 	cmp.w	sl, #0
   224bc:	d101      	bne.n	224c2 <nrfx_spim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224be:	2201      	movs	r2, #1
   224c0:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   224c2:	59ba      	ldr	r2, [r7, r6]
   224c4:	b962      	cbnz	r2, 224e0 <nrfx_spim_xfer+0x174>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   224c6:	f1ba 0f00 	cmp.w	sl, #0
   224ca:	d103      	bne.n	224d4 <nrfx_spim_xfer+0x168>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224cc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   224d0:	2a00      	cmp	r2, #0
   224d2:	d0fb      	beq.n	224cc <nrfx_spim_xfer+0x160>
        set_ss_pin_state(p_cb, false);
   224d4:	2100      	movs	r1, #0
   224d6:	4648      	mov	r0, r9
   224d8:	f00a f9eb 	bl	2c8b2 <set_ss_pin_state>
    return err_code;
   224dc:	480a      	ldr	r0, [pc, #40]	; (22508 <nrfx_spim_xfer+0x19c>)
}
   224de:	e7cc      	b.n	2247a <nrfx_spim_xfer+0x10e>
    if (!enable)
   224e0:	2240      	movs	r2, #64	; 0x40
   224e2:	f015 0f04 	tst.w	r5, #4
    p_reg->INTENCLR = mask;
   224e6:	bf14      	ite	ne
   224e8:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   224ec:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   224f0:	e7f4      	b.n	224dc <nrfx_spim_xfer+0x170>
        return err_code;
   224f2:	4806      	ldr	r0, [pc, #24]	; (2250c <nrfx_spim_xfer+0x1a0>)
   224f4:	e7c1      	b.n	2247a <nrfx_spim_xfer+0x10e>
   224f6:	bf00      	nop
   224f8:	2000d108 	.word	0x2000d108
   224fc:	00031609 	.word	0x00031609
   22500:	0002f296 	.word	0x0002f296
   22504:	0bad000a 	.word	0x0bad000a
   22508:	0bad0000 	.word	0x0bad0000
   2250c:	0bad000b 	.word	0x0bad000b

00022510 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22510:	4b12      	ldr	r3, [pc, #72]	; (2255c <nrfx_spim_3_irq_handler+0x4c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   22512:	b510      	push	{r4, lr}
   22514:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22518:	b1fa      	cbz	r2, 2255a <nrfx_spim_3_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2251a:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   2251c:	4c10      	ldr	r4, [pc, #64]	; (22560 <nrfx_spim_3_irq_handler+0x50>)
   2251e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   22522:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   22526:	6823      	ldr	r3, [r4, #0]
   22528:	b953      	cbnz	r3, 22540 <nrfx_spim_3_irq_handler+0x30>
   2252a:	490e      	ldr	r1, [pc, #56]	; (22564 <nrfx_spim_3_irq_handler+0x54>)
   2252c:	480e      	ldr	r0, [pc, #56]	; (22568 <nrfx_spim_3_irq_handler+0x58>)
   2252e:	f240 323b 	movw	r2, #827	; 0x33b
   22532:	f009 f93b 	bl	2b7ac <printk>
   22536:	f240 313b 	movw	r1, #827	; 0x33b
   2253a:	480a      	ldr	r0, [pc, #40]	; (22564 <nrfx_spim_3_irq_handler+0x54>)
   2253c:	f009 facd 	bl	2bada <assert_post_action>
    set_ss_pin_state(p_cb, false);
   22540:	2100      	movs	r1, #0
   22542:	4807      	ldr	r0, [pc, #28]	; (22560 <nrfx_spim_3_irq_handler+0x50>)
   22544:	f00a f9b5 	bl	2c8b2 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   22548:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2254a:	4808      	ldr	r0, [pc, #32]	; (2256c <nrfx_spim_3_irq_handler+0x5c>)
    p_cb->transfer_in_progress = false;
   2254c:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   2254e:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22550:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   22554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22558:	4718      	bx	r3
}
   2255a:	bd10      	pop	{r4, pc}
   2255c:	4000b000 	.word	0x4000b000
   22560:	2000d108 	.word	0x2000d108
   22564:	00031609 	.word	0x00031609
   22568:	0002f296 	.word	0x0002f296
   2256c:	2000d110 	.word	0x2000d110

00022570 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22570:	6803      	ldr	r3, [r0, #0]
{
   22572:	b510      	push	{r4, lr}
    switch (port)
   22574:	095a      	lsrs	r2, r3, #5
   22576:	bf0c      	ite	eq
   22578:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2257c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2257e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22582:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22586:	07db      	lsls	r3, r3, #31
{
   22588:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2258a:	d40a      	bmi.n	225a2 <nrf_gpio_pin_port_decode+0x32>
   2258c:	490e      	ldr	r1, [pc, #56]	; (225c8 <nrf_gpio_pin_port_decode+0x58>)
   2258e:	480f      	ldr	r0, [pc, #60]	; (225cc <nrf_gpio_pin_port_decode+0x5c>)
   22590:	f240 2229 	movw	r2, #553	; 0x229
   22594:	f009 f90a 	bl	2b7ac <printk>
   22598:	f240 2129 	movw	r1, #553	; 0x229
   2259c:	480a      	ldr	r0, [pc, #40]	; (225c8 <nrf_gpio_pin_port_decode+0x58>)
   2259e:	f009 fa9c 	bl	2bada <assert_post_action>
    uint32_t pin_number = *p_pin;
   225a2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   225a4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   225a8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   225aa:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   225ac:	d00a      	beq.n	225c4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   225ae:	4906      	ldr	r1, [pc, #24]	; (225c8 <nrf_gpio_pin_port_decode+0x58>)
   225b0:	4806      	ldr	r0, [pc, #24]	; (225cc <nrf_gpio_pin_port_decode+0x5c>)
   225b2:	f240 222e 	movw	r2, #558	; 0x22e
   225b6:	f009 f8f9 	bl	2b7ac <printk>
   225ba:	f240 212e 	movw	r1, #558	; 0x22e
   225be:	4802      	ldr	r0, [pc, #8]	; (225c8 <nrf_gpio_pin_port_decode+0x58>)
   225c0:	f009 fa8b 	bl	2bada <assert_post_action>
}
   225c4:	4802      	ldr	r0, [pc, #8]	; (225d0 <nrf_gpio_pin_port_decode+0x60>)
   225c6:	bd10      	pop	{r4, pc}
   225c8:	0002fc68 	.word	0x0002fc68
   225cc:	0002f296 	.word	0x0002f296
   225d0:	40842500 	.word	0x40842500

000225d4 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   225d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225d8:	4606      	mov	r6, r0
   225da:	4690      	mov	r8, r2
   225dc:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   225de:	460c      	mov	r4, r1
   225e0:	b951      	cbnz	r1, 225f8 <nrfx_twim_init+0x24>
   225e2:	492f      	ldr	r1, [pc, #188]	; (226a0 <nrfx_twim_init+0xcc>)
   225e4:	482f      	ldr	r0, [pc, #188]	; (226a4 <nrfx_twim_init+0xd0>)
   225e6:	f240 1215 	movw	r2, #277	; 0x115
   225ea:	f009 f8df 	bl	2b7ac <printk>
   225ee:	f240 1115 	movw	r1, #277	; 0x115
   225f2:	482b      	ldr	r0, [pc, #172]	; (226a0 <nrfx_twim_init+0xcc>)
   225f4:	f009 fa71 	bl	2bada <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   225f8:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   225fa:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   225fe:	4d2a      	ldr	r5, [pc, #168]	; (226a8 <nrfx_twim_init+0xd4>)
   22600:	fb07 f70a 	mul.w	r7, r7, sl
   22604:	19e9      	adds	r1, r5, r7
   22606:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   2260a:	2800      	cmp	r0, #0
   2260c:	d145      	bne.n	2269a <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2260e:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22610:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   22614:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   22618:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   2261a:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   2261c:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
   22620:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   22624:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   22628:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   2262c:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   22630:	b1f3      	cbz	r3, 22670 <nrfx_twim_init+0x9c>
   22632:	7be3      	ldrb	r3, [r4, #15]
   22634:	b92b      	cbnz	r3, 22642 <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   22636:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   2263a:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2263e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   22642:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   22644:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
   22648:	2334      	movs	r3, #52	; 0x34
   2264a:	fb03 f30a 	mul.w	r3, r3, sl
   2264e:	58eb      	ldr	r3, [r5, r3]
   22650:	b123      	cbz	r3, 2265c <nrfx_twim_init+0x88>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   22652:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   22654:	f340 3007 	sbfx	r0, r0, #12, #8
   22658:	f7f9 fdac 	bl	1c1b4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2265c:	2334      	movs	r3, #52	; 0x34
   2265e:	fb03 550a 	mla	r5, r3, sl, r5
   22662:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22664:	4811      	ldr	r0, [pc, #68]	; (226ac <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22666:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   2266a:	b003      	add	sp, #12
   2266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   22670:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22672:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   22674:	f240 670c 	movw	r7, #1548	; 0x60c
   22678:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2267a:	f7ff ff79 	bl	22570 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2267e:	9b01      	ldr	r3, [sp, #4]
   22680:	3380      	adds	r3, #128	; 0x80
   22682:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   22686:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22688:	a801      	add	r0, sp, #4
   2268a:	9301      	str	r3, [sp, #4]
   2268c:	f7ff ff70 	bl	22570 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22690:	9b01      	ldr	r3, [sp, #4]
   22692:	3380      	adds	r3, #128	; 0x80
   22694:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   22698:	e7cb      	b.n	22632 <nrfx_twim_init+0x5e>
        return err_code;
   2269a:	4805      	ldr	r0, [pc, #20]	; (226b0 <nrfx_twim_init+0xdc>)
   2269c:	e7e5      	b.n	2266a <nrfx_twim_init+0x96>
   2269e:	bf00      	nop
   226a0:	00031645 	.word	0x00031645
   226a4:	0002f296 	.word	0x0002f296
   226a8:	2000d128 	.word	0x2000d128
   226ac:	0bad0000 	.word	0x0bad0000
   226b0:	0bad0005 	.word	0x0bad0005

000226b4 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   226b4:	2334      	movs	r3, #52	; 0x34
{
   226b6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   226b8:	4c0f      	ldr	r4, [pc, #60]	; (226f8 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   226ba:	7906      	ldrb	r6, [r0, #4]
{
   226bc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   226be:	fb03 4306 	mla	r3, r3, r6, r4
   226c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   226c6:	2b01      	cmp	r3, #1
   226c8:	d00a      	beq.n	226e0 <nrfx_twim_enable+0x2c>
   226ca:	490c      	ldr	r1, [pc, #48]	; (226fc <nrfx_twim_enable+0x48>)
   226cc:	480c      	ldr	r0, [pc, #48]	; (22700 <nrfx_twim_enable+0x4c>)
   226ce:	f240 1279 	movw	r2, #377	; 0x179
   226d2:	f009 f86b 	bl	2b7ac <printk>
   226d6:	f240 1179 	movw	r1, #377	; 0x179
   226da:	4808      	ldr	r0, [pc, #32]	; (226fc <nrfx_twim_enable+0x48>)
   226dc:	f009 f9fd 	bl	2bada <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   226e0:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   226e2:	682b      	ldr	r3, [r5, #0]
   226e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   226e8:	2334      	movs	r3, #52	; 0x34
   226ea:	fb03 4406 	mla	r4, r3, r6, r4
   226ee:	2302      	movs	r3, #2
   226f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   226f4:	bd70      	pop	{r4, r5, r6, pc}
   226f6:	bf00      	nop
   226f8:	2000d128 	.word	0x2000d128
   226fc:	00031645 	.word	0x00031645
   22700:	0002f296 	.word	0x0002f296

00022704 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22704:	2234      	movs	r2, #52	; 0x34
{
   22706:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22708:	4c14      	ldr	r4, [pc, #80]	; (2275c <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2270a:	7906      	ldrb	r6, [r0, #4]
{
   2270c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2270e:	fb02 4206 	mla	r2, r2, r6, r4
   22712:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
   22716:	b953      	cbnz	r3, 2272e <nrfx_twim_disable+0x2a>
   22718:	4911      	ldr	r1, [pc, #68]	; (22760 <nrfx_twim_disable+0x5c>)
   2271a:	4812      	ldr	r0, [pc, #72]	; (22764 <nrfx_twim_disable+0x60>)
   2271c:	f44f 72c2 	mov.w	r2, #388	; 0x184
   22720:	f009 f844 	bl	2b7ac <printk>
   22724:	f44f 71c2 	mov.w	r1, #388	; 0x184
   22728:	480d      	ldr	r0, [pc, #52]	; (22760 <nrfx_twim_disable+0x5c>)
   2272a:	f009 f9d6 	bl	2bada <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   2272e:	2334      	movs	r3, #52	; 0x34
   22730:	2100      	movs	r1, #0
   22732:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22736:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   22738:	480b      	ldr	r0, [pc, #44]	; (22768 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   2273a:	6099      	str	r1, [r3, #8]
   2273c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   22740:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   22744:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   22748:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2274c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22750:	2201      	movs	r2, #1
    p_cb->busy = false;
   22752:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   2275a:	bd70      	pop	{r4, r5, r6, pc}
   2275c:	2000d128 	.word	0x2000d128
   22760:	00031645 	.word	0x00031645
   22764:	0002f296 	.word	0x0002f296
   22768:	019c0202 	.word	0x019c0202

0002276c <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2276c:	2334      	movs	r3, #52	; 0x34
{
   2276e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22770:	4d23      	ldr	r5, [pc, #140]	; (22800 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22772:	7906      	ldrb	r6, [r0, #4]
{
   22774:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   22776:	fb03 5306 	mla	r3, r3, r6, r5
   2277a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   2277e:	b953      	cbnz	r3, 22796 <nrfx_twim_uninit+0x2a>
   22780:	4920      	ldr	r1, [pc, #128]	; (22804 <nrfx_twim_uninit+0x98>)
   22782:	4821      	ldr	r0, [pc, #132]	; (22808 <nrfx_twim_uninit+0x9c>)
   22784:	f44f 72b0 	mov.w	r2, #352	; 0x160
   22788:	f009 f810 	bl	2b7ac <printk>
   2278c:	f44f 71b0 	mov.w	r1, #352	; 0x160
   22790:	481c      	ldr	r0, [pc, #112]	; (22804 <nrfx_twim_uninit+0x98>)
   22792:	f009 f9a2 	bl	2bada <assert_post_action>
    if (p_cb->handler)
   22796:	2334      	movs	r3, #52	; 0x34
   22798:	4373      	muls	r3, r6
   2279a:	58eb      	ldr	r3, [r5, r3]
   2279c:	b123      	cbz	r3, 227a8 <nrfx_twim_uninit+0x3c>
   2279e:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   227a0:	f340 3007 	sbfx	r0, r0, #12, #8
   227a4:	f7f9 fd16 	bl	1c1d4 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   227a8:	4620      	mov	r0, r4
   227aa:	f7ff ffab 	bl	22704 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   227ae:	2334      	movs	r3, #52	; 0x34
   227b0:	fb03 5306 	mla	r3, r3, r6, r5
   227b4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   227b8:	b9ca      	cbnz	r2, 227ee <nrfx_twim_uninit+0x82>
   227ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   227be:	b9b3      	cbnz	r3, 227ee <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   227c0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227c2:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
   227c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   227c8:	2702      	movs	r7, #2
   227ca:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227cc:	f7ff fed0 	bl	22570 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   227d0:	9b01      	ldr	r3, [sp, #4]
   227d2:	3380      	adds	r3, #128	; 0x80
   227d4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
   227d8:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227da:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
   227dc:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
   227e0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   227e2:	f7ff fec5 	bl	22570 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   227e6:	9b01      	ldr	r3, [sp, #4]
   227e8:	3380      	adds	r3, #128	; 0x80
   227ea:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   227ee:	2334      	movs	r3, #52	; 0x34
   227f0:	fb03 5506 	mla	r5, r3, r6, r5
   227f4:	2300      	movs	r3, #0
   227f6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   227fa:	b003      	add	sp, #12
   227fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   227fe:	bf00      	nop
   22800:	2000d128 	.word	0x2000d128
   22804:	00031645 	.word	0x00031645
   22808:	0002f296 	.word	0x0002f296

0002280c <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2280c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   22810:	7903      	ldrb	r3, [r0, #4]
{
   22812:	4604      	mov	r4, r0
   22814:	460d      	mov	r5, r1
   22816:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   22818:	b93b      	cbnz	r3, 2282a <nrfx_twim_xfer+0x1e>
   2281a:	684b      	ldr	r3, [r1, #4]
   2281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22820:	d203      	bcs.n	2282a <nrfx_twim_xfer+0x1e>
   22822:	688b      	ldr	r3, [r1, #8]
   22824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   22828:	d30a      	bcc.n	22840 <nrfx_twim_xfer+0x34>
   2282a:	49ba      	ldr	r1, [pc, #744]	; (22b14 <nrfx_twim_xfer+0x308>)
   2282c:	48ba      	ldr	r0, [pc, #744]	; (22b18 <nrfx_twim_xfer+0x30c>)
   2282e:	f240 2299 	movw	r2, #665	; 0x299
   22832:	f008 ffbb 	bl	2b7ac <printk>
   22836:	f240 2199 	movw	r1, #665	; 0x299
   2283a:	48b6      	ldr	r0, [pc, #728]	; (22b14 <nrfx_twim_xfer+0x308>)
   2283c:	f009 f94d 	bl	2bada <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   22840:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   22842:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   22846:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 22b1c <nrfx_twim_xfer+0x310>
   2284a:	fb07 f709 	mul.w	r7, r7, r9
   2284e:	f858 3007 	ldr.w	r3, [r8, r7]
   22852:	bb03      	cbnz	r3, 22896 <nrfx_twim_xfer+0x8a>
   22854:	782b      	ldrb	r3, [r5, #0]
   22856:	2b02      	cmp	r3, #2
   22858:	d00e      	beq.n	22878 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2285a:	782b      	ldrb	r3, [r5, #0]
   2285c:	2b03      	cmp	r3, #3
   2285e:	d11a      	bne.n	22896 <nrfx_twim_xfer+0x8a>
   22860:	f240 22a2 	movw	r2, #674	; 0x2a2
   22864:	49ab      	ldr	r1, [pc, #684]	; (22b14 <nrfx_twim_xfer+0x308>)
   22866:	48ac      	ldr	r0, [pc, #688]	; (22b18 <nrfx_twim_xfer+0x30c>)
   22868:	f008 ffa0 	bl	2b7ac <printk>
   2286c:	f240 21a2 	movw	r1, #674	; 0x2a2
   22870:	48a8      	ldr	r0, [pc, #672]	; (22b14 <nrfx_twim_xfer+0x308>)
   22872:	f009 f932 	bl	2bada <assert_post_action>
   22876:	e00e      	b.n	22896 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   22878:	f240 22a1 	movw	r2, #673	; 0x2a1
   2287c:	49a5      	ldr	r1, [pc, #660]	; (22b14 <nrfx_twim_xfer+0x308>)
   2287e:	48a6      	ldr	r0, [pc, #664]	; (22b18 <nrfx_twim_xfer+0x30c>)
   22880:	f008 ff94 	bl	2b7ac <printk>
   22884:	f240 21a1 	movw	r1, #673	; 0x2a1
   22888:	48a2      	ldr	r0, [pc, #648]	; (22b14 <nrfx_twim_xfer+0x308>)
   2288a:	f009 f926 	bl	2bada <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2288e:	f858 3007 	ldr.w	r3, [r8, r7]
   22892:	2b00      	cmp	r3, #0
   22894:	d0e1      	beq.n	2285a <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
   22896:	2334      	movs	r3, #52	; 0x34
   22898:	2200      	movs	r2, #0
   2289a:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2289e:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   228a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   228a4:	686b      	ldr	r3, [r5, #4]
   228a6:	b14b      	cbz	r3, 228bc <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   228a8:	68eb      	ldr	r3, [r5, #12]
   228aa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   228ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   228b2:	d003      	beq.n	228bc <nrfx_twim_xfer+0xb0>
        return err_code;
   228b4:	4f9a      	ldr	r7, [pc, #616]	; (22b20 <nrfx_twim_xfer+0x314>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   228b6:	4638      	mov	r0, r7
   228b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   228bc:	2734      	movs	r7, #52	; 0x34
   228be:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   228c2:	4b98      	ldr	r3, [pc, #608]	; (22b24 <nrfx_twim_xfer+0x318>)
   228c4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   228c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   228cc:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   228d0:	b123      	cbz	r3, 228dc <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   228d2:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   228d4:	4f94      	ldr	r7, [pc, #592]	; (22b28 <nrfx_twim_xfer+0x31c>)
    p_reg->INTENSET = mask;
   228d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   228da:	e7ec      	b.n	228b6 <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   228dc:	f016 0f14 	tst.w	r6, #20
   228e0:	bf0c      	ite	eq
   228e2:	2301      	moveq	r3, #1
   228e4:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   228e6:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   228e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   228ec:	f107 0c0c 	add.w	ip, r7, #12
   228f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   228f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   228f8:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   228fc:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   228fe:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   22902:	f3c6 1300 	ubfx	r3, r6, #4, #1
   22906:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   2290a:	786b      	ldrb	r3, [r5, #1]
   2290c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22910:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   22914:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22918:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2291c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   22920:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   22924:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   22928:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2292c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   22930:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   22934:	bf18      	it	ne
   22936:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   22938:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2293c:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   22940:	bf18      	it	ne
   22942:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   22944:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   22948:	782b      	ldrb	r3, [r5, #0]
   2294a:	2b03      	cmp	r3, #3
   2294c:	f200 80df 	bhi.w	22b0e <nrfx_twim_xfer+0x302>
   22950:	e8df f003 	tbb	[pc, r3]
   22954:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   22958:	06f3      	lsls	r3, r6, #27
   2295a:	d50a      	bpl.n	22972 <nrfx_twim_xfer+0x166>
   2295c:	496d      	ldr	r1, [pc, #436]	; (22b14 <nrfx_twim_xfer+0x308>)
   2295e:	486e      	ldr	r0, [pc, #440]	; (22b18 <nrfx_twim_xfer+0x30c>)
   22960:	f240 12dd 	movw	r2, #477	; 0x1dd
   22964:	f008 ff22 	bl	2b7ac <printk>
   22968:	f240 11dd 	movw	r1, #477	; 0x1dd
   2296c:	4869      	ldr	r0, [pc, #420]	; (22b14 <nrfx_twim_xfer+0x308>)
   2296e:	f009 f8b4 	bl	2bada <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   22972:	0737      	lsls	r7, r6, #28
   22974:	d50a      	bpl.n	2298c <nrfx_twim_xfer+0x180>
   22976:	4967      	ldr	r1, [pc, #412]	; (22b14 <nrfx_twim_xfer+0x308>)
   22978:	4867      	ldr	r0, [pc, #412]	; (22b18 <nrfx_twim_xfer+0x30c>)
   2297a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   2297e:	f008 ff15 	bl	2b7ac <printk>
   22982:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   22986:	4863      	ldr	r0, [pc, #396]	; (22b14 <nrfx_twim_xfer+0x308>)
   22988:	f009 f8a7 	bl	2bada <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2298c:	0770      	lsls	r0, r6, #29
   2298e:	d50a      	bpl.n	229a6 <nrfx_twim_xfer+0x19a>
   22990:	4960      	ldr	r1, [pc, #384]	; (22b14 <nrfx_twim_xfer+0x308>)
   22992:	4861      	ldr	r0, [pc, #388]	; (22b18 <nrfx_twim_xfer+0x30c>)
   22994:	f240 12df 	movw	r2, #479	; 0x1df
   22998:	f008 ff08 	bl	2b7ac <printk>
   2299c:	f240 11df 	movw	r1, #479	; 0x1df
   229a0:	485c      	ldr	r0, [pc, #368]	; (22b14 <nrfx_twim_xfer+0x308>)
   229a2:	f009 f89a 	bl	2bada <assert_post_action>
   229a6:	692b      	ldr	r3, [r5, #16]
   229a8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   229ac:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   229b0:	d180      	bne.n	228b4 <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
   229b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   229b6:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   229b8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   229bc:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   229be:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   229c2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229c6:	2200      	movs	r2, #0
   229c8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   229cc:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   229d0:	2101      	movs	r1, #1
   229d2:	6221      	str	r1, [r4, #32]
   229d4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   229d6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   229da:	2900      	cmp	r1, #0
   229dc:	d0fb      	beq.n	229d6 <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229de:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   229e2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   229e6:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   229e8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   229ec:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   229ee:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   229f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   229f6:	fb03 8309 	mla	r3, r3, r9, r8
   229fa:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   229fc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   229fe:	4f4b      	ldr	r7, [pc, #300]	; (22b2c <nrfx_twim_xfer+0x320>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   22a00:	0731      	lsls	r1, r6, #28
   22a02:	d407      	bmi.n	22a14 <nrfx_twim_xfer+0x208>
   22a04:	782a      	ldrb	r2, [r5, #0]
   22a06:	2a03      	cmp	r2, #3
   22a08:	d004      	beq.n	22a14 <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a0a:	2201      	movs	r2, #1
   22a0c:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   22a0e:	686b      	ldr	r3, [r5, #4]
   22a10:	b903      	cbnz	r3, 22a14 <nrfx_twim_xfer+0x208>
   22a12:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   22a14:	2334      	movs	r3, #52	; 0x34
   22a16:	fb03 f309 	mul.w	r3, r3, r9
   22a1a:	f858 2003 	ldr.w	r2, [r8, r3]
   22a1e:	eb08 0103 	add.w	r1, r8, r3
   22a22:	2a00      	cmp	r2, #0
   22a24:	f040 8086 	bne.w	22b34 <nrfx_twim_xfer+0x328>
                transmission_finished = true;
   22a28:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a2a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   22a2e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22a32:	2800      	cmp	r0, #0
   22a34:	f040 8099 	bne.w	22b6a <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   22a38:	3b00      	subs	r3, #0
   22a3a:	bf18      	it	ne
   22a3c:	2301      	movne	r3, #1
   22a3e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22a42:	2800      	cmp	r0, #0
   22a44:	f000 8097 	beq.w	22b76 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a48:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   22a4c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a50:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   22a54:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   22a58:	b115      	cbz	r5, 22a60 <nrfx_twim_xfer+0x254>
   22a5a:	f410 7f00 	tst.w	r0, #512	; 0x200
   22a5e:	d104      	bne.n	22a6a <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a60:	6221      	str	r1, [r4, #32]
   22a62:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22a64:	2d00      	cmp	r5, #0
   22a66:	d0e0      	beq.n	22a2a <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
   22a68:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22a6a:	05c0      	lsls	r0, r0, #23
   22a6c:	f140 8083 	bpl.w	22b76 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a70:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   22a74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   22a78:	e7d7      	b.n	22a2a <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22a7a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22a7c:	68ea      	ldr	r2, [r5, #12]
   22a7e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a82:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22a86:	692b      	ldr	r3, [r5, #16]
   22a88:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22a8c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   22a90:	f47f af10 	bne.w	228b4 <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   22a94:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22a96:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   22a9a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   22a9e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22aa2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22aa6:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22aa8:	2202      	movs	r2, #2
   22aaa:	fb03 8309 	mla	r3, r3, r9, r8
   22aae:	e012      	b.n	22ad6 <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22ab0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22ab2:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   22ab4:	f016 0f20 	tst.w	r6, #32
   22ab8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22abc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22ac0:	f04f 0334 	mov.w	r3, #52	; 0x34
   22ac4:	d00b      	beq.n	22ade <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
   22ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
   22aca:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22ace:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22ad2:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22ad6:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22ad8:	2301      	movs	r3, #1
   22ada:	6223      	str	r3, [r4, #32]
   22adc:	e78e      	b.n	229fc <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
   22ade:	f44f 7200 	mov.w	r2, #512	; 0x200
   22ae2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   22ae6:	e7df      	b.n	22aa8 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22ae8:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22aea:	68ea      	ldr	r2, [r5, #12]
   22aec:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22af0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   22af8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22afc:	2334      	movs	r3, #52	; 0x34
   22afe:	2202      	movs	r2, #2
   22b00:	fb03 8309 	mla	r3, r3, r9, r8
   22b04:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b06:	2301      	movs	r3, #1
   22b08:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   22b0a:	2300      	movs	r3, #0
   22b0c:	e777      	b.n	229fe <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
   22b0e:	2308      	movs	r3, #8
   22b10:	4f07      	ldr	r7, [pc, #28]	; (22b30 <nrfx_twim_xfer+0x324>)
   22b12:	e775      	b.n	22a00 <nrfx_twim_xfer+0x1f4>
   22b14:	00031645 	.word	0x00031645
   22b18:	0002f296 	.word	0x0002f296
   22b1c:	2000d128 	.word	0x2000d128
   22b20:	0bad000a 	.word	0x0bad000a
   22b24:	019c0202 	.word	0x019c0202
   22b28:	0bad000b 	.word	0x0bad000b
   22b2c:	0bad0000 	.word	0x0bad0000
   22b30:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   22b34:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
   22b36:	bf44      	itt	mi
   22b38:	2300      	movmi	r3, #0
   22b3a:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   22b3c:	0673      	lsls	r3, r6, #25
   22b3e:	d406      	bmi.n	22b4e <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   22b40:	2334      	movs	r3, #52	; 0x34
   22b42:	fb03 8309 	mla	r3, r3, r9, r8
   22b46:	689a      	ldr	r2, [r3, #8]
   22b48:	f042 0202 	orr.w	r2, r2, #2
   22b4c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   22b4e:	2334      	movs	r3, #52	; 0x34
   22b50:	fb03 8809 	mla	r8, r3, r9, r8
   22b54:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22b5c:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22b60:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
   22b64:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   22b68:	e6a5      	b.n	228b6 <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22b6a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   22b6e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   22b72:	2301      	movs	r3, #1
   22b74:	e763      	b.n	22a3e <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
   22b76:	2b00      	cmp	r3, #0
   22b78:	f43f af57 	beq.w	22a2a <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
   22b7c:	2134      	movs	r1, #52	; 0x34
   22b7e:	2000      	movs	r0, #0
   22b80:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   22b84:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22b88:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   22b8c:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   22b90:	b18b      	cbz	r3, 22bb6 <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   22b92:	4a0f      	ldr	r2, [pc, #60]	; (22bd0 <nrfx_twim_xfer+0x3c4>)
   22b94:	f013 0f01 	tst.w	r3, #1
   22b98:	4f0e      	ldr	r7, [pc, #56]	; (22bd4 <nrfx_twim_xfer+0x3c8>)
   22b9a:	bf18      	it	ne
   22b9c:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22b9e:	f013 0f02 	tst.w	r3, #2
   22ba2:	f102 0201 	add.w	r2, r2, #1
   22ba6:	bf18      	it	ne
   22ba8:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22baa:	f013 0f04 	tst.w	r3, #4
   22bae:	4b0a      	ldr	r3, [pc, #40]	; (22bd8 <nrfx_twim_xfer+0x3cc>)
   22bb0:	bf18      	it	ne
   22bb2:	461f      	movne	r7, r3
   22bb4:	e67f      	b.n	228b6 <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   22bb6:	0673      	lsls	r3, r6, #25
   22bb8:	f53f ae7d 	bmi.w	228b6 <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
   22bbc:	4620      	mov	r0, r4
   22bbe:	fb09 8101 	mla	r1, r9, r1, r8
   22bc2:	f009 fe8f 	bl	2c8e4 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   22bc6:	4b03      	ldr	r3, [pc, #12]	; (22bd4 <nrfx_twim_xfer+0x3c8>)
   22bc8:	2800      	cmp	r0, #0
   22bca:	bf08      	it	eq
   22bcc:	461f      	moveq	r7, r3
   22bce:	e672      	b.n	228b6 <nrfx_twim_xfer+0xaa>
   22bd0:	0bae0000 	.word	0x0bae0000
   22bd4:	0bad0001 	.word	0x0bad0001
   22bd8:	0bae0002 	.word	0x0bae0002

00022bdc <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   22bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   22bde:	4c61      	ldr	r4, [pc, #388]	; (22d64 <nrfx_twim_2_irq_handler+0x188>)
{
   22be0:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   22be2:	6823      	ldr	r3, [r4, #0]
   22be4:	b953      	cbnz	r3, 22bfc <nrfx_twim_2_irq_handler+0x20>
   22be6:	4960      	ldr	r1, [pc, #384]	; (22d68 <nrfx_twim_2_irq_handler+0x18c>)
   22be8:	4860      	ldr	r0, [pc, #384]	; (22d6c <nrfx_twim_2_irq_handler+0x190>)
   22bea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   22bee:	f008 fddd 	bl	2b7ac <printk>
   22bf2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   22bf6:	485c      	ldr	r0, [pc, #368]	; (22d68 <nrfx_twim_2_irq_handler+0x18c>)
   22bf8:	f008 ff6f 	bl	2bada <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22bfc:	4d5c      	ldr	r5, [pc, #368]	; (22d70 <nrfx_twim_2_irq_handler+0x194>)
   22bfe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22c02:	b1fb      	cbz	r3, 22c44 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c04:	2300      	movs	r3, #0
   22c06:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   22c0a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c0e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22c12:	b9bb      	cbnz	r3, 22c44 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   22c14:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22c16:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22c1a:	2302      	movs	r3, #2
   22c1c:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22c1e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   22c20:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c24:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   22c28:	b11b      	cbz	r3, 22c32 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   22c2a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   22c2e:	059e      	lsls	r6, r3, #22
   22c30:	d403      	bmi.n	22c3a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22c32:	2201      	movs	r2, #1
   22c34:	4b4e      	ldr	r3, [pc, #312]	; (22d70 <nrfx_twim_2_irq_handler+0x194>)
   22c36:	621a      	str	r2, [r3, #32]
   22c38:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   22c3a:	2301      	movs	r3, #1
   22c3c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   22c40:	b007      	add	sp, #28
   22c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c44:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22c48:	2b00      	cmp	r3, #0
   22c4a:	d054      	beq.n	22cf6 <nrfx_twim_2_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c4c:	2300      	movs	r3, #0
   22c4e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   22c52:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   22c56:	6a23      	ldr	r3, [r4, #32]
   22c58:	065d      	lsls	r5, r3, #25
   22c5a:	d40a      	bmi.n	22c72 <nrfx_twim_2_irq_handler+0x96>
   22c5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22c60:	b93b      	cbnz	r3, 22c72 <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   22c62:	4940      	ldr	r1, [pc, #256]	; (22d64 <nrfx_twim_2_irq_handler+0x188>)
   22c64:	4842      	ldr	r0, [pc, #264]	; (22d70 <nrfx_twim_2_irq_handler+0x194>)
   22c66:	f009 fe3d 	bl	2c8e4 <xfer_completeness_check>
   22c6a:	f080 0001 	eor.w	r0, r0, #1
   22c6e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   22c72:	6a23      	ldr	r3, [r4, #32]
   22c74:	f013 0704 	ands.w	r7, r3, #4
   22c78:	d122      	bne.n	22cc0 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   22c7a:	4e3e      	ldr	r6, [pc, #248]	; (22d74 <nrfx_twim_2_irq_handler+0x198>)
   22c7c:	ad01      	add	r5, sp, #4
   22c7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22c82:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
   22c84:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   22c88:	602b      	str	r3, [r5, #0]
   22c8a:	4b39      	ldr	r3, [pc, #228]	; (22d70 <nrfx_twim_2_irq_handler+0x194>)
   22c8c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   22c90:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   22c94:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   22c98:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   22c9c:	f1bc 0f00 	cmp.w	ip, #0
   22ca0:	d002      	beq.n	22ca8 <nrfx_twim_2_irq_handler+0xcc>
   22ca2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   22ca6:	b15a      	cbz	r2, 22cc0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   22ca8:	2200      	movs	r2, #0
   22caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   22cae:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22cb0:	4a31      	ldr	r2, [pc, #196]	; (22d78 <nrfx_twim_2_irq_handler+0x19c>)
   22cb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   22cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22cba:	4b30      	ldr	r3, [pc, #192]	; (22d7c <nrfx_twim_2_irq_handler+0x1a0>)
   22cbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   22cc0:	4a2b      	ldr	r2, [pc, #172]	; (22d70 <nrfx_twim_2_irq_handler+0x194>)
   22cc2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   22cc6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   22cc8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   22ccc:	d53c      	bpl.n	22d48 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   22cce:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   22cd0:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   22cd4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22cd8:	b90b      	cbnz	r3, 22cde <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
   22cda:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   22cde:	6a23      	ldr	r3, [r4, #32]
   22ce0:	075b      	lsls	r3, r3, #29
   22ce2:	d503      	bpl.n	22cec <nrfx_twim_2_irq_handler+0x110>
   22ce4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22ce8:	2b00      	cmp	r3, #0
   22cea:	d0a9      	beq.n	22c40 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   22cec:	e9d4 3100 	ldrd	r3, r1, [r4]
   22cf0:	4668      	mov	r0, sp
   22cf2:	4798      	blx	r3
}
   22cf4:	e7a4      	b.n	22c40 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22cf6:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   22cfa:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   22cfe:	7b23      	ldrb	r3, [r4, #12]
   22d00:	b983      	cbnz	r3, 22d24 <nrfx_twim_2_irq_handler+0x148>
            event.xfer_desc = p_cb->xfer_desc;
   22d02:	4f1c      	ldr	r7, [pc, #112]	; (22d74 <nrfx_twim_2_irq_handler+0x198>)
   22d04:	ae01      	add	r6, sp, #4
   22d06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22d08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22d0a:	683b      	ldr	r3, [r7, #0]
   22d0c:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   22d0e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22d12:	2b00      	cmp	r3, #0
   22d14:	d1d4      	bne.n	22cc0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   22d16:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   22d1a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22d1c:	4b16      	ldr	r3, [pc, #88]	; (22d78 <nrfx_twim_2_irq_handler+0x19c>)
   22d1e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   22d22:	e7c8      	b.n	22cb6 <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   22d24:	f44f 7300 	mov.w	r3, #512	; 0x200
   22d28:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   22d2c:	f240 2302 	movw	r3, #514	; 0x202
   22d30:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22d32:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   22d36:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22d3a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   22d3c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22d40:	2301      	movs	r3, #1
   22d42:	60ab      	str	r3, [r5, #8]
   22d44:	622b      	str	r3, [r5, #32]
            return;
   22d46:	e77b      	b.n	22c40 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   22d48:	0759      	lsls	r1, r3, #29
   22d4a:	d501      	bpl.n	22d50 <nrfx_twim_2_irq_handler+0x174>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   22d4c:	2302      	movs	r3, #2
   22d4e:	e7bf      	b.n	22cd0 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   22d50:	07da      	lsls	r2, r3, #31
   22d52:	d501      	bpl.n	22d58 <nrfx_twim_2_irq_handler+0x17c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   22d54:	2303      	movs	r3, #3
   22d56:	e7bb      	b.n	22cd0 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   22d58:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22d5c:	2b00      	cmp	r3, #0
   22d5e:	d0b7      	beq.n	22cd0 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   22d60:	2304      	movs	r3, #4
   22d62:	e7b5      	b.n	22cd0 <nrfx_twim_2_irq_handler+0xf4>
   22d64:	2000d128 	.word	0x2000d128
   22d68:	00031645 	.word	0x00031645
   22d6c:	0002f296 	.word	0x0002f296
   22d70:	4000a000 	.word	0x4000a000
   22d74:	2000d134 	.word	0x2000d134
   22d78:	019c0202 	.word	0x019c0202
   22d7c:	e000e100 	.word	0xe000e100

00022d80 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d80:	6803      	ldr	r3, [r0, #0]
{
   22d82:	b510      	push	{r4, lr}
    switch (port)
   22d84:	095a      	lsrs	r2, r3, #5
   22d86:	bf0c      	ite	eq
   22d88:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   22d8c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   22d8e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   22d92:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d96:	07db      	lsls	r3, r3, #31
{
   22d98:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d9a:	d40a      	bmi.n	22db2 <nrf_gpio_pin_port_decode+0x32>
   22d9c:	490e      	ldr	r1, [pc, #56]	; (22dd8 <nrf_gpio_pin_port_decode+0x58>)
   22d9e:	480f      	ldr	r0, [pc, #60]	; (22ddc <nrf_gpio_pin_port_decode+0x5c>)
   22da0:	f240 2229 	movw	r2, #553	; 0x229
   22da4:	f008 fd02 	bl	2b7ac <printk>
   22da8:	f240 2129 	movw	r1, #553	; 0x229
   22dac:	480a      	ldr	r0, [pc, #40]	; (22dd8 <nrf_gpio_pin_port_decode+0x58>)
   22dae:	f008 fe94 	bl	2bada <assert_post_action>
    uint32_t pin_number = *p_pin;
   22db2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   22db4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22db8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22dba:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22dbc:	d00a      	beq.n	22dd4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   22dbe:	4906      	ldr	r1, [pc, #24]	; (22dd8 <nrf_gpio_pin_port_decode+0x58>)
   22dc0:	4806      	ldr	r0, [pc, #24]	; (22ddc <nrf_gpio_pin_port_decode+0x5c>)
   22dc2:	f240 222e 	movw	r2, #558	; 0x22e
   22dc6:	f008 fcf1 	bl	2b7ac <printk>
   22dca:	f240 212e 	movw	r1, #558	; 0x22e
   22dce:	4802      	ldr	r0, [pc, #8]	; (22dd8 <nrf_gpio_pin_port_decode+0x58>)
   22dd0:	f008 fe83 	bl	2bada <assert_post_action>
}
   22dd4:	4802      	ldr	r0, [pc, #8]	; (22de0 <nrf_gpio_pin_port_decode+0x60>)
   22dd6:	bd10      	pop	{r4, pc}
   22dd8:	0002fc68 	.word	0x0002fc68
   22ddc:	0002f296 	.word	0x0002f296
   22de0:	40842500 	.word	0x40842500

00022de4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   22de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22de6:	460c      	mov	r4, r1
   22de8:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   22dea:	f009 fdab 	bl	2c944 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   22dee:	4620      	mov	r0, r4
   22df0:	f009 fda8 	bl	2c944 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22df4:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   22df6:	f240 650d 	movw	r5, #1549	; 0x60d
   22dfa:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22dfc:	f7ff ffc0 	bl	22d80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22e00:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22e02:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   22e04:	3380      	adds	r3, #128	; 0x80
   22e06:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e0a:	a801      	add	r0, sp, #4
   22e0c:	9401      	str	r4, [sp, #4]
   22e0e:	f7ff ffb7 	bl	22d80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22e12:	9b01      	ldr	r3, [sp, #4]
   22e14:	3380      	adds	r3, #128	; 0x80
   22e16:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   22e1a:	2004      	movs	r0, #4
   22e1c:	f009 fcbe 	bl	2c79c <nrfx_busy_wait>
   22e20:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e22:	a801      	add	r0, sp, #4
   22e24:	9401      	str	r4, [sp, #4]
   22e26:	f7ff ffab 	bl	22d80 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22e2a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   22e2c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22e2e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   22e30:	07db      	lsls	r3, r3, #31
   22e32:	d414      	bmi.n	22e5e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e34:	a801      	add	r0, sp, #4
   22e36:	9601      	str	r6, [sp, #4]
   22e38:	f7ff ffa2 	bl	22d80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22e3c:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   22e3e:	3d01      	subs	r5, #1
   22e40:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   22e44:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   22e46:	2004      	movs	r0, #4
   22e48:	f009 fca8 	bl	2c79c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   22e4c:	4630      	mov	r0, r6
   22e4e:	f009 fd79 	bl	2c944 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   22e52:	2004      	movs	r0, #4
   22e54:	f009 fca2 	bl	2c79c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   22e58:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   22e5c:	d1e1      	bne.n	22e22 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e5e:	a801      	add	r0, sp, #4
   22e60:	9401      	str	r4, [sp, #4]
   22e62:	f7ff ff8d 	bl	22d80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   22e66:	2301      	movs	r3, #1
   22e68:	9a01      	ldr	r2, [sp, #4]
   22e6a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   22e6c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   22e6e:	2004      	movs	r0, #4
   22e70:	f009 fc94 	bl	2c79c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   22e74:	4620      	mov	r0, r4
   22e76:	f009 fd65 	bl	2c944 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   22e7a:	2004      	movs	r0, #4
   22e7c:	f009 fc8e 	bl	2c79c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e80:	a801      	add	r0, sp, #4
   22e82:	9401      	str	r4, [sp, #4]
   22e84:	f7ff ff7c 	bl	22d80 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22e88:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   22e8a:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   22e8c:	4803      	ldr	r0, [pc, #12]	; (22e9c <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22e8e:	40d3      	lsrs	r3, r2
   22e90:	f003 0301 	and.w	r3, r3, #1
   22e94:	1ac0      	subs	r0, r0, r3
   22e96:	b003      	add	sp, #12
   22e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e9a:	bf00      	nop
   22e9c:	0bad0001 	.word	0x0bad0001

00022ea0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22ea0:	2303      	movs	r3, #3
static void _DoInit(void) {
   22ea2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22ea4:	4c13      	ldr	r4, [pc, #76]	; (22ef4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22ea6:	4a14      	ldr	r2, [pc, #80]	; (22ef8 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22ea8:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22eaa:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22eac:	4b13      	ldr	r3, [pc, #76]	; (22efc <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
   22eae:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22eb0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22eb6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22eb8:	2300      	movs	r3, #0
   22eba:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   22ebc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   22ec0:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22ec2:	4a0f      	ldr	r2, [pc, #60]	; (22f00 <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22ec4:	490f      	ldr	r1, [pc, #60]	; (22f04 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   22ec6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22ec8:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
   22eca:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22ecc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   22ece:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22ed0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22ed2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22ed4:	f00a ffe8 	bl	2dea8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22ed8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   22edc:	490a      	ldr	r1, [pc, #40]	; (22f08 <_DoInit+0x68>)
   22ede:	4620      	mov	r0, r4
   22ee0:	f00a ffe2 	bl	2dea8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22ee4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   22ee8:	2320      	movs	r3, #32
   22eea:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   22eec:	f3bf 8f5f 	dmb	sy
}
   22ef0:	bd10      	pop	{r4, pc}
   22ef2:	bf00      	nop
   22ef4:	2000d15c 	.word	0x2000d15c
   22ef8:	00031681 	.word	0x00031681
   22efc:	2000d65e 	.word	0x2000d65e
   22f00:	2000d64e 	.word	0x2000d64e
   22f04:	0003168a 	.word	0x0003168a
   22f08:	0003168e 	.word	0x0003168e

00022f0c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22f0c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   22f0e:	2418      	movs	r4, #24
   22f10:	fb00 4504 	mla	r5, r0, r4, r4
   22f14:	4b14      	ldr	r3, [pc, #80]	; (22f68 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22f16:	4616      	mov	r6, r2
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   22f18:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   22f1a:	fb04 3300 	mla	r3, r4, r0, r3
   22f1e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   22f20:	2c01      	cmp	r4, #1
   22f22:	d00e      	beq.n	22f42 <SEGGER_RTT_WriteNoLock+0x36>
   22f24:	2c02      	cmp	r4, #2
   22f26:	d018      	beq.n	22f5a <SEGGER_RTT_WriteNoLock+0x4e>
   22f28:	b9e4      	cbnz	r4, 22f64 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   22f2a:	4628      	mov	r0, r5
   22f2c:	f009 fd16 	bl	2c95c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   22f30:	4286      	cmp	r6, r0
   22f32:	d804      	bhi.n	22f3e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   22f34:	4632      	mov	r2, r6
   22f36:	4628      	mov	r0, r5
   22f38:	f009 fd19 	bl	2c96e <_WriteNoCheck>
   22f3c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   22f3e:	4620      	mov	r0, r4
   22f40:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   22f42:	4628      	mov	r0, r5
   22f44:	f009 fd0a 	bl	2c95c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   22f48:	4286      	cmp	r6, r0
   22f4a:	4634      	mov	r4, r6
   22f4c:	bf28      	it	cs
   22f4e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   22f50:	4628      	mov	r0, r5
   22f52:	4622      	mov	r2, r4
   22f54:	f009 fd0b 	bl	2c96e <_WriteNoCheck>
    break;
   22f58:	e7f1      	b.n	22f3e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22f5a:	4628      	mov	r0, r5
}
   22f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   22f60:	f009 bd24 	b.w	2c9ac <_WriteBlocking>
  switch (pRing->Flags) {
   22f64:	2400      	movs	r4, #0
  return Status;
   22f66:	e7ea      	b.n	22f3e <SEGGER_RTT_WriteNoLock+0x32>
   22f68:	2000d15c 	.word	0x2000d15c

00022f6c <rpc_handle_data_message>:
   22f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f70:	4680      	mov	r8, r0
   22f72:	4604      	mov	r4, r0
   22f74:	2700      	movs	r7, #0
   22f76:	f858 6b08 	ldr.w	r6, [r8], #8
   22f7a:	4d0c      	ldr	r5, [pc, #48]	; (22fac <rpc_handle_data_message+0x40>)
   22f7c:	b2f6      	uxtb	r6, r6
   22f7e:	782b      	ldrb	r3, [r5, #0]
   22f80:	42b3      	cmp	r3, r6
   22f82:	d00a      	beq.n	22f9a <rpc_handle_data_message+0x2e>
   22f84:	3701      	adds	r7, #1
   22f86:	2f04      	cmp	r7, #4
   22f88:	f105 050c 	add.w	r5, r5, #12
   22f8c:	d1f7      	bne.n	22f7e <rpc_handle_data_message+0x12>
   22f8e:	68a0      	ldr	r0, [r4, #8]
   22f90:	b150      	cbz	r0, 22fa8 <rpc_handle_data_message+0x3c>
   22f92:	f009 fd82 	bl	2ca9a <rpc_transport_peer_data_free>
   22f96:	2000      	movs	r0, #0
   22f98:	e006      	b.n	22fa8 <rpc_handle_data_message+0x3c>
   22f9a:	6821      	ldr	r1, [r4, #0]
   22f9c:	4640      	mov	r0, r8
   22f9e:	686b      	ldr	r3, [r5, #4]
   22fa0:	0c09      	lsrs	r1, r1, #16
   22fa2:	4798      	blx	r3
   22fa4:	2802      	cmp	r0, #2
   22fa6:	d0ed      	beq.n	22f84 <rpc_handle_data_message+0x18>
   22fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fac:	0002ed88 	.word	0x0002ed88

00022fb0 <trace_write>:
   22fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22fb4:	7803      	ldrb	r3, [r0, #0]
   22fb6:	4604      	mov	r4, r0
   22fb8:	2b62      	cmp	r3, #98	; 0x62
   22fba:	6881      	ldr	r1, [r0, #8]
   22fbc:	d042      	beq.n	23044 <trace_write+0x94>
   22fbe:	2b63      	cmp	r3, #99	; 0x63
   22fc0:	d042      	beq.n	23048 <trace_write+0x98>
   22fc2:	2b61      	cmp	r3, #97	; 0x61
   22fc4:	d142      	bne.n	2304c <trace_write+0x9c>
   22fc6:	4b3f      	ldr	r3, [pc, #252]	; (230c4 <trace_write+0x114>)
   22fc8:	881b      	ldrh	r3, [r3, #0]
   22fca:	b29b      	uxth	r3, r3
   22fcc:	f8d4 900c 	ldr.w	r9, [r4, #12]
   22fd0:	6920      	ldr	r0, [r4, #16]
   22fd2:	eba1 0109 	sub.w	r1, r1, r9
   22fd6:	eba0 0209 	sub.w	r2, r0, r9
   22fda:	b292      	uxth	r2, r2
   22fdc:	fa13 f381 	uxtah	r3, r3, r1
   22fe0:	fbb3 f1f2 	udiv	r1, r3, r2
   22fe4:	fb02 3311 	mls	r3, r2, r1, r3
   22fe8:	6861      	ldr	r1, [r4, #4]
   22fea:	eba1 0109 	sub.w	r1, r1, r9
   22fee:	fa12 f181 	uxtah	r1, r2, r1
   22ff2:	1ac9      	subs	r1, r1, r3
   22ff4:	fb91 f5f2 	sdiv	r5, r1, r2
   22ff8:	fb02 1115 	mls	r1, r2, r5, r1
   22ffc:	fa1f f881 	uxth.w	r8, r1
   23000:	fa13 f181 	uxtah	r1, r3, r1
   23004:	428a      	cmp	r2, r1
   23006:	4499      	add	r9, r3
   23008:	bfbf      	itttt	lt
   2300a:	eba0 0309 	sublt.w	r3, r0, r9
   2300e:	b29b      	uxthlt	r3, r3
   23010:	eba8 0503 	sublt.w	r5, r8, r3
   23014:	4698      	movlt	r8, r3
   23016:	bfac      	ite	ge
   23018:	2500      	movge	r5, #0
   2301a:	b2ad      	uxthlt	r5, r5
   2301c:	f1b8 0f00 	cmp.w	r8, #0
   23020:	d04e      	beq.n	230c0 <trace_write+0x110>
   23022:	2005      	movs	r0, #5
   23024:	f7fb fd58 	bl	1ead8 <nrf_modem_os_alloc>
   23028:	4606      	mov	r6, r0
   2302a:	2800      	cmp	r0, #0
   2302c:	d048      	beq.n	230c0 <trace_write+0x110>
   2302e:	b17d      	cbz	r5, 23050 <trace_write+0xa0>
   23030:	2005      	movs	r0, #5
   23032:	f7fb fd51 	bl	1ead8 <nrf_modem_os_alloc>
   23036:	4607      	mov	r7, r0
   23038:	b950      	cbnz	r0, 23050 <trace_write+0xa0>
   2303a:	4630      	mov	r0, r6
   2303c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23040:	f7fb bd52 	b.w	1eae8 <nrf_modem_os_free>
   23044:	4b20      	ldr	r3, [pc, #128]	; (230c8 <trace_write+0x118>)
   23046:	e7bf      	b.n	22fc8 <trace_write+0x18>
   23048:	4b20      	ldr	r3, [pc, #128]	; (230cc <trace_write+0x11c>)
   2304a:	e7bd      	b.n	22fc8 <trace_write+0x18>
   2304c:	2300      	movs	r3, #0
   2304e:	e7bd      	b.n	22fcc <trace_write+0x1c>
   23050:	7822      	ldrb	r2, [r4, #0]
   23052:	2a62      	cmp	r2, #98	; 0x62
   23054:	d030      	beq.n	230b8 <trace_write+0x108>
   23056:	2a63      	cmp	r2, #99	; 0x63
   23058:	d030      	beq.n	230bc <trace_write+0x10c>
   2305a:	2a61      	cmp	r2, #97	; 0x61
   2305c:	d107      	bne.n	2306e <trace_write+0xbe>
   2305e:	4919      	ldr	r1, [pc, #100]	; (230c4 <trace_write+0x114>)
   23060:	880b      	ldrh	r3, [r1, #0]
   23062:	eb05 0008 	add.w	r0, r5, r8
   23066:	fa10 f383 	uxtah	r3, r0, r3
   2306a:	b29b      	uxth	r3, r3
   2306c:	800b      	strh	r3, [r1, #0]
   2306e:	4643      	mov	r3, r8
   23070:	f06f 0b10 	mvn.w	fp, #16
   23074:	f06f 0a41 	mvn.w	sl, #65	; 0x41
   23078:	2105      	movs	r1, #5
   2307a:	4630      	mov	r0, r6
   2307c:	f886 b000 	strb.w	fp, [r6]
   23080:	f886 a001 	strb.w	sl, [r6, #1]
   23084:	7132      	strb	r2, [r6, #4]
   23086:	8073      	strh	r3, [r6, #2]
   23088:	f008 ffc4 	bl	2c014 <nrf_modem_os_trace_put>
   2308c:	4641      	mov	r1, r8
   2308e:	4648      	mov	r0, r9
   23090:	f008 ffc0 	bl	2c014 <nrf_modem_os_trace_put>
   23094:	b1a5      	cbz	r5, 230c0 <trace_write+0x110>
   23096:	f887 b000 	strb.w	fp, [r7]
   2309a:	f887 a001 	strb.w	sl, [r7, #1]
   2309e:	7823      	ldrb	r3, [r4, #0]
   230a0:	2105      	movs	r1, #5
   230a2:	4638      	mov	r0, r7
   230a4:	713b      	strb	r3, [r7, #4]
   230a6:	807d      	strh	r5, [r7, #2]
   230a8:	f008 ffb4 	bl	2c014 <nrf_modem_os_trace_put>
   230ac:	4629      	mov	r1, r5
   230ae:	68e0      	ldr	r0, [r4, #12]
   230b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230b4:	f008 bfae 	b.w	2c014 <nrf_modem_os_trace_put>
   230b8:	4903      	ldr	r1, [pc, #12]	; (230c8 <trace_write+0x118>)
   230ba:	e7d1      	b.n	23060 <trace_write+0xb0>
   230bc:	4903      	ldr	r1, [pc, #12]	; (230cc <trace_write+0x11c>)
   230be:	e7cf      	b.n	23060 <trace_write+0xb0>
   230c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230c4:	2000d4c4 	.word	0x2000d4c4
   230c8:	2000d4c0 	.word	0x2000d4c0
   230cc:	2000d4c2 	.word	0x2000d4c2

000230d0 <ipc_trace_init>:
   230d0:	2300      	movs	r3, #0
   230d2:	4a04      	ldr	r2, [pc, #16]	; (230e4 <ipc_trace_init+0x14>)
   230d4:	8013      	strh	r3, [r2, #0]
   230d6:	4a04      	ldr	r2, [pc, #16]	; (230e8 <ipc_trace_init+0x18>)
   230d8:	8013      	strh	r3, [r2, #0]
   230da:	4a04      	ldr	r2, [pc, #16]	; (230ec <ipc_trace_init+0x1c>)
   230dc:	8013      	strh	r3, [r2, #0]
   230de:	4b04      	ldr	r3, [pc, #16]	; (230f0 <ipc_trace_init+0x20>)
   230e0:	6018      	str	r0, [r3, #0]
   230e2:	4770      	bx	lr
   230e4:	2000d4c4 	.word	0x2000d4c4
   230e8:	2000d4c0 	.word	0x2000d4c0
   230ec:	2000d4c2 	.word	0x2000d4c2
   230f0:	2000d210 	.word	0x2000d210

000230f4 <nrf_modem_trace_irq_handler>:
   230f4:	b508      	push	{r3, lr}
   230f6:	4b10      	ldr	r3, [pc, #64]	; (23138 <nrf_modem_trace_irq_handler+0x44>)
   230f8:	781b      	ldrb	r3, [r3, #0]
   230fa:	b90b      	cbnz	r3, 23100 <nrf_modem_trace_irq_handler+0xc>
   230fc:	f7fb fce4 	bl	1eac8 <nrf_modem_os_trace_irq_clear>
   23100:	4b0e      	ldr	r3, [pc, #56]	; (2313c <nrf_modem_trace_irq_handler+0x48>)
   23102:	6818      	ldr	r0, [r3, #0]
   23104:	6842      	ldr	r2, [r0, #4]
   23106:	6883      	ldr	r3, [r0, #8]
   23108:	429a      	cmp	r2, r3
   2310a:	d001      	beq.n	23110 <nrf_modem_trace_irq_handler+0x1c>
   2310c:	f7ff ff50 	bl	22fb0 <trace_write>
   23110:	4b0b      	ldr	r3, [pc, #44]	; (23140 <nrf_modem_trace_irq_handler+0x4c>)
   23112:	6818      	ldr	r0, [r3, #0]
   23114:	6882      	ldr	r2, [r0, #8]
   23116:	6843      	ldr	r3, [r0, #4]
   23118:	429a      	cmp	r2, r3
   2311a:	d001      	beq.n	23120 <nrf_modem_trace_irq_handler+0x2c>
   2311c:	f7ff ff48 	bl	22fb0 <trace_write>
   23120:	4b08      	ldr	r3, [pc, #32]	; (23144 <nrf_modem_trace_irq_handler+0x50>)
   23122:	6818      	ldr	r0, [r3, #0]
   23124:	6882      	ldr	r2, [r0, #8]
   23126:	6843      	ldr	r3, [r0, #4]
   23128:	429a      	cmp	r2, r3
   2312a:	d003      	beq.n	23134 <nrf_modem_trace_irq_handler+0x40>
   2312c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23130:	f7ff bf3e 	b.w	22fb0 <trace_write>
   23134:	bd08      	pop	{r3, pc}
   23136:	bf00      	nop
   23138:	2000da5e 	.word	0x2000da5e
   2313c:	2000d20c 	.word	0x2000d20c
   23140:	2000d204 	.word	0x2000d204
   23144:	2000d208 	.word	0x2000d208

00023148 <ipc_trace_handle>:
   23148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2314c:	4b43      	ldr	r3, [pc, #268]	; (2325c <ipc_trace_handle+0x114>)
   2314e:	681b      	ldr	r3, [r3, #0]
   23150:	6919      	ldr	r1, [r3, #16]
   23152:	f8d3 a014 	ldr.w	sl, [r3, #20]
   23156:	7c1a      	ldrb	r2, [r3, #16]
   23158:	2200      	movs	r2, #0
   2315a:	741a      	strb	r2, [r3, #16]
   2315c:	7c58      	ldrb	r0, [r3, #17]
   2315e:	745a      	strb	r2, [r3, #17]
   23160:	7c98      	ldrb	r0, [r3, #18]
   23162:	749a      	strb	r2, [r3, #18]
   23164:	7cd8      	ldrb	r0, [r3, #19]
   23166:	74da      	strb	r2, [r3, #19]
   23168:	7d18      	ldrb	r0, [r3, #20]
   2316a:	751a      	strb	r2, [r3, #20]
   2316c:	7d58      	ldrb	r0, [r3, #21]
   2316e:	755a      	strb	r2, [r3, #21]
   23170:	7d98      	ldrb	r0, [r3, #22]
   23172:	759a      	strb	r2, [r3, #22]
   23174:	7dd8      	ldrb	r0, [r3, #23]
   23176:	75da      	strb	r2, [r3, #23]
   23178:	2900      	cmp	r1, #0
   2317a:	d033      	beq.n	231e4 <ipc_trace_handle+0x9c>
   2317c:	3901      	subs	r1, #1
   2317e:	2903      	cmp	r1, #3
   23180:	d830      	bhi.n	231e4 <ipc_trace_handle+0x9c>
   23182:	e8df f001 	tbb	[pc, r1]
   23186:	6502      	.short	0x6502
   23188:	534c      	.short	0x534c
   2318a:	4a35      	ldr	r2, [pc, #212]	; (23260 <ipc_trace_handle+0x118>)
   2318c:	7811      	ldrb	r1, [r2, #0]
   2318e:	b109      	cbz	r1, 23194 <ipc_trace_handle+0x4c>
   23190:	2100      	movs	r1, #0
   23192:	7011      	strb	r1, [r2, #0]
   23194:	2200      	movs	r2, #0
   23196:	4691      	mov	r9, r2
   23198:	4617      	mov	r7, r2
   2319a:	4614      	mov	r4, r2
   2319c:	4d31      	ldr	r5, [pc, #196]	; (23264 <ipc_trace_handle+0x11c>)
   2319e:	4932      	ldr	r1, [pc, #200]	; (23268 <ipc_trace_handle+0x120>)
   231a0:	4832      	ldr	r0, [pc, #200]	; (2326c <ipc_trace_handle+0x124>)
   231a2:	f8d5 e000 	ldr.w	lr, [r5]
   231a6:	f8d1 8000 	ldr.w	r8, [r1]
   231aa:	6806      	ldr	r6, [r0, #0]
   231ac:	f8da b008 	ldr.w	fp, [sl, #8]
   231b0:	9501      	str	r5, [sp, #4]
   231b2:	45a3      	cmp	fp, r4
   231b4:	d119      	bne.n	231ea <ipc_trace_handle+0xa2>
   231b6:	b107      	cbz	r7, 231ba <ipc_trace_handle+0x72>
   231b8:	6006      	str	r6, [r0, #0]
   231ba:	f1b9 0f00 	cmp.w	r9, #0
   231be:	d001      	beq.n	231c4 <ipc_trace_handle+0x7c>
   231c0:	f8c1 8000 	str.w	r8, [r1]
   231c4:	b112      	cbz	r2, 231cc <ipc_trace_handle+0x84>
   231c6:	9a01      	ldr	r2, [sp, #4]
   231c8:	f8c2 e000 	str.w	lr, [r2]
   231cc:	7a1a      	ldrb	r2, [r3, #8]
   231ce:	2101      	movs	r1, #1
   231d0:	2200      	movs	r2, #0
   231d2:	7219      	strb	r1, [r3, #8]
   231d4:	7a59      	ldrb	r1, [r3, #9]
   231d6:	725a      	strb	r2, [r3, #9]
   231d8:	7a99      	ldrb	r1, [r3, #10]
   231da:	729a      	strb	r2, [r3, #10]
   231dc:	7ada      	ldrb	r2, [r3, #11]
   231de:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   231e2:	72da      	strb	r2, [r3, #11]
   231e4:	b003      	add	sp, #12
   231e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231ea:	1ca5      	adds	r5, r4, #2
   231ec:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   231f0:	686d      	ldr	r5, [r5, #4]
   231f2:	f895 c000 	ldrb.w	ip, [r5]
   231f6:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   231fa:	d009      	beq.n	23210 <ipc_trace_handle+0xc8>
   231fc:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   23200:	d00a      	beq.n	23218 <ipc_trace_handle+0xd0>
   23202:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   23206:	bf04      	itt	eq
   23208:	462e      	moveq	r6, r5
   2320a:	2701      	moveq	r7, #1
   2320c:	3401      	adds	r4, #1
   2320e:	e7d0      	b.n	231b2 <ipc_trace_handle+0x6a>
   23210:	46a8      	mov	r8, r5
   23212:	f04f 0901 	mov.w	r9, #1
   23216:	e7f9      	b.n	2320c <ipc_trace_handle+0xc4>
   23218:	46ae      	mov	lr, r5
   2321a:	2201      	movs	r2, #1
   2321c:	e7f6      	b.n	2320c <ipc_trace_handle+0xc4>
   2321e:	2101      	movs	r1, #1
   23220:	4a0f      	ldr	r2, [pc, #60]	; (23260 <ipc_trace_handle+0x118>)
   23222:	7011      	strb	r1, [r2, #0]
   23224:	7a1a      	ldrb	r2, [r3, #8]
   23226:	2103      	movs	r1, #3
   23228:	2200      	movs	r2, #0
   2322a:	e7d2      	b.n	231d2 <ipc_trace_handle+0x8a>
   2322c:	7a19      	ldrb	r1, [r3, #8]
   2322e:	2104      	movs	r1, #4
   23230:	7219      	strb	r1, [r3, #8]
   23232:	7a59      	ldrb	r1, [r3, #9]
   23234:	725a      	strb	r2, [r3, #9]
   23236:	7a99      	ldrb	r1, [r3, #10]
   23238:	729a      	strb	r2, [r3, #10]
   2323a:	7ad9      	ldrb	r1, [r3, #11]
   2323c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   23240:	72d9      	strb	r1, [r3, #11]
   23242:	4b07      	ldr	r3, [pc, #28]	; (23260 <ipc_trace_handle+0x118>)
   23244:	701a      	strb	r2, [r3, #0]
   23246:	b003      	add	sp, #12
   23248:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2324c:	f7ff bf52 	b.w	230f4 <nrf_modem_trace_irq_handler>
   23250:	b003      	add	sp, #12
   23252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23256:	f7fb bc2f 	b.w	1eab8 <nrf_modem_os_trace_irq_set>
   2325a:	bf00      	nop
   2325c:	2000d210 	.word	0x2000d210
   23260:	2000da5e 	.word	0x2000da5e
   23264:	2000d208 	.word	0x2000d208
   23268:	2000d204 	.word	0x2000d204
   2326c:	2000d20c 	.word	0x2000d20c

00023270 <rpc_trace_coredump_in_progress>:
   23270:	4b01      	ldr	r3, [pc, #4]	; (23278 <rpc_trace_coredump_in_progress+0x8>)
   23272:	7818      	ldrb	r0, [r3, #0]
   23274:	4770      	bx	lr
   23276:	bf00      	nop
   23278:	2000da5e 	.word	0x2000da5e

0002327c <handle_modem_rpc_msg>:
   2327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23280:	4606      	mov	r6, r0
   23282:	460f      	mov	r7, r1
   23284:	2500      	movs	r5, #0
   23286:	f8df 8074 	ldr.w	r8, [pc, #116]	; 232fc <handle_modem_rpc_msg+0x80>
   2328a:	6833      	ldr	r3, [r6, #0]
   2328c:	42ab      	cmp	r3, r5
   2328e:	d801      	bhi.n	23294 <handle_modem_rpc_msg+0x18>
   23290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23294:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   23298:	68a3      	ldr	r3, [r4, #8]
   2329a:	b1fb      	cbz	r3, 232dc <handle_modem_rpc_msg+0x60>
   2329c:	6863      	ldr	r3, [r4, #4]
   2329e:	b2db      	uxtb	r3, r3
   232a0:	2b01      	cmp	r3, #1
   232a2:	d11b      	bne.n	232dc <handle_modem_rpc_msg+0x60>
   232a4:	6862      	ldr	r2, [r4, #4]
   232a6:	f8b8 3000 	ldrh.w	r3, [r8]
   232aa:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   232ae:	d115      	bne.n	232dc <handle_modem_rpc_msg+0x60>
   232b0:	2f02      	cmp	r7, #2
   232b2:	68a0      	ldr	r0, [r4, #8]
   232b4:	d114      	bne.n	232e0 <handle_modem_rpc_msg+0x64>
   232b6:	f7ff fe59 	bl	22f6c <rpc_handle_data_message>
   232ba:	2802      	cmp	r0, #2
   232bc:	d00e      	beq.n	232dc <handle_modem_rpc_msg+0x60>
   232be:	2801      	cmp	r0, #1
   232c0:	d113      	bne.n	232ea <handle_modem_rpc_msg+0x6e>
   232c2:	6863      	ldr	r3, [r4, #4]
   232c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   232c8:	f043 0302 	orr.w	r3, r3, #2
   232cc:	6063      	str	r3, [r4, #4]
   232ce:	f8b8 3000 	ldrh.w	r3, [r8]
   232d2:	3301      	adds	r3, #1
   232d4:	f8a8 3000 	strh.w	r3, [r8]
   232d8:	f7fb fbde 	bl	1ea98 <nrf_modem_os_application_irq_set>
   232dc:	3501      	adds	r5, #1
   232de:	e7d4      	b.n	2328a <handle_modem_rpc_msg+0xe>
   232e0:	6801      	ldr	r1, [r0, #0]
   232e2:	0c09      	lsrs	r1, r1, #16
   232e4:	f009 fb95 	bl	2ca12 <rpc_handle_ctrl_message>
   232e8:	e7e7      	b.n	232ba <handle_modem_rpc_msg+0x3e>
   232ea:	2800      	cmp	r0, #0
   232ec:	d1ef      	bne.n	232ce <handle_modem_rpc_msg+0x52>
   232ee:	6863      	ldr	r3, [r4, #4]
   232f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   232f4:	f043 0303 	orr.w	r3, r3, #3
   232f8:	e7e8      	b.n	232cc <handle_modem_rpc_msg+0x50>
   232fa:	bf00      	nop
   232fc:	2000d4c6 	.word	0x2000d4c6

00023300 <rpc_transport_ipc_msg_alloc>:
   23300:	b570      	push	{r4, r5, r6, lr}
   23302:	4616      	mov	r6, r2
   23304:	2400      	movs	r4, #0
   23306:	6803      	ldr	r3, [r0, #0]
   23308:	42a3      	cmp	r3, r4
   2330a:	d101      	bne.n	23310 <rpc_transport_ipc_msg_alloc+0x10>
   2330c:	2300      	movs	r3, #0
   2330e:	e01c      	b.n	2334a <rpc_transport_ipc_msg_alloc+0x4a>
   23310:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   23314:	6855      	ldr	r5, [r2, #4]
   23316:	b2ed      	uxtb	r5, r5
   23318:	2d03      	cmp	r5, #3
   2331a:	d118      	bne.n	2334e <rpc_transport_ipc_msg_alloc+0x4e>
   2331c:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   23320:	6093      	str	r3, [r2, #8]
   23322:	6851      	ldr	r1, [r2, #4]
   23324:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   23328:	6051      	str	r1, [r2, #4]
   2332a:	490c      	ldr	r1, [pc, #48]	; (2335c <rpc_transport_ipc_msg_alloc+0x5c>)
   2332c:	8808      	ldrh	r0, [r1, #0]
   2332e:	1c44      	adds	r4, r0, #1
   23330:	800c      	strh	r4, [r1, #0]
   23332:	6851      	ldr	r1, [r2, #4]
   23334:	b289      	uxth	r1, r1
   23336:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2333a:	6051      	str	r1, [r2, #4]
   2333c:	4618      	mov	r0, r3
   2333e:	2240      	movs	r2, #64	; 0x40
   23340:	2100      	movs	r1, #0
   23342:	f00a fc49 	bl	2dbd8 <memset>
   23346:	4603      	mov	r3, r0
   23348:	6046      	str	r6, [r0, #4]
   2334a:	4618      	mov	r0, r3
   2334c:	bd70      	pop	{r4, r5, r6, pc}
   2334e:	b915      	cbnz	r5, 23356 <rpc_transport_ipc_msg_alloc+0x56>
   23350:	6895      	ldr	r5, [r2, #8]
   23352:	2d00      	cmp	r5, #0
   23354:	d0e2      	beq.n	2331c <rpc_transport_ipc_msg_alloc+0x1c>
   23356:	3401      	adds	r4, #1
   23358:	e7d6      	b.n	23308 <rpc_transport_ipc_msg_alloc+0x8>
   2335a:	bf00      	nop
   2335c:	2000d4c8 	.word	0x2000d4c8

00023360 <rpc_transport_ipc_data_msg_send>:
   23360:	b508      	push	{r3, lr}
   23362:	4b0b      	ldr	r3, [pc, #44]	; (23390 <rpc_transport_ipc_data_msg_send+0x30>)
   23364:	681b      	ldr	r3, [r3, #0]
   23366:	1ac0      	subs	r0, r0, r3
   23368:	4b0a      	ldr	r3, [pc, #40]	; (23394 <rpc_transport_ipc_data_msg_send+0x34>)
   2336a:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2336e:	681b      	ldr	r3, [r3, #0]
   23370:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23374:	6843      	ldr	r3, [r0, #4]
   23376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2337a:	f043 0301 	orr.w	r3, r3, #1
   2337e:	6043      	str	r3, [r0, #4]
   23380:	2003      	movs	r0, #3
   23382:	f008 fe32 	bl	2bfea <nrf_modem_os_busywait>
   23386:	2201      	movs	r2, #1
   23388:	4b03      	ldr	r3, [pc, #12]	; (23398 <rpc_transport_ipc_data_msg_send+0x38>)
   2338a:	601a      	str	r2, [r3, #0]
   2338c:	bd08      	pop	{r3, pc}
   2338e:	bf00      	nop
   23390:	2000d22c 	.word	0x2000d22c
   23394:	2000d230 	.word	0x2000d230
   23398:	4002a00c 	.word	0x4002a00c

0002339c <rpc_transport_ipc_ctrl_msg_send>:
   2339c:	b508      	push	{r3, lr}
   2339e:	4b0b      	ldr	r3, [pc, #44]	; (233cc <rpc_transport_ipc_ctrl_msg_send+0x30>)
   233a0:	681b      	ldr	r3, [r3, #0]
   233a2:	1ac0      	subs	r0, r0, r3
   233a4:	4b0a      	ldr	r3, [pc, #40]	; (233d0 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   233a6:	f3c0 1089 	ubfx	r0, r0, #6, #10
   233aa:	681b      	ldr	r3, [r3, #0]
   233ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   233b0:	6843      	ldr	r3, [r0, #4]
   233b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   233b6:	f043 0301 	orr.w	r3, r3, #1
   233ba:	6043      	str	r3, [r0, #4]
   233bc:	2003      	movs	r0, #3
   233be:	f008 fe14 	bl	2bfea <nrf_modem_os_busywait>
   233c2:	2201      	movs	r2, #1
   233c4:	4b03      	ldr	r3, [pc, #12]	; (233d4 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   233c6:	601a      	str	r2, [r3, #0]
   233c8:	bd08      	pop	{r3, pc}
   233ca:	bf00      	nop
   233cc:	2000d224 	.word	0x2000d224
   233d0:	2000d228 	.word	0x2000d228
   233d4:	4002a004 	.word	0x4002a004

000233d8 <rpc_transport_ipc_data_msg_alloc>:
   233d8:	4b05      	ldr	r3, [pc, #20]	; (233f0 <rpc_transport_ipc_data_msg_alloc+0x18>)
   233da:	781b      	ldrb	r3, [r3, #0]
   233dc:	b933      	cbnz	r3, 233ec <rpc_transport_ipc_data_msg_alloc+0x14>
   233de:	4b05      	ldr	r3, [pc, #20]	; (233f4 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   233e0:	2202      	movs	r2, #2
   233e2:	6819      	ldr	r1, [r3, #0]
   233e4:	4b04      	ldr	r3, [pc, #16]	; (233f8 <rpc_transport_ipc_data_msg_alloc+0x20>)
   233e6:	6818      	ldr	r0, [r3, #0]
   233e8:	f7ff bf8a 	b.w	23300 <rpc_transport_ipc_msg_alloc>
   233ec:	2000      	movs	r0, #0
   233ee:	4770      	bx	lr
   233f0:	2000da60 	.word	0x2000da60
   233f4:	2000d22c 	.word	0x2000d22c
   233f8:	2000d230 	.word	0x2000d230

000233fc <rpc_transport_ipc_ctrl_msg_alloc>:
   233fc:	230a      	movs	r3, #10
   233fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23400:	4c0c      	ldr	r4, [pc, #48]	; (23434 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   23402:	4d0d      	ldr	r5, [pc, #52]	; (23438 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   23404:	9301      	str	r3, [sp, #4]
   23406:	2201      	movs	r2, #1
   23408:	6821      	ldr	r1, [r4, #0]
   2340a:	6828      	ldr	r0, [r5, #0]
   2340c:	f7ff ff78 	bl	23300 <rpc_transport_ipc_msg_alloc>
   23410:	b968      	cbnz	r0, 2342e <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   23412:	f008 fdf2 	bl	2bffa <nrf_modem_os_is_in_isr>
   23416:	b918      	cbnz	r0, 23420 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   23418:	a901      	add	r1, sp, #4
   2341a:	f7fb f9fb 	bl	1e814 <nrf_modem_os_timedwait>
   2341e:	e7f2      	b.n	23406 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   23420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   23424:	9b01      	ldr	r3, [sp, #4]
   23426:	4358      	muls	r0, r3
   23428:	f008 fddf 	bl	2bfea <nrf_modem_os_busywait>
   2342c:	e7eb      	b.n	23406 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2342e:	b003      	add	sp, #12
   23430:	bd30      	pop	{r4, r5, pc}
   23432:	bf00      	nop
   23434:	2000d224 	.word	0x2000d224
   23438:	2000d228 	.word	0x2000d228

0002343c <rpc_transport_ipc_data_alloc>:
   2343c:	4b03      	ldr	r3, [pc, #12]	; (2344c <rpc_transport_ipc_data_alloc+0x10>)
   2343e:	781b      	ldrb	r3, [r3, #0]
   23440:	b90b      	cbnz	r3, 23446 <rpc_transport_ipc_data_alloc+0xa>
   23442:	f7fb bb57 	b.w	1eaf4 <nrf_modem_os_shm_tx_alloc>
   23446:	2000      	movs	r0, #0
   23448:	4770      	bx	lr
   2344a:	bf00      	nop
   2344c:	2000da60 	.word	0x2000da60

00023450 <nrf_modem_application_irq_handler>:
   23450:	b510      	push	{r4, lr}
   23452:	4c06      	ldr	r4, [pc, #24]	; (2346c <nrf_modem_application_irq_handler+0x1c>)
   23454:	f7fb fb28 	bl	1eaa8 <nrf_modem_os_application_irq_clear>
   23458:	6820      	ldr	r0, [r4, #0]
   2345a:	2101      	movs	r1, #1
   2345c:	f7ff ff0e 	bl	2327c <handle_modem_rpc_msg>
   23460:	6860      	ldr	r0, [r4, #4]
   23462:	2102      	movs	r1, #2
   23464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23468:	f7ff bf08 	b.w	2327c <handle_modem_rpc_msg>
   2346c:	2000d218 	.word	0x2000d218

00023470 <rpc_transport_ipc_msg_free>:
   23470:	2300      	movs	r3, #0
   23472:	4911      	ldr	r1, [pc, #68]	; (234b8 <rpc_transport_ipc_msg_free+0x48>)
   23474:	b530      	push	{r4, r5, lr}
   23476:	680a      	ldr	r2, [r1, #0]
   23478:	6814      	ldr	r4, [r2, #0]
   2347a:	42a3      	cmp	r3, r4
   2347c:	d10b      	bne.n	23496 <rpc_transport_ipc_msg_free+0x26>
   2347e:	2300      	movs	r3, #0
   23480:	684a      	ldr	r2, [r1, #4]
   23482:	6811      	ldr	r1, [r2, #0]
   23484:	428b      	cmp	r3, r1
   23486:	d015      	beq.n	234b4 <rpc_transport_ipc_msg_free+0x44>
   23488:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   2348c:	68a4      	ldr	r4, [r4, #8]
   2348e:	42a0      	cmp	r0, r4
   23490:	d008      	beq.n	234a4 <rpc_transport_ipc_msg_free+0x34>
   23492:	3301      	adds	r3, #1
   23494:	e7f6      	b.n	23484 <rpc_transport_ipc_msg_free+0x14>
   23496:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2349a:	68ad      	ldr	r5, [r5, #8]
   2349c:	42a8      	cmp	r0, r5
   2349e:	d001      	beq.n	234a4 <rpc_transport_ipc_msg_free+0x34>
   234a0:	3301      	adds	r3, #1
   234a2:	e7ea      	b.n	2347a <rpc_transport_ipc_msg_free+0xa>
   234a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   234a8:	685a      	ldr	r2, [r3, #4]
   234aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   234ae:	f042 0203 	orr.w	r2, r2, #3
   234b2:	605a      	str	r2, [r3, #4]
   234b4:	bd30      	pop	{r4, r5, pc}
   234b6:	bf00      	nop
   234b8:	2000d218 	.word	0x2000d218

000234bc <rpc_transport_ipc_init>:
   234bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234c0:	2200      	movs	r2, #0
   234c2:	b095      	sub	sp, #84	; 0x54
   234c4:	4605      	mov	r5, r0
   234c6:	494d      	ldr	r1, [pc, #308]	; (235fc <rpc_transport_ipc_init+0x140>)
   234c8:	7900      	ldrb	r0, [r0, #4]
   234ca:	f7fe fd21 	bl	21f10 <nrfx_ipc_init>
   234ce:	2238      	movs	r2, #56	; 0x38
   234d0:	2100      	movs	r1, #0
   234d2:	a803      	add	r0, sp, #12
   234d4:	f00a fb80 	bl	2dbd8 <memset>
   234d8:	2302      	movs	r3, #2
   234da:	9304      	str	r3, [sp, #16]
   234dc:	2308      	movs	r3, #8
   234de:	9306      	str	r3, [sp, #24]
   234e0:	2320      	movs	r3, #32
   234e2:	9308      	str	r3, [sp, #32]
   234e4:	2301      	movs	r3, #1
   234e6:	930b      	str	r3, [sp, #44]	; 0x2c
   234e8:	2304      	movs	r3, #4
   234ea:	930d      	str	r3, [sp, #52]	; 0x34
   234ec:	2310      	movs	r3, #16
   234ee:	f04f 0c40 	mov.w	ip, #64	; 0x40
   234f2:	930f      	str	r3, [sp, #60]	; 0x3c
   234f4:	2380      	movs	r3, #128	; 0x80
   234f6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   234fa:	23d5      	movs	r3, #213	; 0xd5
   234fc:	a803      	add	r0, sp, #12
   234fe:	9313      	str	r3, [sp, #76]	; 0x4c
   23500:	f7fe fd2c 	bl	21f5c <nrfx_ipc_config_load>
   23504:	682b      	ldr	r3, [r5, #0]
   23506:	2100      	movs	r1, #0
   23508:	685a      	ldr	r2, [r3, #4]
   2350a:	6818      	ldr	r0, [r3, #0]
   2350c:	f00a fb64 	bl	2dbd8 <memset>
   23510:	682a      	ldr	r2, [r5, #0]
   23512:	6814      	ldr	r4, [r2, #0]
   23514:	69d3      	ldr	r3, [r2, #28]
   23516:	f104 0660 	add.w	r6, r4, #96	; 0x60
   2351a:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   2351e:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   23522:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   23526:	f104 0920 	add.w	r9, r4, #32
   2352a:	2b00      	cmp	r3, #0
   2352c:	d060      	beq.n	235f0 <rpc_transport_ipc_init+0x134>
   2352e:	f104 0840 	add.w	r8, r4, #64	; 0x40
   23532:	4933      	ldr	r1, [pc, #204]	; (23600 <rpc_transport_ipc_init+0x144>)
   23534:	f8c1 9000 	str.w	r9, [r1]
   23538:	b13b      	cbz	r3, 2354a <rpc_transport_ipc_init+0x8e>
   2353a:	6992      	ldr	r2, [r2, #24]
   2353c:	4640      	mov	r0, r8
   2353e:	f8c8 2004 	str.w	r2, [r8, #4]
   23542:	f8c8 3000 	str.w	r3, [r8]
   23546:	f7ff fdc3 	bl	230d0 <ipc_trace_init>
   2354a:	6828      	ldr	r0, [r5, #0]
   2354c:	2300      	movs	r3, #0
   2354e:	6902      	ldr	r2, [r0, #16]
   23550:	2101      	movs	r1, #1
   23552:	6062      	str	r2, [r4, #4]
   23554:	6942      	ldr	r2, [r0, #20]
   23556:	70a1      	strb	r1, [r4, #2]
   23558:	60a2      	str	r2, [r4, #8]
   2355a:	4a2a      	ldr	r2, [pc, #168]	; (23604 <rpc_transport_ipc_init+0x148>)
   2355c:	7023      	strb	r3, [r4, #0]
   2355e:	6017      	str	r7, [r2, #0]
   23560:	4a29      	ldr	r2, [pc, #164]	; (23608 <rpc_transport_ipc_init+0x14c>)
   23562:	7063      	strb	r3, [r4, #1]
   23564:	6016      	str	r6, [r2, #0]
   23566:	2208      	movs	r2, #8
   23568:	70e3      	strb	r3, [r4, #3]
   2356a:	60e6      	str	r6, [r4, #12]
   2356c:	6127      	str	r7, [r4, #16]
   2356e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   23572:	f8c4 9014 	str.w	r9, [r4, #20]
   23576:	f8c4 8018 	str.w	r8, [r4, #24]
   2357a:	707b      	strb	r3, [r7, #1]
   2357c:	70bb      	strb	r3, [r7, #2]
   2357e:	70fb      	strb	r3, [r7, #3]
   23580:	2714      	movs	r7, #20
   23582:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   23586:	4a21      	ldr	r2, [pc, #132]	; (2360c <rpc_transport_ipc_init+0x150>)
   23588:	4d21      	ldr	r5, [pc, #132]	; (23610 <rpc_transport_ipc_init+0x154>)
   2358a:	f8c2 b000 	str.w	fp, [r2]
   2358e:	4a21      	ldr	r2, [pc, #132]	; (23614 <rpc_transport_ipc_init+0x158>)
   23590:	7073      	strb	r3, [r6, #1]
   23592:	f8c2 a000 	str.w	sl, [r2]
   23596:	4a20      	ldr	r2, [pc, #128]	; (23618 <rpc_transport_ipc_init+0x15c>)
   23598:	70b3      	strb	r3, [r6, #2]
   2359a:	70f3      	strb	r3, [r6, #3]
   2359c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   235a0:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   235a4:	4c1d      	ldr	r4, [pc, #116]	; (2361c <rpc_transport_ipc_init+0x160>)
   235a6:	7029      	strb	r1, [r5, #0]
   235a8:	491d      	ldr	r1, [pc, #116]	; (23620 <rpc_transport_ipc_init+0x164>)
   235aa:	6023      	str	r3, [r4, #0]
   235ac:	9302      	str	r3, [sp, #8]
   235ae:	600b      	str	r3, [r1, #0]
   235b0:	680b      	ldr	r3, [r1, #0]
   235b2:	4e1c      	ldr	r6, [pc, #112]	; (23624 <rpc_transport_ipc_init+0x168>)
   235b4:	9302      	str	r3, [sp, #8]
   235b6:	9b02      	ldr	r3, [sp, #8]
   235b8:	2000      	movs	r0, #0
   235ba:	a901      	add	r1, sp, #4
   235bc:	9701      	str	r7, [sp, #4]
   235be:	f7fb f929 	bl	1e814 <nrf_modem_os_timedwait>
   235c2:	9b01      	ldr	r3, [sp, #4]
   235c4:	3b14      	subs	r3, #20
   235c6:	441e      	add	r6, r3
   235c8:	782b      	ldrb	r3, [r5, #0]
   235ca:	2b01      	cmp	r3, #1
   235cc:	d104      	bne.n	235d8 <rpc_transport_ipc_init+0x11c>
   235ce:	2e00      	cmp	r6, #0
   235d0:	d1f2      	bne.n	235b8 <rpc_transport_ipc_init+0xfc>
   235d2:	f06f 0373 	mvn.w	r3, #115	; 0x73
   235d6:	6023      	str	r3, [r4, #0]
   235d8:	6824      	ldr	r4, [r4, #0]
   235da:	b95c      	cbnz	r4, 235f4 <rpc_transport_ipc_init+0x138>
   235dc:	4b12      	ldr	r3, [pc, #72]	; (23628 <rpc_transport_ipc_init+0x16c>)
   235de:	701c      	strb	r4, [r3, #0]
   235e0:	4b12      	ldr	r3, [pc, #72]	; (2362c <rpc_transport_ipc_init+0x170>)
   235e2:	801c      	strh	r4, [r3, #0]
   235e4:	4b12      	ldr	r3, [pc, #72]	; (23630 <rpc_transport_ipc_init+0x174>)
   235e6:	801c      	strh	r4, [r3, #0]
   235e8:	4620      	mov	r0, r4
   235ea:	b015      	add	sp, #84	; 0x54
   235ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235f0:	4698      	mov	r8, r3
   235f2:	e79e      	b.n	23532 <rpc_transport_ipc_init+0x76>
   235f4:	f7fe fcf0 	bl	21fd8 <nrfx_ipc_uninit>
   235f8:	e7f6      	b.n	235e8 <rpc_transport_ipc_init+0x12c>
   235fa:	bf00      	nop
   235fc:	00023635 	.word	0x00023635
   23600:	2000d220 	.word	0x2000d220
   23604:	2000d230 	.word	0x2000d230
   23608:	2000d228 	.word	0x2000d228
   2360c:	2000d22c 	.word	0x2000d22c
   23610:	2000da5f 	.word	0x2000da5f
   23614:	2000d224 	.word	0x2000d224
   23618:	4002a000 	.word	0x4002a000
   2361c:	2000d214 	.word	0x2000d214
   23620:	40005610 	.word	0x40005610
   23624:	000249f0 	.word	0x000249f0
   23628:	2000da60 	.word	0x2000da60
   2362c:	2000d4c8 	.word	0x2000d4c8
   23630:	2000d4c6 	.word	0x2000d4c6

00023634 <ipc_irq_handler>:
   23634:	b570      	push	{r4, r5, r6, lr}
   23636:	4604      	mov	r4, r0
   23638:	0620      	lsls	r0, r4, #24
   2363a:	d50c      	bpl.n	23656 <ipc_irq_handler+0x22>
   2363c:	f7ff fd84 	bl	23148 <ipc_trace_handle>
   23640:	f7ff fe16 	bl	23270 <rpc_trace_coredump_in_progress>
   23644:	b138      	cbz	r0, 23656 <ipc_irq_handler+0x22>
   23646:	22e0      	movs	r2, #224	; 0xe0
   23648:	4b3f      	ldr	r3, [pc, #252]	; (23748 <ipc_irq_handler+0x114>)
   2364a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   2364e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23652:	605a      	str	r2, [r3, #4]
   23654:	bd70      	pop	{r4, r5, r6, pc}
   23656:	07e1      	lsls	r1, r4, #31
   23658:	d54a      	bpl.n	236f0 <ipc_irq_handler+0xbc>
   2365a:	4a3c      	ldr	r2, [pc, #240]	; (2374c <ipc_irq_handler+0x118>)
   2365c:	f8d2 3614 	ldr.w	r3, [r2, #1556]	; 0x614
   23660:	f8d2 2618 	ldr.w	r2, [r2, #1560]	; 0x618
   23664:	f248 0202 	movw	r2, #32770	; 0x8002
   23668:	4293      	cmp	r3, r2
   2366a:	d035      	beq.n	236d8 <ipc_irq_handler+0xa4>
   2366c:	d81b      	bhi.n	236a6 <ipc_irq_handler+0x72>
   2366e:	f243 0232 	movw	r2, #12338	; 0x3032
   23672:	4293      	cmp	r3, r2
   23674:	d036      	beq.n	236e4 <ipc_irq_handler+0xb0>
   23676:	d80b      	bhi.n	23690 <ipc_irq_handler+0x5c>
   23678:	3b01      	subs	r3, #1
   2367a:	2b01      	cmp	r3, #1
   2367c:	d8ea      	bhi.n	23654 <ipc_irq_handler+0x20>
   2367e:	2203      	movs	r2, #3
   23680:	200e      	movs	r0, #14
   23682:	4b33      	ldr	r3, [pc, #204]	; (23750 <ipc_irq_handler+0x11c>)
   23684:	701a      	strb	r2, [r3, #0]
   23686:	4b33      	ldr	r3, [pc, #204]	; (23754 <ipc_irq_handler+0x120>)
   23688:	6018      	str	r0, [r3, #0]
   2368a:	f009 ff47 	bl	2d51c <rpc_transport_ipc_fault_handler>
   2368e:	e7e1      	b.n	23654 <ipc_irq_handler+0x20>
   23690:	f248 0201 	movw	r2, #32769	; 0x8001
   23694:	4293      	cmp	r3, r2
   23696:	d1dd      	bne.n	23654 <ipc_irq_handler+0x20>
   23698:	2203      	movs	r2, #3
   2369a:	4b2d      	ldr	r3, [pc, #180]	; (23750 <ipc_irq_handler+0x11c>)
   2369c:	701a      	strb	r2, [r3, #0]
   2369e:	2216      	movs	r2, #22
   236a0:	4b2c      	ldr	r3, [pc, #176]	; (23754 <ipc_irq_handler+0x120>)
   236a2:	601a      	str	r2, [r3, #0]
   236a4:	e7d6      	b.n	23654 <ipc_irq_handler+0x20>
   236a6:	4a2c      	ldr	r2, [pc, #176]	; (23758 <ipc_irq_handler+0x124>)
   236a8:	4293      	cmp	r3, r2
   236aa:	d80c      	bhi.n	236c6 <ipc_irq_handler+0x92>
   236ac:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   236b0:	d80c      	bhi.n	236cc <ipc_irq_handler+0x98>
   236b2:	f248 0203 	movw	r2, #32771	; 0x8003
   236b6:	4293      	cmp	r3, r2
   236b8:	d1cc      	bne.n	23654 <ipc_irq_handler+0x20>
   236ba:	2203      	movs	r2, #3
   236bc:	4b24      	ldr	r3, [pc, #144]	; (23750 <ipc_irq_handler+0x11c>)
   236be:	701a      	strb	r2, [r3, #0]
   236c0:	220c      	movs	r2, #12
   236c2:	4b24      	ldr	r3, [pc, #144]	; (23754 <ipc_irq_handler+0x120>)
   236c4:	e7ed      	b.n	236a2 <ipc_irq_handler+0x6e>
   236c6:	4a25      	ldr	r2, [pc, #148]	; (2375c <ipc_irq_handler+0x128>)
   236c8:	4293      	cmp	r3, r2
   236ca:	d1c3      	bne.n	23654 <ipc_irq_handler+0x20>
   236cc:	2103      	movs	r1, #3
   236ce:	4a20      	ldr	r2, [pc, #128]	; (23750 <ipc_irq_handler+0x11c>)
   236d0:	7011      	strb	r1, [r2, #0]
   236d2:	4a20      	ldr	r2, [pc, #128]	; (23754 <ipc_irq_handler+0x120>)
   236d4:	6013      	str	r3, [r2, #0]
   236d6:	e7bd      	b.n	23654 <ipc_irq_handler+0x20>
   236d8:	2203      	movs	r2, #3
   236da:	4b1d      	ldr	r3, [pc, #116]	; (23750 <ipc_irq_handler+0x11c>)
   236dc:	701a      	strb	r2, [r3, #0]
   236de:	225f      	movs	r2, #95	; 0x5f
   236e0:	4b1c      	ldr	r3, [pc, #112]	; (23754 <ipc_irq_handler+0x120>)
   236e2:	e7de      	b.n	236a2 <ipc_irq_handler+0x6e>
   236e4:	2203      	movs	r2, #3
   236e6:	4b1a      	ldr	r3, [pc, #104]	; (23750 <ipc_irq_handler+0x11c>)
   236e8:	701a      	strb	r2, [r3, #0]
   236ea:	2205      	movs	r2, #5
   236ec:	4b19      	ldr	r3, [pc, #100]	; (23754 <ipc_irq_handler+0x120>)
   236ee:	e7d8      	b.n	236a2 <ipc_irq_handler+0x6e>
   236f0:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   236f4:	d003      	beq.n	236fe <ipc_irq_handler+0xca>
   236f6:	2202      	movs	r2, #2
   236f8:	4b15      	ldr	r3, [pc, #84]	; (23750 <ipc_irq_handler+0x11c>)
   236fa:	701a      	strb	r2, [r3, #0]
   236fc:	e7aa      	b.n	23654 <ipc_irq_handler+0x20>
   236fe:	0762      	lsls	r2, r4, #29
   23700:	d505      	bpl.n	2370e <ipc_irq_handler+0xda>
   23702:	4b13      	ldr	r3, [pc, #76]	; (23750 <ipc_irq_handler+0x11c>)
   23704:	781a      	ldrb	r2, [r3, #0]
   23706:	461e      	mov	r6, r3
   23708:	b93a      	cbnz	r2, 2371a <ipc_irq_handler+0xe6>
   2370a:	f7fb f9c5 	bl	1ea98 <nrf_modem_os_application_irq_set>
   2370e:	06e3      	lsls	r3, r4, #27
   23710:	d5a0      	bpl.n	23654 <ipc_irq_handler+0x20>
   23712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23716:	f7fb b9bf 	b.w	1ea98 <nrf_modem_os_application_irq_set>
   2371a:	2a01      	cmp	r2, #1
   2371c:	d1f7      	bne.n	2370e <ipc_irq_handler+0xda>
   2371e:	4a10      	ldr	r2, [pc, #64]	; (23760 <ipc_irq_handler+0x12c>)
   23720:	4810      	ldr	r0, [pc, #64]	; (23764 <ipc_irq_handler+0x130>)
   23722:	6812      	ldr	r2, [r2, #0]
   23724:	6891      	ldr	r1, [r2, #8]
   23726:	6041      	str	r1, [r0, #4]
   23728:	6852      	ldr	r2, [r2, #4]
   2372a:	6002      	str	r2, [r0, #0]
   2372c:	b121      	cbz	r1, 23738 <ipc_irq_handler+0x104>
   2372e:	b11a      	cbz	r2, 23738 <ipc_irq_handler+0x104>
   23730:	6809      	ldr	r1, [r1, #0]
   23732:	b109      	cbz	r1, 23738 <ipc_irq_handler+0x104>
   23734:	6812      	ldr	r2, [r2, #0]
   23736:	b92a      	cbnz	r2, 23744 <ipc_irq_handler+0x110>
   23738:	2303      	movs	r3, #3
   2373a:	2205      	movs	r2, #5
   2373c:	7033      	strb	r3, [r6, #0]
   2373e:	4b05      	ldr	r3, [pc, #20]	; (23754 <ipc_irq_handler+0x120>)
   23740:	601a      	str	r2, [r3, #0]
   23742:	e7e4      	b.n	2370e <ipc_irq_handler+0xda>
   23744:	701d      	strb	r5, [r3, #0]
   23746:	e7e2      	b.n	2370e <ipc_irq_handler+0xda>
   23748:	e000e100 	.word	0xe000e100
   2374c:	4002a000 	.word	0x4002a000
   23750:	2000da5f 	.word	0x2000da5f
   23754:	2000d214 	.word	0x2000d214
   23758:	04400004 	.word	0x04400004
   2375c:	05500001 	.word	0x05500001
   23760:	2000d220 	.word	0x2000d220
   23764:	2000d218 	.word	0x2000d218

00023768 <interface_init>:
   23768:	b508      	push	{r3, lr}
   2376a:	f44f 72b0 	mov.w	r2, #352	; 0x160
   2376e:	2100      	movs	r1, #0
   23770:	4802      	ldr	r0, [pc, #8]	; (2377c <interface_init+0x14>)
   23772:	f00a fa31 	bl	2dbd8 <memset>
   23776:	2000      	movs	r0, #0
   23778:	bd08      	pop	{r3, pc}
   2377a:	bf00      	nop
   2377c:	2000d234 	.word	0x2000d234

00023780 <interface_socket_allocate>:
   23780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23782:	4606      	mov	r6, r0
   23784:	2400      	movs	r4, #0
   23786:	272c      	movs	r7, #44	; 0x2c
   23788:	4b0f      	ldr	r3, [pc, #60]	; (237c8 <interface_socket_allocate+0x48>)
   2378a:	fb07 f004 	mul.w	r0, r7, r4
   2378e:	181d      	adds	r5, r3, r0
   23790:	5818      	ldr	r0, [r3, r0]
   23792:	b988      	cbnz	r0, 237b8 <interface_socket_allocate+0x38>
   23794:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   23798:	2301      	movs	r3, #1
   2379a:	4628      	mov	r0, r5
   2379c:	61af      	str	r7, [r5, #24]
   2379e:	602b      	str	r3, [r5, #0]
   237a0:	f009 f9aa 	bl	2caf8 <packet_handler_alloc_and_init>
   237a4:	b168      	cbz	r0, 237c2 <interface_socket_allocate+0x42>
   237a6:	4628      	mov	r0, r5
   237a8:	f009 f9bd 	bl	2cb26 <socket_free>
   237ac:	200c      	movs	r0, #12
   237ae:	f008 fc1e 	bl	2bfee <nrf_modem_os_errno_set>
   237b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   237b6:	e005      	b.n	237c4 <interface_socket_allocate+0x44>
   237b8:	3401      	adds	r4, #1
   237ba:	2c08      	cmp	r4, #8
   237bc:	d1e5      	bne.n	2378a <interface_socket_allocate+0xa>
   237be:	2069      	movs	r0, #105	; 0x69
   237c0:	e7f5      	b.n	237ae <interface_socket_allocate+0x2e>
   237c2:	6035      	str	r5, [r6, #0]
   237c4:	4620      	mov	r0, r4
   237c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   237c8:	2000d234 	.word	0x2000d234

000237cc <interface_socket_free>:
   237cc:	2807      	cmp	r0, #7
   237ce:	d805      	bhi.n	237dc <interface_socket_free+0x10>
   237d0:	222c      	movs	r2, #44	; 0x2c
   237d2:	4b03      	ldr	r3, [pc, #12]	; (237e0 <interface_socket_free+0x14>)
   237d4:	fb02 3000 	mla	r0, r2, r0, r3
   237d8:	f009 b9a5 	b.w	2cb26 <socket_free>
   237dc:	4770      	bx	lr
   237de:	bf00      	nop
   237e0:	2000d234 	.word	0x2000d234

000237e4 <interface_socket_packet_handler_update>:
   237e4:	2807      	cmp	r0, #7
   237e6:	b570      	push	{r4, r5, r6, lr}
   237e8:	d812      	bhi.n	23810 <interface_socket_packet_handler_update+0x2c>
   237ea:	232c      	movs	r3, #44	; 0x2c
   237ec:	4358      	muls	r0, r3
   237ee:	4c09      	ldr	r4, [pc, #36]	; (23814 <interface_socket_packet_handler_update+0x30>)
   237f0:	5823      	ldr	r3, [r4, r0]
   237f2:	1825      	adds	r5, r4, r0
   237f4:	b163      	cbz	r3, 23810 <interface_socket_packet_handler_update+0x2c>
   237f6:	4628      	mov	r0, r5
   237f8:	69ee      	ldr	r6, [r5, #28]
   237fa:	f009 f97d 	bl	2caf8 <packet_handler_alloc_and_init>
   237fe:	4604      	mov	r4, r0
   23800:	b920      	cbnz	r0, 2380c <interface_socket_packet_handler_update+0x28>
   23802:	4630      	mov	r0, r6
   23804:	f009 fe6c 	bl	2d4e0 <packet_handler_delete>
   23808:	4620      	mov	r0, r4
   2380a:	bd70      	pop	{r4, r5, r6, pc}
   2380c:	61ee      	str	r6, [r5, #28]
   2380e:	e7fb      	b.n	23808 <interface_socket_packet_handler_update+0x24>
   23810:	2402      	movs	r4, #2
   23812:	e7f9      	b.n	23808 <interface_socket_packet_handler_update+0x24>
   23814:	2000d234 	.word	0x2000d234

00023818 <interface_socket_wait>:
   23818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2381c:	4615      	mov	r5, r2
   2381e:	222c      	movs	r2, #44	; 0x2c
   23820:	4350      	muls	r0, r2
   23822:	461e      	mov	r6, r3
   23824:	4b0e      	ldr	r3, [pc, #56]	; (23860 <interface_socket_wait+0x48>)
   23826:	460c      	mov	r4, r1
   23828:	181f      	adds	r7, r3, r0
   2382a:	581b      	ldr	r3, [r3, r0]
   2382c:	402b      	ands	r3, r5
   2382e:	428b      	cmp	r3, r1
   23830:	d102      	bne.n	23838 <interface_socket_wait+0x20>
   23832:	2000      	movs	r0, #0
   23834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23838:	687b      	ldr	r3, [r7, #4]
   2383a:	2b00      	cmp	r3, #0
   2383c:	d1f9      	bne.n	23832 <interface_socket_wait+0x1a>
   2383e:	46b8      	mov	r8, r7
   23840:	f8d8 3000 	ldr.w	r3, [r8]
   23844:	402b      	ands	r3, r5
   23846:	42a3      	cmp	r3, r4
   23848:	d0f3      	beq.n	23832 <interface_socket_wait+0x1a>
   2384a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2384e:	2b00      	cmp	r3, #0
   23850:	d1ef      	bne.n	23832 <interface_socket_wait+0x1a>
   23852:	4631      	mov	r1, r6
   23854:	4638      	mov	r0, r7
   23856:	f7fa ffdd 	bl	1e814 <nrf_modem_os_timedwait>
   2385a:	2800      	cmp	r0, #0
   2385c:	d0f0      	beq.n	23840 <interface_socket_wait+0x28>
   2385e:	e7e9      	b.n	23834 <interface_socket_wait+0x1c>
   23860:	2000d234 	.word	0x2000d234

00023864 <interface_sockets_aux_state_set>:
   23864:	4a0d      	ldr	r2, [pc, #52]	; (2389c <interface_sockets_aux_state_set+0x38>)
   23866:	b570      	push	{r4, r5, r6, lr}
   23868:	2300      	movs	r3, #0
   2386a:	4611      	mov	r1, r2
   2386c:	252c      	movs	r5, #44	; 0x2c
   2386e:	fb05 f403 	mul.w	r4, r5, r3
   23872:	590c      	ldr	r4, [r1, r4]
   23874:	b15c      	cbz	r4, 2388e <interface_sockets_aux_state_set+0x2a>
   23876:	68d4      	ldr	r4, [r2, #12]
   23878:	f024 0608 	bic.w	r6, r4, #8
   2387c:	2e02      	cmp	r6, #2
   2387e:	d001      	beq.n	23884 <interface_sockets_aux_state_set+0x20>
   23880:	2c05      	cmp	r4, #5
   23882:	d104      	bne.n	2388e <interface_sockets_aux_state_set+0x2a>
   23884:	fb05 f603 	mul.w	r6, r5, r3
   23888:	598c      	ldr	r4, [r1, r6]
   2388a:	4304      	orrs	r4, r0
   2388c:	518c      	str	r4, [r1, r6]
   2388e:	3301      	adds	r3, #1
   23890:	2b08      	cmp	r3, #8
   23892:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   23896:	d1ea      	bne.n	2386e <interface_sockets_aux_state_set+0xa>
   23898:	bd70      	pop	{r4, r5, r6, pc}
   2389a:	bf00      	nop
   2389c:	2000d234 	.word	0x2000d234

000238a0 <interface_sockets_aux_state_clear>:
   238a0:	4a0d      	ldr	r2, [pc, #52]	; (238d8 <interface_sockets_aux_state_clear+0x38>)
   238a2:	b570      	push	{r4, r5, r6, lr}
   238a4:	2300      	movs	r3, #0
   238a6:	4611      	mov	r1, r2
   238a8:	252c      	movs	r5, #44	; 0x2c
   238aa:	43c0      	mvns	r0, r0
   238ac:	fb05 f403 	mul.w	r4, r5, r3
   238b0:	590c      	ldr	r4, [r1, r4]
   238b2:	b15c      	cbz	r4, 238cc <interface_sockets_aux_state_clear+0x2c>
   238b4:	68d4      	ldr	r4, [r2, #12]
   238b6:	f024 0608 	bic.w	r6, r4, #8
   238ba:	2e02      	cmp	r6, #2
   238bc:	d001      	beq.n	238c2 <interface_sockets_aux_state_clear+0x22>
   238be:	2c05      	cmp	r4, #5
   238c0:	d104      	bne.n	238cc <interface_sockets_aux_state_clear+0x2c>
   238c2:	fb05 f603 	mul.w	r6, r5, r3
   238c6:	598c      	ldr	r4, [r1, r6]
   238c8:	4004      	ands	r4, r0
   238ca:	518c      	str	r4, [r1, r6]
   238cc:	3301      	adds	r3, #1
   238ce:	2b08      	cmp	r3, #8
   238d0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   238d4:	d1ea      	bne.n	238ac <interface_sockets_aux_state_clear+0xc>
   238d6:	bd70      	pop	{r4, r5, r6, pc}
   238d8:	2000d234 	.word	0x2000d234

000238dc <interface_from_internal_id_search>:
   238dc:	4b0a      	ldr	r3, [pc, #40]	; (23908 <interface_from_internal_id_search+0x2c>)
   238de:	4602      	mov	r2, r0
   238e0:	b530      	push	{r4, r5, lr}
   238e2:	2000      	movs	r0, #0
   238e4:	461c      	mov	r4, r3
   238e6:	212c      	movs	r1, #44	; 0x2c
   238e8:	fb01 f500 	mul.w	r5, r1, r0
   238ec:	5965      	ldr	r5, [r4, r5]
   238ee:	b115      	cbz	r5, 238f6 <interface_from_internal_id_search+0x1a>
   238f0:	699d      	ldr	r5, [r3, #24]
   238f2:	4295      	cmp	r5, r2
   238f4:	d006      	beq.n	23904 <interface_from_internal_id_search+0x28>
   238f6:	3001      	adds	r0, #1
   238f8:	2808      	cmp	r0, #8
   238fa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   238fe:	d1f3      	bne.n	238e8 <interface_from_internal_id_search+0xc>
   23900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23904:	bd30      	pop	{r4, r5, pc}
   23906:	bf00      	nop
   23908:	2000d234 	.word	0x2000d234

0002390c <interface_socket_from_handle_get>:
   2390c:	2807      	cmp	r0, #7
   2390e:	d808      	bhi.n	23922 <interface_socket_from_handle_get+0x16>
   23910:	232c      	movs	r3, #44	; 0x2c
   23912:	4343      	muls	r3, r0
   23914:	4a04      	ldr	r2, [pc, #16]	; (23928 <interface_socket_from_handle_get+0x1c>)
   23916:	18d0      	adds	r0, r2, r3
   23918:	58d3      	ldr	r3, [r2, r3]
   2391a:	2b00      	cmp	r3, #0
   2391c:	bf08      	it	eq
   2391e:	2000      	moveq	r0, #0
   23920:	4770      	bx	lr
   23922:	2000      	movs	r0, #0
   23924:	4770      	bx	lr
   23926:	bf00      	nop
   23928:	2000d234 	.word	0x2000d234

0002392c <interface_socket_setopt>:
   2392c:	2807      	cmp	r0, #7
   2392e:	b538      	push	{r3, r4, r5, lr}
   23930:	d82c      	bhi.n	2398c <interface_socket_setopt+0x60>
   23932:	242c      	movs	r4, #44	; 0x2c
   23934:	4360      	muls	r0, r4
   23936:	4d16      	ldr	r5, [pc, #88]	; (23990 <interface_socket_setopt+0x64>)
   23938:	182c      	adds	r4, r5, r0
   2393a:	5828      	ldr	r0, [r5, r0]
   2393c:	b330      	cbz	r0, 2398c <interface_socket_setopt+0x60>
   2393e:	2901      	cmp	r1, #1
   23940:	d005      	beq.n	2394e <interface_socket_setopt+0x22>
   23942:	206d      	movs	r0, #109	; 0x6d
   23944:	f008 fb53 	bl	2bfee <nrf_modem_os_errno_set>
   23948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2394c:	e01b      	b.n	23986 <interface_socket_setopt+0x5a>
   2394e:	f1a2 0114 	sub.w	r1, r2, #20
   23952:	2901      	cmp	r1, #1
   23954:	d8f5      	bhi.n	23942 <interface_socket_setopt+0x16>
   23956:	9904      	ldr	r1, [sp, #16]
   23958:	2908      	cmp	r1, #8
   2395a:	d115      	bne.n	23988 <interface_socket_setopt+0x5c>
   2395c:	b1a3      	cbz	r3, 23988 <interface_socket_setopt+0x5c>
   2395e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   23962:	6858      	ldr	r0, [r3, #4]
   23964:	2100      	movs	r1, #0
   23966:	fbb0 f0f5 	udiv	r0, r0, r5
   2396a:	681b      	ldr	r3, [r3, #0]
   2396c:	fbe5 0103 	umlal	r0, r1, r5, r3
   23970:	2901      	cmp	r1, #1
   23972:	bf08      	it	eq
   23974:	2800      	cmpeq	r0, #0
   23976:	d301      	bcc.n	2397c <interface_socket_setopt+0x50>
   23978:	2021      	movs	r0, #33	; 0x21
   2397a:	e7e3      	b.n	23944 <interface_socket_setopt+0x18>
   2397c:	2a14      	cmp	r2, #20
   2397e:	bf0c      	ite	eq
   23980:	6220      	streq	r0, [r4, #32]
   23982:	6260      	strne	r0, [r4, #36]	; 0x24
   23984:	2000      	movs	r0, #0
   23986:	bd38      	pop	{r3, r4, r5, pc}
   23988:	2016      	movs	r0, #22
   2398a:	e7db      	b.n	23944 <interface_socket_setopt+0x18>
   2398c:	2009      	movs	r0, #9
   2398e:	e7d9      	b.n	23944 <interface_socket_setopt+0x18>
   23990:	2000d234 	.word	0x2000d234

00023994 <interface_socket_getopt>:
   23994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23996:	4606      	mov	r6, r0
   23998:	2e07      	cmp	r6, #7
   2399a:	4618      	mov	r0, r3
   2399c:	4615      	mov	r5, r2
   2399e:	9b08      	ldr	r3, [sp, #32]
   239a0:	d841      	bhi.n	23a26 <interface_socket_getopt+0x92>
   239a2:	242c      	movs	r4, #44	; 0x2c
   239a4:	4374      	muls	r4, r6
   239a6:	4f21      	ldr	r7, [pc, #132]	; (23a2c <interface_socket_getopt+0x98>)
   239a8:	593a      	ldr	r2, [r7, r4]
   239aa:	193e      	adds	r6, r7, r4
   239ac:	2a00      	cmp	r2, #0
   239ae:	d03a      	beq.n	23a26 <interface_socket_getopt+0x92>
   239b0:	2901      	cmp	r1, #1
   239b2:	d005      	beq.n	239c0 <interface_socket_getopt+0x2c>
   239b4:	206d      	movs	r0, #109	; 0x6d
   239b6:	f008 fb1a 	bl	2bfee <nrf_modem_os_errno_set>
   239ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   239be:	e012      	b.n	239e6 <interface_socket_getopt+0x52>
   239c0:	b100      	cbz	r0, 239c4 <interface_socket_getopt+0x30>
   239c2:	b90b      	cbnz	r3, 239c8 <interface_socket_getopt+0x34>
   239c4:	2016      	movs	r0, #22
   239c6:	e7f6      	b.n	239b6 <interface_socket_getopt+0x22>
   239c8:	2d04      	cmp	r5, #4
   239ca:	d10e      	bne.n	239ea <interface_socket_getopt+0x56>
   239cc:	681a      	ldr	r2, [r3, #0]
   239ce:	2a00      	cmp	r2, #0
   239d0:	d0f8      	beq.n	239c4 <interface_socket_getopt+0x30>
   239d2:	2a04      	cmp	r2, #4
   239d4:	bf28      	it	cs
   239d6:	2204      	movcs	r2, #4
   239d8:	3404      	adds	r4, #4
   239da:	601a      	str	r2, [r3, #0]
   239dc:	1939      	adds	r1, r7, r4
   239de:	f00a f8ee 	bl	2dbbe <memcpy>
   239e2:	2000      	movs	r0, #0
   239e4:	6070      	str	r0, [r6, #4]
   239e6:	b003      	add	sp, #12
   239e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239ea:	f1a5 0214 	sub.w	r2, r5, #20
   239ee:	2a01      	cmp	r2, #1
   239f0:	d8e0      	bhi.n	239b4 <interface_socket_getopt+0x20>
   239f2:	681a      	ldr	r2, [r3, #0]
   239f4:	2a00      	cmp	r2, #0
   239f6:	d0e5      	beq.n	239c4 <interface_socket_getopt+0x30>
   239f8:	2a08      	cmp	r2, #8
   239fa:	bf28      	it	cs
   239fc:	2208      	movcs	r2, #8
   239fe:	601a      	str	r2, [r3, #0]
   23a00:	e9d6 4308 	ldrd	r4, r3, [r6, #32]
   23a04:	2d14      	cmp	r5, #20
   23a06:	bf18      	it	ne
   23a08:	461c      	movne	r4, r3
   23a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23a0e:	fbb4 f1f3 	udiv	r1, r4, r3
   23a12:	9100      	str	r1, [sp, #0]
   23a14:	fb03 4111 	mls	r1, r3, r1, r4
   23a18:	434b      	muls	r3, r1
   23a1a:	4669      	mov	r1, sp
   23a1c:	9301      	str	r3, [sp, #4]
   23a1e:	f00a f8ce 	bl	2dbbe <memcpy>
   23a22:	2000      	movs	r0, #0
   23a24:	e7df      	b.n	239e6 <interface_socket_getopt+0x52>
   23a26:	2009      	movs	r0, #9
   23a28:	e7c5      	b.n	239b6 <interface_socket_getopt+0x22>
   23a2a:	bf00      	nop
   23a2c:	2000d234 	.word	0x2000d234

00023a30 <interface_socket_fcntl>:
   23a30:	2807      	cmp	r0, #7
   23a32:	b510      	push	{r4, lr}
   23a34:	d82c      	bhi.n	23a90 <interface_socket_fcntl+0x60>
   23a36:	232c      	movs	r3, #44	; 0x2c
   23a38:	4343      	muls	r3, r0
   23a3a:	4c16      	ldr	r4, [pc, #88]	; (23a94 <interface_socket_fcntl+0x64>)
   23a3c:	58e0      	ldr	r0, [r4, r3]
   23a3e:	b338      	cbz	r0, 23a90 <interface_socket_fcntl+0x60>
   23a40:	2901      	cmp	r1, #1
   23a42:	d11d      	bne.n	23a80 <interface_socket_fcntl+0x50>
   23a44:	f012 0001 	ands.w	r0, r2, #1
   23a48:	58e2      	ldr	r2, [r4, r3]
   23a4a:	d004      	beq.n	23a56 <interface_socket_fcntl+0x26>
   23a4c:	2000      	movs	r0, #0
   23a4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   23a52:	50e2      	str	r2, [r4, r3]
   23a54:	bd10      	pop	{r4, pc}
   23a56:	0092      	lsls	r2, r2, #2
   23a58:	d407      	bmi.n	23a6a <interface_socket_fcntl+0x3a>
   23a5a:	58e2      	ldr	r2, [r4, r3]
   23a5c:	b292      	uxth	r2, r2
   23a5e:	2a0a      	cmp	r2, #10
   23a60:	d003      	beq.n	23a6a <interface_socket_fcntl+0x3a>
   23a62:	58e2      	ldr	r2, [r4, r3]
   23a64:	b292      	uxth	r2, r2
   23a66:	2a0b      	cmp	r2, #11
   23a68:	d105      	bne.n	23a76 <interface_socket_fcntl+0x46>
   23a6a:	200b      	movs	r0, #11
   23a6c:	f008 fabf 	bl	2bfee <nrf_modem_os_errno_set>
   23a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23a74:	e7ee      	b.n	23a54 <interface_socket_fcntl+0x24>
   23a76:	58e2      	ldr	r2, [r4, r3]
   23a78:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   23a7c:	50e2      	str	r2, [r4, r3]
   23a7e:	e7e9      	b.n	23a54 <interface_socket_fcntl+0x24>
   23a80:	2902      	cmp	r1, #2
   23a82:	d103      	bne.n	23a8c <interface_socket_fcntl+0x5c>
   23a84:	58e0      	ldr	r0, [r4, r3]
   23a86:	f3c0 7000 	ubfx	r0, r0, #28, #1
   23a8a:	e7e3      	b.n	23a54 <interface_socket_fcntl+0x24>
   23a8c:	2016      	movs	r0, #22
   23a8e:	e7ed      	b.n	23a6c <interface_socket_fcntl+0x3c>
   23a90:	2009      	movs	r0, #9
   23a92:	e7eb      	b.n	23a6c <interface_socket_fcntl+0x3c>
   23a94:	2000d234 	.word	0x2000d234

00023a98 <rpc_error_to_nrf_errno>:
   23a98:	286a      	cmp	r0, #106	; 0x6a
   23a9a:	bf9a      	itte	ls
   23a9c:	4b01      	ldrls	r3, [pc, #4]	; (23aa4 <rpc_error_to_nrf_errno+0xc>)
   23a9e:	5c18      	ldrbls	r0, [r3, r0]
   23aa0:	205f      	movhi	r0, #95	; 0x5f
   23aa2:	4770      	bx	lr
   23aa4:	000316a7 	.word	0x000316a7

00023aa8 <rpc_error_to_nrf_gai_errno>:
   23aa8:	2805      	cmp	r0, #5
   23aaa:	d013      	beq.n	23ad4 <rpc_error_to_nrf_gai_errno+0x2c>
   23aac:	d807      	bhi.n	23abe <rpc_error_to_nrf_gai_errno+0x16>
   23aae:	b170      	cbz	r0, 23ace <rpc_error_to_nrf_gai_errno+0x26>
   23ab0:	4b0b      	ldr	r3, [pc, #44]	; (23ae0 <rpc_error_to_nrf_gai_errno+0x38>)
   23ab2:	5c1b      	ldrb	r3, [r3, r0]
   23ab4:	4a0b      	ldr	r2, [pc, #44]	; (23ae4 <rpc_error_to_nrf_gai_errno+0x3c>)
   23ab6:	f240 1015 	movw	r0, #277	; 0x115
   23aba:	6013      	str	r3, [r2, #0]
   23abc:	4770      	bx	lr
   23abe:	2806      	cmp	r0, #6
   23ac0:	d00b      	beq.n	23ada <rpc_error_to_nrf_gai_errno+0x32>
   23ac2:	280d      	cmp	r0, #13
   23ac4:	d009      	beq.n	23ada <rpc_error_to_nrf_gai_errno+0x32>
   23ac6:	286a      	cmp	r0, #106	; 0x6a
   23ac8:	d9f2      	bls.n	23ab0 <rpc_error_to_nrf_gai_errno+0x8>
   23aca:	235f      	movs	r3, #95	; 0x5f
   23acc:	e7f2      	b.n	23ab4 <rpc_error_to_nrf_gai_errno+0xc>
   23ace:	4b05      	ldr	r3, [pc, #20]	; (23ae4 <rpc_error_to_nrf_gai_errno+0x3c>)
   23ad0:	6018      	str	r0, [r3, #0]
   23ad2:	4770      	bx	lr
   23ad4:	f44f 708a 	mov.w	r0, #276	; 0x114
   23ad8:	4770      	bx	lr
   23ada:	f240 1011 	movw	r0, #273	; 0x111
   23ade:	4770      	bx	lr
   23ae0:	000316a7 	.word	0x000316a7
   23ae4:	2000d39c 	.word	0x2000d39c

00023ae8 <ip_interface_init>:
   23ae8:	b510      	push	{r4, lr}
   23aea:	2400      	movs	r4, #0
   23aec:	4b06      	ldr	r3, [pc, #24]	; (23b08 <ip_interface_init+0x20>)
   23aee:	2220      	movs	r2, #32
   23af0:	601c      	str	r4, [r3, #0]
   23af2:	4b06      	ldr	r3, [pc, #24]	; (23b0c <ip_interface_init+0x24>)
   23af4:	4621      	mov	r1, r4
   23af6:	4806      	ldr	r0, [pc, #24]	; (23b10 <ip_interface_init+0x28>)
   23af8:	601c      	str	r4, [r3, #0]
   23afa:	f00a f86d 	bl	2dbd8 <memset>
   23afe:	2201      	movs	r2, #1
   23b00:	4b04      	ldr	r3, [pc, #16]	; (23b14 <ip_interface_init+0x2c>)
   23b02:	4620      	mov	r0, r4
   23b04:	701a      	strb	r2, [r3, #0]
   23b06:	bd10      	pop	{r4, pc}
   23b08:	2000d3a8 	.word	0x2000d3a8
   23b0c:	2000d3a4 	.word	0x2000d3a4
   23b10:	2000d3ac 	.word	0x2000d3ac
   23b14:	2000da62 	.word	0x2000da62

00023b18 <ip_interface_open>:
   23b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b1a:	2302      	movs	r3, #2
   23b1c:	460d      	mov	r5, r1
   23b1e:	4611      	mov	r1, r2
   23b20:	2200      	movs	r2, #0
   23b22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23b26:	b085      	sub	sp, #20
   23b28:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23b2c:	4b35      	ldr	r3, [pc, #212]	; (23c04 <ip_interface_open+0xec>)
   23b2e:	4606      	mov	r6, r0
   23b30:	781b      	ldrb	r3, [r3, #0]
   23b32:	9403      	str	r4, [sp, #12]
   23b34:	b92b      	cbnz	r3, 23b42 <ip_interface_open+0x2a>
   23b36:	2075      	movs	r0, #117	; 0x75
   23b38:	f008 fa59 	bl	2bfee <nrf_modem_os_errno_set>
   23b3c:	4620      	mov	r0, r4
   23b3e:	b005      	add	sp, #20
   23b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b42:	f020 0308 	bic.w	r3, r0, #8
   23b46:	2b02      	cmp	r3, #2
   23b48:	d003      	beq.n	23b52 <ip_interface_open+0x3a>
   23b4a:	2805      	cmp	r0, #5
   23b4c:	d001      	beq.n	23b52 <ip_interface_open+0x3a>
   23b4e:	206a      	movs	r0, #106	; 0x6a
   23b50:	e7f2      	b.n	23b38 <ip_interface_open+0x20>
   23b52:	1e6b      	subs	r3, r5, #1
   23b54:	2b02      	cmp	r3, #2
   23b56:	d814      	bhi.n	23b82 <ip_interface_open+0x6a>
   23b58:	4628      	mov	r0, r5
   23b5a:	aa02      	add	r2, sp, #8
   23b5c:	f009 f814 	bl	2cb88 <protocol_verify>
   23b60:	4607      	mov	r7, r0
   23b62:	2800      	cmp	r0, #0
   23b64:	d14b      	bne.n	23bfe <ip_interface_open+0xe6>
   23b66:	4629      	mov	r1, r5
   23b68:	4a27      	ldr	r2, [pc, #156]	; (23c08 <ip_interface_open+0xf0>)
   23b6a:	a801      	add	r0, sp, #4
   23b6c:	f7ff fe08 	bl	23780 <interface_socket_allocate>
   23b70:	9b01      	ldr	r3, [sp, #4]
   23b72:	4604      	mov	r4, r0
   23b74:	b95b      	cbnz	r3, 23b8e <ip_interface_open+0x76>
   23b76:	2669      	movs	r6, #105	; 0x69
   23b78:	4620      	mov	r0, r4
   23b7a:	f7ff fe27 	bl	237cc <interface_socket_free>
   23b7e:	4630      	mov	r0, r6
   23b80:	e000      	b.n	23b84 <ip_interface_open+0x6c>
   23b82:	2016      	movs	r0, #22
   23b84:	f008 fa33 	bl	2bfee <nrf_modem_os_errno_set>
   23b88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23b8c:	e7d6      	b.n	23b3c <ip_interface_open+0x24>
   23b8e:	9a02      	ldr	r2, [sp, #8]
   23b90:	e9c3 6503 	strd	r6, r5, [r3, #12]
   23b94:	615a      	str	r2, [r3, #20]
   23b96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23b9a:	f247 0201 	movw	r2, #28673	; 0x7001
   23b9e:	463b      	mov	r3, r7
   23ba0:	f009 f83a 	bl	2cc18 <ip_interface_request_create>
   23ba4:	4602      	mov	r2, r0
   23ba6:	2800      	cmp	r0, #0
   23ba8:	d0e5      	beq.n	23b76 <ip_interface_open+0x5e>
   23baa:	6883      	ldr	r3, [r0, #8]
   23bac:	3e02      	subs	r6, #2
   23bae:	2e08      	cmp	r6, #8
   23bb0:	f103 030c 	add.w	r3, r3, #12
   23bb4:	6083      	str	r3, [r0, #8]
   23bb6:	bf98      	it	ls
   23bb8:	4b14      	ldrls	r3, [pc, #80]	; (23c0c <ip_interface_open+0xf4>)
   23bba:	f247 0101 	movw	r1, #28673	; 0x7001
   23bbe:	bf98      	it	ls
   23bc0:	579f      	ldrsbls	r7, [r3, r6]
   23bc2:	9b02      	ldr	r3, [sp, #8]
   23bc4:	6147      	str	r7, [r0, #20]
   23bc6:	61c3      	str	r3, [r0, #28]
   23bc8:	6185      	str	r5, [r0, #24]
   23bca:	2004      	movs	r0, #4
   23bcc:	f008 ff88 	bl	2cae0 <rpc_client_request_send>
   23bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23bd4:	2102      	movs	r1, #2
   23bd6:	4620      	mov	r0, r4
   23bd8:	ab03      	add	r3, sp, #12
   23bda:	f009 f830 	bl	2cc3e <ip_interface_wait>
   23bde:	4606      	mov	r6, r0
   23be0:	2800      	cmp	r0, #0
   23be2:	d1c9      	bne.n	23b78 <ip_interface_open+0x60>
   23be4:	3d02      	subs	r5, #2
   23be6:	2d01      	cmp	r5, #1
   23be8:	d8a8      	bhi.n	23b3c <ip_interface_open+0x24>
   23bea:	9b01      	ldr	r3, [sp, #4]
   23bec:	681a      	ldr	r2, [r3, #0]
   23bee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   23bf2:	601a      	str	r2, [r3, #0]
   23bf4:	681a      	ldr	r2, [r3, #0]
   23bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   23bfa:	601a      	str	r2, [r3, #0]
   23bfc:	e79e      	b.n	23b3c <ip_interface_open+0x24>
   23bfe:	4604      	mov	r4, r0
   23c00:	e79c      	b.n	23b3c <ip_interface_open+0x24>
   23c02:	bf00      	nop
   23c04:	2000da62 	.word	0x2000da62
   23c08:	0002cb71 	.word	0x0002cb71
   23c0c:	00031699 	.word	0x00031699

00023c10 <ip_interface_close>:
   23c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23c16:	4605      	mov	r5, r0
   23c18:	9301      	str	r3, [sp, #4]
   23c1a:	f7ff fe77 	bl	2390c <interface_socket_from_handle_get>
   23c1e:	4604      	mov	r4, r0
   23c20:	b388      	cbz	r0, 23c86 <ip_interface_close+0x76>
   23c22:	f247 0209 	movw	r2, #28681	; 0x7009
   23c26:	6981      	ldr	r1, [r0, #24]
   23c28:	2300      	movs	r3, #0
   23c2a:	4628      	mov	r0, r5
   23c2c:	f008 fff4 	bl	2cc18 <ip_interface_request_create>
   23c30:	4602      	mov	r2, r0
   23c32:	b370      	cbz	r0, 23c92 <ip_interface_close+0x82>
   23c34:	6823      	ldr	r3, [r4, #0]
   23c36:	f247 0109 	movw	r1, #28681	; 0x7009
   23c3a:	0c1b      	lsrs	r3, r3, #16
   23c3c:	041b      	lsls	r3, r3, #16
   23c3e:	f043 030d 	orr.w	r3, r3, #13
   23c42:	6023      	str	r3, [r4, #0]
   23c44:	6823      	ldr	r3, [r4, #0]
   23c46:	2004      	movs	r0, #4
   23c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   23c4c:	6023      	str	r3, [r4, #0]
   23c4e:	6823      	ldr	r3, [r4, #0]
   23c50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   23c54:	6023      	str	r3, [r4, #0]
   23c56:	4c10      	ldr	r4, [pc, #64]	; (23c98 <ip_interface_close+0x88>)
   23c58:	f008 ff42 	bl	2cae0 <rpc_client_request_send>
   23c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23c60:	210e      	movs	r1, #14
   23c62:	4628      	mov	r0, r5
   23c64:	ab01      	add	r3, sp, #4
   23c66:	f008 ffea 	bl	2cc3e <ip_interface_wait>
   23c6a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   23c6e:	b120      	cbz	r0, 23c7a <ip_interface_close+0x6a>
   23c70:	f008 ff3d 	bl	2caee <rpc_client_message_free>
   23c74:	2300      	movs	r3, #0
   23c76:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   23c7a:	4628      	mov	r0, r5
   23c7c:	f7ff fda6 	bl	237cc <interface_socket_free>
   23c80:	2000      	movs	r0, #0
   23c82:	b003      	add	sp, #12
   23c84:	bd30      	pop	{r4, r5, pc}
   23c86:	2009      	movs	r0, #9
   23c88:	f008 f9b1 	bl	2bfee <nrf_modem_os_errno_set>
   23c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c90:	e7f7      	b.n	23c82 <ip_interface_close+0x72>
   23c92:	200c      	movs	r0, #12
   23c94:	e7f8      	b.n	23c88 <ip_interface_close+0x78>
   23c96:	bf00      	nop
   23c98:	2000d3ac 	.word	0x2000d3ac

00023c9c <ip_interface_sendto>:
   23c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ca0:	2700      	movs	r7, #0
   23ca2:	469a      	mov	sl, r3
   23ca4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23ca8:	2364      	movs	r3, #100	; 0x64
   23caa:	b089      	sub	sp, #36	; 0x24
   23cac:	4681      	mov	r9, r0
   23cae:	4615      	mov	r5, r2
   23cb0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   23cb4:	9102      	str	r1, [sp, #8]
   23cb6:	f8ad 7010 	strh.w	r7, [sp, #16]
   23cba:	f8ad 7012 	strh.w	r7, [sp, #18]
   23cbe:	9605      	str	r6, [sp, #20]
   23cc0:	9307      	str	r3, [sp, #28]
   23cc2:	f7ff fe23 	bl	2390c <interface_socket_from_handle_get>
   23cc6:	4604      	mov	r4, r0
   23cc8:	b930      	cbnz	r0, 23cd8 <ip_interface_sendto+0x3c>
   23cca:	2009      	movs	r0, #9
   23ccc:	f008 f98f 	bl	2bfee <nrf_modem_os_errno_set>
   23cd0:	4630      	mov	r0, r6
   23cd2:	b009      	add	sp, #36	; 0x24
   23cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cd8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   23cdc:	dd01      	ble.n	23ce2 <ip_interface_sendto+0x46>
   23cde:	207a      	movs	r0, #122	; 0x7a
   23ce0:	e7f4      	b.n	23ccc <ip_interface_sendto+0x30>
   23ce2:	f1ba 0f00 	cmp.w	sl, #0
   23ce6:	d004      	beq.n	23cf2 <ip_interface_sendto+0x56>
   23ce8:	f1ba 0f02 	cmp.w	sl, #2
   23cec:	d006      	beq.n	23cfc <ip_interface_sendto+0x60>
   23cee:	205f      	movs	r0, #95	; 0x5f
   23cf0:	e7ec      	b.n	23ccc <ip_interface_sendto+0x30>
   23cf2:	6807      	ldr	r7, [r0, #0]
   23cf4:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   23cf8:	f3c7 7700 	ubfx	r7, r7, #28, #1
   23cfc:	2d00      	cmp	r5, #0
   23cfe:	dd07      	ble.n	23d10 <ip_interface_sendto+0x74>
   23d00:	9b02      	ldr	r3, [sp, #8]
   23d02:	b92b      	cbnz	r3, 23d10 <ip_interface_sendto+0x74>
   23d04:	200e      	movs	r0, #14
   23d06:	f008 f972 	bl	2bfee <nrf_modem_os_errno_set>
   23d0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23d0e:	e7df      	b.n	23cd0 <ip_interface_sendto+0x34>
   23d10:	6923      	ldr	r3, [r4, #16]
   23d12:	f1bb 0f00 	cmp.w	fp, #0
   23d16:	d012      	beq.n	23d3e <ip_interface_sendto+0xa2>
   23d18:	2b01      	cmp	r3, #1
   23d1a:	d101      	bne.n	23d20 <ip_interface_sendto+0x84>
   23d1c:	207f      	movs	r0, #127	; 0x7f
   23d1e:	e7f2      	b.n	23d06 <ip_interface_sendto+0x6a>
   23d20:	68e2      	ldr	r2, [r4, #12]
   23d22:	f8db 3004 	ldr.w	r3, [fp, #4]
   23d26:	429a      	cmp	r2, r3
   23d28:	d001      	beq.n	23d2e <ip_interface_sendto+0x92>
   23d2a:	206a      	movs	r0, #106	; 0x6a
   23d2c:	e7eb      	b.n	23d06 <ip_interface_sendto+0x6a>
   23d2e:	f89b 3000 	ldrb.w	r3, [fp]
   23d32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23d34:	4293      	cmp	r3, r2
   23d36:	f000 80c5 	beq.w	23ec4 <ip_interface_sendto+0x228>
   23d3a:	2016      	movs	r0, #22
   23d3c:	e7e3      	b.n	23d06 <ip_interface_sendto+0x6a>
   23d3e:	2b02      	cmp	r3, #2
   23d40:	d10f      	bne.n	23d62 <ip_interface_sendto+0xc6>
   23d42:	6963      	ldr	r3, [r4, #20]
   23d44:	2b02      	cmp	r3, #2
   23d46:	d103      	bne.n	23d50 <ip_interface_sendto+0xb4>
   23d48:	6823      	ldr	r3, [r4, #0]
   23d4a:	b29b      	uxth	r3, r3
   23d4c:	2b05      	cmp	r3, #5
   23d4e:	e005      	b.n	23d5c <ip_interface_sendto+0xc0>
   23d50:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   23d54:	d10d      	bne.n	23d72 <ip_interface_sendto+0xd6>
   23d56:	6823      	ldr	r3, [r4, #0]
   23d58:	b29b      	uxth	r3, r3
   23d5a:	2b0c      	cmp	r3, #12
   23d5c:	d009      	beq.n	23d72 <ip_interface_sendto+0xd6>
   23d5e:	2080      	movs	r0, #128	; 0x80
   23d60:	e7d1      	b.n	23d06 <ip_interface_sendto+0x6a>
   23d62:	2b01      	cmp	r3, #1
   23d64:	d105      	bne.n	23d72 <ip_interface_sendto+0xd6>
   23d66:	6963      	ldr	r3, [r4, #20]
   23d68:	2b01      	cmp	r3, #1
   23d6a:	d0ed      	beq.n	23d48 <ip_interface_sendto+0xac>
   23d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   23d70:	e7f0      	b.n	23d54 <ip_interface_sendto+0xb8>
   23d72:	f247 0806 	movw	r8, #28678	; 0x7006
   23d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d78:	2b00      	cmp	r3, #0
   23d7a:	bf08      	it	eq
   23d7c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   23d80:	9306      	str	r3, [sp, #24]
   23d82:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   23d86:	9303      	str	r3, [sp, #12]
   23d88:	6823      	ldr	r3, [r4, #0]
   23d8a:	0319      	lsls	r1, r3, #12
   23d8c:	d501      	bpl.n	23d92 <ip_interface_sendto+0xf6>
   23d8e:	68a0      	ldr	r0, [r4, #8]
   23d90:	e7b9      	b.n	23d06 <ip_interface_sendto+0x6a>
   23d92:	6820      	ldr	r0, [r4, #0]
   23d94:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   23d98:	d107      	bne.n	23daa <ip_interface_sendto+0x10e>
   23d9a:	b90f      	cbnz	r7, 23da0 <ip_interface_sendto+0x104>
   23d9c:	200b      	movs	r0, #11
   23d9e:	e7b2      	b.n	23d06 <ip_interface_sendto+0x6a>
   23da0:	a906      	add	r1, sp, #24
   23da2:	f7fa fd37 	bl	1e814 <nrf_modem_os_timedwait>
   23da6:	2874      	cmp	r0, #116	; 0x74
   23da8:	d0f8      	beq.n	23d9c <ip_interface_sendto+0x100>
   23daa:	6823      	ldr	r3, [r4, #0]
   23dac:	039a      	lsls	r2, r3, #14
   23dae:	d5eb      	bpl.n	23d88 <ip_interface_sendto+0xec>
   23db0:	4628      	mov	r0, r5
   23db2:	f008 fe8f 	bl	2cad4 <rpc_client_request_alloc>
   23db6:	4606      	mov	r6, r0
   23db8:	2800      	cmp	r0, #0
   23dba:	d133      	bne.n	23e24 <ip_interface_sendto+0x188>
   23dbc:	b927      	cbnz	r7, 23dc8 <ip_interface_sendto+0x12c>
   23dbe:	a907      	add	r1, sp, #28
   23dc0:	2000      	movs	r0, #0
   23dc2:	f7fa fd27 	bl	1e814 <nrf_modem_os_timedwait>
   23dc6:	e7e9      	b.n	23d9c <ip_interface_sendto+0x100>
   23dc8:	a906      	add	r1, sp, #24
   23dca:	f7fa fd23 	bl	1e814 <nrf_modem_os_timedwait>
   23dce:	2800      	cmp	r0, #0
   23dd0:	d0ee      	beq.n	23db0 <ip_interface_sendto+0x114>
   23dd2:	e7e3      	b.n	23d9c <ip_interface_sendto+0x100>
   23dd4:	a905      	add	r1, sp, #20
   23dd6:	f7fa fd1d 	bl	1e814 <nrf_modem_os_timedwait>
   23dda:	e05b      	b.n	23e94 <ip_interface_sendto+0x1f8>
   23ddc:	f008 fe87 	bl	2caee <rpc_client_message_free>
   23de0:	2300      	movs	r3, #0
   23de2:	4a3a      	ldr	r2, [pc, #232]	; (23ecc <ip_interface_sendto+0x230>)
   23de4:	2e01      	cmp	r6, #1
   23de6:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   23dea:	d001      	beq.n	23df0 <ip_interface_sendto+0x154>
   23dec:	2e12      	cmp	r6, #18
   23dee:	d10e      	bne.n	23e0e <ip_interface_sendto+0x172>
   23df0:	4b37      	ldr	r3, [pc, #220]	; (23ed0 <ip_interface_sendto+0x234>)
   23df2:	781b      	ldrb	r3, [r3, #0]
   23df4:	b147      	cbz	r7, 23e08 <ip_interface_sendto+0x16c>
   23df6:	2b00      	cmp	r3, #0
   23df8:	d1c6      	bne.n	23d88 <ip_interface_sendto+0xec>
   23dfa:	2000      	movs	r0, #0
   23dfc:	a906      	add	r1, sp, #24
   23dfe:	f7fa fd09 	bl	1e814 <nrf_modem_os_timedwait>
   23e02:	2800      	cmp	r0, #0
   23e04:	d0c0      	beq.n	23d88 <ip_interface_sendto+0xec>
   23e06:	e7c9      	b.n	23d9c <ip_interface_sendto+0x100>
   23e08:	2b00      	cmp	r3, #0
   23e0a:	d1c7      	bne.n	23d9c <ip_interface_sendto+0x100>
   23e0c:	e7d7      	b.n	23dbe <ip_interface_sendto+0x122>
   23e0e:	2e03      	cmp	r6, #3
   23e10:	d102      	bne.n	23e18 <ip_interface_sendto+0x17c>
   23e12:	2f00      	cmp	r7, #0
   23e14:	d1f1      	bne.n	23dfa <ip_interface_sendto+0x15e>
   23e16:	e7d2      	b.n	23dbe <ip_interface_sendto+0x122>
   23e18:	2e6a      	cmp	r6, #106	; 0x6a
   23e1a:	bf96      	itet	ls
   23e1c:	4b2d      	ldrls	r3, [pc, #180]	; (23ed4 <ip_interface_sendto+0x238>)
   23e1e:	205f      	movhi	r0, #95	; 0x5f
   23e20:	5d98      	ldrbls	r0, [r3, r6]
   23e22:	e770      	b.n	23d06 <ip_interface_sendto+0x6a>
   23e24:	230c      	movs	r3, #12
   23e26:	2200      	movs	r2, #0
   23e28:	7203      	strb	r3, [r0, #8]
   23e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23e2c:	7242      	strb	r2, [r0, #9]
   23e2e:	7282      	strb	r2, [r0, #10]
   23e30:	72c2      	strb	r2, [r0, #11]
   23e32:	f8c0 a014 	str.w	sl, [r0, #20]
   23e36:	b11b      	cbz	r3, 23e40 <ip_interface_sendto+0x1a4>
   23e38:	ea4a 0303 	orr.w	r3, sl, r3
   23e3c:	6173      	str	r3, [r6, #20]
   23e3e:	62a2      	str	r2, [r4, #40]	; 0x28
   23e40:	f1bb 0f00 	cmp.w	fp, #0
   23e44:	d015      	beq.n	23e72 <ip_interface_sendto+0x1d6>
   23e46:	f106 031c 	add.w	r3, r6, #28
   23e4a:	9301      	str	r3, [sp, #4]
   23e4c:	f10d 0312 	add.w	r3, sp, #18
   23e50:	9300      	str	r3, [sp, #0]
   23e52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   23e54:	ab04      	add	r3, sp, #16
   23e56:	4659      	mov	r1, fp
   23e58:	68e0      	ldr	r0, [r4, #12]
   23e5a:	f008 feb3 	bl	2cbc4 <ip_addr_parse>
   23e5e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   23e62:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   23e66:	8332      	strh	r2, [r6, #24]
   23e68:	68b2      	ldr	r2, [r6, #8]
   23e6a:	8373      	strh	r3, [r6, #26]
   23e6c:	3304      	adds	r3, #4
   23e6e:	4413      	add	r3, r2
   23e70:	60b3      	str	r3, [r6, #8]
   23e72:	69a3      	ldr	r3, [r4, #24]
   23e74:	6075      	str	r5, [r6, #4]
   23e76:	6133      	str	r3, [r6, #16]
   23e78:	9b03      	ldr	r3, [sp, #12]
   23e7a:	60f3      	str	r3, [r6, #12]
   23e7c:	9b02      	ldr	r3, [sp, #8]
   23e7e:	b123      	cbz	r3, 23e8a <ip_interface_sendto+0x1ee>
   23e80:	462a      	mov	r2, r5
   23e82:	4619      	mov	r1, r3
   23e84:	6830      	ldr	r0, [r6, #0]
   23e86:	f009 fe9a 	bl	2dbbe <memcpy>
   23e8a:	4632      	mov	r2, r6
   23e8c:	4641      	mov	r1, r8
   23e8e:	2004      	movs	r0, #4
   23e90:	f008 fe26 	bl	2cae0 <rpc_client_request_send>
   23e94:	4b0d      	ldr	r3, [pc, #52]	; (23ecc <ip_interface_sendto+0x230>)
   23e96:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   23e9a:	2800      	cmp	r0, #0
   23e9c:	d09a      	beq.n	23dd4 <ip_interface_sendto+0x138>
   23e9e:	6946      	ldr	r6, [r0, #20]
   23ea0:	2e00      	cmp	r6, #0
   23ea2:	d19b      	bne.n	23ddc <ip_interface_sendto+0x140>
   23ea4:	6823      	ldr	r3, [r4, #0]
   23ea6:	011b      	lsls	r3, r3, #4
   23ea8:	bf49      	itett	mi
   23eaa:	6823      	ldrmi	r3, [r4, #0]
   23eac:	6985      	ldrpl	r5, [r0, #24]
   23eae:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   23eb2:	6023      	strmi	r3, [r4, #0]
   23eb4:	f008 fe1b 	bl	2caee <rpc_client_message_free>
   23eb8:	2300      	movs	r3, #0
   23eba:	4a04      	ldr	r2, [pc, #16]	; (23ecc <ip_interface_sendto+0x230>)
   23ebc:	462e      	mov	r6, r5
   23ebe:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   23ec2:	e705      	b.n	23cd0 <ip_interface_sendto+0x34>
   23ec4:	f247 0807 	movw	r8, #28679	; 0x7007
   23ec8:	e755      	b.n	23d76 <ip_interface_sendto+0xda>
   23eca:	bf00      	nop
   23ecc:	2000d3ac 	.word	0x2000d3ac
   23ed0:	2000da61 	.word	0x2000da61
   23ed4:	000316a7 	.word	0x000316a7

00023ed8 <ip_interface_socketoption_get>:
   23ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23edc:	461f      	mov	r7, r3
   23ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23ee2:	b085      	sub	sp, #20
   23ee4:	9303      	str	r3, [sp, #12]
   23ee6:	680b      	ldr	r3, [r1, #0]
   23ee8:	4606      	mov	r6, r0
   23eea:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   23eee:	025d      	lsls	r5, r3, #9
   23ef0:	460c      	mov	r4, r1
   23ef2:	4691      	mov	r9, r2
   23ef4:	d461      	bmi.n	23fba <ip_interface_socketoption_get+0xe2>
   23ef6:	680b      	ldr	r3, [r1, #0]
   23ef8:	0219      	lsls	r1, r3, #8
   23efa:	d45e      	bmi.n	23fba <ip_interface_socketoption_get+0xe2>
   23efc:	6823      	ldr	r3, [r4, #0]
   23efe:	01da      	lsls	r2, r3, #7
   23f00:	d45b      	bmi.n	23fba <ip_interface_socketoption_get+0xe2>
   23f02:	6823      	ldr	r3, [r4, #0]
   23f04:	019b      	lsls	r3, r3, #6
   23f06:	d458      	bmi.n	23fba <ip_interface_socketoption_get+0xe2>
   23f08:	6823      	ldr	r3, [r4, #0]
   23f0a:	f247 0204 	movw	r2, #28676	; 0x7004
   23f0e:	9301      	str	r3, [sp, #4]
   23f10:	6823      	ldr	r3, [r4, #0]
   23f12:	69a1      	ldr	r1, [r4, #24]
   23f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23f18:	6023      	str	r3, [r4, #0]
   23f1a:	f8d8 3000 	ldr.w	r3, [r8]
   23f1e:	f008 fe7b 	bl	2cc18 <ip_interface_request_create>
   23f22:	4605      	mov	r5, r0
   23f24:	2800      	cmp	r0, #0
   23f26:	d045      	beq.n	23fb4 <ip_interface_socketoption_get+0xdc>
   23f28:	6883      	ldr	r3, [r0, #8]
   23f2a:	4602      	mov	r2, r0
   23f2c:	3308      	adds	r3, #8
   23f2e:	6083      	str	r3, [r0, #8]
   23f30:	f8c0 9014 	str.w	r9, [r0, #20]
   23f34:	f247 0104 	movw	r1, #28676	; 0x7004
   23f38:	f8d0 9000 	ldr.w	r9, [r0]
   23f3c:	6187      	str	r7, [r0, #24]
   23f3e:	2004      	movs	r0, #4
   23f40:	f008 fdce 	bl	2cae0 <rpc_client_request_send>
   23f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   23f48:	4630      	mov	r0, r6
   23f4a:	4611      	mov	r1, r2
   23f4c:	ab03      	add	r3, sp, #12
   23f4e:	f008 fe76 	bl	2cc3e <ip_interface_wait>
   23f52:	4683      	mov	fp, r0
   23f54:	b9b8      	cbnz	r0, 23f86 <ip_interface_socketoption_get+0xae>
   23f56:	4f1a      	ldr	r7, [pc, #104]	; (23fc0 <ip_interface_socketoption_get+0xe8>)
   23f58:	f8d8 0000 	ldr.w	r0, [r8]
   23f5c:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   23f60:	b1e9      	cbz	r1, 23f9e <ip_interface_socketoption_get+0xc6>
   23f62:	684a      	ldr	r2, [r1, #4]
   23f64:	4282      	cmp	r2, r0
   23f66:	bf28      	it	cs
   23f68:	4602      	movcs	r2, r0
   23f6a:	f8c8 2000 	str.w	r2, [r8]
   23f6e:	6809      	ldr	r1, [r1, #0]
   23f70:	b191      	cbz	r1, 23f98 <ip_interface_socketoption_get+0xc0>
   23f72:	4650      	mov	r0, sl
   23f74:	f009 fe23 	bl	2dbbe <memcpy>
   23f78:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   23f7c:	f008 fdb7 	bl	2caee <rpc_client_message_free>
   23f80:	2200      	movs	r2, #0
   23f82:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   23f86:	4648      	mov	r0, r9
   23f88:	f008 fdb4 	bl	2caf4 <rpc_client_data_free>
   23f8c:	9b01      	ldr	r3, [sp, #4]
   23f8e:	6023      	str	r3, [r4, #0]
   23f90:	4658      	mov	r0, fp
   23f92:	b005      	add	sp, #20
   23f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f98:	f04f 0b16 	mov.w	fp, #22
   23f9c:	e7ec      	b.n	23f78 <ip_interface_socketoption_get+0xa0>
   23f9e:	686a      	ldr	r2, [r5, #4]
   23fa0:	4649      	mov	r1, r9
   23fa2:	4282      	cmp	r2, r0
   23fa4:	bf28      	it	cs
   23fa6:	4602      	movcs	r2, r0
   23fa8:	4650      	mov	r0, sl
   23faa:	f8c8 2000 	str.w	r2, [r8]
   23fae:	f009 fe06 	bl	2dbbe <memcpy>
   23fb2:	e7e8      	b.n	23f86 <ip_interface_socketoption_get+0xae>
   23fb4:	f04f 0b0c 	mov.w	fp, #12
   23fb8:	e7e8      	b.n	23f8c <ip_interface_socketoption_get+0xb4>
   23fba:	f04f 0b0b 	mov.w	fp, #11
   23fbe:	e7e7      	b.n	23f90 <ip_interface_socketoption_get+0xb8>
   23fc0:	2000d3ac 	.word	0x2000d3ac

00023fc4 <ip_interface_bind>:
   23fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23fcc:	4607      	mov	r7, r0
   23fce:	4690      	mov	r8, r2
   23fd0:	460e      	mov	r6, r1
   23fd2:	9303      	str	r3, [sp, #12]
   23fd4:	2900      	cmp	r1, #0
   23fd6:	d04d      	beq.n	24074 <ip_interface_bind+0xb0>
   23fd8:	2a00      	cmp	r2, #0
   23fda:	d04b      	beq.n	24074 <ip_interface_bind+0xb0>
   23fdc:	f7ff fc96 	bl	2390c <interface_socket_from_handle_get>
   23fe0:	4605      	mov	r5, r0
   23fe2:	2800      	cmp	r0, #0
   23fe4:	d048      	beq.n	24078 <ip_interface_bind+0xb4>
   23fe6:	6803      	ldr	r3, [r0, #0]
   23fe8:	b29b      	uxth	r3, r3
   23fea:	2b02      	cmp	r3, #2
   23fec:	d144      	bne.n	24078 <ip_interface_bind+0xb4>
   23fee:	6981      	ldr	r1, [r0, #24]
   23ff0:	2300      	movs	r3, #0
   23ff2:	f247 0205 	movw	r2, #28677	; 0x7005
   23ff6:	4638      	mov	r0, r7
   23ff8:	f008 fe0e 	bl	2cc18 <ip_interface_request_create>
   23ffc:	4604      	mov	r4, r0
   23ffe:	2800      	cmp	r0, #0
   24000:	d03c      	beq.n	2407c <ip_interface_bind+0xb8>
   24002:	6883      	ldr	r3, [r0, #8]
   24004:	4642      	mov	r2, r8
   24006:	3304      	adds	r3, #4
   24008:	6083      	str	r3, [r0, #8]
   2400a:	f100 0318 	add.w	r3, r0, #24
   2400e:	9301      	str	r3, [sp, #4]
   24010:	f10d 030a 	add.w	r3, sp, #10
   24014:	9300      	str	r3, [sp, #0]
   24016:	4631      	mov	r1, r6
   24018:	68e8      	ldr	r0, [r5, #12]
   2401a:	ab02      	add	r3, sp, #8
   2401c:	f008 fdd2 	bl	2cbc4 <ip_addr_parse>
   24020:	bb08      	cbnz	r0, 24066 <ip_interface_bind+0xa2>
   24022:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24026:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2402a:	82a3      	strh	r3, [r4, #20]
   2402c:	68a3      	ldr	r3, [r4, #8]
   2402e:	4e14      	ldr	r6, [pc, #80]	; (24080 <ip_interface_bind+0xbc>)
   24030:	4413      	add	r3, r2
   24032:	60a3      	str	r3, [r4, #8]
   24034:	682b      	ldr	r3, [r5, #0]
   24036:	82e2      	strh	r2, [r4, #22]
   24038:	4033      	ands	r3, r6
   2403a:	f043 0303 	orr.w	r3, r3, #3
   2403e:	4622      	mov	r2, r4
   24040:	f247 0105 	movw	r1, #28677	; 0x7005
   24044:	2004      	movs	r0, #4
   24046:	602b      	str	r3, [r5, #0]
   24048:	f008 fd4a 	bl	2cae0 <rpc_client_request_send>
   2404c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24050:	2104      	movs	r1, #4
   24052:	4638      	mov	r0, r7
   24054:	ab03      	add	r3, sp, #12
   24056:	f008 fdf2 	bl	2cc3e <ip_interface_wait>
   2405a:	b140      	cbz	r0, 2406e <ip_interface_bind+0xaa>
   2405c:	682b      	ldr	r3, [r5, #0]
   2405e:	4033      	ands	r3, r6
   24060:	f043 0302 	orr.w	r3, r3, #2
   24064:	602b      	str	r3, [r5, #0]
   24066:	f007 ffc2 	bl	2bfee <nrf_modem_os_errno_set>
   2406a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2406e:	b004      	add	sp, #16
   24070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24074:	2016      	movs	r0, #22
   24076:	e7f6      	b.n	24066 <ip_interface_bind+0xa2>
   24078:	2009      	movs	r0, #9
   2407a:	e7f4      	b.n	24066 <ip_interface_bind+0xa2>
   2407c:	200c      	movs	r0, #12
   2407e:	e7f2      	b.n	24066 <ip_interface_bind+0xa2>
   24080:	ffff0000 	.word	0xffff0000

00024084 <ip_interface_listen>:
   24084:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24086:	4605      	mov	r5, r0
   24088:	f7ff fc40 	bl	2390c <interface_socket_from_handle_get>
   2408c:	4604      	mov	r4, r0
   2408e:	2800      	cmp	r0, #0
   24090:	d03a      	beq.n	24108 <ip_interface_listen+0x84>
   24092:	6803      	ldr	r3, [r0, #0]
   24094:	b29b      	uxth	r3, r3
   24096:	2b04      	cmp	r3, #4
   24098:	d003      	beq.n	240a2 <ip_interface_listen+0x1e>
   2409a:	6803      	ldr	r3, [r0, #0]
   2409c:	b29b      	uxth	r3, r3
   2409e:	2b0b      	cmp	r3, #11
   240a0:	d134      	bne.n	2410c <ip_interface_listen+0x88>
   240a2:	2100      	movs	r1, #0
   240a4:	4628      	mov	r0, r5
   240a6:	4a1c      	ldr	r2, [pc, #112]	; (24118 <ip_interface_listen+0x94>)
   240a8:	f7ff fb9c 	bl	237e4 <interface_socket_packet_handler_update>
   240ac:	4603      	mov	r3, r0
   240ae:	bb78      	cbnz	r0, 24110 <ip_interface_listen+0x8c>
   240b0:	f247 0208 	movw	r2, #28680	; 0x7008
   240b4:	4628      	mov	r0, r5
   240b6:	69a1      	ldr	r1, [r4, #24]
   240b8:	f008 fdae 	bl	2cc18 <ip_interface_request_create>
   240bc:	4602      	mov	r2, r0
   240be:	b348      	cbz	r0, 24114 <ip_interface_listen+0x90>
   240c0:	6883      	ldr	r3, [r0, #8]
   240c2:	4e16      	ldr	r6, [pc, #88]	; (2411c <ip_interface_listen+0x98>)
   240c4:	3304      	adds	r3, #4
   240c6:	6083      	str	r3, [r0, #8]
   240c8:	6823      	ldr	r3, [r4, #0]
   240ca:	f247 0108 	movw	r1, #28680	; 0x7008
   240ce:	4033      	ands	r3, r6
   240d0:	f043 0306 	orr.w	r3, r3, #6
   240d4:	2004      	movs	r0, #4
   240d6:	6023      	str	r3, [r4, #0]
   240d8:	f008 fd02 	bl	2cae0 <rpc_client_request_send>
   240dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   240e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   240e4:	9301      	str	r3, [sp, #4]
   240e6:	2107      	movs	r1, #7
   240e8:	4628      	mov	r0, r5
   240ea:	ab01      	add	r3, sp, #4
   240ec:	f008 fda7 	bl	2cc3e <ip_interface_wait>
   240f0:	b140      	cbz	r0, 24104 <ip_interface_listen+0x80>
   240f2:	6823      	ldr	r3, [r4, #0]
   240f4:	4033      	ands	r3, r6
   240f6:	f043 0304 	orr.w	r3, r3, #4
   240fa:	6023      	str	r3, [r4, #0]
   240fc:	f007 ff77 	bl	2bfee <nrf_modem_os_errno_set>
   24100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24104:	b002      	add	sp, #8
   24106:	bd70      	pop	{r4, r5, r6, pc}
   24108:	2009      	movs	r0, #9
   2410a:	e7f7      	b.n	240fc <ip_interface_listen+0x78>
   2410c:	2016      	movs	r0, #22
   2410e:	e7f5      	b.n	240fc <ip_interface_listen+0x78>
   24110:	200b      	movs	r0, #11
   24112:	e7f3      	b.n	240fc <ip_interface_listen+0x78>
   24114:	200c      	movs	r0, #12
   24116:	e7f1      	b.n	240fc <ip_interface_listen+0x78>
   24118:	0002cb71 	.word	0x0002cb71
   2411c:	ffff0000 	.word	0xffff0000

00024120 <ip_interface_accept>:
   24120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24124:	2500      	movs	r5, #0
   24126:	4680      	mov	r8, r0
   24128:	460f      	mov	r7, r1
   2412a:	4691      	mov	r9, r2
   2412c:	9500      	str	r5, [sp, #0]
   2412e:	f7ff fbed 	bl	2390c <interface_socket_from_handle_get>
   24132:	4604      	mov	r4, r0
   24134:	2800      	cmp	r0, #0
   24136:	f000 80c7 	beq.w	242c8 <ip_interface_accept+0x1a8>
   2413a:	6903      	ldr	r3, [r0, #16]
   2413c:	2b01      	cmp	r3, #1
   2413e:	f040 80c6 	bne.w	242ce <ip_interface_accept+0x1ae>
   24142:	6803      	ldr	r3, [r0, #0]
   24144:	b29b      	uxth	r3, r3
   24146:	2b07      	cmp	r3, #7
   24148:	f040 80c3 	bne.w	242d2 <ip_interface_accept+0x1b2>
   2414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24150:	9301      	str	r3, [sp, #4]
   24152:	6803      	ldr	r3, [r0, #0]
   24154:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   24158:	d15c      	bne.n	24214 <ip_interface_accept+0xf4>
   2415a:	6803      	ldr	r3, [r0, #0]
   2415c:	03db      	lsls	r3, r3, #15
   2415e:	d45d      	bmi.n	2421c <ip_interface_accept+0xfc>
   24160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24164:	4640      	mov	r0, r8
   24166:	4611      	mov	r1, r2
   24168:	ab01      	add	r3, sp, #4
   2416a:	f008 fd68 	bl	2cc3e <ip_interface_wait>
   2416e:	4606      	mov	r6, r0
   24170:	6825      	ldr	r5, [r4, #0]
   24172:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   24176:	d053      	beq.n	24220 <ip_interface_accept+0x100>
   24178:	4668      	mov	r0, sp
   2417a:	4a58      	ldr	r2, [pc, #352]	; (242dc <ip_interface_accept+0x1bc>)
   2417c:	6921      	ldr	r1, [r4, #16]
   2417e:	f7ff faff 	bl	23780 <interface_socket_allocate>
   24182:	9b00      	ldr	r3, [sp, #0]
   24184:	4605      	mov	r5, r0
   24186:	2b00      	cmp	r3, #0
   24188:	f000 80a5 	beq.w	242d6 <ip_interface_accept+0x1b6>
   2418c:	6962      	ldr	r2, [r4, #20]
   2418e:	4640      	mov	r0, r8
   24190:	615a      	str	r2, [r3, #20]
   24192:	68e2      	ldr	r2, [r4, #12]
   24194:	69a1      	ldr	r1, [r4, #24]
   24196:	60da      	str	r2, [r3, #12]
   24198:	6922      	ldr	r2, [r4, #16]
   2419a:	611a      	str	r2, [r3, #16]
   2419c:	f247 020c 	movw	r2, #28684	; 0x700c
   241a0:	2300      	movs	r3, #0
   241a2:	f008 fd39 	bl	2cc18 <ip_interface_request_create>
   241a6:	4602      	mov	r2, r0
   241a8:	2800      	cmp	r0, #0
   241aa:	f000 8094 	beq.w	242d6 <ip_interface_accept+0x1b6>
   241ae:	6823      	ldr	r3, [r4, #0]
   241b0:	f8df b130 	ldr.w	fp, [pc, #304]	; 242e4 <ip_interface_accept+0x1c4>
   241b4:	f247 010c 	movw	r1, #28684	; 0x700c
   241b8:	ea03 030b 	and.w	r3, r3, fp
   241bc:	f043 0308 	orr.w	r3, r3, #8
   241c0:	2004      	movs	r0, #4
   241c2:	6023      	str	r3, [r4, #0]
   241c4:	f008 fc8c 	bl	2cae0 <rpc_client_request_send>
   241c8:	6823      	ldr	r3, [r4, #0]
   241ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   241ce:	ea23 030a 	bic.w	r3, r3, sl
   241d2:	6023      	str	r3, [r4, #0]
   241d4:	2109      	movs	r1, #9
   241d6:	ab01      	add	r3, sp, #4
   241d8:	4640      	mov	r0, r8
   241da:	f008 fd30 	bl	2cc3e <ip_interface_wait>
   241de:	6823      	ldr	r3, [r4, #0]
   241e0:	4606      	mov	r6, r0
   241e2:	ea43 030a 	orr.w	r3, r3, sl
   241e6:	6023      	str	r3, [r4, #0]
   241e8:	b1e0      	cbz	r0, 24224 <ip_interface_accept+0x104>
   241ea:	6823      	ldr	r3, [r4, #0]
   241ec:	ea03 030b 	and.w	r3, r3, fp
   241f0:	f043 0307 	orr.w	r3, r3, #7
   241f4:	6023      	str	r3, [r4, #0]
   241f6:	6823      	ldr	r3, [r4, #0]
   241f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   241fc:	6023      	str	r3, [r4, #0]
   241fe:	9b00      	ldr	r3, [sp, #0]
   24200:	b113      	cbz	r3, 24208 <ip_interface_accept+0xe8>
   24202:	4628      	mov	r0, r5
   24204:	f7ff fae2 	bl	237cc <interface_socket_free>
   24208:	4630      	mov	r0, r6
   2420a:	f007 fef0 	bl	2bfee <nrf_modem_os_errno_set>
   2420e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24212:	e046      	b.n	242a2 <ip_interface_accept+0x182>
   24214:	260b      	movs	r6, #11
   24216:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   2421a:	e7a9      	b.n	24170 <ip_interface_accept+0x50>
   2421c:	2616      	movs	r6, #22
   2421e:	e7a7      	b.n	24170 <ip_interface_accept+0x50>
   24220:	2e00      	cmp	r6, #0
   24222:	d1ec      	bne.n	241fe <ip_interface_accept+0xde>
   24224:	4e2e      	ldr	r6, [pc, #184]	; (242e0 <ip_interface_accept+0x1c0>)
   24226:	9800      	ldr	r0, [sp, #0]
   24228:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   2422c:	699a      	ldr	r2, [r3, #24]
   2422e:	6182      	str	r2, [r0, #24]
   24230:	b1c7      	cbz	r7, 24264 <ip_interface_accept+0x144>
   24232:	68c2      	ldr	r2, [r0, #12]
   24234:	2a0a      	cmp	r2, #10
   24236:	d137      	bne.n	242a8 <ip_interface_accept+0x188>
   24238:	f8d9 1000 	ldr.w	r1, [r9]
   2423c:	2924      	cmp	r1, #36	; 0x24
   2423e:	d111      	bne.n	24264 <ip_interface_accept+0x144>
   24240:	7039      	strb	r1, [r7, #0]
   24242:	607a      	str	r2, [r7, #4]
   24244:	7f1a      	ldrb	r2, [r3, #28]
   24246:	7f59      	ldrb	r1, [r3, #29]
   24248:	3710      	adds	r7, #16
   2424a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2424e:	f827 2c08 	strh.w	r2, [r7, #-8]
   24252:	f103 0220 	add.w	r2, r3, #32
   24256:	3330      	adds	r3, #48	; 0x30
   24258:	f852 1b04 	ldr.w	r1, [r2], #4
   2425c:	429a      	cmp	r2, r3
   2425e:	f847 1b04 	str.w	r1, [r7], #4
   24262:	d1f9      	bne.n	24258 <ip_interface_accept+0x138>
   24264:	6802      	ldr	r2, [r0, #0]
   24266:	491f      	ldr	r1, [pc, #124]	; (242e4 <ip_interface_accept+0x1c4>)
   24268:	400a      	ands	r2, r1
   2426a:	f042 0205 	orr.w	r2, r2, #5
   2426e:	6002      	str	r2, [r0, #0]
   24270:	6802      	ldr	r2, [r0, #0]
   24272:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   24276:	6002      	str	r2, [r0, #0]
   24278:	6802      	ldr	r2, [r0, #0]
   2427a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2427e:	6002      	str	r2, [r0, #0]
   24280:	6823      	ldr	r3, [r4, #0]
   24282:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   24286:	400b      	ands	r3, r1
   24288:	f043 0307 	orr.w	r3, r3, #7
   2428c:	6023      	str	r3, [r4, #0]
   2428e:	6823      	ldr	r3, [r4, #0]
   24290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   24294:	6023      	str	r3, [r4, #0]
   24296:	f008 fc2a 	bl	2caee <rpc_client_message_free>
   2429a:	2300      	movs	r3, #0
   2429c:	4628      	mov	r0, r5
   2429e:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   242a2:	b003      	add	sp, #12
   242a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242a8:	2a02      	cmp	r2, #2
   242aa:	d1db      	bne.n	24264 <ip_interface_accept+0x144>
   242ac:	f8d9 1000 	ldr.w	r1, [r9]
   242b0:	2910      	cmp	r1, #16
   242b2:	d1d7      	bne.n	24264 <ip_interface_accept+0x144>
   242b4:	7039      	strb	r1, [r7, #0]
   242b6:	607a      	str	r2, [r7, #4]
   242b8:	7f1a      	ldrb	r2, [r3, #28]
   242ba:	7f59      	ldrb	r1, [r3, #29]
   242bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   242c0:	813a      	strh	r2, [r7, #8]
   242c2:	6a1b      	ldr	r3, [r3, #32]
   242c4:	60fb      	str	r3, [r7, #12]
   242c6:	e7cd      	b.n	24264 <ip_interface_accept+0x144>
   242c8:	2609      	movs	r6, #9
   242ca:	4605      	mov	r5, r0
   242cc:	e797      	b.n	241fe <ip_interface_accept+0xde>
   242ce:	265f      	movs	r6, #95	; 0x5f
   242d0:	e795      	b.n	241fe <ip_interface_accept+0xde>
   242d2:	2616      	movs	r6, #22
   242d4:	e793      	b.n	241fe <ip_interface_accept+0xde>
   242d6:	260c      	movs	r6, #12
   242d8:	e791      	b.n	241fe <ip_interface_accept+0xde>
   242da:	bf00      	nop
   242dc:	0002cb71 	.word	0x0002cb71
   242e0:	2000d3ac 	.word	0x2000d3ac
   242e4:	ffff0000 	.word	0xffff0000

000242e8 <ip_interface_setopt>:
   242e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   242ec:	2901      	cmp	r1, #1
   242ee:	4606      	mov	r6, r0
   242f0:	4690      	mov	r8, r2
   242f2:	461d      	mov	r5, r3
   242f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   242f6:	d008      	beq.n	2430a <ip_interface_setopt+0x22>
   242f8:	206d      	movs	r0, #109	; 0x6d
   242fa:	f007 fe78 	bl	2bfee <nrf_modem_os_errno_set>
   242fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24302:	4620      	mov	r0, r4
   24304:	b004      	add	sp, #16
   24306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2430a:	f7ff faff 	bl	2390c <interface_socket_from_handle_get>
   2430e:	4604      	mov	r4, r0
   24310:	b908      	cbnz	r0, 24316 <ip_interface_setopt+0x2e>
   24312:	2009      	movs	r0, #9
   24314:	e7f1      	b.n	242fa <ip_interface_setopt+0x12>
   24316:	f1a8 0319 	sub.w	r3, r8, #25
   2431a:	2b1e      	cmp	r3, #30
   2431c:	f200 8086 	bhi.w	2442c <ip_interface_setopt+0x144>
   24320:	e8df f003 	tbb	[pc, r3]
   24324:	84848410 	.word	0x84848410
   24328:	51493d84 	.word	0x51493d84
   2432c:	84848484 	.word	0x84848484
   24330:	59848484 	.word	0x59848484
   24334:	84848484 	.word	0x84848484
   24338:	84848484 	.word	0x84848484
   2433c:	73666184 	.word	0x73666184
   24340:	7976      	.short	0x7976
   24342:	7c          	.byte	0x7c
   24343:	00          	.byte	0x00
   24344:	b90d      	cbnz	r5, 2434a <ip_interface_setopt+0x62>
   24346:	200e      	movs	r0, #14
   24348:	e7d7      	b.n	242fa <ip_interface_setopt+0x12>
   2434a:	4628      	mov	r0, r5
   2434c:	f7f5 f906 	bl	1955c <strlen>
   24350:	42b8      	cmp	r0, r7
   24352:	d1f8      	bne.n	24346 <ip_interface_setopt+0x5e>
   24354:	6823      	ldr	r3, [r4, #0]
   24356:	b29b      	uxth	r3, r3
   24358:	2b02      	cmp	r3, #2
   2435a:	d1da      	bne.n	24312 <ip_interface_setopt+0x2a>
   2435c:	4628      	mov	r0, r5
   2435e:	4937      	ldr	r1, [pc, #220]	; (2443c <ip_interface_setopt+0x154>)
   24360:	f009 fddd 	bl	2df1e <strstr>
   24364:	b108      	cbz	r0, 2436a <ip_interface_setopt+0x82>
   24366:	4285      	cmp	r5, r0
   24368:	d001      	beq.n	2436e <ip_interface_setopt+0x86>
   2436a:	2016      	movs	r0, #22
   2436c:	e7c5      	b.n	242fa <ip_interface_setopt+0x12>
   2436e:	4833      	ldr	r0, [pc, #204]	; (2443c <ip_interface_setopt+0x154>)
   24370:	f7f5 f8f4 	bl	1955c <strlen>
   24374:	220a      	movs	r2, #10
   24376:	2100      	movs	r1, #0
   24378:	4428      	add	r0, r5
   2437a:	f005 fb75 	bl	29a68 <strtoul>
   2437e:	2304      	movs	r3, #4
   24380:	9301      	str	r3, [sp, #4]
   24382:	ab03      	add	r3, sp, #12
   24384:	4621      	mov	r1, r4
   24386:	9003      	str	r0, [sp, #12]
   24388:	9300      	str	r3, [sp, #0]
   2438a:	2208      	movs	r2, #8
   2438c:	f243 0310 	movw	r3, #12304	; 0x3010
   24390:	4630      	mov	r0, r6
   24392:	f008 fdfc 	bl	2cf8e <ip_interface_socketoption_send>
   24396:	4604      	mov	r4, r0
   24398:	2800      	cmp	r0, #0
   2439a:	d0b2      	beq.n	24302 <ip_interface_setopt+0x1a>
   2439c:	e7ad      	b.n	242fa <ip_interface_setopt+0x12>
   2439e:	4602      	mov	r2, r0
   243a0:	4633      	mov	r3, r6
   243a2:	f248 0101 	movw	r1, #32769	; 0x8001
   243a6:	f44f 7000 	mov.w	r0, #512	; 0x200
   243aa:	e9cd 5700 	strd	r5, r7, [sp]
   243ae:	f008 fe39 	bl	2d024 <setopt_check_and_send_int>
   243b2:	4604      	mov	r4, r0
   243b4:	e7a5      	b.n	24302 <ip_interface_setopt+0x1a>
   243b6:	4602      	mov	r2, r0
   243b8:	4633      	mov	r3, r6
   243ba:	f244 0110 	movw	r1, #16400	; 0x4010
   243be:	2004      	movs	r0, #4
   243c0:	e9cd 5700 	strd	r5, r7, [sp]
   243c4:	e7f3      	b.n	243ae <ip_interface_setopt+0xc6>
   243c6:	4602      	mov	r2, r0
   243c8:	4633      	mov	r3, r6
   243ca:	f246 0110 	movw	r1, #24592	; 0x6010
   243ce:	2006      	movs	r0, #6
   243d0:	e9cd 5700 	strd	r5, r7, [sp]
   243d4:	e7eb      	b.n	243ae <ip_interface_setopt+0xc6>
   243d6:	4602      	mov	r2, r0
   243d8:	4633      	mov	r3, r6
   243da:	f241 0104 	movw	r1, #4100	; 0x1004
   243de:	2008      	movs	r0, #8
   243e0:	e9cd 5700 	strd	r5, r7, [sp]
   243e4:	e7e3      	b.n	243ae <ip_interface_setopt+0xc6>
   243e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   243ea:	62a3      	str	r3, [r4, #40]	; 0x28
   243ec:	2400      	movs	r4, #0
   243ee:	e788      	b.n	24302 <ip_interface_setopt+0x1a>
   243f0:	2400      	movs	r4, #0
   243f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   243f6:	4622      	mov	r2, r4
   243f8:	6283      	str	r3, [r0, #40]	; 0x28
   243fa:	4621      	mov	r1, r4
   243fc:	4623      	mov	r3, r4
   243fe:	4630      	mov	r0, r6
   24400:	e9cd 4400 	strd	r4, r4, [sp]
   24404:	f7ff fc4a 	bl	23c9c <ip_interface_sendto>
   24408:	e77b      	b.n	24302 <ip_interface_setopt+0x1a>
   2440a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2440e:	e7ec      	b.n	243ea <ip_interface_setopt+0x102>
   24410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   24414:	e7e9      	b.n	243ea <ip_interface_setopt+0x102>
   24416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2441a:	e7e6      	b.n	243ea <ip_interface_setopt+0x102>
   2441c:	4602      	mov	r2, r0
   2441e:	4633      	mov	r3, r6
   24420:	f245 0106 	movw	r1, #20486	; 0x5006
   24424:	2001      	movs	r0, #1
   24426:	e9cd 5700 	strd	r5, r7, [sp]
   2442a:	e7c0      	b.n	243ae <ip_interface_setopt+0xc6>
   2442c:	462b      	mov	r3, r5
   2442e:	4642      	mov	r2, r8
   24430:	2101      	movs	r1, #1
   24432:	4630      	mov	r0, r6
   24434:	9700      	str	r7, [sp, #0]
   24436:	f7ff fa79 	bl	2392c <interface_socket_setopt>
   2443a:	e7ba      	b.n	243b2 <ip_interface_setopt+0xca>
   2443c:	00031695 	.word	0x00031695

00024440 <ip_interface_getaddrinfo>:
   24440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24444:	b087      	sub	sp, #28
   24446:	9301      	str	r3, [sp, #4]
   24448:	4b72      	ldr	r3, [pc, #456]	; (24614 <ip_interface_getaddrinfo+0x1d4>)
   2444a:	4680      	mov	r8, r0
   2444c:	781b      	ldrb	r3, [r3, #0]
   2444e:	460f      	mov	r7, r1
   24450:	4614      	mov	r4, r2
   24452:	b93b      	cbnz	r3, 24464 <ip_interface_getaddrinfo+0x24>
   24454:	2075      	movs	r0, #117	; 0x75
   24456:	f007 fdca 	bl	2bfee <nrf_modem_os_errno_set>
   2445a:	f240 1015 	movw	r0, #277	; 0x115
   2445e:	b007      	add	sp, #28
   24460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24464:	4d6c      	ldr	r5, [pc, #432]	; (24618 <ip_interface_getaddrinfo+0x1d8>)
   24466:	682e      	ldr	r6, [r5, #0]
   24468:	2e00      	cmp	r6, #0
   2446a:	f040 80d0 	bne.w	2460e <ip_interface_getaddrinfo+0x1ce>
   2446e:	2301      	movs	r3, #1
   24470:	486a      	ldr	r0, [pc, #424]	; (2461c <ip_interface_getaddrinfo+0x1dc>)
   24472:	496b      	ldr	r1, [pc, #428]	; (24620 <ip_interface_getaddrinfo+0x1e0>)
   24474:	4a6b      	ldr	r2, [pc, #428]	; (24624 <ip_interface_getaddrinfo+0x1e4>)
   24476:	602b      	str	r3, [r5, #0]
   24478:	6003      	str	r3, [r0, #0]
   2447a:	4b6b      	ldr	r3, [pc, #428]	; (24628 <ip_interface_getaddrinfo+0x1e8>)
   2447c:	468a      	mov	sl, r1
   2447e:	4691      	mov	r9, r2
   24480:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 24638 <ip_interface_getaddrinfo+0x1f8>
   24484:	600e      	str	r6, [r1, #0]
   24486:	6016      	str	r6, [r2, #0]
   24488:	801e      	strh	r6, [r3, #0]
   2448a:	9002      	str	r0, [sp, #8]
   2448c:	b194      	cbz	r4, 244b4 <ip_interface_getaddrinfo+0x74>
   2448e:	68e2      	ldr	r2, [r4, #12]
   24490:	b182      	cbz	r2, 244b4 <ip_interface_getaddrinfo+0x74>
   24492:	f8cb 2000 	str.w	r2, [fp]
   24496:	b93f      	cbnz	r7, 244a8 <ip_interface_getaddrinfo+0x68>
   24498:	68a0      	ldr	r0, [r4, #8]
   2449a:	2803      	cmp	r0, #3
   2449c:	d146      	bne.n	2452c <ip_interface_getaddrinfo+0xec>
   2449e:	2300      	movs	r3, #0
   244a0:	f44f 7089 	mov.w	r0, #274	; 0x112
   244a4:	602b      	str	r3, [r5, #0]
   244a6:	e7da      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   244a8:	6822      	ldr	r2, [r4, #0]
   244aa:	04d1      	lsls	r1, r2, #19
   244ac:	d508      	bpl.n	244c0 <ip_interface_getaddrinfo+0x80>
   244ae:	0552      	lsls	r2, r2, #21
   244b0:	d406      	bmi.n	244c0 <ip_interface_getaddrinfo+0x80>
   244b2:	e7f1      	b.n	24498 <ip_interface_getaddrinfo+0x58>
   244b4:	2201      	movs	r2, #1
   244b6:	f8cb 2000 	str.w	r2, [fp]
   244ba:	b187      	cbz	r7, 244de <ip_interface_getaddrinfo+0x9e>
   244bc:	2c00      	cmp	r4, #0
   244be:	d1f3      	bne.n	244a8 <ip_interface_getaddrinfo+0x68>
   244c0:	220a      	movs	r2, #10
   244c2:	2100      	movs	r1, #0
   244c4:	4638      	mov	r0, r7
   244c6:	f005 f9b3 	bl	29830 <strtol>
   244ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   244ce:	1e41      	subs	r1, r0, #1
   244d0:	4291      	cmp	r1, r2
   244d2:	4b55      	ldr	r3, [pc, #340]	; (24628 <ip_interface_getaddrinfo+0x1e8>)
   244d4:	d8e3      	bhi.n	2449e <ip_interface_getaddrinfo+0x5e>
   244d6:	0202      	lsls	r2, r0, #8
   244d8:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   244dc:	8018      	strh	r0, [r3, #0]
   244de:	2c00      	cmp	r4, #0
   244e0:	d1da      	bne.n	24498 <ip_interface_getaddrinfo+0x58>
   244e2:	f1b8 0f00 	cmp.w	r8, #0
   244e6:	d003      	beq.n	244f0 <ip_interface_getaddrinfo+0xb0>
   244e8:	4640      	mov	r0, r8
   244ea:	f7f5 f837 	bl	1955c <strlen>
   244ee:	4606      	mov	r6, r0
   244f0:	2f00      	cmp	r7, #0
   244f2:	d03c      	beq.n	2456e <ip_interface_getaddrinfo+0x12e>
   244f4:	2c00      	cmp	r4, #0
   244f6:	d03a      	beq.n	2456e <ip_interface_getaddrinfo+0x12e>
   244f8:	6823      	ldr	r3, [r4, #0]
   244fa:	04db      	lsls	r3, r3, #19
   244fc:	d537      	bpl.n	2456e <ip_interface_getaddrinfo+0x12e>
   244fe:	213a      	movs	r1, #58	; 0x3a
   24500:	4638      	mov	r0, r7
   24502:	f009 fcc4 	bl	2de8e <strchr>
   24506:	bb48      	cbnz	r0, 2455c <ip_interface_getaddrinfo+0x11c>
   24508:	4601      	mov	r1, r0
   2450a:	220a      	movs	r2, #10
   2450c:	4638      	mov	r0, r7
   2450e:	f005 faab 	bl	29a68 <strtoul>
   24512:	4601      	mov	r1, r0
   24514:	4633      	mov	r3, r6
   24516:	f247 020d 	movw	r2, #28685	; 0x700d
   2451a:	4608      	mov	r0, r1
   2451c:	f008 fb7c 	bl	2cc18 <ip_interface_request_create>
   24520:	4607      	mov	r7, r0
   24522:	bb38      	cbnz	r0, 24574 <ip_interface_getaddrinfo+0x134>
   24524:	6028      	str	r0, [r5, #0]
   24526:	f240 100f 	movw	r0, #271	; 0x10f
   2452a:	e798      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   2452c:	6863      	ldr	r3, [r4, #4]
   2452e:	2b0a      	cmp	r3, #10
   24530:	d007      	beq.n	24542 <ip_interface_getaddrinfo+0x102>
   24532:	f033 0302 	bics.w	r3, r3, #2
   24536:	d004      	beq.n	24542 <ip_interface_getaddrinfo+0x102>
   24538:	2300      	movs	r3, #0
   2453a:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2453e:	602b      	str	r3, [r5, #0]
   24540:	e78d      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   24542:	2301      	movs	r3, #1
   24544:	68e1      	ldr	r1, [r4, #12]
   24546:	aa05      	add	r2, sp, #20
   24548:	9305      	str	r3, [sp, #20]
   2454a:	f008 fb1d 	bl	2cb88 <protocol_verify>
   2454e:	2800      	cmp	r0, #0
   24550:	d0c7      	beq.n	244e2 <ip_interface_getaddrinfo+0xa2>
   24552:	2300      	movs	r3, #0
   24554:	f240 1013 	movw	r0, #275	; 0x113
   24558:	602b      	str	r3, [r5, #0]
   2455a:	e780      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   2455c:	9003      	str	r0, [sp, #12]
   2455e:	4833      	ldr	r0, [pc, #204]	; (2462c <ip_interface_getaddrinfo+0x1ec>)
   24560:	f7f4 fffc 	bl	1955c <strlen>
   24564:	9b03      	ldr	r3, [sp, #12]
   24566:	220a      	movs	r2, #10
   24568:	2100      	movs	r1, #0
   2456a:	4418      	add	r0, r3
   2456c:	e7cf      	b.n	2450e <ip_interface_getaddrinfo+0xce>
   2456e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24572:	e7cf      	b.n	24514 <ip_interface_getaddrinfo+0xd4>
   24574:	2c00      	cmp	r4, #0
   24576:	d03a      	beq.n	245ee <ip_interface_getaddrinfo+0x1ae>
   24578:	68a3      	ldr	r3, [r4, #8]
   2457a:	9a02      	ldr	r2, [sp, #8]
   2457c:	2b02      	cmp	r3, #2
   2457e:	6013      	str	r3, [r2, #0]
   24580:	6862      	ldr	r2, [r4, #4]
   24582:	bf08      	it	eq
   24584:	f8cb 3000 	streq.w	r3, [fp]
   24588:	3a02      	subs	r2, #2
   2458a:	2a08      	cmp	r2, #8
   2458c:	bf8e      	itee	hi
   2458e:	2200      	movhi	r2, #0
   24590:	4927      	ldrls	r1, [pc, #156]	; (24630 <ip_interface_getaddrinfo+0x1f0>)
   24592:	568a      	ldrsbls	r2, [r1, r2]
   24594:	6182      	str	r2, [r0, #24]
   24596:	68e2      	ldr	r2, [r4, #12]
   24598:	61c3      	str	r3, [r0, #28]
   2459a:	2300      	movs	r3, #0
   2459c:	6202      	str	r2, [r0, #32]
   2459e:	7503      	strb	r3, [r0, #20]
   245a0:	7543      	strb	r3, [r0, #21]
   245a2:	7583      	strb	r3, [r0, #22]
   245a4:	75c3      	strb	r3, [r0, #23]
   245a6:	68bb      	ldr	r3, [r7, #8]
   245a8:	3310      	adds	r3, #16
   245aa:	60bb      	str	r3, [r7, #8]
   245ac:	f1b8 0f00 	cmp.w	r8, #0
   245b0:	d005      	beq.n	245be <ip_interface_getaddrinfo+0x17e>
   245b2:	6838      	ldr	r0, [r7, #0]
   245b4:	b118      	cbz	r0, 245be <ip_interface_getaddrinfo+0x17e>
   245b6:	4632      	mov	r2, r6
   245b8:	4641      	mov	r1, r8
   245ba:	f009 fb00 	bl	2dbbe <memcpy>
   245be:	463a      	mov	r2, r7
   245c0:	f247 010d 	movw	r1, #28685	; 0x700d
   245c4:	2004      	movs	r0, #4
   245c6:	f008 fa8b 	bl	2cae0 <rpc_client_request_send>
   245ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   245ce:	9305      	str	r3, [sp, #20]
   245d0:	4638      	mov	r0, r7
   245d2:	a905      	add	r1, sp, #20
   245d4:	f7fa f91e 	bl	1e814 <nrf_modem_os_timedwait>
   245d8:	682b      	ldr	r3, [r5, #0]
   245da:	2b01      	cmp	r3, #1
   245dc:	d0f8      	beq.n	245d0 <ip_interface_getaddrinfo+0x190>
   245de:	f8d9 0000 	ldr.w	r0, [r9]
   245e2:	b950      	cbnz	r0, 245fa <ip_interface_getaddrinfo+0x1ba>
   245e4:	f8da 3000 	ldr.w	r3, [sl]
   245e8:	9a01      	ldr	r2, [sp, #4]
   245ea:	6013      	str	r3, [r2, #0]
   245ec:	e737      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   245ee:	2210      	movs	r2, #16
   245f0:	4621      	mov	r1, r4
   245f2:	3014      	adds	r0, #20
   245f4:	f009 faf0 	bl	2dbd8 <memset>
   245f8:	e7d5      	b.n	245a6 <ip_interface_getaddrinfo+0x166>
   245fa:	2300      	movs	r3, #0
   245fc:	602b      	str	r3, [r5, #0]
   245fe:	4b0d      	ldr	r3, [pc, #52]	; (24634 <ip_interface_getaddrinfo+0x1f4>)
   24600:	6818      	ldr	r0, [r3, #0]
   24602:	b108      	cbz	r0, 24608 <ip_interface_getaddrinfo+0x1c8>
   24604:	f007 fcf3 	bl	2bfee <nrf_modem_os_errno_set>
   24608:	f8d9 0000 	ldr.w	r0, [r9]
   2460c:	e727      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   2460e:	f44f 708a 	mov.w	r0, #276	; 0x114
   24612:	e724      	b.n	2445e <ip_interface_getaddrinfo+0x1e>
   24614:	2000da62 	.word	0x2000da62
   24618:	2000d3a4 	.word	0x2000d3a4
   2461c:	2000d398 	.word	0x2000d398
   24620:	2000d3a8 	.word	0x2000d3a8
   24624:	2000d3a0 	.word	0x2000d3a0
   24628:	2000d4ca 	.word	0x2000d4ca
   2462c:	00031740 	.word	0x00031740
   24630:	00031699 	.word	0x00031699
   24634:	2000d39c 	.word	0x2000d39c
   24638:	2000d394 	.word	0x2000d394

0002463c <ip_interface_freeaddrinfo>:
   2463c:	b538      	push	{r3, r4, r5, lr}
   2463e:	4d0a      	ldr	r5, [pc, #40]	; (24668 <ip_interface_freeaddrinfo+0x2c>)
   24640:	4604      	mov	r4, r0
   24642:	682a      	ldr	r2, [r5, #0]
   24644:	2a02      	cmp	r2, #2
   24646:	d10e      	bne.n	24666 <ip_interface_freeaddrinfo+0x2a>
   24648:	b148      	cbz	r0, 2465e <ip_interface_freeaddrinfo+0x22>
   2464a:	6940      	ldr	r0, [r0, #20]
   2464c:	f7fa fa4c 	bl	1eae8 <nrf_modem_os_free>
   24650:	69a0      	ldr	r0, [r4, #24]
   24652:	b108      	cbz	r0, 24658 <ip_interface_freeaddrinfo+0x1c>
   24654:	f7fa fa48 	bl	1eae8 <nrf_modem_os_free>
   24658:	4620      	mov	r0, r4
   2465a:	f7fa fa45 	bl	1eae8 <nrf_modem_os_free>
   2465e:	2300      	movs	r3, #0
   24660:	4a02      	ldr	r2, [pc, #8]	; (2466c <ip_interface_freeaddrinfo+0x30>)
   24662:	602b      	str	r3, [r5, #0]
   24664:	6013      	str	r3, [r2, #0]
   24666:	bd38      	pop	{r3, r4, r5, pc}
   24668:	2000d3a4 	.word	0x2000d3a4
   2466c:	2000d3a0 	.word	0x2000d3a0

00024670 <rpc_ip_event_handler>:
   24670:	f248 030f 	movw	r3, #32783	; 0x800f
   24674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24678:	4299      	cmp	r1, r3
   2467a:	4604      	mov	r4, r0
   2467c:	460e      	mov	r6, r1
   2467e:	b089      	sub	sp, #36	; 0x24
   24680:	f000 80a4 	beq.w	247cc <rpc_ip_event_handler+0x15c>
   24684:	f249 0304 	movw	r3, #36868	; 0x9004
   24688:	4299      	cmp	r1, r3
   2468a:	f000 80ab 	beq.w	247e4 <rpc_ip_event_handler+0x174>
   2468e:	f248 030d 	movw	r3, #32781	; 0x800d
   24692:	4299      	cmp	r1, r3
   24694:	f040 80b8 	bne.w	24808 <rpc_ip_event_handler+0x198>
   24698:	4bbc      	ldr	r3, [pc, #752]	; (2498c <rpc_ip_event_handler+0x31c>)
   2469a:	681a      	ldr	r2, [r3, #0]
   2469c:	9303      	str	r3, [sp, #12]
   2469e:	2a01      	cmp	r2, #1
   246a0:	d12d      	bne.n	246fe <rpc_ip_event_handler+0x8e>
   246a2:	6940      	ldr	r0, [r0, #20]
   246a4:	2800      	cmp	r0, #0
   246a6:	f040 808c 	bne.w	247c2 <rpc_ip_event_handler+0x152>
   246aa:	f8d4 a018 	ldr.w	sl, [r4, #24]
   246ae:	f8d4 8000 	ldr.w	r8, [r4]
   246b2:	ea4f 134a 	mov.w	r3, sl, lsl #5
   246b6:	4618      	mov	r0, r3
   246b8:	9301      	str	r3, [sp, #4]
   246ba:	f7fa fa0d 	bl	1ead8 <nrf_modem_os_alloc>
   246be:	4607      	mov	r7, r0
   246c0:	b310      	cbz	r0, 24708 <rpc_ip_event_handler+0x98>
   246c2:	2024      	movs	r0, #36	; 0x24
   246c4:	fb00 f00a 	mul.w	r0, r0, sl
   246c8:	f7fa fa06 	bl	1ead8 <nrf_modem_os_alloc>
   246cc:	4605      	mov	r5, r0
   246ce:	b1e8      	cbz	r0, 2470c <rpc_ip_event_handler+0x9c>
   246d0:	2604      	movs	r6, #4
   246d2:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   246d6:	f107 0920 	add.w	r9, r7, #32
   246da:	9302      	str	r3, [sp, #8]
   246dc:	9b02      	ldr	r3, [sp, #8]
   246de:	42ab      	cmp	r3, r5
   246e0:	d118      	bne.n	24714 <rpc_ip_event_handler+0xa4>
   246e2:	f1ba 0f00 	cmp.w	sl, #0
   246e6:	d005      	beq.n	246f4 <rpc_ip_event_handler+0x84>
   246e8:	9b01      	ldr	r3, [sp, #4]
   246ea:	443b      	add	r3, r7
   246ec:	4699      	mov	r9, r3
   246ee:	2300      	movs	r3, #0
   246f0:	f849 3c04 	str.w	r3, [r9, #-4]
   246f4:	4ba6      	ldr	r3, [pc, #664]	; (24990 <rpc_ip_event_handler+0x320>)
   246f6:	601f      	str	r7, [r3, #0]
   246f8:	2302      	movs	r3, #2
   246fa:	9a03      	ldr	r2, [sp, #12]
   246fc:	6013      	str	r3, [r2, #0]
   246fe:	6820      	ldr	r0, [r4, #0]
   24700:	2800      	cmp	r0, #0
   24702:	f040 81c7 	bne.w	24a94 <rpc_ip_event_handler+0x424>
   24706:	e1c7      	b.n	24a98 <rpc_ip_event_handler+0x428>
   24708:	f7fa f9ee 	bl	1eae8 <nrf_modem_os_free>
   2470c:	220c      	movs	r2, #12
   2470e:	4ba1      	ldr	r3, [pc, #644]	; (24994 <rpc_ip_event_handler+0x324>)
   24710:	601a      	str	r2, [r3, #0]
   24712:	e7ef      	b.n	246f4 <rpc_ip_event_handler+0x84>
   24714:	f858 2006 	ldr.w	r2, [r8, r6]
   24718:	eb08 0106 	add.w	r1, r8, r6
   2471c:	f849 2c20 	str.w	r2, [r9, #-32]
   24720:	eb08 0206 	add.w	r2, r8, r6
   24724:	6852      	ldr	r2, [r2, #4]
   24726:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   2472a:	3a01      	subs	r2, #1
   2472c:	2a04      	cmp	r2, #4
   2472e:	bf8c      	ite	hi
   24730:	2200      	movhi	r2, #0
   24732:	4b99      	ldrls	r3, [pc, #612]	; (24998 <rpc_ip_event_handler+0x328>)
   24734:	f106 0614 	add.w	r6, r6, #20
   24738:	bf98      	it	ls
   2473a:	569a      	ldrsbls	r2, [r3, r2]
   2473c:	4b97      	ldr	r3, [pc, #604]	; (2499c <rpc_ip_event_handler+0x32c>)
   2473e:	f849 2c1c 	str.w	r2, [r9, #-28]
   24742:	681a      	ldr	r2, [r3, #0]
   24744:	4b96      	ldr	r3, [pc, #600]	; (249a0 <rpc_ip_event_handler+0x330>)
   24746:	f849 2c18 	str.w	r2, [r9, #-24]
   2474a:	681a      	ldr	r2, [r3, #0]
   2474c:	f849 2c14 	str.w	r2, [r9, #-20]
   24750:	8a0a      	ldrh	r2, [r1, #16]
   24752:	4994      	ldr	r1, [pc, #592]	; (249a4 <rpc_ip_event_handler+0x334>)
   24754:	2a04      	cmp	r2, #4
   24756:	8808      	ldrh	r0, [r1, #0]
   24758:	f849 2c10 	str.w	r2, [r9, #-16]
   2475c:	f849 5c0c 	str.w	r5, [r9, #-12]
   24760:	eb08 0106 	add.w	r1, r8, r6
   24764:	d121      	bne.n	247aa <rpc_ip_event_handler+0x13a>
   24766:	2202      	movs	r2, #2
   24768:	606a      	str	r2, [r5, #4]
   2476a:	2210      	movs	r2, #16
   2476c:	8128      	strh	r0, [r5, #8]
   2476e:	702a      	strb	r2, [r5, #0]
   24770:	680a      	ldr	r2, [r1, #0]
   24772:	60ea      	str	r2, [r5, #12]
   24774:	f859 2c10 	ldr.w	r2, [r9, #-16]
   24778:	f10b 0001 	add.w	r0, fp, #1
   2477c:	4416      	add	r6, r2
   2477e:	f7fa f9ab 	bl	1ead8 <nrf_modem_os_alloc>
   24782:	f849 0c08 	str.w	r0, [r9, #-8]
   24786:	b148      	cbz	r0, 2479c <rpc_ip_event_handler+0x12c>
   24788:	465a      	mov	r2, fp
   2478a:	eb08 0106 	add.w	r1, r8, r6
   2478e:	f009 fa16 	bl	2dbbe <memcpy>
   24792:	2100      	movs	r1, #0
   24794:	f859 2c08 	ldr.w	r2, [r9, #-8]
   24798:	f802 100b 	strb.w	r1, [r2, fp]
   2479c:	f849 9c04 	str.w	r9, [r9, #-4]
   247a0:	445e      	add	r6, fp
   247a2:	f109 0920 	add.w	r9, r9, #32
   247a6:	3508      	adds	r5, #8
   247a8:	e798      	b.n	246dc <rpc_ip_event_handler+0x6c>
   247aa:	230a      	movs	r3, #10
   247ac:	f04f 0c24 	mov.w	ip, #36	; 0x24
   247b0:	8128      	strh	r0, [r5, #8]
   247b2:	606b      	str	r3, [r5, #4]
   247b4:	f885 c000 	strb.w	ip, [r5]
   247b8:	f105 0010 	add.w	r0, r5, #16
   247bc:	f009 f9ff 	bl	2dbbe <memcpy>
   247c0:	e7d8      	b.n	24774 <rpc_ip_event_handler+0x104>
   247c2:	f7ff f971 	bl	23aa8 <rpc_error_to_nrf_gai_errno>
   247c6:	4b73      	ldr	r3, [pc, #460]	; (24994 <rpc_ip_event_handler+0x324>)
   247c8:	6018      	str	r0, [r3, #0]
   247ca:	e795      	b.n	246f8 <rpc_ip_event_handler+0x88>
   247cc:	6943      	ldr	r3, [r0, #20]
   247ce:	2b6a      	cmp	r3, #106	; 0x6a
   247d0:	bf8e      	itee	hi
   247d2:	235f      	movhi	r3, #95	; 0x5f
   247d4:	4a74      	ldrls	r2, [pc, #464]	; (249a8 <rpc_ip_event_handler+0x338>)
   247d6:	5cd3      	ldrbls	r3, [r2, r3]
   247d8:	4a74      	ldr	r2, [pc, #464]	; (249ac <rpc_ip_event_handler+0x33c>)
   247da:	6013      	str	r3, [r2, #0]
   247dc:	4b74      	ldr	r3, [pc, #464]	; (249b0 <rpc_ip_event_handler+0x340>)
   247de:	2201      	movs	r2, #1
   247e0:	701a      	strb	r2, [r3, #0]
   247e2:	e159      	b.n	24a98 <rpc_ip_event_handler+0x428>
   247e4:	6903      	ldr	r3, [r0, #16]
   247e6:	2b03      	cmp	r3, #3
   247e8:	d807      	bhi.n	247fa <rpc_ip_event_handler+0x18a>
   247ea:	e8df f003 	tbb	[pc, r3]
   247ee:	0802      	.short	0x0802
   247f0:	0802      	.short	0x0802
   247f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   247f6:	f7ff f835 	bl	23864 <interface_sockets_aux_state_set>
   247fa:	4b6e      	ldr	r3, [pc, #440]	; (249b4 <rpc_ip_event_handler+0x344>)
   247fc:	e7ef      	b.n	247de <rpc_ip_event_handler+0x16e>
   247fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   24802:	f7ff f84d 	bl	238a0 <interface_sockets_aux_state_clear>
   24806:	e7f8      	b.n	247fa <rpc_ip_event_handler+0x18a>
   24808:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2480c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   24810:	68c0      	ldr	r0, [r0, #12]
   24812:	d13b      	bne.n	2488c <rpc_ip_event_handler+0x21c>
   24814:	f7ff f862 	bl	238dc <interface_from_internal_id_search>
   24818:	4607      	mov	r7, r0
   2481a:	4638      	mov	r0, r7
   2481c:	f7ff f876 	bl	2390c <interface_socket_from_handle_get>
   24820:	4605      	mov	r5, r0
   24822:	2800      	cmp	r0, #0
   24824:	f43f af6b 	beq.w	246fe <rpc_ip_event_handler+0x8e>
   24828:	4601      	mov	r1, r0
   2482a:	4633      	mov	r3, r6
   2482c:	4622      	mov	r2, r4
   2482e:	4638      	mov	r0, r7
   24830:	f000 fd56 	bl	252e0 <tls_rpc_ip_event_handler>
   24834:	2800      	cmp	r0, #0
   24836:	f000 812f 	beq.w	24a98 <rpc_ip_event_handler+0x428>
   2483a:	f248 030c 	movw	r3, #32780	; 0x800c
   2483e:	429e      	cmp	r6, r3
   24840:	d826      	bhi.n	24890 <rpc_ip_event_handler+0x220>
   24842:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   24846:	f67f af5a 	bls.w	246fe <rpc_ip_event_handler+0x8e>
   2484a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   2484e:	3e01      	subs	r6, #1
   24850:	2e0b      	cmp	r6, #11
   24852:	f63f af54 	bhi.w	246fe <rpc_ip_event_handler+0x8e>
   24856:	a301      	add	r3, pc, #4	; (adr r3, 2485c <rpc_ip_event_handler+0x1ec>)
   24858:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2485c:	00024921 	.word	0x00024921
   24860:	000249d5 	.word	0x000249d5
   24864:	00024af1 	.word	0x00024af1
   24868:	00024b0f 	.word	0x00024b0f
   2486c:	000249b9 	.word	0x000249b9
   24870:	00024aa1 	.word	0x00024aa1
   24874:	00024aa1 	.word	0x00024aa1
   24878:	00024a19 	.word	0x00024a19
   2487c:	0002493b 	.word	0x0002493b
   24880:	000246ff 	.word	0x000246ff
   24884:	000246ff 	.word	0x000246ff
   24888:	00024a43 	.word	0x00024a43
   2488c:	0c07      	lsrs	r7, r0, #16
   2488e:	e7c4      	b.n	2481a <rpc_ip_event_handler+0x1aa>
   24890:	f249 0302 	movw	r3, #36866	; 0x9002
   24894:	429e      	cmp	r6, r3
   24896:	f000 80cc 	beq.w	24a32 <rpc_ip_event_handler+0x3c2>
   2489a:	f249 0303 	movw	r3, #36867	; 0x9003
   2489e:	429e      	cmp	r6, r3
   248a0:	d05b      	beq.n	2495a <rpc_ip_event_handler+0x2ea>
   248a2:	f249 0301 	movw	r3, #36865	; 0x9001
   248a6:	429e      	cmp	r6, r3
   248a8:	f47f af29 	bne.w	246fe <rpc_ip_event_handler+0x8e>
   248ac:	682e      	ldr	r6, [r5, #0]
   248ae:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   248b2:	f000 80ee 	beq.w	24a92 <rpc_ip_event_handler+0x422>
   248b6:	68a3      	ldr	r3, [r4, #8]
   248b8:	2b04      	cmp	r3, #4
   248ba:	f240 80e7 	bls.w	24a8c <rpc_ip_event_handler+0x41c>
   248be:	8a63      	ldrh	r3, [r4, #18]
   248c0:	2b00      	cmp	r3, #0
   248c2:	f000 80e4 	beq.w	24a8e <rpc_ip_event_handler+0x41e>
   248c6:	2b10      	cmp	r3, #16
   248c8:	f040 80cc 	bne.w	24a64 <rpc_ip_event_handler+0x3f4>
   248cc:	2024      	movs	r0, #36	; 0x24
   248ce:	f7fa f903 	bl	1ead8 <nrf_modem_os_alloc>
   248d2:	b318      	cbz	r0, 2491c <rpc_ip_event_handler+0x2ac>
   248d4:	230a      	movs	r3, #10
   248d6:	6043      	str	r3, [r0, #4]
   248d8:	2324      	movs	r3, #36	; 0x24
   248da:	7003      	strb	r3, [r0, #0]
   248dc:	7c62      	ldrb	r2, [r4, #17]
   248de:	7c23      	ldrb	r3, [r4, #16]
   248e0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   248e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   248e8:	8103      	strh	r3, [r0, #8]
   248ea:	f100 0210 	add.w	r2, r0, #16
   248ee:	f104 0314 	add.w	r3, r4, #20
   248f2:	f853 6b04 	ldr.w	r6, [r3], #4
   248f6:	428b      	cmp	r3, r1
   248f8:	f842 6b04 	str.w	r6, [r2], #4
   248fc:	d1f9      	bne.n	248f2 <rpc_ip_event_handler+0x282>
   248fe:	2324      	movs	r3, #36	; 0x24
   24900:	6822      	ldr	r2, [r4, #0]
   24902:	9307      	str	r3, [sp, #28]
   24904:	9204      	str	r2, [sp, #16]
   24906:	6862      	ldr	r2, [r4, #4]
   24908:	a904      	add	r1, sp, #16
   2490a:	e9cd 2005 	strd	r2, r0, [sp, #20]
   2490e:	69e8      	ldr	r0, [r5, #28]
   24910:	6803      	ldr	r3, [r0, #0]
   24912:	685b      	ldr	r3, [r3, #4]
   24914:	4798      	blx	r3
   24916:	3001      	adds	r0, #1
   24918:	f040 808f 	bne.w	24a3a <rpc_ip_event_handler+0x3ca>
   2491c:	2002      	movs	r0, #2
   2491e:	e0bc      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   24920:	682b      	ldr	r3, [r5, #0]
   24922:	2b01      	cmp	r3, #1
   24924:	f040 80b8 	bne.w	24a98 <rpc_ip_event_handler+0x428>
   24928:	6960      	ldr	r0, [r4, #20]
   2492a:	2800      	cmp	r0, #0
   2492c:	f040 80e9 	bne.w	24b02 <rpc_ip_event_handler+0x492>
   24930:	2302      	movs	r3, #2
   24932:	602b      	str	r3, [r5, #0]
   24934:	69a3      	ldr	r3, [r4, #24]
   24936:	61ab      	str	r3, [r5, #24]
   24938:	e0af      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   2493a:	682b      	ldr	r3, [r5, #0]
   2493c:	b29b      	uxth	r3, r3
   2493e:	2b0d      	cmp	r3, #13
   24940:	f040 80aa 	bne.w	24a98 <rpc_ip_event_handler+0x428>
   24944:	6960      	ldr	r0, [r4, #20]
   24946:	2800      	cmp	r0, #0
   24948:	f040 80db 	bne.w	24b02 <rpc_ip_event_handler+0x492>
   2494c:	682b      	ldr	r3, [r5, #0]
   2494e:	0c1b      	lsrs	r3, r3, #16
   24950:	041b      	lsls	r3, r3, #16
   24952:	f043 030e 	orr.w	r3, r3, #14
   24956:	602b      	str	r3, [r5, #0]
   24958:	e09f      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   2495a:	682b      	ldr	r3, [r5, #0]
   2495c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   24960:	602b      	str	r3, [r5, #0]
   24962:	682b      	ldr	r3, [r5, #0]
   24964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24968:	602b      	str	r3, [r5, #0]
   2496a:	6923      	ldr	r3, [r4, #16]
   2496c:	2b6c      	cmp	r3, #108	; 0x6c
   2496e:	d107      	bne.n	24980 <rpc_ip_event_handler+0x310>
   24970:	682b      	ldr	r3, [r5, #0]
   24972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   24976:	602b      	str	r3, [r5, #0]
   24978:	2380      	movs	r3, #128	; 0x80
   2497a:	606b      	str	r3, [r5, #4]
   2497c:	60ab      	str	r3, [r5, #8]
   2497e:	e08b      	b.n	24a98 <rpc_ip_event_handler+0x428>
   24980:	2b6a      	cmp	r3, #106	; 0x6a
   24982:	bf96      	itet	ls
   24984:	4a08      	ldrls	r2, [pc, #32]	; (249a8 <rpc_ip_event_handler+0x338>)
   24986:	235f      	movhi	r3, #95	; 0x5f
   24988:	5cd3      	ldrbls	r3, [r2, r3]
   2498a:	e7f6      	b.n	2497a <rpc_ip_event_handler+0x30a>
   2498c:	2000d3a4 	.word	0x2000d3a4
   24990:	2000d3a8 	.word	0x2000d3a8
   24994:	2000d3a0 	.word	0x2000d3a0
   24998:	000316a2 	.word	0x000316a2
   2499c:	2000d398 	.word	0x2000d398
   249a0:	2000d394 	.word	0x2000d394
   249a4:	2000d4ca 	.word	0x2000d4ca
   249a8:	000316a7 	.word	0x000316a7
   249ac:	2000d3cc 	.word	0x2000d3cc
   249b0:	2000da63 	.word	0x2000da63
   249b4:	2000da61 	.word	0x2000da61
   249b8:	682b      	ldr	r3, [r5, #0]
   249ba:	b29b      	uxth	r3, r3
   249bc:	2b03      	cmp	r3, #3
   249be:	d16b      	bne.n	24a98 <rpc_ip_event_handler+0x428>
   249c0:	6960      	ldr	r0, [r4, #20]
   249c2:	2800      	cmp	r0, #0
   249c4:	f040 809d 	bne.w	24b02 <rpc_ip_event_handler+0x492>
   249c8:	682b      	ldr	r3, [r5, #0]
   249ca:	0c1b      	lsrs	r3, r3, #16
   249cc:	041b      	lsls	r3, r3, #16
   249ce:	f043 0304 	orr.w	r3, r3, #4
   249d2:	e7c0      	b.n	24956 <rpc_ip_event_handler+0x2e6>
   249d4:	682b      	ldr	r3, [r5, #0]
   249d6:	0099      	lsls	r1, r3, #2
   249d8:	d55e      	bpl.n	24a98 <rpc_ip_event_handler+0x428>
   249da:	682b      	ldr	r3, [r5, #0]
   249dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   249e0:	602b      	str	r3, [r5, #0]
   249e2:	6960      	ldr	r0, [r4, #20]
   249e4:	b968      	cbnz	r0, 24a02 <rpc_ip_event_handler+0x392>
   249e6:	682b      	ldr	r3, [r5, #0]
   249e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   249ec:	602b      	str	r3, [r5, #0]
   249ee:	682b      	ldr	r3, [r5, #0]
   249f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   249f4:	602b      	str	r3, [r5, #0]
   249f6:	682b      	ldr	r3, [r5, #0]
   249f8:	0c1b      	lsrs	r3, r3, #16
   249fa:	041b      	lsls	r3, r3, #16
   249fc:	f043 0305 	orr.w	r3, r3, #5
   24a00:	e7a9      	b.n	24956 <rpc_ip_event_handler+0x2e6>
   24a02:	286a      	cmp	r0, #106	; 0x6a
   24a04:	bf8e      	itee	hi
   24a06:	235f      	movhi	r3, #95	; 0x5f
   24a08:	4b4c      	ldrls	r3, [pc, #304]	; (24b3c <rpc_ip_event_handler+0x4cc>)
   24a0a:	5c1b      	ldrbls	r3, [r3, r0]
   24a0c:	606b      	str	r3, [r5, #4]
   24a0e:	682b      	ldr	r3, [r5, #0]
   24a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24a14:	602b      	str	r3, [r5, #0]
   24a16:	e03f      	b.n	24a98 <rpc_ip_event_handler+0x428>
   24a18:	682b      	ldr	r3, [r5, #0]
   24a1a:	b29b      	uxth	r3, r3
   24a1c:	2b06      	cmp	r3, #6
   24a1e:	d13b      	bne.n	24a98 <rpc_ip_event_handler+0x428>
   24a20:	6960      	ldr	r0, [r4, #20]
   24a22:	2800      	cmp	r0, #0
   24a24:	d16d      	bne.n	24b02 <rpc_ip_event_handler+0x492>
   24a26:	682b      	ldr	r3, [r5, #0]
   24a28:	0c1b      	lsrs	r3, r3, #16
   24a2a:	041b      	lsls	r3, r3, #16
   24a2c:	f043 0307 	orr.w	r3, r3, #7
   24a30:	e791      	b.n	24956 <rpc_ip_event_handler+0x2e6>
   24a32:	682b      	ldr	r3, [r5, #0]
   24a34:	b29b      	uxth	r3, r3
   24a36:	2b07      	cmp	r3, #7
   24a38:	d12e      	bne.n	24a98 <rpc_ip_event_handler+0x428>
   24a3a:	682b      	ldr	r3, [r5, #0]
   24a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   24a40:	e7e8      	b.n	24a14 <rpc_ip_event_handler+0x3a4>
   24a42:	682b      	ldr	r3, [r5, #0]
   24a44:	b29b      	uxth	r3, r3
   24a46:	2b08      	cmp	r3, #8
   24a48:	d126      	bne.n	24a98 <rpc_ip_event_handler+0x428>
   24a4a:	6963      	ldr	r3, [r4, #20]
   24a4c:	2b00      	cmp	r3, #0
   24a4e:	d16d      	bne.n	24b2c <rpc_ip_event_handler+0x4bc>
   24a50:	4b3b      	ldr	r3, [pc, #236]	; (24b40 <rpc_ip_event_handler+0x4d0>)
   24a52:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   24a56:	682b      	ldr	r3, [r5, #0]
   24a58:	0c1b      	lsrs	r3, r3, #16
   24a5a:	041b      	lsls	r3, r3, #16
   24a5c:	f043 0309 	orr.w	r3, r3, #9
   24a60:	602b      	str	r3, [r5, #0]
   24a62:	e032      	b.n	24aca <rpc_ip_event_handler+0x45a>
   24a64:	2b04      	cmp	r3, #4
   24a66:	d114      	bne.n	24a92 <rpc_ip_event_handler+0x422>
   24a68:	2010      	movs	r0, #16
   24a6a:	f7fa f835 	bl	1ead8 <nrf_modem_os_alloc>
   24a6e:	2800      	cmp	r0, #0
   24a70:	f43f af54 	beq.w	2491c <rpc_ip_event_handler+0x2ac>
   24a74:	2302      	movs	r3, #2
   24a76:	6043      	str	r3, [r0, #4]
   24a78:	2310      	movs	r3, #16
   24a7a:	7003      	strb	r3, [r0, #0]
   24a7c:	7c22      	ldrb	r2, [r4, #16]
   24a7e:	7c61      	ldrb	r1, [r4, #17]
   24a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24a84:	8102      	strh	r2, [r0, #8]
   24a86:	6962      	ldr	r2, [r4, #20]
   24a88:	60c2      	str	r2, [r0, #12]
   24a8a:	e739      	b.n	24900 <rpc_ip_event_handler+0x290>
   24a8c:	2300      	movs	r3, #0
   24a8e:	4618      	mov	r0, r3
   24a90:	e736      	b.n	24900 <rpc_ip_event_handler+0x290>
   24a92:	6820      	ldr	r0, [r4, #0]
   24a94:	f008 f82e 	bl	2caf4 <rpc_client_data_free>
   24a98:	2000      	movs	r0, #0
   24a9a:	b009      	add	sp, #36	; 0x24
   24a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24aa0:	4b27      	ldr	r3, [pc, #156]	; (24b40 <rpc_ip_event_handler+0x4d0>)
   24aa2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   24aa6:	6963      	ldr	r3, [r4, #20]
   24aa8:	b17b      	cbz	r3, 24aca <rpc_ip_event_handler+0x45a>
   24aaa:	2b6b      	cmp	r3, #107	; 0x6b
   24aac:	d10f      	bne.n	24ace <rpc_ip_event_handler+0x45e>
   24aae:	6928      	ldr	r0, [r5, #16]
   24ab0:	220c      	movs	r2, #12
   24ab2:	2801      	cmp	r0, #1
   24ab4:	682b      	ldr	r3, [r5, #0]
   24ab6:	d104      	bne.n	24ac2 <rpc_ip_event_handler+0x452>
   24ab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   24abc:	602b      	str	r3, [r5, #0]
   24abe:	606a      	str	r2, [r5, #4]
   24ac0:	e7eb      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   24ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24ac6:	602b      	str	r3, [r5, #0]
   24ac8:	606a      	str	r2, [r5, #4]
   24aca:	2001      	movs	r0, #1
   24acc:	e7e5      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   24ace:	f023 0002 	bic.w	r0, r3, #2
   24ad2:	2801      	cmp	r0, #1
   24ad4:	d102      	bne.n	24adc <rpc_ip_event_handler+0x46c>
   24ad6:	230c      	movs	r3, #12
   24ad8:	606b      	str	r3, [r5, #4]
   24ada:	e7de      	b.n	24a9a <rpc_ip_event_handler+0x42a>
   24adc:	2b6a      	cmp	r3, #106	; 0x6a
   24ade:	bf8e      	itee	hi
   24ae0:	235f      	movhi	r3, #95	; 0x5f
   24ae2:	4a16      	ldrls	r2, [pc, #88]	; (24b3c <rpc_ip_event_handler+0x4cc>)
   24ae4:	5cd3      	ldrbls	r3, [r2, r3]
   24ae6:	606b      	str	r3, [r5, #4]
   24ae8:	682b      	ldr	r3, [r5, #0]
   24aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   24aee:	e7b7      	b.n	24a60 <rpc_ip_event_handler+0x3f0>
   24af0:	682b      	ldr	r3, [r5, #0]
   24af2:	025a      	lsls	r2, r3, #9
   24af4:	d5d0      	bpl.n	24a98 <rpc_ip_event_handler+0x428>
   24af6:	6960      	ldr	r0, [r4, #20]
   24af8:	b918      	cbnz	r0, 24b02 <rpc_ip_event_handler+0x492>
   24afa:	682b      	ldr	r3, [r5, #0]
   24afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   24b00:	e729      	b.n	24956 <rpc_ip_event_handler+0x2e6>
   24b02:	286a      	cmp	r0, #106	; 0x6a
   24b04:	d817      	bhi.n	24b36 <rpc_ip_event_handler+0x4c6>
   24b06:	4b0d      	ldr	r3, [pc, #52]	; (24b3c <rpc_ip_event_handler+0x4cc>)
   24b08:	5c1b      	ldrb	r3, [r3, r0]
   24b0a:	606b      	str	r3, [r5, #4]
   24b0c:	e7c4      	b.n	24a98 <rpc_ip_event_handler+0x428>
   24b0e:	682b      	ldr	r3, [r5, #0]
   24b10:	01db      	lsls	r3, r3, #7
   24b12:	d5c1      	bpl.n	24a98 <rpc_ip_event_handler+0x428>
   24b14:	6963      	ldr	r3, [r4, #20]
   24b16:	b94b      	cbnz	r3, 24b2c <rpc_ip_event_handler+0x4bc>
   24b18:	6820      	ldr	r0, [r4, #0]
   24b1a:	b118      	cbz	r0, 24b24 <rpc_ip_event_handler+0x4b4>
   24b1c:	2001      	movs	r0, #1
   24b1e:	4b08      	ldr	r3, [pc, #32]	; (24b40 <rpc_ip_event_handler+0x4d0>)
   24b20:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   24b24:	682b      	ldr	r3, [r5, #0]
   24b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   24b2a:	e714      	b.n	24956 <rpc_ip_event_handler+0x2e6>
   24b2c:	2b6a      	cmp	r3, #106	; 0x6a
   24b2e:	d802      	bhi.n	24b36 <rpc_ip_event_handler+0x4c6>
   24b30:	4a02      	ldr	r2, [pc, #8]	; (24b3c <rpc_ip_event_handler+0x4cc>)
   24b32:	5cd3      	ldrb	r3, [r2, r3]
   24b34:	e7e9      	b.n	24b0a <rpc_ip_event_handler+0x49a>
   24b36:	235f      	movs	r3, #95	; 0x5f
   24b38:	e7e7      	b.n	24b0a <rpc_ip_event_handler+0x49a>
   24b3a:	bf00      	nop
   24b3c:	000316a7 	.word	0x000316a7
   24b40:	2000d3ac 	.word	0x2000d3ac

00024b44 <secure_socket_dtls_timeout_check>:
   24b44:	281f      	cmp	r0, #31
   24b46:	dc0b      	bgt.n	24b60 <secure_socket_dtls_timeout_check+0x1c>
   24b48:	2800      	cmp	r0, #0
   24b4a:	dd10      	ble.n	24b6e <secure_socket_dtls_timeout_check+0x2a>
   24b4c:	2301      	movs	r3, #1
   24b4e:	fa03 f000 	lsl.w	r0, r3, r0
   24b52:	4b09      	ldr	r3, [pc, #36]	; (24b78 <secure_socket_dtls_timeout_check+0x34>)
   24b54:	4003      	ands	r3, r0
   24b56:	2b00      	cmp	r3, #0
   24b58:	bf0c      	ite	eq
   24b5a:	2016      	moveq	r0, #22
   24b5c:	2000      	movne	r0, #0
   24b5e:	4770      	bx	lr
   24b60:	283f      	cmp	r0, #63	; 0x3f
   24b62:	d006      	beq.n	24b72 <secure_socket_dtls_timeout_check+0x2e>
   24b64:	287b      	cmp	r0, #123	; 0x7b
   24b66:	bf14      	ite	ne
   24b68:	2016      	movne	r0, #22
   24b6a:	2000      	moveq	r0, #0
   24b6c:	4770      	bx	lr
   24b6e:	2016      	movs	r0, #22
   24b70:	4770      	bx	lr
   24b72:	2000      	movs	r0, #0
   24b74:	4770      	bx	lr
   24b76:	bf00      	nop
   24b78:	8000808a 	.word	0x8000808a

00024b7c <hostname_free>:
   24b7c:	b538      	push	{r3, r4, r5, lr}
   24b7e:	4c07      	ldr	r4, [pc, #28]	; (24b9c <hostname_free+0x20>)
   24b80:	4605      	mov	r5, r0
   24b82:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   24b86:	b138      	cbz	r0, 24b98 <hostname_free+0x1c>
   24b88:	f7f9 ffae 	bl	1eae8 <nrf_modem_os_free>
   24b8c:	2300      	movs	r3, #0
   24b8e:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   24b92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   24b96:	6063      	str	r3, [r4, #4]
   24b98:	bd38      	pop	{r3, r4, r5, pc}
   24b9a:	bf00      	nop
   24b9c:	2000d3d0 	.word	0x2000d3d0

00024ba0 <secure_socket_attach_initiate>:
   24ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24ba8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 24c40 <secure_socket_attach_initiate+0xa0>
   24bac:	9301      	str	r3, [sp, #4]
   24bae:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   24bb2:	460d      	mov	r5, r1
   24bb4:	4616      	mov	r6, r2
   24bb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   24bba:	f247 0281 	movw	r2, #28801	; 0x7081
   24bbe:	6989      	ldr	r1, [r1, #24]
   24bc0:	4607      	mov	r7, r0
   24bc2:	f008 f829 	bl	2cc18 <ip_interface_request_create>
   24bc6:	4604      	mov	r4, r0
   24bc8:	b398      	cbz	r0, 24c32 <secure_socket_attach_initiate+0x92>
   24bca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   24bce:	b122      	cbz	r2, 24bda <secure_socket_attach_initiate+0x3a>
   24bd0:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   24bd4:	6800      	ldr	r0, [r0, #0]
   24bd6:	f008 fff2 	bl	2dbbe <memcpy>
   24bda:	2324      	movs	r3, #36	; 0x24
   24bdc:	4a17      	ldr	r2, [pc, #92]	; (24c3c <secure_socket_attach_initiate+0x9c>)
   24bde:	fb03 2307 	mla	r3, r3, r7, r2
   24be2:	f104 0214 	add.w	r2, r4, #20
   24be6:	f103 0124 	add.w	r1, r3, #36	; 0x24
   24bea:	f853 0b04 	ldr.w	r0, [r3], #4
   24bee:	428b      	cmp	r3, r1
   24bf0:	f842 0b04 	str.w	r0, [r2], #4
   24bf4:	d1f9      	bne.n	24bea <secure_socket_attach_initiate+0x4a>
   24bf6:	68a3      	ldr	r3, [r4, #8]
   24bf8:	4622      	mov	r2, r4
   24bfa:	3324      	adds	r3, #36	; 0x24
   24bfc:	60a3      	str	r3, [r4, #8]
   24bfe:	682b      	ldr	r3, [r5, #0]
   24c00:	f247 0181 	movw	r1, #28801	; 0x7081
   24c04:	0c1b      	lsrs	r3, r3, #16
   24c06:	041b      	lsls	r3, r3, #16
   24c08:	f043 030a 	orr.w	r3, r3, #10
   24c0c:	602b      	str	r3, [r5, #0]
   24c0e:	2004      	movs	r0, #4
   24c10:	f007 ff66 	bl	2cae0 <rpc_client_request_send>
   24c14:	682b      	ldr	r3, [r5, #0]
   24c16:	00db      	lsls	r3, r3, #3
   24c18:	d40d      	bmi.n	24c36 <secure_socket_attach_initiate+0x96>
   24c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   24c1e:	210b      	movs	r1, #11
   24c20:	4638      	mov	r0, r7
   24c22:	ab01      	add	r3, sp, #4
   24c24:	f008 f80b 	bl	2cc3e <ip_interface_wait>
   24c28:	b100      	cbz	r0, 24c2c <secure_socket_attach_initiate+0x8c>
   24c2a:	602e      	str	r6, [r5, #0]
   24c2c:	b003      	add	sp, #12
   24c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24c32:	200c      	movs	r0, #12
   24c34:	e7fa      	b.n	24c2c <secure_socket_attach_initiate+0x8c>
   24c36:	2077      	movs	r0, #119	; 0x77
   24c38:	e7f8      	b.n	24c2c <secure_socket_attach_initiate+0x8c>
   24c3a:	bf00      	nop
   24c3c:	2000da65 	.word	0x2000da65
   24c40:	2000d3d0 	.word	0x2000d3d0

00024c44 <tls_interface_init>:
   24c44:	2201      	movs	r2, #1
   24c46:	4b02      	ldr	r3, [pc, #8]	; (24c50 <tls_interface_init+0xc>)
   24c48:	2000      	movs	r0, #0
   24c4a:	701a      	strb	r2, [r3, #0]
   24c4c:	4770      	bx	lr
   24c4e:	bf00      	nop
   24c50:	2000da64 	.word	0x2000da64

00024c54 <tls_interface_open>:
   24c54:	b538      	push	{r3, r4, r5, lr}
   24c56:	4b21      	ldr	r3, [pc, #132]	; (24cdc <tls_interface_open+0x88>)
   24c58:	4615      	mov	r5, r2
   24c5a:	781b      	ldrb	r3, [r3, #0]
   24c5c:	b92b      	cbnz	r3, 24c6a <tls_interface_open+0x16>
   24c5e:	2075      	movs	r0, #117	; 0x75
   24c60:	f007 f9c5 	bl	2bfee <nrf_modem_os_errno_set>
   24c64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24c68:	e031      	b.n	24cce <tls_interface_open+0x7a>
   24c6a:	1e4b      	subs	r3, r1, #1
   24c6c:	2b01      	cmp	r3, #1
   24c6e:	d809      	bhi.n	24c84 <tls_interface_open+0x30>
   24c70:	b952      	cbnz	r2, 24c88 <tls_interface_open+0x34>
   24c72:	2901      	cmp	r1, #1
   24c74:	bf0b      	itete	eq
   24c76:	2201      	moveq	r2, #1
   24c78:	2202      	movne	r2, #2
   24c7a:	f44f 7582 	moveq.w	r5, #260	; 0x104
   24c7e:	f44f 7587 	movne.w	r5, #270	; 0x10e
   24c82:	e007      	b.n	24c94 <tls_interface_open+0x40>
   24c84:	206b      	movs	r0, #107	; 0x6b
   24c86:	e7eb      	b.n	24c60 <tls_interface_open+0xc>
   24c88:	2901      	cmp	r1, #1
   24c8a:	d122      	bne.n	24cd2 <tls_interface_open+0x7e>
   24c8c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   24c90:	d1f8      	bne.n	24c84 <tls_interface_open+0x30>
   24c92:	460a      	mov	r2, r1
   24c94:	f7fe ff40 	bl	23b18 <ip_interface_open>
   24c98:	1e04      	subs	r4, r0, #0
   24c9a:	dbe3      	blt.n	24c64 <tls_interface_open+0x10>
   24c9c:	2224      	movs	r2, #36	; 0x24
   24c9e:	4910      	ldr	r1, [pc, #64]	; (24ce0 <tls_interface_open+0x8c>)
   24ca0:	4b10      	ldr	r3, [pc, #64]	; (24ce4 <tls_interface_open+0x90>)
   24ca2:	fb02 1204 	mla	r2, r2, r4, r1
   24ca6:	f103 0124 	add.w	r1, r3, #36	; 0x24
   24caa:	f853 0b04 	ldr.w	r0, [r3], #4
   24cae:	428b      	cmp	r3, r1
   24cb0:	f842 0b04 	str.w	r0, [r2], #4
   24cb4:	d1f9      	bne.n	24caa <tls_interface_open+0x56>
   24cb6:	4620      	mov	r0, r4
   24cb8:	f7fe fe28 	bl	2390c <interface_socket_from_handle_get>
   24cbc:	6803      	ldr	r3, [r0, #0]
   24cbe:	6145      	str	r5, [r0, #20]
   24cc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24cc4:	6003      	str	r3, [r0, #0]
   24cc6:	6803      	ldr	r3, [r0, #0]
   24cc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24ccc:	6003      	str	r3, [r0, #0]
   24cce:	4620      	mov	r0, r4
   24cd0:	bd38      	pop	{r3, r4, r5, pc}
   24cd2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   24cd6:	d1d5      	bne.n	24c84 <tls_interface_open+0x30>
   24cd8:	2202      	movs	r2, #2
   24cda:	e7db      	b.n	24c94 <tls_interface_open+0x40>
   24cdc:	2000da64 	.word	0x2000da64
   24ce0:	2000da65 	.word	0x2000da65
   24ce4:	00031712 	.word	0x00031712

00024ce8 <tls_interface_sendto>:
   24ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24cec:	b085      	sub	sp, #20
   24cee:	4606      	mov	r6, r0
   24cf0:	4691      	mov	r9, r2
   24cf2:	461f      	mov	r7, r3
   24cf4:	9103      	str	r1, [sp, #12]
   24cf6:	f7fe fe09 	bl	2390c <interface_socket_from_handle_get>
   24cfa:	4605      	mov	r5, r0
   24cfc:	2800      	cmp	r0, #0
   24cfe:	d06c      	beq.n	24dda <tls_interface_sendto+0xf2>
   24d00:	f04f 0a24 	mov.w	sl, #36	; 0x24
   24d04:	07bb      	lsls	r3, r7, #30
   24d06:	bf48      	it	mi
   24d08:	2300      	movmi	r3, #0
   24d0a:	f04f 0400 	mov.w	r4, #0
   24d0e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   24d12:	bf58      	it	pl
   24d14:	6803      	ldrpl	r3, [r0, #0]
   24d16:	fb0a fa06 	mul.w	sl, sl, r6
   24d1a:	bf5c      	itt	pl
   24d1c:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   24d20:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   24d24:	9302      	str	r3, [sp, #8]
   24d26:	6829      	ldr	r1, [r5, #0]
   24d28:	eba9 0804 	sub.w	r8, r9, r4
   24d2c:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   24d30:	b289      	uxth	r1, r1
   24d32:	bfa8      	it	ge
   24d34:	f44f 6800 	movge.w	r8, #2048	; 0x800
   24d38:	290c      	cmp	r1, #12
   24d3a:	d110      	bne.n	24d5e <tls_interface_sendto+0x76>
   24d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24d3e:	9903      	ldr	r1, [sp, #12]
   24d40:	9301      	str	r3, [sp, #4]
   24d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24d44:	4642      	mov	r2, r8
   24d46:	9300      	str	r3, [sp, #0]
   24d48:	4630      	mov	r0, r6
   24d4a:	463b      	mov	r3, r7
   24d4c:	4421      	add	r1, r4
   24d4e:	f7fe ffa5 	bl	23c9c <ip_interface_sendto>
   24d52:	f1b0 0b00 	subs.w	fp, r0, #0
   24d56:	da32      	bge.n	24dbe <tls_interface_sendto+0xd6>
   24d58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24d5c:	e034      	b.n	24dc8 <tls_interface_sendto+0xe0>
   24d5e:	6828      	ldr	r0, [r5, #0]
   24d60:	b280      	uxth	r0, r0
   24d62:	280b      	cmp	r0, #11
   24d64:	d109      	bne.n	24d7a <tls_interface_sendto+0x92>
   24d66:	4b21      	ldr	r3, [pc, #132]	; (24dec <tls_interface_sendto+0x104>)
   24d68:	f813 200a 	ldrb.w	r2, [r3, sl]
   24d6c:	2a02      	cmp	r2, #2
   24d6e:	d031      	beq.n	24dd4 <tls_interface_sendto+0xec>
   24d70:	692a      	ldr	r2, [r5, #16]
   24d72:	2a01      	cmp	r2, #1
   24d74:	d133      	bne.n	24dde <tls_interface_sendto+0xf6>
   24d76:	206d      	movs	r0, #109	; 0x6d
   24d78:	e02c      	b.n	24dd4 <tls_interface_sendto+0xec>
   24d7a:	4628      	mov	r0, r5
   24d7c:	f008 f9c8 	bl	2d110 <attach_trigger_condition_verify>
   24d80:	b388      	cbz	r0, 24de6 <tls_interface_sendto+0xfe>
   24d82:	4b1a      	ldr	r3, [pc, #104]	; (24dec <tls_interface_sendto+0x104>)
   24d84:	f813 100a 	ldrb.w	r1, [r3, sl]
   24d88:	2902      	cmp	r1, #2
   24d8a:	d110      	bne.n	24dae <tls_interface_sendto+0xc6>
   24d8c:	4629      	mov	r1, r5
   24d8e:	4630      	mov	r0, r6
   24d90:	f008 f9d5 	bl	2d13e <secure_client_socket>
   24d94:	b970      	cbnz	r0, 24db4 <tls_interface_sendto+0xcc>
   24d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24d98:	9903      	ldr	r1, [sp, #12]
   24d9a:	9301      	str	r3, [sp, #4]
   24d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24d9e:	4642      	mov	r2, r8
   24da0:	9300      	str	r3, [sp, #0]
   24da2:	4630      	mov	r0, r6
   24da4:	463b      	mov	r3, r7
   24da6:	4421      	add	r1, r4
   24da8:	f7fe ff78 	bl	23c9c <ip_interface_sendto>
   24dac:	4683      	mov	fp, r0
   24dae:	f1bb 0f00 	cmp.w	fp, #0
   24db2:	e7d0      	b.n	24d56 <tls_interface_sendto+0x6e>
   24db4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   24db8:	d00a      	beq.n	24dd0 <tls_interface_sendto+0xe8>
   24dba:	2800      	cmp	r0, #0
   24dbc:	dc0a      	bgt.n	24dd4 <tls_interface_sendto+0xec>
   24dbe:	9b02      	ldr	r3, [sp, #8]
   24dc0:	445c      	add	r4, fp
   24dc2:	b10b      	cbz	r3, 24dc8 <tls_interface_sendto+0xe0>
   24dc4:	45a1      	cmp	r9, r4
   24dc6:	dcae      	bgt.n	24d26 <tls_interface_sendto+0x3e>
   24dc8:	4620      	mov	r0, r4
   24dca:	b005      	add	sp, #20
   24dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dd0:	2800      	cmp	r0, #0
   24dd2:	ddc1      	ble.n	24d58 <tls_interface_sendto+0x70>
   24dd4:	f007 f90b 	bl	2bfee <nrf_modem_os_errno_set>
   24dd8:	e7be      	b.n	24d58 <tls_interface_sendto+0x70>
   24dda:	2009      	movs	r0, #9
   24ddc:	e7fa      	b.n	24dd4 <tls_interface_sendto+0xec>
   24dde:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   24de2:	d1ec      	bne.n	24dbe <tls_interface_sendto+0xd6>
   24de4:	e7b8      	b.n	24d58 <tls_interface_sendto+0x70>
   24de6:	2080      	movs	r0, #128	; 0x80
   24de8:	e7f4      	b.n	24dd4 <tls_interface_sendto+0xec>
   24dea:	bf00      	nop
   24dec:	2000da65 	.word	0x2000da65

00024df0 <tls_interface_recvfrom>:
   24df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24df4:	460d      	mov	r5, r1
   24df6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   24dfa:	4604      	mov	r4, r0
   24dfc:	4616      	mov	r6, r2
   24dfe:	461f      	mov	r7, r3
   24e00:	f7fe fd84 	bl	2390c <interface_socket_from_handle_get>
   24e04:	4601      	mov	r1, r0
   24e06:	b320      	cbz	r0, 24e52 <tls_interface_recvfrom+0x62>
   24e08:	6803      	ldr	r3, [r0, #0]
   24e0a:	b29b      	uxth	r3, r3
   24e0c:	2b0c      	cmp	r3, #12
   24e0e:	d003      	beq.n	24e18 <tls_interface_recvfrom+0x28>
   24e10:	6803      	ldr	r3, [r0, #0]
   24e12:	b29b      	uxth	r3, r3
   24e14:	2b0d      	cmp	r3, #13
   24e16:	d109      	bne.n	24e2c <tls_interface_recvfrom+0x3c>
   24e18:	463b      	mov	r3, r7
   24e1a:	4632      	mov	r2, r6
   24e1c:	4629      	mov	r1, r5
   24e1e:	4620      	mov	r0, r4
   24e20:	e9cd 8908 	strd	r8, r9, [sp, #32]
   24e24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e28:	f007 bf19 	b.w	2cc5e <ip_interface_recvfrom>
   24e2c:	f008 f970 	bl	2d110 <attach_trigger_condition_verify>
   24e30:	b198      	cbz	r0, 24e5a <tls_interface_recvfrom+0x6a>
   24e32:	2324      	movs	r3, #36	; 0x24
   24e34:	4363      	muls	r3, r4
   24e36:	4a0a      	ldr	r2, [pc, #40]	; (24e60 <tls_interface_recvfrom+0x70>)
   24e38:	5cd3      	ldrb	r3, [r2, r3]
   24e3a:	2b02      	cmp	r3, #2
   24e3c:	d10d      	bne.n	24e5a <tls_interface_recvfrom+0x6a>
   24e3e:	4620      	mov	r0, r4
   24e40:	f008 f97d 	bl	2d13e <secure_client_socket>
   24e44:	2800      	cmp	r0, #0
   24e46:	d0e7      	beq.n	24e18 <tls_interface_recvfrom+0x28>
   24e48:	dc04      	bgt.n	24e54 <tls_interface_recvfrom+0x64>
   24e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24e52:	2009      	movs	r0, #9
   24e54:	f007 f8cb 	bl	2bfee <nrf_modem_os_errno_set>
   24e58:	e7f7      	b.n	24e4a <tls_interface_recvfrom+0x5a>
   24e5a:	200b      	movs	r0, #11
   24e5c:	e7fa      	b.n	24e54 <tls_interface_recvfrom+0x64>
   24e5e:	bf00      	nop
   24e60:	2000da65 	.word	0x2000da65

00024e64 <tls_interface_bind>:
   24e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e66:	4604      	mov	r4, r0
   24e68:	460e      	mov	r6, r1
   24e6a:	4617      	mov	r7, r2
   24e6c:	f7fe fd4e 	bl	2390c <interface_socket_from_handle_get>
   24e70:	4605      	mov	r5, r0
   24e72:	b1d8      	cbz	r0, 24eac <tls_interface_bind+0x48>
   24e74:	6803      	ldr	r3, [r0, #0]
   24e76:	b29b      	uxth	r3, r3
   24e78:	2b02      	cmp	r3, #2
   24e7a:	d119      	bne.n	24eb0 <tls_interface_bind+0x4c>
   24e7c:	463a      	mov	r2, r7
   24e7e:	4631      	mov	r1, r6
   24e80:	4620      	mov	r0, r4
   24e82:	f7ff f89f 	bl	23fc4 <ip_interface_bind>
   24e86:	b950      	cbnz	r0, 24e9e <tls_interface_bind+0x3a>
   24e88:	2324      	movs	r3, #36	; 0x24
   24e8a:	4363      	muls	r3, r4
   24e8c:	4a09      	ldr	r2, [pc, #36]	; (24eb4 <tls_interface_bind+0x50>)
   24e8e:	5cd3      	ldrb	r3, [r2, r3]
   24e90:	2b01      	cmp	r3, #1
   24e92:	d10a      	bne.n	24eaa <tls_interface_bind+0x46>
   24e94:	2204      	movs	r2, #4
   24e96:	4629      	mov	r1, r5
   24e98:	4620      	mov	r0, r4
   24e9a:	f7ff fe81 	bl	24ba0 <secure_socket_attach_initiate>
   24e9e:	2800      	cmp	r0, #0
   24ea0:	dd03      	ble.n	24eaa <tls_interface_bind+0x46>
   24ea2:	f007 f8a4 	bl	2bfee <nrf_modem_os_errno_set>
   24ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24eac:	2009      	movs	r0, #9
   24eae:	e7f8      	b.n	24ea2 <tls_interface_bind+0x3e>
   24eb0:	205f      	movs	r0, #95	; 0x5f
   24eb2:	e7f6      	b.n	24ea2 <tls_interface_bind+0x3e>
   24eb4:	2000da65 	.word	0x2000da65

00024eb8 <tls_interface_connect>:
   24eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24eba:	4605      	mov	r5, r0
   24ebc:	460e      	mov	r6, r1
   24ebe:	4617      	mov	r7, r2
   24ec0:	f7fe fd24 	bl	2390c <interface_socket_from_handle_get>
   24ec4:	4604      	mov	r4, r0
   24ec6:	b1f0      	cbz	r0, 24f06 <tls_interface_connect+0x4e>
   24ec8:	2324      	movs	r3, #36	; 0x24
   24eca:	436b      	muls	r3, r5
   24ecc:	4a10      	ldr	r2, [pc, #64]	; (24f10 <tls_interface_connect+0x58>)
   24ece:	5cd3      	ldrb	r3, [r2, r3]
   24ed0:	2b02      	cmp	r3, #2
   24ed2:	d11a      	bne.n	24f0a <tls_interface_connect+0x52>
   24ed4:	6803      	ldr	r3, [r0, #0]
   24ed6:	b29b      	uxth	r3, r3
   24ed8:	2b02      	cmp	r3, #2
   24eda:	d003      	beq.n	24ee4 <tls_interface_connect+0x2c>
   24edc:	6803      	ldr	r3, [r0, #0]
   24ede:	b29b      	uxth	r3, r3
   24ee0:	2b04      	cmp	r3, #4
   24ee2:	d112      	bne.n	24f0a <tls_interface_connect+0x52>
   24ee4:	463a      	mov	r2, r7
   24ee6:	4631      	mov	r1, r6
   24ee8:	4628      	mov	r0, r5
   24eea:	f007 ffba 	bl	2ce62 <ip_interface_connect>
   24eee:	b918      	cbnz	r0, 24ef8 <tls_interface_connect+0x40>
   24ef0:	4621      	mov	r1, r4
   24ef2:	4628      	mov	r0, r5
   24ef4:	f008 f923 	bl	2d13e <secure_client_socket>
   24ef8:	2800      	cmp	r0, #0
   24efa:	dd03      	ble.n	24f04 <tls_interface_connect+0x4c>
   24efc:	f007 f877 	bl	2bfee <nrf_modem_os_errno_set>
   24f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24f06:	2009      	movs	r0, #9
   24f08:	e7f8      	b.n	24efc <tls_interface_connect+0x44>
   24f0a:	205f      	movs	r0, #95	; 0x5f
   24f0c:	e7f6      	b.n	24efc <tls_interface_connect+0x44>
   24f0e:	bf00      	nop
   24f10:	2000da65 	.word	0x2000da65

00024f14 <tls_interface_listen>:
   24f14:	b538      	push	{r3, r4, r5, lr}
   24f16:	460d      	mov	r5, r1
   24f18:	4604      	mov	r4, r0
   24f1a:	f7fe fcf7 	bl	2390c <interface_socket_from_handle_get>
   24f1e:	4601      	mov	r1, r0
   24f20:	2800      	cmp	r0, #0
   24f22:	d033      	beq.n	24f8c <tls_interface_listen+0x78>
   24f24:	6803      	ldr	r3, [r0, #0]
   24f26:	00db      	lsls	r3, r3, #3
   24f28:	d432      	bmi.n	24f90 <tls_interface_listen+0x7c>
   24f2a:	6903      	ldr	r3, [r0, #16]
   24f2c:	2b01      	cmp	r3, #1
   24f2e:	d12f      	bne.n	24f90 <tls_interface_listen+0x7c>
   24f30:	6803      	ldr	r3, [r0, #0]
   24f32:	b29b      	uxth	r3, r3
   24f34:	2b04      	cmp	r3, #4
   24f36:	d105      	bne.n	24f44 <tls_interface_listen+0x30>
   24f38:	2324      	movs	r3, #36	; 0x24
   24f3a:	4363      	muls	r3, r4
   24f3c:	4a15      	ldr	r2, [pc, #84]	; (24f94 <tls_interface_listen+0x80>)
   24f3e:	5cd3      	ldrb	r3, [r2, r3]
   24f40:	2b02      	cmp	r3, #2
   24f42:	d009      	beq.n	24f58 <tls_interface_listen+0x44>
   24f44:	680b      	ldr	r3, [r1, #0]
   24f46:	b29b      	uxth	r3, r3
   24f48:	2b0b      	cmp	r3, #11
   24f4a:	d121      	bne.n	24f90 <tls_interface_listen+0x7c>
   24f4c:	2324      	movs	r3, #36	; 0x24
   24f4e:	4363      	muls	r3, r4
   24f50:	4a10      	ldr	r2, [pc, #64]	; (24f94 <tls_interface_listen+0x80>)
   24f52:	5cd3      	ldrb	r3, [r2, r3]
   24f54:	2b01      	cmp	r3, #1
   24f56:	d11b      	bne.n	24f90 <tls_interface_listen+0x7c>
   24f58:	2324      	movs	r3, #36	; 0x24
   24f5a:	2001      	movs	r0, #1
   24f5c:	4363      	muls	r3, r4
   24f5e:	4a0d      	ldr	r2, [pc, #52]	; (24f94 <tls_interface_listen+0x80>)
   24f60:	54d0      	strb	r0, [r2, r3]
   24f62:	680b      	ldr	r3, [r1, #0]
   24f64:	2b0b      	cmp	r3, #11
   24f66:	d10a      	bne.n	24f7e <tls_interface_listen+0x6a>
   24f68:	4629      	mov	r1, r5
   24f6a:	4620      	mov	r0, r4
   24f6c:	f7ff f88a 	bl	24084 <ip_interface_listen>
   24f70:	2800      	cmp	r0, #0
   24f72:	dd03      	ble.n	24f7c <tls_interface_listen+0x68>
   24f74:	f007 f83b 	bl	2bfee <nrf_modem_os_errno_set>
   24f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24f7c:	bd38      	pop	{r3, r4, r5, pc}
   24f7e:	4620      	mov	r0, r4
   24f80:	680a      	ldr	r2, [r1, #0]
   24f82:	f7ff fe0d 	bl	24ba0 <secure_socket_attach_initiate>
   24f86:	2800      	cmp	r0, #0
   24f88:	d0ee      	beq.n	24f68 <tls_interface_listen+0x54>
   24f8a:	e7f1      	b.n	24f70 <tls_interface_listen+0x5c>
   24f8c:	2009      	movs	r0, #9
   24f8e:	e7f1      	b.n	24f74 <tls_interface_listen+0x60>
   24f90:	205f      	movs	r0, #95	; 0x5f
   24f92:	e7ef      	b.n	24f74 <tls_interface_listen+0x60>
   24f94:	2000da65 	.word	0x2000da65

00024f98 <tls_interface_accept>:
   24f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24f9c:	4605      	mov	r5, r0
   24f9e:	460e      	mov	r6, r1
   24fa0:	4617      	mov	r7, r2
   24fa2:	4698      	mov	r8, r3
   24fa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24fa8:	f7fe fcb0 	bl	2390c <interface_socket_from_handle_get>
   24fac:	9401      	str	r4, [sp, #4]
   24fae:	2800      	cmp	r0, #0
   24fb0:	d04b      	beq.n	2504a <tls_interface_accept+0xb2>
   24fb2:	6803      	ldr	r3, [r0, #0]
   24fb4:	b29b      	uxth	r3, r3
   24fb6:	2b07      	cmp	r3, #7
   24fb8:	d147      	bne.n	2504a <tls_interface_accept+0xb2>
   24fba:	6803      	ldr	r3, [r0, #0]
   24fbc:	00db      	lsls	r3, r3, #3
   24fbe:	d506      	bpl.n	24fce <tls_interface_accept+0x36>
   24fc0:	205f      	movs	r0, #95	; 0x5f
   24fc2:	f007 f814 	bl	2bfee <nrf_modem_os_errno_set>
   24fc6:	4620      	mov	r0, r4
   24fc8:	b002      	add	sp, #8
   24fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24fce:	4643      	mov	r3, r8
   24fd0:	463a      	mov	r2, r7
   24fd2:	4631      	mov	r1, r6
   24fd4:	4628      	mov	r0, r5
   24fd6:	f7ff f8a3 	bl	24120 <ip_interface_accept>
   24fda:	1e04      	subs	r4, r0, #0
   24fdc:	db2f      	blt.n	2503e <tls_interface_accept+0xa6>
   24fde:	f7fe fc95 	bl	2390c <interface_socket_from_handle_get>
   24fe2:	2124      	movs	r1, #36	; 0x24
   24fe4:	6803      	ldr	r3, [r0, #0]
   24fe6:	4a1a      	ldr	r2, [pc, #104]	; (25050 <tls_interface_accept+0xb8>)
   24fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   24fec:	6003      	str	r3, [r0, #0]
   24fee:	6803      	ldr	r3, [r0, #0]
   24ff0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   24ff4:	6003      	str	r3, [r0, #0]
   24ff6:	fb01 2305 	mla	r3, r1, r5, r2
   24ffa:	fb01 2104 	mla	r1, r1, r4, r2
   24ffe:	f103 0524 	add.w	r5, r3, #36	; 0x24
   25002:	f853 6b04 	ldr.w	r6, [r3], #4
   25006:	42ab      	cmp	r3, r5
   25008:	f841 6b04 	str.w	r6, [r1], #4
   2500c:	d1f9      	bne.n	25002 <tls_interface_accept+0x6a>
   2500e:	2324      	movs	r3, #36	; 0x24
   25010:	2102      	movs	r1, #2
   25012:	4363      	muls	r3, r4
   25014:	54d1      	strb	r1, [r2, r3]
   25016:	6803      	ldr	r3, [r0, #0]
   25018:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2501c:	0c1b      	lsrs	r3, r3, #16
   2501e:	041b      	lsls	r3, r3, #16
   25020:	f043 030b 	orr.w	r3, r3, #11
   25024:	6003      	str	r3, [r0, #0]
   25026:	210c      	movs	r1, #12
   25028:	4620      	mov	r0, r4
   2502a:	ab01      	add	r3, sp, #4
   2502c:	f007 fe07 	bl	2cc3e <ip_interface_wait>
   25030:	4605      	mov	r5, r0
   25032:	2800      	cmp	r0, #0
   25034:	d0c7      	beq.n	24fc6 <tls_interface_accept+0x2e>
   25036:	4620      	mov	r0, r4
   25038:	f7fe fdea 	bl	23c10 <ip_interface_close>
   2503c:	462c      	mov	r4, r5
   2503e:	4620      	mov	r0, r4
   25040:	f006 ffd5 	bl	2bfee <nrf_modem_os_errno_set>
   25044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25048:	e7bd      	b.n	24fc6 <tls_interface_accept+0x2e>
   2504a:	2409      	movs	r4, #9
   2504c:	e7f7      	b.n	2503e <tls_interface_accept+0xa6>
   2504e:	bf00      	nop
   25050:	2000da65 	.word	0x2000da65

00025054 <tls_interface_setopt>:
   25054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25056:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2505a:	4606      	mov	r6, r0
   2505c:	4615      	mov	r5, r2
   2505e:	461f      	mov	r7, r3
   25060:	9c08      	ldr	r4, [sp, #32]
   25062:	d004      	beq.n	2506e <tls_interface_setopt+0x1a>
   25064:	b003      	add	sp, #12
   25066:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2506a:	f7ff b93d 	b.w	242e8 <ip_interface_setopt>
   2506e:	b923      	cbnz	r3, 2507a <tls_interface_setopt+0x26>
   25070:	2a05      	cmp	r2, #5
   25072:	d100      	bne.n	25076 <tls_interface_setopt+0x22>
   25074:	b10c      	cbz	r4, 2507a <tls_interface_setopt+0x26>
   25076:	200e      	movs	r0, #14
   25078:	e077      	b.n	2516a <tls_interface_setopt+0x116>
   2507a:	4630      	mov	r0, r6
   2507c:	f7fe fc46 	bl	2390c <interface_socket_from_handle_get>
   25080:	4601      	mov	r1, r0
   25082:	2800      	cmp	r0, #0
   25084:	f000 8087 	beq.w	25196 <tls_interface_setopt+0x142>
   25088:	6803      	ldr	r3, [r0, #0]
   2508a:	b29b      	uxth	r3, r3
   2508c:	2b02      	cmp	r3, #2
   2508e:	d007      	beq.n	250a0 <tls_interface_setopt+0x4c>
   25090:	6803      	ldr	r3, [r0, #0]
   25092:	b29b      	uxth	r3, r3
   25094:	2b04      	cmp	r3, #4
   25096:	d003      	beq.n	250a0 <tls_interface_setopt+0x4c>
   25098:	6803      	ldr	r3, [r0, #0]
   2509a:	b29b      	uxth	r3, r3
   2509c:	2b05      	cmp	r3, #5
   2509e:	d17a      	bne.n	25196 <tls_interface_setopt+0x142>
   250a0:	3d01      	subs	r5, #1
   250a2:	2d08      	cmp	r5, #8
   250a4:	d879      	bhi.n	2519a <tls_interface_setopt+0x146>
   250a6:	e8df f005 	tbb	[pc, r5]
   250aa:	2605      	.short	0x2605
   250ac:	55433818 	.word	0x55433818
   250b0:	6578      	.short	0x6578
   250b2:	71          	.byte	0x71
   250b3:	00          	.byte	0x00
   250b4:	2c04      	cmp	r4, #4
   250b6:	d174      	bne.n	251a2 <tls_interface_setopt+0x14e>
   250b8:	6838      	ldr	r0, [r7, #0]
   250ba:	b930      	cbnz	r0, 250ca <tls_interface_setopt+0x76>
   250bc:	2324      	movs	r3, #36	; 0x24
   250be:	2202      	movs	r2, #2
   250c0:	435e      	muls	r6, r3
   250c2:	4b39      	ldr	r3, [pc, #228]	; (251a8 <tls_interface_setopt+0x154>)
   250c4:	559a      	strb	r2, [r3, r6]
   250c6:	b003      	add	sp, #12
   250c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   250ca:	2801      	cmp	r0, #1
   250cc:	d169      	bne.n	251a2 <tls_interface_setopt+0x14e>
   250ce:	2324      	movs	r3, #36	; 0x24
   250d0:	435e      	muls	r6, r3
   250d2:	4b35      	ldr	r3, [pc, #212]	; (251a8 <tls_interface_setopt+0x154>)
   250d4:	5598      	strb	r0, [r3, r6]
   250d6:	2000      	movs	r0, #0
   250d8:	e7f5      	b.n	250c6 <tls_interface_setopt+0x72>
   250da:	2c01      	cmp	r4, #1
   250dc:	d161      	bne.n	251a2 <tls_interface_setopt+0x14e>
   250de:	2f00      	cmp	r7, #0
   250e0:	d0c9      	beq.n	25076 <tls_interface_setopt+0x22>
   250e2:	2024      	movs	r0, #36	; 0x24
   250e4:	783b      	ldrb	r3, [r7, #0]
   250e6:	4a30      	ldr	r2, [pc, #192]	; (251a8 <tls_interface_setopt+0x154>)
   250e8:	3b00      	subs	r3, #0
   250ea:	bf18      	it	ne
   250ec:	2301      	movne	r3, #1
   250ee:	fb00 2606 	mla	r6, r0, r6, r2
   250f2:	7073      	strb	r3, [r6, #1]
   250f4:	e7ef      	b.n	250d6 <tls_interface_setopt+0x82>
   250f6:	2c03      	cmp	r4, #3
   250f8:	d953      	bls.n	251a2 <tls_interface_setopt+0x14e>
   250fa:	f014 0503 	ands.w	r5, r4, #3
   250fe:	d150      	bne.n	251a2 <tls_interface_setopt+0x14e>
   25100:	2324      	movs	r3, #36	; 0x24
   25102:	435e      	muls	r6, r3
   25104:	4828      	ldr	r0, [pc, #160]	; (251a8 <tls_interface_setopt+0x154>)
   25106:	08a2      	lsrs	r2, r4, #2
   25108:	1983      	adds	r3, r0, r6
   2510a:	70da      	strb	r2, [r3, #3]
   2510c:	4639      	mov	r1, r7
   2510e:	4622      	mov	r2, r4
   25110:	3604      	adds	r6, #4
   25112:	4430      	add	r0, r6
   25114:	f008 fd53 	bl	2dbbe <memcpy>
   25118:	e7dd      	b.n	250d6 <tls_interface_setopt+0x82>
   2511a:	2c04      	cmp	r4, #4
   2511c:	d141      	bne.n	251a2 <tls_interface_setopt+0x14e>
   2511e:	683b      	ldr	r3, [r7, #0]
   25120:	2b02      	cmp	r3, #2
   25122:	d83e      	bhi.n	251a2 <tls_interface_setopt+0x14e>
   25124:	2024      	movs	r0, #36	; 0x24
   25126:	4a20      	ldr	r2, [pc, #128]	; (251a8 <tls_interface_setopt+0x154>)
   25128:	fb00 2606 	mla	r6, r0, r6, r2
   2512c:	70b3      	strb	r3, [r6, #2]
   2512e:	e7d2      	b.n	250d6 <tls_interface_setopt+0x82>
   25130:	4630      	mov	r0, r6
   25132:	f7ff fd23 	bl	24b7c <hostname_free>
   25136:	2c00      	cmp	r4, #0
   25138:	d0cd      	beq.n	250d6 <tls_interface_setopt+0x82>
   2513a:	4620      	mov	r0, r4
   2513c:	f7f9 fccc 	bl	1ead8 <nrf_modem_os_alloc>
   25140:	4b1a      	ldr	r3, [pc, #104]	; (251ac <tls_interface_setopt+0x158>)
   25142:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   25146:	b350      	cbz	r0, 2519e <tls_interface_setopt+0x14a>
   25148:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   2514c:	4622      	mov	r2, r4
   2514e:	4639      	mov	r1, r7
   25150:	6074      	str	r4, [r6, #4]
   25152:	e7df      	b.n	25114 <tls_interface_setopt+0xc0>
   25154:	f247 0301 	movw	r3, #28673	; 0x7001
   25158:	e9cd 7400 	strd	r7, r4, [sp]
   2515c:	f44f 7280 	mov.w	r2, #256	; 0x100
   25160:	4630      	mov	r0, r6
   25162:	f007 ff14 	bl	2cf8e <ip_interface_socketoption_send>
   25166:	2800      	cmp	r0, #0
   25168:	d0b5      	beq.n	250d6 <tls_interface_setopt+0x82>
   2516a:	f006 ff40 	bl	2bfee <nrf_modem_os_errno_set>
   2516e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25172:	e7a8      	b.n	250c6 <tls_interface_setopt+0x72>
   25174:	2c04      	cmp	r4, #4
   25176:	d114      	bne.n	251a2 <tls_interface_setopt+0x14e>
   25178:	6838      	ldr	r0, [r7, #0]
   2517a:	f7ff fce3 	bl	24b44 <secure_socket_dtls_timeout_check>
   2517e:	2800      	cmp	r0, #0
   25180:	d1f3      	bne.n	2516a <tls_interface_setopt+0x116>
   25182:	f247 0302 	movw	r3, #28674	; 0x7002
   25186:	e9cd 7400 	strd	r7, r4, [sp]
   2518a:	e7e7      	b.n	2515c <tls_interface_setopt+0x108>
   2518c:	f247 0303 	movw	r3, #28675	; 0x7003
   25190:	e9cd 7400 	strd	r7, r4, [sp]
   25194:	e7e2      	b.n	2515c <tls_interface_setopt+0x108>
   25196:	2009      	movs	r0, #9
   25198:	e7e7      	b.n	2516a <tls_interface_setopt+0x116>
   2519a:	206d      	movs	r0, #109	; 0x6d
   2519c:	e7e5      	b.n	2516a <tls_interface_setopt+0x116>
   2519e:	200c      	movs	r0, #12
   251a0:	e7e3      	b.n	2516a <tls_interface_setopt+0x116>
   251a2:	2016      	movs	r0, #22
   251a4:	e7e1      	b.n	2516a <tls_interface_setopt+0x116>
   251a6:	bf00      	nop
   251a8:	2000da65 	.word	0x2000da65
   251ac:	2000d3d0 	.word	0x2000d3d0

000251b0 <tls_interface_getopt>:
   251b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   251b2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   251b6:	b085      	sub	sp, #20
   251b8:	4606      	mov	r6, r0
   251ba:	4617      	mov	r7, r2
   251bc:	461d      	mov	r5, r3
   251be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   251c0:	d004      	beq.n	251cc <tls_interface_getopt+0x1c>
   251c2:	b005      	add	sp, #20
   251c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   251c8:	f007 bf47 	b.w	2d05a <ip_interface_getopt>
   251cc:	b103      	cbz	r3, 251d0 <tls_interface_getopt+0x20>
   251ce:	b92c      	cbnz	r4, 251dc <tls_interface_getopt+0x2c>
   251d0:	200e      	movs	r0, #14
   251d2:	f006 ff0c 	bl	2bfee <nrf_modem_os_errno_set>
   251d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   251da:	e051      	b.n	25280 <tls_interface_getopt+0xd0>
   251dc:	6823      	ldr	r3, [r4, #0]
   251de:	b90b      	cbnz	r3, 251e4 <tls_interface_getopt+0x34>
   251e0:	2016      	movs	r0, #22
   251e2:	e7f6      	b.n	251d2 <tls_interface_getopt+0x22>
   251e4:	f7fe fb92 	bl	2390c <interface_socket_from_handle_get>
   251e8:	4601      	mov	r1, r0
   251ea:	2800      	cmp	r0, #0
   251ec:	d068      	beq.n	252c0 <tls_interface_getopt+0x110>
   251ee:	1e7a      	subs	r2, r7, #1
   251f0:	2a07      	cmp	r2, #7
   251f2:	d871      	bhi.n	252d8 <tls_interface_getopt+0x128>
   251f4:	e8df f002 	tbb	[pc, r2]
   251f8:	461a2904 	.word	0x461a2904
   251fc:	5f705370 	.word	0x5f705370
   25200:	6823      	ldr	r3, [r4, #0]
   25202:	2124      	movs	r1, #36	; 0x24
   25204:	2b04      	cmp	r3, #4
   25206:	bf88      	it	hi
   25208:	2304      	movhi	r3, #4
   2520a:	fb01 f606 	mul.w	r6, r1, r6
   2520e:	bf88      	it	hi
   25210:	6023      	strhi	r3, [r4, #0]
   25212:	4b32      	ldr	r3, [pc, #200]	; (252dc <tls_interface_getopt+0x12c>)
   25214:	a903      	add	r1, sp, #12
   25216:	5d9b      	ldrb	r3, [r3, r6]
   25218:	1e5a      	subs	r2, r3, #1
   2521a:	4253      	negs	r3, r2
   2521c:	4153      	adcs	r3, r2
   2521e:	6822      	ldr	r2, [r4, #0]
   25220:	9303      	str	r3, [sp, #12]
   25222:	4628      	mov	r0, r5
   25224:	f008 fccb 	bl	2dbbe <memcpy>
   25228:	2000      	movs	r0, #0
   2522a:	e029      	b.n	25280 <tls_interface_getopt+0xd0>
   2522c:	6823      	ldr	r3, [r4, #0]
   2522e:	2b00      	cmp	r3, #0
   25230:	d0d6      	beq.n	251e0 <tls_interface_getopt+0x30>
   25232:	2124      	movs	r1, #36	; 0x24
   25234:	2b01      	cmp	r3, #1
   25236:	bf88      	it	hi
   25238:	2301      	movhi	r3, #1
   2523a:	4828      	ldr	r0, [pc, #160]	; (252dc <tls_interface_getopt+0x12c>)
   2523c:	bf88      	it	hi
   2523e:	6023      	strhi	r3, [r4, #0]
   25240:	fb01 0106 	mla	r1, r1, r6, r0
   25244:	6822      	ldr	r2, [r4, #0]
   25246:	3101      	adds	r1, #1
   25248:	e7eb      	b.n	25222 <tls_interface_getopt+0x72>
   2524a:	2324      	movs	r3, #36	; 0x24
   2524c:	4923      	ldr	r1, [pc, #140]	; (252dc <tls_interface_getopt+0x12c>)
   2524e:	6822      	ldr	r2, [r4, #0]
   25250:	fb03 1306 	mla	r3, r3, r6, r1
   25254:	78d8      	ldrb	r0, [r3, #3]
   25256:	0793      	lsls	r3, r2, #30
   25258:	bf14      	ite	ne
   2525a:	2300      	movne	r3, #0
   2525c:	0893      	lsreq	r3, r2, #2
   2525e:	4283      	cmp	r3, r0
   25260:	bf28      	it	cs
   25262:	4603      	movcs	r3, r0
   25264:	009f      	lsls	r7, r3, #2
   25266:	b143      	cbz	r3, 2527a <tls_interface_getopt+0xca>
   25268:	2024      	movs	r0, #36	; 0x24
   2526a:	fb00 1106 	mla	r1, r0, r6, r1
   2526e:	42ba      	cmp	r2, r7
   25270:	bf88      	it	hi
   25272:	6027      	strhi	r7, [r4, #0]
   25274:	6822      	ldr	r2, [r4, #0]
   25276:	3104      	adds	r1, #4
   25278:	e7d3      	b.n	25222 <tls_interface_getopt+0x72>
   2527a:	2800      	cmp	r0, #0
   2527c:	d1b0      	bne.n	251e0 <tls_interface_getopt+0x30>
   2527e:	6020      	str	r0, [r4, #0]
   25280:	b005      	add	sp, #20
   25282:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25284:	6823      	ldr	r3, [r4, #0]
   25286:	2124      	movs	r1, #36	; 0x24
   25288:	2b04      	cmp	r3, #4
   2528a:	bf88      	it	hi
   2528c:	2304      	movhi	r3, #4
   2528e:	4813      	ldr	r0, [pc, #76]	; (252dc <tls_interface_getopt+0x12c>)
   25290:	bf88      	it	hi
   25292:	6023      	strhi	r3, [r4, #0]
   25294:	fb01 0106 	mla	r1, r1, r6, r0
   25298:	6822      	ldr	r2, [r4, #0]
   2529a:	3102      	adds	r1, #2
   2529c:	e7c1      	b.n	25222 <tls_interface_getopt+0x72>
   2529e:	f247 0301 	movw	r3, #28673	; 0x7001
   252a2:	e9cd 5400 	strd	r5, r4, [sp]
   252a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   252aa:	4630      	mov	r0, r6
   252ac:	f7fe fe14 	bl	23ed8 <ip_interface_socketoption_get>
   252b0:	2800      	cmp	r0, #0
   252b2:	d0e5      	beq.n	25280 <tls_interface_getopt+0xd0>
   252b4:	e78d      	b.n	251d2 <tls_interface_getopt+0x22>
   252b6:	6823      	ldr	r3, [r4, #0]
   252b8:	2b04      	cmp	r3, #4
   252ba:	d903      	bls.n	252c4 <tls_interface_getopt+0x114>
   252bc:	2304      	movs	r3, #4
   252be:	6023      	str	r3, [r4, #0]
   252c0:	2009      	movs	r0, #9
   252c2:	e786      	b.n	251d2 <tls_interface_getopt+0x22>
   252c4:	6828      	ldr	r0, [r5, #0]
   252c6:	f7ff fc3d 	bl	24b44 <secure_socket_dtls_timeout_check>
   252ca:	2800      	cmp	r0, #0
   252cc:	d181      	bne.n	251d2 <tls_interface_getopt+0x22>
   252ce:	f247 0302 	movw	r3, #28674	; 0x7002
   252d2:	e9cd 5400 	strd	r5, r4, [sp]
   252d6:	e7e6      	b.n	252a6 <tls_interface_getopt+0xf6>
   252d8:	206d      	movs	r0, #109	; 0x6d
   252da:	e77a      	b.n	251d2 <tls_interface_getopt+0x22>
   252dc:	2000da65 	.word	0x2000da65

000252e0 <tls_rpc_ip_event_handler>:
   252e0:	b570      	push	{r4, r5, r6, lr}
   252e2:	460c      	mov	r4, r1
   252e4:	f248 0181 	movw	r1, #32897	; 0x8081
   252e8:	428b      	cmp	r3, r1
   252ea:	4606      	mov	r6, r0
   252ec:	d035      	beq.n	2535a <tls_rpc_ip_event_handler+0x7a>
   252ee:	f249 0182 	movw	r1, #36994	; 0x9082
   252f2:	428b      	cmp	r3, r1
   252f4:	d040      	beq.n	25378 <tls_rpc_ip_event_handler+0x98>
   252f6:	f248 0102 	movw	r1, #32770	; 0x8002
   252fa:	428b      	cmp	r3, r1
   252fc:	d161      	bne.n	253c2 <tls_rpc_ip_event_handler+0xe2>
   252fe:	2c00      	cmp	r4, #0
   25300:	d05f      	beq.n	253c2 <tls_rpc_ip_event_handler+0xe2>
   25302:	6963      	ldr	r3, [r4, #20]
   25304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   25308:	d002      	beq.n	25310 <tls_rpc_ip_event_handler+0x30>
   2530a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   2530e:	d158      	bne.n	253c2 <tls_rpc_ip_event_handler+0xe2>
   25310:	6823      	ldr	r3, [r4, #0]
   25312:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   25316:	6023      	str	r3, [r4, #0]
   25318:	6955      	ldr	r5, [r2, #20]
   2531a:	2d00      	cmp	r5, #0
   2531c:	d14d      	bne.n	253ba <tls_rpc_ip_event_handler+0xda>
   2531e:	6823      	ldr	r3, [r4, #0]
   25320:	0c1b      	lsrs	r3, r3, #16
   25322:	041b      	lsls	r3, r3, #16
   25324:	f043 0305 	orr.w	r3, r3, #5
   25328:	6023      	str	r3, [r4, #0]
   2532a:	6823      	ldr	r3, [r4, #0]
   2532c:	00db      	lsls	r3, r3, #3
   2532e:	d401      	bmi.n	25334 <tls_rpc_ip_event_handler+0x54>
   25330:	2000      	movs	r0, #0
   25332:	e020      	b.n	25376 <tls_rpc_ip_event_handler+0x96>
   25334:	2324      	movs	r3, #36	; 0x24
   25336:	4373      	muls	r3, r6
   25338:	4a23      	ldr	r2, [pc, #140]	; (253c8 <tls_rpc_ip_event_handler+0xe8>)
   2533a:	5cd3      	ldrb	r3, [r2, r3]
   2533c:	2b02      	cmp	r3, #2
   2533e:	d1f7      	bne.n	25330 <tls_rpc_ip_event_handler+0x50>
   25340:	4621      	mov	r1, r4
   25342:	4630      	mov	r0, r6
   25344:	f007 fefb 	bl	2d13e <secure_client_socket>
   25348:	2800      	cmp	r0, #0
   2534a:	d0f1      	beq.n	25330 <tls_rpc_ip_event_handler+0x50>
   2534c:	2877      	cmp	r0, #119	; 0x77
   2534e:	d0ef      	beq.n	25330 <tls_rpc_ip_event_handler+0x50>
   25350:	6060      	str	r0, [r4, #4]
   25352:	6823      	ldr	r3, [r4, #0]
   25354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   25358:	e02d      	b.n	253b6 <tls_rpc_ip_event_handler+0xd6>
   2535a:	2c00      	cmp	r4, #0
   2535c:	d0e8      	beq.n	25330 <tls_rpc_ip_event_handler+0x50>
   2535e:	6823      	ldr	r3, [r4, #0]
   25360:	b29b      	uxth	r3, r3
   25362:	2b0a      	cmp	r3, #10
   25364:	d1e4      	bne.n	25330 <tls_rpc_ip_event_handler+0x50>
   25366:	6950      	ldr	r0, [r2, #20]
   25368:	bb40      	cbnz	r0, 253bc <tls_rpc_ip_event_handler+0xdc>
   2536a:	6823      	ldr	r3, [r4, #0]
   2536c:	0c1b      	lsrs	r3, r3, #16
   2536e:	041b      	lsls	r3, r3, #16
   25370:	f043 030b 	orr.w	r3, r3, #11
   25374:	6023      	str	r3, [r4, #0]
   25376:	bd70      	pop	{r4, r5, r6, pc}
   25378:	2c00      	cmp	r4, #0
   2537a:	d0d9      	beq.n	25330 <tls_rpc_ip_event_handler+0x50>
   2537c:	6823      	ldr	r3, [r4, #0]
   2537e:	b29b      	uxth	r3, r3
   25380:	2b0b      	cmp	r3, #11
   25382:	d1d5      	bne.n	25330 <tls_rpc_ip_event_handler+0x50>
   25384:	6915      	ldr	r5, [r2, #16]
   25386:	b9c5      	cbnz	r5, 253ba <tls_rpc_ip_event_handler+0xda>
   25388:	6823      	ldr	r3, [r4, #0]
   2538a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   2538e:	6023      	str	r3, [r4, #0]
   25390:	f7ff fbf4 	bl	24b7c <hostname_free>
   25394:	6823      	ldr	r3, [r4, #0]
   25396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2539a:	6023      	str	r3, [r4, #0]
   2539c:	6823      	ldr	r3, [r4, #0]
   2539e:	0c1b      	lsrs	r3, r3, #16
   253a0:	041b      	lsls	r3, r3, #16
   253a2:	f043 030c 	orr.w	r3, r3, #12
   253a6:	6023      	str	r3, [r4, #0]
   253a8:	6823      	ldr	r3, [r4, #0]
   253aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   253ae:	6023      	str	r3, [r4, #0]
   253b0:	6823      	ldr	r3, [r4, #0]
   253b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   253b6:	6023      	str	r3, [r4, #0]
   253b8:	e7ba      	b.n	25330 <tls_rpc_ip_event_handler+0x50>
   253ba:	4628      	mov	r0, r5
   253bc:	f7fe fb6c 	bl	23a98 <rpc_error_to_nrf_errno>
   253c0:	e7c6      	b.n	25350 <tls_rpc_ip_event_handler+0x70>
   253c2:	2001      	movs	r0, #1
   253c4:	e7d7      	b.n	25376 <tls_rpc_ip_event_handler+0x96>
   253c6:	bf00      	nop
   253c8:	2000da65 	.word	0x2000da65

000253cc <at_cmd_send>:
   253cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   253ce:	4615      	mov	r5, r2
   253d0:	f06f 0258 	mvn.w	r2, #88	; 0x58
   253d4:	2300      	movs	r3, #0
   253d6:	7302      	strb	r2, [r0, #12]
   253d8:	2204      	movs	r2, #4
   253da:	4c0d      	ldr	r4, [pc, #52]	; (25410 <at_cmd_send+0x44>)
   253dc:	7343      	strb	r3, [r0, #13]
   253de:	7383      	strb	r3, [r0, #14]
   253e0:	73c3      	strb	r3, [r0, #15]
   253e2:	7202      	strb	r2, [r0, #8]
   253e4:	7243      	strb	r3, [r0, #9]
   253e6:	7283      	strb	r3, [r0, #10]
   253e8:	72c3      	strb	r3, [r0, #11]
   253ea:	4602      	mov	r2, r0
   253ec:	b289      	uxth	r1, r1
   253ee:	2003      	movs	r0, #3
   253f0:	7023      	strb	r3, [r4, #0]
   253f2:	f007 fb75 	bl	2cae0 <rpc_client_request_send>
   253f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   253fa:	9301      	str	r3, [sp, #4]
   253fc:	7823      	ldrb	r3, [r4, #0]
   253fe:	42ab      	cmp	r3, r5
   25400:	d101      	bne.n	25406 <at_cmd_send+0x3a>
   25402:	b003      	add	sp, #12
   25404:	bd30      	pop	{r4, r5, pc}
   25406:	a901      	add	r1, sp, #4
   25408:	2000      	movs	r0, #0
   2540a:	f7f9 fa03 	bl	1e814 <nrf_modem_os_timedwait>
   2540e:	e7f5      	b.n	253fc <at_cmd_send+0x30>
   25410:	2000db85 	.word	0x2000db85

00025414 <at_response_match>:
   25414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25416:	4605      	mov	r5, r0
   25418:	2400      	movs	r4, #0
   2541a:	4f10      	ldr	r7, [pc, #64]	; (2545c <at_response_match+0x48>)
   2541c:	f857 6b04 	ldr.w	r6, [r7], #4
   25420:	4628      	mov	r0, r5
   25422:	4631      	mov	r1, r6
   25424:	f008 fd7b 	bl	2df1e <strstr>
   25428:	b928      	cbnz	r0, 25436 <at_response_match+0x22>
   2542a:	3401      	adds	r4, #1
   2542c:	2c04      	cmp	r4, #4
   2542e:	d1f5      	bne.n	2541c <at_response_match+0x8>
   25430:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   25434:	e00e      	b.n	25454 <at_response_match+0x40>
   25436:	2c01      	cmp	r4, #1
   25438:	d0fa      	beq.n	25430 <at_response_match+0x1c>
   2543a:	1ea3      	subs	r3, r4, #2
   2543c:	2b01      	cmp	r3, #1
   2543e:	d80a      	bhi.n	25456 <at_response_match+0x42>
   25440:	4630      	mov	r0, r6
   25442:	f7f4 f88b 	bl	1955c <strlen>
   25446:	220a      	movs	r2, #10
   25448:	2100      	movs	r1, #0
   2544a:	4428      	add	r0, r5
   2544c:	f004 f9f0 	bl	29830 <strtol>
   25450:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   25454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25456:	2000      	movs	r0, #0
   25458:	e7fc      	b.n	25454 <at_response_match+0x40>
   2545a:	bf00      	nop
   2545c:	0002edb8 	.word	0x0002edb8

00025460 <at_vprintf>:
   25460:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25464:	4607      	mov	r7, r0
   25466:	460e      	mov	r6, r1
   25468:	481d      	ldr	r0, [pc, #116]	; (254e0 <at_vprintf+0x80>)
   2546a:	2100      	movs	r1, #0
   2546c:	4690      	mov	r8, r2
   2546e:	461d      	mov	r5, r3
   25470:	9301      	str	r3, [sp, #4]
   25472:	f004 fd45 	bl	29f00 <vsniprintf>
   25476:	3001      	adds	r0, #1
   25478:	f007 fb2c 	bl	2cad4 <rpc_client_request_alloc>
   2547c:	4604      	mov	r4, r0
   2547e:	b360      	cbz	r0, 254da <at_vprintf+0x7a>
   25480:	9501      	str	r5, [sp, #4]
   25482:	462b      	mov	r3, r5
   25484:	6841      	ldr	r1, [r0, #4]
   25486:	4642      	mov	r2, r8
   25488:	6800      	ldr	r0, [r0, #0]
   2548a:	f004 fd39 	bl	29f00 <vsniprintf>
   2548e:	2202      	movs	r2, #2
   25490:	2101      	movs	r1, #1
   25492:	4620      	mov	r0, r4
   25494:	f7ff ff9a 	bl	253cc <at_cmd_send>
   25498:	4d12      	ldr	r5, [pc, #72]	; (254e4 <at_vprintf+0x84>)
   2549a:	b97f      	cbnz	r7, 254bc <at_vprintf+0x5c>
   2549c:	682b      	ldr	r3, [r5, #0]
   2549e:	6818      	ldr	r0, [r3, #0]
   254a0:	f7ff ffb8 	bl	25414 <at_response_match>
   254a4:	4604      	mov	r4, r0
   254a6:	682b      	ldr	r3, [r5, #0]
   254a8:	6818      	ldr	r0, [r3, #0]
   254aa:	f007 fb23 	bl	2caf4 <rpc_client_data_free>
   254ae:	6828      	ldr	r0, [r5, #0]
   254b0:	f007 fb1d 	bl	2caee <rpc_client_message_free>
   254b4:	4620      	mov	r0, r4
   254b6:	b002      	add	sp, #8
   254b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   254bc:	682c      	ldr	r4, [r5, #0]
   254be:	4638      	mov	r0, r7
   254c0:	6862      	ldr	r2, [r4, #4]
   254c2:	6821      	ldr	r1, [r4, #0]
   254c4:	42b2      	cmp	r2, r6
   254c6:	bf28      	it	cs
   254c8:	4632      	movcs	r2, r6
   254ca:	f008 fb78 	bl	2dbbe <memcpy>
   254ce:	6863      	ldr	r3, [r4, #4]
   254d0:	42b3      	cmp	r3, r6
   254d2:	d9e3      	bls.n	2549c <at_vprintf+0x3c>
   254d4:	f06f 0406 	mvn.w	r4, #6
   254d8:	e7e5      	b.n	254a6 <at_vprintf+0x46>
   254da:	f06f 040b 	mvn.w	r4, #11
   254de:	e7e9      	b.n	254b4 <at_vprintf+0x54>
   254e0:	0002ea84 	.word	0x0002ea84
   254e4:	2000d420 	.word	0x2000d420

000254e8 <nrf_modem_at_init>:
   254e8:	2201      	movs	r2, #1
   254ea:	b508      	push	{r3, lr}
   254ec:	4611      	mov	r1, r2
   254ee:	4808      	ldr	r0, [pc, #32]	; (25510 <nrf_modem_at_init+0x28>)
   254f0:	f7f9 fa44 	bl	1e97c <nrf_modem_os_sem_init>
   254f4:	2000      	movs	r0, #0
   254f6:	f007 faed 	bl	2cad4 <rpc_client_request_alloc>
   254fa:	b128      	cbz	r0, 25508 <nrf_modem_at_init+0x20>
   254fc:	2201      	movs	r2, #1
   254fe:	2105      	movs	r1, #5
   25500:	f7ff ff64 	bl	253cc <at_cmd_send>
   25504:	2000      	movs	r0, #0
   25506:	bd08      	pop	{r3, pc}
   25508:	f06f 000b 	mvn.w	r0, #11
   2550c:	e7fb      	b.n	25506 <nrf_modem_at_init+0x1e>
   2550e:	bf00      	nop
   25510:	2000d410 	.word	0x2000d410

00025514 <nrf_modem_at_notif_handler_set>:
   25514:	4b01      	ldr	r3, [pc, #4]	; (2551c <nrf_modem_at_notif_handler_set+0x8>)
   25516:	6018      	str	r0, [r3, #0]
   25518:	2000      	movs	r0, #0
   2551a:	4770      	bx	lr
   2551c:	2000d41c 	.word	0x2000d41c

00025520 <nrf_modem_at_printf>:
   25520:	b40f      	push	{r0, r1, r2, r3}
   25522:	4b11      	ldr	r3, [pc, #68]	; (25568 <nrf_modem_at_printf+0x48>)
   25524:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25526:	781b      	ldrb	r3, [r3, #0]
   25528:	9c06      	ldr	r4, [sp, #24]
   2552a:	b1bb      	cbz	r3, 2555c <nrf_modem_at_printf+0x3c>
   2552c:	b1cc      	cbz	r4, 25562 <nrf_modem_at_printf+0x42>
   2552e:	4d0f      	ldr	r5, [pc, #60]	; (2556c <nrf_modem_at_printf+0x4c>)
   25530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   25534:	6828      	ldr	r0, [r5, #0]
   25536:	f7f9 fa75 	bl	1ea24 <nrf_modem_os_sem_take>
   2553a:	2100      	movs	r1, #0
   2553c:	4622      	mov	r2, r4
   2553e:	ab07      	add	r3, sp, #28
   25540:	4608      	mov	r0, r1
   25542:	9301      	str	r3, [sp, #4]
   25544:	f7ff ff8c 	bl	25460 <at_vprintf>
   25548:	4604      	mov	r4, r0
   2554a:	6828      	ldr	r0, [r5, #0]
   2554c:	f7f9 fa4c 	bl	1e9e8 <nrf_modem_os_sem_give>
   25550:	4620      	mov	r0, r4
   25552:	b003      	add	sp, #12
   25554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25558:	b004      	add	sp, #16
   2555a:	4770      	bx	lr
   2555c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25560:	e7f6      	b.n	25550 <nrf_modem_at_printf+0x30>
   25562:	f06f 040d 	mvn.w	r4, #13
   25566:	e7f3      	b.n	25550 <nrf_modem_at_printf+0x30>
   25568:	2000db8b 	.word	0x2000db8b
   2556c:	2000d410 	.word	0x2000d410

00025570 <nrf_modem_at_cmd>:
   25570:	b40c      	push	{r2, r3}
   25572:	4b2e      	ldr	r3, [pc, #184]	; (2562c <nrf_modem_at_cmd+0xbc>)
   25574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25578:	781b      	ldrb	r3, [r3, #0]
   2557a:	4605      	mov	r5, r0
   2557c:	460f      	mov	r7, r1
   2557e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   25582:	2b00      	cmp	r3, #0
   25584:	d049      	beq.n	2561a <nrf_modem_at_cmd+0xaa>
   25586:	2800      	cmp	r0, #0
   25588:	d04a      	beq.n	25620 <nrf_modem_at_cmd+0xb0>
   2558a:	f1b8 0f00 	cmp.w	r8, #0
   2558e:	d047      	beq.n	25620 <nrf_modem_at_cmd+0xb0>
   25590:	2900      	cmp	r1, #0
   25592:	d048      	beq.n	25626 <nrf_modem_at_cmd+0xb6>
   25594:	4b26      	ldr	r3, [pc, #152]	; (25630 <nrf_modem_at_cmd+0xc0>)
   25596:	681a      	ldr	r2, [r3, #0]
   25598:	4699      	mov	r9, r3
   2559a:	b1d2      	cbz	r2, 255d2 <nrf_modem_at_cmd+0x62>
   2559c:	4e25      	ldr	r6, [pc, #148]	; (25634 <nrf_modem_at_cmd+0xc4>)
   2559e:	6833      	ldr	r3, [r6, #0]
   255a0:	b1bb      	cbz	r3, 255d2 <nrf_modem_at_cmd+0x62>
   255a2:	2400      	movs	r4, #0
   255a4:	f8d9 3000 	ldr.w	r3, [r9]
   255a8:	429c      	cmp	r4, r3
   255aa:	d212      	bcs.n	255d2 <nrf_modem_at_cmd+0x62>
   255ac:	6833      	ldr	r3, [r6, #0]
   255ae:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   255b2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   255b6:	f7f3 ffd1 	bl	1955c <strlen>
   255ba:	6833      	ldr	r3, [r6, #0]
   255bc:	4602      	mov	r2, r0
   255be:	4641      	mov	r1, r8
   255c0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   255c4:	f008 fc78 	bl	2deb8 <strncmp>
   255c8:	b9a8      	cbnz	r0, 255f6 <nrf_modem_at_cmd+0x86>
   255ca:	6833      	ldr	r3, [r6, #0]
   255cc:	4453      	add	r3, sl
   255ce:	685b      	ldr	r3, [r3, #4]
   255d0:	b99b      	cbnz	r3, 255fa <nrf_modem_at_cmd+0x8a>
   255d2:	4e19      	ldr	r6, [pc, #100]	; (25638 <nrf_modem_at_cmd+0xc8>)
   255d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   255d8:	6830      	ldr	r0, [r6, #0]
   255da:	f7f9 fa23 	bl	1ea24 <nrf_modem_os_sem_take>
   255de:	ab0b      	add	r3, sp, #44	; 0x2c
   255e0:	4642      	mov	r2, r8
   255e2:	4639      	mov	r1, r7
   255e4:	4628      	mov	r0, r5
   255e6:	9301      	str	r3, [sp, #4]
   255e8:	f7ff ff3a 	bl	25460 <at_vprintf>
   255ec:	4604      	mov	r4, r0
   255ee:	6830      	ldr	r0, [r6, #0]
   255f0:	f7f9 f9fa 	bl	1e9e8 <nrf_modem_os_sem_give>
   255f4:	e00b      	b.n	2560e <nrf_modem_at_cmd+0x9e>
   255f6:	3401      	adds	r4, #1
   255f8:	e7d4      	b.n	255a4 <nrf_modem_at_cmd+0x34>
   255fa:	4642      	mov	r2, r8
   255fc:	4639      	mov	r1, r7
   255fe:	4628      	mov	r0, r5
   25600:	4798      	blx	r3
   25602:	1e04      	subs	r4, r0, #0
   25604:	db03      	blt.n	2560e <nrf_modem_at_cmd+0x9e>
   25606:	4628      	mov	r0, r5
   25608:	f7ff ff04 	bl	25414 <at_response_match>
   2560c:	4604      	mov	r4, r0
   2560e:	4620      	mov	r0, r4
   25610:	b002      	add	sp, #8
   25612:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25616:	b002      	add	sp, #8
   25618:	4770      	bx	lr
   2561a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2561e:	e7f6      	b.n	2560e <nrf_modem_at_cmd+0x9e>
   25620:	f06f 040d 	mvn.w	r4, #13
   25624:	e7f3      	b.n	2560e <nrf_modem_at_cmd+0x9e>
   25626:	f06f 0415 	mvn.w	r4, #21
   2562a:	e7f0      	b.n	2560e <nrf_modem_at_cmd+0x9e>
   2562c:	2000db8b 	.word	0x2000db8b
   25630:	2000d418 	.word	0x2000d418
   25634:	2000d414 	.word	0x2000d414
   25638:	2000d410 	.word	0x2000d410

0002563c <nrf_modem_at_scanf>:
   2563c:	b40e      	push	{r1, r2, r3}
   2563e:	4b23      	ldr	r3, [pc, #140]	; (256cc <nrf_modem_at_scanf+0x90>)
   25640:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   25642:	781b      	ldrb	r3, [r3, #0]
   25644:	4605      	mov	r5, r0
   25646:	9f07      	ldr	r7, [sp, #28]
   25648:	2b00      	cmp	r3, #0
   2564a:	d039      	beq.n	256c0 <nrf_modem_at_scanf+0x84>
   2564c:	2800      	cmp	r0, #0
   2564e:	d03a      	beq.n	256c6 <nrf_modem_at_scanf+0x8a>
   25650:	2f00      	cmp	r7, #0
   25652:	d038      	beq.n	256c6 <nrf_modem_at_scanf+0x8a>
   25654:	4e1e      	ldr	r6, [pc, #120]	; (256d0 <nrf_modem_at_scanf+0x94>)
   25656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2565a:	6830      	ldr	r0, [r6, #0]
   2565c:	f7f9 f9e2 	bl	1ea24 <nrf_modem_os_sem_take>
   25660:	4628      	mov	r0, r5
   25662:	f7f3 ff7b 	bl	1955c <strlen>
   25666:	3001      	adds	r0, #1
   25668:	f007 fa34 	bl	2cad4 <rpc_client_request_alloc>
   2566c:	4604      	mov	r4, r0
   2566e:	b320      	cbz	r0, 256ba <nrf_modem_at_scanf+0x7e>
   25670:	4629      	mov	r1, r5
   25672:	6800      	ldr	r0, [r0, #0]
   25674:	4d17      	ldr	r5, [pc, #92]	; (256d4 <nrf_modem_at_scanf+0x98>)
   25676:	f008 fc17 	bl	2dea8 <strcpy>
   2567a:	4620      	mov	r0, r4
   2567c:	2202      	movs	r2, #2
   2567e:	2101      	movs	r1, #1
   25680:	f7ff fea4 	bl	253cc <at_cmd_send>
   25684:	682b      	ldr	r3, [r5, #0]
   25686:	aa08      	add	r2, sp, #32
   25688:	4639      	mov	r1, r7
   2568a:	6818      	ldr	r0, [r3, #0]
   2568c:	9201      	str	r2, [sp, #4]
   2568e:	f004 fc69 	bl	29f64 <vsiscanf>
   25692:	682b      	ldr	r3, [r5, #0]
   25694:	1e04      	subs	r4, r0, #0
   25696:	6818      	ldr	r0, [r3, #0]
   25698:	bf08      	it	eq
   2569a:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   2569e:	f007 fa29 	bl	2caf4 <rpc_client_data_free>
   256a2:	6828      	ldr	r0, [r5, #0]
   256a4:	f007 fa23 	bl	2caee <rpc_client_message_free>
   256a8:	6830      	ldr	r0, [r6, #0]
   256aa:	f7f9 f99d 	bl	1e9e8 <nrf_modem_os_sem_give>
   256ae:	4620      	mov	r0, r4
   256b0:	b002      	add	sp, #8
   256b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   256b6:	b003      	add	sp, #12
   256b8:	4770      	bx	lr
   256ba:	f06f 040b 	mvn.w	r4, #11
   256be:	e7f3      	b.n	256a8 <nrf_modem_at_scanf+0x6c>
   256c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   256c4:	e7f3      	b.n	256ae <nrf_modem_at_scanf+0x72>
   256c6:	f06f 040d 	mvn.w	r4, #13
   256ca:	e7f0      	b.n	256ae <nrf_modem_at_scanf+0x72>
   256cc:	2000db8b 	.word	0x2000db8b
   256d0:	2000d410 	.word	0x2000d410
   256d4:	2000d420 	.word	0x2000d420

000256d8 <rpc_at_event_handler>:
   256d8:	b570      	push	{r4, r5, r6, lr}
   256da:	68c3      	ldr	r3, [r0, #12]
   256dc:	4605      	mov	r5, r0
   256de:	2ba7      	cmp	r3, #167	; 0xa7
   256e0:	d003      	beq.n	256ea <rpc_at_event_handler+0x12>
   256e2:	6828      	ldr	r0, [r5, #0]
   256e4:	f007 fa06 	bl	2caf4 <rpc_client_data_free>
   256e8:	e008      	b.n	256fc <rpc_at_event_handler+0x24>
   256ea:	2903      	cmp	r1, #3
   256ec:	d008      	beq.n	25700 <rpc_at_event_handler+0x28>
   256ee:	2904      	cmp	r1, #4
   256f0:	d019      	beq.n	25726 <rpc_at_event_handler+0x4e>
   256f2:	2902      	cmp	r1, #2
   256f4:	d102      	bne.n	256fc <rpc_at_event_handler+0x24>
   256f6:	2201      	movs	r2, #1
   256f8:	4b0e      	ldr	r3, [pc, #56]	; (25734 <rpc_at_event_handler+0x5c>)
   256fa:	701a      	strb	r2, [r3, #0]
   256fc:	2000      	movs	r0, #0
   256fe:	e00a      	b.n	25716 <rpc_at_event_handler+0x3e>
   25700:	4e0d      	ldr	r6, [pc, #52]	; (25738 <rpc_at_event_handler+0x60>)
   25702:	6833      	ldr	r3, [r6, #0]
   25704:	b143      	cbz	r3, 25718 <rpc_at_event_handler+0x40>
   25706:	2400      	movs	r4, #0
   25708:	6800      	ldr	r0, [r0, #0]
   2570a:	4798      	blx	r3
   2570c:	6828      	ldr	r0, [r5, #0]
   2570e:	6034      	str	r4, [r6, #0]
   25710:	f007 f9f0 	bl	2caf4 <rpc_client_data_free>
   25714:	b2e0      	uxtb	r0, r4
   25716:	bd70      	pop	{r4, r5, r6, pc}
   25718:	2202      	movs	r2, #2
   2571a:	4b08      	ldr	r3, [pc, #32]	; (2573c <rpc_at_event_handler+0x64>)
   2571c:	2401      	movs	r4, #1
   2571e:	6018      	str	r0, [r3, #0]
   25720:	4b04      	ldr	r3, [pc, #16]	; (25734 <rpc_at_event_handler+0x5c>)
   25722:	701a      	strb	r2, [r3, #0]
   25724:	e7f6      	b.n	25714 <rpc_at_event_handler+0x3c>
   25726:	4b06      	ldr	r3, [pc, #24]	; (25740 <rpc_at_event_handler+0x68>)
   25728:	681b      	ldr	r3, [r3, #0]
   2572a:	2b00      	cmp	r3, #0
   2572c:	d0d9      	beq.n	256e2 <rpc_at_event_handler+0xa>
   2572e:	6800      	ldr	r0, [r0, #0]
   25730:	4798      	blx	r3
   25732:	e7d6      	b.n	256e2 <rpc_at_event_handler+0xa>
   25734:	2000db85 	.word	0x2000db85
   25738:	2000d424 	.word	0x2000d424
   2573c:	2000d420 	.word	0x2000d420
   25740:	2000d41c 	.word	0x2000d41c

00025744 <rpc_dfu_event_handler>:
   25744:	b510      	push	{r4, lr}
   25746:	4604      	mov	r4, r0
   25748:	6800      	ldr	r0, [r0, #0]
   2574a:	b108      	cbz	r0, 25750 <rpc_dfu_event_handler+0xc>
   2574c:	f007 f9d2 	bl	2caf4 <rpc_client_data_free>
   25750:	4b05      	ldr	r3, [pc, #20]	; (25768 <rpc_dfu_event_handler+0x24>)
   25752:	68e2      	ldr	r2, [r4, #12]
   25754:	429a      	cmp	r2, r3
   25756:	bf05      	ittet	eq
   25758:	2001      	moveq	r0, #1
   2575a:	4b04      	ldreq	r3, [pc, #16]	; (2576c <rpc_dfu_event_handler+0x28>)
   2575c:	2000      	movne	r0, #0
   2575e:	7018      	strbeq	r0, [r3, #0]
   25760:	bf04      	itt	eq
   25762:	4b03      	ldreq	r3, [pc, #12]	; (25770 <rpc_dfu_event_handler+0x2c>)
   25764:	601c      	streq	r4, [r3, #0]
   25766:	bd10      	pop	{r4, pc}
   25768:	15abe11a 	.word	0x15abe11a
   2576c:	2000db86 	.word	0x2000db86
   25770:	2000d428 	.word	0x2000d428

00025774 <rpc_gnss_event_handler>:
   25774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25778:	6804      	ldr	r4, [r0, #0]
   2577a:	4607      	mov	r7, r0
   2577c:	460d      	mov	r5, r1
   2577e:	2c00      	cmp	r4, #0
   25780:	f000 8086 	beq.w	25890 <rpc_gnss_event_handler+0x11c>
   25784:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   25788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2578c:	d142      	bne.n	25814 <rpc_gnss_event_handler+0xa0>
   2578e:	4b5f      	ldr	r3, [pc, #380]	; (2590c <rpc_gnss_event_handler+0x198>)
   25790:	781a      	ldrb	r2, [r3, #0]
   25792:	4698      	mov	r8, r3
   25794:	2a01      	cmp	r2, #1
   25796:	d131      	bne.n	257fc <rpc_gnss_event_handler+0x88>
   25798:	4a5d      	ldr	r2, [pc, #372]	; (25910 <rpc_gnss_event_handler+0x19c>)
   2579a:	6821      	ldr	r1, [r4, #0]
   2579c:	8812      	ldrh	r2, [r2, #0]
   2579e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   257a2:	d12b      	bne.n	257fc <rpc_gnss_event_handler+0x88>
   257a4:	6862      	ldr	r2, [r4, #4]
   257a6:	bb6a      	cbnz	r2, 25804 <rpc_gnss_event_handler+0x90>
   257a8:	4b5a      	ldr	r3, [pc, #360]	; (25914 <rpc_gnss_event_handler+0x1a0>)
   257aa:	681e      	ldr	r6, [r3, #0]
   257ac:	b31e      	cbz	r6, 257f6 <rpc_gnss_event_handler+0x82>
   257ae:	f242 0309 	movw	r3, #8201	; 0x2009
   257b2:	429d      	cmp	r5, r3
   257b4:	d11f      	bne.n	257f6 <rpc_gnss_event_handler+0x82>
   257b6:	4630      	mov	r0, r6
   257b8:	8923      	ldrh	r3, [r4, #8]
   257ba:	2280      	movs	r2, #128	; 0x80
   257bc:	f840 3b04 	str.w	r3, [r0], #4
   257c0:	f104 010a 	add.w	r1, r4, #10
   257c4:	f008 f9fb 	bl	2dbbe <memcpy>
   257c8:	2280      	movs	r2, #128	; 0x80
   257ca:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   257ce:	f106 0084 	add.w	r0, r6, #132	; 0x84
   257d2:	f008 f9f4 	bl	2dbbe <memcpy>
   257d6:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   257da:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   257de:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   257e2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   257e6:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   257ea:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   257ee:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   257f2:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   257f6:	2300      	movs	r3, #0
   257f8:	f888 3000 	strb.w	r3, [r8]
   257fc:	6838      	ldr	r0, [r7, #0]
   257fe:	f007 f979 	bl	2caf4 <rpc_client_data_free>
   25802:	e045      	b.n	25890 <rpc_gnss_event_handler+0x11c>
   25804:	f647 71ff 	movw	r1, #32767	; 0x7fff
   25808:	428a      	cmp	r2, r1
   2580a:	bf0c      	ite	eq
   2580c:	2203      	moveq	r2, #3
   2580e:	2202      	movne	r2, #2
   25810:	701a      	strb	r2, [r3, #0]
   25812:	e7f3      	b.n	257fc <rpc_gnss_event_handler+0x88>
   25814:	4e40      	ldr	r6, [pc, #256]	; (25918 <rpc_gnss_event_handler+0x1a4>)
   25816:	6833      	ldr	r3, [r6, #0]
   25818:	2b00      	cmp	r3, #0
   2581a:	d0ef      	beq.n	257fc <rpc_gnss_event_handler+0x88>
   2581c:	f244 0204 	movw	r2, #16388	; 0x4004
   25820:	4291      	cmp	r1, r2
   25822:	d80b      	bhi.n	2583c <rpc_gnss_event_handler+0xc8>
   25824:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   25828:	d9e8      	bls.n	257fc <rpc_gnss_event_handler+0x88>
   2582a:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   2582e:	3a02      	subs	r2, #2
   25830:	2a02      	cmp	r2, #2
   25832:	d80b      	bhi.n	2584c <rpc_gnss_event_handler+0xd8>
   25834:	e8df f002 	tbb	[pc, r2]
   25838:	4f45      	.short	0x4f45
   2583a:	59          	.byte	0x59
   2583b:	00          	.byte	0x00
   2583c:	f244 1301 	movw	r3, #16641	; 0x4101
   25840:	4299      	cmp	r1, r3
   25842:	d003      	beq.n	2584c <rpc_gnss_event_handler+0xd8>
   25844:	f244 2301 	movw	r3, #16897	; 0x4201
   25848:	4299      	cmp	r1, r3
   2584a:	d1d7      	bne.n	257fc <rpc_gnss_event_handler+0x88>
   2584c:	4f33      	ldr	r7, [pc, #204]	; (2591c <rpc_gnss_event_handler+0x1a8>)
   2584e:	6838      	ldr	r0, [r7, #0]
   25850:	b108      	cbz	r0, 25856 <rpc_gnss_event_handler+0xe2>
   25852:	f007 f94f 	bl	2caf4 <rpc_client_data_free>
   25856:	f244 2301 	movw	r3, #16897	; 0x4201
   2585a:	429d      	cmp	r5, r3
   2585c:	4b30      	ldr	r3, [pc, #192]	; (25920 <rpc_gnss_event_handler+0x1ac>)
   2585e:	d11a      	bne.n	25896 <rpc_gnss_event_handler+0x122>
   25860:	2202      	movs	r2, #2
   25862:	603c      	str	r4, [r7, #0]
   25864:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   25868:	701a      	strb	r2, [r3, #0]
   2586a:	07e3      	lsls	r3, r4, #31
   2586c:	d502      	bpl.n	25874 <rpc_gnss_event_handler+0x100>
   2586e:	2002      	movs	r0, #2
   25870:	6833      	ldr	r3, [r6, #0]
   25872:	4798      	blx	r3
   25874:	4d2b      	ldr	r5, [pc, #172]	; (25924 <rpc_gnss_event_handler+0x1b0>)
   25876:	f014 0418 	ands.w	r4, r4, #24
   2587a:	6833      	ldr	r3, [r6, #0]
   2587c:	782a      	ldrb	r2, [r5, #0]
   2587e:	d01a      	beq.n	258b6 <rpc_gnss_event_handler+0x142>
   25880:	b91a      	cbnz	r2, 2588a <rpc_gnss_event_handler+0x116>
   25882:	2005      	movs	r0, #5
   25884:	4798      	blx	r3
   25886:	2301      	movs	r3, #1
   25888:	702b      	strb	r3, [r5, #0]
   2588a:	2001      	movs	r0, #1
   2588c:	6833      	ldr	r3, [r6, #0]
   2588e:	4798      	blx	r3
   25890:	2000      	movs	r0, #0
   25892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25896:	f244 1201 	movw	r2, #16641	; 0x4101
   2589a:	4295      	cmp	r5, r2
   2589c:	bf0b      	itete	eq
   2589e:	2201      	moveq	r2, #1
   258a0:	2200      	movne	r2, #0
   258a2:	603c      	streq	r4, [r7, #0]
   258a4:	603c      	strne	r4, [r7, #0]
   258a6:	bf0b      	itete	eq
   258a8:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   258ac:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   258b0:	701a      	strbeq	r2, [r3, #0]
   258b2:	701a      	strbne	r2, [r3, #0]
   258b4:	e7d9      	b.n	2586a <rpc_gnss_event_handler+0xf6>
   258b6:	2a00      	cmp	r2, #0
   258b8:	d0e7      	beq.n	2588a <rpc_gnss_event_handler+0x116>
   258ba:	2006      	movs	r0, #6
   258bc:	4798      	blx	r3
   258be:	702c      	strb	r4, [r5, #0]
   258c0:	e7e3      	b.n	2588a <rpc_gnss_event_handler+0x116>
   258c2:	4c19      	ldr	r4, [pc, #100]	; (25928 <rpc_gnss_event_handler+0x1b4>)
   258c4:	6820      	ldr	r0, [r4, #0]
   258c6:	b108      	cbz	r0, 258cc <rpc_gnss_event_handler+0x158>
   258c8:	f007 f914 	bl	2caf4 <rpc_client_data_free>
   258cc:	683b      	ldr	r3, [r7, #0]
   258ce:	2003      	movs	r0, #3
   258d0:	6023      	str	r3, [r4, #0]
   258d2:	6833      	ldr	r3, [r6, #0]
   258d4:	e7db      	b.n	2588e <rpc_gnss_event_handler+0x11a>
   258d6:	4c15      	ldr	r4, [pc, #84]	; (2592c <rpc_gnss_event_handler+0x1b8>)
   258d8:	6820      	ldr	r0, [r4, #0]
   258da:	b108      	cbz	r0, 258e0 <rpc_gnss_event_handler+0x16c>
   258dc:	f007 f90a 	bl	2caf4 <rpc_client_data_free>
   258e0:	683b      	ldr	r3, [r7, #0]
   258e2:	2004      	movs	r0, #4
   258e4:	6023      	str	r3, [r4, #0]
   258e6:	6833      	ldr	r3, [r6, #0]
   258e8:	e7d1      	b.n	2588e <rpc_gnss_event_handler+0x11a>
   258ea:	7822      	ldrb	r2, [r4, #0]
   258ec:	2a03      	cmp	r2, #3
   258ee:	d885      	bhi.n	257fc <rpc_gnss_event_handler+0x88>
   258f0:	e8df f002 	tbb	[pc, r2]
   258f4:	09070502 	.word	0x09070502
   258f8:	2007      	movs	r0, #7
   258fa:	4798      	blx	r3
   258fc:	e77e      	b.n	257fc <rpc_gnss_event_handler+0x88>
   258fe:	2008      	movs	r0, #8
   25900:	e7fb      	b.n	258fa <rpc_gnss_event_handler+0x186>
   25902:	2009      	movs	r0, #9
   25904:	e7f9      	b.n	258fa <rpc_gnss_event_handler+0x186>
   25906:	200a      	movs	r0, #10
   25908:	e7f7      	b.n	258fa <rpc_gnss_event_handler+0x186>
   2590a:	bf00      	nop
   2590c:	2000db89 	.word	0x2000db89
   25910:	2000d4cc 	.word	0x2000d4cc
   25914:	2000d43c 	.word	0x2000d43c
   25918:	2000d42c 	.word	0x2000d42c
   2591c:	2000d430 	.word	0x2000d430
   25920:	2000db88 	.word	0x2000db88
   25924:	2000db87 	.word	0x2000db87
   25928:	2000d438 	.word	0x2000d438
   2592c:	2000d434 	.word	0x2000d434

00025930 <full_dfu_ipc_irq_handler>:
   25930:	2301      	movs	r3, #1
   25932:	4a03      	ldr	r2, [pc, #12]	; (25940 <full_dfu_ipc_irq_handler+0x10>)
   25934:	6013      	str	r3, [r2, #0]
   25936:	07c2      	lsls	r2, r0, #31
   25938:	bf44      	itt	mi
   2593a:	4a02      	ldrmi	r2, [pc, #8]	; (25944 <full_dfu_ipc_irq_handler+0x14>)
   2593c:	7013      	strbmi	r3, [r2, #0]
   2593e:	4770      	bx	lr
   25940:	2000d440 	.word	0x2000d440
   25944:	2000db8a 	.word	0x2000db8a

00025948 <modem_ipc_wait_for_event>:
   25948:	b538      	push	{r3, r4, r5, lr}
   2594a:	2300      	movs	r3, #0
   2594c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   25950:	4c0b      	ldr	r4, [pc, #44]	; (25980 <modem_ipc_wait_for_event+0x38>)
   25952:	6023      	str	r3, [r4, #0]
   25954:	6823      	ldr	r3, [r4, #0]
   25956:	b92b      	cbnz	r3, 25964 <modem_ipc_wait_for_event+0x1c>
   25958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2595c:	f006 fb45 	bl	2bfea <nrf_modem_os_busywait>
   25960:	3d01      	subs	r5, #1
   25962:	d1f7      	bne.n	25954 <modem_ipc_wait_for_event+0xc>
   25964:	6823      	ldr	r3, [r4, #0]
   25966:	b913      	cbnz	r3, 2596e <modem_ipc_wait_for_event+0x26>
   25968:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2596c:	e006      	b.n	2597c <modem_ipc_wait_for_event+0x34>
   2596e:	4b05      	ldr	r3, [pc, #20]	; (25984 <modem_ipc_wait_for_event+0x3c>)
   25970:	781b      	ldrb	r3, [r3, #0]
   25972:	2b01      	cmp	r3, #1
   25974:	bf14      	ite	ne
   25976:	2000      	movne	r0, #0
   25978:	f06f 0004 	mvneq.w	r0, #4
   2597c:	bd38      	pop	{r3, r4, r5, pc}
   2597e:	bf00      	nop
   25980:	2000d440 	.word	0x2000d440
   25984:	2000db8a 	.word	0x2000db8a

00025988 <nrf_modem_full_dfu_setup>:
   25988:	2200      	movs	r2, #0
   2598a:	2300      	movs	r3, #0
   2598c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2598e:	4d2b      	ldr	r5, [pc, #172]	; (25a3c <nrf_modem_full_dfu_setup+0xb4>)
   25990:	4e2b      	ldr	r6, [pc, #172]	; (25a40 <nrf_modem_full_dfu_setup+0xb8>)
   25992:	e9c5 2302 	strd	r2, r3, [r5, #8]
   25996:	e9c5 2304 	strd	r2, r3, [r5, #16]
   2599a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2599e:	4b29      	ldr	r3, [pc, #164]	; (25a44 <nrf_modem_full_dfu_setup+0xbc>)
   259a0:	2400      	movs	r4, #0
   259a2:	601a      	str	r2, [r3, #0]
   259a4:	f100 031c 	add.w	r3, r0, #28
   259a8:	6033      	str	r3, [r6, #0]
   259aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   259ae:	6043      	str	r3, [r0, #4]
   259b0:	231c      	movs	r3, #28
   259b2:	7203      	strb	r3, [r0, #8]
   259b4:	2320      	movs	r3, #32
   259b6:	2701      	movs	r7, #1
   259b8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   259bc:	7243      	strb	r3, [r0, #9]
   259be:	4b22      	ldr	r3, [pc, #136]	; (25a48 <nrf_modem_full_dfu_setup+0xc0>)
   259c0:	7004      	strb	r4, [r0, #0]
   259c2:	7044      	strb	r4, [r0, #1]
   259c4:	70c2      	strb	r2, [r0, #3]
   259c6:	7284      	strb	r4, [r0, #10]
   259c8:	72c4      	strb	r4, [r0, #11]
   259ca:	7087      	strb	r7, [r0, #2]
   259cc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   259d0:	702c      	strb	r4, [r5, #0]
   259d2:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   259d6:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   259da:	4b1c      	ldr	r3, [pc, #112]	; (25a4c <nrf_modem_full_dfu_setup+0xc4>)
   259dc:	b093      	sub	sp, #76	; 0x4c
   259de:	4622      	mov	r2, r4
   259e0:	4620      	mov	r0, r4
   259e2:	491b      	ldr	r1, [pc, #108]	; (25a50 <nrf_modem_full_dfu_setup+0xc8>)
   259e4:	701c      	strb	r4, [r3, #0]
   259e6:	f7fc fa93 	bl	21f10 <nrfx_ipc_init>
   259ea:	4621      	mov	r1, r4
   259ec:	2240      	movs	r2, #64	; 0x40
   259ee:	a801      	add	r0, sp, #4
   259f0:	f008 f8f2 	bl	2dbd8 <memset>
   259f4:	2302      	movs	r3, #2
   259f6:	9302      	str	r3, [sp, #8]
   259f8:	2304      	movs	r3, #4
   259fa:	930b      	str	r3, [sp, #44]	; 0x2c
   259fc:	2305      	movs	r3, #5
   259fe:	a801      	add	r0, sp, #4
   25a00:	9311      	str	r3, [sp, #68]	; 0x44
   25a02:	9709      	str	r7, [sp, #36]	; 0x24
   25a04:	f7fc faaa 	bl	21f5c <nrfx_ipc_config_load>
   25a08:	4b12      	ldr	r3, [pc, #72]	; (25a54 <nrf_modem_full_dfu_setup+0xcc>)
   25a0a:	9400      	str	r4, [sp, #0]
   25a0c:	6836      	ldr	r6, [r6, #0]
   25a0e:	601c      	str	r4, [r3, #0]
   25a10:	681b      	ldr	r3, [r3, #0]
   25a12:	9300      	str	r3, [sp, #0]
   25a14:	9b00      	ldr	r3, [sp, #0]
   25a16:	f7ff ff97 	bl	25948 <modem_ipc_wait_for_event>
   25a1a:	4604      	mov	r4, r0
   25a1c:	b130      	cbz	r0, 25a2c <nrf_modem_full_dfu_setup+0xa4>
   25a1e:	2303      	movs	r3, #3
   25a20:	702b      	strb	r3, [r5, #0]
   25a22:	f7fc fad9 	bl	21fd8 <nrfx_ipc_uninit>
   25a26:	4620      	mov	r0, r4
   25a28:	b013      	add	sp, #76	; 0x4c
   25a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25a2c:	6832      	ldr	r2, [r6, #0]
   25a2e:	4b0a      	ldr	r3, [pc, #40]	; (25a58 <nrf_modem_full_dfu_setup+0xd0>)
   25a30:	429a      	cmp	r2, r3
   25a32:	d0f8      	beq.n	25a26 <nrf_modem_full_dfu_setup+0x9e>
   25a34:	f06f 0404 	mvn.w	r4, #4
   25a38:	e7f3      	b.n	25a22 <nrf_modem_full_dfu_setup+0x9a>
   25a3a:	bf00      	nop
   25a3c:	2000cbf0 	.word	0x2000cbf0
   25a40:	2000d444 	.word	0x2000d444
   25a44:	2000d448 	.word	0x2000d448
   25a48:	4002a000 	.word	0x4002a000
   25a4c:	2000db8a 	.word	0x2000db8a
   25a50:	00025931 	.word	0x00025931
   25a54:	40005610 	.word	0x40005610
   25a58:	a5000001 	.word	0xa5000001

00025a5c <packet_handler_create>:
   25a5c:	2801      	cmp	r0, #1
   25a5e:	b570      	push	{r4, r5, r6, lr}
   25a60:	4604      	mov	r4, r0
   25a62:	460e      	mov	r6, r1
   25a64:	4615      	mov	r5, r2
   25a66:	d00f      	beq.n	25a88 <packet_handler_create+0x2c>
   25a68:	1e84      	subs	r4, r0, #2
   25a6a:	2c01      	cmp	r4, #1
   25a6c:	d810      	bhi.n	25a90 <packet_handler_create+0x34>
   25a6e:	2010      	movs	r0, #16
   25a70:	f7f9 f832 	bl	1ead8 <nrf_modem_os_alloc>
   25a74:	2400      	movs	r4, #0
   25a76:	b130      	cbz	r0, 25a86 <packet_handler_create+0x2a>
   25a78:	2218      	movs	r2, #24
   25a7a:	4b08      	ldr	r3, [pc, #32]	; (25a9c <packet_handler_create+0x40>)
   25a7c:	6085      	str	r5, [r0, #8]
   25a7e:	fb02 3404 	mla	r4, r2, r4, r3
   25a82:	e9c0 4600 	strd	r4, r6, [r0]
   25a86:	bd70      	pop	{r4, r5, r6, pc}
   25a88:	2014      	movs	r0, #20
   25a8a:	f7f9 f825 	bl	1ead8 <nrf_modem_os_alloc>
   25a8e:	e7f2      	b.n	25a76 <packet_handler_create+0x1a>
   25a90:	200c      	movs	r0, #12
   25a92:	f7f9 f821 	bl	1ead8 <nrf_modem_os_alloc>
   25a96:	2402      	movs	r4, #2
   25a98:	e7ed      	b.n	25a76 <packet_handler_create+0x1a>
   25a9a:	bf00      	nop
   25a9c:	0002edc8 	.word	0x0002edc8

00025aa0 <modem_off>:
   25aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25aa2:	2501      	movs	r5, #1
   25aa4:	4c07      	ldr	r4, [pc, #28]	; (25ac4 <modem_off+0x24>)
   25aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   25aaa:	6065      	str	r5, [r4, #4]
   25aac:	f006 fa9d 	bl	2bfea <nrf_modem_os_busywait>
   25ab0:	2300      	movs	r3, #0
   25ab2:	6063      	str	r3, [r4, #4]
   25ab4:	9301      	str	r3, [sp, #4]
   25ab6:	6025      	str	r5, [r4, #0]
   25ab8:	6823      	ldr	r3, [r4, #0]
   25aba:	9301      	str	r3, [sp, #4]
   25abc:	9b01      	ldr	r3, [sp, #4]
   25abe:	b003      	add	sp, #12
   25ac0:	bd30      	pop	{r4, r5, pc}
   25ac2:	bf00      	nop
   25ac4:	40005610 	.word	0x40005610

00025ac8 <nrf_modem_init>:
   25ac8:	b570      	push	{r4, r5, r6, lr}
   25aca:	460d      	mov	r5, r1
   25acc:	b300      	cbz	r0, 25b10 <nrf_modem_init+0x48>
   25ace:	4e15      	ldr	r6, [pc, #84]	; (25b24 <nrf_modem_init+0x5c>)
   25ad0:	7832      	ldrb	r2, [r6, #0]
   25ad2:	bb02      	cbnz	r2, 25b16 <nrf_modem_init+0x4e>
   25ad4:	2901      	cmp	r1, #1
   25ad6:	d113      	bne.n	25b00 <nrf_modem_init+0x38>
   25ad8:	68c1      	ldr	r1, [r0, #12]
   25ada:	6842      	ldr	r2, [r0, #4]
   25adc:	440a      	add	r2, r1
   25ade:	6941      	ldr	r1, [r0, #20]
   25ae0:	440a      	add	r2, r1
   25ae2:	69c1      	ldr	r1, [r0, #28]
   25ae4:	440a      	add	r2, r1
   25ae6:	f242 011b 	movw	r1, #8219	; 0x201b
   25aea:	428a      	cmp	r2, r1
   25aec:	d916      	bls.n	25b1c <nrf_modem_init+0x54>
   25aee:	6800      	ldr	r0, [r0, #0]
   25af0:	f7ff ff4a 	bl	25988 <nrf_modem_full_dfu_setup>
   25af4:	4604      	mov	r4, r0
   25af6:	b130      	cbz	r0, 25b06 <nrf_modem_init+0x3e>
   25af8:	f7ff ffd2 	bl	25aa0 <modem_off>
   25afc:	4620      	mov	r0, r4
   25afe:	bd70      	pop	{r4, r5, r6, pc}
   25b00:	f007 fd0e 	bl	2d520 <nrf_modem_platform_init>
   25b04:	e7f6      	b.n	25af4 <nrf_modem_init+0x2c>
   25b06:	4b08      	ldr	r3, [pc, #32]	; (25b28 <nrf_modem_init+0x60>)
   25b08:	701d      	strb	r5, [r3, #0]
   25b0a:	2301      	movs	r3, #1
   25b0c:	7033      	strb	r3, [r6, #0]
   25b0e:	e7f5      	b.n	25afc <nrf_modem_init+0x34>
   25b10:	f06f 040d 	mvn.w	r4, #13
   25b14:	e7f2      	b.n	25afc <nrf_modem_init+0x34>
   25b16:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25b1a:	e7ef      	b.n	25afc <nrf_modem_init+0x34>
   25b1c:	f06f 040b 	mvn.w	r4, #11
   25b20:	e7ec      	b.n	25afc <nrf_modem_init+0x34>
   25b22:	bf00      	nop
   25b24:	2000db8b 	.word	0x2000db8b
   25b28:	2000db8c 	.word	0x2000db8c

00025b2c <nrf_modem_platform_af_method_table_get>:
   25b2c:	2805      	cmp	r0, #5
   25b2e:	b508      	push	{r3, lr}
   25b30:	d016      	beq.n	25b60 <nrf_modem_platform_af_method_table_get+0x34>
   25b32:	f020 0008 	bic.w	r0, r0, #8
   25b36:	2802      	cmp	r0, #2
   25b38:	d117      	bne.n	25b6a <nrf_modem_platform_af_method_table_get+0x3e>
   25b3a:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   25b3e:	d207      	bcs.n	25b50 <nrf_modem_platform_af_method_table_get+0x24>
   25b40:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   25b44:	d213      	bcs.n	25b6e <nrf_modem_platform_af_method_table_get+0x42>
   25b46:	3a01      	subs	r2, #1
   25b48:	2a01      	cmp	r2, #1
   25b4a:	d804      	bhi.n	25b56 <nrf_modem_platform_af_method_table_get+0x2a>
   25b4c:	4809      	ldr	r0, [pc, #36]	; (25b74 <nrf_modem_platform_af_method_table_get+0x48>)
   25b4e:	bd08      	pop	{r3, pc}
   25b50:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   25b54:	d00b      	beq.n	25b6e <nrf_modem_platform_af_method_table_get+0x42>
   25b56:	207b      	movs	r0, #123	; 0x7b
   25b58:	f006 fa49 	bl	2bfee <nrf_modem_os_errno_set>
   25b5c:	2000      	movs	r0, #0
   25b5e:	e7f6      	b.n	25b4e <nrf_modem_platform_af_method_table_get+0x22>
   25b60:	2903      	cmp	r1, #3
   25b62:	4805      	ldr	r0, [pc, #20]	; (25b78 <nrf_modem_platform_af_method_table_get+0x4c>)
   25b64:	bf18      	it	ne
   25b66:	2000      	movne	r0, #0
   25b68:	e7f1      	b.n	25b4e <nrf_modem_platform_af_method_table_get+0x22>
   25b6a:	2016      	movs	r0, #22
   25b6c:	e7f4      	b.n	25b58 <nrf_modem_platform_af_method_table_get+0x2c>
   25b6e:	4803      	ldr	r0, [pc, #12]	; (25b7c <nrf_modem_platform_af_method_table_get+0x50>)
   25b70:	e7ed      	b.n	25b4e <nrf_modem_platform_af_method_table_get+0x22>
   25b72:	bf00      	nop
   25b74:	0002ee10 	.word	0x0002ee10
   25b78:	0002ee60 	.word	0x0002ee60
   25b7c:	0002ee38 	.word	0x0002ee38

00025b80 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25b80:	4b0e      	ldr	r3, [pc, #56]	; (25bbc <z_sys_init_run_level+0x3c>)
{
   25b82:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25b84:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25b88:	3001      	adds	r0, #1
   25b8a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   25b8e:	42a6      	cmp	r6, r4
   25b90:	d800      	bhi.n	25b94 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   25b92:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   25b94:	e9d4 3500 	ldrd	r3, r5, [r4]
   25b98:	4628      	mov	r0, r5
   25b9a:	4798      	blx	r3
		if (dev != NULL) {
   25b9c:	b165      	cbz	r5, 25bb8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   25b9e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   25ba0:	b130      	cbz	r0, 25bb0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   25ba2:	2800      	cmp	r0, #0
   25ba4:	bfb8      	it	lt
   25ba6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   25ba8:	28ff      	cmp	r0, #255	; 0xff
   25baa:	bfa8      	it	ge
   25bac:	20ff      	movge	r0, #255	; 0xff
   25bae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   25bb0:	785a      	ldrb	r2, [r3, #1]
   25bb2:	f042 0201 	orr.w	r2, r2, #1
   25bb6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25bb8:	3408      	adds	r4, #8
   25bba:	e7e8      	b.n	25b8e <z_sys_init_run_level+0xe>
   25bbc:	0002ee88 	.word	0x0002ee88

00025bc0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   25bc0:	4b01      	ldr	r3, [pc, #4]	; (25bc8 <z_impl_z_errno+0x8>)
   25bc2:	6898      	ldr	r0, [r3, #8]
}
   25bc4:	3064      	adds	r0, #100	; 0x64
   25bc6:	4770      	bx	lr
   25bc8:	2000d44c 	.word	0x2000d44c

00025bcc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25bce:	4604      	mov	r4, r0
   25bd0:	460e      	mov	r6, r1
	__asm__ volatile(
   25bd2:	f04f 0320 	mov.w	r3, #32
   25bd6:	f3ef 8711 	mrs	r7, BASEPRI
   25bda:	f383 8812 	msr	BASEPRI_MAX, r3
   25bde:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25be2:	f002 f895 	bl	27d10 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25be6:	2200      	movs	r2, #0
   25be8:	2c04      	cmp	r4, #4
   25bea:	bf98      	it	ls
   25bec:	4b1d      	ldrls	r3, [pc, #116]	; (25c64 <z_fatal_error+0x98>)
   25bee:	4605      	mov	r5, r0
	switch (reason) {
   25bf0:	bf94      	ite	ls
   25bf2:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   25bf6:	4b1c      	ldrhi	r3, [pc, #112]	; (25c68 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   25bf8:	9200      	str	r2, [sp, #0]
   25bfa:	2145      	movs	r1, #69	; 0x45
   25bfc:	4622      	mov	r2, r4
   25bfe:	481b      	ldr	r0, [pc, #108]	; (25c6c <z_fatal_error+0xa0>)
   25c00:	f005 ff85 	bl	2bb0e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25c04:	b13e      	cbz	r6, 25c16 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25c06:	69f3      	ldr	r3, [r6, #28]
   25c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25c0c:	b11b      	cbz	r3, 25c16 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   25c0e:	2145      	movs	r1, #69	; 0x45
   25c10:	4817      	ldr	r0, [pc, #92]	; (25c70 <z_fatal_error+0xa4>)
   25c12:	f005 ff7c 	bl	2bb0e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   25c16:	b135      	cbz	r5, 25c26 <z_fatal_error+0x5a>
   25c18:	4628      	mov	r0, r5
   25c1a:	f007 fe3f 	bl	2d89c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25c1e:	4603      	mov	r3, r0
   25c20:	b108      	cbz	r0, 25c26 <z_fatal_error+0x5a>
   25c22:	7802      	ldrb	r2, [r0, #0]
   25c24:	b902      	cbnz	r2, 25c28 <z_fatal_error+0x5c>
		thread_name = "unknown";
   25c26:	4b13      	ldr	r3, [pc, #76]	; (25c74 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   25c28:	462a      	mov	r2, r5
   25c2a:	2145      	movs	r1, #69	; 0x45
   25c2c:	4812      	ldr	r0, [pc, #72]	; (25c78 <z_fatal_error+0xac>)
   25c2e:	f005 ff6e 	bl	2bb0e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   25c32:	4631      	mov	r1, r6
   25c34:	4620      	mov	r0, r4
   25c36:	f7fb f921 	bl	20e7c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   25c3a:	2c04      	cmp	r4, #4
   25c3c:	d108      	bne.n	25c50 <z_fatal_error+0x84>
   25c3e:	490f      	ldr	r1, [pc, #60]	; (25c7c <z_fatal_error+0xb0>)
   25c40:	480f      	ldr	r0, [pc, #60]	; (25c80 <z_fatal_error+0xb4>)
   25c42:	228f      	movs	r2, #143	; 0x8f
   25c44:	f005 fdb2 	bl	2b7ac <printk>
   25c48:	218f      	movs	r1, #143	; 0x8f
   25c4a:	480c      	ldr	r0, [pc, #48]	; (25c7c <z_fatal_error+0xb0>)
   25c4c:	f005 ff45 	bl	2bada <assert_post_action>
	__asm__ volatile(
   25c50:	f387 8811 	msr	BASEPRI, r7
   25c54:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25c58:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25c5a:	b003      	add	sp, #12
   25c5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25c60:	f7f6 be8c 	b.w	1c97c <z_impl_k_thread_abort>
   25c64:	0002eea0 	.word	0x0002eea0
   25c68:	0003174e 	.word	0x0003174e
   25c6c:	00031764 	.word	0x00031764
   25c70:	00031791 	.word	0x00031791
   25c74:	0003175c 	.word	0x0003175c
   25c78:	000317b7 	.word	0x000317b7
   25c7c:	000317d4 	.word	0x000317d4
   25c80:	0002f296 	.word	0x0002f296

00025c84 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   25c84:	2201      	movs	r2, #1
{
   25c86:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   25c88:	4b09      	ldr	r3, [pc, #36]	; (25cb0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   25c8a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   25c8c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   25c8e:	f7ff ff77 	bl	25b80 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   25c92:	f002 fef7 	bl	28a84 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   25c96:	2003      	movs	r0, #3
   25c98:	f7ff ff72 	bl	25b80 <z_sys_init_run_level>

	z_init_static_threads();
   25c9c:	f000 fa72 	bl	26184 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   25ca0:	f7f4 fc60 	bl	1a564 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   25ca4:	4a03      	ldr	r2, [pc, #12]	; (25cb4 <bg_thread_main+0x30>)
   25ca6:	7b13      	ldrb	r3, [r2, #12]
   25ca8:	f023 0301 	bic.w	r3, r3, #1
   25cac:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   25cae:	bd08      	pop	{r3, pc}
   25cb0:	2000db8d 	.word	0x2000db8d
   25cb4:	2000cc88 	.word	0x2000cc88

00025cb8 <z_bss_zero>:
{
   25cb8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   25cba:	4803      	ldr	r0, [pc, #12]	; (25cc8 <z_bss_zero+0x10>)
   25cbc:	4a03      	ldr	r2, [pc, #12]	; (25ccc <z_bss_zero+0x14>)
   25cbe:	2100      	movs	r1, #0
   25cc0:	1a12      	subs	r2, r2, r0
   25cc2:	f007 fdcc 	bl	2d85e <z_early_memset>
}
   25cc6:	bd08      	pop	{r3, pc}
   25cc8:	2000caf8 	.word	0x2000caf8
   25ccc:	2000dba4 	.word	0x2000dba4

00025cd0 <z_init_cpu>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   25cd0:	2300      	movs	r3, #0
   25cd2:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   25cd4:	b570      	push	{r4, r5, r6, lr}
   25cd6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   25cd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   25cdc:	220f      	movs	r2, #15
   25cde:	9301      	str	r3, [sp, #4]
   25ce0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25ce4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   25ce6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25cea:	4d0e      	ldr	r5, [pc, #56]	; (25d24 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
   25cec:	4e0e      	ldr	r6, [pc, #56]	; (25d28 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25cee:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
   25cf2:	490e      	ldr	r1, [pc, #56]	; (25d2c <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
   25cf4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   25cf8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   25cfa:	fb02 1100 	mla	r1, r2, r0, r1
   25cfe:	4b0c      	ldr	r3, [pc, #48]	; (25d30 <z_init_cpu+0x60>)
   25d00:	4630      	mov	r0, r6
   25d02:	9500      	str	r5, [sp, #0]
   25d04:	f000 f9a2 	bl	2604c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25d08:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25d0a:	480a      	ldr	r0, [pc, #40]	; (25d34 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   25d0c:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25d0e:	3401      	adds	r4, #1
   25d10:	f023 0304 	bic.w	r3, r3, #4
   25d14:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   25d18:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   25d1a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   25d1c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   25d1e:	b006      	add	sp, #24
   25d20:	bd70      	pop	{r4, r5, r6, pc}
   25d22:	bf00      	nop
   25d24:	2000d44c 	.word	0x2000d44c
   25d28:	2000cc08 	.word	0x2000cc08
   25d2c:	20010548 	.word	0x20010548
   25d30:	000262c5 	.word	0x000262c5
   25d34:	20010688 	.word	0x20010688

00025d38 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25d38:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   25d3a:	4b2e      	ldr	r3, [pc, #184]	; (25df4 <z_cstart+0xbc>)
   25d3c:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
   25d3e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   25d42:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   25d46:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25d4a:	2400      	movs	r4, #0
   25d4c:	23e0      	movs	r3, #224	; 0xe0
   25d4e:	4d2a      	ldr	r5, [pc, #168]	; (25df8 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   25d50:	4e2a      	ldr	r6, [pc, #168]	; (25dfc <z_cstart+0xc4>)
   25d52:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   25d56:	77ec      	strb	r4, [r5, #31]
   25d58:	762c      	strb	r4, [r5, #24]
   25d5a:	766c      	strb	r4, [r5, #25]
   25d5c:	76ac      	strb	r4, [r5, #26]
   25d5e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   25d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25d64:	4f26      	ldr	r7, [pc, #152]	; (25e00 <z_cstart+0xc8>)
   25d66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   25d6a:	626b      	str	r3, [r5, #36]	; 0x24
   25d6c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   25d70:	f7f6 fd6a 	bl	1c848 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   25d74:	f7f6 f9d2 	bl	1c11c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   25d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25d7c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   25d7e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   25d80:	f7f6 ffcc 	bl	1cd1c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   25d84:	f7f6 fe0c 	bl	1c9a0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   25d88:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   25d8c:	ad06      	add	r5, sp, #24
   25d8e:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   25d90:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   25d94:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   25d98:	f002 fe56 	bl	28a48 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   25d9c:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25d9e:	f007 fd53 	bl	2d848 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   25da2:	4620      	mov	r0, r4
   25da4:	f7ff feec 	bl	25b80 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   25da8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   25daa:	4d16      	ldr	r5, [pc, #88]	; (25e04 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   25dac:	f7ff fee8 	bl	25b80 <z_sys_init_run_level>
	z_sched_init();
   25db0:	f001 fe64 	bl	27a7c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25db4:	4b14      	ldr	r3, [pc, #80]	; (25e08 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   25db6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25db8:	9305      	str	r3, [sp, #20]
   25dba:	2301      	movs	r3, #1
   25dbc:	4913      	ldr	r1, [pc, #76]	; (25e0c <z_cstart+0xd4>)
   25dbe:	f44f 52fd 	mov.w	r2, #8096	; 0x1fa0
   25dc2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25dc6:	4628      	mov	r0, r5
   25dc8:	463b      	mov	r3, r7
   25dca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25dce:	9400      	str	r4, [sp, #0]
   25dd0:	f000 f93c 	bl	2604c <z_setup_new_thread>
   25dd4:	4606      	mov	r6, r0
   25dd6:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   25dd8:	4628      	mov	r0, r5
   25dda:	f022 0204 	bic.w	r2, r2, #4
   25dde:	736a      	strb	r2, [r5, #13]
   25de0:	f001 fb4e 	bl	27480 <z_ready_thread>
	z_init_cpu(0);
   25de4:	4620      	mov	r0, r4
   25de6:	f7ff ff73 	bl	25cd0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   25dea:	463a      	mov	r2, r7
   25dec:	4631      	mov	r1, r6
   25dee:	4628      	mov	r0, r5
   25df0:	f7f6 fad8 	bl	1c3a4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25df4:	20010688 	.word	0x20010688
   25df8:	e000ed00 	.word	0xe000ed00
   25dfc:	2000d44c 	.word	0x2000d44c
   25e00:	00025c85 	.word	0x00025c85
   25e04:	2000cc88 	.word	0x2000cc88
   25e08:	00031840 	.word	0x00031840
   25e0c:	2000e5a8 	.word	0x2000e5a8

00025e10 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25e10:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25e12:	4c0c      	ldr	r4, [pc, #48]	; (25e44 <statics_init+0x34>)
   25e14:	4d0c      	ldr	r5, [pc, #48]	; (25e48 <statics_init+0x38>)
   25e16:	4e0d      	ldr	r6, [pc, #52]	; (25e4c <statics_init+0x3c>)
   25e18:	42ac      	cmp	r4, r5
   25e1a:	d908      	bls.n	25e2e <statics_init+0x1e>
   25e1c:	4631      	mov	r1, r6
   25e1e:	480c      	ldr	r0, [pc, #48]	; (25e50 <statics_init+0x40>)
   25e20:	2218      	movs	r2, #24
   25e22:	f005 fcc3 	bl	2b7ac <printk>
   25e26:	2118      	movs	r1, #24
   25e28:	4630      	mov	r0, r6
   25e2a:	f005 fe56 	bl	2bada <assert_post_action>
   25e2e:	42ac      	cmp	r4, r5
   25e30:	d301      	bcc.n	25e36 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   25e32:	2000      	movs	r0, #0
   25e34:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25e36:	4620      	mov	r0, r4
   25e38:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25e3c:	f007 fd13 	bl	2d866 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25e40:	3418      	adds	r4, #24
   25e42:	e7e9      	b.n	25e18 <statics_init+0x8>
   25e44:	2000c964 	.word	0x2000c964
   25e48:	2000c9ac 	.word	0x2000c9ac
   25e4c:	00031848 	.word	0x00031848
   25e50:	0002f296 	.word	0x0002f296

00025e54 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e58:	b085      	sub	sp, #20
   25e5a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   25e5e:	4606      	mov	r6, r0
   25e60:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25e62:	4648      	mov	r0, r9
   25e64:	4639      	mov	r1, r7
{
   25e66:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25e68:	f007 fdac 	bl	2d9c4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25e6c:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   25e74:	f04f 0320 	mov.w	r3, #32
   25e78:	f3ef 8411 	mrs	r4, BASEPRI
   25e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   25e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e84:	4628      	mov	r0, r5
   25e86:	f000 f9f9 	bl	2627c <z_spin_lock_valid>
   25e8a:	b940      	cbnz	r0, 25e9e <k_heap_aligned_alloc+0x4a>
   25e8c:	4932      	ldr	r1, [pc, #200]	; (25f58 <k_heap_aligned_alloc+0x104>)
   25e8e:	4833      	ldr	r0, [pc, #204]	; (25f5c <k_heap_aligned_alloc+0x108>)
   25e90:	228e      	movs	r2, #142	; 0x8e
   25e92:	f005 fc8b 	bl	2b7ac <printk>
   25e96:	218e      	movs	r1, #142	; 0x8e
   25e98:	482f      	ldr	r0, [pc, #188]	; (25f58 <k_heap_aligned_alloc+0x104>)
   25e9a:	f005 fe1e 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   25e9e:	4628      	mov	r0, r5
   25ea0:	f000 fa08 	bl	262b4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25ea4:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   25ea8:	b15b      	cbz	r3, 25ec2 <k_heap_aligned_alloc+0x6e>
   25eaa:	ea59 0307 	orrs.w	r3, r9, r7
   25eae:	d008      	beq.n	25ec2 <k_heap_aligned_alloc+0x6e>
   25eb0:	492b      	ldr	r1, [pc, #172]	; (25f60 <k_heap_aligned_alloc+0x10c>)
   25eb2:	482a      	ldr	r0, [pc, #168]	; (25f5c <k_heap_aligned_alloc+0x108>)
   25eb4:	2249      	movs	r2, #73	; 0x49
   25eb6:	f005 fc79 	bl	2b7ac <printk>
   25eba:	2149      	movs	r1, #73	; 0x49
   25ebc:	4828      	ldr	r0, [pc, #160]	; (25f60 <k_heap_aligned_alloc+0x10c>)
   25ebe:	f005 fe0c 	bl	2bada <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ec2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 25f58 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25ec6:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   25eca:	4642      	mov	r2, r8
   25ecc:	4659      	mov	r1, fp
   25ece:	4630      	mov	r0, r6
   25ed0:	f7f5 f81a 	bl	1af08 <sys_heap_aligned_alloc>
   25ed4:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   25ed6:	f002 fa7d 	bl	283d4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   25eda:	b1a7      	cbz	r7, 25f06 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25edc:	4628      	mov	r0, r5
   25ede:	f000 f9db 	bl	26298 <z_spin_unlock_valid>
   25ee2:	b940      	cbnz	r0, 25ef6 <k_heap_aligned_alloc+0xa2>
   25ee4:	491c      	ldr	r1, [pc, #112]	; (25f58 <k_heap_aligned_alloc+0x104>)
   25ee6:	481d      	ldr	r0, [pc, #116]	; (25f5c <k_heap_aligned_alloc+0x108>)
   25ee8:	22b9      	movs	r2, #185	; 0xb9
   25eea:	f005 fc5f 	bl	2b7ac <printk>
   25eee:	21b9      	movs	r1, #185	; 0xb9
   25ef0:	4819      	ldr	r0, [pc, #100]	; (25f58 <k_heap_aligned_alloc+0x104>)
   25ef2:	f005 fdf2 	bl	2bada <assert_post_action>
	__asm__ volatile(
   25ef6:	f384 8811 	msr	BASEPRI, r4
   25efa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   25efe:	4638      	mov	r0, r7
   25f00:	b005      	add	sp, #20
   25f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   25f06:	9b02      	ldr	r3, [sp, #8]
   25f08:	1a18      	subs	r0, r3, r0
   25f0a:	9b03      	ldr	r3, [sp, #12]
   25f0c:	eb63 0101 	sbc.w	r1, r3, r1
   25f10:	2801      	cmp	r0, #1
   25f12:	f171 0300 	sbcs.w	r3, r1, #0
   25f16:	dbe1      	blt.n	25edc <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   25f18:	e9cd 0100 	strd	r0, r1, [sp]
   25f1c:	4652      	mov	r2, sl
   25f1e:	4621      	mov	r1, r4
   25f20:	4628      	mov	r0, r5
   25f22:	f001 fc11 	bl	27748 <z_pend_curr>
	__asm__ volatile(
   25f26:	f04f 0320 	mov.w	r3, #32
   25f2a:	f3ef 8411 	mrs	r4, BASEPRI
   25f2e:	f383 8812 	msr	BASEPRI_MAX, r3
   25f32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f36:	4628      	mov	r0, r5
   25f38:	f000 f9a0 	bl	2627c <z_spin_lock_valid>
   25f3c:	b940      	cbnz	r0, 25f50 <k_heap_aligned_alloc+0xfc>
   25f3e:	4649      	mov	r1, r9
   25f40:	4806      	ldr	r0, [pc, #24]	; (25f5c <k_heap_aligned_alloc+0x108>)
   25f42:	228e      	movs	r2, #142	; 0x8e
   25f44:	f005 fc32 	bl	2b7ac <printk>
   25f48:	218e      	movs	r1, #142	; 0x8e
   25f4a:	4648      	mov	r0, r9
   25f4c:	f005 fdc5 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   25f50:	4628      	mov	r0, r5
   25f52:	f000 f9af 	bl	262b4 <z_spin_lock_set_owner>
	return k;
   25f56:	e7b8      	b.n	25eca <k_heap_aligned_alloc+0x76>
   25f58:	0002f2d0 	.word	0x0002f2d0
   25f5c:	0002f296 	.word	0x0002f296
   25f60:	00031848 	.word	0x00031848

00025f64 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   25f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25f66:	4604      	mov	r4, r0
   25f68:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25f6a:	f100 0514 	add.w	r5, r0, #20
   25f6e:	f04f 0320 	mov.w	r3, #32
   25f72:	f3ef 8711 	mrs	r7, BASEPRI
   25f76:	f383 8812 	msr	BASEPRI_MAX, r3
   25f7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f7e:	4628      	mov	r0, r5
   25f80:	f000 f97c 	bl	2627c <z_spin_lock_valid>
   25f84:	b940      	cbnz	r0, 25f98 <k_heap_free+0x34>
   25f86:	4916      	ldr	r1, [pc, #88]	; (25fe0 <k_heap_free+0x7c>)
   25f88:	4816      	ldr	r0, [pc, #88]	; (25fe4 <k_heap_free+0x80>)
   25f8a:	228e      	movs	r2, #142	; 0x8e
   25f8c:	f005 fc0e 	bl	2b7ac <printk>
   25f90:	218e      	movs	r1, #142	; 0x8e
   25f92:	4813      	ldr	r0, [pc, #76]	; (25fe0 <k_heap_free+0x7c>)
   25f94:	f005 fda1 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   25f98:	4628      	mov	r0, r5
   25f9a:	f000 f98b 	bl	262b4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   25f9e:	4620      	mov	r0, r4
   25fa0:	4631      	mov	r1, r6
   25fa2:	f7f4 ff79 	bl	1ae98 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   25fa6:	f104 000c 	add.w	r0, r4, #12
   25faa:	f007 fcf1 	bl	2d990 <z_unpend_all>
   25fae:	b128      	cbz	r0, 25fbc <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   25fb0:	4639      	mov	r1, r7
   25fb2:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   25fb8:	f001 b834 	b.w	27024 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fbc:	4628      	mov	r0, r5
   25fbe:	f000 f96b 	bl	26298 <z_spin_unlock_valid>
   25fc2:	b940      	cbnz	r0, 25fd6 <k_heap_free+0x72>
   25fc4:	4906      	ldr	r1, [pc, #24]	; (25fe0 <k_heap_free+0x7c>)
   25fc6:	4807      	ldr	r0, [pc, #28]	; (25fe4 <k_heap_free+0x80>)
   25fc8:	22b9      	movs	r2, #185	; 0xb9
   25fca:	f005 fbef 	bl	2b7ac <printk>
   25fce:	21b9      	movs	r1, #185	; 0xb9
   25fd0:	4803      	ldr	r0, [pc, #12]	; (25fe0 <k_heap_free+0x7c>)
   25fd2:	f005 fd82 	bl	2bada <assert_post_action>
	__asm__ volatile(
   25fd6:	f387 8811 	msr	BASEPRI, r7
   25fda:	f3bf 8f6f 	isb	sy
}
   25fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25fe0:	0002f2d0 	.word	0x0002f2d0
   25fe4:	0002f296 	.word	0x0002f296

00025fe8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   25fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   25fea:	4c14      	ldr	r4, [pc, #80]	; (2603c <init_mem_slab_module+0x54>)
   25fec:	4d14      	ldr	r5, [pc, #80]	; (26040 <init_mem_slab_module+0x58>)
   25fee:	4e15      	ldr	r6, [pc, #84]	; (26044 <init_mem_slab_module+0x5c>)
   25ff0:	42ac      	cmp	r4, r5
   25ff2:	d908      	bls.n	26006 <init_mem_slab_module+0x1e>
   25ff4:	4631      	mov	r1, r6
   25ff6:	4814      	ldr	r0, [pc, #80]	; (26048 <init_mem_slab_module+0x60>)
   25ff8:	223d      	movs	r2, #61	; 0x3d
   25ffa:	f005 fbd7 	bl	2b7ac <printk>
   25ffe:	213d      	movs	r1, #61	; 0x3d
   26000:	4630      	mov	r0, r6
   26002:	f005 fd6a 	bl	2bada <assert_post_action>
   26006:	42ac      	cmp	r4, r5
   26008:	d301      	bcc.n	2600e <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   2600a:	2000      	movs	r0, #0
	return rc;
}
   2600c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2600e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   26012:	ea42 0301 	orr.w	r3, r2, r1
   26016:	f013 0303 	ands.w	r3, r3, #3
   2601a:	d10b      	bne.n	26034 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   2601c:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   2601e:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26020:	4283      	cmp	r3, r0
   26022:	d101      	bne.n	26028 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   26024:	3420      	adds	r4, #32
   26026:	e7e3      	b.n	25ff0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   26028:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2602a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2602c:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   2602e:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   26030:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26032:	e7f5      	b.n	26020 <init_mem_slab_module+0x38>
	return rc;
   26034:	f06f 0015 	mvn.w	r0, #21
   26038:	e7e8      	b.n	2600c <init_mem_slab_module+0x24>
   2603a:	bf00      	nop
   2603c:	2000c964 	.word	0x2000c964
   26040:	2000c964 	.word	0x2000c964
   26044:	0003186a 	.word	0x0003186a
   26048:	0002f296 	.word	0x0002f296

0002604c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2604c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26050:	b085      	sub	sp, #20
   26052:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   26056:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   26058:	f1b9 0f0f 	cmp.w	r9, #15
{
   2605c:	460f      	mov	r7, r1
   2605e:	4615      	mov	r5, r2
   26060:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   26062:	d12e      	bne.n	260c2 <z_setup_new_thread+0x76>
   26064:	4b1f      	ldr	r3, [pc, #124]	; (260e4 <z_setup_new_thread+0x98>)
   26066:	4598      	cmp	r8, r3
   26068:	d12f      	bne.n	260ca <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2606a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2606e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   26072:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   26074:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   26076:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   26078:	2304      	movs	r3, #4
   2607a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2607c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2607e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26080:	9302      	str	r3, [sp, #8]
   26082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   26084:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26088:	9301      	str	r3, [sp, #4]
   2608a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   2608c:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   2608e:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26092:	9300      	str	r3, [sp, #0]
   26094:	462a      	mov	r2, r5
   26096:	4643      	mov	r3, r8
   26098:	4639      	mov	r1, r7
   2609a:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2609c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   260a0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   260a2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   260a6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   260a8:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   260aa:	f7f6 f95f 	bl	1c36c <arch_new_thread>
	if (!_current) {
   260ae:	4b0e      	ldr	r3, [pc, #56]	; (260e8 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   260b0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   260b2:	689b      	ldr	r3, [r3, #8]
   260b4:	b103      	cbz	r3, 260b8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   260b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   260b8:	4628      	mov	r0, r5
   260ba:	6763      	str	r3, [r4, #116]	; 0x74
   260bc:	b005      	add	sp, #20
   260be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   260c2:	f109 0310 	add.w	r3, r9, #16
   260c6:	2b1e      	cmp	r3, #30
   260c8:	d9cf      	bls.n	2606a <z_setup_new_thread+0x1e>
   260ca:	f240 12ff 	movw	r2, #511	; 0x1ff
   260ce:	4907      	ldr	r1, [pc, #28]	; (260ec <z_setup_new_thread+0xa0>)
   260d0:	4807      	ldr	r0, [pc, #28]	; (260f0 <z_setup_new_thread+0xa4>)
   260d2:	f005 fb6b 	bl	2b7ac <printk>
   260d6:	f240 11ff 	movw	r1, #511	; 0x1ff
   260da:	4804      	ldr	r0, [pc, #16]	; (260ec <z_setup_new_thread+0xa0>)
   260dc:	f005 fcfd 	bl	2bada <assert_post_action>
   260e0:	e7c3      	b.n	2606a <z_setup_new_thread+0x1e>
   260e2:	bf00      	nop
   260e4:	000262c5 	.word	0x000262c5
   260e8:	2000d44c 	.word	0x2000d44c
   260ec:	0003188f 	.word	0x0003188f
   260f0:	0002f296 	.word	0x0002f296

000260f4 <z_impl_k_thread_create>:
{
   260f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   260f8:	b087      	sub	sp, #28
   260fa:	4604      	mov	r4, r0
   260fc:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   26100:	460f      	mov	r7, r1
   26102:	4690      	mov	r8, r2
   26104:	4699      	mov	r9, r3
   26106:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2610a:	b153      	cbz	r3, 26122 <z_impl_k_thread_create+0x2e>
   2610c:	491a      	ldr	r1, [pc, #104]	; (26178 <z_impl_k_thread_create+0x84>)
   2610e:	481b      	ldr	r0, [pc, #108]	; (2617c <z_impl_k_thread_create+0x88>)
   26110:	f240 226e 	movw	r2, #622	; 0x26e
   26114:	f005 fb4a 	bl	2b7ac <printk>
   26118:	f240 216e 	movw	r1, #622	; 0x26e
   2611c:	4816      	ldr	r0, [pc, #88]	; (26178 <z_impl_k_thread_create+0x84>)
   2611e:	f005 fcdc 	bl	2bada <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   26122:	2300      	movs	r3, #0
   26124:	9305      	str	r3, [sp, #20]
   26126:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26128:	4642      	mov	r2, r8
   2612a:	9304      	str	r3, [sp, #16]
   2612c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2612e:	4639      	mov	r1, r7
   26130:	9303      	str	r3, [sp, #12]
   26132:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26134:	4620      	mov	r0, r4
   26136:	9302      	str	r3, [sp, #8]
   26138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2613a:	9301      	str	r3, [sp, #4]
   2613c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2613e:	9300      	str	r3, [sp, #0]
   26140:	464b      	mov	r3, r9
   26142:	f7ff ff83 	bl	2604c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   26146:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2614a:	bf08      	it	eq
   2614c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   26150:	d005      	beq.n	2615e <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26152:	ea55 0306 	orrs.w	r3, r5, r6
   26156:	d106      	bne.n	26166 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   26158:	4620      	mov	r0, r4
   2615a:	f001 f9c7 	bl	274ec <z_sched_start>
}
   2615e:	4620      	mov	r0, r4
   26160:	b007      	add	sp, #28
   26162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26166:	4632      	mov	r2, r6
   26168:	462b      	mov	r3, r5
   2616a:	4905      	ldr	r1, [pc, #20]	; (26180 <z_impl_k_thread_create+0x8c>)
   2616c:	f104 0018 	add.w	r0, r4, #24
   26170:	f001 ff34 	bl	27fdc <z_add_timeout>
   26174:	e7f3      	b.n	2615e <z_impl_k_thread_create+0x6a>
   26176:	bf00      	nop
   26178:	0003188f 	.word	0x0003188f
   2617c:	0002f296 	.word	0x0002f296
   26180:	00027571 	.word	0x00027571

00026184 <z_init_static_threads>:
{
   26184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26188:	4c37      	ldr	r4, [pc, #220]	; (26268 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2618a:	4d38      	ldr	r5, [pc, #224]	; (2626c <z_init_static_threads+0xe8>)
   2618c:	4f38      	ldr	r7, [pc, #224]	; (26270 <z_init_static_threads+0xec>)
{
   2618e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   26190:	42ac      	cmp	r4, r5
   26192:	4626      	mov	r6, r4
   26194:	d90a      	bls.n	261ac <z_init_static_threads+0x28>
   26196:	4639      	mov	r1, r7
   26198:	4836      	ldr	r0, [pc, #216]	; (26274 <z_init_static_threads+0xf0>)
   2619a:	f240 22d5 	movw	r2, #725	; 0x2d5
   2619e:	f005 fb05 	bl	2b7ac <printk>
   261a2:	f240 21d5 	movw	r1, #725	; 0x2d5
   261a6:	4638      	mov	r0, r7
   261a8:	f005 fc97 	bl	2bada <assert_post_action>
   261ac:	42ae      	cmp	r6, r5
   261ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   261b2:	d31b      	bcc.n	261ec <z_init_static_threads+0x68>
	k_sched_lock();
   261b4:	f000 ff6c 	bl	27090 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   261b8:	4c2b      	ldr	r4, [pc, #172]	; (26268 <z_init_static_threads+0xe4>)
   261ba:	4e2d      	ldr	r6, [pc, #180]	; (26270 <z_init_static_threads+0xec>)
   261bc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 26274 <z_init_static_threads+0xf0>
   261c0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 26278 <z_init_static_threads+0xf4>
   261c4:	42ac      	cmp	r4, r5
   261c6:	d90a      	bls.n	261de <z_init_static_threads+0x5a>
   261c8:	4631      	mov	r1, r6
   261ca:	4640      	mov	r0, r8
   261cc:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   261d0:	f005 faec 	bl	2b7ac <printk>
   261d4:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   261d8:	4630      	mov	r0, r6
   261da:	f005 fc7e 	bl	2bada <assert_post_action>
   261de:	42ac      	cmp	r4, r5
   261e0:	d320      	bcc.n	26224 <z_init_static_threads+0xa0>
}
   261e2:	b007      	add	sp, #28
   261e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   261e8:	f001 bbae 	b.w	27948 <k_sched_unlock>
		z_setup_new_thread(
   261ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
   261f0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   261f4:	9305      	str	r3, [sp, #20]
   261f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   261fa:	9304      	str	r3, [sp, #16]
   261fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   26200:	9303      	str	r3, [sp, #12]
   26202:	f854 3c18 	ldr.w	r3, [r4, #-24]
   26206:	9302      	str	r3, [sp, #8]
   26208:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2620c:	9301      	str	r3, [sp, #4]
   2620e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   26212:	9300      	str	r3, [sp, #0]
   26214:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   26218:	f7ff ff18 	bl	2604c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2621c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   26220:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   26222:	e7b5      	b.n	26190 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   26224:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26226:	1c5a      	adds	r2, r3, #1
   26228:	d00f      	beq.n	2624a <z_init_static_threads+0xc6>
   2622a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2622e:	f240 30e7 	movw	r0, #999	; 0x3e7
   26232:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   26234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   26238:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2623c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   26240:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26242:	d104      	bne.n	2624e <z_init_static_threads+0xca>
	z_sched_start(thread);
   26244:	4638      	mov	r0, r7
   26246:	f001 f951 	bl	274ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2624a:	3430      	adds	r4, #48	; 0x30
   2624c:	e7ba      	b.n	261c4 <z_init_static_threads+0x40>
   2624e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26252:	2300      	movs	r3, #0
   26254:	f7f2 ff24 	bl	190a0 <__aeabi_uldivmod>
   26258:	4602      	mov	r2, r0
   2625a:	460b      	mov	r3, r1
   2625c:	f107 0018 	add.w	r0, r7, #24
   26260:	4649      	mov	r1, r9
   26262:	f001 febb 	bl	27fdc <z_add_timeout>
   26266:	e7f0      	b.n	2624a <z_init_static_threads+0xc6>
   26268:	2000c934 	.word	0x2000c934
   2626c:	2000c964 	.word	0x2000c964
   26270:	0003188f 	.word	0x0003188f
   26274:	0002f296 	.word	0x0002f296
   26278:	00027571 	.word	0x00027571

0002627c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2627c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2627e:	b138      	cbz	r0, 26290 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   26280:	4b04      	ldr	r3, [pc, #16]	; (26294 <z_spin_lock_valid+0x18>)
   26282:	f000 0003 	and.w	r0, r0, #3
   26286:	7d1b      	ldrb	r3, [r3, #20]
   26288:	1ac0      	subs	r0, r0, r3
   2628a:	bf18      	it	ne
   2628c:	2001      	movne	r0, #1
   2628e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   26290:	2001      	movs	r0, #1
}
   26292:	4770      	bx	lr
   26294:	2000d44c 	.word	0x2000d44c

00026298 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   26298:	4905      	ldr	r1, [pc, #20]	; (262b0 <z_spin_unlock_valid+0x18>)
{
   2629a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2629c:	688a      	ldr	r2, [r1, #8]
   2629e:	7d08      	ldrb	r0, [r1, #20]
   262a0:	6819      	ldr	r1, [r3, #0]
   262a2:	4302      	orrs	r2, r0
   262a4:	2000      	movs	r0, #0
   262a6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   262a8:	bf04      	itt	eq
   262aa:	6018      	streq	r0, [r3, #0]
	return true;
   262ac:	2001      	moveq	r0, #1
}
   262ae:	4770      	bx	lr
   262b0:	2000d44c 	.word	0x2000d44c

000262b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   262b4:	4a02      	ldr	r2, [pc, #8]	; (262c0 <z_spin_lock_set_owner+0xc>)
   262b6:	7d11      	ldrb	r1, [r2, #20]
   262b8:	6893      	ldr	r3, [r2, #8]
   262ba:	430b      	orrs	r3, r1
   262bc:	6003      	str	r3, [r0, #0]
}
   262be:	4770      	bx	lr
   262c0:	2000d44c 	.word	0x2000d44c

000262c4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   262c4:	4c12      	ldr	r4, [pc, #72]	; (26310 <idle+0x4c>)
{
   262c6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   262c8:	68a3      	ldr	r3, [r4, #8]
   262ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
   262ce:	2b00      	cmp	r3, #0
   262d0:	da08      	bge.n	262e4 <idle+0x20>
   262d2:	4910      	ldr	r1, [pc, #64]	; (26314 <idle+0x50>)
   262d4:	4810      	ldr	r0, [pc, #64]	; (26318 <idle+0x54>)
   262d6:	2227      	movs	r2, #39	; 0x27
   262d8:	f005 fa68 	bl	2b7ac <printk>
   262dc:	2127      	movs	r1, #39	; 0x27
   262de:	480d      	ldr	r0, [pc, #52]	; (26314 <idle+0x50>)
   262e0:	f005 fbfb 	bl	2bada <assert_post_action>
	return !z_sys_post_kernel;
   262e4:	4d0d      	ldr	r5, [pc, #52]	; (2631c <idle+0x58>)
	__asm__ volatile(
   262e6:	f04f 0220 	mov.w	r2, #32
   262ea:	f3ef 8311 	mrs	r3, BASEPRI
   262ee:	f382 8812 	msr	BASEPRI_MAX, r2
   262f2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   262f6:	f001 ff5b 	bl	281b0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   262fa:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   262fc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   262fe:	b913      	cbnz	r3, 26306 <idle+0x42>
	arch_cpu_idle();
   26300:	f7f5 ff12 	bl	1c128 <arch_cpu_idle>
}
   26304:	e7ef      	b.n	262e6 <idle+0x22>
   26306:	f7f5 fe1b 	bl	1bf40 <pm_system_suspend>
   2630a:	2800      	cmp	r0, #0
   2630c:	d1eb      	bne.n	262e6 <idle+0x22>
   2630e:	e7f7      	b.n	26300 <idle+0x3c>
   26310:	2000d44c 	.word	0x2000d44c
   26314:	000318b2 	.word	0x000318b2
   26318:	0002f296 	.word	0x0002f296
   2631c:	2000db8d 	.word	0x2000db8d

00026320 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   26320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26324:	4604      	mov	r4, r0
   26326:	4617      	mov	r7, r2
   26328:	461e      	mov	r6, r3
   2632a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2632e:	b143      	cbz	r3, 26342 <z_impl_k_mutex_lock+0x22>
   26330:	495f      	ldr	r1, [pc, #380]	; (264b0 <z_impl_k_mutex_lock+0x190>)
   26332:	4860      	ldr	r0, [pc, #384]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   26334:	2265      	movs	r2, #101	; 0x65
   26336:	f005 fa39 	bl	2b7ac <printk>
   2633a:	2165      	movs	r1, #101	; 0x65
   2633c:	485c      	ldr	r0, [pc, #368]	; (264b0 <z_impl_k_mutex_lock+0x190>)
   2633e:	f005 fbcc 	bl	2bada <assert_post_action>
   26342:	f04f 0320 	mov.w	r3, #32
   26346:	f3ef 8811 	mrs	r8, BASEPRI
   2634a:	f383 8812 	msr	BASEPRI_MAX, r3
   2634e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26352:	4859      	ldr	r0, [pc, #356]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   26354:	f7ff ff92 	bl	2627c <z_spin_lock_valid>
   26358:	b940      	cbnz	r0, 2636c <z_impl_k_mutex_lock+0x4c>
   2635a:	4958      	ldr	r1, [pc, #352]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   2635c:	4855      	ldr	r0, [pc, #340]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   2635e:	228e      	movs	r2, #142	; 0x8e
   26360:	f005 fa24 	bl	2b7ac <printk>
   26364:	218e      	movs	r1, #142	; 0x8e
   26366:	4855      	ldr	r0, [pc, #340]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   26368:	f005 fbb7 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2636c:	4852      	ldr	r0, [pc, #328]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   2636e:	f7ff ffa1 	bl	262b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   26372:	68e3      	ldr	r3, [r4, #12]
   26374:	4a52      	ldr	r2, [pc, #328]	; (264c0 <z_impl_k_mutex_lock+0x1a0>)
   26376:	b1d3      	cbz	r3, 263ae <z_impl_k_mutex_lock+0x8e>
   26378:	68a0      	ldr	r0, [r4, #8]
   2637a:	6891      	ldr	r1, [r2, #8]
   2637c:	4288      	cmp	r0, r1
   2637e:	d033      	beq.n	263e8 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   26380:	ea57 0306 	orrs.w	r3, r7, r6
   26384:	d132      	bne.n	263ec <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26386:	484c      	ldr	r0, [pc, #304]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   26388:	f7ff ff86 	bl	26298 <z_spin_unlock_valid>
   2638c:	b940      	cbnz	r0, 263a0 <z_impl_k_mutex_lock+0x80>
   2638e:	494b      	ldr	r1, [pc, #300]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   26390:	4848      	ldr	r0, [pc, #288]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   26392:	22b9      	movs	r2, #185	; 0xb9
   26394:	f005 fa0a 	bl	2b7ac <printk>
   26398:	21b9      	movs	r1, #185	; 0xb9
   2639a:	4848      	ldr	r0, [pc, #288]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   2639c:	f005 fb9d 	bl	2bada <assert_post_action>
	__asm__ volatile(
   263a0:	f388 8811 	msr	BASEPRI, r8
   263a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   263a8:	f06f 000f 	mvn.w	r0, #15
   263ac:	e019      	b.n	263e2 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   263ae:	6891      	ldr	r1, [r2, #8]
   263b0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   263b4:	3301      	adds	r3, #1
   263b6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   263b8:	6893      	ldr	r3, [r2, #8]
   263ba:	483f      	ldr	r0, [pc, #252]	; (264b8 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   263bc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   263be:	60a3      	str	r3, [r4, #8]
   263c0:	f7ff ff6a 	bl	26298 <z_spin_unlock_valid>
   263c4:	b940      	cbnz	r0, 263d8 <z_impl_k_mutex_lock+0xb8>
   263c6:	493d      	ldr	r1, [pc, #244]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   263c8:	483a      	ldr	r0, [pc, #232]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   263ca:	22b9      	movs	r2, #185	; 0xb9
   263cc:	f005 f9ee 	bl	2b7ac <printk>
   263d0:	21b9      	movs	r1, #185	; 0xb9
   263d2:	483a      	ldr	r0, [pc, #232]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   263d4:	f005 fb81 	bl	2bada <assert_post_action>
   263d8:	f388 8811 	msr	BASEPRI, r8
   263dc:	f3bf 8f6f 	isb	sy
		return 0;
   263e0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   263e2:	b002      	add	sp, #8
   263e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   263e8:	6921      	ldr	r1, [r4, #16]
   263ea:	e7e3      	b.n	263b4 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   263ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
   263f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   263f4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   263f8:	4299      	cmp	r1, r3
   263fa:	bfa8      	it	ge
   263fc:	4619      	movge	r1, r3
   263fe:	4291      	cmp	r1, r2
   26400:	bfb8      	it	lt
   26402:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   26404:	428b      	cmp	r3, r1
   26406:	dd3e      	ble.n	26486 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   26408:	f007 fa53 	bl	2d8b2 <adjust_owner_prio.isra.0>
   2640c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2640e:	4622      	mov	r2, r4
   26410:	4641      	mov	r1, r8
   26412:	e9cd 7600 	strd	r7, r6, [sp]
   26416:	4828      	ldr	r0, [pc, #160]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   26418:	f001 f996 	bl	27748 <z_pend_curr>
	if (got_mutex == 0) {
   2641c:	2800      	cmp	r0, #0
   2641e:	d0e0      	beq.n	263e2 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   26420:	f04f 0320 	mov.w	r3, #32
   26424:	f3ef 8611 	mrs	r6, BASEPRI
   26428:	f383 8812 	msr	BASEPRI_MAX, r3
   2642c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26430:	4821      	ldr	r0, [pc, #132]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   26432:	f7ff ff23 	bl	2627c <z_spin_lock_valid>
   26436:	b940      	cbnz	r0, 2644a <z_impl_k_mutex_lock+0x12a>
   26438:	4920      	ldr	r1, [pc, #128]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   2643a:	481e      	ldr	r0, [pc, #120]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   2643c:	228e      	movs	r2, #142	; 0x8e
   2643e:	f005 f9b5 	bl	2b7ac <printk>
   26442:	218e      	movs	r1, #142	; 0x8e
   26444:	481d      	ldr	r0, [pc, #116]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   26446:	f005 fb48 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2644a:	481b      	ldr	r0, [pc, #108]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   2644c:	f7ff ff32 	bl	262b4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   26450:	6823      	ldr	r3, [r4, #0]
   26452:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26454:	429c      	cmp	r4, r3
   26456:	d00a      	beq.n	2646e <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   26458:	b14b      	cbz	r3, 2646e <z_impl_k_mutex_lock+0x14e>
   2645a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2645e:	4299      	cmp	r1, r3
   26460:	bfa8      	it	ge
   26462:	4619      	movge	r1, r3
   26464:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   26468:	4299      	cmp	r1, r3
   2646a:	bfb8      	it	lt
   2646c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2646e:	68a0      	ldr	r0, [r4, #8]
   26470:	f007 fa1f 	bl	2d8b2 <adjust_owner_prio.isra.0>
   26474:	b900      	cbnz	r0, 26478 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   26476:	b145      	cbz	r5, 2648a <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   26478:	4631      	mov	r1, r6
   2647a:	480f      	ldr	r0, [pc, #60]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   2647c:	f000 fdd2 	bl	27024 <z_reschedule>
	return -EAGAIN;
   26480:	f06f 000a 	mvn.w	r0, #10
   26484:	e7ad      	b.n	263e2 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   26486:	2500      	movs	r5, #0
   26488:	e7c1      	b.n	2640e <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2648a:	480b      	ldr	r0, [pc, #44]	; (264b8 <z_impl_k_mutex_lock+0x198>)
   2648c:	f7ff ff04 	bl	26298 <z_spin_unlock_valid>
   26490:	b940      	cbnz	r0, 264a4 <z_impl_k_mutex_lock+0x184>
   26492:	490a      	ldr	r1, [pc, #40]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   26494:	4807      	ldr	r0, [pc, #28]	; (264b4 <z_impl_k_mutex_lock+0x194>)
   26496:	22b9      	movs	r2, #185	; 0xb9
   26498:	f005 f988 	bl	2b7ac <printk>
   2649c:	21b9      	movs	r1, #185	; 0xb9
   2649e:	4807      	ldr	r0, [pc, #28]	; (264bc <z_impl_k_mutex_lock+0x19c>)
   264a0:	f005 fb1b 	bl	2bada <assert_post_action>
	__asm__ volatile(
   264a4:	f386 8811 	msr	BASEPRI, r6
   264a8:	f3bf 8f6f 	isb	sy
   264ac:	e7e8      	b.n	26480 <z_impl_k_mutex_lock+0x160>
   264ae:	bf00      	nop
   264b0:	000318d3 	.word	0x000318d3
   264b4:	0002f296 	.word	0x0002f296
   264b8:	2000d474 	.word	0x2000d474
   264bc:	0002f2d0 	.word	0x0002f2d0
   264c0:	2000d44c 	.word	0x2000d44c

000264c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   264c4:	b538      	push	{r3, r4, r5, lr}
   264c6:	4604      	mov	r4, r0
   264c8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   264cc:	b143      	cbz	r3, 264e0 <z_impl_k_mutex_unlock+0x1c>
   264ce:	4943      	ldr	r1, [pc, #268]	; (265dc <z_impl_k_mutex_unlock+0x118>)
   264d0:	4843      	ldr	r0, [pc, #268]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   264d2:	22c7      	movs	r2, #199	; 0xc7
   264d4:	f005 f96a 	bl	2b7ac <printk>
   264d8:	21c7      	movs	r1, #199	; 0xc7
   264da:	4840      	ldr	r0, [pc, #256]	; (265dc <z_impl_k_mutex_unlock+0x118>)
   264dc:	f005 fafd 	bl	2bada <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   264e0:	68a3      	ldr	r3, [r4, #8]
   264e2:	2b00      	cmp	r3, #0
   264e4:	d074      	beq.n	265d0 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   264e6:	4d3f      	ldr	r5, [pc, #252]	; (265e4 <z_impl_k_mutex_unlock+0x120>)
   264e8:	68aa      	ldr	r2, [r5, #8]
   264ea:	4293      	cmp	r3, r2
   264ec:	d173      	bne.n	265d6 <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   264ee:	68e3      	ldr	r3, [r4, #12]
   264f0:	b943      	cbnz	r3, 26504 <z_impl_k_mutex_unlock+0x40>
   264f2:	493a      	ldr	r1, [pc, #232]	; (265dc <z_impl_k_mutex_unlock+0x118>)
   264f4:	483a      	ldr	r0, [pc, #232]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   264f6:	22df      	movs	r2, #223	; 0xdf
   264f8:	f005 f958 	bl	2b7ac <printk>
   264fc:	21df      	movs	r1, #223	; 0xdf
   264fe:	4837      	ldr	r0, [pc, #220]	; (265dc <z_impl_k_mutex_unlock+0x118>)
   26500:	f005 faeb 	bl	2bada <assert_post_action>
   26504:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   26508:	b143      	cbz	r3, 2651c <z_impl_k_mutex_unlock+0x58>
   2650a:	4937      	ldr	r1, [pc, #220]	; (265e8 <z_impl_k_mutex_unlock+0x124>)
   2650c:	4834      	ldr	r0, [pc, #208]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   2650e:	22fd      	movs	r2, #253	; 0xfd
   26510:	f005 f94c 	bl	2b7ac <printk>
   26514:	21fd      	movs	r1, #253	; 0xfd
   26516:	4834      	ldr	r0, [pc, #208]	; (265e8 <z_impl_k_mutex_unlock+0x124>)
   26518:	f005 fadf 	bl	2bada <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2651c:	68ab      	ldr	r3, [r5, #8]
   2651e:	7bdb      	ldrb	r3, [r3, #15]
   26520:	2b01      	cmp	r3, #1
   26522:	d108      	bne.n	26536 <z_impl_k_mutex_unlock+0x72>
   26524:	4930      	ldr	r1, [pc, #192]	; (265e8 <z_impl_k_mutex_unlock+0x124>)
   26526:	482e      	ldr	r0, [pc, #184]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   26528:	22fe      	movs	r2, #254	; 0xfe
   2652a:	f005 f93f 	bl	2b7ac <printk>
   2652e:	21fe      	movs	r1, #254	; 0xfe
   26530:	482d      	ldr	r0, [pc, #180]	; (265e8 <z_impl_k_mutex_unlock+0x124>)
   26532:	f005 fad2 	bl	2bada <assert_post_action>

	--_current->base.sched_locked;
   26536:	68aa      	ldr	r2, [r5, #8]
   26538:	7bd3      	ldrb	r3, [r2, #15]
   2653a:	3b01      	subs	r3, #1
   2653c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2653e:	68e3      	ldr	r3, [r4, #12]
   26540:	2b01      	cmp	r3, #1
   26542:	d905      	bls.n	26550 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   26544:	3b01      	subs	r3, #1
   26546:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   26548:	f001 f9fe 	bl	27948 <k_sched_unlock>

	return 0;
   2654c:	2000      	movs	r0, #0
}
   2654e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   26550:	f04f 0320 	mov.w	r3, #32
   26554:	f3ef 8511 	mrs	r5, BASEPRI
   26558:	f383 8812 	msr	BASEPRI_MAX, r3
   2655c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26560:	4822      	ldr	r0, [pc, #136]	; (265ec <z_impl_k_mutex_unlock+0x128>)
   26562:	f7ff fe8b 	bl	2627c <z_spin_lock_valid>
   26566:	b940      	cbnz	r0, 2657a <z_impl_k_mutex_unlock+0xb6>
   26568:	4921      	ldr	r1, [pc, #132]	; (265f0 <z_impl_k_mutex_unlock+0x12c>)
   2656a:	481d      	ldr	r0, [pc, #116]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   2656c:	228e      	movs	r2, #142	; 0x8e
   2656e:	f005 f91d 	bl	2b7ac <printk>
   26572:	218e      	movs	r1, #142	; 0x8e
   26574:	481e      	ldr	r0, [pc, #120]	; (265f0 <z_impl_k_mutex_unlock+0x12c>)
   26576:	f005 fab0 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2657a:	481c      	ldr	r0, [pc, #112]	; (265ec <z_impl_k_mutex_unlock+0x128>)
   2657c:	f7ff fe9a 	bl	262b4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   26580:	6921      	ldr	r1, [r4, #16]
   26582:	68a0      	ldr	r0, [r4, #8]
   26584:	f007 f995 	bl	2d8b2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   26588:	4620      	mov	r0, r4
   2658a:	f001 fa39 	bl	27a00 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2658e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   26590:	b158      	cbz	r0, 265aa <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   26592:	f990 200e 	ldrsb.w	r2, [r0, #14]
   26596:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   26598:	2200      	movs	r2, #0
   2659a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2659c:	f000 ff70 	bl	27480 <z_ready_thread>
		z_reschedule(&lock, key);
   265a0:	4629      	mov	r1, r5
   265a2:	4812      	ldr	r0, [pc, #72]	; (265ec <z_impl_k_mutex_unlock+0x128>)
   265a4:	f000 fd3e 	bl	27024 <z_reschedule>
   265a8:	e7ce      	b.n	26548 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   265aa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265ac:	480f      	ldr	r0, [pc, #60]	; (265ec <z_impl_k_mutex_unlock+0x128>)
   265ae:	f7ff fe73 	bl	26298 <z_spin_unlock_valid>
   265b2:	b940      	cbnz	r0, 265c6 <z_impl_k_mutex_unlock+0x102>
   265b4:	490e      	ldr	r1, [pc, #56]	; (265f0 <z_impl_k_mutex_unlock+0x12c>)
   265b6:	480a      	ldr	r0, [pc, #40]	; (265e0 <z_impl_k_mutex_unlock+0x11c>)
   265b8:	22b9      	movs	r2, #185	; 0xb9
   265ba:	f005 f8f7 	bl	2b7ac <printk>
   265be:	21b9      	movs	r1, #185	; 0xb9
   265c0:	480b      	ldr	r0, [pc, #44]	; (265f0 <z_impl_k_mutex_unlock+0x12c>)
   265c2:	f005 fa8a 	bl	2bada <assert_post_action>
	__asm__ volatile(
   265c6:	f385 8811 	msr	BASEPRI, r5
   265ca:	f3bf 8f6f 	isb	sy
   265ce:	e7bb      	b.n	26548 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   265d0:	f06f 0015 	mvn.w	r0, #21
   265d4:	e7bb      	b.n	2654e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   265d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   265da:	e7b8      	b.n	2654e <z_impl_k_mutex_unlock+0x8a>
   265dc:	000318d3 	.word	0x000318d3
   265e0:	0002f296 	.word	0x0002f296
   265e4:	2000d44c 	.word	0x2000d44c
   265e8:	000318f5 	.word	0x000318f5
   265ec:	2000d474 	.word	0x2000d474
   265f0:	0002f2d0 	.word	0x0002f2d0

000265f4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   265f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   265f8:	4604      	mov	r4, r0
   265fa:	460d      	mov	r5, r1
   265fc:	4690      	mov	r8, r2
   265fe:	4699      	mov	r9, r3
   26600:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26604:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26608:	f04f 0320 	mov.w	r3, #32
   2660c:	f3ef 8711 	mrs	r7, BASEPRI
   26610:	f383 8812 	msr	BASEPRI_MAX, r3
   26614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26618:	4630      	mov	r0, r6
   2661a:	f7ff fe2f 	bl	2627c <z_spin_lock_valid>
   2661e:	b940      	cbnz	r0, 26632 <queue_insert+0x3e>
   26620:	4936      	ldr	r1, [pc, #216]	; (266fc <queue_insert+0x108>)
   26622:	4837      	ldr	r0, [pc, #220]	; (26700 <queue_insert+0x10c>)
   26624:	228e      	movs	r2, #142	; 0x8e
   26626:	f005 f8c1 	bl	2b7ac <printk>
   2662a:	218e      	movs	r1, #142	; 0x8e
   2662c:	4833      	ldr	r0, [pc, #204]	; (266fc <queue_insert+0x108>)
   2662e:	f005 fa54 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26632:	4630      	mov	r0, r6
   26634:	f7ff fe3e 	bl	262b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   26638:	f1ba 0f00 	cmp.w	sl, #0
   2663c:	d000      	beq.n	26640 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2663e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26640:	f104 000c 	add.w	r0, r4, #12
   26644:	f001 f9dc 	bl	27a00 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   26648:	b158      	cbz	r0, 26662 <queue_insert+0x6e>
   2664a:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2664c:	f8c0 8014 	str.w	r8, [r0, #20]
   26650:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   26652:	f000 ff15 	bl	27480 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   26656:	4630      	mov	r0, r6
   26658:	4639      	mov	r1, r7
   2665a:	f000 fce3 	bl	27024 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   2665e:	2000      	movs	r0, #0
   26660:	e019      	b.n	26696 <queue_insert+0xa2>
	if (alloc) {
   26662:	f1b9 0f00 	cmp.w	r9, #0
   26666:	d028      	beq.n	266ba <queue_insert+0xc6>
	return z_thread_aligned_alloc(0, size);
   26668:	2108      	movs	r1, #8
   2666a:	f002 f9f3 	bl	28a54 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2666e:	b9a0      	cbnz	r0, 2669a <queue_insert+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26670:	4630      	mov	r0, r6
   26672:	f7ff fe11 	bl	26298 <z_spin_unlock_valid>
   26676:	b940      	cbnz	r0, 2668a <queue_insert+0x96>
   26678:	4920      	ldr	r1, [pc, #128]	; (266fc <queue_insert+0x108>)
   2667a:	4821      	ldr	r0, [pc, #132]	; (26700 <queue_insert+0x10c>)
   2667c:	22b9      	movs	r2, #185	; 0xb9
   2667e:	f005 f895 	bl	2b7ac <printk>
   26682:	21b9      	movs	r1, #185	; 0xb9
   26684:	481d      	ldr	r0, [pc, #116]	; (266fc <queue_insert+0x108>)
   26686:	f005 fa28 	bl	2bada <assert_post_action>
	__asm__ volatile(
   2668a:	f387 8811 	msr	BASEPRI, r7
   2668e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26692:	f06f 000b 	mvn.w	r0, #11
}
   26696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2669a:	2301      	movs	r3, #1
		anode->data = data;
   2669c:	f8c0 8004 	str.w	r8, [r0, #4]
   266a0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   266a2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   266a4:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   266a8:	b95d      	cbnz	r5, 266c2 <queue_insert+0xce>
	parent->next_and_flags = cur_flags | (unative_t)child;
   266aa:	6823      	ldr	r3, [r4, #0]
   266ac:	4313      	orrs	r3, r2
   266ae:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   266b0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   266b2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   266b4:	b973      	cbnz	r3, 266d4 <queue_insert+0xe0>
	list->tail = node;
   266b6:	6060      	str	r0, [r4, #4]
}
   266b8:	e00c      	b.n	266d4 <queue_insert+0xe0>
}
   266ba:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   266bc:	f8c8 9000 	str.w	r9, [r8]
}
   266c0:	e7ef      	b.n	266a2 <queue_insert+0xae>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   266c2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   266c4:	f033 0303 	bics.w	r3, r3, #3
   266c8:	d110      	bne.n	266ec <queue_insert+0xf8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   266ca:	6002      	str	r2, [r0, #0]
	return list->tail;
   266cc:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   266ce:	b93a      	cbnz	r2, 266e0 <queue_insert+0xec>
	list->head = node;
   266d0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   266d4:	2104      	movs	r1, #4
   266d6:	f104 0014 	add.w	r0, r4, #20
   266da:	f007 fa27 	bl	2db2c <z_handle_obj_poll_events>
   266de:	e7ba      	b.n	26656 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   266e0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   266e2:	f003 0303 	and.w	r3, r3, #3
   266e6:	4303      	orrs	r3, r0
   266e8:	6013      	str	r3, [r2, #0]
   266ea:	e7e4      	b.n	266b6 <queue_insert+0xc2>
   266ec:	4313      	orrs	r3, r2
   266ee:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   266f0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   266f2:	f003 0303 	and.w	r3, r3, #3
   266f6:	4303      	orrs	r3, r0
   266f8:	602b      	str	r3, [r5, #0]
}
   266fa:	e7eb      	b.n	266d4 <queue_insert+0xe0>
   266fc:	0002f2d0 	.word	0x0002f2d0
   26700:	0002f296 	.word	0x0002f296

00026704 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   26704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26708:	4605      	mov	r5, r0
   2670a:	4690      	mov	r8, r2
   2670c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2670e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26712:	f04f 0320 	mov.w	r3, #32
   26716:	f3ef 8911 	mrs	r9, BASEPRI
   2671a:	f383 8812 	msr	BASEPRI_MAX, r3
   2671e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26722:	4630      	mov	r0, r6
   26724:	f7ff fdaa 	bl	2627c <z_spin_lock_valid>
   26728:	b940      	cbnz	r0, 2673c <z_impl_k_queue_get+0x38>
   2672a:	4921      	ldr	r1, [pc, #132]	; (267b0 <z_impl_k_queue_get+0xac>)
   2672c:	4821      	ldr	r0, [pc, #132]	; (267b4 <z_impl_k_queue_get+0xb0>)
   2672e:	228e      	movs	r2, #142	; 0x8e
   26730:	f005 f83c 	bl	2b7ac <printk>
   26734:	218e      	movs	r1, #142	; 0x8e
   26736:	481e      	ldr	r0, [pc, #120]	; (267b0 <z_impl_k_queue_get+0xac>)
   26738:	f005 f9cf 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2673c:	4630      	mov	r0, r6
   2673e:	f7ff fdb9 	bl	262b4 <z_spin_lock_set_owner>
	return list->head;
   26742:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   26744:	b314      	cbz	r4, 2678c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26746:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26748:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2674a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2674e:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   26750:	4620      	mov	r0, r4
   26752:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   26756:	602b      	str	r3, [r5, #0]
	list->tail = node;
   26758:	bf08      	it	eq
   2675a:	606b      	streq	r3, [r5, #4]
   2675c:	f007 f8b8 	bl	2d8d0 <z_queue_node_peek>
   26760:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26762:	4630      	mov	r0, r6
   26764:	f7ff fd98 	bl	26298 <z_spin_unlock_valid>
   26768:	b940      	cbnz	r0, 2677c <z_impl_k_queue_get+0x78>
   2676a:	4911      	ldr	r1, [pc, #68]	; (267b0 <z_impl_k_queue_get+0xac>)
   2676c:	4811      	ldr	r0, [pc, #68]	; (267b4 <z_impl_k_queue_get+0xb0>)
   2676e:	22b9      	movs	r2, #185	; 0xb9
   26770:	f005 f81c 	bl	2b7ac <printk>
   26774:	21b9      	movs	r1, #185	; 0xb9
   26776:	480e      	ldr	r0, [pc, #56]	; (267b0 <z_impl_k_queue_get+0xac>)
   26778:	f005 f9af 	bl	2bada <assert_post_action>
	__asm__ volatile(
   2677c:	f389 8811 	msr	BASEPRI, r9
   26780:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26784:	4620      	mov	r0, r4
   26786:	b003      	add	sp, #12
   26788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2678c:	ea58 0307 	orrs.w	r3, r8, r7
   26790:	d0e7      	beq.n	26762 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   26792:	4649      	mov	r1, r9
   26794:	4630      	mov	r0, r6
   26796:	e9cd 8700 	strd	r8, r7, [sp]
   2679a:	f105 020c 	add.w	r2, r5, #12
   2679e:	f000 ffd3 	bl	27748 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   267a2:	2800      	cmp	r0, #0
   267a4:	d1ee      	bne.n	26784 <z_impl_k_queue_get+0x80>
   267a6:	4b04      	ldr	r3, [pc, #16]	; (267b8 <z_impl_k_queue_get+0xb4>)
   267a8:	689b      	ldr	r3, [r3, #8]
   267aa:	695c      	ldr	r4, [r3, #20]
   267ac:	e7ea      	b.n	26784 <z_impl_k_queue_get+0x80>
   267ae:	bf00      	nop
   267b0:	0002f2d0 	.word	0x0002f2d0
   267b4:	0002f296 	.word	0x0002f296
   267b8:	2000d44c 	.word	0x2000d44c

000267bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   267bc:	b538      	push	{r3, r4, r5, lr}
   267be:	4604      	mov	r4, r0
	__asm__ volatile(
   267c0:	f04f 0320 	mov.w	r3, #32
   267c4:	f3ef 8511 	mrs	r5, BASEPRI
   267c8:	f383 8812 	msr	BASEPRI_MAX, r3
   267cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267d0:	4814      	ldr	r0, [pc, #80]	; (26824 <z_impl_k_sem_give+0x68>)
   267d2:	f7ff fd53 	bl	2627c <z_spin_lock_valid>
   267d6:	b940      	cbnz	r0, 267ea <z_impl_k_sem_give+0x2e>
   267d8:	4913      	ldr	r1, [pc, #76]	; (26828 <z_impl_k_sem_give+0x6c>)
   267da:	4814      	ldr	r0, [pc, #80]	; (2682c <z_impl_k_sem_give+0x70>)
   267dc:	228e      	movs	r2, #142	; 0x8e
   267de:	f004 ffe5 	bl	2b7ac <printk>
   267e2:	218e      	movs	r1, #142	; 0x8e
   267e4:	4810      	ldr	r0, [pc, #64]	; (26828 <z_impl_k_sem_give+0x6c>)
   267e6:	f005 f978 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   267ea:	480e      	ldr	r0, [pc, #56]	; (26824 <z_impl_k_sem_give+0x68>)
   267ec:	f7ff fd62 	bl	262b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   267f0:	4620      	mov	r0, r4
   267f2:	f001 f905 	bl	27a00 <z_unpend_first_thread>

	if (thread != NULL) {
   267f6:	b148      	cbz	r0, 2680c <z_impl_k_sem_give+0x50>
   267f8:	2200      	movs	r2, #0
   267fa:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   267fc:	f000 fe40 	bl	27480 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   26800:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   26802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   26806:	4807      	ldr	r0, [pc, #28]	; (26824 <z_impl_k_sem_give+0x68>)
   26808:	f000 bc0c 	b.w	27024 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2680c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   26810:	429a      	cmp	r2, r3
   26812:	bf18      	it	ne
   26814:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   26816:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   26818:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2681a:	f104 0010 	add.w	r0, r4, #16
   2681e:	f007 f985 	bl	2db2c <z_handle_obj_poll_events>
}
   26822:	e7ed      	b.n	26800 <z_impl_k_sem_give+0x44>
   26824:	2000d478 	.word	0x2000d478
   26828:	0002f2d0 	.word	0x0002f2d0
   2682c:	0002f296 	.word	0x0002f296

00026830 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   26830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26832:	4604      	mov	r4, r0
   26834:	4616      	mov	r6, r2
   26836:	461d      	mov	r5, r3
   26838:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2683c:	b15b      	cbz	r3, 26856 <z_impl_k_sem_take+0x26>
   2683e:	ea52 0305 	orrs.w	r3, r2, r5
   26842:	d008      	beq.n	26856 <z_impl_k_sem_take+0x26>
   26844:	492b      	ldr	r1, [pc, #172]	; (268f4 <z_impl_k_sem_take+0xc4>)
   26846:	482c      	ldr	r0, [pc, #176]	; (268f8 <z_impl_k_sem_take+0xc8>)
   26848:	2279      	movs	r2, #121	; 0x79
   2684a:	f004 ffaf 	bl	2b7ac <printk>
   2684e:	2179      	movs	r1, #121	; 0x79
   26850:	4828      	ldr	r0, [pc, #160]	; (268f4 <z_impl_k_sem_take+0xc4>)
   26852:	f005 f942 	bl	2bada <assert_post_action>
   26856:	f04f 0320 	mov.w	r3, #32
   2685a:	f3ef 8711 	mrs	r7, BASEPRI
   2685e:	f383 8812 	msr	BASEPRI_MAX, r3
   26862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26866:	4825      	ldr	r0, [pc, #148]	; (268fc <z_impl_k_sem_take+0xcc>)
   26868:	f7ff fd08 	bl	2627c <z_spin_lock_valid>
   2686c:	b940      	cbnz	r0, 26880 <z_impl_k_sem_take+0x50>
   2686e:	4924      	ldr	r1, [pc, #144]	; (26900 <z_impl_k_sem_take+0xd0>)
   26870:	4821      	ldr	r0, [pc, #132]	; (268f8 <z_impl_k_sem_take+0xc8>)
   26872:	228e      	movs	r2, #142	; 0x8e
   26874:	f004 ff9a 	bl	2b7ac <printk>
   26878:	218e      	movs	r1, #142	; 0x8e
   2687a:	4821      	ldr	r0, [pc, #132]	; (26900 <z_impl_k_sem_take+0xd0>)
   2687c:	f005 f92d 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26880:	481e      	ldr	r0, [pc, #120]	; (268fc <z_impl_k_sem_take+0xcc>)
   26882:	f7ff fd17 	bl	262b4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   26886:	68a3      	ldr	r3, [r4, #8]
   26888:	b1ab      	cbz	r3, 268b6 <z_impl_k_sem_take+0x86>
		sem->count--;
   2688a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2688c:	481b      	ldr	r0, [pc, #108]	; (268fc <z_impl_k_sem_take+0xcc>)
   2688e:	60a3      	str	r3, [r4, #8]
   26890:	f7ff fd02 	bl	26298 <z_spin_unlock_valid>
   26894:	b940      	cbnz	r0, 268a8 <z_impl_k_sem_take+0x78>
   26896:	491a      	ldr	r1, [pc, #104]	; (26900 <z_impl_k_sem_take+0xd0>)
   26898:	4817      	ldr	r0, [pc, #92]	; (268f8 <z_impl_k_sem_take+0xc8>)
   2689a:	22b9      	movs	r2, #185	; 0xb9
   2689c:	f004 ff86 	bl	2b7ac <printk>
   268a0:	21b9      	movs	r1, #185	; 0xb9
   268a2:	4817      	ldr	r0, [pc, #92]	; (26900 <z_impl_k_sem_take+0xd0>)
   268a4:	f005 f919 	bl	2bada <assert_post_action>
	__asm__ volatile(
   268a8:	f387 8811 	msr	BASEPRI, r7
   268ac:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   268b0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   268b2:	b003      	add	sp, #12
   268b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   268b6:	ea56 0305 	orrs.w	r3, r6, r5
   268ba:	d113      	bne.n	268e4 <z_impl_k_sem_take+0xb4>
   268bc:	480f      	ldr	r0, [pc, #60]	; (268fc <z_impl_k_sem_take+0xcc>)
   268be:	f7ff fceb 	bl	26298 <z_spin_unlock_valid>
   268c2:	b940      	cbnz	r0, 268d6 <z_impl_k_sem_take+0xa6>
   268c4:	490e      	ldr	r1, [pc, #56]	; (26900 <z_impl_k_sem_take+0xd0>)
   268c6:	480c      	ldr	r0, [pc, #48]	; (268f8 <z_impl_k_sem_take+0xc8>)
   268c8:	22b9      	movs	r2, #185	; 0xb9
   268ca:	f004 ff6f 	bl	2b7ac <printk>
   268ce:	21b9      	movs	r1, #185	; 0xb9
   268d0:	480b      	ldr	r0, [pc, #44]	; (26900 <z_impl_k_sem_take+0xd0>)
   268d2:	f005 f902 	bl	2bada <assert_post_action>
   268d6:	f387 8811 	msr	BASEPRI, r7
   268da:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   268de:	f06f 000f 	mvn.w	r0, #15
   268e2:	e7e6      	b.n	268b2 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   268e4:	4622      	mov	r2, r4
   268e6:	4639      	mov	r1, r7
   268e8:	e9cd 6500 	strd	r6, r5, [sp]
   268ec:	4803      	ldr	r0, [pc, #12]	; (268fc <z_impl_k_sem_take+0xcc>)
   268ee:	f000 ff2b 	bl	27748 <z_pend_curr>
	return ret;
   268f2:	e7de      	b.n	268b2 <z_impl_k_sem_take+0x82>
   268f4:	00031920 	.word	0x00031920
   268f8:	0002f296 	.word	0x0002f296
   268fc:	2000d478 	.word	0x2000d478
   26900:	0002f2d0 	.word	0x0002f2d0

00026904 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   26904:	b570      	push	{r4, r5, r6, lr}
   26906:	4604      	mov	r4, r0
	__asm__ volatile(
   26908:	f04f 0320 	mov.w	r3, #32
   2690c:	f3ef 8511 	mrs	r5, BASEPRI
   26910:	f383 8812 	msr	BASEPRI_MAX, r3
   26914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26918:	4812      	ldr	r0, [pc, #72]	; (26964 <z_impl_k_sem_reset+0x60>)
   2691a:	f7ff fcaf 	bl	2627c <z_spin_lock_valid>
   2691e:	b940      	cbnz	r0, 26932 <z_impl_k_sem_reset+0x2e>
   26920:	4911      	ldr	r1, [pc, #68]	; (26968 <z_impl_k_sem_reset+0x64>)
   26922:	4812      	ldr	r0, [pc, #72]	; (2696c <z_impl_k_sem_reset+0x68>)
   26924:	228e      	movs	r2, #142	; 0x8e
   26926:	f004 ff41 	bl	2b7ac <printk>
   2692a:	218e      	movs	r1, #142	; 0x8e
   2692c:	480e      	ldr	r0, [pc, #56]	; (26968 <z_impl_k_sem_reset+0x64>)
   2692e:	f005 f8d4 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26932:	480c      	ldr	r0, [pc, #48]	; (26964 <z_impl_k_sem_reset+0x60>)
   26934:	f7ff fcbe 	bl	262b4 <z_spin_lock_set_owner>
   26938:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   2693c:	4620      	mov	r0, r4
   2693e:	f001 f85f 	bl	27a00 <z_unpend_first_thread>
		if (thread == NULL) {
   26942:	b118      	cbz	r0, 2694c <z_impl_k_sem_reset+0x48>
   26944:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   26946:	f000 fd9b 	bl	27480 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   2694a:	e7f7      	b.n	2693c <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   2694c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2694e:	2102      	movs	r1, #2
   26950:	f104 0010 	add.w	r0, r4, #16
   26954:	f007 f8ea 	bl	2db2c <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   26958:	4629      	mov	r1, r5
}
   2695a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2695e:	4801      	ldr	r0, [pc, #4]	; (26964 <z_impl_k_sem_reset+0x60>)
   26960:	f000 bb60 	b.w	27024 <z_reschedule>
   26964:	2000d478 	.word	0x2000d478
   26968:	0002f2d0 	.word	0x0002f2d0
   2696c:	0002f296 	.word	0x0002f296

00026970 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   26970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26974:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26976:	4e70      	ldr	r6, [pc, #448]	; (26b38 <work_queue_main+0x1c8>)
	return list->head;
   26978:	4f70      	ldr	r7, [pc, #448]	; (26b3c <work_queue_main+0x1cc>)
   2697a:	b085      	sub	sp, #20
   2697c:	f04f 0320 	mov.w	r3, #32
   26980:	f3ef 8811 	mrs	r8, BASEPRI
   26984:	f383 8812 	msr	BASEPRI_MAX, r3
   26988:	f3bf 8f6f 	isb	sy
   2698c:	4630      	mov	r0, r6
   2698e:	f7ff fc75 	bl	2627c <z_spin_lock_valid>
   26992:	b940      	cbnz	r0, 269a6 <work_queue_main+0x36>
   26994:	496a      	ldr	r1, [pc, #424]	; (26b40 <work_queue_main+0x1d0>)
   26996:	486b      	ldr	r0, [pc, #428]	; (26b44 <work_queue_main+0x1d4>)
   26998:	228e      	movs	r2, #142	; 0x8e
   2699a:	f004 ff07 	bl	2b7ac <printk>
   2699e:	218e      	movs	r1, #142	; 0x8e
   269a0:	4867      	ldr	r0, [pc, #412]	; (26b40 <work_queue_main+0x1d0>)
   269a2:	f005 f89a 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   269a6:	4630      	mov	r0, r6
   269a8:	f7ff fc84 	bl	262b4 <z_spin_lock_set_owner>
   269ac:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   269b0:	b9b5      	cbnz	r5, 269e0 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   269b2:	2102      	movs	r1, #2
   269b4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   269b8:	f006 ffb1 	bl	2d91e <flag_test_and_clear>
   269bc:	2800      	cmp	r0, #0
   269be:	f040 8084 	bne.w	26aca <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   269c2:	2300      	movs	r3, #0
   269c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   269c8:	9302      	str	r3, [sp, #8]
   269ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   269ce:	4641      	mov	r1, r8
   269d0:	e9cd 2300 	strd	r2, r3, [sp]
   269d4:	4630      	mov	r0, r6
   269d6:	f104 0288 	add.w	r2, r4, #136	; 0x88
   269da:	f001 fa89 	bl	27ef0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   269de:	e7cd      	b.n	2697c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   269e0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   269e4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   269e6:	4295      	cmp	r5, r2
	list->head = node;
   269e8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   269ec:	d101      	bne.n	269f2 <work_queue_main+0x82>
	list->tail = node;
   269ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   269f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269f6:	4630      	mov	r0, r6
   269f8:	f043 0302 	orr.w	r3, r3, #2
   269fc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   26a00:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   26a02:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   26a06:	f023 0304 	bic.w	r3, r3, #4
   26a0a:	f043 0301 	orr.w	r3, r3, #1
   26a0e:	60eb      	str	r3, [r5, #12]
   26a10:	f7ff fc42 	bl	26298 <z_spin_unlock_valid>
   26a14:	b940      	cbnz	r0, 26a28 <work_queue_main+0xb8>
   26a16:	494a      	ldr	r1, [pc, #296]	; (26b40 <work_queue_main+0x1d0>)
   26a18:	484a      	ldr	r0, [pc, #296]	; (26b44 <work_queue_main+0x1d4>)
   26a1a:	22b9      	movs	r2, #185	; 0xb9
   26a1c:	f004 fec6 	bl	2b7ac <printk>
   26a20:	21b9      	movs	r1, #185	; 0xb9
   26a22:	4847      	ldr	r0, [pc, #284]	; (26b40 <work_queue_main+0x1d0>)
   26a24:	f005 f859 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26a28:	f388 8811 	msr	BASEPRI, r8
   26a2c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   26a30:	f1b9 0f00 	cmp.w	r9, #0
   26a34:	d10a      	bne.n	26a4c <work_queue_main+0xdc>
   26a36:	4944      	ldr	r1, [pc, #272]	; (26b48 <work_queue_main+0x1d8>)
   26a38:	4842      	ldr	r0, [pc, #264]	; (26b44 <work_queue_main+0x1d4>)
   26a3a:	f44f 7222 	mov.w	r2, #648	; 0x288
   26a3e:	f004 feb5 	bl	2b7ac <printk>
   26a42:	f44f 7122 	mov.w	r1, #648	; 0x288
   26a46:	4840      	ldr	r0, [pc, #256]	; (26b48 <work_queue_main+0x1d8>)
   26a48:	f005 f847 	bl	2bada <assert_post_action>
		handler(work);
   26a4c:	4628      	mov	r0, r5
   26a4e:	47c8      	blx	r9
	__asm__ volatile(
   26a50:	f04f 0320 	mov.w	r3, #32
   26a54:	f3ef 8a11 	mrs	sl, BASEPRI
   26a58:	f383 8812 	msr	BASEPRI_MAX, r3
   26a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a60:	4630      	mov	r0, r6
   26a62:	f7ff fc0b 	bl	2627c <z_spin_lock_valid>
   26a66:	b940      	cbnz	r0, 26a7a <work_queue_main+0x10a>
   26a68:	4935      	ldr	r1, [pc, #212]	; (26b40 <work_queue_main+0x1d0>)
   26a6a:	4836      	ldr	r0, [pc, #216]	; (26b44 <work_queue_main+0x1d4>)
   26a6c:	228e      	movs	r2, #142	; 0x8e
   26a6e:	f004 fe9d 	bl	2b7ac <printk>
   26a72:	218e      	movs	r1, #142	; 0x8e
   26a74:	4832      	ldr	r0, [pc, #200]	; (26b40 <work_queue_main+0x1d0>)
   26a76:	f005 f830 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26a7a:	4630      	mov	r0, r6
   26a7c:	f7ff fc1a 	bl	262b4 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   26a80:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26a82:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   26a84:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26a88:	d429      	bmi.n	26ade <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   26a8a:	60ea      	str	r2, [r5, #12]
   26a8c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a90:	4630      	mov	r0, r6
   26a92:	f023 0302 	bic.w	r3, r3, #2
   26a96:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   26a9a:	f3c3 2500 	ubfx	r5, r3, #8, #1
   26a9e:	f7ff fbfb 	bl	26298 <z_spin_unlock_valid>
   26aa2:	b940      	cbnz	r0, 26ab6 <work_queue_main+0x146>
   26aa4:	4926      	ldr	r1, [pc, #152]	; (26b40 <work_queue_main+0x1d0>)
   26aa6:	4827      	ldr	r0, [pc, #156]	; (26b44 <work_queue_main+0x1d4>)
   26aa8:	22b9      	movs	r2, #185	; 0xb9
   26aaa:	f004 fe7f 	bl	2b7ac <printk>
   26aae:	21b9      	movs	r1, #185	; 0xb9
   26ab0:	4823      	ldr	r0, [pc, #140]	; (26b40 <work_queue_main+0x1d0>)
   26ab2:	f005 f812 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26ab6:	f38a 8811 	msr	BASEPRI, sl
   26aba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   26abe:	2d00      	cmp	r5, #0
   26ac0:	f47f af5c 	bne.w	2697c <work_queue_main+0xc>
	z_impl_k_yield();
   26ac4:	f000 ffe6 	bl	27a94 <z_impl_k_yield>
}
   26ac8:	e758      	b.n	2697c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26aca:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   26ace:	2200      	movs	r2, #0
   26ad0:	2101      	movs	r1, #1
   26ad2:	4628      	mov	r0, r5
   26ad4:	f001 f9c6 	bl	27e64 <z_sched_wake>
   26ad8:	2800      	cmp	r0, #0
   26ada:	d1f8      	bne.n	26ace <work_queue_main+0x15e>
   26adc:	e771      	b.n	269c2 <work_queue_main+0x52>
	return list->head;
   26ade:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   26ae0:	f023 0303 	bic.w	r3, r3, #3
   26ae4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26ae6:	2800      	cmp	r0, #0
   26ae8:	d0d0      	beq.n	26a8c <work_queue_main+0x11c>
	return node->next;
   26aea:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   26aee:	46c3      	mov	fp, r8
	return node->next;
   26af0:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   26af4:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   26af6:	4602      	mov	r2, r0
		if (wc->work == work) {
   26af8:	429d      	cmp	r5, r3
   26afa:	d10d      	bne.n	26b18 <work_queue_main+0x1a8>
   26afc:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26afe:	f1b8 0f00 	cmp.w	r8, #0
   26b02:	d111      	bne.n	26b28 <work_queue_main+0x1b8>
   26b04:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   26b06:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   26b08:	4283      	cmp	r3, r0
   26b0a:	d100      	bne.n	26b0e <work_queue_main+0x19e>
	list->tail = node;
   26b0c:	607a      	str	r2, [r7, #4]
	parent->next = child;
   26b0e:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   26b12:	f7ff fe53 	bl	267bc <z_impl_k_sem_give>
}
   26b16:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26b18:	f1b9 0f00 	cmp.w	r9, #0
   26b1c:	d0b6      	beq.n	26a8c <work_queue_main+0x11c>
	return node->next;
   26b1e:	4648      	mov	r0, r9
   26b20:	4690      	mov	r8, r2
   26b22:	f8d9 9000 	ldr.w	r9, [r9]
   26b26:	e7e5      	b.n	26af4 <work_queue_main+0x184>
	return list->tail;
   26b28:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   26b2a:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   26b2e:	4298      	cmp	r0, r3
	list->tail = node;
   26b30:	bf08      	it	eq
   26b32:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   26b36:	e7ea      	b.n	26b0e <work_queue_main+0x19e>
   26b38:	2000d47c 	.word	0x2000d47c
   26b3c:	2000d480 	.word	0x2000d480
   26b40:	0002f2d0 	.word	0x0002f2d0
   26b44:	0002f296 	.word	0x0002f296
   26b48:	00031940 	.word	0x00031940

00026b4c <submit_to_queue_locked>:
{
   26b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   26b4e:	68c3      	ldr	r3, [r0, #12]
{
   26b50:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26b52:	079a      	lsls	r2, r3, #30
{
   26b54:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26b56:	f3c3 0540 	ubfx	r5, r3, #1, #1
   26b5a:	d42a      	bmi.n	26bb2 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   26b5c:	075f      	lsls	r7, r3, #29
   26b5e:	d42a      	bmi.n	26bb6 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   26b60:	680a      	ldr	r2, [r1, #0]
   26b62:	b90a      	cbnz	r2, 26b68 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   26b64:	6882      	ldr	r2, [r0, #8]
   26b66:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   26b68:	07d8      	lsls	r0, r3, #31
   26b6a:	d527      	bpl.n	26bbc <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   26b6c:	68a3      	ldr	r3, [r4, #8]
   26b6e:	b953      	cbnz	r3, 26b86 <submit_to_queue_locked+0x3a>
   26b70:	4923      	ldr	r1, [pc, #140]	; (26c00 <submit_to_queue_locked+0xb4>)
   26b72:	4824      	ldr	r0, [pc, #144]	; (26c04 <submit_to_queue_locked+0xb8>)
   26b74:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   26b78:	f004 fe18 	bl	2b7ac <printk>
   26b7c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   26b80:	481f      	ldr	r0, [pc, #124]	; (26c00 <submit_to_queue_locked+0xb4>)
   26b82:	f004 ffaa 	bl	2bada <assert_post_action>
			ret = 2;
   26b86:	2502      	movs	r5, #2
			*queuep = work->queue;
   26b88:	68a3      	ldr	r3, [r4, #8]
   26b8a:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   26b8c:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   26b8e:	b38f      	cbz	r7, 26bf4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26b90:	4b1d      	ldr	r3, [pc, #116]	; (26c08 <submit_to_queue_locked+0xbc>)
   26b92:	689b      	ldr	r3, [r3, #8]
   26b94:	42bb      	cmp	r3, r7
   26b96:	d113      	bne.n	26bc0 <submit_to_queue_locked+0x74>
   26b98:	f006 fe77 	bl	2d88a <k_is_in_isr>
   26b9c:	f080 0001 	eor.w	r0, r0, #1
   26ba0:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   26ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26ba6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   26ba8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26bac:	d525      	bpl.n	26bfa <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   26bae:	b14a      	cbz	r2, 26bc4 <submit_to_queue_locked+0x78>
   26bb0:	b950      	cbnz	r0, 26bc8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   26bb2:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   26bb6:	2300      	movs	r3, #0
   26bb8:	6033      	str	r3, [r6, #0]
	return ret;
   26bba:	e015      	b.n	26be8 <submit_to_queue_locked+0x9c>
		ret = 1;
   26bbc:	2501      	movs	r5, #1
   26bbe:	e7e5      	b.n	26b8c <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26bc0:	2000      	movs	r0, #0
   26bc2:	e7ee      	b.n	26ba2 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   26bc4:	071b      	lsls	r3, r3, #28
   26bc6:	d4f4      	bmi.n	26bb2 <submit_to_queue_locked+0x66>
	parent->next = child;
   26bc8:	2300      	movs	r3, #0
   26bca:	6023      	str	r3, [r4, #0]
	return list->tail;
   26bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   26bd0:	b963      	cbnz	r3, 26bec <submit_to_queue_locked+0xa0>
	list->head = node;
   26bd2:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   26bd6:	4638      	mov	r0, r7
   26bd8:	f006 feac 	bl	2d934 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   26bdc:	68e3      	ldr	r3, [r4, #12]
   26bde:	f043 0304 	orr.w	r3, r3, #4
   26be2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   26be4:	6833      	ldr	r3, [r6, #0]
   26be6:	60a3      	str	r3, [r4, #8]
}
   26be8:	4628      	mov	r0, r5
   26bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   26bec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26bee:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   26bf2:	e7f0      	b.n	26bd6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   26bf4:	f06f 0515 	mvn.w	r5, #21
   26bf8:	e7dd      	b.n	26bb6 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   26bfa:	f06f 0512 	mvn.w	r5, #18
   26bfe:	e7da      	b.n	26bb6 <submit_to_queue_locked+0x6a>
   26c00:	00031940 	.word	0x00031940
   26c04:	0002f296 	.word	0x0002f296
   26c08:	2000d44c 	.word	0x2000d44c

00026c0c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   26c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26c0e:	4604      	mov	r4, r0
	__asm__ volatile(
   26c10:	f04f 0320 	mov.w	r3, #32
   26c14:	f3ef 8511 	mrs	r5, BASEPRI
   26c18:	f383 8812 	msr	BASEPRI_MAX, r3
   26c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c20:	4818      	ldr	r0, [pc, #96]	; (26c84 <work_timeout+0x78>)
   26c22:	f7ff fb2b 	bl	2627c <z_spin_lock_valid>
   26c26:	b940      	cbnz	r0, 26c3a <work_timeout+0x2e>
   26c28:	4917      	ldr	r1, [pc, #92]	; (26c88 <work_timeout+0x7c>)
   26c2a:	4818      	ldr	r0, [pc, #96]	; (26c8c <work_timeout+0x80>)
   26c2c:	228e      	movs	r2, #142	; 0x8e
   26c2e:	f004 fdbd 	bl	2b7ac <printk>
   26c32:	218e      	movs	r1, #142	; 0x8e
   26c34:	4814      	ldr	r0, [pc, #80]	; (26c88 <work_timeout+0x7c>)
   26c36:	f004 ff50 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26c3a:	4812      	ldr	r0, [pc, #72]	; (26c84 <work_timeout+0x78>)
   26c3c:	f7ff fb3a 	bl	262b4 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   26c40:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26c42:	2103      	movs	r1, #3
   26c44:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   26c46:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26c48:	f1a4 0610 	sub.w	r6, r4, #16
   26c4c:	f006 fe67 	bl	2d91e <flag_test_and_clear>
   26c50:	b128      	cbz	r0, 26c5e <work_timeout+0x52>
		queue = dw->queue;
   26c52:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   26c54:	4630      	mov	r0, r6
   26c56:	a901      	add	r1, sp, #4
		queue = dw->queue;
   26c58:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   26c5a:	f7ff ff77 	bl	26b4c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c5e:	4809      	ldr	r0, [pc, #36]	; (26c84 <work_timeout+0x78>)
   26c60:	f7ff fb1a 	bl	26298 <z_spin_unlock_valid>
   26c64:	b940      	cbnz	r0, 26c78 <work_timeout+0x6c>
   26c66:	4908      	ldr	r1, [pc, #32]	; (26c88 <work_timeout+0x7c>)
   26c68:	4808      	ldr	r0, [pc, #32]	; (26c8c <work_timeout+0x80>)
   26c6a:	22b9      	movs	r2, #185	; 0xb9
   26c6c:	f004 fd9e 	bl	2b7ac <printk>
   26c70:	21b9      	movs	r1, #185	; 0xb9
   26c72:	4805      	ldr	r0, [pc, #20]	; (26c88 <work_timeout+0x7c>)
   26c74:	f004 ff31 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26c78:	f385 8811 	msr	BASEPRI, r5
   26c7c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   26c80:	b002      	add	sp, #8
   26c82:	bd70      	pop	{r4, r5, r6, pc}
   26c84:	2000d47c 	.word	0x2000d47c
   26c88:	0002f2d0 	.word	0x0002f2d0
   26c8c:	0002f296 	.word	0x0002f296

00026c90 <k_work_busy_get>:
{
   26c90:	b538      	push	{r3, r4, r5, lr}
   26c92:	4604      	mov	r4, r0
	__asm__ volatile(
   26c94:	f04f 0320 	mov.w	r3, #32
   26c98:	f3ef 8511 	mrs	r5, BASEPRI
   26c9c:	f383 8812 	msr	BASEPRI_MAX, r3
   26ca0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ca4:	4812      	ldr	r0, [pc, #72]	; (26cf0 <k_work_busy_get+0x60>)
   26ca6:	f7ff fae9 	bl	2627c <z_spin_lock_valid>
   26caa:	b940      	cbnz	r0, 26cbe <k_work_busy_get+0x2e>
   26cac:	4911      	ldr	r1, [pc, #68]	; (26cf4 <k_work_busy_get+0x64>)
   26cae:	4812      	ldr	r0, [pc, #72]	; (26cf8 <k_work_busy_get+0x68>)
   26cb0:	228e      	movs	r2, #142	; 0x8e
   26cb2:	f004 fd7b 	bl	2b7ac <printk>
   26cb6:	218e      	movs	r1, #142	; 0x8e
   26cb8:	480e      	ldr	r0, [pc, #56]	; (26cf4 <k_work_busy_get+0x64>)
   26cba:	f004 ff0e 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26cbe:	480c      	ldr	r0, [pc, #48]	; (26cf0 <k_work_busy_get+0x60>)
   26cc0:	f7ff faf8 	bl	262b4 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   26cc4:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cc6:	480a      	ldr	r0, [pc, #40]	; (26cf0 <k_work_busy_get+0x60>)
   26cc8:	f004 040f 	and.w	r4, r4, #15
   26ccc:	f7ff fae4 	bl	26298 <z_spin_unlock_valid>
   26cd0:	b940      	cbnz	r0, 26ce4 <k_work_busy_get+0x54>
   26cd2:	4908      	ldr	r1, [pc, #32]	; (26cf4 <k_work_busy_get+0x64>)
   26cd4:	4808      	ldr	r0, [pc, #32]	; (26cf8 <k_work_busy_get+0x68>)
   26cd6:	22b9      	movs	r2, #185	; 0xb9
   26cd8:	f004 fd68 	bl	2b7ac <printk>
   26cdc:	21b9      	movs	r1, #185	; 0xb9
   26cde:	4805      	ldr	r0, [pc, #20]	; (26cf4 <k_work_busy_get+0x64>)
   26ce0:	f004 fefb 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26ce4:	f385 8811 	msr	BASEPRI, r5
   26ce8:	f3bf 8f6f 	isb	sy
}
   26cec:	4620      	mov	r0, r4
   26cee:	bd38      	pop	{r3, r4, r5, pc}
   26cf0:	2000d47c 	.word	0x2000d47c
   26cf4:	0002f2d0 	.word	0x0002f2d0
   26cf8:	0002f296 	.word	0x0002f296

00026cfc <k_work_submit_to_queue>:
{
   26cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   26cfe:	460c      	mov	r4, r1
{
   26d00:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   26d02:	b951      	cbnz	r1, 26d1a <k_work_submit_to_queue+0x1e>
   26d04:	4921      	ldr	r1, [pc, #132]	; (26d8c <k_work_submit_to_queue+0x90>)
   26d06:	4822      	ldr	r0, [pc, #136]	; (26d90 <k_work_submit_to_queue+0x94>)
   26d08:	f240 1269 	movw	r2, #361	; 0x169
   26d0c:	f004 fd4e 	bl	2b7ac <printk>
   26d10:	f240 1169 	movw	r1, #361	; 0x169
   26d14:	481d      	ldr	r0, [pc, #116]	; (26d8c <k_work_submit_to_queue+0x90>)
   26d16:	f004 fee0 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26d1a:	f04f 0320 	mov.w	r3, #32
   26d1e:	f3ef 8511 	mrs	r5, BASEPRI
   26d22:	f383 8812 	msr	BASEPRI_MAX, r3
   26d26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d2a:	481a      	ldr	r0, [pc, #104]	; (26d94 <k_work_submit_to_queue+0x98>)
   26d2c:	f7ff faa6 	bl	2627c <z_spin_lock_valid>
   26d30:	b940      	cbnz	r0, 26d44 <k_work_submit_to_queue+0x48>
   26d32:	4919      	ldr	r1, [pc, #100]	; (26d98 <k_work_submit_to_queue+0x9c>)
   26d34:	4816      	ldr	r0, [pc, #88]	; (26d90 <k_work_submit_to_queue+0x94>)
   26d36:	228e      	movs	r2, #142	; 0x8e
   26d38:	f004 fd38 	bl	2b7ac <printk>
   26d3c:	218e      	movs	r1, #142	; 0x8e
   26d3e:	4816      	ldr	r0, [pc, #88]	; (26d98 <k_work_submit_to_queue+0x9c>)
   26d40:	f004 fecb 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26d44:	4813      	ldr	r0, [pc, #76]	; (26d94 <k_work_submit_to_queue+0x98>)
   26d46:	f7ff fab5 	bl	262b4 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   26d4a:	4620      	mov	r0, r4
   26d4c:	a901      	add	r1, sp, #4
   26d4e:	f7ff fefd 	bl	26b4c <submit_to_queue_locked>
   26d52:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d54:	480f      	ldr	r0, [pc, #60]	; (26d94 <k_work_submit_to_queue+0x98>)
   26d56:	f7ff fa9f 	bl	26298 <z_spin_unlock_valid>
   26d5a:	b940      	cbnz	r0, 26d6e <k_work_submit_to_queue+0x72>
   26d5c:	490e      	ldr	r1, [pc, #56]	; (26d98 <k_work_submit_to_queue+0x9c>)
   26d5e:	480c      	ldr	r0, [pc, #48]	; (26d90 <k_work_submit_to_queue+0x94>)
   26d60:	22b9      	movs	r2, #185	; 0xb9
   26d62:	f004 fd23 	bl	2b7ac <printk>
   26d66:	21b9      	movs	r1, #185	; 0xb9
   26d68:	480b      	ldr	r0, [pc, #44]	; (26d98 <k_work_submit_to_queue+0x9c>)
   26d6a:	f004 feb6 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26d6e:	f385 8811 	msr	BASEPRI, r5
   26d72:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   26d76:	2c00      	cmp	r4, #0
   26d78:	dd04      	ble.n	26d84 <k_work_submit_to_queue+0x88>
	return z_impl_k_is_preempt_thread();
   26d7a:	f000 ffcf 	bl	27d1c <z_impl_k_is_preempt_thread>
   26d7e:	b108      	cbz	r0, 26d84 <k_work_submit_to_queue+0x88>
	z_impl_k_yield();
   26d80:	f000 fe88 	bl	27a94 <z_impl_k_yield>
}
   26d84:	4620      	mov	r0, r4
   26d86:	b003      	add	sp, #12
   26d88:	bd30      	pop	{r4, r5, pc}
   26d8a:	bf00      	nop
   26d8c:	00031940 	.word	0x00031940
   26d90:	0002f296 	.word	0x0002f296
   26d94:	2000d47c 	.word	0x2000d47c
   26d98:	0002f2d0 	.word	0x0002f2d0

00026d9c <k_work_submit>:
{
   26d9c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26d9e:	4801      	ldr	r0, [pc, #4]	; (26da4 <k_work_submit+0x8>)
   26da0:	f7ff bfac 	b.w	26cfc <k_work_submit_to_queue>
   26da4:	2000cd10 	.word	0x2000cd10

00026da8 <k_work_queue_start>:
{
   26da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26dac:	b088      	sub	sp, #32
   26dae:	460e      	mov	r6, r1
   26db0:	4617      	mov	r7, r2
   26db2:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   26db4:	4604      	mov	r4, r0
{
   26db6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   26db8:	b950      	cbnz	r0, 26dd0 <k_work_queue_start+0x28>
   26dba:	492d      	ldr	r1, [pc, #180]	; (26e70 <k_work_queue_start+0xc8>)
   26dbc:	482d      	ldr	r0, [pc, #180]	; (26e74 <k_work_queue_start+0xcc>)
   26dbe:	f240 22b5 	movw	r2, #693	; 0x2b5
   26dc2:	f004 fcf3 	bl	2b7ac <printk>
   26dc6:	f240 21b5 	movw	r1, #693	; 0x2b5
   26dca:	4829      	ldr	r0, [pc, #164]	; (26e70 <k_work_queue_start+0xc8>)
   26dcc:	f004 fe85 	bl	2bada <assert_post_action>
	__ASSERT_NO_MSG(stack);
   26dd0:	b956      	cbnz	r6, 26de8 <k_work_queue_start+0x40>
   26dd2:	4927      	ldr	r1, [pc, #156]	; (26e70 <k_work_queue_start+0xc8>)
   26dd4:	4827      	ldr	r0, [pc, #156]	; (26e74 <k_work_queue_start+0xcc>)
   26dd6:	f240 22b6 	movw	r2, #694	; 0x2b6
   26dda:	f004 fce7 	bl	2b7ac <printk>
   26dde:	f240 21b6 	movw	r1, #694	; 0x2b6
   26de2:	4823      	ldr	r0, [pc, #140]	; (26e70 <k_work_queue_start+0xc8>)
   26de4:	f004 fe79 	bl	2bada <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   26de8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   26dec:	07db      	lsls	r3, r3, #31
   26dee:	d50a      	bpl.n	26e06 <k_work_queue_start+0x5e>
   26df0:	491f      	ldr	r1, [pc, #124]	; (26e70 <k_work_queue_start+0xc8>)
   26df2:	4820      	ldr	r0, [pc, #128]	; (26e74 <k_work_queue_start+0xcc>)
   26df4:	f240 22b7 	movw	r2, #695	; 0x2b7
   26df8:	f004 fcd8 	bl	2b7ac <printk>
   26dfc:	f240 21b7 	movw	r1, #695	; 0x2b7
   26e00:	481b      	ldr	r0, [pc, #108]	; (26e70 <k_work_queue_start+0xc8>)
   26e02:	f004 fe6a 	bl	2bada <assert_post_action>
	list->head = NULL;
   26e06:	2300      	movs	r3, #0
	list->tail = NULL;
   26e08:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   26e0c:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   26e10:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   26e14:	f104 0390 	add.w	r3, r4, #144	; 0x90
   26e18:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   26e1c:	b32d      	cbz	r5, 26e6a <k_work_queue_start+0xc2>
   26e1e:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26e20:	f240 1101 	movw	r1, #257	; 0x101
   26e24:	2b00      	cmp	r3, #0
   26e26:	bf08      	it	eq
   26e28:	2101      	moveq	r1, #1
	*flagp = flags;
   26e2a:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
   26e3a:	2200      	movs	r2, #0
   26e3c:	4631      	mov	r1, r6
   26e3e:	e9cd 8203 	strd	r8, r2, [sp, #12]
   26e42:	e9cd 2201 	strd	r2, r2, [sp, #4]
   26e46:	4620      	mov	r0, r4
   26e48:	463a      	mov	r2, r7
   26e4a:	4b0b      	ldr	r3, [pc, #44]	; (26e78 <k_work_queue_start+0xd0>)
   26e4c:	9400      	str	r4, [sp, #0]
   26e4e:	f7ff f951 	bl	260f4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   26e52:	b125      	cbz	r5, 26e5e <k_work_queue_start+0xb6>
   26e54:	6829      	ldr	r1, [r5, #0]
   26e56:	b111      	cbz	r1, 26e5e <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   26e58:	4620      	mov	r0, r4
   26e5a:	f006 fd1c 	bl	2d896 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26e5e:	4620      	mov	r0, r4
}
   26e60:	b008      	add	sp, #32
   26e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26e66:	f006 bd1b 	b.w	2d8a0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26e6a:	2101      	movs	r1, #1
   26e6c:	e7dd      	b.n	26e2a <k_work_queue_start+0x82>
   26e6e:	bf00      	nop
   26e70:	00031940 	.word	0x00031940
   26e74:	0002f296 	.word	0x0002f296
   26e78:	00026971 	.word	0x00026971

00026e7c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   26e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26e7e:	4616      	mov	r6, r2
   26e80:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   26e82:	460c      	mov	r4, r1
{
   26e84:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   26e86:	b951      	cbnz	r1, 26e9e <k_work_schedule_for_queue+0x22>
   26e88:	4929      	ldr	r1, [pc, #164]	; (26f30 <k_work_schedule_for_queue+0xb4>)
   26e8a:	482a      	ldr	r0, [pc, #168]	; (26f34 <k_work_schedule_for_queue+0xb8>)
   26e8c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   26e90:	f004 fc8c 	bl	2b7ac <printk>
   26e94:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   26e98:	4825      	ldr	r0, [pc, #148]	; (26f30 <k_work_schedule_for_queue+0xb4>)
   26e9a:	f004 fe1e 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26e9e:	f04f 0320 	mov.w	r3, #32
   26ea2:	f3ef 8711 	mrs	r7, BASEPRI
   26ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   26eaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26eae:	4822      	ldr	r0, [pc, #136]	; (26f38 <k_work_schedule_for_queue+0xbc>)
   26eb0:	f7ff f9e4 	bl	2627c <z_spin_lock_valid>
   26eb4:	b940      	cbnz	r0, 26ec8 <k_work_schedule_for_queue+0x4c>
   26eb6:	4921      	ldr	r1, [pc, #132]	; (26f3c <k_work_schedule_for_queue+0xc0>)
   26eb8:	481e      	ldr	r0, [pc, #120]	; (26f34 <k_work_schedule_for_queue+0xb8>)
   26eba:	228e      	movs	r2, #142	; 0x8e
   26ebc:	f004 fc76 	bl	2b7ac <printk>
   26ec0:	218e      	movs	r1, #142	; 0x8e
   26ec2:	481e      	ldr	r0, [pc, #120]	; (26f3c <k_work_schedule_for_queue+0xc0>)
   26ec4:	f004 fe09 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26ec8:	481b      	ldr	r0, [pc, #108]	; (26f38 <k_work_schedule_for_queue+0xbc>)
   26eca:	f7ff f9f3 	bl	262b4 <z_spin_lock_set_owner>
	return *flagp;
   26ece:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26ed0:	f013 0f0e 	tst.w	r3, #14
   26ed4:	d129      	bne.n	26f2a <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26ed6:	ea55 0206 	orrs.w	r2, r5, r6
   26eda:	d118      	bne.n	26f0e <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   26edc:	4620      	mov	r0, r4
   26ede:	a901      	add	r1, sp, #4
   26ee0:	f7ff fe34 	bl	26b4c <submit_to_queue_locked>
   26ee4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ee6:	4814      	ldr	r0, [pc, #80]	; (26f38 <k_work_schedule_for_queue+0xbc>)
   26ee8:	f7ff f9d6 	bl	26298 <z_spin_unlock_valid>
   26eec:	b940      	cbnz	r0, 26f00 <k_work_schedule_for_queue+0x84>
   26eee:	4913      	ldr	r1, [pc, #76]	; (26f3c <k_work_schedule_for_queue+0xc0>)
   26ef0:	4810      	ldr	r0, [pc, #64]	; (26f34 <k_work_schedule_for_queue+0xb8>)
   26ef2:	22b9      	movs	r2, #185	; 0xb9
   26ef4:	f004 fc5a 	bl	2b7ac <printk>
   26ef8:	21b9      	movs	r1, #185	; 0xb9
   26efa:	4810      	ldr	r0, [pc, #64]	; (26f3c <k_work_schedule_for_queue+0xc0>)
   26efc:	f004 fded 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26f00:	f387 8811 	msr	BASEPRI, r7
   26f04:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26f08:	4620      	mov	r0, r4
   26f0a:	b003      	add	sp, #12
   26f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   26f0e:	f043 0308 	orr.w	r3, r3, #8
   26f12:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26f14:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26f16:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   26f1a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26f1c:	4632      	mov	r2, r6
   26f1e:	462b      	mov	r3, r5
   26f20:	4907      	ldr	r1, [pc, #28]	; (26f40 <k_work_schedule_for_queue+0xc4>)
   26f22:	f001 f85b 	bl	27fdc <z_add_timeout>
	return ret;
   26f26:	2401      	movs	r4, #1
   26f28:	e7dd      	b.n	26ee6 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   26f2a:	2400      	movs	r4, #0
   26f2c:	e7db      	b.n	26ee6 <k_work_schedule_for_queue+0x6a>
   26f2e:	bf00      	nop
   26f30:	00031940 	.word	0x00031940
   26f34:	0002f296 	.word	0x0002f296
   26f38:	2000d47c 	.word	0x2000d47c
   26f3c:	0002f2d0 	.word	0x0002f2d0
   26f40:	00026c0d 	.word	0x00026c0d

00026f44 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26f44:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26f46:	4801      	ldr	r0, [pc, #4]	; (26f4c <k_work_schedule+0x8>)
   26f48:	f7ff bf98 	b.w	26e7c <k_work_schedule_for_queue>
   26f4c:	2000cd10 	.word	0x2000cd10

00026f50 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   26f50:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   26f52:	4c08      	ldr	r4, [pc, #32]	; (26f74 <z_reset_time_slice+0x24>)
   26f54:	6823      	ldr	r3, [r4, #0]
   26f56:	b15b      	cbz	r3, 26f70 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26f58:	f7f7 fbc0 	bl	1e6dc <sys_clock_elapsed>
   26f5c:	4603      	mov	r3, r0
   26f5e:	6820      	ldr	r0, [r4, #0]
   26f60:	4a05      	ldr	r2, [pc, #20]	; (26f78 <z_reset_time_slice+0x28>)
   26f62:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   26f64:	2100      	movs	r1, #0
	}
}
   26f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26f6a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   26f6c:	f001 b956 	b.w	2821c <z_set_timeout_expiry>
}
   26f70:	bd10      	pop	{r4, pc}
   26f72:	bf00      	nop
   26f74:	2000d494 	.word	0x2000d494
   26f78:	2000d44c 	.word	0x2000d44c

00026f7c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   26f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f7e:	4604      	mov	r4, r0
   26f80:	460d      	mov	r5, r1
	__asm__ volatile(
   26f82:	f04f 0320 	mov.w	r3, #32
   26f86:	f3ef 8611 	mrs	r6, BASEPRI
   26f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   26f8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f92:	481e      	ldr	r0, [pc, #120]	; (2700c <k_sched_time_slice_set+0x90>)
   26f94:	f7ff f972 	bl	2627c <z_spin_lock_valid>
   26f98:	b940      	cbnz	r0, 26fac <k_sched_time_slice_set+0x30>
   26f9a:	491d      	ldr	r1, [pc, #116]	; (27010 <k_sched_time_slice_set+0x94>)
   26f9c:	481d      	ldr	r0, [pc, #116]	; (27014 <k_sched_time_slice_set+0x98>)
   26f9e:	228e      	movs	r2, #142	; 0x8e
   26fa0:	f004 fc04 	bl	2b7ac <printk>
   26fa4:	218e      	movs	r1, #142	; 0x8e
   26fa6:	481a      	ldr	r0, [pc, #104]	; (27010 <k_sched_time_slice_set+0x94>)
   26fa8:	f004 fd97 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   26fac:	4817      	ldr	r0, [pc, #92]	; (2700c <k_sched_time_slice_set+0x90>)
   26fae:	f7ff f981 	bl	262b4 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26fb2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   26fb6:	2100      	movs	r1, #0
   26fb8:	f240 30e7 	movw	r0, #999	; 0x3e7
   26fbc:	4b16      	ldr	r3, [pc, #88]	; (27018 <k_sched_time_slice_set+0x9c>)
   26fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26fc2:	6119      	str	r1, [r3, #16]
   26fc4:	2300      	movs	r3, #0
   26fc6:	fbe4 0107 	umlal	r0, r1, r4, r7
   26fca:	f7f2 f869 	bl	190a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26fce:	2c00      	cmp	r4, #0
   26fd0:	4b12      	ldr	r3, [pc, #72]	; (2701c <k_sched_time_slice_set+0xa0>)
   26fd2:	dc16      	bgt.n	27002 <k_sched_time_slice_set+0x86>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   26fd4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   26fd6:	4b12      	ldr	r3, [pc, #72]	; (27020 <k_sched_time_slice_set+0xa4>)
   26fd8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   26fda:	f7ff ffb9 	bl	26f50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26fde:	480b      	ldr	r0, [pc, #44]	; (2700c <k_sched_time_slice_set+0x90>)
   26fe0:	f7ff f95a 	bl	26298 <z_spin_unlock_valid>
   26fe4:	b940      	cbnz	r0, 26ff8 <k_sched_time_slice_set+0x7c>
   26fe6:	490a      	ldr	r1, [pc, #40]	; (27010 <k_sched_time_slice_set+0x94>)
   26fe8:	480a      	ldr	r0, [pc, #40]	; (27014 <k_sched_time_slice_set+0x98>)
   26fea:	22b9      	movs	r2, #185	; 0xb9
   26fec:	f004 fbde 	bl	2b7ac <printk>
   26ff0:	21b9      	movs	r1, #185	; 0xb9
   26ff2:	4807      	ldr	r0, [pc, #28]	; (27010 <k_sched_time_slice_set+0x94>)
   26ff4:	f004 fd71 	bl	2bada <assert_post_action>
	__asm__ volatile(
   26ff8:	f386 8811 	msr	BASEPRI, r6
   26ffc:	f3bf 8f6f 	isb	sy
	}
}
   27000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   27002:	2802      	cmp	r0, #2
   27004:	bfb8      	it	lt
   27006:	2002      	movlt	r0, #2
   27008:	e7e4      	b.n	26fd4 <k_sched_time_slice_set+0x58>
   2700a:	bf00      	nop
   2700c:	2000d48c 	.word	0x2000d48c
   27010:	0002f2d0 	.word	0x0002f2d0
   27014:	0002f296 	.word	0x0002f296
   27018:	2000d44c 	.word	0x2000d44c
   2701c:	2000d494 	.word	0x2000d494
   27020:	2000d490 	.word	0x2000d490

00027024 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   27024:	b510      	push	{r4, lr}
   27026:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27028:	460c      	mov	r4, r1
   2702a:	b9c1      	cbnz	r1, 2705e <z_reschedule+0x3a>
   2702c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   27030:	b9aa      	cbnz	r2, 2705e <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   27032:	4a14      	ldr	r2, [pc, #80]	; (27084 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   27034:	69d1      	ldr	r1, [r2, #28]
   27036:	6892      	ldr	r2, [r2, #8]
   27038:	4291      	cmp	r1, r2
   2703a:	d010      	beq.n	2705e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2703c:	f7ff f92c 	bl	26298 <z_spin_unlock_valid>
   27040:	b940      	cbnz	r0, 27054 <z_reschedule+0x30>
   27042:	4911      	ldr	r1, [pc, #68]	; (27088 <z_reschedule+0x64>)
   27044:	4811      	ldr	r0, [pc, #68]	; (2708c <z_reschedule+0x68>)
   27046:	22d0      	movs	r2, #208	; 0xd0
   27048:	f004 fbb0 	bl	2b7ac <printk>
   2704c:	21d0      	movs	r1, #208	; 0xd0
   2704e:	480e      	ldr	r0, [pc, #56]	; (27088 <z_reschedule+0x64>)
   27050:	f004 fd43 	bl	2bada <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   27054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   27058:	2000      	movs	r0, #0
   2705a:	f7f5 b931 	b.w	1c2c0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2705e:	4618      	mov	r0, r3
   27060:	f7ff f91a 	bl	26298 <z_spin_unlock_valid>
   27064:	b940      	cbnz	r0, 27078 <z_reschedule+0x54>
   27066:	4908      	ldr	r1, [pc, #32]	; (27088 <z_reschedule+0x64>)
   27068:	4808      	ldr	r0, [pc, #32]	; (2708c <z_reschedule+0x68>)
   2706a:	22b9      	movs	r2, #185	; 0xb9
   2706c:	f004 fb9e 	bl	2b7ac <printk>
   27070:	21b9      	movs	r1, #185	; 0xb9
   27072:	4805      	ldr	r0, [pc, #20]	; (27088 <z_reschedule+0x64>)
   27074:	f004 fd31 	bl	2bada <assert_post_action>
   27078:	f384 8811 	msr	BASEPRI, r4
   2707c:	f3bf 8f6f 	isb	sy
   27080:	bd10      	pop	{r4, pc}
   27082:	bf00      	nop
   27084:	2000d44c 	.word	0x2000d44c
   27088:	0002f2d0 	.word	0x0002f2d0
   2708c:	0002f296 	.word	0x0002f296

00027090 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   27090:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27092:	f04f 0320 	mov.w	r3, #32
   27096:	f3ef 8511 	mrs	r5, BASEPRI
   2709a:	f383 8812 	msr	BASEPRI_MAX, r3
   2709e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270a2:	4820      	ldr	r0, [pc, #128]	; (27124 <k_sched_lock+0x94>)
   270a4:	f7ff f8ea 	bl	2627c <z_spin_lock_valid>
   270a8:	b940      	cbnz	r0, 270bc <k_sched_lock+0x2c>
   270aa:	491f      	ldr	r1, [pc, #124]	; (27128 <k_sched_lock+0x98>)
   270ac:	481f      	ldr	r0, [pc, #124]	; (2712c <k_sched_lock+0x9c>)
   270ae:	228e      	movs	r2, #142	; 0x8e
   270b0:	f004 fb7c 	bl	2b7ac <printk>
   270b4:	218e      	movs	r1, #142	; 0x8e
   270b6:	481c      	ldr	r0, [pc, #112]	; (27128 <k_sched_lock+0x98>)
   270b8:	f004 fd0f 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   270bc:	4819      	ldr	r0, [pc, #100]	; (27124 <k_sched_lock+0x94>)
   270be:	f7ff f8f9 	bl	262b4 <z_spin_lock_set_owner>
   270c2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   270c6:	b143      	cbz	r3, 270da <k_sched_lock+0x4a>
   270c8:	4919      	ldr	r1, [pc, #100]	; (27130 <k_sched_lock+0xa0>)
   270ca:	4818      	ldr	r0, [pc, #96]	; (2712c <k_sched_lock+0x9c>)
   270cc:	22fd      	movs	r2, #253	; 0xfd
   270ce:	f004 fb6d 	bl	2b7ac <printk>
   270d2:	21fd      	movs	r1, #253	; 0xfd
   270d4:	4816      	ldr	r0, [pc, #88]	; (27130 <k_sched_lock+0xa0>)
   270d6:	f004 fd00 	bl	2bada <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   270da:	4c16      	ldr	r4, [pc, #88]	; (27134 <k_sched_lock+0xa4>)
   270dc:	68a3      	ldr	r3, [r4, #8]
   270de:	7bdb      	ldrb	r3, [r3, #15]
   270e0:	2b01      	cmp	r3, #1
   270e2:	d108      	bne.n	270f6 <k_sched_lock+0x66>
   270e4:	4912      	ldr	r1, [pc, #72]	; (27130 <k_sched_lock+0xa0>)
   270e6:	4811      	ldr	r0, [pc, #68]	; (2712c <k_sched_lock+0x9c>)
   270e8:	22fe      	movs	r2, #254	; 0xfe
   270ea:	f004 fb5f 	bl	2b7ac <printk>
   270ee:	21fe      	movs	r1, #254	; 0xfe
   270f0:	480f      	ldr	r0, [pc, #60]	; (27130 <k_sched_lock+0xa0>)
   270f2:	f004 fcf2 	bl	2bada <assert_post_action>
	--_current->base.sched_locked;
   270f6:	68a2      	ldr	r2, [r4, #8]
   270f8:	7bd3      	ldrb	r3, [r2, #15]
   270fa:	3b01      	subs	r3, #1
   270fc:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270fe:	4809      	ldr	r0, [pc, #36]	; (27124 <k_sched_lock+0x94>)
   27100:	f7ff f8ca 	bl	26298 <z_spin_unlock_valid>
   27104:	b940      	cbnz	r0, 27118 <k_sched_lock+0x88>
   27106:	4908      	ldr	r1, [pc, #32]	; (27128 <k_sched_lock+0x98>)
   27108:	4808      	ldr	r0, [pc, #32]	; (2712c <k_sched_lock+0x9c>)
   2710a:	22b9      	movs	r2, #185	; 0xb9
   2710c:	f004 fb4e 	bl	2b7ac <printk>
   27110:	21b9      	movs	r1, #185	; 0xb9
   27112:	4805      	ldr	r0, [pc, #20]	; (27128 <k_sched_lock+0x98>)
   27114:	f004 fce1 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27118:	f385 8811 	msr	BASEPRI, r5
   2711c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   27120:	bd38      	pop	{r3, r4, r5, pc}
   27122:	bf00      	nop
   27124:	2000d48c 	.word	0x2000d48c
   27128:	0002f2d0 	.word	0x0002f2d0
   2712c:	0002f296 	.word	0x0002f296
   27130:	000318f5 	.word	0x000318f5
   27134:	2000d44c 	.word	0x2000d44c

00027138 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27138:	4b0b      	ldr	r3, [pc, #44]	; (27168 <z_priq_dumb_remove+0x30>)
{
   2713a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2713c:	4299      	cmp	r1, r3
{
   2713e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27140:	d10a      	bne.n	27158 <z_priq_dumb_remove+0x20>
   27142:	490a      	ldr	r1, [pc, #40]	; (2716c <z_priq_dumb_remove+0x34>)
   27144:	480a      	ldr	r0, [pc, #40]	; (27170 <z_priq_dumb_remove+0x38>)
   27146:	f240 32e7 	movw	r2, #999	; 0x3e7
   2714a:	f004 fb2f 	bl	2b7ac <printk>
   2714e:	f240 31e7 	movw	r1, #999	; 0x3e7
   27152:	4806      	ldr	r0, [pc, #24]	; (2716c <z_priq_dumb_remove+0x34>)
   27154:	f004 fcc1 	bl	2bada <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   27158:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   2715c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2715e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27160:	2300      	movs	r3, #0
	node->prev = NULL;
   27162:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   27166:	bd10      	pop	{r4, pc}
   27168:	2000cc08 	.word	0x2000cc08
   2716c:	00031961 	.word	0x00031961
   27170:	0002f296 	.word	0x0002f296

00027174 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   27174:	6883      	ldr	r3, [r0, #8]
{
   27176:	b510      	push	{r4, lr}
   27178:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2717a:	b953      	cbnz	r3, 27192 <unpend_thread_no_timeout+0x1e>
   2717c:	490a      	ldr	r1, [pc, #40]	; (271a8 <unpend_thread_no_timeout+0x34>)
   2717e:	480b      	ldr	r0, [pc, #44]	; (271ac <unpend_thread_no_timeout+0x38>)
   27180:	f240 2283 	movw	r2, #643	; 0x283
   27184:	f004 fb12 	bl	2b7ac <printk>
   27188:	f240 2183 	movw	r1, #643	; 0x283
   2718c:	4806      	ldr	r0, [pc, #24]	; (271a8 <unpend_thread_no_timeout+0x34>)
   2718e:	f004 fca4 	bl	2bada <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27192:	4621      	mov	r1, r4
   27194:	68a0      	ldr	r0, [r4, #8]
   27196:	f7ff ffcf 	bl	27138 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2719a:	7b63      	ldrb	r3, [r4, #13]
   2719c:	f023 0302 	bic.w	r3, r3, #2
   271a0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   271a2:	2300      	movs	r3, #0
   271a4:	60a3      	str	r3, [r4, #8]
}
   271a6:	bd10      	pop	{r4, pc}
   271a8:	00031961 	.word	0x00031961
   271ac:	0002f296 	.word	0x0002f296

000271b0 <z_unpend_thread>:
{
   271b0:	b538      	push	{r3, r4, r5, lr}
   271b2:	4604      	mov	r4, r0
	__asm__ volatile(
   271b4:	f04f 0320 	mov.w	r3, #32
   271b8:	f3ef 8511 	mrs	r5, BASEPRI
   271bc:	f383 8812 	msr	BASEPRI_MAX, r3
   271c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271c4:	4814      	ldr	r0, [pc, #80]	; (27218 <z_unpend_thread+0x68>)
   271c6:	f7ff f859 	bl	2627c <z_spin_lock_valid>
   271ca:	b940      	cbnz	r0, 271de <z_unpend_thread+0x2e>
   271cc:	4913      	ldr	r1, [pc, #76]	; (2721c <z_unpend_thread+0x6c>)
   271ce:	4814      	ldr	r0, [pc, #80]	; (27220 <z_unpend_thread+0x70>)
   271d0:	228e      	movs	r2, #142	; 0x8e
   271d2:	f004 faeb 	bl	2b7ac <printk>
   271d6:	218e      	movs	r1, #142	; 0x8e
   271d8:	4810      	ldr	r0, [pc, #64]	; (2721c <z_unpend_thread+0x6c>)
   271da:	f004 fc7e 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   271de:	480e      	ldr	r0, [pc, #56]	; (27218 <z_unpend_thread+0x68>)
   271e0:	f7ff f868 	bl	262b4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   271e4:	4620      	mov	r0, r4
   271e6:	f7ff ffc5 	bl	27174 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271ea:	480b      	ldr	r0, [pc, #44]	; (27218 <z_unpend_thread+0x68>)
   271ec:	f7ff f854 	bl	26298 <z_spin_unlock_valid>
   271f0:	b940      	cbnz	r0, 27204 <z_unpend_thread+0x54>
   271f2:	490a      	ldr	r1, [pc, #40]	; (2721c <z_unpend_thread+0x6c>)
   271f4:	480a      	ldr	r0, [pc, #40]	; (27220 <z_unpend_thread+0x70>)
   271f6:	22b9      	movs	r2, #185	; 0xb9
   271f8:	f004 fad8 	bl	2b7ac <printk>
   271fc:	21b9      	movs	r1, #185	; 0xb9
   271fe:	4807      	ldr	r0, [pc, #28]	; (2721c <z_unpend_thread+0x6c>)
   27200:	f004 fc6b 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27204:	f385 8811 	msr	BASEPRI, r5
   27208:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2720c:	f104 0018 	add.w	r0, r4, #24
}
   27210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27214:	f000 bf90 	b.w	28138 <z_abort_timeout>
   27218:	2000d48c 	.word	0x2000d48c
   2721c:	0002f2d0 	.word	0x0002f2d0
   27220:	0002f296 	.word	0x0002f296

00027224 <update_cache>:
{
   27224:	b538      	push	{r3, r4, r5, lr}
   27226:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   27228:	4812      	ldr	r0, [pc, #72]	; (27274 <update_cache+0x50>)
   2722a:	f006 fbab 	bl	2d984 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2722e:	4d12      	ldr	r5, [pc, #72]	; (27278 <update_cache+0x54>)
   27230:	4604      	mov	r4, r0
   27232:	b900      	cbnz	r0, 27236 <update_cache+0x12>
   27234:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   27236:	b9aa      	cbnz	r2, 27264 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   27238:	68ab      	ldr	r3, [r5, #8]
   2723a:	b943      	cbnz	r3, 2724e <update_cache+0x2a>
   2723c:	490f      	ldr	r1, [pc, #60]	; (2727c <update_cache+0x58>)
   2723e:	4810      	ldr	r0, [pc, #64]	; (27280 <update_cache+0x5c>)
   27240:	2289      	movs	r2, #137	; 0x89
   27242:	f004 fab3 	bl	2b7ac <printk>
   27246:	2189      	movs	r1, #137	; 0x89
   27248:	480c      	ldr	r0, [pc, #48]	; (2727c <update_cache+0x58>)
   2724a:	f004 fc46 	bl	2bada <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2724e:	68ab      	ldr	r3, [r5, #8]
   27250:	7b5a      	ldrb	r2, [r3, #13]
   27252:	06d2      	lsls	r2, r2, #27
   27254:	d106      	bne.n	27264 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   27256:	69a2      	ldr	r2, [r4, #24]
   27258:	b922      	cbnz	r2, 27264 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   2725a:	89da      	ldrh	r2, [r3, #14]
   2725c:	2a7f      	cmp	r2, #127	; 0x7f
   2725e:	d901      	bls.n	27264 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   27260:	61eb      	str	r3, [r5, #28]
}
   27262:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   27264:	68ab      	ldr	r3, [r5, #8]
   27266:	42a3      	cmp	r3, r4
   27268:	d001      	beq.n	2726e <update_cache+0x4a>
			z_reset_time_slice();
   2726a:	f7ff fe71 	bl	26f50 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2726e:	61ec      	str	r4, [r5, #28]
}
   27270:	e7f7      	b.n	27262 <update_cache+0x3e>
   27272:	bf00      	nop
   27274:	2000d46c 	.word	0x2000d46c
   27278:	2000d44c 	.word	0x2000d44c
   2727c:	00031961 	.word	0x00031961
   27280:	0002f296 	.word	0x0002f296

00027284 <move_thread_to_end_of_prio_q>:
{
   27284:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   27286:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2728a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2728c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2728e:	7b43      	ldrb	r3, [r0, #13]
   27290:	da06      	bge.n	272a0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   27296:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27298:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2729a:	481d      	ldr	r0, [pc, #116]	; (27310 <move_thread_to_end_of_prio_q+0x8c>)
   2729c:	f7ff ff4c 	bl	27138 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   272a0:	7b63      	ldrb	r3, [r4, #13]
   272a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   272a6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   272a8:	4b1a      	ldr	r3, [pc, #104]	; (27314 <move_thread_to_end_of_prio_q+0x90>)
   272aa:	429c      	cmp	r4, r3
   272ac:	d108      	bne.n	272c0 <move_thread_to_end_of_prio_q+0x3c>
   272ae:	491a      	ldr	r1, [pc, #104]	; (27318 <move_thread_to_end_of_prio_q+0x94>)
   272b0:	481a      	ldr	r0, [pc, #104]	; (2731c <move_thread_to_end_of_prio_q+0x98>)
   272b2:	22ba      	movs	r2, #186	; 0xba
   272b4:	f004 fa7a 	bl	2b7ac <printk>
   272b8:	21ba      	movs	r1, #186	; 0xba
   272ba:	4817      	ldr	r0, [pc, #92]	; (27318 <move_thread_to_end_of_prio_q+0x94>)
   272bc:	f004 fc0d 	bl	2bada <assert_post_action>
	return list->head == list;
   272c0:	4a17      	ldr	r2, [pc, #92]	; (27320 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272c2:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   272c6:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272ca:	42ab      	cmp	r3, r5
   272cc:	d01b      	beq.n	27306 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   272ce:	b1d3      	cbz	r3, 27306 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   272d0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   272d4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   272d8:	428e      	cmp	r6, r1
   272da:	d00f      	beq.n	272fc <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   272dc:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   272de:	2900      	cmp	r1, #0
   272e0:	dd0c      	ble.n	272fc <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   272e2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   272e4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   272e8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   272ea:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   272ec:	6890      	ldr	r0, [r2, #8]
   272ee:	1b03      	subs	r3, r0, r4
   272f0:	4258      	negs	r0, r3
   272f2:	4158      	adcs	r0, r3
}
   272f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   272f8:	f7ff bf94 	b.w	27224 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   272fc:	4283      	cmp	r3, r0
   272fe:	d002      	beq.n	27306 <move_thread_to_end_of_prio_q+0x82>
   27300:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27302:	2b00      	cmp	r3, #0
   27304:	d1e6      	bne.n	272d4 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   27306:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   2730a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2730c:	6254      	str	r4, [r2, #36]	; 0x24
}
   2730e:	e7ed      	b.n	272ec <move_thread_to_end_of_prio_q+0x68>
   27310:	2000d46c 	.word	0x2000d46c
   27314:	2000cc08 	.word	0x2000cc08
   27318:	00031961 	.word	0x00031961
   2731c:	0002f296 	.word	0x0002f296
   27320:	2000d44c 	.word	0x2000d44c

00027324 <z_time_slice>:
{
   27324:	b538      	push	{r3, r4, r5, lr}
   27326:	4604      	mov	r4, r0
	__asm__ volatile(
   27328:	f04f 0320 	mov.w	r3, #32
   2732c:	f3ef 8511 	mrs	r5, BASEPRI
   27330:	f383 8812 	msr	BASEPRI_MAX, r3
   27334:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27338:	4824      	ldr	r0, [pc, #144]	; (273cc <z_time_slice+0xa8>)
   2733a:	f7fe ff9f 	bl	2627c <z_spin_lock_valid>
   2733e:	b940      	cbnz	r0, 27352 <z_time_slice+0x2e>
   27340:	4923      	ldr	r1, [pc, #140]	; (273d0 <z_time_slice+0xac>)
   27342:	4824      	ldr	r0, [pc, #144]	; (273d4 <z_time_slice+0xb0>)
   27344:	228e      	movs	r2, #142	; 0x8e
   27346:	f004 fa31 	bl	2b7ac <printk>
   2734a:	218e      	movs	r1, #142	; 0x8e
   2734c:	4820      	ldr	r0, [pc, #128]	; (273d0 <z_time_slice+0xac>)
   2734e:	f004 fbc4 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   27352:	481e      	ldr	r0, [pc, #120]	; (273cc <z_time_slice+0xa8>)
   27354:	f7fe ffae 	bl	262b4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   27358:	4b1f      	ldr	r3, [pc, #124]	; (273d8 <z_time_slice+0xb4>)
   2735a:	4a20      	ldr	r2, [pc, #128]	; (273dc <z_time_slice+0xb8>)
   2735c:	6898      	ldr	r0, [r3, #8]
   2735e:	6811      	ldr	r1, [r2, #0]
   27360:	4288      	cmp	r0, r1
   27362:	d113      	bne.n	2738c <z_time_slice+0x68>
			z_reset_time_slice();
   27364:	f7ff fdf4 	bl	26f50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27368:	4818      	ldr	r0, [pc, #96]	; (273cc <z_time_slice+0xa8>)
   2736a:	f7fe ff95 	bl	26298 <z_spin_unlock_valid>
   2736e:	b940      	cbnz	r0, 27382 <z_time_slice+0x5e>
   27370:	4917      	ldr	r1, [pc, #92]	; (273d0 <z_time_slice+0xac>)
   27372:	4818      	ldr	r0, [pc, #96]	; (273d4 <z_time_slice+0xb0>)
   27374:	22b9      	movs	r2, #185	; 0xb9
   27376:	f004 fa19 	bl	2b7ac <printk>
   2737a:	21b9      	movs	r1, #185	; 0xb9
   2737c:	4814      	ldr	r0, [pc, #80]	; (273d0 <z_time_slice+0xac>)
   2737e:	f004 fbac 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27382:	f385 8811 	msr	BASEPRI, r5
   27386:	f3bf 8f6f 	isb	sy
}
   2738a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2738c:	2100      	movs	r1, #0
   2738e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   27390:	4a13      	ldr	r2, [pc, #76]	; (273e0 <z_time_slice+0xbc>)
   27392:	6812      	ldr	r2, [r2, #0]
   27394:	b1ba      	cbz	r2, 273c6 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   27396:	89c2      	ldrh	r2, [r0, #14]
   27398:	2a7f      	cmp	r2, #127	; 0x7f
   2739a:	d814      	bhi.n	273c6 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   2739c:	7b42      	ldrb	r2, [r0, #13]
   2739e:	06d2      	lsls	r2, r2, #27
   273a0:	d111      	bne.n	273c6 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   273a2:	4a10      	ldr	r2, [pc, #64]	; (273e4 <z_time_slice+0xc0>)
   273a4:	f990 100e 	ldrsb.w	r1, [r0, #14]
   273a8:	6812      	ldr	r2, [r2, #0]
   273aa:	4291      	cmp	r1, r2
   273ac:	db0b      	blt.n	273c6 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   273ae:	4a0e      	ldr	r2, [pc, #56]	; (273e8 <z_time_slice+0xc4>)
   273b0:	4290      	cmp	r0, r2
   273b2:	d008      	beq.n	273c6 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   273b4:	691a      	ldr	r2, [r3, #16]
   273b6:	42a2      	cmp	r2, r4
   273b8:	dc02      	bgt.n	273c0 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   273ba:	f7ff ff63 	bl	27284 <move_thread_to_end_of_prio_q>
   273be:	e7d1      	b.n	27364 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   273c0:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   273c2:	611a      	str	r2, [r3, #16]
   273c4:	e7d0      	b.n	27368 <z_time_slice+0x44>
   273c6:	2200      	movs	r2, #0
   273c8:	e7fb      	b.n	273c2 <z_time_slice+0x9e>
   273ca:	bf00      	nop
   273cc:	2000d48c 	.word	0x2000d48c
   273d0:	0002f2d0 	.word	0x0002f2d0
   273d4:	0002f296 	.word	0x0002f296
   273d8:	2000d44c 	.word	0x2000d44c
   273dc:	2000d488 	.word	0x2000d488
   273e0:	2000d494 	.word	0x2000d494
   273e4:	2000d490 	.word	0x2000d490
   273e8:	2000cc08 	.word	0x2000cc08

000273ec <ready_thread>:
{
   273ec:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   273ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   273f2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   273f4:	2a00      	cmp	r2, #0
   273f6:	7b43      	ldrb	r3, [r0, #13]
   273f8:	db38      	blt.n	2746c <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   273fa:	06da      	lsls	r2, r3, #27
   273fc:	d136      	bne.n	2746c <ready_thread+0x80>
   273fe:	6982      	ldr	r2, [r0, #24]
   27400:	2a00      	cmp	r2, #0
   27402:	d133      	bne.n	2746c <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   27404:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27408:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2740a:	4b19      	ldr	r3, [pc, #100]	; (27470 <ready_thread+0x84>)
   2740c:	4298      	cmp	r0, r3
   2740e:	d108      	bne.n	27422 <ready_thread+0x36>
   27410:	4918      	ldr	r1, [pc, #96]	; (27474 <ready_thread+0x88>)
   27412:	4819      	ldr	r0, [pc, #100]	; (27478 <ready_thread+0x8c>)
   27414:	22ba      	movs	r2, #186	; 0xba
   27416:	f004 f9c9 	bl	2b7ac <printk>
   2741a:	21ba      	movs	r1, #186	; 0xba
   2741c:	4815      	ldr	r0, [pc, #84]	; (27474 <ready_thread+0x88>)
   2741e:	f004 fb5c 	bl	2bada <assert_post_action>
	return list->head == list;
   27422:	4a16      	ldr	r2, [pc, #88]	; (2747c <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27424:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   27428:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2742c:	42ab      	cmp	r3, r5
   2742e:	d018      	beq.n	27462 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27430:	b1bb      	cbz	r3, 27462 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   27432:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27436:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2743a:	428e      	cmp	r6, r1
   2743c:	d00c      	beq.n	27458 <ready_thread+0x6c>
		return b2 - b1;
   2743e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   27440:	2900      	cmp	r1, #0
   27442:	dd09      	ble.n	27458 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   27444:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27446:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2744a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2744c:	605c      	str	r4, [r3, #4]
		update_cache(0);
   2744e:	2000      	movs	r0, #0
}
   27450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   27454:	f7ff bee6 	b.w	27224 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   27458:	4298      	cmp	r0, r3
   2745a:	d002      	beq.n	27462 <ready_thread+0x76>
   2745c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2745e:	2b00      	cmp	r3, #0
   27460:	d1e9      	bne.n	27436 <ready_thread+0x4a>
	node->prev = tail;
   27462:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   27466:	6004      	str	r4, [r0, #0]
	list->tail = node;
   27468:	6254      	str	r4, [r2, #36]	; 0x24
}
   2746a:	e7f0      	b.n	2744e <ready_thread+0x62>
}
   2746c:	bd70      	pop	{r4, r5, r6, pc}
   2746e:	bf00      	nop
   27470:	2000cc08 	.word	0x2000cc08
   27474:	00031961 	.word	0x00031961
   27478:	0002f296 	.word	0x0002f296
   2747c:	2000d44c 	.word	0x2000d44c

00027480 <z_ready_thread>:
{
   27480:	b538      	push	{r3, r4, r5, lr}
   27482:	4604      	mov	r4, r0
	__asm__ volatile(
   27484:	f04f 0320 	mov.w	r3, #32
   27488:	f3ef 8511 	mrs	r5, BASEPRI
   2748c:	f383 8812 	msr	BASEPRI_MAX, r3
   27490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27494:	4812      	ldr	r0, [pc, #72]	; (274e0 <z_ready_thread+0x60>)
   27496:	f7fe fef1 	bl	2627c <z_spin_lock_valid>
   2749a:	b940      	cbnz	r0, 274ae <z_ready_thread+0x2e>
   2749c:	4911      	ldr	r1, [pc, #68]	; (274e4 <z_ready_thread+0x64>)
   2749e:	4812      	ldr	r0, [pc, #72]	; (274e8 <z_ready_thread+0x68>)
   274a0:	228e      	movs	r2, #142	; 0x8e
   274a2:	f004 f983 	bl	2b7ac <printk>
   274a6:	218e      	movs	r1, #142	; 0x8e
   274a8:	480e      	ldr	r0, [pc, #56]	; (274e4 <z_ready_thread+0x64>)
   274aa:	f004 fb16 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   274ae:	480c      	ldr	r0, [pc, #48]	; (274e0 <z_ready_thread+0x60>)
   274b0:	f7fe ff00 	bl	262b4 <z_spin_lock_set_owner>
			ready_thread(thread);
   274b4:	4620      	mov	r0, r4
   274b6:	f7ff ff99 	bl	273ec <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   274ba:	4809      	ldr	r0, [pc, #36]	; (274e0 <z_ready_thread+0x60>)
   274bc:	f7fe feec 	bl	26298 <z_spin_unlock_valid>
   274c0:	b940      	cbnz	r0, 274d4 <z_ready_thread+0x54>
   274c2:	4908      	ldr	r1, [pc, #32]	; (274e4 <z_ready_thread+0x64>)
   274c4:	4808      	ldr	r0, [pc, #32]	; (274e8 <z_ready_thread+0x68>)
   274c6:	22b9      	movs	r2, #185	; 0xb9
   274c8:	f004 f970 	bl	2b7ac <printk>
   274cc:	21b9      	movs	r1, #185	; 0xb9
   274ce:	4805      	ldr	r0, [pc, #20]	; (274e4 <z_ready_thread+0x64>)
   274d0:	f004 fb03 	bl	2bada <assert_post_action>
	__asm__ volatile(
   274d4:	f385 8811 	msr	BASEPRI, r5
   274d8:	f3bf 8f6f 	isb	sy
}
   274dc:	bd38      	pop	{r3, r4, r5, pc}
   274de:	bf00      	nop
   274e0:	2000d48c 	.word	0x2000d48c
   274e4:	0002f2d0 	.word	0x0002f2d0
   274e8:	0002f296 	.word	0x0002f296

000274ec <z_sched_start>:
{
   274ec:	b538      	push	{r3, r4, r5, lr}
   274ee:	4604      	mov	r4, r0
	__asm__ volatile(
   274f0:	f04f 0320 	mov.w	r3, #32
   274f4:	f3ef 8511 	mrs	r5, BASEPRI
   274f8:	f383 8812 	msr	BASEPRI_MAX, r3
   274fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27500:	4818      	ldr	r0, [pc, #96]	; (27564 <z_sched_start+0x78>)
   27502:	f7fe febb 	bl	2627c <z_spin_lock_valid>
   27506:	b940      	cbnz	r0, 2751a <z_sched_start+0x2e>
   27508:	4917      	ldr	r1, [pc, #92]	; (27568 <z_sched_start+0x7c>)
   2750a:	4818      	ldr	r0, [pc, #96]	; (2756c <z_sched_start+0x80>)
   2750c:	228e      	movs	r2, #142	; 0x8e
   2750e:	f004 f94d 	bl	2b7ac <printk>
   27512:	218e      	movs	r1, #142	; 0x8e
   27514:	4814      	ldr	r0, [pc, #80]	; (27568 <z_sched_start+0x7c>)
   27516:	f004 fae0 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2751a:	4812      	ldr	r0, [pc, #72]	; (27564 <z_sched_start+0x78>)
   2751c:	f7fe feca 	bl	262b4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   27520:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   27522:	075a      	lsls	r2, r3, #29
   27524:	d411      	bmi.n	2754a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27526:	480f      	ldr	r0, [pc, #60]	; (27564 <z_sched_start+0x78>)
   27528:	f7fe feb6 	bl	26298 <z_spin_unlock_valid>
   2752c:	b940      	cbnz	r0, 27540 <z_sched_start+0x54>
   2752e:	490e      	ldr	r1, [pc, #56]	; (27568 <z_sched_start+0x7c>)
   27530:	480e      	ldr	r0, [pc, #56]	; (2756c <z_sched_start+0x80>)
   27532:	22b9      	movs	r2, #185	; 0xb9
   27534:	f004 f93a 	bl	2b7ac <printk>
   27538:	21b9      	movs	r1, #185	; 0xb9
   2753a:	480b      	ldr	r0, [pc, #44]	; (27568 <z_sched_start+0x7c>)
   2753c:	f004 facd 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27540:	f385 8811 	msr	BASEPRI, r5
   27544:	f3bf 8f6f 	isb	sy
}
   27548:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2754a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2754e:	4620      	mov	r0, r4
   27550:	7363      	strb	r3, [r4, #13]
   27552:	f7ff ff4b 	bl	273ec <ready_thread>
	z_reschedule(&sched_spinlock, key);
   27556:	4629      	mov	r1, r5
}
   27558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2755c:	4801      	ldr	r0, [pc, #4]	; (27564 <z_sched_start+0x78>)
   2755e:	f7ff bd61 	b.w	27024 <z_reschedule>
   27562:	bf00      	nop
   27564:	2000d48c 	.word	0x2000d48c
   27568:	0002f2d0 	.word	0x0002f2d0
   2756c:	0002f296 	.word	0x0002f296

00027570 <z_thread_timeout>:
{
   27570:	b570      	push	{r4, r5, r6, lr}
   27572:	4604      	mov	r4, r0
	__asm__ volatile(
   27574:	f04f 0320 	mov.w	r3, #32
   27578:	f3ef 8611 	mrs	r6, BASEPRI
   2757c:	f383 8812 	msr	BASEPRI_MAX, r3
   27580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27584:	481b      	ldr	r0, [pc, #108]	; (275f4 <z_thread_timeout+0x84>)
   27586:	f7fe fe79 	bl	2627c <z_spin_lock_valid>
   2758a:	b940      	cbnz	r0, 2759e <z_thread_timeout+0x2e>
   2758c:	491a      	ldr	r1, [pc, #104]	; (275f8 <z_thread_timeout+0x88>)
   2758e:	481b      	ldr	r0, [pc, #108]	; (275fc <z_thread_timeout+0x8c>)
   27590:	228e      	movs	r2, #142	; 0x8e
   27592:	f004 f90b 	bl	2b7ac <printk>
   27596:	218e      	movs	r1, #142	; 0x8e
   27598:	4817      	ldr	r0, [pc, #92]	; (275f8 <z_thread_timeout+0x88>)
   2759a:	f004 fa9e 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2759e:	4815      	ldr	r0, [pc, #84]	; (275f4 <z_thread_timeout+0x84>)
   275a0:	f7fe fe88 	bl	262b4 <z_spin_lock_set_owner>
		if (!killed) {
   275a4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   275a8:	f013 0f28 	tst.w	r3, #40	; 0x28
   275ac:	d110      	bne.n	275d0 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   275ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   275b2:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   275b6:	b113      	cbz	r3, 275be <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   275b8:	4628      	mov	r0, r5
   275ba:	f7ff fddb 	bl	27174 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   275be:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   275c2:	4628      	mov	r0, r5
   275c4:	f023 0314 	bic.w	r3, r3, #20
   275c8:	f804 3c0b 	strb.w	r3, [r4, #-11]
   275cc:	f7ff ff0e 	bl	273ec <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275d0:	4808      	ldr	r0, [pc, #32]	; (275f4 <z_thread_timeout+0x84>)
   275d2:	f7fe fe61 	bl	26298 <z_spin_unlock_valid>
   275d6:	b940      	cbnz	r0, 275ea <z_thread_timeout+0x7a>
   275d8:	4907      	ldr	r1, [pc, #28]	; (275f8 <z_thread_timeout+0x88>)
   275da:	4808      	ldr	r0, [pc, #32]	; (275fc <z_thread_timeout+0x8c>)
   275dc:	22b9      	movs	r2, #185	; 0xb9
   275de:	f004 f8e5 	bl	2b7ac <printk>
   275e2:	21b9      	movs	r1, #185	; 0xb9
   275e4:	4804      	ldr	r0, [pc, #16]	; (275f8 <z_thread_timeout+0x88>)
   275e6:	f004 fa78 	bl	2bada <assert_post_action>
	__asm__ volatile(
   275ea:	f386 8811 	msr	BASEPRI, r6
   275ee:	f3bf 8f6f 	isb	sy
}
   275f2:	bd70      	pop	{r4, r5, r6, pc}
   275f4:	2000d48c 	.word	0x2000d48c
   275f8:	0002f2d0 	.word	0x0002f2d0
   275fc:	0002f296 	.word	0x0002f296

00027600 <unready_thread>:
{
   27600:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   27602:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   27606:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   27608:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2760a:	7b43      	ldrb	r3, [r0, #13]
   2760c:	da06      	bge.n	2761c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2760e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   27612:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27614:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27616:	4806      	ldr	r0, [pc, #24]	; (27630 <unready_thread+0x30>)
   27618:	f7ff fd8e 	bl	27138 <z_priq_dumb_remove>
	update_cache(thread == _current);
   2761c:	4b05      	ldr	r3, [pc, #20]	; (27634 <unready_thread+0x34>)
   2761e:	6898      	ldr	r0, [r3, #8]
   27620:	1b03      	subs	r3, r0, r4
   27622:	4258      	negs	r0, r3
   27624:	4158      	adcs	r0, r3
}
   27626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2762a:	f7ff bdfb 	b.w	27224 <update_cache>
   2762e:	bf00      	nop
   27630:	2000d46c 	.word	0x2000d46c
   27634:	2000d44c 	.word	0x2000d44c

00027638 <add_to_waitq_locked>:
{
   27638:	b538      	push	{r3, r4, r5, lr}
   2763a:	4604      	mov	r4, r0
   2763c:	460d      	mov	r5, r1
	unready_thread(thread);
   2763e:	f7ff ffdf 	bl	27600 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27642:	7b63      	ldrb	r3, [r4, #13]
   27644:	f043 0302 	orr.w	r3, r3, #2
   27648:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2764a:	b1f5      	cbz	r5, 2768a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2764c:	4b15      	ldr	r3, [pc, #84]	; (276a4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   2764e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27650:	429c      	cmp	r4, r3
   27652:	d108      	bne.n	27666 <add_to_waitq_locked+0x2e>
   27654:	4914      	ldr	r1, [pc, #80]	; (276a8 <add_to_waitq_locked+0x70>)
   27656:	4815      	ldr	r0, [pc, #84]	; (276ac <add_to_waitq_locked+0x74>)
   27658:	22ba      	movs	r2, #186	; 0xba
   2765a:	f004 f8a7 	bl	2b7ac <printk>
   2765e:	21ba      	movs	r1, #186	; 0xba
   27660:	4811      	ldr	r0, [pc, #68]	; (276a8 <add_to_waitq_locked+0x70>)
   27662:	f004 fa3a 	bl	2bada <assert_post_action>
	return list->head == list;
   27666:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27668:	429d      	cmp	r5, r3
   2766a:	d015      	beq.n	27698 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2766c:	b1a3      	cbz	r3, 27698 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   2766e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27672:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27676:	4291      	cmp	r1, r2
   27678:	d008      	beq.n	2768c <add_to_waitq_locked+0x54>
		return b2 - b1;
   2767a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2767c:	2a00      	cmp	r2, #0
   2767e:	dd05      	ble.n	2768c <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   27680:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27682:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27686:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27688:	605c      	str	r4, [r3, #4]
}
   2768a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2768c:	686a      	ldr	r2, [r5, #4]
   2768e:	4293      	cmp	r3, r2
   27690:	d002      	beq.n	27698 <add_to_waitq_locked+0x60>
   27692:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27694:	2b00      	cmp	r3, #0
   27696:	d1ec      	bne.n	27672 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   27698:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2769a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2769e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   276a0:	606c      	str	r4, [r5, #4]
}
   276a2:	e7f2      	b.n	2768a <add_to_waitq_locked+0x52>
   276a4:	2000cc08 	.word	0x2000cc08
   276a8:	00031961 	.word	0x00031961
   276ac:	0002f296 	.word	0x0002f296

000276b0 <pend>:
{
   276b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   276b4:	4604      	mov	r4, r0
   276b6:	4688      	mov	r8, r1
   276b8:	4616      	mov	r6, r2
   276ba:	461d      	mov	r5, r3
	__asm__ volatile(
   276bc:	f04f 0320 	mov.w	r3, #32
   276c0:	f3ef 8711 	mrs	r7, BASEPRI
   276c4:	f383 8812 	msr	BASEPRI_MAX, r3
   276c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   276cc:	481a      	ldr	r0, [pc, #104]	; (27738 <pend+0x88>)
   276ce:	f7fe fdd5 	bl	2627c <z_spin_lock_valid>
   276d2:	b940      	cbnz	r0, 276e6 <pend+0x36>
   276d4:	4919      	ldr	r1, [pc, #100]	; (2773c <pend+0x8c>)
   276d6:	481a      	ldr	r0, [pc, #104]	; (27740 <pend+0x90>)
   276d8:	228e      	movs	r2, #142	; 0x8e
   276da:	f004 f867 	bl	2b7ac <printk>
   276de:	218e      	movs	r1, #142	; 0x8e
   276e0:	4816      	ldr	r0, [pc, #88]	; (2773c <pend+0x8c>)
   276e2:	f004 f9fa 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   276e6:	4814      	ldr	r0, [pc, #80]	; (27738 <pend+0x88>)
   276e8:	f7fe fde4 	bl	262b4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   276ec:	4620      	mov	r0, r4
   276ee:	4641      	mov	r1, r8
   276f0:	f7ff ffa2 	bl	27638 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   276f4:	4810      	ldr	r0, [pc, #64]	; (27738 <pend+0x88>)
   276f6:	f7fe fdcf 	bl	26298 <z_spin_unlock_valid>
   276fa:	b940      	cbnz	r0, 2770e <pend+0x5e>
   276fc:	490f      	ldr	r1, [pc, #60]	; (2773c <pend+0x8c>)
   276fe:	4810      	ldr	r0, [pc, #64]	; (27740 <pend+0x90>)
   27700:	22b9      	movs	r2, #185	; 0xb9
   27702:	f004 f853 	bl	2b7ac <printk>
   27706:	21b9      	movs	r1, #185	; 0xb9
   27708:	480c      	ldr	r0, [pc, #48]	; (2773c <pend+0x8c>)
   2770a:	f004 f9e6 	bl	2bada <assert_post_action>
	__asm__ volatile(
   2770e:	f387 8811 	msr	BASEPRI, r7
   27712:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27716:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2771a:	bf08      	it	eq
   2771c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   27720:	d008      	beq.n	27734 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27722:	4632      	mov	r2, r6
   27724:	462b      	mov	r3, r5
   27726:	f104 0018 	add.w	r0, r4, #24
   2772a:	4906      	ldr	r1, [pc, #24]	; (27744 <pend+0x94>)
}
   2772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27730:	f000 bc54 	b.w	27fdc <z_add_timeout>
   27734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27738:	2000d48c 	.word	0x2000d48c
   2773c:	0002f2d0 	.word	0x0002f2d0
   27740:	0002f296 	.word	0x0002f296
   27744:	00027571 	.word	0x00027571

00027748 <z_pend_curr>:
{
   27748:	b538      	push	{r3, r4, r5, lr}
   2774a:	4605      	mov	r5, r0
	pending_current = _current;
   2774c:	4b0d      	ldr	r3, [pc, #52]	; (27784 <z_pend_curr+0x3c>)
{
   2774e:	460c      	mov	r4, r1
	pending_current = _current;
   27750:	6898      	ldr	r0, [r3, #8]
   27752:	4b0d      	ldr	r3, [pc, #52]	; (27788 <z_pend_curr+0x40>)
{
   27754:	4611      	mov	r1, r2
	pending_current = _current;
   27756:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   27758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2775c:	f7ff ffa8 	bl	276b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27760:	4628      	mov	r0, r5
   27762:	f7fe fd99 	bl	26298 <z_spin_unlock_valid>
   27766:	b940      	cbnz	r0, 2777a <z_pend_curr+0x32>
   27768:	4908      	ldr	r1, [pc, #32]	; (2778c <z_pend_curr+0x44>)
   2776a:	4809      	ldr	r0, [pc, #36]	; (27790 <z_pend_curr+0x48>)
   2776c:	22d0      	movs	r2, #208	; 0xd0
   2776e:	f004 f81d 	bl	2b7ac <printk>
   27772:	21d0      	movs	r1, #208	; 0xd0
   27774:	4805      	ldr	r0, [pc, #20]	; (2778c <z_pend_curr+0x44>)
   27776:	f004 f9b0 	bl	2bada <assert_post_action>
   2777a:	4620      	mov	r0, r4
}
   2777c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27780:	f7f4 bd9e 	b.w	1c2c0 <arch_swap>
   27784:	2000d44c 	.word	0x2000d44c
   27788:	2000d488 	.word	0x2000d488
   2778c:	0002f2d0 	.word	0x0002f2d0
   27790:	0002f296 	.word	0x0002f296

00027794 <z_set_prio>:
{
   27794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27796:	4604      	mov	r4, r0
   27798:	460d      	mov	r5, r1
	__asm__ volatile(
   2779a:	f04f 0320 	mov.w	r3, #32
   2779e:	f3ef 8611 	mrs	r6, BASEPRI
   277a2:	f383 8812 	msr	BASEPRI_MAX, r3
   277a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   277aa:	4834      	ldr	r0, [pc, #208]	; (2787c <z_set_prio+0xe8>)
   277ac:	f7fe fd66 	bl	2627c <z_spin_lock_valid>
   277b0:	b940      	cbnz	r0, 277c4 <z_set_prio+0x30>
   277b2:	4933      	ldr	r1, [pc, #204]	; (27880 <z_set_prio+0xec>)
   277b4:	4833      	ldr	r0, [pc, #204]	; (27884 <z_set_prio+0xf0>)
   277b6:	228e      	movs	r2, #142	; 0x8e
   277b8:	f003 fff8 	bl	2b7ac <printk>
   277bc:	218e      	movs	r1, #142	; 0x8e
   277be:	4830      	ldr	r0, [pc, #192]	; (27880 <z_set_prio+0xec>)
   277c0:	f004 f98b 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   277c4:	482d      	ldr	r0, [pc, #180]	; (2787c <z_set_prio+0xe8>)
   277c6:	f7fe fd75 	bl	262b4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   277ca:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   277cc:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   277ce:	06da      	lsls	r2, r3, #27
   277d0:	d151      	bne.n	27876 <z_set_prio+0xe2>
		if (need_sched) {
   277d2:	69a2      	ldr	r2, [r4, #24]
   277d4:	2a00      	cmp	r2, #0
   277d6:	d14e      	bne.n	27876 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   277d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   277dc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   277de:	4621      	mov	r1, r4
   277e0:	4829      	ldr	r0, [pc, #164]	; (27888 <z_set_prio+0xf4>)
   277e2:	f7ff fca9 	bl	27138 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   277e6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   277e8:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   277ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   277ee:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   277f0:	4b26      	ldr	r3, [pc, #152]	; (2788c <z_set_prio+0xf8>)
   277f2:	429c      	cmp	r4, r3
   277f4:	d108      	bne.n	27808 <z_set_prio+0x74>
   277f6:	4926      	ldr	r1, [pc, #152]	; (27890 <z_set_prio+0xfc>)
   277f8:	4822      	ldr	r0, [pc, #136]	; (27884 <z_set_prio+0xf0>)
   277fa:	22ba      	movs	r2, #186	; 0xba
   277fc:	f003 ffd6 	bl	2b7ac <printk>
   27800:	21ba      	movs	r1, #186	; 0xba
   27802:	4823      	ldr	r0, [pc, #140]	; (27890 <z_set_prio+0xfc>)
   27804:	f004 f969 	bl	2bada <assert_post_action>
	return list->head == list;
   27808:	4a22      	ldr	r2, [pc, #136]	; (27894 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2780a:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   2780e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27812:	42ab      	cmp	r3, r5
   27814:	d02a      	beq.n	2786c <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27816:	b34b      	cbz	r3, 2786c <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   27818:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2781c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   27820:	428f      	cmp	r7, r1
   27822:	d01e      	beq.n	27862 <z_set_prio+0xce>
		return b2 - b1;
   27824:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   27826:	2900      	cmp	r1, #0
   27828:	dd1b      	ble.n	27862 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   2782a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2782c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27830:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27832:	605c      	str	r4, [r3, #4]
			update_cache(1);
   27834:	2001      	movs	r0, #1
   27836:	f7ff fcf5 	bl	27224 <update_cache>
   2783a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2783c:	480f      	ldr	r0, [pc, #60]	; (2787c <z_set_prio+0xe8>)
   2783e:	f7fe fd2b 	bl	26298 <z_spin_unlock_valid>
   27842:	b940      	cbnz	r0, 27856 <z_set_prio+0xc2>
   27844:	490e      	ldr	r1, [pc, #56]	; (27880 <z_set_prio+0xec>)
   27846:	480f      	ldr	r0, [pc, #60]	; (27884 <z_set_prio+0xf0>)
   27848:	22b9      	movs	r2, #185	; 0xb9
   2784a:	f003 ffaf 	bl	2b7ac <printk>
   2784e:	21b9      	movs	r1, #185	; 0xb9
   27850:	480b      	ldr	r0, [pc, #44]	; (27880 <z_set_prio+0xec>)
   27852:	f004 f942 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27856:	f386 8811 	msr	BASEPRI, r6
   2785a:	f3bf 8f6f 	isb	sy
}
   2785e:	4620      	mov	r0, r4
   27860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27862:	4283      	cmp	r3, r0
   27864:	d002      	beq.n	2786c <z_set_prio+0xd8>
   27866:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27868:	2b00      	cmp	r3, #0
   2786a:	d1d7      	bne.n	2781c <z_set_prio+0x88>
	node->prev = tail;
   2786c:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   27870:	6004      	str	r4, [r0, #0]
	list->tail = node;
   27872:	6254      	str	r4, [r2, #36]	; 0x24
}
   27874:	e7de      	b.n	27834 <z_set_prio+0xa0>
			thread->base.prio = prio;
   27876:	73a5      	strb	r5, [r4, #14]
   27878:	2400      	movs	r4, #0
   2787a:	e7df      	b.n	2783c <z_set_prio+0xa8>
   2787c:	2000d48c 	.word	0x2000d48c
   27880:	0002f2d0 	.word	0x0002f2d0
   27884:	0002f296 	.word	0x0002f296
   27888:	2000d46c 	.word	0x2000d46c
   2788c:	2000cc08 	.word	0x2000cc08
   27890:	00031961 	.word	0x00031961
   27894:	2000d44c 	.word	0x2000d44c

00027898 <z_impl_k_thread_suspend>:
{
   27898:	b570      	push	{r4, r5, r6, lr}
   2789a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2789c:	3018      	adds	r0, #24
   2789e:	f000 fc4b 	bl	28138 <z_abort_timeout>
	__asm__ volatile(
   278a2:	f04f 0320 	mov.w	r3, #32
   278a6:	f3ef 8611 	mrs	r6, BASEPRI
   278aa:	f383 8812 	msr	BASEPRI_MAX, r3
   278ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   278b2:	4820      	ldr	r0, [pc, #128]	; (27934 <z_impl_k_thread_suspend+0x9c>)
   278b4:	f7fe fce2 	bl	2627c <z_spin_lock_valid>
   278b8:	b940      	cbnz	r0, 278cc <z_impl_k_thread_suspend+0x34>
   278ba:	491f      	ldr	r1, [pc, #124]	; (27938 <z_impl_k_thread_suspend+0xa0>)
   278bc:	481f      	ldr	r0, [pc, #124]	; (2793c <z_impl_k_thread_suspend+0xa4>)
   278be:	228e      	movs	r2, #142	; 0x8e
   278c0:	f003 ff74 	bl	2b7ac <printk>
   278c4:	218e      	movs	r1, #142	; 0x8e
   278c6:	481c      	ldr	r0, [pc, #112]	; (27938 <z_impl_k_thread_suspend+0xa0>)
   278c8:	f004 f907 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   278cc:	4819      	ldr	r0, [pc, #100]	; (27934 <z_impl_k_thread_suspend+0x9c>)
   278ce:	f7fe fcf1 	bl	262b4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   278d2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   278d6:	7b63      	ldrb	r3, [r4, #13]
   278d8:	2a00      	cmp	r2, #0
   278da:	da06      	bge.n	278ea <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   278dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   278e0:	4621      	mov	r1, r4
   278e2:	4817      	ldr	r0, [pc, #92]	; (27940 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   278e4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   278e6:	f7ff fc27 	bl	27138 <z_priq_dumb_remove>
		update_cache(thread == _current);
   278ea:	4d16      	ldr	r5, [pc, #88]	; (27944 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   278ec:	7b63      	ldrb	r3, [r4, #13]
   278ee:	68a8      	ldr	r0, [r5, #8]
   278f0:	f043 0310 	orr.w	r3, r3, #16
   278f4:	7363      	strb	r3, [r4, #13]
   278f6:	1b03      	subs	r3, r0, r4
   278f8:	4258      	negs	r0, r3
   278fa:	4158      	adcs	r0, r3
   278fc:	f7ff fc92 	bl	27224 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27900:	480c      	ldr	r0, [pc, #48]	; (27934 <z_impl_k_thread_suspend+0x9c>)
   27902:	f7fe fcc9 	bl	26298 <z_spin_unlock_valid>
   27906:	b940      	cbnz	r0, 2791a <z_impl_k_thread_suspend+0x82>
   27908:	490b      	ldr	r1, [pc, #44]	; (27938 <z_impl_k_thread_suspend+0xa0>)
   2790a:	480c      	ldr	r0, [pc, #48]	; (2793c <z_impl_k_thread_suspend+0xa4>)
   2790c:	22b9      	movs	r2, #185	; 0xb9
   2790e:	f003 ff4d 	bl	2b7ac <printk>
   27912:	21b9      	movs	r1, #185	; 0xb9
   27914:	4808      	ldr	r0, [pc, #32]	; (27938 <z_impl_k_thread_suspend+0xa0>)
   27916:	f004 f8e0 	bl	2bada <assert_post_action>
	__asm__ volatile(
   2791a:	f386 8811 	msr	BASEPRI, r6
   2791e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   27922:	68ab      	ldr	r3, [r5, #8]
   27924:	42a3      	cmp	r3, r4
   27926:	d103      	bne.n	27930 <z_impl_k_thread_suspend+0x98>
}
   27928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2792c:	f006 b820 	b.w	2d970 <z_reschedule_unlocked>
}
   27930:	bd70      	pop	{r4, r5, r6, pc}
   27932:	bf00      	nop
   27934:	2000d48c 	.word	0x2000d48c
   27938:	0002f2d0 	.word	0x0002f2d0
   2793c:	0002f296 	.word	0x0002f296
   27940:	2000d46c 	.word	0x2000d46c
   27944:	2000d44c 	.word	0x2000d44c

00027948 <k_sched_unlock>:
{
   27948:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2794a:	f04f 0320 	mov.w	r3, #32
   2794e:	f3ef 8511 	mrs	r5, BASEPRI
   27952:	f383 8812 	msr	BASEPRI_MAX, r3
   27956:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2795a:	4824      	ldr	r0, [pc, #144]	; (279ec <k_sched_unlock+0xa4>)
   2795c:	f7fe fc8e 	bl	2627c <z_spin_lock_valid>
   27960:	b940      	cbnz	r0, 27974 <k_sched_unlock+0x2c>
   27962:	4923      	ldr	r1, [pc, #140]	; (279f0 <k_sched_unlock+0xa8>)
   27964:	4823      	ldr	r0, [pc, #140]	; (279f4 <k_sched_unlock+0xac>)
   27966:	228e      	movs	r2, #142	; 0x8e
   27968:	f003 ff20 	bl	2b7ac <printk>
   2796c:	218e      	movs	r1, #142	; 0x8e
   2796e:	4820      	ldr	r0, [pc, #128]	; (279f0 <k_sched_unlock+0xa8>)
   27970:	f004 f8b3 	bl	2bada <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   27974:	4c20      	ldr	r4, [pc, #128]	; (279f8 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   27976:	481d      	ldr	r0, [pc, #116]	; (279ec <k_sched_unlock+0xa4>)
   27978:	f7fe fc9c 	bl	262b4 <z_spin_lock_set_owner>
   2797c:	68a3      	ldr	r3, [r4, #8]
   2797e:	7bdb      	ldrb	r3, [r3, #15]
   27980:	b953      	cbnz	r3, 27998 <k_sched_unlock+0x50>
   27982:	491e      	ldr	r1, [pc, #120]	; (279fc <k_sched_unlock+0xb4>)
   27984:	481b      	ldr	r0, [pc, #108]	; (279f4 <k_sched_unlock+0xac>)
   27986:	f240 3285 	movw	r2, #901	; 0x385
   2798a:	f003 ff0f 	bl	2b7ac <printk>
   2798e:	f240 3185 	movw	r1, #901	; 0x385
   27992:	481a      	ldr	r0, [pc, #104]	; (279fc <k_sched_unlock+0xb4>)
   27994:	f004 f8a1 	bl	2bada <assert_post_action>
   27998:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2799c:	b153      	cbz	r3, 279b4 <k_sched_unlock+0x6c>
   2799e:	4917      	ldr	r1, [pc, #92]	; (279fc <k_sched_unlock+0xb4>)
   279a0:	4814      	ldr	r0, [pc, #80]	; (279f4 <k_sched_unlock+0xac>)
   279a2:	f240 3286 	movw	r2, #902	; 0x386
   279a6:	f003 ff01 	bl	2b7ac <printk>
   279aa:	f240 3186 	movw	r1, #902	; 0x386
   279ae:	4813      	ldr	r0, [pc, #76]	; (279fc <k_sched_unlock+0xb4>)
   279b0:	f004 f893 	bl	2bada <assert_post_action>
		++_current->base.sched_locked;
   279b4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   279b6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   279b8:	7bd3      	ldrb	r3, [r2, #15]
   279ba:	3301      	adds	r3, #1
   279bc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   279be:	f7ff fc31 	bl	27224 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279c2:	480a      	ldr	r0, [pc, #40]	; (279ec <k_sched_unlock+0xa4>)
   279c4:	f7fe fc68 	bl	26298 <z_spin_unlock_valid>
   279c8:	b940      	cbnz	r0, 279dc <k_sched_unlock+0x94>
   279ca:	4909      	ldr	r1, [pc, #36]	; (279f0 <k_sched_unlock+0xa8>)
   279cc:	4809      	ldr	r0, [pc, #36]	; (279f4 <k_sched_unlock+0xac>)
   279ce:	22b9      	movs	r2, #185	; 0xb9
   279d0:	f003 feec 	bl	2b7ac <printk>
   279d4:	21b9      	movs	r1, #185	; 0xb9
   279d6:	4806      	ldr	r0, [pc, #24]	; (279f0 <k_sched_unlock+0xa8>)
   279d8:	f004 f87f 	bl	2bada <assert_post_action>
	__asm__ volatile(
   279dc:	f385 8811 	msr	BASEPRI, r5
   279e0:	f3bf 8f6f 	isb	sy
}
   279e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   279e8:	f005 bfc2 	b.w	2d970 <z_reschedule_unlocked>
   279ec:	2000d48c 	.word	0x2000d48c
   279f0:	0002f2d0 	.word	0x0002f2d0
   279f4:	0002f296 	.word	0x0002f296
   279f8:	2000d44c 	.word	0x2000d44c
   279fc:	00031961 	.word	0x00031961

00027a00 <z_unpend_first_thread>:
{
   27a00:	b538      	push	{r3, r4, r5, lr}
   27a02:	4604      	mov	r4, r0
	__asm__ volatile(
   27a04:	f04f 0320 	mov.w	r3, #32
   27a08:	f3ef 8511 	mrs	r5, BASEPRI
   27a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   27a10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a14:	4816      	ldr	r0, [pc, #88]	; (27a70 <z_unpend_first_thread+0x70>)
   27a16:	f7fe fc31 	bl	2627c <z_spin_lock_valid>
   27a1a:	b940      	cbnz	r0, 27a2e <z_unpend_first_thread+0x2e>
   27a1c:	4915      	ldr	r1, [pc, #84]	; (27a74 <z_unpend_first_thread+0x74>)
   27a1e:	4816      	ldr	r0, [pc, #88]	; (27a78 <z_unpend_first_thread+0x78>)
   27a20:	228e      	movs	r2, #142	; 0x8e
   27a22:	f003 fec3 	bl	2b7ac <printk>
   27a26:	218e      	movs	r1, #142	; 0x8e
   27a28:	4812      	ldr	r0, [pc, #72]	; (27a74 <z_unpend_first_thread+0x74>)
   27a2a:	f004 f856 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   27a2e:	4810      	ldr	r0, [pc, #64]	; (27a70 <z_unpend_first_thread+0x70>)
   27a30:	f7fe fc40 	bl	262b4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   27a34:	4620      	mov	r0, r4
   27a36:	f005 ffa5 	bl	2d984 <z_priq_dumb_best>
		if (thread != NULL) {
   27a3a:	4604      	mov	r4, r0
   27a3c:	b128      	cbz	r0, 27a4a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   27a3e:	f7ff fb99 	bl	27174 <unpend_thread_no_timeout>
   27a42:	f104 0018 	add.w	r0, r4, #24
   27a46:	f000 fb77 	bl	28138 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a4a:	4809      	ldr	r0, [pc, #36]	; (27a70 <z_unpend_first_thread+0x70>)
   27a4c:	f7fe fc24 	bl	26298 <z_spin_unlock_valid>
   27a50:	b940      	cbnz	r0, 27a64 <z_unpend_first_thread+0x64>
   27a52:	4908      	ldr	r1, [pc, #32]	; (27a74 <z_unpend_first_thread+0x74>)
   27a54:	4808      	ldr	r0, [pc, #32]	; (27a78 <z_unpend_first_thread+0x78>)
   27a56:	22b9      	movs	r2, #185	; 0xb9
   27a58:	f003 fea8 	bl	2b7ac <printk>
   27a5c:	21b9      	movs	r1, #185	; 0xb9
   27a5e:	4805      	ldr	r0, [pc, #20]	; (27a74 <z_unpend_first_thread+0x74>)
   27a60:	f004 f83b 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27a64:	f385 8811 	msr	BASEPRI, r5
   27a68:	f3bf 8f6f 	isb	sy
}
   27a6c:	4620      	mov	r0, r4
   27a6e:	bd38      	pop	{r3, r4, r5, pc}
   27a70:	2000d48c 	.word	0x2000d48c
   27a74:	0002f2d0 	.word	0x0002f2d0
   27a78:	0002f296 	.word	0x0002f296

00027a7c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   27a7c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   27a7e:	4b04      	ldr	r3, [pc, #16]	; (27a90 <z_sched_init+0x14>)
   27a80:	4608      	mov	r0, r1
   27a82:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   27a86:	e9c3 2208 	strd	r2, r2, [r3, #32]
   27a8a:	f7ff ba77 	b.w	26f7c <k_sched_time_slice_set>
   27a8e:	bf00      	nop
   27a90:	2000d44c 	.word	0x2000d44c

00027a94 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   27a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a96:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27a9a:	b153      	cbz	r3, 27ab2 <z_impl_k_yield+0x1e>
   27a9c:	4938      	ldr	r1, [pc, #224]	; (27b80 <z_impl_k_yield+0xec>)
   27a9e:	4839      	ldr	r0, [pc, #228]	; (27b84 <z_impl_k_yield+0xf0>)
   27aa0:	f240 42dc 	movw	r2, #1244	; 0x4dc
   27aa4:	f003 fe82 	bl	2b7ac <printk>
   27aa8:	f240 41dc 	movw	r1, #1244	; 0x4dc
   27aac:	4834      	ldr	r0, [pc, #208]	; (27b80 <z_impl_k_yield+0xec>)
   27aae:	f004 f814 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27ab2:	f04f 0320 	mov.w	r3, #32
   27ab6:	f3ef 8611 	mrs	r6, BASEPRI
   27aba:	f383 8812 	msr	BASEPRI_MAX, r3
   27abe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27ac2:	4831      	ldr	r0, [pc, #196]	; (27b88 <z_impl_k_yield+0xf4>)
   27ac4:	f7fe fbda 	bl	2627c <z_spin_lock_valid>
   27ac8:	b940      	cbnz	r0, 27adc <z_impl_k_yield+0x48>
   27aca:	4930      	ldr	r1, [pc, #192]	; (27b8c <z_impl_k_yield+0xf8>)
   27acc:	482d      	ldr	r0, [pc, #180]	; (27b84 <z_impl_k_yield+0xf0>)
   27ace:	228e      	movs	r2, #142	; 0x8e
   27ad0:	f003 fe6c 	bl	2b7ac <printk>
   27ad4:	218e      	movs	r1, #142	; 0x8e
   27ad6:	482d      	ldr	r0, [pc, #180]	; (27b8c <z_impl_k_yield+0xf8>)
   27ad8:	f003 ffff 	bl	2bada <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   27adc:	4d2c      	ldr	r5, [pc, #176]	; (27b90 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   27ade:	482a      	ldr	r0, [pc, #168]	; (27b88 <z_impl_k_yield+0xf4>)
   27ae0:	f7fe fbe8 	bl	262b4 <z_spin_lock_set_owner>
   27ae4:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   27ae6:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27aea:	7b4b      	ldrb	r3, [r1, #13]
   27aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27af0:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27af2:	f7ff fb21 	bl	27138 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   27af6:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   27af8:	7b63      	ldrb	r3, [r4, #13]
   27afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27afe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27b00:	4b24      	ldr	r3, [pc, #144]	; (27b94 <z_impl_k_yield+0x100>)
   27b02:	429c      	cmp	r4, r3
   27b04:	d108      	bne.n	27b18 <z_impl_k_yield+0x84>
   27b06:	491e      	ldr	r1, [pc, #120]	; (27b80 <z_impl_k_yield+0xec>)
   27b08:	481e      	ldr	r0, [pc, #120]	; (27b84 <z_impl_k_yield+0xf0>)
   27b0a:	22ba      	movs	r2, #186	; 0xba
   27b0c:	f003 fe4e 	bl	2b7ac <printk>
   27b10:	21ba      	movs	r1, #186	; 0xba
   27b12:	481b      	ldr	r0, [pc, #108]	; (27b80 <z_impl_k_yield+0xec>)
   27b14:	f003 ffe1 	bl	2bada <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   27b18:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b1c:	481e      	ldr	r0, [pc, #120]	; (27b98 <z_impl_k_yield+0x104>)
   27b1e:	4283      	cmp	r3, r0
   27b20:	d028      	beq.n	27b74 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27b22:	b33b      	cbz	r3, 27b74 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   27b24:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27b28:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27b2c:	4297      	cmp	r7, r2
   27b2e:	d01c      	beq.n	27b6a <z_impl_k_yield+0xd6>
		return b2 - b1;
   27b30:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   27b32:	2a00      	cmp	r2, #0
   27b34:	dd19      	ble.n	27b6a <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   27b36:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27b38:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27b3c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27b3e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   27b40:	2001      	movs	r0, #1
   27b42:	f7ff fb6f 	bl	27224 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b46:	4810      	ldr	r0, [pc, #64]	; (27b88 <z_impl_k_yield+0xf4>)
   27b48:	f7fe fba6 	bl	26298 <z_spin_unlock_valid>
   27b4c:	b940      	cbnz	r0, 27b60 <z_impl_k_yield+0xcc>
   27b4e:	490f      	ldr	r1, [pc, #60]	; (27b8c <z_impl_k_yield+0xf8>)
   27b50:	480c      	ldr	r0, [pc, #48]	; (27b84 <z_impl_k_yield+0xf0>)
   27b52:	22d0      	movs	r2, #208	; 0xd0
   27b54:	f003 fe2a 	bl	2b7ac <printk>
   27b58:	21d0      	movs	r1, #208	; 0xd0
   27b5a:	480c      	ldr	r0, [pc, #48]	; (27b8c <z_impl_k_yield+0xf8>)
   27b5c:	f003 ffbd 	bl	2bada <assert_post_action>
   27b60:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27b66:	f7f4 bbab 	b.w	1c2c0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   27b6a:	428b      	cmp	r3, r1
   27b6c:	d002      	beq.n	27b74 <z_impl_k_yield+0xe0>
   27b6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27b70:	2b00      	cmp	r3, #0
   27b72:	d1d9      	bne.n	27b28 <z_impl_k_yield+0x94>
	node->prev = tail;
   27b74:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   27b78:	600c      	str	r4, [r1, #0]
	list->tail = node;
   27b7a:	626c      	str	r4, [r5, #36]	; 0x24
}
   27b7c:	e7e0      	b.n	27b40 <z_impl_k_yield+0xac>
   27b7e:	bf00      	nop
   27b80:	00031961 	.word	0x00031961
   27b84:	0002f296 	.word	0x0002f296
   27b88:	2000d48c 	.word	0x2000d48c
   27b8c:	0002f2d0 	.word	0x0002f2d0
   27b90:	2000d44c 	.word	0x2000d44c
   27b94:	2000cc08 	.word	0x2000cc08
   27b98:	2000d46c 	.word	0x2000d46c

00027b9c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   27b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27ba0:	4605      	mov	r5, r0
   27ba2:	460e      	mov	r6, r1
   27ba4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27ba8:	b153      	cbz	r3, 27bc0 <z_tick_sleep+0x24>
   27baa:	493a      	ldr	r1, [pc, #232]	; (27c94 <z_tick_sleep+0xf8>)
   27bac:	483a      	ldr	r0, [pc, #232]	; (27c98 <z_tick_sleep+0xfc>)
   27bae:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   27bb2:	f003 fdfb 	bl	2b7ac <printk>
   27bb6:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   27bba:	4836      	ldr	r0, [pc, #216]	; (27c94 <z_tick_sleep+0xf8>)
   27bbc:	f003 ff8d 	bl	2bada <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   27bc0:	ea55 0306 	orrs.w	r3, r5, r6
   27bc4:	d103      	bne.n	27bce <z_tick_sleep+0x32>
	z_impl_k_yield();
   27bc6:	f7ff ff65 	bl	27a94 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   27bca:	2000      	movs	r0, #0
   27bcc:	e05f      	b.n	27c8e <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   27bce:	f06f 0401 	mvn.w	r4, #1
   27bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27bd6:	1b64      	subs	r4, r4, r5
   27bd8:	eb63 0306 	sbc.w	r3, r3, r6
   27bdc:	2c01      	cmp	r4, #1
   27bde:	f173 0300 	sbcs.w	r3, r3, #0
   27be2:	da02      	bge.n	27bea <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27be4:	f005 fee4 	bl	2d9b0 <sys_clock_tick_get_32>
   27be8:	1944      	adds	r4, r0, r5
   27bea:	f04f 0320 	mov.w	r3, #32
   27bee:	f3ef 8811 	mrs	r8, BASEPRI
   27bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   27bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bfa:	4828      	ldr	r0, [pc, #160]	; (27c9c <z_tick_sleep+0x100>)
   27bfc:	f7fe fb3e 	bl	2627c <z_spin_lock_valid>
   27c00:	b940      	cbnz	r0, 27c14 <z_tick_sleep+0x78>
   27c02:	4927      	ldr	r1, [pc, #156]	; (27ca0 <z_tick_sleep+0x104>)
   27c04:	4824      	ldr	r0, [pc, #144]	; (27c98 <z_tick_sleep+0xfc>)
   27c06:	228e      	movs	r2, #142	; 0x8e
   27c08:	f003 fdd0 	bl	2b7ac <printk>
   27c0c:	218e      	movs	r1, #142	; 0x8e
   27c0e:	4824      	ldr	r0, [pc, #144]	; (27ca0 <z_tick_sleep+0x104>)
   27c10:	f003 ff63 	bl	2bada <assert_post_action>
	pending_current = _current;
   27c14:	4f23      	ldr	r7, [pc, #140]	; (27ca4 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   27c16:	4821      	ldr	r0, [pc, #132]	; (27c9c <z_tick_sleep+0x100>)
   27c18:	f7fe fb4c 	bl	262b4 <z_spin_lock_set_owner>
   27c1c:	68b8      	ldr	r0, [r7, #8]
   27c1e:	4b22      	ldr	r3, [pc, #136]	; (27ca8 <z_tick_sleep+0x10c>)
   27c20:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27c22:	f7ff fced 	bl	27600 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27c26:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27c28:	462a      	mov	r2, r5
   27c2a:	4633      	mov	r3, r6
   27c2c:	3018      	adds	r0, #24
   27c2e:	491f      	ldr	r1, [pc, #124]	; (27cac <z_tick_sleep+0x110>)
   27c30:	f000 f9d4 	bl	27fdc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27c34:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c36:	4819      	ldr	r0, [pc, #100]	; (27c9c <z_tick_sleep+0x100>)
   27c38:	7b53      	ldrb	r3, [r2, #13]
   27c3a:	f043 0310 	orr.w	r3, r3, #16
   27c3e:	7353      	strb	r3, [r2, #13]
   27c40:	f7fe fb2a 	bl	26298 <z_spin_unlock_valid>
   27c44:	b940      	cbnz	r0, 27c58 <z_tick_sleep+0xbc>
   27c46:	4916      	ldr	r1, [pc, #88]	; (27ca0 <z_tick_sleep+0x104>)
   27c48:	4813      	ldr	r0, [pc, #76]	; (27c98 <z_tick_sleep+0xfc>)
   27c4a:	22d0      	movs	r2, #208	; 0xd0
   27c4c:	f003 fdae 	bl	2b7ac <printk>
   27c50:	21d0      	movs	r1, #208	; 0xd0
   27c52:	4813      	ldr	r0, [pc, #76]	; (27ca0 <z_tick_sleep+0x104>)
   27c54:	f003 ff41 	bl	2bada <assert_post_action>
   27c58:	4640      	mov	r0, r8
   27c5a:	f7f4 fb31 	bl	1c2c0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   27c5e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27c60:	7b5b      	ldrb	r3, [r3, #13]
   27c62:	06db      	lsls	r3, r3, #27
   27c64:	d50a      	bpl.n	27c7c <z_tick_sleep+0xe0>
   27c66:	490b      	ldr	r1, [pc, #44]	; (27c94 <z_tick_sleep+0xf8>)
   27c68:	480b      	ldr	r0, [pc, #44]	; (27c98 <z_tick_sleep+0xfc>)
   27c6a:	f240 5219 	movw	r2, #1305	; 0x519
   27c6e:	f003 fd9d 	bl	2b7ac <printk>
   27c72:	f240 5119 	movw	r1, #1305	; 0x519
   27c76:	4807      	ldr	r0, [pc, #28]	; (27c94 <z_tick_sleep+0xf8>)
   27c78:	f003 ff2f 	bl	2bada <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27c7c:	f005 fe98 	bl	2d9b0 <sys_clock_tick_get_32>
   27c80:	1a20      	subs	r0, r4, r0
   27c82:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   27c86:	2801      	cmp	r0, #1
   27c88:	f173 0300 	sbcs.w	r3, r3, #0
   27c8c:	db9d      	blt.n	27bca <z_tick_sleep+0x2e>
}
   27c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27c92:	bf00      	nop
   27c94:	00031961 	.word	0x00031961
   27c98:	0002f296 	.word	0x0002f296
   27c9c:	2000d48c 	.word	0x2000d48c
   27ca0:	0002f2d0 	.word	0x0002f2d0
   27ca4:	2000d44c 	.word	0x2000d44c
   27ca8:	2000d488 	.word	0x2000d488
   27cac:	00027571 	.word	0x00027571

00027cb0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   27cb0:	b538      	push	{r3, r4, r5, lr}
   27cb2:	4605      	mov	r5, r0
   27cb4:	460c      	mov	r4, r1
   27cb6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27cba:	b153      	cbz	r3, 27cd2 <z_impl_k_sleep+0x22>
   27cbc:	4911      	ldr	r1, [pc, #68]	; (27d04 <z_impl_k_sleep+0x54>)
   27cbe:	4812      	ldr	r0, [pc, #72]	; (27d08 <z_impl_k_sleep+0x58>)
   27cc0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   27cc4:	f003 fd72 	bl	2b7ac <printk>
   27cc8:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   27ccc:	480d      	ldr	r0, [pc, #52]	; (27d04 <z_impl_k_sleep+0x54>)
   27cce:	f003 ff04 	bl	2bada <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27cd2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   27cd6:	bf08      	it	eq
   27cd8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   27cdc:	d106      	bne.n	27cec <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   27cde:	4b0b      	ldr	r3, [pc, #44]	; (27d0c <z_impl_k_sleep+0x5c>)
   27ce0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27ce2:	f7ff fdd9 	bl	27898 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   27ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   27cea:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   27cec:	4628      	mov	r0, r5
   27cee:	4621      	mov	r1, r4
   27cf0:	f7ff ff54 	bl	27b9c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   27cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27cf8:	fb80 0303 	smull	r0, r3, r0, r3
   27cfc:	0bc0      	lsrs	r0, r0, #15
   27cfe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   27d02:	e7f2      	b.n	27cea <z_impl_k_sleep+0x3a>
   27d04:	00031961 	.word	0x00031961
   27d08:	0002f296 	.word	0x0002f296
   27d0c:	2000d44c 	.word	0x2000d44c

00027d10 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27d10:	4b01      	ldr	r3, [pc, #4]	; (27d18 <z_impl_z_current_get+0x8>)
   27d12:	6898      	ldr	r0, [r3, #8]
   27d14:	4770      	bx	lr
   27d16:	bf00      	nop
   27d18:	2000d44c 	.word	0x2000d44c

00027d1c <z_impl_k_is_preempt_thread>:
   27d1c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   27d20:	b93b      	cbnz	r3, 27d32 <z_impl_k_is_preempt_thread+0x16>
   27d22:	4b05      	ldr	r3, [pc, #20]	; (27d38 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27d24:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   27d26:	89d8      	ldrh	r0, [r3, #14]
   27d28:	287f      	cmp	r0, #127	; 0x7f
   27d2a:	bf8c      	ite	hi
   27d2c:	2000      	movhi	r0, #0
   27d2e:	2001      	movls	r0, #1
   27d30:	4770      	bx	lr
   27d32:	2000      	movs	r0, #0
}
   27d34:	4770      	bx	lr
   27d36:	bf00      	nop
   27d38:	2000d44c 	.word	0x2000d44c

00027d3c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   27d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27d40:	4604      	mov	r4, r0
   27d42:	f04f 0320 	mov.w	r3, #32
   27d46:	f3ef 8611 	mrs	r6, BASEPRI
   27d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   27d4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d52:	483e      	ldr	r0, [pc, #248]	; (27e4c <z_thread_abort+0x110>)
   27d54:	f7fe fa92 	bl	2627c <z_spin_lock_valid>
   27d58:	b940      	cbnz	r0, 27d6c <z_thread_abort+0x30>
   27d5a:	493d      	ldr	r1, [pc, #244]	; (27e50 <z_thread_abort+0x114>)
   27d5c:	483d      	ldr	r0, [pc, #244]	; (27e54 <z_thread_abort+0x118>)
   27d5e:	228e      	movs	r2, #142	; 0x8e
   27d60:	f003 fd24 	bl	2b7ac <printk>
   27d64:	218e      	movs	r1, #142	; 0x8e
   27d66:	483a      	ldr	r0, [pc, #232]	; (27e50 <z_thread_abort+0x114>)
   27d68:	f003 feb7 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   27d6c:	4837      	ldr	r0, [pc, #220]	; (27e4c <z_thread_abort+0x110>)
   27d6e:	f7fe faa1 	bl	262b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27d72:	7b63      	ldrb	r3, [r4, #13]
   27d74:	071a      	lsls	r2, r3, #28
   27d76:	d512      	bpl.n	27d9e <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d78:	4834      	ldr	r0, [pc, #208]	; (27e4c <z_thread_abort+0x110>)
   27d7a:	f7fe fa8d 	bl	26298 <z_spin_unlock_valid>
   27d7e:	b940      	cbnz	r0, 27d92 <z_thread_abort+0x56>
   27d80:	4933      	ldr	r1, [pc, #204]	; (27e50 <z_thread_abort+0x114>)
   27d82:	4834      	ldr	r0, [pc, #208]	; (27e54 <z_thread_abort+0x118>)
   27d84:	22b9      	movs	r2, #185	; 0xb9
   27d86:	f003 fd11 	bl	2b7ac <printk>
   27d8a:	21b9      	movs	r1, #185	; 0xb9
   27d8c:	4830      	ldr	r0, [pc, #192]	; (27e50 <z_thread_abort+0x114>)
   27d8e:	f003 fea4 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27d92:	f386 8811 	msr	BASEPRI, r6
   27d96:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   27d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27d9e:	f023 0220 	bic.w	r2, r3, #32
   27da2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   27da6:	09d2      	lsrs	r2, r2, #7
   27da8:	d138      	bne.n	27e1c <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27daa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   27dac:	68a3      	ldr	r3, [r4, #8]
   27dae:	b113      	cbz	r3, 27db6 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   27db0:	4620      	mov	r0, r4
   27db2:	f7ff f9df 	bl	27174 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27db6:	f104 0018 	add.w	r0, r4, #24
   27dba:	f000 f9bd 	bl	28138 <z_abort_timeout>
   27dbe:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   27dc2:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   27dc6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27dc8:	42bd      	cmp	r5, r7
   27dca:	d000      	beq.n	27dce <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27dcc:	bb85      	cbnz	r5, 27e30 <z_thread_abort+0xf4>
		update_cache(1);
   27dce:	2001      	movs	r0, #1
   27dd0:	f7ff fa28 	bl	27224 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   27dd4:	4b20      	ldr	r3, [pc, #128]	; (27e58 <z_thread_abort+0x11c>)
   27dd6:	689b      	ldr	r3, [r3, #8]
   27dd8:	42a3      	cmp	r3, r4
   27dda:	d1cd      	bne.n	27d78 <z_thread_abort+0x3c>
   27ddc:	f3ef 8305 	mrs	r3, IPSR
   27de0:	2b00      	cmp	r3, #0
   27de2:	d1c9      	bne.n	27d78 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27de4:	4819      	ldr	r0, [pc, #100]	; (27e4c <z_thread_abort+0x110>)
   27de6:	f7fe fa57 	bl	26298 <z_spin_unlock_valid>
   27dea:	b940      	cbnz	r0, 27dfe <z_thread_abort+0xc2>
   27dec:	4918      	ldr	r1, [pc, #96]	; (27e50 <z_thread_abort+0x114>)
   27dee:	4819      	ldr	r0, [pc, #100]	; (27e54 <z_thread_abort+0x118>)
   27df0:	22d0      	movs	r2, #208	; 0xd0
   27df2:	f003 fcdb 	bl	2b7ac <printk>
   27df6:	21d0      	movs	r1, #208	; 0xd0
   27df8:	4815      	ldr	r0, [pc, #84]	; (27e50 <z_thread_abort+0x114>)
   27dfa:	f003 fe6e 	bl	2bada <assert_post_action>
   27dfe:	4630      	mov	r0, r6
   27e00:	f7f4 fa5e 	bl	1c2c0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27e04:	f240 624b 	movw	r2, #1611	; 0x64b
   27e08:	4914      	ldr	r1, [pc, #80]	; (27e5c <z_thread_abort+0x120>)
   27e0a:	4812      	ldr	r0, [pc, #72]	; (27e54 <z_thread_abort+0x118>)
   27e0c:	f003 fcce 	bl	2b7ac <printk>
   27e10:	f240 614b 	movw	r1, #1611	; 0x64b
   27e14:	4811      	ldr	r0, [pc, #68]	; (27e5c <z_thread_abort+0x120>)
   27e16:	f003 fe60 	bl	2bada <assert_post_action>
   27e1a:	e7ad      	b.n	27d78 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27e1c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27e20:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   27e24:	4621      	mov	r1, r4
   27e26:	480e      	ldr	r0, [pc, #56]	; (27e60 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27e28:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27e2a:	f7ff f985 	bl	27138 <z_priq_dumb_remove>
}
   27e2e:	e7bd      	b.n	27dac <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   27e30:	4628      	mov	r0, r5
   27e32:	f7ff f99f 	bl	27174 <unpend_thread_no_timeout>
   27e36:	f105 0018 	add.w	r0, r5, #24
   27e3a:	f000 f97d 	bl	28138 <z_abort_timeout>
		ready_thread(thread);
   27e3e:	4628      	mov	r0, r5
   27e40:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   27e44:	f7ff fad2 	bl	273ec <ready_thread>
   27e48:	e7bd      	b.n	27dc6 <z_thread_abort+0x8a>
   27e4a:	bf00      	nop
   27e4c:	2000d48c 	.word	0x2000d48c
   27e50:	0002f2d0 	.word	0x0002f2d0
   27e54:	0002f296 	.word	0x0002f296
   27e58:	2000d44c 	.word	0x2000d44c
   27e5c:	00031961 	.word	0x00031961
   27e60:	2000d46c 	.word	0x2000d46c

00027e64 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e66:	4604      	mov	r4, r0
   27e68:	460e      	mov	r6, r1
   27e6a:	4615      	mov	r5, r2
	__asm__ volatile(
   27e6c:	f04f 0320 	mov.w	r3, #32
   27e70:	f3ef 8711 	mrs	r7, BASEPRI
   27e74:	f383 8812 	msr	BASEPRI_MAX, r3
   27e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e7c:	4819      	ldr	r0, [pc, #100]	; (27ee4 <z_sched_wake+0x80>)
   27e7e:	f7fe f9fd 	bl	2627c <z_spin_lock_valid>
   27e82:	b940      	cbnz	r0, 27e96 <z_sched_wake+0x32>
   27e84:	4918      	ldr	r1, [pc, #96]	; (27ee8 <z_sched_wake+0x84>)
   27e86:	4819      	ldr	r0, [pc, #100]	; (27eec <z_sched_wake+0x88>)
   27e88:	228e      	movs	r2, #142	; 0x8e
   27e8a:	f003 fc8f 	bl	2b7ac <printk>
   27e8e:	218e      	movs	r1, #142	; 0x8e
   27e90:	4815      	ldr	r0, [pc, #84]	; (27ee8 <z_sched_wake+0x84>)
   27e92:	f003 fe22 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   27e96:	4813      	ldr	r0, [pc, #76]	; (27ee4 <z_sched_wake+0x80>)
   27e98:	f7fe fa0c 	bl	262b4 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   27e9c:	4620      	mov	r0, r4
   27e9e:	f005 fd71 	bl	2d984 <z_priq_dumb_best>

		if (thread != NULL) {
   27ea2:	4604      	mov	r4, r0
   27ea4:	b158      	cbz	r0, 27ebe <z_sched_wake+0x5a>
   27ea6:	67c6      	str	r6, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   27ea8:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27eaa:	f7ff f963 	bl	27174 <unpend_thread_no_timeout>
   27eae:	f104 0018 	add.w	r0, r4, #24
   27eb2:	f000 f941 	bl	28138 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27eb6:	4620      	mov	r0, r4
   27eb8:	f7ff fa98 	bl	273ec <ready_thread>
			ret = true;
   27ebc:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ebe:	4809      	ldr	r0, [pc, #36]	; (27ee4 <z_sched_wake+0x80>)
   27ec0:	f7fe f9ea 	bl	26298 <z_spin_unlock_valid>
   27ec4:	b940      	cbnz	r0, 27ed8 <z_sched_wake+0x74>
   27ec6:	4908      	ldr	r1, [pc, #32]	; (27ee8 <z_sched_wake+0x84>)
   27ec8:	4808      	ldr	r0, [pc, #32]	; (27eec <z_sched_wake+0x88>)
   27eca:	22b9      	movs	r2, #185	; 0xb9
   27ecc:	f003 fc6e 	bl	2b7ac <printk>
   27ed0:	21b9      	movs	r1, #185	; 0xb9
   27ed2:	4805      	ldr	r0, [pc, #20]	; (27ee8 <z_sched_wake+0x84>)
   27ed4:	f003 fe01 	bl	2bada <assert_post_action>
	__asm__ volatile(
   27ed8:	f387 8811 	msr	BASEPRI, r7
   27edc:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27ee0:	4620      	mov	r0, r4
   27ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27ee4:	2000d48c 	.word	0x2000d48c
   27ee8:	0002f2d0 	.word	0x0002f2d0
   27eec:	0002f296 	.word	0x0002f296

00027ef0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27ef0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27ef2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   27ef6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27ef8:	e9cd 6700 	strd	r6, r7, [sp]
   27efc:	f7ff fc24 	bl	27748 <z_pend_curr>

	if (data != NULL) {
   27f00:	b11c      	cbz	r4, 27f0a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   27f02:	4b03      	ldr	r3, [pc, #12]	; (27f10 <z_sched_wait+0x20>)
   27f04:	689b      	ldr	r3, [r3, #8]
   27f06:	695b      	ldr	r3, [r3, #20]
   27f08:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27f0a:	b002      	add	sp, #8
   27f0c:	bdd0      	pop	{r4, r6, r7, pc}
   27f0e:	bf00      	nop
   27f10:	2000d44c 	.word	0x2000d44c

00027f14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   27f14:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   27f16:	4806      	ldr	r0, [pc, #24]	; (27f30 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   27f18:	4a06      	ldr	r2, [pc, #24]	; (27f34 <z_data_copy+0x20>)
   27f1a:	4907      	ldr	r1, [pc, #28]	; (27f38 <z_data_copy+0x24>)
   27f1c:	1a12      	subs	r2, r2, r0
   27f1e:	f005 fca0 	bl	2d862 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   27f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   27f26:	4a05      	ldr	r2, [pc, #20]	; (27f3c <z_data_copy+0x28>)
   27f28:	4905      	ldr	r1, [pc, #20]	; (27f40 <z_data_copy+0x2c>)
   27f2a:	4806      	ldr	r0, [pc, #24]	; (27f44 <z_data_copy+0x30>)
   27f2c:	f005 bc99 	b.w	2d862 <z_early_memcpy>
   27f30:	2000c500 	.word	0x2000c500
   27f34:	2000caf8 	.word	0x2000caf8
   27f38:	00031dec 	.word	0x00031dec
   27f3c:	00000000 	.word	0x00000000
   27f40:	00031dd4 	.word	0x00031dd4
   27f44:	2000c500 	.word	0x2000c500

00027f48 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   27f48:	4b03      	ldr	r3, [pc, #12]	; (27f58 <elapsed+0x10>)
   27f4a:	681b      	ldr	r3, [r3, #0]
   27f4c:	b90b      	cbnz	r3, 27f52 <elapsed+0xa>
   27f4e:	f7f6 bbc5 	b.w	1e6dc <sys_clock_elapsed>
}
   27f52:	2000      	movs	r0, #0
   27f54:	4770      	bx	lr
   27f56:	bf00      	nop
   27f58:	2000d498 	.word	0x2000d498

00027f5c <next_timeout>:
	return list->head == list;
   27f5c:	4b10      	ldr	r3, [pc, #64]	; (27fa0 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   27f5e:	b510      	push	{r4, lr}
   27f60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f62:	429c      	cmp	r4, r3
   27f64:	bf08      	it	eq
   27f66:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   27f68:	f7ff ffee 	bl	27f48 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   27f6c:	b1a4      	cbz	r4, 27f98 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   27f6e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   27f72:	1a1b      	subs	r3, r3, r0
   27f74:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   27f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27f7c:	f170 0200 	sbcs.w	r2, r0, #0
   27f80:	da0a      	bge.n	27f98 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   27f82:	2800      	cmp	r0, #0
   27f84:	bfac      	ite	ge
   27f86:	4618      	movge	r0, r3
   27f88:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27f8a:	4b06      	ldr	r3, [pc, #24]	; (27fa4 <next_timeout+0x48>)
   27f8c:	691b      	ldr	r3, [r3, #16]
   27f8e:	b113      	cbz	r3, 27f96 <next_timeout+0x3a>
   27f90:	4298      	cmp	r0, r3
   27f92:	bfa8      	it	ge
   27f94:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   27f96:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   27f98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27f9c:	e7f5      	b.n	27f8a <next_timeout+0x2e>
   27f9e:	bf00      	nop
   27fa0:	2000c6cc 	.word	0x2000c6cc
   27fa4:	2000d44c 	.word	0x2000d44c

00027fa8 <remove_timeout>:
{
   27fa8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   27faa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27fac:	b168      	cbz	r0, 27fca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   27fae:	4a0a      	ldr	r2, [pc, #40]	; (27fd8 <remove_timeout+0x30>)
   27fb0:	6852      	ldr	r2, [r2, #4]
   27fb2:	4290      	cmp	r0, r2
   27fb4:	d009      	beq.n	27fca <remove_timeout+0x22>
	if (next(t) != NULL) {
   27fb6:	b143      	cbz	r3, 27fca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   27fb8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27fbc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   27fc0:	1912      	adds	r2, r2, r4
   27fc2:	eb41 0105 	adc.w	r1, r1, r5
   27fc6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   27fca:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   27fcc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27fce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27fd0:	2300      	movs	r3, #0
	node->prev = NULL;
   27fd2:	e9c0 3300 	strd	r3, r3, [r0]
}
   27fd6:	bd30      	pop	{r4, r5, pc}
   27fd8:	2000c6cc 	.word	0x2000c6cc

00027fdc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27fe0:	bf08      	it	eq
   27fe2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   27fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27fea:	4604      	mov	r4, r0
   27fec:	460e      	mov	r6, r1
   27fee:	4698      	mov	r8, r3
   27ff0:	4615      	mov	r5, r2
   27ff2:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27ff4:	f000 8090 	beq.w	28118 <z_add_timeout+0x13c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27ff8:	6803      	ldr	r3, [r0, #0]
   27ffa:	b143      	cbz	r3, 2800e <z_add_timeout+0x32>
   27ffc:	4947      	ldr	r1, [pc, #284]	; (2811c <z_add_timeout+0x140>)
   27ffe:	4848      	ldr	r0, [pc, #288]	; (28120 <z_add_timeout+0x144>)
   28000:	2263      	movs	r2, #99	; 0x63
   28002:	f003 fbd3 	bl	2b7ac <printk>
   28006:	2163      	movs	r1, #99	; 0x63
   28008:	4844      	ldr	r0, [pc, #272]	; (2811c <z_add_timeout+0x140>)
   2800a:	f003 fd66 	bl	2bada <assert_post_action>
	to->fn = fn;
   2800e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   28010:	f04f 0320 	mov.w	r3, #32
   28014:	f3ef 8611 	mrs	r6, BASEPRI
   28018:	f383 8812 	msr	BASEPRI_MAX, r3
   2801c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28020:	4840      	ldr	r0, [pc, #256]	; (28124 <z_add_timeout+0x148>)
   28022:	f7fe f92b 	bl	2627c <z_spin_lock_valid>
   28026:	b940      	cbnz	r0, 2803a <z_add_timeout+0x5e>
   28028:	493f      	ldr	r1, [pc, #252]	; (28128 <z_add_timeout+0x14c>)
   2802a:	483d      	ldr	r0, [pc, #244]	; (28120 <z_add_timeout+0x144>)
   2802c:	228e      	movs	r2, #142	; 0x8e
   2802e:	f003 fbbd 	bl	2b7ac <printk>
   28032:	218e      	movs	r1, #142	; 0x8e
   28034:	483c      	ldr	r0, [pc, #240]	; (28128 <z_add_timeout+0x14c>)
   28036:	f003 fd50 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2803a:	483a      	ldr	r0, [pc, #232]	; (28124 <z_add_timeout+0x148>)
   2803c:	f7fe f93a 	bl	262b4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   28040:	f06f 0201 	mvn.w	r2, #1
   28044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28048:	1b53      	subs	r3, r2, r5
   2804a:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2804e:	2b00      	cmp	r3, #0
   28050:	db1b      	blt.n	2808a <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   28052:	4b36      	ldr	r3, [pc, #216]	; (2812c <z_add_timeout+0x150>)
   28054:	e9d3 1300 	ldrd	r1, r3, [r3]
   28058:	1a52      	subs	r2, r2, r1
   2805a:	eb60 0303 	sbc.w	r3, r0, r3
   2805e:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   28060:	eb63 0707 	sbc.w	r7, r3, r7
   28064:	2d01      	cmp	r5, #1
   28066:	f177 0300 	sbcs.w	r3, r7, #0
   2806a:	bfbc      	itt	lt
   2806c:	2501      	movlt	r5, #1
   2806e:	2700      	movlt	r7, #0
   28070:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   28074:	4a2e      	ldr	r2, [pc, #184]	; (28130 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   28076:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2807a:	4293      	cmp	r3, r2
   2807c:	d118      	bne.n	280b0 <z_add_timeout+0xd4>
	node->prev = tail;
   2807e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   28082:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   28086:	6054      	str	r4, [r2, #4]
}
   28088:	e026      	b.n	280d8 <z_add_timeout+0xfc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2808a:	f7ff ff5d 	bl	27f48 <elapsed>
   2808e:	3501      	adds	r5, #1
   28090:	f148 0800 	adc.w	r8, r8, #0
   28094:	182d      	adds	r5, r5, r0
   28096:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   2809a:	e9c4 5004 	strd	r5, r0, [r4, #16]
   2809e:	e7e9      	b.n	28074 <z_add_timeout+0x98>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   280a0:	1a09      	subs	r1, r1, r0
   280a2:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   280a6:	459c      	cmp	ip, r3
   280a8:	e9c4 1504 	strd	r1, r5, [r4, #16]
   280ac:	d0e7      	beq.n	2807e <z_add_timeout+0xa2>
   280ae:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   280b0:	2b00      	cmp	r3, #0
   280b2:	d0e4      	beq.n	2807e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   280b4:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   280b8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   280bc:	4281      	cmp	r1, r0
   280be:	eb75 0e07 	sbcs.w	lr, r5, r7
   280c2:	daed      	bge.n	280a0 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   280c4:	1a41      	subs	r1, r0, r1
   280c6:	eb67 0505 	sbc.w	r5, r7, r5
   280ca:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   280ce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   280d0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   280d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   280d6:	605c      	str	r4, [r3, #4]
	return list->head == list;
   280d8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   280da:	4293      	cmp	r3, r2
   280dc:	d00b      	beq.n	280f6 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   280de:	429c      	cmp	r4, r3
   280e0:	d109      	bne.n	280f6 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   280e2:	f7ff ff3b 	bl	27f5c <next_timeout>

			if (next_time == 0 ||
   280e6:	b118      	cbz	r0, 280f0 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   280e8:	4b12      	ldr	r3, [pc, #72]	; (28134 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   280ea:	691b      	ldr	r3, [r3, #16]
   280ec:	4283      	cmp	r3, r0
   280ee:	d002      	beq.n	280f6 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   280f0:	2100      	movs	r1, #0
   280f2:	f7f6 fac3 	bl	1e67c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   280f6:	480b      	ldr	r0, [pc, #44]	; (28124 <z_add_timeout+0x148>)
   280f8:	f7fe f8ce 	bl	26298 <z_spin_unlock_valid>
   280fc:	b940      	cbnz	r0, 28110 <z_add_timeout+0x134>
   280fe:	490a      	ldr	r1, [pc, #40]	; (28128 <z_add_timeout+0x14c>)
   28100:	4807      	ldr	r0, [pc, #28]	; (28120 <z_add_timeout+0x144>)
   28102:	22b9      	movs	r2, #185	; 0xb9
   28104:	f003 fb52 	bl	2b7ac <printk>
   28108:	21b9      	movs	r1, #185	; 0xb9
   2810a:	4807      	ldr	r0, [pc, #28]	; (28128 <z_add_timeout+0x14c>)
   2810c:	f003 fce5 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28110:	f386 8811 	msr	BASEPRI, r6
   28114:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   28118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2811c:	00031983 	.word	0x00031983
   28120:	0002f296 	.word	0x0002f296
   28124:	2000d49c 	.word	0x2000d49c
   28128:	0002f2d0 	.word	0x0002f2d0
   2812c:	2000cd08 	.word	0x2000cd08
   28130:	2000c6cc 	.word	0x2000c6cc
   28134:	2000d44c 	.word	0x2000d44c

00028138 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   28138:	b538      	push	{r3, r4, r5, lr}
   2813a:	4604      	mov	r4, r0
	__asm__ volatile(
   2813c:	f04f 0320 	mov.w	r3, #32
   28140:	f3ef 8511 	mrs	r5, BASEPRI
   28144:	f383 8812 	msr	BASEPRI_MAX, r3
   28148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2814c:	4815      	ldr	r0, [pc, #84]	; (281a4 <z_abort_timeout+0x6c>)
   2814e:	f7fe f895 	bl	2627c <z_spin_lock_valid>
   28152:	b940      	cbnz	r0, 28166 <z_abort_timeout+0x2e>
   28154:	4914      	ldr	r1, [pc, #80]	; (281a8 <z_abort_timeout+0x70>)
   28156:	4815      	ldr	r0, [pc, #84]	; (281ac <z_abort_timeout+0x74>)
   28158:	228e      	movs	r2, #142	; 0x8e
   2815a:	f003 fb27 	bl	2b7ac <printk>
   2815e:	218e      	movs	r1, #142	; 0x8e
   28160:	4811      	ldr	r0, [pc, #68]	; (281a8 <z_abort_timeout+0x70>)
   28162:	f003 fcba 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   28166:	480f      	ldr	r0, [pc, #60]	; (281a4 <z_abort_timeout+0x6c>)
   28168:	f7fe f8a4 	bl	262b4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2816c:	6823      	ldr	r3, [r4, #0]
   2816e:	b1b3      	cbz	r3, 2819e <z_abort_timeout+0x66>
			remove_timeout(to);
   28170:	4620      	mov	r0, r4
   28172:	f7ff ff19 	bl	27fa8 <remove_timeout>
			ret = 0;
   28176:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28178:	480a      	ldr	r0, [pc, #40]	; (281a4 <z_abort_timeout+0x6c>)
   2817a:	f7fe f88d 	bl	26298 <z_spin_unlock_valid>
   2817e:	b940      	cbnz	r0, 28192 <z_abort_timeout+0x5a>
   28180:	4909      	ldr	r1, [pc, #36]	; (281a8 <z_abort_timeout+0x70>)
   28182:	480a      	ldr	r0, [pc, #40]	; (281ac <z_abort_timeout+0x74>)
   28184:	22b9      	movs	r2, #185	; 0xb9
   28186:	f003 fb11 	bl	2b7ac <printk>
   2818a:	21b9      	movs	r1, #185	; 0xb9
   2818c:	4806      	ldr	r0, [pc, #24]	; (281a8 <z_abort_timeout+0x70>)
   2818e:	f003 fca4 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28192:	f385 8811 	msr	BASEPRI, r5
   28196:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2819a:	4620      	mov	r0, r4
   2819c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2819e:	f06f 0415 	mvn.w	r4, #21
   281a2:	e7e9      	b.n	28178 <z_abort_timeout+0x40>
   281a4:	2000d49c 	.word	0x2000d49c
   281a8:	0002f2d0 	.word	0x0002f2d0
   281ac:	0002f296 	.word	0x0002f296

000281b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   281b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   281b2:	f04f 0320 	mov.w	r3, #32
   281b6:	f3ef 8511 	mrs	r5, BASEPRI
   281ba:	f383 8812 	msr	BASEPRI_MAX, r3
   281be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281c2:	4813      	ldr	r0, [pc, #76]	; (28210 <z_get_next_timeout_expiry+0x60>)
   281c4:	f7fe f85a 	bl	2627c <z_spin_lock_valid>
   281c8:	b940      	cbnz	r0, 281dc <z_get_next_timeout_expiry+0x2c>
   281ca:	4912      	ldr	r1, [pc, #72]	; (28214 <z_get_next_timeout_expiry+0x64>)
   281cc:	4812      	ldr	r0, [pc, #72]	; (28218 <z_get_next_timeout_expiry+0x68>)
   281ce:	228e      	movs	r2, #142	; 0x8e
   281d0:	f003 faec 	bl	2b7ac <printk>
   281d4:	218e      	movs	r1, #142	; 0x8e
   281d6:	480f      	ldr	r0, [pc, #60]	; (28214 <z_get_next_timeout_expiry+0x64>)
   281d8:	f003 fc7f 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   281dc:	480c      	ldr	r0, [pc, #48]	; (28210 <z_get_next_timeout_expiry+0x60>)
   281de:	f7fe f869 	bl	262b4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   281e2:	f7ff febb 	bl	27f5c <next_timeout>
   281e6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   281e8:	4809      	ldr	r0, [pc, #36]	; (28210 <z_get_next_timeout_expiry+0x60>)
   281ea:	f7fe f855 	bl	26298 <z_spin_unlock_valid>
   281ee:	b940      	cbnz	r0, 28202 <z_get_next_timeout_expiry+0x52>
   281f0:	4908      	ldr	r1, [pc, #32]	; (28214 <z_get_next_timeout_expiry+0x64>)
   281f2:	4809      	ldr	r0, [pc, #36]	; (28218 <z_get_next_timeout_expiry+0x68>)
   281f4:	22b9      	movs	r2, #185	; 0xb9
   281f6:	f003 fad9 	bl	2b7ac <printk>
   281fa:	21b9      	movs	r1, #185	; 0xb9
   281fc:	4805      	ldr	r0, [pc, #20]	; (28214 <z_get_next_timeout_expiry+0x64>)
   281fe:	f003 fc6c 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28202:	f385 8811 	msr	BASEPRI, r5
   28206:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2820a:	4620      	mov	r0, r4
   2820c:	bd38      	pop	{r3, r4, r5, pc}
   2820e:	bf00      	nop
   28210:	2000d49c 	.word	0x2000d49c
   28214:	0002f2d0 	.word	0x0002f2d0
   28218:	0002f296 	.word	0x0002f296

0002821c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2821c:	b570      	push	{r4, r5, r6, lr}
   2821e:	4604      	mov	r4, r0
   28220:	460d      	mov	r5, r1
	__asm__ volatile(
   28222:	f04f 0320 	mov.w	r3, #32
   28226:	f3ef 8611 	mrs	r6, BASEPRI
   2822a:	f383 8812 	msr	BASEPRI_MAX, r3
   2822e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28232:	4816      	ldr	r0, [pc, #88]	; (2828c <z_set_timeout_expiry+0x70>)
   28234:	f7fe f822 	bl	2627c <z_spin_lock_valid>
   28238:	b940      	cbnz	r0, 2824c <z_set_timeout_expiry+0x30>
   2823a:	4915      	ldr	r1, [pc, #84]	; (28290 <z_set_timeout_expiry+0x74>)
   2823c:	4815      	ldr	r0, [pc, #84]	; (28294 <z_set_timeout_expiry+0x78>)
   2823e:	228e      	movs	r2, #142	; 0x8e
   28240:	f003 fab4 	bl	2b7ac <printk>
   28244:	218e      	movs	r1, #142	; 0x8e
   28246:	4812      	ldr	r0, [pc, #72]	; (28290 <z_set_timeout_expiry+0x74>)
   28248:	f003 fc47 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2824c:	480f      	ldr	r0, [pc, #60]	; (2828c <z_set_timeout_expiry+0x70>)
   2824e:	f7fe f831 	bl	262b4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   28252:	f7ff fe83 	bl	27f5c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   28256:	2801      	cmp	r0, #1
   28258:	dd05      	ble.n	28266 <z_set_timeout_expiry+0x4a>
   2825a:	42a0      	cmp	r0, r4
   2825c:	db03      	blt.n	28266 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2825e:	4629      	mov	r1, r5
   28260:	4620      	mov	r0, r4
   28262:	f7f6 fa0b 	bl	1e67c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28266:	4809      	ldr	r0, [pc, #36]	; (2828c <z_set_timeout_expiry+0x70>)
   28268:	f7fe f816 	bl	26298 <z_spin_unlock_valid>
   2826c:	b940      	cbnz	r0, 28280 <z_set_timeout_expiry+0x64>
   2826e:	4908      	ldr	r1, [pc, #32]	; (28290 <z_set_timeout_expiry+0x74>)
   28270:	4808      	ldr	r0, [pc, #32]	; (28294 <z_set_timeout_expiry+0x78>)
   28272:	22b9      	movs	r2, #185	; 0xb9
   28274:	f003 fa9a 	bl	2b7ac <printk>
   28278:	21b9      	movs	r1, #185	; 0xb9
   2827a:	4805      	ldr	r0, [pc, #20]	; (28290 <z_set_timeout_expiry+0x74>)
   2827c:	f003 fc2d 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28280:	f386 8811 	msr	BASEPRI, r6
   28284:	f3bf 8f6f 	isb	sy
		}
	}
}
   28288:	bd70      	pop	{r4, r5, r6, pc}
   2828a:	bf00      	nop
   2828c:	2000d49c 	.word	0x2000d49c
   28290:	0002f2d0 	.word	0x0002f2d0
   28294:	0002f296 	.word	0x0002f296

00028298 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   28298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2829c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2829e:	f7ff f841 	bl	27324 <z_time_slice>
	__asm__ volatile(
   282a2:	f04f 0320 	mov.w	r3, #32
   282a6:	f3ef 8511 	mrs	r5, BASEPRI
   282aa:	f383 8812 	msr	BASEPRI_MAX, r3
   282ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282b2:	4842      	ldr	r0, [pc, #264]	; (283bc <sys_clock_announce+0x124>)
   282b4:	f7fd ffe2 	bl	2627c <z_spin_lock_valid>
   282b8:	b940      	cbnz	r0, 282cc <sys_clock_announce+0x34>
   282ba:	4941      	ldr	r1, [pc, #260]	; (283c0 <sys_clock_announce+0x128>)
   282bc:	4841      	ldr	r0, [pc, #260]	; (283c4 <sys_clock_announce+0x12c>)
   282be:	228e      	movs	r2, #142	; 0x8e
   282c0:	f003 fa74 	bl	2b7ac <printk>
   282c4:	218e      	movs	r1, #142	; 0x8e
   282c6:	483e      	ldr	r0, [pc, #248]	; (283c0 <sys_clock_announce+0x128>)
   282c8:	f003 fc07 	bl	2bada <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   282cc:	4f3e      	ldr	r7, [pc, #248]	; (283c8 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   282ce:	483b      	ldr	r0, [pc, #236]	; (283bc <sys_clock_announce+0x124>)
	return list->head == list;
   282d0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 283cc <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   282d4:	4e3e      	ldr	r6, [pc, #248]	; (283d0 <sys_clock_announce+0x138>)
   282d6:	f7fd ffed 	bl	262b4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   282da:	603c      	str	r4, [r7, #0]
   282dc:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   282e0:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282e2:	4544      	cmp	r4, r8
   282e4:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   282e8:	e9d6 1e00 	ldrd	r1, lr, [r6]
   282ec:	d00b      	beq.n	28306 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   282ee:	b154      	cbz	r4, 28306 <sys_clock_announce+0x6e>
   282f0:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   282f4:	429a      	cmp	r2, r3
   282f6:	eb70 090c 	sbcs.w	r9, r0, ip
   282fa:	da23      	bge.n	28344 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   282fc:	1a9b      	subs	r3, r3, r2
   282fe:	eb6c 0c00 	sbc.w	ip, ip, r0
   28302:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   28306:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   28308:	1852      	adds	r2, r2, r1
   2830a:	eb4e 0000 	adc.w	r0, lr, r0
   2830e:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   28312:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   28314:	f7ff fe22 	bl	27f5c <next_timeout>
   28318:	4621      	mov	r1, r4
   2831a:	f7f6 f9af 	bl	1e67c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2831e:	4827      	ldr	r0, [pc, #156]	; (283bc <sys_clock_announce+0x124>)
   28320:	f7fd ffba 	bl	26298 <z_spin_unlock_valid>
   28324:	b940      	cbnz	r0, 28338 <sys_clock_announce+0xa0>
   28326:	4926      	ldr	r1, [pc, #152]	; (283c0 <sys_clock_announce+0x128>)
   28328:	4826      	ldr	r0, [pc, #152]	; (283c4 <sys_clock_announce+0x12c>)
   2832a:	22b9      	movs	r2, #185	; 0xb9
   2832c:	f003 fa3e 	bl	2b7ac <printk>
   28330:	21b9      	movs	r1, #185	; 0xb9
   28332:	4823      	ldr	r0, [pc, #140]	; (283c0 <sys_clock_announce+0x128>)
   28334:	f003 fbd1 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28338:	f385 8811 	msr	BASEPRI, r5
   2833c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   28340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   28344:	1859      	adds	r1, r3, r1
   28346:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   2834a:	1ad3      	subs	r3, r2, r3
   2834c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   2834e:	2200      	movs	r2, #0
   28350:	2300      	movs	r3, #0
		curr_tick += dt;
   28352:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   28356:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2835a:	4620      	mov	r0, r4
   2835c:	f7ff fe24 	bl	27fa8 <remove_timeout>
   28360:	4816      	ldr	r0, [pc, #88]	; (283bc <sys_clock_announce+0x124>)
   28362:	f7fd ff99 	bl	26298 <z_spin_unlock_valid>
   28366:	b940      	cbnz	r0, 2837a <sys_clock_announce+0xe2>
   28368:	4915      	ldr	r1, [pc, #84]	; (283c0 <sys_clock_announce+0x128>)
   2836a:	4816      	ldr	r0, [pc, #88]	; (283c4 <sys_clock_announce+0x12c>)
   2836c:	22b9      	movs	r2, #185	; 0xb9
   2836e:	f003 fa1d 	bl	2b7ac <printk>
   28372:	21b9      	movs	r1, #185	; 0xb9
   28374:	4812      	ldr	r0, [pc, #72]	; (283c0 <sys_clock_announce+0x128>)
   28376:	f003 fbb0 	bl	2bada <assert_post_action>
   2837a:	f385 8811 	msr	BASEPRI, r5
   2837e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   28382:	4620      	mov	r0, r4
   28384:	68a3      	ldr	r3, [r4, #8]
   28386:	4798      	blx	r3
	__asm__ volatile(
   28388:	f04f 0320 	mov.w	r3, #32
   2838c:	f3ef 8511 	mrs	r5, BASEPRI
   28390:	f383 8812 	msr	BASEPRI_MAX, r3
   28394:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28398:	4808      	ldr	r0, [pc, #32]	; (283bc <sys_clock_announce+0x124>)
   2839a:	f7fd ff6f 	bl	2627c <z_spin_lock_valid>
   2839e:	b940      	cbnz	r0, 283b2 <sys_clock_announce+0x11a>
   283a0:	4907      	ldr	r1, [pc, #28]	; (283c0 <sys_clock_announce+0x128>)
   283a2:	4808      	ldr	r0, [pc, #32]	; (283c4 <sys_clock_announce+0x12c>)
   283a4:	228e      	movs	r2, #142	; 0x8e
   283a6:	f003 fa01 	bl	2b7ac <printk>
   283aa:	218e      	movs	r1, #142	; 0x8e
   283ac:	4804      	ldr	r0, [pc, #16]	; (283c0 <sys_clock_announce+0x128>)
   283ae:	f003 fb94 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   283b2:	4802      	ldr	r0, [pc, #8]	; (283bc <sys_clock_announce+0x124>)
   283b4:	f7fd ff7e 	bl	262b4 <z_spin_lock_set_owner>
	return k;
   283b8:	e790      	b.n	282dc <sys_clock_announce+0x44>
   283ba:	bf00      	nop
   283bc:	2000d49c 	.word	0x2000d49c
   283c0:	0002f2d0 	.word	0x0002f2d0
   283c4:	0002f296 	.word	0x0002f296
   283c8:	2000d498 	.word	0x2000d498
   283cc:	2000c6cc 	.word	0x2000c6cc
   283d0:	2000cd08 	.word	0x2000cd08

000283d4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   283d4:	b570      	push	{r4, r5, r6, lr}
   283d6:	f04f 0320 	mov.w	r3, #32
   283da:	f3ef 8611 	mrs	r6, BASEPRI
   283de:	f383 8812 	msr	BASEPRI_MAX, r3
   283e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283e6:	4816      	ldr	r0, [pc, #88]	; (28440 <sys_clock_tick_get+0x6c>)
   283e8:	f7fd ff48 	bl	2627c <z_spin_lock_valid>
   283ec:	b940      	cbnz	r0, 28400 <sys_clock_tick_get+0x2c>
   283ee:	4915      	ldr	r1, [pc, #84]	; (28444 <sys_clock_tick_get+0x70>)
   283f0:	4815      	ldr	r0, [pc, #84]	; (28448 <sys_clock_tick_get+0x74>)
   283f2:	228e      	movs	r2, #142	; 0x8e
   283f4:	f003 f9da 	bl	2b7ac <printk>
   283f8:	218e      	movs	r1, #142	; 0x8e
   283fa:	4812      	ldr	r0, [pc, #72]	; (28444 <sys_clock_tick_get+0x70>)
   283fc:	f003 fb6d 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   28400:	480f      	ldr	r0, [pc, #60]	; (28440 <sys_clock_tick_get+0x6c>)
   28402:	f7fd ff57 	bl	262b4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   28406:	f7f6 f969 	bl	1e6dc <sys_clock_elapsed>
   2840a:	4b10      	ldr	r3, [pc, #64]	; (2844c <sys_clock_tick_get+0x78>)
   2840c:	e9d3 4500 	ldrd	r4, r5, [r3]
   28410:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28412:	480b      	ldr	r0, [pc, #44]	; (28440 <sys_clock_tick_get+0x6c>)
   28414:	f145 0500 	adc.w	r5, r5, #0
   28418:	f7fd ff3e 	bl	26298 <z_spin_unlock_valid>
   2841c:	b940      	cbnz	r0, 28430 <sys_clock_tick_get+0x5c>
   2841e:	4909      	ldr	r1, [pc, #36]	; (28444 <sys_clock_tick_get+0x70>)
   28420:	4809      	ldr	r0, [pc, #36]	; (28448 <sys_clock_tick_get+0x74>)
   28422:	22b9      	movs	r2, #185	; 0xb9
   28424:	f003 f9c2 	bl	2b7ac <printk>
   28428:	21b9      	movs	r1, #185	; 0xb9
   2842a:	4806      	ldr	r0, [pc, #24]	; (28444 <sys_clock_tick_get+0x70>)
   2842c:	f003 fb55 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28430:	f386 8811 	msr	BASEPRI, r6
   28434:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   28438:	4620      	mov	r0, r4
   2843a:	4629      	mov	r1, r5
   2843c:	bd70      	pop	{r4, r5, r6, pc}
   2843e:	bf00      	nop
   28440:	2000d49c 	.word	0x2000d49c
   28444:	0002f2d0 	.word	0x0002f2d0
   28448:	0002f296 	.word	0x0002f296
   2844c:	2000cd08 	.word	0x2000cd08

00028450 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   28450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   28454:	2600      	movs	r6, #0
{
   28456:	4614      	mov	r4, r2
   28458:	4681      	mov	r9, r0
	int events_registered = 0;
   2845a:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2845c:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 28620 <register_events+0x1d0>
   28460:	4f70      	ldr	r7, [pc, #448]	; (28624 <register_events+0x1d4>)
   28462:	4d71      	ldr	r5, [pc, #452]	; (28628 <register_events+0x1d8>)
{
   28464:	9100      	str	r1, [sp, #0]
   28466:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   28468:	9b00      	ldr	r3, [sp, #0]
   2846a:	429e      	cmp	r6, r3
   2846c:	db03      	blt.n	28476 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2846e:	4640      	mov	r0, r8
   28470:	b003      	add	sp, #12
   28472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   28476:	f04f 0220 	mov.w	r2, #32
   2847a:	f3ef 8b11 	mrs	fp, BASEPRI
   2847e:	f382 8812 	msr	BASEPRI_MAX, r2
   28482:	f3bf 8f6f 	isb	sy
   28486:	4650      	mov	r0, sl
   28488:	f7fd fef8 	bl	2627c <z_spin_lock_valid>
   2848c:	b940      	cbnz	r0, 284a0 <register_events+0x50>
   2848e:	4639      	mov	r1, r7
   28490:	4628      	mov	r0, r5
   28492:	228e      	movs	r2, #142	; 0x8e
   28494:	f003 f98a 	bl	2b7ac <printk>
   28498:	218e      	movs	r1, #142	; 0x8e
   2849a:	4638      	mov	r0, r7
   2849c:	f003 fb1d 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   284a0:	4650      	mov	r0, sl
   284a2:	f7fd ff07 	bl	262b4 <z_spin_lock_set_owner>
	switch (event->type) {
   284a6:	f899 200d 	ldrb.w	r2, [r9, #13]
   284aa:	f002 021f 	and.w	r2, r2, #31
   284ae:	2a08      	cmp	r2, #8
   284b0:	d853      	bhi.n	2855a <register_events+0x10a>
   284b2:	e8df f002 	tbb	[pc, r2]
   284b6:	4431      	.short	0x4431
   284b8:	522d5205 	.word	0x522d5205
   284bc:	5252      	.short	0x5252
   284be:	4b          	.byte	0x4b
   284bf:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   284c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   284c4:	6892      	ldr	r2, [r2, #8]
   284c6:	b33a      	cbz	r2, 28518 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   284c8:	2202      	movs	r2, #2
	event->poller = NULL;
   284ca:	2000      	movs	r0, #0
	event->state |= state;
   284cc:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   284d0:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   284d4:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   284d8:	ea42 020c 	orr.w	r2, r2, ip
   284dc:	f362 3152 	bfi	r1, r2, #13, #6
   284e0:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   284e4:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284e6:	4650      	mov	r0, sl
   284e8:	f7fd fed6 	bl	26298 <z_spin_unlock_valid>
   284ec:	b940      	cbnz	r0, 28500 <register_events+0xb0>
   284ee:	4639      	mov	r1, r7
   284f0:	4628      	mov	r0, r5
   284f2:	22b9      	movs	r2, #185	; 0xb9
   284f4:	f003 f95a 	bl	2b7ac <printk>
   284f8:	21b9      	movs	r1, #185	; 0xb9
   284fa:	4638      	mov	r0, r7
   284fc:	f003 faed 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28500:	f38b 8811 	msr	BASEPRI, fp
   28504:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28508:	3601      	adds	r6, #1
   2850a:	f109 0914 	add.w	r9, r9, #20
   2850e:	e7ab      	b.n	28468 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   28510:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28514:	6812      	ldr	r2, [r2, #0]
   28516:	bb52      	cbnz	r2, 2856e <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   28518:	9b01      	ldr	r3, [sp, #4]
   2851a:	2b00      	cmp	r3, #0
   2851c:	d1e3      	bne.n	284e6 <register_events+0x96>
   2851e:	7822      	ldrb	r2, [r4, #0]
   28520:	2a00      	cmp	r2, #0
   28522:	d0e0      	beq.n	284e6 <register_events+0x96>
	switch (event->type) {
   28524:	f899 200d 	ldrb.w	r2, [r9, #13]
   28528:	f002 021f 	and.w	r2, r2, #31
   2852c:	2a08      	cmp	r2, #8
   2852e:	d86d      	bhi.n	2860c <register_events+0x1bc>
   28530:	e8df f002 	tbb	[pc, r2]
   28534:	6c1f4932 	.word	0x6c1f4932
   28538:	6c6c6c37 	.word	0x6c6c6c37
   2853c:	5a          	.byte	0x5a
   2853d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2853e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28542:	6892      	ldr	r2, [r2, #8]
   28544:	2a00      	cmp	r2, #0
   28546:	d0e7      	beq.n	28518 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   28548:	2201      	movs	r2, #1
   2854a:	e7be      	b.n	284ca <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2854c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28550:	6a52      	ldr	r2, [r2, #36]	; 0x24
   28552:	2a00      	cmp	r2, #0
   28554:	d0e0      	beq.n	28518 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   28556:	2210      	movs	r2, #16
   28558:	e7b7      	b.n	284ca <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   2855a:	4628      	mov	r0, r5
   2855c:	225c      	movs	r2, #92	; 0x5c
   2855e:	4933      	ldr	r1, [pc, #204]	; (2862c <register_events+0x1dc>)
   28560:	f003 f924 	bl	2b7ac <printk>
   28564:	215c      	movs	r1, #92	; 0x5c
   28566:	4831      	ldr	r0, [pc, #196]	; (2862c <register_events+0x1dc>)
   28568:	f003 fab7 	bl	2bada <assert_post_action>
		break;
   2856c:	e7d4      	b.n	28518 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2856e:	2204      	movs	r2, #4
   28570:	e7ab      	b.n	284ca <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   28572:	f8d9 2010 	ldr.w	r2, [r9, #16]
   28576:	b942      	cbnz	r2, 2858a <register_events+0x13a>
   28578:	4628      	mov	r0, r5
   2857a:	492c      	ldr	r1, [pc, #176]	; (2862c <register_events+0x1dc>)
   2857c:	2286      	movs	r2, #134	; 0x86
   2857e:	f003 f915 	bl	2b7ac <printk>
   28582:	2186      	movs	r1, #134	; 0x86
   28584:	4829      	ldr	r0, [pc, #164]	; (2862c <register_events+0x1dc>)
   28586:	f003 faa8 	bl	2bada <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   2858a:	4622      	mov	r2, r4
   2858c:	4649      	mov	r1, r9
   2858e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   28592:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   28594:	f005 fa41 	bl	2da1a <add_event>
	event->poller = poller;
   28598:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   2859c:	f108 0801 	add.w	r8, r8, #1
   285a0:	e7a1      	b.n	284e6 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   285a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   285a6:	b942      	cbnz	r2, 285ba <register_events+0x16a>
   285a8:	4628      	mov	r0, r5
   285aa:	4920      	ldr	r1, [pc, #128]	; (2862c <register_events+0x1dc>)
   285ac:	228a      	movs	r2, #138	; 0x8a
   285ae:	f003 f8fd 	bl	2b7ac <printk>
   285b2:	218a      	movs	r1, #138	; 0x8a
   285b4:	481d      	ldr	r0, [pc, #116]	; (2862c <register_events+0x1dc>)
   285b6:	f003 fa90 	bl	2bada <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   285ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
   285be:	4622      	mov	r2, r4
   285c0:	4649      	mov	r1, r9
   285c2:	3014      	adds	r0, #20
   285c4:	e7e6      	b.n	28594 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   285c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   285ca:	b942      	cbnz	r2, 285de <register_events+0x18e>
   285cc:	4628      	mov	r0, r5
   285ce:	4917      	ldr	r1, [pc, #92]	; (2862c <register_events+0x1dc>)
   285d0:	228e      	movs	r2, #142	; 0x8e
   285d2:	f003 f8eb 	bl	2b7ac <printk>
   285d6:	218e      	movs	r1, #142	; 0x8e
   285d8:	4814      	ldr	r0, [pc, #80]	; (2862c <register_events+0x1dc>)
   285da:	f003 fa7e 	bl	2bada <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   285de:	4622      	mov	r2, r4
   285e0:	4649      	mov	r1, r9
   285e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
   285e6:	e7d5      	b.n	28594 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   285e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   285ec:	b942      	cbnz	r2, 28600 <register_events+0x1b0>
   285ee:	4628      	mov	r0, r5
   285f0:	490e      	ldr	r1, [pc, #56]	; (2862c <register_events+0x1dc>)
   285f2:	2292      	movs	r2, #146	; 0x92
   285f4:	f003 f8da 	bl	2b7ac <printk>
   285f8:	2192      	movs	r1, #146	; 0x92
   285fa:	480c      	ldr	r0, [pc, #48]	; (2862c <register_events+0x1dc>)
   285fc:	f003 fa6d 	bl	2bada <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   28600:	f8d9 0010 	ldr.w	r0, [r9, #16]
   28604:	4622      	mov	r2, r4
   28606:	4649      	mov	r1, r9
   28608:	3028      	adds	r0, #40	; 0x28
   2860a:	e7c3      	b.n	28594 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   2860c:	4628      	mov	r0, r5
   2860e:	2299      	movs	r2, #153	; 0x99
   28610:	4906      	ldr	r1, [pc, #24]	; (2862c <register_events+0x1dc>)
   28612:	f003 f8cb 	bl	2b7ac <printk>
   28616:	2199      	movs	r1, #153	; 0x99
   28618:	4804      	ldr	r0, [pc, #16]	; (2862c <register_events+0x1dc>)
   2861a:	f003 fa5e 	bl	2bada <assert_post_action>
		break;
   2861e:	e7bb      	b.n	28598 <register_events+0x148>
   28620:	2000d4a0 	.word	0x2000d4a0
   28624:	0002f2d0 	.word	0x0002f2d0
   28628:	0002f296 	.word	0x0002f296
   2862c:	000319a7 	.word	0x000319a7

00028630 <clear_event_registrations>:
{
   28630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28634:	2414      	movs	r4, #20
   28636:	4690      	mov	r8, r2
	while (num_events--) {
   28638:	460f      	mov	r7, r1
   2863a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   2863e:	4d43      	ldr	r5, [pc, #268]	; (2874c <clear_event_registrations+0x11c>)
   28640:	4e43      	ldr	r6, [pc, #268]	; (28750 <clear_event_registrations+0x120>)
   28642:	f8df 9110 	ldr.w	r9, [pc, #272]	; 28754 <clear_event_registrations+0x124>
	while (num_events--) {
   28646:	b90f      	cbnz	r7, 2864c <clear_event_registrations+0x1c>
}
   28648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   2864c:	2300      	movs	r3, #0
   2864e:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   28652:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   28656:	f1a4 0a14 	sub.w	sl, r4, #20
   2865a:	f003 031f 	and.w	r3, r3, #31
   2865e:	2b08      	cmp	r3, #8
   28660:	d83e      	bhi.n	286e0 <clear_event_registrations+0xb0>
   28662:	e8df f003 	tbb	[pc, r3]
   28666:	2746      	.short	0x2746
   28668:	3d1c3d05 	.word	0x3d1c3d05
   2866c:	3d3d      	.short	0x3d3d
   2866e:	32          	.byte	0x32
   2866f:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   28670:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28674:	b943      	cbnz	r3, 28688 <clear_event_registrations+0x58>
   28676:	4629      	mov	r1, r5
   28678:	22a9      	movs	r2, #169	; 0xa9
   2867a:	4630      	mov	r0, r6
   2867c:	f003 f896 	bl	2b7ac <printk>
   28680:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28682:	4628      	mov	r0, r5
   28684:	f003 fa29 	bl	2bada <assert_post_action>
	return node->next != NULL;
   28688:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2868c:	b38b      	cbz	r3, 286f2 <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   2868e:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   28692:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28694:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28696:	2300      	movs	r3, #0
	node->prev = NULL;
   28698:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   2869c:	e029      	b.n	286f2 <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2869e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   286a2:	2b00      	cmp	r3, #0
   286a4:	d1f0      	bne.n	28688 <clear_event_registrations+0x58>
   286a6:	4629      	mov	r1, r5
   286a8:	22ad      	movs	r2, #173	; 0xad
   286aa:	4630      	mov	r0, r6
   286ac:	f003 f87e 	bl	2b7ac <printk>
   286b0:	21ad      	movs	r1, #173	; 0xad
   286b2:	e7e6      	b.n	28682 <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   286b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   286b8:	2b00      	cmp	r3, #0
   286ba:	d1e5      	bne.n	28688 <clear_event_registrations+0x58>
   286bc:	4629      	mov	r1, r5
   286be:	22b1      	movs	r2, #177	; 0xb1
   286c0:	4630      	mov	r0, r6
   286c2:	f003 f873 	bl	2b7ac <printk>
   286c6:	21b1      	movs	r1, #177	; 0xb1
   286c8:	e7db      	b.n	28682 <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   286ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   286ce:	2b00      	cmp	r3, #0
   286d0:	d1da      	bne.n	28688 <clear_event_registrations+0x58>
   286d2:	4629      	mov	r1, r5
   286d4:	22b5      	movs	r2, #181	; 0xb5
   286d6:	4630      	mov	r0, r6
   286d8:	f003 f868 	bl	2b7ac <printk>
   286dc:	21b5      	movs	r1, #181	; 0xb5
   286de:	e7d0      	b.n	28682 <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   286e0:	4629      	mov	r1, r5
   286e2:	4630      	mov	r0, r6
   286e4:	22bc      	movs	r2, #188	; 0xbc
   286e6:	f003 f861 	bl	2b7ac <printk>
   286ea:	21bc      	movs	r1, #188	; 0xbc
   286ec:	4628      	mov	r0, r5
   286ee:	f003 f9f4 	bl	2bada <assert_post_action>
   286f2:	4648      	mov	r0, r9
   286f4:	f7fd fdd0 	bl	26298 <z_spin_unlock_valid>
   286f8:	b940      	cbnz	r0, 2870c <clear_event_registrations+0xdc>
   286fa:	4630      	mov	r0, r6
   286fc:	4916      	ldr	r1, [pc, #88]	; (28758 <clear_event_registrations+0x128>)
   286fe:	22b9      	movs	r2, #185	; 0xb9
   28700:	f003 f854 	bl	2b7ac <printk>
   28704:	21b9      	movs	r1, #185	; 0xb9
   28706:	4814      	ldr	r0, [pc, #80]	; (28758 <clear_event_registrations+0x128>)
   28708:	f003 f9e7 	bl	2bada <assert_post_action>
   2870c:	f388 8811 	msr	BASEPRI, r8
   28710:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28714:	f04f 0320 	mov.w	r3, #32
   28718:	f3ef 8811 	mrs	r8, BASEPRI
   2871c:	f383 8812 	msr	BASEPRI_MAX, r3
   28720:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28724:	4648      	mov	r0, r9
   28726:	f7fd fda9 	bl	2627c <z_spin_lock_valid>
   2872a:	b940      	cbnz	r0, 2873e <clear_event_registrations+0x10e>
   2872c:	4630      	mov	r0, r6
   2872e:	490a      	ldr	r1, [pc, #40]	; (28758 <clear_event_registrations+0x128>)
   28730:	228e      	movs	r2, #142	; 0x8e
   28732:	f003 f83b 	bl	2b7ac <printk>
   28736:	218e      	movs	r1, #142	; 0x8e
   28738:	4807      	ldr	r0, [pc, #28]	; (28758 <clear_event_registrations+0x128>)
   2873a:	f003 f9ce 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2873e:	4648      	mov	r0, r9
   28740:	f7fd fdb8 	bl	262b4 <z_spin_lock_set_owner>
	return k;
   28744:	4654      	mov	r4, sl
   28746:	3f01      	subs	r7, #1
   28748:	e77d      	b.n	28646 <clear_event_registrations+0x16>
   2874a:	bf00      	nop
   2874c:	000319a7 	.word	0x000319a7
   28750:	0002f296 	.word	0x0002f296
   28754:	2000d4a0 	.word	0x2000d4a0
   28758:	0002f2d0 	.word	0x0002f2d0

0002875c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2875c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28760:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   28762:	4b63      	ldr	r3, [pc, #396]	; (288f0 <z_impl_k_poll+0x194>)
{
   28764:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   28766:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   28768:	2301      	movs	r3, #1
{
   2876a:	4688      	mov	r8, r1
   2876c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2876e:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   28772:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   28776:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   2877a:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2877e:	b153      	cbz	r3, 28796 <z_impl_k_poll+0x3a>
   28780:	495c      	ldr	r1, [pc, #368]	; (288f4 <z_impl_k_poll+0x198>)
   28782:	485d      	ldr	r0, [pc, #372]	; (288f8 <z_impl_k_poll+0x19c>)
   28784:	f44f 728d 	mov.w	r2, #282	; 0x11a
   28788:	f003 f810 	bl	2b7ac <printk>
   2878c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28790:	4858      	ldr	r0, [pc, #352]	; (288f4 <z_impl_k_poll+0x198>)
   28792:	f003 f9a2 	bl	2bada <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   28796:	b954      	cbnz	r4, 287ae <z_impl_k_poll+0x52>
   28798:	4956      	ldr	r1, [pc, #344]	; (288f4 <z_impl_k_poll+0x198>)
   2879a:	4857      	ldr	r0, [pc, #348]	; (288f8 <z_impl_k_poll+0x19c>)
   2879c:	f240 121b 	movw	r2, #283	; 0x11b
   287a0:	f003 f804 	bl	2b7ac <printk>
   287a4:	f240 111b 	movw	r1, #283	; 0x11b
   287a8:	4852      	ldr	r0, [pc, #328]	; (288f4 <z_impl_k_poll+0x198>)
   287aa:	f003 f996 	bl	2bada <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   287ae:	f1b8 0f00 	cmp.w	r8, #0
   287b2:	da0a      	bge.n	287ca <z_impl_k_poll+0x6e>
   287b4:	494f      	ldr	r1, [pc, #316]	; (288f4 <z_impl_k_poll+0x198>)
   287b6:	4850      	ldr	r0, [pc, #320]	; (288f8 <z_impl_k_poll+0x19c>)
   287b8:	f44f 728e 	mov.w	r2, #284	; 0x11c
   287bc:	f002 fff6 	bl	2b7ac <printk>
   287c0:	f44f 718e 	mov.w	r1, #284	; 0x11c
   287c4:	484b      	ldr	r0, [pc, #300]	; (288f4 <z_impl_k_poll+0x198>)
   287c6:	f003 f988 	bl	2bada <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   287ca:	ea56 0305 	orrs.w	r3, r6, r5
   287ce:	bf0c      	ite	eq
   287d0:	2301      	moveq	r3, #1
   287d2:	2300      	movne	r3, #0
   287d4:	4641      	mov	r1, r8
   287d6:	464a      	mov	r2, r9
   287d8:	4620      	mov	r0, r4
   287da:	f7ff fe39 	bl	28450 <register_events>
   287de:	4680      	mov	r8, r0
   287e0:	f04f 0320 	mov.w	r3, #32
   287e4:	f3ef 8911 	mrs	r9, BASEPRI
   287e8:	f383 8812 	msr	BASEPRI_MAX, r3
   287ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   287f0:	4842      	ldr	r0, [pc, #264]	; (288fc <z_impl_k_poll+0x1a0>)
   287f2:	f7fd fd43 	bl	2627c <z_spin_lock_valid>
   287f6:	b940      	cbnz	r0, 2880a <z_impl_k_poll+0xae>
   287f8:	4941      	ldr	r1, [pc, #260]	; (28900 <z_impl_k_poll+0x1a4>)
   287fa:	483f      	ldr	r0, [pc, #252]	; (288f8 <z_impl_k_poll+0x19c>)
   287fc:	228e      	movs	r2, #142	; 0x8e
   287fe:	f002 ffd5 	bl	2b7ac <printk>
   28802:	218e      	movs	r1, #142	; 0x8e
   28804:	483e      	ldr	r0, [pc, #248]	; (28900 <z_impl_k_poll+0x1a4>)
   28806:	f003 f968 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   2880a:	483c      	ldr	r0, [pc, #240]	; (288fc <z_impl_k_poll+0x1a0>)
   2880c:	f7fd fd52 	bl	262b4 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   28810:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   28814:	b9d3      	cbnz	r3, 2884c <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   28816:	4620      	mov	r0, r4
   28818:	464a      	mov	r2, r9
   2881a:	4641      	mov	r1, r8
   2881c:	f7ff ff08 	bl	28630 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28820:	4836      	ldr	r0, [pc, #216]	; (288fc <z_impl_k_poll+0x1a0>)
   28822:	f7fd fd39 	bl	26298 <z_spin_unlock_valid>
   28826:	b940      	cbnz	r0, 2883a <z_impl_k_poll+0xde>
   28828:	4935      	ldr	r1, [pc, #212]	; (28900 <z_impl_k_poll+0x1a4>)
   2882a:	4833      	ldr	r0, [pc, #204]	; (288f8 <z_impl_k_poll+0x19c>)
   2882c:	22b9      	movs	r2, #185	; 0xb9
   2882e:	f002 ffbd 	bl	2b7ac <printk>
   28832:	21b9      	movs	r1, #185	; 0xb9
   28834:	4832      	ldr	r0, [pc, #200]	; (28900 <z_impl_k_poll+0x1a4>)
   28836:	f003 f950 	bl	2bada <assert_post_action>
	__asm__ volatile(
   2883a:	f389 8811 	msr	BASEPRI, r9
   2883e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   28842:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   28844:	4628      	mov	r0, r5
   28846:	b003      	add	sp, #12
   28848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   2884c:	2300      	movs	r3, #0
   2884e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28852:	ea56 0305 	orrs.w	r3, r6, r5
   28856:	d113      	bne.n	28880 <z_impl_k_poll+0x124>
   28858:	4828      	ldr	r0, [pc, #160]	; (288fc <z_impl_k_poll+0x1a0>)
   2885a:	f7fd fd1d 	bl	26298 <z_spin_unlock_valid>
   2885e:	b940      	cbnz	r0, 28872 <z_impl_k_poll+0x116>
   28860:	4927      	ldr	r1, [pc, #156]	; (28900 <z_impl_k_poll+0x1a4>)
   28862:	4825      	ldr	r0, [pc, #148]	; (288f8 <z_impl_k_poll+0x19c>)
   28864:	22b9      	movs	r2, #185	; 0xb9
   28866:	f002 ffa1 	bl	2b7ac <printk>
   2886a:	21b9      	movs	r1, #185	; 0xb9
   2886c:	4824      	ldr	r0, [pc, #144]	; (28900 <z_impl_k_poll+0x1a4>)
   2886e:	f003 f934 	bl	2bada <assert_post_action>
   28872:	f389 8811 	msr	BASEPRI, r9
   28876:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2887a:	f06f 050a 	mvn.w	r5, #10
   2887e:	e7e1      	b.n	28844 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   28880:	e9cd 6500 	strd	r6, r5, [sp]
   28884:	4649      	mov	r1, r9
   28886:	4a1f      	ldr	r2, [pc, #124]	; (28904 <z_impl_k_poll+0x1a8>)
   28888:	481c      	ldr	r0, [pc, #112]	; (288fc <z_impl_k_poll+0x1a0>)
   2888a:	f7fe ff5d 	bl	27748 <z_pend_curr>
   2888e:	4605      	mov	r5, r0
	__asm__ volatile(
   28890:	f04f 0320 	mov.w	r3, #32
   28894:	f3ef 8611 	mrs	r6, BASEPRI
   28898:	f383 8812 	msr	BASEPRI_MAX, r3
   2889c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   288a0:	4816      	ldr	r0, [pc, #88]	; (288fc <z_impl_k_poll+0x1a0>)
   288a2:	f7fd fceb 	bl	2627c <z_spin_lock_valid>
   288a6:	b940      	cbnz	r0, 288ba <z_impl_k_poll+0x15e>
   288a8:	4915      	ldr	r1, [pc, #84]	; (28900 <z_impl_k_poll+0x1a4>)
   288aa:	4813      	ldr	r0, [pc, #76]	; (288f8 <z_impl_k_poll+0x19c>)
   288ac:	228e      	movs	r2, #142	; 0x8e
   288ae:	f002 ff7d 	bl	2b7ac <printk>
   288b2:	218e      	movs	r1, #142	; 0x8e
   288b4:	4812      	ldr	r0, [pc, #72]	; (28900 <z_impl_k_poll+0x1a4>)
   288b6:	f003 f910 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   288ba:	4810      	ldr	r0, [pc, #64]	; (288fc <z_impl_k_poll+0x1a0>)
   288bc:	f7fd fcfa 	bl	262b4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   288c0:	4620      	mov	r0, r4
   288c2:	4632      	mov	r2, r6
   288c4:	4641      	mov	r1, r8
   288c6:	f7ff feb3 	bl	28630 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   288ca:	480c      	ldr	r0, [pc, #48]	; (288fc <z_impl_k_poll+0x1a0>)
   288cc:	f7fd fce4 	bl	26298 <z_spin_unlock_valid>
   288d0:	b940      	cbnz	r0, 288e4 <z_impl_k_poll+0x188>
   288d2:	490b      	ldr	r1, [pc, #44]	; (28900 <z_impl_k_poll+0x1a4>)
   288d4:	4808      	ldr	r0, [pc, #32]	; (288f8 <z_impl_k_poll+0x19c>)
   288d6:	22b9      	movs	r2, #185	; 0xb9
   288d8:	f002 ff68 	bl	2b7ac <printk>
   288dc:	21b9      	movs	r1, #185	; 0xb9
   288de:	4808      	ldr	r0, [pc, #32]	; (28900 <z_impl_k_poll+0x1a4>)
   288e0:	f003 f8fb 	bl	2bada <assert_post_action>
	__asm__ volatile(
   288e4:	f386 8811 	msr	BASEPRI, r6
   288e8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   288ec:	e7aa      	b.n	28844 <z_impl_k_poll+0xe8>
   288ee:	bf00      	nop
   288f0:	2000d44c 	.word	0x2000d44c
   288f4:	000319a7 	.word	0x000319a7
   288f8:	0002f296 	.word	0x0002f296
   288fc:	2000d4a0 	.word	0x2000d4a0
   28900:	0002f2d0 	.word	0x0002f2d0
   28904:	2000c6d4 	.word	0x2000c6d4

00028908 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28908:	b570      	push	{r4, r5, r6, lr}
   2890a:	4604      	mov	r4, r0
   2890c:	460d      	mov	r5, r1
	__asm__ volatile(
   2890e:	f04f 0320 	mov.w	r3, #32
   28912:	f3ef 8611 	mrs	r6, BASEPRI
   28916:	f383 8812 	msr	BASEPRI_MAX, r3
   2891a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2891e:	481c      	ldr	r0, [pc, #112]	; (28990 <z_impl_k_poll_signal_raise+0x88>)
   28920:	f7fd fcac 	bl	2627c <z_spin_lock_valid>
   28924:	b940      	cbnz	r0, 28938 <z_impl_k_poll_signal_raise+0x30>
   28926:	491b      	ldr	r1, [pc, #108]	; (28994 <z_impl_k_poll_signal_raise+0x8c>)
   28928:	481b      	ldr	r0, [pc, #108]	; (28998 <z_impl_k_poll_signal_raise+0x90>)
   2892a:	228e      	movs	r2, #142	; 0x8e
   2892c:	f002 ff3e 	bl	2b7ac <printk>
   28930:	218e      	movs	r1, #142	; 0x8e
   28932:	4818      	ldr	r0, [pc, #96]	; (28994 <z_impl_k_poll_signal_raise+0x8c>)
   28934:	f003 f8d1 	bl	2bada <assert_post_action>
	z_spin_lock_set_owner(l);
   28938:	4815      	ldr	r0, [pc, #84]	; (28990 <z_impl_k_poll_signal_raise+0x88>)
   2893a:	f7fd fcbb 	bl	262b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   2893e:	2101      	movs	r1, #1
	return list->head == list;
   28940:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   28942:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   28944:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   28946:	60a1      	str	r1, [r4, #8]
   28948:	d112      	bne.n	28970 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2894a:	4811      	ldr	r0, [pc, #68]	; (28990 <z_impl_k_poll_signal_raise+0x88>)
   2894c:	f7fd fca4 	bl	26298 <z_spin_unlock_valid>
   28950:	b940      	cbnz	r0, 28964 <z_impl_k_poll_signal_raise+0x5c>
   28952:	4910      	ldr	r1, [pc, #64]	; (28994 <z_impl_k_poll_signal_raise+0x8c>)
   28954:	4810      	ldr	r0, [pc, #64]	; (28998 <z_impl_k_poll_signal_raise+0x90>)
   28956:	22b9      	movs	r2, #185	; 0xb9
   28958:	f002 ff28 	bl	2b7ac <printk>
   2895c:	21b9      	movs	r1, #185	; 0xb9
   2895e:	480d      	ldr	r0, [pc, #52]	; (28994 <z_impl_k_poll_signal_raise+0x8c>)
   28960:	f003 f8bb 	bl	2bada <assert_post_action>
	__asm__ volatile(
   28964:	f386 8811 	msr	BASEPRI, r6
   28968:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2896c:	2400      	movs	r4, #0
   2896e:	e00d      	b.n	2898c <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   28970:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28974:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28976:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28978:	2300      	movs	r3, #0
	node->prev = NULL;
   2897a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2897e:	f005 f87b 	bl	2da78 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   28982:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28984:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   28986:	4802      	ldr	r0, [pc, #8]	; (28990 <z_impl_k_poll_signal_raise+0x88>)
   28988:	f7fe fb4c 	bl	27024 <z_reschedule>
	return rc;
}
   2898c:	4620      	mov	r0, r4
   2898e:	bd70      	pop	{r4, r5, r6, pc}
   28990:	2000d4a0 	.word	0x2000d4a0
   28994:	0002f2d0 	.word	0x0002f2d0
   28998:	0002f296 	.word	0x0002f296

0002899c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2899c:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2899e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   289a2:	4606      	mov	r6, r0
   289a4:	460d      	mov	r5, r1
   289a6:	d20b      	bcs.n	289c0 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   289a8:	f04f 0800 	mov.w	r8, #0
   289ac:	f04f 0900 	mov.w	r9, #0
   289b0:	f041 0104 	orr.w	r1, r1, #4
   289b4:	e9cd 8900 	strd	r8, r9, [sp]
   289b8:	f7fd fa4c 	bl	25e54 <k_heap_aligned_alloc>
	if (mem == NULL) {
   289bc:	4604      	mov	r4, r0
   289be:	b920      	cbnz	r0, 289ca <z_heap_aligned_alloc+0x2e>
		return NULL;
   289c0:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   289c2:	4620      	mov	r0, r4
   289c4:	b002      	add	sp, #8
   289c6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   289ca:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   289ce:	2d00      	cmp	r5, #0
   289d0:	d0f7      	beq.n	289c2 <z_heap_aligned_alloc+0x26>
   289d2:	3d01      	subs	r5, #1
   289d4:	422c      	tst	r4, r5
   289d6:	d0f4      	beq.n	289c2 <z_heap_aligned_alloc+0x26>
   289d8:	2225      	movs	r2, #37	; 0x25
   289da:	4904      	ldr	r1, [pc, #16]	; (289ec <z_heap_aligned_alloc+0x50>)
   289dc:	4804      	ldr	r0, [pc, #16]	; (289f0 <z_heap_aligned_alloc+0x54>)
   289de:	f002 fee5 	bl	2b7ac <printk>
   289e2:	2125      	movs	r1, #37	; 0x25
   289e4:	4801      	ldr	r0, [pc, #4]	; (289ec <z_heap_aligned_alloc+0x50>)
   289e6:	f003 f878 	bl	2bada <assert_post_action>
   289ea:	e7ea      	b.n	289c2 <z_heap_aligned_alloc+0x26>
   289ec:	000319c8 	.word	0x000319c8
   289f0:	0002f296 	.word	0x0002f296

000289f4 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   289f4:	2803      	cmp	r0, #3
{
   289f6:	b538      	push	{r3, r4, r5, lr}
   289f8:	4604      	mov	r4, r0
   289fa:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   289fc:	d901      	bls.n	28a02 <k_aligned_alloc+0xe>
   289fe:	0783      	lsls	r3, r0, #30
   28a00:	d008      	beq.n	28a14 <k_aligned_alloc+0x20>
   28a02:	490e      	ldr	r1, [pc, #56]	; (28a3c <k_aligned_alloc+0x48>)
   28a04:	480e      	ldr	r0, [pc, #56]	; (28a40 <k_aligned_alloc+0x4c>)
   28a06:	2242      	movs	r2, #66	; 0x42
   28a08:	f002 fed0 	bl	2b7ac <printk>
   28a0c:	2142      	movs	r1, #66	; 0x42
   28a0e:	480b      	ldr	r0, [pc, #44]	; (28a3c <k_aligned_alloc+0x48>)
   28a10:	f003 f863 	bl	2bada <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   28a14:	1e63      	subs	r3, r4, #1
   28a16:	4223      	tst	r3, r4
   28a18:	d008      	beq.n	28a2c <k_aligned_alloc+0x38>
   28a1a:	4908      	ldr	r1, [pc, #32]	; (28a3c <k_aligned_alloc+0x48>)
   28a1c:	4808      	ldr	r0, [pc, #32]	; (28a40 <k_aligned_alloc+0x4c>)
   28a1e:	2246      	movs	r2, #70	; 0x46
   28a20:	f002 fec4 	bl	2b7ac <printk>
   28a24:	2146      	movs	r1, #70	; 0x46
   28a26:	4805      	ldr	r0, [pc, #20]	; (28a3c <k_aligned_alloc+0x48>)
   28a28:	f003 f857 	bl	2bada <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28a2c:	462a      	mov	r2, r5
   28a2e:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   28a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   28a34:	4803      	ldr	r0, [pc, #12]	; (28a44 <k_aligned_alloc+0x50>)
   28a36:	f7ff bfb1 	b.w	2899c <z_heap_aligned_alloc>
   28a3a:	bf00      	nop
   28a3c:	000319c8 	.word	0x000319c8
   28a40:	0002f296 	.word	0x0002f296
   28a44:	2000c964 	.word	0x2000c964

00028a48 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   28a48:	4b01      	ldr	r3, [pc, #4]	; (28a50 <k_thread_system_pool_assign+0x8>)
   28a4a:	6743      	str	r3, [r0, #116]	; 0x74
}
   28a4c:	4770      	bx	lr
   28a4e:	bf00      	nop
   28a50:	2000c964 	.word	0x2000c964

00028a54 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   28a54:	b538      	push	{r3, r4, r5, lr}
   28a56:	4604      	mov	r4, r0
   28a58:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28a5a:	f004 ff16 	bl	2d88a <k_is_in_isr>
   28a5e:	b950      	cbnz	r0, 28a76 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28a60:	4b06      	ldr	r3, [pc, #24]	; (28a7c <z_thread_aligned_alloc+0x28>)
   28a62:	689b      	ldr	r3, [r3, #8]
   28a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   28a66:	b143      	cbz	r3, 28a7a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   28a68:	462a      	mov	r2, r5
   28a6a:	4621      	mov	r1, r4
   28a6c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   28a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   28a72:	f7ff bf93 	b.w	2899c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   28a76:	4b02      	ldr	r3, [pc, #8]	; (28a80 <z_thread_aligned_alloc+0x2c>)
   28a78:	e7f6      	b.n	28a68 <z_thread_aligned_alloc+0x14>
}
   28a7a:	bd38      	pop	{r3, r4, r5, pc}
   28a7c:	2000d44c 	.word	0x2000d44c
   28a80:	2000c964 	.word	0x2000c964

00028a84 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   28a84:	4a02      	ldr	r2, [pc, #8]	; (28a90 <boot_banner+0xc>)
   28a86:	4903      	ldr	r1, [pc, #12]	; (28a94 <boot_banner+0x10>)
   28a88:	4803      	ldr	r0, [pc, #12]	; (28a98 <boot_banner+0x14>)
   28a8a:	f002 be8f 	b.w	2b7ac <printk>
   28a8e:	bf00      	nop
   28a90:	000317b6 	.word	0x000317b6
   28a94:	000319ec 	.word	0x000319ec
   28a98:	00031a0c 	.word	0x00031a0c

00028a9c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   28a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   28a9e:	2400      	movs	r4, #0
   28aa0:	4b08      	ldr	r3, [pc, #32]	; (28ac4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   28aa2:	f44f 627d 	mov.w	r2, #4048	; 0xfd0
	struct k_work_queue_config cfg = {
   28aa6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   28aa8:	ab02      	add	r3, sp, #8
   28aaa:	9300      	str	r3, [sp, #0]
   28aac:	4906      	ldr	r1, [pc, #24]	; (28ac8 <k_sys_work_q_init+0x2c>)
   28aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ab2:	4806      	ldr	r0, [pc, #24]	; (28acc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   28ab4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   28ab8:	f7fe f976 	bl	26da8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   28abc:	4620      	mov	r0, r4
   28abe:	b004      	add	sp, #16
   28ac0:	bd10      	pop	{r4, pc}
   28ac2:	bf00      	nop
   28ac4:	00031a33 	.word	0x00031a33
   28ac8:	20011670 	.word	0x20011670
   28acc:	2000cd10 	.word	0x2000cd10

00028ad0 <gmtime_r>:
   28ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ad4:	e9d0 6700 	ldrd	r6, r7, [r0]
   28ad8:	460c      	mov	r4, r1
   28ada:	4a4f      	ldr	r2, [pc, #316]	; (28c18 <gmtime_r+0x148>)
   28adc:	2300      	movs	r3, #0
   28ade:	4630      	mov	r0, r6
   28ae0:	4639      	mov	r1, r7
   28ae2:	f04f 0805 	mov.w	r8, #5
   28ae6:	f7f0 fa8b 	bl	19000 <__aeabi_ldivmod>
   28aea:	4639      	mov	r1, r7
   28aec:	4605      	mov	r5, r0
   28aee:	4a4a      	ldr	r2, [pc, #296]	; (28c18 <gmtime_r+0x148>)
   28af0:	4630      	mov	r0, r6
   28af2:	2300      	movs	r3, #0
   28af4:	f7f0 fa84 	bl	19000 <__aeabi_ldivmod>
   28af8:	2a00      	cmp	r2, #0
   28afa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   28afe:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
   28b02:	bfb8      	it	lt
   28b04:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   28b08:	4d44      	ldr	r5, [pc, #272]	; (28c1c <gmtime_r+0x14c>)
   28b0a:	bfae      	itee	ge
   28b0c:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
   28b10:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
   28b14:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   28b18:	f240 1c6d 	movw	ip, #365	; 0x16d
   28b1c:	2764      	movs	r7, #100	; 0x64
   28b1e:	fbb2 f1f0 	udiv	r1, r2, r0
   28b22:	fb00 2211 	mls	r2, r0, r1, r2
   28b26:	203c      	movs	r0, #60	; 0x3c
   28b28:	60a1      	str	r1, [r4, #8]
   28b2a:	fbb2 f1f0 	udiv	r1, r2, r0
   28b2e:	fb00 2211 	mls	r2, r0, r1, r2
   28b32:	483b      	ldr	r0, [pc, #236]	; (28c20 <gmtime_r+0x150>)
   28b34:	6061      	str	r1, [r4, #4]
   28b36:	2107      	movs	r1, #7
   28b38:	6022      	str	r2, [r4, #0]
   28b3a:	1cda      	adds	r2, r3, #3
   28b3c:	fb92 f1f1 	sdiv	r1, r2, r1
   28b40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   28b44:	1a52      	subs	r2, r2, r1
   28b46:	bf48      	it	mi
   28b48:	3207      	addmi	r2, #7
   28b4a:	2b00      	cmp	r3, #0
   28b4c:	61a2      	str	r2, [r4, #24]
   28b4e:	bfbb      	ittet	lt
   28b50:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
   28b54:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
   28b58:	fb93 f5f5 	sdivge	r5, r3, r5
   28b5c:	fb92 f5f5 	sdivlt	r5, r2, r5
   28b60:	f648 62ac 	movw	r2, #36524	; 0x8eac
   28b64:	fb00 3005 	mla	r0, r0, r5, r3
   28b68:	f240 53b4 	movw	r3, #1460	; 0x5b4
   28b6c:	fbb0 f2f2 	udiv	r2, r0, r2
   28b70:	fbb0 f1f3 	udiv	r1, r0, r3
   28b74:	4402      	add	r2, r0
   28b76:	1a52      	subs	r2, r2, r1
   28b78:	492a      	ldr	r1, [pc, #168]	; (28c24 <gmtime_r+0x154>)
   28b7a:	fbb0 f1f1 	udiv	r1, r0, r1
   28b7e:	1a52      	subs	r2, r2, r1
   28b80:	fbb2 f1fc 	udiv	r1, r2, ip
   28b84:	fbb2 f3f3 	udiv	r3, r2, r3
   28b88:	fbb1 f6f7 	udiv	r6, r1, r7
   28b8c:	1af3      	subs	r3, r6, r3
   28b8e:	2299      	movs	r2, #153	; 0x99
   28b90:	4403      	add	r3, r0
   28b92:	fb0c 3311 	mls	r3, ip, r1, r3
   28b96:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   28b9a:	f103 0c01 	add.w	ip, r3, #1
   28b9e:	f10e 0e02 	add.w	lr, lr, #2
   28ba2:	fbbe f0f2 	udiv	r0, lr, r2
   28ba6:	4342      	muls	r2, r0
   28ba8:	3202      	adds	r2, #2
   28baa:	fbb2 f2f8 	udiv	r2, r2, r8
   28bae:	ebac 0c02 	sub.w	ip, ip, r2
   28bb2:	f240 52f9 	movw	r2, #1529	; 0x5f9
   28bb6:	4596      	cmp	lr, r2
   28bb8:	bf94      	ite	ls
   28bba:	2202      	movls	r2, #2
   28bbc:	f06f 0209 	mvnhi.w	r2, #9
   28bc0:	4410      	add	r0, r2
   28bc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   28bc6:	fb02 1505 	mla	r5, r2, r5, r1
   28bca:	2801      	cmp	r0, #1
   28bcc:	bf98      	it	ls
   28bce:	3501      	addls	r5, #1
   28bd0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   28bd4:	d30d      	bcc.n	28bf2 <gmtime_r+0x122>
   28bd6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   28bda:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   28bde:	61e3      	str	r3, [r4, #28]
   28be0:	2300      	movs	r3, #0
   28be2:	f8c4 c00c 	str.w	ip, [r4, #12]
   28be6:	e9c4 0504 	strd	r0, r5, [r4, #16]
   28bea:	6223      	str	r3, [r4, #32]
   28bec:	4620      	mov	r0, r4
   28bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28bf2:	078a      	lsls	r2, r1, #30
   28bf4:	d102      	bne.n	28bfc <gmtime_r+0x12c>
   28bf6:	fb07 1616 	mls	r6, r7, r6, r1
   28bfa:	b95e      	cbnz	r6, 28c14 <gmtime_r+0x144>
   28bfc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   28c00:	fbb1 f6f2 	udiv	r6, r1, r2
   28c04:	fb02 1216 	mls	r2, r2, r6, r1
   28c08:	fab2 f282 	clz	r2, r2
   28c0c:	0952      	lsrs	r2, r2, #5
   28c0e:	333b      	adds	r3, #59	; 0x3b
   28c10:	4413      	add	r3, r2
   28c12:	e7e2      	b.n	28bda <gmtime_r+0x10a>
   28c14:	2201      	movs	r2, #1
   28c16:	e7fa      	b.n	28c0e <gmtime_r+0x13e>
   28c18:	00015180 	.word	0x00015180
   28c1c:	00023ab1 	.word	0x00023ab1
   28c20:	fffdc54f 	.word	0xfffdc54f
   28c24:	00023ab0 	.word	0x00023ab0

00028c28 <localtime>:
   28c28:	b538      	push	{r3, r4, r5, lr}
   28c2a:	4b0b      	ldr	r3, [pc, #44]	; (28c58 <localtime+0x30>)
   28c2c:	4604      	mov	r4, r0
   28c2e:	681d      	ldr	r5, [r3, #0]
   28c30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   28c32:	b953      	cbnz	r3, 28c4a <localtime+0x22>
   28c34:	2024      	movs	r0, #36	; 0x24
   28c36:	f000 f907 	bl	28e48 <malloc>
   28c3a:	4602      	mov	r2, r0
   28c3c:	63e8      	str	r0, [r5, #60]	; 0x3c
   28c3e:	b920      	cbnz	r0, 28c4a <localtime+0x22>
   28c40:	4b06      	ldr	r3, [pc, #24]	; (28c5c <localtime+0x34>)
   28c42:	2132      	movs	r1, #50	; 0x32
   28c44:	4806      	ldr	r0, [pc, #24]	; (28c60 <localtime+0x38>)
   28c46:	f001 f9a9 	bl	29f9c <__assert_func>
   28c4a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   28c4c:	4620      	mov	r0, r4
   28c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28c52:	f000 b807 	b.w	28c64 <localtime_r>
   28c56:	bf00      	nop
   28c58:	2000c6e4 	.word	0x2000c6e4
   28c5c:	00031b3d 	.word	0x00031b3d
   28c60:	00031b54 	.word	0x00031b54

00028c64 <localtime_r>:
   28c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c68:	460c      	mov	r4, r1
   28c6a:	4680      	mov	r8, r0
   28c6c:	f001 fa12 	bl	2a094 <__gettzinfo>
   28c70:	4605      	mov	r5, r0
   28c72:	4621      	mov	r1, r4
   28c74:	4640      	mov	r0, r8
   28c76:	f7ff ff2b 	bl	28ad0 <gmtime_r>
   28c7a:	6943      	ldr	r3, [r0, #20]
   28c7c:	4604      	mov	r4, r0
   28c7e:	0799      	lsls	r1, r3, #30
   28c80:	f203 776c 	addw	r7, r3, #1900	; 0x76c
   28c84:	d105      	bne.n	28c92 <localtime_r+0x2e>
   28c86:	2264      	movs	r2, #100	; 0x64
   28c88:	fb97 f3f2 	sdiv	r3, r7, r2
   28c8c:	fb02 7313 	mls	r3, r2, r3, r7
   28c90:	bb73      	cbnz	r3, 28cf0 <localtime_r+0x8c>
   28c92:	f44f 73c8 	mov.w	r3, #400	; 0x190
   28c96:	fb97 f6f3 	sdiv	r6, r7, r3
   28c9a:	fb03 7616 	mls	r6, r3, r6, r7
   28c9e:	fab6 f386 	clz	r3, r6
   28ca2:	095b      	lsrs	r3, r3, #5
   28ca4:	2230      	movs	r2, #48	; 0x30
   28ca6:	4e66      	ldr	r6, [pc, #408]	; (28e40 <localtime_r+0x1dc>)
   28ca8:	fb02 6603 	mla	r6, r2, r3, r6
   28cac:	f000 ff92 	bl	29bd4 <__tz_lock>
   28cb0:	f000 ff9c 	bl	29bec <_tzset_unlocked>
   28cb4:	4b63      	ldr	r3, [pc, #396]	; (28e44 <localtime_r+0x1e0>)
   28cb6:	681b      	ldr	r3, [r3, #0]
   28cb8:	b34b      	cbz	r3, 28d0e <localtime_r+0xaa>
   28cba:	686b      	ldr	r3, [r5, #4]
   28cbc:	42bb      	cmp	r3, r7
   28cbe:	d119      	bne.n	28cf4 <localtime_r+0x90>
   28cc0:	682f      	ldr	r7, [r5, #0]
   28cc2:	e9d8 2300 	ldrd	r2, r3, [r8]
   28cc6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
   28cca:	b9df      	cbnz	r7, 28d04 <localtime_r+0xa0>
   28ccc:	4282      	cmp	r2, r0
   28cce:	eb73 0101 	sbcs.w	r1, r3, r1
   28cd2:	da23      	bge.n	28d1c <localtime_r+0xb8>
   28cd4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
   28cd8:	4282      	cmp	r2, r0
   28cda:	eb73 0701 	sbcs.w	r7, r3, r1
   28cde:	bfb4      	ite	lt
   28ce0:	2701      	movlt	r7, #1
   28ce2:	2700      	movge	r7, #0
   28ce4:	4282      	cmp	r2, r0
   28ce6:	6227      	str	r7, [r4, #32]
   28ce8:	418b      	sbcs	r3, r1
   28cea:	db19      	blt.n	28d20 <localtime_r+0xbc>
   28cec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   28cee:	e018      	b.n	28d22 <localtime_r+0xbe>
   28cf0:	2301      	movs	r3, #1
   28cf2:	e7d7      	b.n	28ca4 <localtime_r+0x40>
   28cf4:	4638      	mov	r0, r7
   28cf6:	f000 fec1 	bl	29a7c <__tzcalc_limits>
   28cfa:	2800      	cmp	r0, #0
   28cfc:	d1e0      	bne.n	28cc0 <localtime_r+0x5c>
   28cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d02:	e004      	b.n	28d0e <localtime_r+0xaa>
   28d04:	4282      	cmp	r2, r0
   28d06:	eb73 0101 	sbcs.w	r1, r3, r1
   28d0a:	da02      	bge.n	28d12 <localtime_r+0xae>
   28d0c:	2300      	movs	r3, #0
   28d0e:	6223      	str	r3, [r4, #32]
   28d10:	e7ec      	b.n	28cec <localtime_r+0x88>
   28d12:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
   28d16:	4282      	cmp	r2, r0
   28d18:	418b      	sbcs	r3, r1
   28d1a:	daf7      	bge.n	28d0c <localtime_r+0xa8>
   28d1c:	2301      	movs	r3, #1
   28d1e:	6223      	str	r3, [r4, #32]
   28d20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   28d22:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   28d26:	203c      	movs	r0, #60	; 0x3c
   28d28:	6861      	ldr	r1, [r4, #4]
   28d2a:	fb93 f5f2 	sdiv	r5, r3, r2
   28d2e:	fb02 3315 	mls	r3, r2, r5, r3
   28d32:	fb93 f2f0 	sdiv	r2, r3, r0
   28d36:	fb00 3012 	mls	r0, r0, r2, r3
   28d3a:	6823      	ldr	r3, [r4, #0]
   28d3c:	1a89      	subs	r1, r1, r2
   28d3e:	68a2      	ldr	r2, [r4, #8]
   28d40:	1a1b      	subs	r3, r3, r0
   28d42:	1b52      	subs	r2, r2, r5
   28d44:	6061      	str	r1, [r4, #4]
   28d46:	2b3b      	cmp	r3, #59	; 0x3b
   28d48:	6023      	str	r3, [r4, #0]
   28d4a:	60a2      	str	r2, [r4, #8]
   28d4c:	dd34      	ble.n	28db8 <localtime_r+0x154>
   28d4e:	3101      	adds	r1, #1
   28d50:	3b3c      	subs	r3, #60	; 0x3c
   28d52:	6061      	str	r1, [r4, #4]
   28d54:	6023      	str	r3, [r4, #0]
   28d56:	6863      	ldr	r3, [r4, #4]
   28d58:	2b3b      	cmp	r3, #59	; 0x3b
   28d5a:	dd33      	ble.n	28dc4 <localtime_r+0x160>
   28d5c:	3201      	adds	r2, #1
   28d5e:	3b3c      	subs	r3, #60	; 0x3c
   28d60:	60a2      	str	r2, [r4, #8]
   28d62:	6063      	str	r3, [r4, #4]
   28d64:	68a3      	ldr	r3, [r4, #8]
   28d66:	2b17      	cmp	r3, #23
   28d68:	dd32      	ble.n	28dd0 <localtime_r+0x16c>
   28d6a:	69e2      	ldr	r2, [r4, #28]
   28d6c:	3b18      	subs	r3, #24
   28d6e:	3201      	adds	r2, #1
   28d70:	60a3      	str	r3, [r4, #8]
   28d72:	6923      	ldr	r3, [r4, #16]
   28d74:	61e2      	str	r2, [r4, #28]
   28d76:	69a2      	ldr	r2, [r4, #24]
   28d78:	3201      	adds	r2, #1
   28d7a:	2a06      	cmp	r2, #6
   28d7c:	bfc8      	it	gt
   28d7e:	2200      	movgt	r2, #0
   28d80:	61a2      	str	r2, [r4, #24]
   28d82:	68e2      	ldr	r2, [r4, #12]
   28d84:	3201      	adds	r2, #1
   28d86:	60e2      	str	r2, [r4, #12]
   28d88:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   28d8c:	428a      	cmp	r2, r1
   28d8e:	dd0e      	ble.n	28dae <localtime_r+0x14a>
   28d90:	2b0b      	cmp	r3, #11
   28d92:	eba2 0201 	sub.w	r2, r2, r1
   28d96:	60e2      	str	r2, [r4, #12]
   28d98:	f103 0201 	add.w	r2, r3, #1
   28d9c:	bf05      	ittet	eq
   28d9e:	6963      	ldreq	r3, [r4, #20]
   28da0:	2200      	moveq	r2, #0
   28da2:	6122      	strne	r2, [r4, #16]
   28da4:	3301      	addeq	r3, #1
   28da6:	bf02      	ittt	eq
   28da8:	6122      	streq	r2, [r4, #16]
   28daa:	61e2      	streq	r2, [r4, #28]
   28dac:	6163      	streq	r3, [r4, #20]
   28dae:	f000 ff17 	bl	29be0 <__tz_unlock>
   28db2:	4620      	mov	r0, r4
   28db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28db8:	2b00      	cmp	r3, #0
   28dba:	dacc      	bge.n	28d56 <localtime_r+0xf2>
   28dbc:	3901      	subs	r1, #1
   28dbe:	333c      	adds	r3, #60	; 0x3c
   28dc0:	6061      	str	r1, [r4, #4]
   28dc2:	e7c7      	b.n	28d54 <localtime_r+0xf0>
   28dc4:	2b00      	cmp	r3, #0
   28dc6:	dacd      	bge.n	28d64 <localtime_r+0x100>
   28dc8:	3a01      	subs	r2, #1
   28dca:	333c      	adds	r3, #60	; 0x3c
   28dcc:	60a2      	str	r2, [r4, #8]
   28dce:	e7c8      	b.n	28d62 <localtime_r+0xfe>
   28dd0:	2b00      	cmp	r3, #0
   28dd2:	daec      	bge.n	28dae <localtime_r+0x14a>
   28dd4:	69e2      	ldr	r2, [r4, #28]
   28dd6:	3318      	adds	r3, #24
   28dd8:	3a01      	subs	r2, #1
   28dda:	60a3      	str	r3, [r4, #8]
   28ddc:	61e2      	str	r2, [r4, #28]
   28dde:	69a2      	ldr	r2, [r4, #24]
   28de0:	3a01      	subs	r2, #1
   28de2:	bf48      	it	mi
   28de4:	2206      	movmi	r2, #6
   28de6:	61a2      	str	r2, [r4, #24]
   28de8:	68e2      	ldr	r2, [r4, #12]
   28dea:	3a01      	subs	r2, #1
   28dec:	60e2      	str	r2, [r4, #12]
   28dee:	2a00      	cmp	r2, #0
   28df0:	d1dd      	bne.n	28dae <localtime_r+0x14a>
   28df2:	6923      	ldr	r3, [r4, #16]
   28df4:	3b01      	subs	r3, #1
   28df6:	d405      	bmi.n	28e04 <localtime_r+0x1a0>
   28df8:	6123      	str	r3, [r4, #16]
   28dfa:	6923      	ldr	r3, [r4, #16]
   28dfc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   28e00:	60e3      	str	r3, [r4, #12]
   28e02:	e7d4      	b.n	28dae <localtime_r+0x14a>
   28e04:	230b      	movs	r3, #11
   28e06:	6123      	str	r3, [r4, #16]
   28e08:	6963      	ldr	r3, [r4, #20]
   28e0a:	1e5a      	subs	r2, r3, #1
   28e0c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   28e10:	6162      	str	r2, [r4, #20]
   28e12:	079a      	lsls	r2, r3, #30
   28e14:	d105      	bne.n	28e22 <localtime_r+0x1be>
   28e16:	2164      	movs	r1, #100	; 0x64
   28e18:	fb93 f2f1 	sdiv	r2, r3, r1
   28e1c:	fb01 3212 	mls	r2, r1, r2, r3
   28e20:	b962      	cbnz	r2, 28e3c <localtime_r+0x1d8>
   28e22:	f44f 72c8 	mov.w	r2, #400	; 0x190
   28e26:	fb93 f1f2 	sdiv	r1, r3, r2
   28e2a:	fb02 3311 	mls	r3, r2, r1, r3
   28e2e:	fab3 f383 	clz	r3, r3
   28e32:	095b      	lsrs	r3, r3, #5
   28e34:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   28e38:	61e3      	str	r3, [r4, #28]
   28e3a:	e7de      	b.n	28dfa <localtime_r+0x196>
   28e3c:	2301      	movs	r3, #1
   28e3e:	e7f9      	b.n	28e34 <localtime_r+0x1d0>
   28e40:	0002eeb4 	.word	0x0002eeb4
   28e44:	2000d4b0 	.word	0x2000d4b0

00028e48 <malloc>:
   28e48:	4b02      	ldr	r3, [pc, #8]	; (28e54 <malloc+0xc>)
   28e4a:	4601      	mov	r1, r0
   28e4c:	6818      	ldr	r0, [r3, #0]
   28e4e:	f000 b875 	b.w	28f3c <_malloc_r>
   28e52:	bf00      	nop
   28e54:	2000c6e4 	.word	0x2000c6e4

00028e58 <free>:
   28e58:	4b02      	ldr	r3, [pc, #8]	; (28e64 <free+0xc>)
   28e5a:	4601      	mov	r1, r0
   28e5c:	6818      	ldr	r0, [r3, #0]
   28e5e:	f000 b803 	b.w	28e68 <_free_r>
   28e62:	bf00      	nop
   28e64:	2000c6e4 	.word	0x2000c6e4

00028e68 <_free_r>:
   28e68:	b538      	push	{r3, r4, r5, lr}
   28e6a:	4605      	mov	r5, r0
   28e6c:	2900      	cmp	r1, #0
   28e6e:	d041      	beq.n	28ef4 <_free_r+0x8c>
   28e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28e74:	1f0c      	subs	r4, r1, #4
   28e76:	2b00      	cmp	r3, #0
   28e78:	bfb8      	it	lt
   28e7a:	18e4      	addlt	r4, r4, r3
   28e7c:	f001 f924 	bl	2a0c8 <__malloc_lock>
   28e80:	4a1d      	ldr	r2, [pc, #116]	; (28ef8 <_free_r+0x90>)
   28e82:	6813      	ldr	r3, [r2, #0]
   28e84:	b933      	cbnz	r3, 28e94 <_free_r+0x2c>
   28e86:	6063      	str	r3, [r4, #4]
   28e88:	6014      	str	r4, [r2, #0]
   28e8a:	4628      	mov	r0, r5
   28e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28e90:	f001 b920 	b.w	2a0d4 <__malloc_unlock>
   28e94:	42a3      	cmp	r3, r4
   28e96:	d908      	bls.n	28eaa <_free_r+0x42>
   28e98:	6820      	ldr	r0, [r4, #0]
   28e9a:	1821      	adds	r1, r4, r0
   28e9c:	428b      	cmp	r3, r1
   28e9e:	bf01      	itttt	eq
   28ea0:	6819      	ldreq	r1, [r3, #0]
   28ea2:	685b      	ldreq	r3, [r3, #4]
   28ea4:	1809      	addeq	r1, r1, r0
   28ea6:	6021      	streq	r1, [r4, #0]
   28ea8:	e7ed      	b.n	28e86 <_free_r+0x1e>
   28eaa:	461a      	mov	r2, r3
   28eac:	685b      	ldr	r3, [r3, #4]
   28eae:	b10b      	cbz	r3, 28eb4 <_free_r+0x4c>
   28eb0:	42a3      	cmp	r3, r4
   28eb2:	d9fa      	bls.n	28eaa <_free_r+0x42>
   28eb4:	6811      	ldr	r1, [r2, #0]
   28eb6:	1850      	adds	r0, r2, r1
   28eb8:	42a0      	cmp	r0, r4
   28eba:	d10b      	bne.n	28ed4 <_free_r+0x6c>
   28ebc:	6820      	ldr	r0, [r4, #0]
   28ebe:	4401      	add	r1, r0
   28ec0:	1850      	adds	r0, r2, r1
   28ec2:	6011      	str	r1, [r2, #0]
   28ec4:	4283      	cmp	r3, r0
   28ec6:	d1e0      	bne.n	28e8a <_free_r+0x22>
   28ec8:	6818      	ldr	r0, [r3, #0]
   28eca:	685b      	ldr	r3, [r3, #4]
   28ecc:	4401      	add	r1, r0
   28ece:	6053      	str	r3, [r2, #4]
   28ed0:	6011      	str	r1, [r2, #0]
   28ed2:	e7da      	b.n	28e8a <_free_r+0x22>
   28ed4:	d902      	bls.n	28edc <_free_r+0x74>
   28ed6:	230c      	movs	r3, #12
   28ed8:	602b      	str	r3, [r5, #0]
   28eda:	e7d6      	b.n	28e8a <_free_r+0x22>
   28edc:	6820      	ldr	r0, [r4, #0]
   28ede:	1821      	adds	r1, r4, r0
   28ee0:	428b      	cmp	r3, r1
   28ee2:	bf02      	ittt	eq
   28ee4:	6819      	ldreq	r1, [r3, #0]
   28ee6:	685b      	ldreq	r3, [r3, #4]
   28ee8:	1809      	addeq	r1, r1, r0
   28eea:	6063      	str	r3, [r4, #4]
   28eec:	bf08      	it	eq
   28eee:	6021      	streq	r1, [r4, #0]
   28ef0:	6054      	str	r4, [r2, #4]
   28ef2:	e7ca      	b.n	28e8a <_free_r+0x22>
   28ef4:	bd38      	pop	{r3, r4, r5, pc}
   28ef6:	bf00      	nop
   28ef8:	2000d4a4 	.word	0x2000d4a4

00028efc <sbrk_aligned>:
   28efc:	b570      	push	{r4, r5, r6, lr}
   28efe:	4e0e      	ldr	r6, [pc, #56]	; (28f38 <sbrk_aligned+0x3c>)
   28f00:	460c      	mov	r4, r1
   28f02:	4605      	mov	r5, r0
   28f04:	6831      	ldr	r1, [r6, #0]
   28f06:	b911      	cbnz	r1, 28f0e <sbrk_aligned+0x12>
   28f08:	f000 fbdc 	bl	296c4 <_sbrk_r>
   28f0c:	6030      	str	r0, [r6, #0]
   28f0e:	4621      	mov	r1, r4
   28f10:	4628      	mov	r0, r5
   28f12:	f000 fbd7 	bl	296c4 <_sbrk_r>
   28f16:	1c43      	adds	r3, r0, #1
   28f18:	d00a      	beq.n	28f30 <sbrk_aligned+0x34>
   28f1a:	1cc4      	adds	r4, r0, #3
   28f1c:	f024 0403 	bic.w	r4, r4, #3
   28f20:	42a0      	cmp	r0, r4
   28f22:	d007      	beq.n	28f34 <sbrk_aligned+0x38>
   28f24:	1a21      	subs	r1, r4, r0
   28f26:	4628      	mov	r0, r5
   28f28:	f000 fbcc 	bl	296c4 <_sbrk_r>
   28f2c:	3001      	adds	r0, #1
   28f2e:	d101      	bne.n	28f34 <sbrk_aligned+0x38>
   28f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28f34:	4620      	mov	r0, r4
   28f36:	bd70      	pop	{r4, r5, r6, pc}
   28f38:	2000d4a8 	.word	0x2000d4a8

00028f3c <_malloc_r>:
   28f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28f40:	1ccd      	adds	r5, r1, #3
   28f42:	4607      	mov	r7, r0
   28f44:	f025 0503 	bic.w	r5, r5, #3
   28f48:	3508      	adds	r5, #8
   28f4a:	2d0c      	cmp	r5, #12
   28f4c:	bf38      	it	cc
   28f4e:	250c      	movcc	r5, #12
   28f50:	2d00      	cmp	r5, #0
   28f52:	db01      	blt.n	28f58 <_malloc_r+0x1c>
   28f54:	42a9      	cmp	r1, r5
   28f56:	d905      	bls.n	28f64 <_malloc_r+0x28>
   28f58:	230c      	movs	r3, #12
   28f5a:	2600      	movs	r6, #0
   28f5c:	603b      	str	r3, [r7, #0]
   28f5e:	4630      	mov	r0, r6
   28f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28f64:	4e2e      	ldr	r6, [pc, #184]	; (29020 <_malloc_r+0xe4>)
   28f66:	f001 f8af 	bl	2a0c8 <__malloc_lock>
   28f6a:	6833      	ldr	r3, [r6, #0]
   28f6c:	461c      	mov	r4, r3
   28f6e:	bb34      	cbnz	r4, 28fbe <_malloc_r+0x82>
   28f70:	4629      	mov	r1, r5
   28f72:	4638      	mov	r0, r7
   28f74:	f7ff ffc2 	bl	28efc <sbrk_aligned>
   28f78:	1c43      	adds	r3, r0, #1
   28f7a:	4604      	mov	r4, r0
   28f7c:	d14d      	bne.n	2901a <_malloc_r+0xde>
   28f7e:	6834      	ldr	r4, [r6, #0]
   28f80:	4626      	mov	r6, r4
   28f82:	2e00      	cmp	r6, #0
   28f84:	d140      	bne.n	29008 <_malloc_r+0xcc>
   28f86:	6823      	ldr	r3, [r4, #0]
   28f88:	4631      	mov	r1, r6
   28f8a:	4638      	mov	r0, r7
   28f8c:	eb04 0803 	add.w	r8, r4, r3
   28f90:	f000 fb98 	bl	296c4 <_sbrk_r>
   28f94:	4580      	cmp	r8, r0
   28f96:	d13a      	bne.n	2900e <_malloc_r+0xd2>
   28f98:	6821      	ldr	r1, [r4, #0]
   28f9a:	3503      	adds	r5, #3
   28f9c:	4638      	mov	r0, r7
   28f9e:	1a6d      	subs	r5, r5, r1
   28fa0:	f025 0503 	bic.w	r5, r5, #3
   28fa4:	3508      	adds	r5, #8
   28fa6:	2d0c      	cmp	r5, #12
   28fa8:	bf38      	it	cc
   28faa:	250c      	movcc	r5, #12
   28fac:	4629      	mov	r1, r5
   28fae:	f7ff ffa5 	bl	28efc <sbrk_aligned>
   28fb2:	3001      	adds	r0, #1
   28fb4:	d02b      	beq.n	2900e <_malloc_r+0xd2>
   28fb6:	6823      	ldr	r3, [r4, #0]
   28fb8:	442b      	add	r3, r5
   28fba:	6023      	str	r3, [r4, #0]
   28fbc:	e00e      	b.n	28fdc <_malloc_r+0xa0>
   28fbe:	6822      	ldr	r2, [r4, #0]
   28fc0:	1b52      	subs	r2, r2, r5
   28fc2:	d41e      	bmi.n	29002 <_malloc_r+0xc6>
   28fc4:	2a0b      	cmp	r2, #11
   28fc6:	d916      	bls.n	28ff6 <_malloc_r+0xba>
   28fc8:	1961      	adds	r1, r4, r5
   28fca:	42a3      	cmp	r3, r4
   28fcc:	6025      	str	r5, [r4, #0]
   28fce:	bf18      	it	ne
   28fd0:	6059      	strne	r1, [r3, #4]
   28fd2:	6863      	ldr	r3, [r4, #4]
   28fd4:	bf08      	it	eq
   28fd6:	6031      	streq	r1, [r6, #0]
   28fd8:	5162      	str	r2, [r4, r5]
   28fda:	604b      	str	r3, [r1, #4]
   28fdc:	f104 060b 	add.w	r6, r4, #11
   28fe0:	4638      	mov	r0, r7
   28fe2:	f001 f877 	bl	2a0d4 <__malloc_unlock>
   28fe6:	1d23      	adds	r3, r4, #4
   28fe8:	f026 0607 	bic.w	r6, r6, #7
   28fec:	1af2      	subs	r2, r6, r3
   28fee:	d0b6      	beq.n	28f5e <_malloc_r+0x22>
   28ff0:	1b9b      	subs	r3, r3, r6
   28ff2:	50a3      	str	r3, [r4, r2]
   28ff4:	e7b3      	b.n	28f5e <_malloc_r+0x22>
   28ff6:	6862      	ldr	r2, [r4, #4]
   28ff8:	42a3      	cmp	r3, r4
   28ffa:	bf0c      	ite	eq
   28ffc:	6032      	streq	r2, [r6, #0]
   28ffe:	605a      	strne	r2, [r3, #4]
   29000:	e7ec      	b.n	28fdc <_malloc_r+0xa0>
   29002:	4623      	mov	r3, r4
   29004:	6864      	ldr	r4, [r4, #4]
   29006:	e7b2      	b.n	28f6e <_malloc_r+0x32>
   29008:	4634      	mov	r4, r6
   2900a:	6876      	ldr	r6, [r6, #4]
   2900c:	e7b9      	b.n	28f82 <_malloc_r+0x46>
   2900e:	230c      	movs	r3, #12
   29010:	4638      	mov	r0, r7
   29012:	603b      	str	r3, [r7, #0]
   29014:	f001 f85e 	bl	2a0d4 <__malloc_unlock>
   29018:	e7a1      	b.n	28f5e <_malloc_r+0x22>
   2901a:	6025      	str	r5, [r4, #0]
   2901c:	e7de      	b.n	28fdc <_malloc_r+0xa0>
   2901e:	bf00      	nop
   29020:	2000d4a4 	.word	0x2000d4a4

00029024 <_printf_float>:
   29024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29028:	b091      	sub	sp, #68	; 0x44
   2902a:	460c      	mov	r4, r1
   2902c:	4616      	mov	r6, r2
   2902e:	461f      	mov	r7, r3
   29030:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   29034:	4605      	mov	r5, r0
   29036:	f001 f831 	bl	2a09c <_localeconv_r>
   2903a:	6803      	ldr	r3, [r0, #0]
   2903c:	4618      	mov	r0, r3
   2903e:	9309      	str	r3, [sp, #36]	; 0x24
   29040:	f7f0 fa8c 	bl	1955c <strlen>
   29044:	2300      	movs	r3, #0
   29046:	900a      	str	r0, [sp, #40]	; 0x28
   29048:	930e      	str	r3, [sp, #56]	; 0x38
   2904a:	f8d8 3000 	ldr.w	r3, [r8]
   2904e:	f894 9018 	ldrb.w	r9, [r4, #24]
   29052:	3307      	adds	r3, #7
   29054:	f8d4 b000 	ldr.w	fp, [r4]
   29058:	f023 0307 	bic.w	r3, r3, #7
   2905c:	f103 0208 	add.w	r2, r3, #8
   29060:	f8c8 2000 	str.w	r2, [r8]
   29064:	e9d3 2300 	ldrd	r2, r3, [r3]
   29068:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2906c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   29070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29074:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   29078:	4640      	mov	r0, r8
   2907a:	930b      	str	r3, [sp, #44]	; 0x2c
   2907c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2907e:	4b9b      	ldr	r3, [pc, #620]	; (292ec <_printf_float+0x2c8>)
   29080:	f7f0 fa24 	bl	194cc <__aeabi_dcmpun>
   29084:	bb70      	cbnz	r0, 290e4 <_printf_float+0xc0>
   29086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2908a:	4b98      	ldr	r3, [pc, #608]	; (292ec <_printf_float+0x2c8>)
   2908c:	4640      	mov	r0, r8
   2908e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29090:	f7f0 f9fe 	bl	19490 <__aeabi_dcmple>
   29094:	bb30      	cbnz	r0, 290e4 <_printf_float+0xc0>
   29096:	2200      	movs	r2, #0
   29098:	2300      	movs	r3, #0
   2909a:	4640      	mov	r0, r8
   2909c:	4651      	mov	r1, sl
   2909e:	f7f0 f9ed 	bl	1947c <__aeabi_dcmplt>
   290a2:	b110      	cbz	r0, 290aa <_printf_float+0x86>
   290a4:	232d      	movs	r3, #45	; 0x2d
   290a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   290aa:	4b91      	ldr	r3, [pc, #580]	; (292f0 <_printf_float+0x2cc>)
   290ac:	4891      	ldr	r0, [pc, #580]	; (292f4 <_printf_float+0x2d0>)
   290ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   290b2:	bf94      	ite	ls
   290b4:	4698      	movls	r8, r3
   290b6:	4680      	movhi	r8, r0
   290b8:	2303      	movs	r3, #3
   290ba:	f04f 0a00 	mov.w	sl, #0
   290be:	6123      	str	r3, [r4, #16]
   290c0:	f02b 0304 	bic.w	r3, fp, #4
   290c4:	6023      	str	r3, [r4, #0]
   290c6:	4633      	mov	r3, r6
   290c8:	aa0f      	add	r2, sp, #60	; 0x3c
   290ca:	4621      	mov	r1, r4
   290cc:	4628      	mov	r0, r5
   290ce:	9700      	str	r7, [sp, #0]
   290d0:	f004 fe28 	bl	2dd24 <_printf_common>
   290d4:	3001      	adds	r0, #1
   290d6:	f040 808f 	bne.w	291f8 <_printf_float+0x1d4>
   290da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   290de:	b011      	add	sp, #68	; 0x44
   290e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290e4:	4642      	mov	r2, r8
   290e6:	4653      	mov	r3, sl
   290e8:	4640      	mov	r0, r8
   290ea:	4651      	mov	r1, sl
   290ec:	f7f0 f9ee 	bl	194cc <__aeabi_dcmpun>
   290f0:	b140      	cbz	r0, 29104 <_printf_float+0xe0>
   290f2:	f1ba 0f00 	cmp.w	sl, #0
   290f6:	4880      	ldr	r0, [pc, #512]	; (292f8 <_printf_float+0x2d4>)
   290f8:	bfbc      	itt	lt
   290fa:	232d      	movlt	r3, #45	; 0x2d
   290fc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   29100:	4b7e      	ldr	r3, [pc, #504]	; (292fc <_printf_float+0x2d8>)
   29102:	e7d4      	b.n	290ae <_printf_float+0x8a>
   29104:	6863      	ldr	r3, [r4, #4]
   29106:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   2910a:	1c5a      	adds	r2, r3, #1
   2910c:	d142      	bne.n	29194 <_printf_float+0x170>
   2910e:	2306      	movs	r3, #6
   29110:	6063      	str	r3, [r4, #4]
   29112:	2200      	movs	r2, #0
   29114:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   29118:	4628      	mov	r0, r5
   2911a:	910b      	str	r1, [sp, #44]	; 0x2c
   2911c:	9206      	str	r2, [sp, #24]
   2911e:	aa0e      	add	r2, sp, #56	; 0x38
   29120:	6023      	str	r3, [r4, #0]
   29122:	e9cd 9204 	strd	r9, r2, [sp, #16]
   29126:	aa0d      	add	r2, sp, #52	; 0x34
   29128:	9203      	str	r2, [sp, #12]
   2912a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   2912e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   29132:	6863      	ldr	r3, [r4, #4]
   29134:	4642      	mov	r2, r8
   29136:	9300      	str	r3, [sp, #0]
   29138:	4653      	mov	r3, sl
   2913a:	f004 fd55 	bl	2dbe8 <__cvt>
   2913e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   29140:	4680      	mov	r8, r0
   29142:	2947      	cmp	r1, #71	; 0x47
   29144:	990d      	ldr	r1, [sp, #52]	; 0x34
   29146:	d108      	bne.n	2915a <_printf_float+0x136>
   29148:	1cc8      	adds	r0, r1, #3
   2914a:	db02      	blt.n	29152 <_printf_float+0x12e>
   2914c:	6863      	ldr	r3, [r4, #4]
   2914e:	4299      	cmp	r1, r3
   29150:	dd40      	ble.n	291d4 <_printf_float+0x1b0>
   29152:	f1a9 0902 	sub.w	r9, r9, #2
   29156:	fa5f f989 	uxtb.w	r9, r9
   2915a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2915e:	d81f      	bhi.n	291a0 <_printf_float+0x17c>
   29160:	3901      	subs	r1, #1
   29162:	464a      	mov	r2, r9
   29164:	f104 0050 	add.w	r0, r4, #80	; 0x50
   29168:	910d      	str	r1, [sp, #52]	; 0x34
   2916a:	f004 fd9d 	bl	2dca8 <__exponent>
   2916e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29170:	4682      	mov	sl, r0
   29172:	1813      	adds	r3, r2, r0
   29174:	2a01      	cmp	r2, #1
   29176:	6123      	str	r3, [r4, #16]
   29178:	dc02      	bgt.n	29180 <_printf_float+0x15c>
   2917a:	6822      	ldr	r2, [r4, #0]
   2917c:	07d2      	lsls	r2, r2, #31
   2917e:	d501      	bpl.n	29184 <_printf_float+0x160>
   29180:	3301      	adds	r3, #1
   29182:	6123      	str	r3, [r4, #16]
   29184:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   29188:	2b00      	cmp	r3, #0
   2918a:	d09c      	beq.n	290c6 <_printf_float+0xa2>
   2918c:	232d      	movs	r3, #45	; 0x2d
   2918e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   29192:	e798      	b.n	290c6 <_printf_float+0xa2>
   29194:	2947      	cmp	r1, #71	; 0x47
   29196:	d1bc      	bne.n	29112 <_printf_float+0xee>
   29198:	2b00      	cmp	r3, #0
   2919a:	d1ba      	bne.n	29112 <_printf_float+0xee>
   2919c:	2301      	movs	r3, #1
   2919e:	e7b7      	b.n	29110 <_printf_float+0xec>
   291a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   291a4:	d118      	bne.n	291d8 <_printf_float+0x1b4>
   291a6:	2900      	cmp	r1, #0
   291a8:	6863      	ldr	r3, [r4, #4]
   291aa:	dd0b      	ble.n	291c4 <_printf_float+0x1a0>
   291ac:	6121      	str	r1, [r4, #16]
   291ae:	b913      	cbnz	r3, 291b6 <_printf_float+0x192>
   291b0:	6822      	ldr	r2, [r4, #0]
   291b2:	07d0      	lsls	r0, r2, #31
   291b4:	d502      	bpl.n	291bc <_printf_float+0x198>
   291b6:	3301      	adds	r3, #1
   291b8:	440b      	add	r3, r1
   291ba:	6123      	str	r3, [r4, #16]
   291bc:	f04f 0a00 	mov.w	sl, #0
   291c0:	65a1      	str	r1, [r4, #88]	; 0x58
   291c2:	e7df      	b.n	29184 <_printf_float+0x160>
   291c4:	b913      	cbnz	r3, 291cc <_printf_float+0x1a8>
   291c6:	6822      	ldr	r2, [r4, #0]
   291c8:	07d2      	lsls	r2, r2, #31
   291ca:	d501      	bpl.n	291d0 <_printf_float+0x1ac>
   291cc:	3302      	adds	r3, #2
   291ce:	e7f4      	b.n	291ba <_printf_float+0x196>
   291d0:	2301      	movs	r3, #1
   291d2:	e7f2      	b.n	291ba <_printf_float+0x196>
   291d4:	f04f 0967 	mov.w	r9, #103	; 0x67
   291d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   291da:	4299      	cmp	r1, r3
   291dc:	db05      	blt.n	291ea <_printf_float+0x1c6>
   291de:	6823      	ldr	r3, [r4, #0]
   291e0:	6121      	str	r1, [r4, #16]
   291e2:	07d8      	lsls	r0, r3, #31
   291e4:	d5ea      	bpl.n	291bc <_printf_float+0x198>
   291e6:	1c4b      	adds	r3, r1, #1
   291e8:	e7e7      	b.n	291ba <_printf_float+0x196>
   291ea:	2900      	cmp	r1, #0
   291ec:	bfd4      	ite	le
   291ee:	f1c1 0202 	rsble	r2, r1, #2
   291f2:	2201      	movgt	r2, #1
   291f4:	4413      	add	r3, r2
   291f6:	e7e0      	b.n	291ba <_printf_float+0x196>
   291f8:	6823      	ldr	r3, [r4, #0]
   291fa:	055a      	lsls	r2, r3, #21
   291fc:	d407      	bmi.n	2920e <_printf_float+0x1ea>
   291fe:	6923      	ldr	r3, [r4, #16]
   29200:	4642      	mov	r2, r8
   29202:	4631      	mov	r1, r6
   29204:	4628      	mov	r0, r5
   29206:	47b8      	blx	r7
   29208:	3001      	adds	r0, #1
   2920a:	d12b      	bne.n	29264 <_printf_float+0x240>
   2920c:	e765      	b.n	290da <_printf_float+0xb6>
   2920e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   29212:	f240 80dc 	bls.w	293ce <_printf_float+0x3aa>
   29216:	2200      	movs	r2, #0
   29218:	2300      	movs	r3, #0
   2921a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2921e:	f7f0 f923 	bl	19468 <__aeabi_dcmpeq>
   29222:	2800      	cmp	r0, #0
   29224:	d033      	beq.n	2928e <_printf_float+0x26a>
   29226:	2301      	movs	r3, #1
   29228:	4a35      	ldr	r2, [pc, #212]	; (29300 <_printf_float+0x2dc>)
   2922a:	4631      	mov	r1, r6
   2922c:	4628      	mov	r0, r5
   2922e:	47b8      	blx	r7
   29230:	3001      	adds	r0, #1
   29232:	f43f af52 	beq.w	290da <_printf_float+0xb6>
   29236:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2923a:	429a      	cmp	r2, r3
   2923c:	db02      	blt.n	29244 <_printf_float+0x220>
   2923e:	6823      	ldr	r3, [r4, #0]
   29240:	07d8      	lsls	r0, r3, #31
   29242:	d50f      	bpl.n	29264 <_printf_float+0x240>
   29244:	4631      	mov	r1, r6
   29246:	4628      	mov	r0, r5
   29248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2924c:	47b8      	blx	r7
   2924e:	3001      	adds	r0, #1
   29250:	f43f af43 	beq.w	290da <_printf_float+0xb6>
   29254:	f04f 0800 	mov.w	r8, #0
   29258:	f104 091a 	add.w	r9, r4, #26
   2925c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2925e:	3b01      	subs	r3, #1
   29260:	4543      	cmp	r3, r8
   29262:	dc09      	bgt.n	29278 <_printf_float+0x254>
   29264:	6823      	ldr	r3, [r4, #0]
   29266:	079b      	lsls	r3, r3, #30
   29268:	f100 8101 	bmi.w	2946e <_printf_float+0x44a>
   2926c:	68e0      	ldr	r0, [r4, #12]
   2926e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29270:	4298      	cmp	r0, r3
   29272:	bfb8      	it	lt
   29274:	4618      	movlt	r0, r3
   29276:	e732      	b.n	290de <_printf_float+0xba>
   29278:	2301      	movs	r3, #1
   2927a:	464a      	mov	r2, r9
   2927c:	4631      	mov	r1, r6
   2927e:	4628      	mov	r0, r5
   29280:	47b8      	blx	r7
   29282:	3001      	adds	r0, #1
   29284:	f43f af29 	beq.w	290da <_printf_float+0xb6>
   29288:	f108 0801 	add.w	r8, r8, #1
   2928c:	e7e6      	b.n	2925c <_printf_float+0x238>
   2928e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29290:	2b00      	cmp	r3, #0
   29292:	dc37      	bgt.n	29304 <_printf_float+0x2e0>
   29294:	2301      	movs	r3, #1
   29296:	4a1a      	ldr	r2, [pc, #104]	; (29300 <_printf_float+0x2dc>)
   29298:	4631      	mov	r1, r6
   2929a:	4628      	mov	r0, r5
   2929c:	47b8      	blx	r7
   2929e:	3001      	adds	r0, #1
   292a0:	f43f af1b 	beq.w	290da <_printf_float+0xb6>
   292a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   292a8:	4313      	orrs	r3, r2
   292aa:	d102      	bne.n	292b2 <_printf_float+0x28e>
   292ac:	6823      	ldr	r3, [r4, #0]
   292ae:	07d9      	lsls	r1, r3, #31
   292b0:	d5d8      	bpl.n	29264 <_printf_float+0x240>
   292b2:	4631      	mov	r1, r6
   292b4:	4628      	mov	r0, r5
   292b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   292ba:	47b8      	blx	r7
   292bc:	3001      	adds	r0, #1
   292be:	f43f af0c 	beq.w	290da <_printf_float+0xb6>
   292c2:	f04f 0900 	mov.w	r9, #0
   292c6:	f104 0a1a 	add.w	sl, r4, #26
   292ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   292cc:	425b      	negs	r3, r3
   292ce:	454b      	cmp	r3, r9
   292d0:	dc01      	bgt.n	292d6 <_printf_float+0x2b2>
   292d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   292d4:	e794      	b.n	29200 <_printf_float+0x1dc>
   292d6:	2301      	movs	r3, #1
   292d8:	4652      	mov	r2, sl
   292da:	4631      	mov	r1, r6
   292dc:	4628      	mov	r0, r5
   292de:	47b8      	blx	r7
   292e0:	3001      	adds	r0, #1
   292e2:	f43f aefa 	beq.w	290da <_printf_float+0xb6>
   292e6:	f109 0901 	add.w	r9, r9, #1
   292ea:	e7ee      	b.n	292ca <_printf_float+0x2a6>
   292ec:	7fefffff 	.word	0x7fefffff
   292f0:	00031bd3 	.word	0x00031bd3
   292f4:	00031bd7 	.word	0x00031bd7
   292f8:	00031bdf 	.word	0x00031bdf
   292fc:	00031bdb 	.word	0x00031bdb
   29300:	000309e8 	.word	0x000309e8
   29304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29306:	6da3      	ldr	r3, [r4, #88]	; 0x58
   29308:	429a      	cmp	r2, r3
   2930a:	bfa8      	it	ge
   2930c:	461a      	movge	r2, r3
   2930e:	2a00      	cmp	r2, #0
   29310:	4691      	mov	r9, r2
   29312:	dc37      	bgt.n	29384 <_printf_float+0x360>
   29314:	f04f 0b00 	mov.w	fp, #0
   29318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2931c:	f104 021a 	add.w	r2, r4, #26
   29320:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   29324:	ebaa 0309 	sub.w	r3, sl, r9
   29328:	455b      	cmp	r3, fp
   2932a:	dc33      	bgt.n	29394 <_printf_float+0x370>
   2932c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   29330:	429a      	cmp	r2, r3
   29332:	db3b      	blt.n	293ac <_printf_float+0x388>
   29334:	6823      	ldr	r3, [r4, #0]
   29336:	07da      	lsls	r2, r3, #31
   29338:	d438      	bmi.n	293ac <_printf_float+0x388>
   2933a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2933c:	990d      	ldr	r1, [sp, #52]	; 0x34
   2933e:	eba3 020a 	sub.w	r2, r3, sl
   29342:	eba3 0901 	sub.w	r9, r3, r1
   29346:	4591      	cmp	r9, r2
   29348:	bfa8      	it	ge
   2934a:	4691      	movge	r9, r2
   2934c:	f1b9 0f00 	cmp.w	r9, #0
   29350:	dc34      	bgt.n	293bc <_printf_float+0x398>
   29352:	f04f 0800 	mov.w	r8, #0
   29356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2935a:	f104 0a1a 	add.w	sl, r4, #26
   2935e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   29362:	1a9b      	subs	r3, r3, r2
   29364:	eba3 0309 	sub.w	r3, r3, r9
   29368:	4543      	cmp	r3, r8
   2936a:	f77f af7b 	ble.w	29264 <_printf_float+0x240>
   2936e:	2301      	movs	r3, #1
   29370:	4652      	mov	r2, sl
   29372:	4631      	mov	r1, r6
   29374:	4628      	mov	r0, r5
   29376:	47b8      	blx	r7
   29378:	3001      	adds	r0, #1
   2937a:	f43f aeae 	beq.w	290da <_printf_float+0xb6>
   2937e:	f108 0801 	add.w	r8, r8, #1
   29382:	e7ec      	b.n	2935e <_printf_float+0x33a>
   29384:	4613      	mov	r3, r2
   29386:	4631      	mov	r1, r6
   29388:	4642      	mov	r2, r8
   2938a:	4628      	mov	r0, r5
   2938c:	47b8      	blx	r7
   2938e:	3001      	adds	r0, #1
   29390:	d1c0      	bne.n	29314 <_printf_float+0x2f0>
   29392:	e6a2      	b.n	290da <_printf_float+0xb6>
   29394:	2301      	movs	r3, #1
   29396:	4631      	mov	r1, r6
   29398:	4628      	mov	r0, r5
   2939a:	920b      	str	r2, [sp, #44]	; 0x2c
   2939c:	47b8      	blx	r7
   2939e:	3001      	adds	r0, #1
   293a0:	f43f ae9b 	beq.w	290da <_printf_float+0xb6>
   293a4:	f10b 0b01 	add.w	fp, fp, #1
   293a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   293aa:	e7b9      	b.n	29320 <_printf_float+0x2fc>
   293ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   293b0:	4631      	mov	r1, r6
   293b2:	4628      	mov	r0, r5
   293b4:	47b8      	blx	r7
   293b6:	3001      	adds	r0, #1
   293b8:	d1bf      	bne.n	2933a <_printf_float+0x316>
   293ba:	e68e      	b.n	290da <_printf_float+0xb6>
   293bc:	464b      	mov	r3, r9
   293be:	eb08 020a 	add.w	r2, r8, sl
   293c2:	4631      	mov	r1, r6
   293c4:	4628      	mov	r0, r5
   293c6:	47b8      	blx	r7
   293c8:	3001      	adds	r0, #1
   293ca:	d1c2      	bne.n	29352 <_printf_float+0x32e>
   293cc:	e685      	b.n	290da <_printf_float+0xb6>
   293ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   293d0:	2a01      	cmp	r2, #1
   293d2:	dc01      	bgt.n	293d8 <_printf_float+0x3b4>
   293d4:	07db      	lsls	r3, r3, #31
   293d6:	d537      	bpl.n	29448 <_printf_float+0x424>
   293d8:	2301      	movs	r3, #1
   293da:	4642      	mov	r2, r8
   293dc:	4631      	mov	r1, r6
   293de:	4628      	mov	r0, r5
   293e0:	47b8      	blx	r7
   293e2:	3001      	adds	r0, #1
   293e4:	f43f ae79 	beq.w	290da <_printf_float+0xb6>
   293e8:	4631      	mov	r1, r6
   293ea:	4628      	mov	r0, r5
   293ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   293f0:	47b8      	blx	r7
   293f2:	3001      	adds	r0, #1
   293f4:	f43f ae71 	beq.w	290da <_printf_float+0xb6>
   293f8:	2200      	movs	r2, #0
   293fa:	2300      	movs	r3, #0
   293fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   29400:	f7f0 f832 	bl	19468 <__aeabi_dcmpeq>
   29404:	b9d8      	cbnz	r0, 2943e <_printf_float+0x41a>
   29406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29408:	f108 0201 	add.w	r2, r8, #1
   2940c:	3b01      	subs	r3, #1
   2940e:	4631      	mov	r1, r6
   29410:	4628      	mov	r0, r5
   29412:	47b8      	blx	r7
   29414:	3001      	adds	r0, #1
   29416:	d10e      	bne.n	29436 <_printf_float+0x412>
   29418:	e65f      	b.n	290da <_printf_float+0xb6>
   2941a:	2301      	movs	r3, #1
   2941c:	464a      	mov	r2, r9
   2941e:	4631      	mov	r1, r6
   29420:	4628      	mov	r0, r5
   29422:	47b8      	blx	r7
   29424:	3001      	adds	r0, #1
   29426:	f43f ae58 	beq.w	290da <_printf_float+0xb6>
   2942a:	f108 0801 	add.w	r8, r8, #1
   2942e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29430:	3b01      	subs	r3, #1
   29432:	4543      	cmp	r3, r8
   29434:	dcf1      	bgt.n	2941a <_printf_float+0x3f6>
   29436:	4653      	mov	r3, sl
   29438:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2943c:	e6e1      	b.n	29202 <_printf_float+0x1de>
   2943e:	f04f 0800 	mov.w	r8, #0
   29442:	f104 091a 	add.w	r9, r4, #26
   29446:	e7f2      	b.n	2942e <_printf_float+0x40a>
   29448:	2301      	movs	r3, #1
   2944a:	4642      	mov	r2, r8
   2944c:	e7df      	b.n	2940e <_printf_float+0x3ea>
   2944e:	2301      	movs	r3, #1
   29450:	464a      	mov	r2, r9
   29452:	4631      	mov	r1, r6
   29454:	4628      	mov	r0, r5
   29456:	47b8      	blx	r7
   29458:	3001      	adds	r0, #1
   2945a:	f43f ae3e 	beq.w	290da <_printf_float+0xb6>
   2945e:	f108 0801 	add.w	r8, r8, #1
   29462:	68e3      	ldr	r3, [r4, #12]
   29464:	990f      	ldr	r1, [sp, #60]	; 0x3c
   29466:	1a5b      	subs	r3, r3, r1
   29468:	4543      	cmp	r3, r8
   2946a:	dcf0      	bgt.n	2944e <_printf_float+0x42a>
   2946c:	e6fe      	b.n	2926c <_printf_float+0x248>
   2946e:	f04f 0800 	mov.w	r8, #0
   29472:	f104 0919 	add.w	r9, r4, #25
   29476:	e7f4      	b.n	29462 <_printf_float+0x43e>

00029478 <_printf_i>:
   29478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2947c:	7e0f      	ldrb	r7, [r1, #24]
   2947e:	4691      	mov	r9, r2
   29480:	4680      	mov	r8, r0
   29482:	460c      	mov	r4, r1
   29484:	2f78      	cmp	r7, #120	; 0x78
   29486:	469a      	mov	sl, r3
   29488:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2948a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2948e:	d807      	bhi.n	294a0 <_printf_i+0x28>
   29490:	2f62      	cmp	r7, #98	; 0x62
   29492:	d80a      	bhi.n	294aa <_printf_i+0x32>
   29494:	2f00      	cmp	r7, #0
   29496:	f000 80d8 	beq.w	2964a <_printf_i+0x1d2>
   2949a:	2f58      	cmp	r7, #88	; 0x58
   2949c:	f000 80a3 	beq.w	295e6 <_printf_i+0x16e>
   294a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
   294a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   294a8:	e03a      	b.n	29520 <_printf_i+0xa8>
   294aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   294ae:	2b15      	cmp	r3, #21
   294b0:	d8f6      	bhi.n	294a0 <_printf_i+0x28>
   294b2:	a101      	add	r1, pc, #4	; (adr r1, 294b8 <_printf_i+0x40>)
   294b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   294b8:	00029511 	.word	0x00029511
   294bc:	00029525 	.word	0x00029525
   294c0:	000294a1 	.word	0x000294a1
   294c4:	000294a1 	.word	0x000294a1
   294c8:	000294a1 	.word	0x000294a1
   294cc:	000294a1 	.word	0x000294a1
   294d0:	00029525 	.word	0x00029525
   294d4:	000294a1 	.word	0x000294a1
   294d8:	000294a1 	.word	0x000294a1
   294dc:	000294a1 	.word	0x000294a1
   294e0:	000294a1 	.word	0x000294a1
   294e4:	00029631 	.word	0x00029631
   294e8:	00029555 	.word	0x00029555
   294ec:	00029613 	.word	0x00029613
   294f0:	000294a1 	.word	0x000294a1
   294f4:	000294a1 	.word	0x000294a1
   294f8:	00029653 	.word	0x00029653
   294fc:	000294a1 	.word	0x000294a1
   29500:	00029555 	.word	0x00029555
   29504:	000294a1 	.word	0x000294a1
   29508:	000294a1 	.word	0x000294a1
   2950c:	0002961b 	.word	0x0002961b
   29510:	682b      	ldr	r3, [r5, #0]
   29512:	1d1a      	adds	r2, r3, #4
   29514:	681b      	ldr	r3, [r3, #0]
   29516:	602a      	str	r2, [r5, #0]
   29518:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2951c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   29520:	2301      	movs	r3, #1
   29522:	e0a3      	b.n	2966c <_printf_i+0x1f4>
   29524:	6820      	ldr	r0, [r4, #0]
   29526:	6829      	ldr	r1, [r5, #0]
   29528:	0606      	lsls	r6, r0, #24
   2952a:	f101 0304 	add.w	r3, r1, #4
   2952e:	d50a      	bpl.n	29546 <_printf_i+0xce>
   29530:	680e      	ldr	r6, [r1, #0]
   29532:	602b      	str	r3, [r5, #0]
   29534:	2e00      	cmp	r6, #0
   29536:	da03      	bge.n	29540 <_printf_i+0xc8>
   29538:	232d      	movs	r3, #45	; 0x2d
   2953a:	4276      	negs	r6, r6
   2953c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   29540:	485e      	ldr	r0, [pc, #376]	; (296bc <_printf_i+0x244>)
   29542:	230a      	movs	r3, #10
   29544:	e019      	b.n	2957a <_printf_i+0x102>
   29546:	680e      	ldr	r6, [r1, #0]
   29548:	f010 0f40 	tst.w	r0, #64	; 0x40
   2954c:	602b      	str	r3, [r5, #0]
   2954e:	bf18      	it	ne
   29550:	b236      	sxthne	r6, r6
   29552:	e7ef      	b.n	29534 <_printf_i+0xbc>
   29554:	682b      	ldr	r3, [r5, #0]
   29556:	6820      	ldr	r0, [r4, #0]
   29558:	1d19      	adds	r1, r3, #4
   2955a:	6029      	str	r1, [r5, #0]
   2955c:	0601      	lsls	r1, r0, #24
   2955e:	d501      	bpl.n	29564 <_printf_i+0xec>
   29560:	681e      	ldr	r6, [r3, #0]
   29562:	e002      	b.n	2956a <_printf_i+0xf2>
   29564:	0646      	lsls	r6, r0, #25
   29566:	d5fb      	bpl.n	29560 <_printf_i+0xe8>
   29568:	881e      	ldrh	r6, [r3, #0]
   2956a:	2f6f      	cmp	r7, #111	; 0x6f
   2956c:	4853      	ldr	r0, [pc, #332]	; (296bc <_printf_i+0x244>)
   2956e:	bf0c      	ite	eq
   29570:	2308      	moveq	r3, #8
   29572:	230a      	movne	r3, #10
   29574:	2100      	movs	r1, #0
   29576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2957a:	6865      	ldr	r5, [r4, #4]
   2957c:	2d00      	cmp	r5, #0
   2957e:	60a5      	str	r5, [r4, #8]
   29580:	bfa2      	ittt	ge
   29582:	6821      	ldrge	r1, [r4, #0]
   29584:	f021 0104 	bicge.w	r1, r1, #4
   29588:	6021      	strge	r1, [r4, #0]
   2958a:	b90e      	cbnz	r6, 29590 <_printf_i+0x118>
   2958c:	2d00      	cmp	r5, #0
   2958e:	d04d      	beq.n	2962c <_printf_i+0x1b4>
   29590:	4615      	mov	r5, r2
   29592:	fbb6 f1f3 	udiv	r1, r6, r3
   29596:	fb03 6711 	mls	r7, r3, r1, r6
   2959a:	5dc7      	ldrb	r7, [r0, r7]
   2959c:	f805 7d01 	strb.w	r7, [r5, #-1]!
   295a0:	4637      	mov	r7, r6
   295a2:	460e      	mov	r6, r1
   295a4:	42bb      	cmp	r3, r7
   295a6:	d9f4      	bls.n	29592 <_printf_i+0x11a>
   295a8:	2b08      	cmp	r3, #8
   295aa:	d10b      	bne.n	295c4 <_printf_i+0x14c>
   295ac:	6823      	ldr	r3, [r4, #0]
   295ae:	07de      	lsls	r6, r3, #31
   295b0:	d508      	bpl.n	295c4 <_printf_i+0x14c>
   295b2:	6923      	ldr	r3, [r4, #16]
   295b4:	6861      	ldr	r1, [r4, #4]
   295b6:	4299      	cmp	r1, r3
   295b8:	bfde      	ittt	le
   295ba:	2330      	movle	r3, #48	; 0x30
   295bc:	f805 3c01 	strble.w	r3, [r5, #-1]
   295c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   295c4:	1b52      	subs	r2, r2, r5
   295c6:	6122      	str	r2, [r4, #16]
   295c8:	464b      	mov	r3, r9
   295ca:	aa03      	add	r2, sp, #12
   295cc:	4621      	mov	r1, r4
   295ce:	4640      	mov	r0, r8
   295d0:	f8cd a000 	str.w	sl, [sp]
   295d4:	f004 fba6 	bl	2dd24 <_printf_common>
   295d8:	3001      	adds	r0, #1
   295da:	d14c      	bne.n	29676 <_printf_i+0x1fe>
   295dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   295e0:	b004      	add	sp, #16
   295e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   295e6:	4835      	ldr	r0, [pc, #212]	; (296bc <_printf_i+0x244>)
   295e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   295ec:	6829      	ldr	r1, [r5, #0]
   295ee:	6823      	ldr	r3, [r4, #0]
   295f0:	f851 6b04 	ldr.w	r6, [r1], #4
   295f4:	6029      	str	r1, [r5, #0]
   295f6:	061d      	lsls	r5, r3, #24
   295f8:	d514      	bpl.n	29624 <_printf_i+0x1ac>
   295fa:	07df      	lsls	r7, r3, #31
   295fc:	bf44      	itt	mi
   295fe:	f043 0320 	orrmi.w	r3, r3, #32
   29602:	6023      	strmi	r3, [r4, #0]
   29604:	b91e      	cbnz	r6, 2960e <_printf_i+0x196>
   29606:	6823      	ldr	r3, [r4, #0]
   29608:	f023 0320 	bic.w	r3, r3, #32
   2960c:	6023      	str	r3, [r4, #0]
   2960e:	2310      	movs	r3, #16
   29610:	e7b0      	b.n	29574 <_printf_i+0xfc>
   29612:	6823      	ldr	r3, [r4, #0]
   29614:	f043 0320 	orr.w	r3, r3, #32
   29618:	6023      	str	r3, [r4, #0]
   2961a:	2378      	movs	r3, #120	; 0x78
   2961c:	4828      	ldr	r0, [pc, #160]	; (296c0 <_printf_i+0x248>)
   2961e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   29622:	e7e3      	b.n	295ec <_printf_i+0x174>
   29624:	0659      	lsls	r1, r3, #25
   29626:	bf48      	it	mi
   29628:	b2b6      	uxthmi	r6, r6
   2962a:	e7e6      	b.n	295fa <_printf_i+0x182>
   2962c:	4615      	mov	r5, r2
   2962e:	e7bb      	b.n	295a8 <_printf_i+0x130>
   29630:	682b      	ldr	r3, [r5, #0]
   29632:	6826      	ldr	r6, [r4, #0]
   29634:	1d18      	adds	r0, r3, #4
   29636:	6961      	ldr	r1, [r4, #20]
   29638:	6028      	str	r0, [r5, #0]
   2963a:	0635      	lsls	r5, r6, #24
   2963c:	681b      	ldr	r3, [r3, #0]
   2963e:	d501      	bpl.n	29644 <_printf_i+0x1cc>
   29640:	6019      	str	r1, [r3, #0]
   29642:	e002      	b.n	2964a <_printf_i+0x1d2>
   29644:	0670      	lsls	r0, r6, #25
   29646:	d5fb      	bpl.n	29640 <_printf_i+0x1c8>
   29648:	8019      	strh	r1, [r3, #0]
   2964a:	2300      	movs	r3, #0
   2964c:	4615      	mov	r5, r2
   2964e:	6123      	str	r3, [r4, #16]
   29650:	e7ba      	b.n	295c8 <_printf_i+0x150>
   29652:	682b      	ldr	r3, [r5, #0]
   29654:	2100      	movs	r1, #0
   29656:	1d1a      	adds	r2, r3, #4
   29658:	602a      	str	r2, [r5, #0]
   2965a:	681d      	ldr	r5, [r3, #0]
   2965c:	6862      	ldr	r2, [r4, #4]
   2965e:	4628      	mov	r0, r5
   29660:	f004 fa8f 	bl	2db82 <memchr>
   29664:	b108      	cbz	r0, 2966a <_printf_i+0x1f2>
   29666:	1b40      	subs	r0, r0, r5
   29668:	6060      	str	r0, [r4, #4]
   2966a:	6863      	ldr	r3, [r4, #4]
   2966c:	6123      	str	r3, [r4, #16]
   2966e:	2300      	movs	r3, #0
   29670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   29674:	e7a8      	b.n	295c8 <_printf_i+0x150>
   29676:	6923      	ldr	r3, [r4, #16]
   29678:	462a      	mov	r2, r5
   2967a:	4649      	mov	r1, r9
   2967c:	4640      	mov	r0, r8
   2967e:	47d0      	blx	sl
   29680:	3001      	adds	r0, #1
   29682:	d0ab      	beq.n	295dc <_printf_i+0x164>
   29684:	6823      	ldr	r3, [r4, #0]
   29686:	079b      	lsls	r3, r3, #30
   29688:	d413      	bmi.n	296b2 <_printf_i+0x23a>
   2968a:	68e0      	ldr	r0, [r4, #12]
   2968c:	9b03      	ldr	r3, [sp, #12]
   2968e:	4298      	cmp	r0, r3
   29690:	bfb8      	it	lt
   29692:	4618      	movlt	r0, r3
   29694:	e7a4      	b.n	295e0 <_printf_i+0x168>
   29696:	2301      	movs	r3, #1
   29698:	4632      	mov	r2, r6
   2969a:	4649      	mov	r1, r9
   2969c:	4640      	mov	r0, r8
   2969e:	47d0      	blx	sl
   296a0:	3001      	adds	r0, #1
   296a2:	d09b      	beq.n	295dc <_printf_i+0x164>
   296a4:	3501      	adds	r5, #1
   296a6:	68e3      	ldr	r3, [r4, #12]
   296a8:	9903      	ldr	r1, [sp, #12]
   296aa:	1a5b      	subs	r3, r3, r1
   296ac:	42ab      	cmp	r3, r5
   296ae:	dcf2      	bgt.n	29696 <_printf_i+0x21e>
   296b0:	e7eb      	b.n	2968a <_printf_i+0x212>
   296b2:	2500      	movs	r5, #0
   296b4:	f104 0619 	add.w	r6, r4, #25
   296b8:	e7f5      	b.n	296a6 <_printf_i+0x22e>
   296ba:	bf00      	nop
   296bc:	00031be3 	.word	0x00031be3
   296c0:	00031bf4 	.word	0x00031bf4

000296c4 <_sbrk_r>:
   296c4:	b538      	push	{r3, r4, r5, lr}
   296c6:	2300      	movs	r3, #0
   296c8:	4d05      	ldr	r5, [pc, #20]	; (296e0 <_sbrk_r+0x1c>)
   296ca:	4604      	mov	r4, r0
   296cc:	4608      	mov	r0, r1
   296ce:	602b      	str	r3, [r5, #0]
   296d0:	f7f3 fbc0 	bl	1ce54 <_sbrk>
   296d4:	1c43      	adds	r3, r0, #1
   296d6:	d102      	bne.n	296de <_sbrk_r+0x1a>
   296d8:	682b      	ldr	r3, [r5, #0]
   296da:	b103      	cbz	r3, 296de <_sbrk_r+0x1a>
   296dc:	6023      	str	r3, [r4, #0]
   296de:	bd38      	pop	{r3, r4, r5, pc}
   296e0:	2000d4b8 	.word	0x2000d4b8

000296e4 <siscanf>:
   296e4:	b40e      	push	{r1, r2, r3}
   296e6:	b530      	push	{r4, r5, lr}
   296e8:	b09c      	sub	sp, #112	; 0x70
   296ea:	f44f 7201 	mov.w	r2, #516	; 0x204
   296ee:	ac1f      	add	r4, sp, #124	; 0x7c
   296f0:	f8ad 2014 	strh.w	r2, [sp, #20]
   296f4:	9002      	str	r0, [sp, #8]
   296f6:	f854 5b04 	ldr.w	r5, [r4], #4
   296fa:	9006      	str	r0, [sp, #24]
   296fc:	f7ef ff2e 	bl	1955c <strlen>
   29700:	4b0b      	ldr	r3, [pc, #44]	; (29730 <siscanf+0x4c>)
   29702:	462a      	mov	r2, r5
   29704:	9003      	str	r0, [sp, #12]
   29706:	a902      	add	r1, sp, #8
   29708:	930b      	str	r3, [sp, #44]	; 0x2c
   2970a:	2300      	movs	r3, #0
   2970c:	9007      	str	r0, [sp, #28]
   2970e:	930f      	str	r3, [sp, #60]	; 0x3c
   29710:	9314      	str	r3, [sp, #80]	; 0x50
   29712:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29716:	4807      	ldr	r0, [pc, #28]	; (29734 <siscanf+0x50>)
   29718:	f8ad 3016 	strh.w	r3, [sp, #22]
   2971c:	4623      	mov	r3, r4
   2971e:	6800      	ldr	r0, [r0, #0]
   29720:	9401      	str	r4, [sp, #4]
   29722:	f001 f8f9 	bl	2a918 <__ssvfiscanf_r>
   29726:	b01c      	add	sp, #112	; 0x70
   29728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2972c:	b003      	add	sp, #12
   2972e:	4770      	bx	lr
   29730:	0002de27 	.word	0x0002de27
   29734:	2000c6e4 	.word	0x2000c6e4

00029738 <_strtol_l.constprop.0>:
   29738:	2b01      	cmp	r3, #1
   2973a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2973e:	4680      	mov	r8, r0
   29740:	d001      	beq.n	29746 <_strtol_l.constprop.0+0xe>
   29742:	2b24      	cmp	r3, #36	; 0x24
   29744:	d906      	bls.n	29754 <_strtol_l.constprop.0+0x1c>
   29746:	f002 fb4d 	bl	2bde4 <__errno>
   2974a:	2316      	movs	r3, #22
   2974c:	6003      	str	r3, [r0, #0]
   2974e:	2000      	movs	r0, #0
   29750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29754:	460d      	mov	r5, r1
   29756:	4f35      	ldr	r7, [pc, #212]	; (2982c <_strtol_l.constprop.0+0xf4>)
   29758:	4628      	mov	r0, r5
   2975a:	f815 4b01 	ldrb.w	r4, [r5], #1
   2975e:	5de6      	ldrb	r6, [r4, r7]
   29760:	f016 0608 	ands.w	r6, r6, #8
   29764:	d1f8      	bne.n	29758 <_strtol_l.constprop.0+0x20>
   29766:	2c2d      	cmp	r4, #45	; 0x2d
   29768:	d12f      	bne.n	297ca <_strtol_l.constprop.0+0x92>
   2976a:	782c      	ldrb	r4, [r5, #0]
   2976c:	2601      	movs	r6, #1
   2976e:	1c85      	adds	r5, r0, #2
   29770:	2b00      	cmp	r3, #0
   29772:	d057      	beq.n	29824 <_strtol_l.constprop.0+0xec>
   29774:	2b10      	cmp	r3, #16
   29776:	d109      	bne.n	2978c <_strtol_l.constprop.0+0x54>
   29778:	2c30      	cmp	r4, #48	; 0x30
   2977a:	d107      	bne.n	2978c <_strtol_l.constprop.0+0x54>
   2977c:	7828      	ldrb	r0, [r5, #0]
   2977e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   29782:	2858      	cmp	r0, #88	; 0x58
   29784:	d149      	bne.n	2981a <_strtol_l.constprop.0+0xe2>
   29786:	786c      	ldrb	r4, [r5, #1]
   29788:	2310      	movs	r3, #16
   2978a:	3502      	adds	r5, #2
   2978c:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
   29790:	2700      	movs	r7, #0
   29792:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   29796:	4638      	mov	r0, r7
   29798:	fbbe f9f3 	udiv	r9, lr, r3
   2979c:	fb03 ea19 	mls	sl, r3, r9, lr
   297a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   297a4:	f1bc 0f09 	cmp.w	ip, #9
   297a8:	d814      	bhi.n	297d4 <_strtol_l.constprop.0+0x9c>
   297aa:	4664      	mov	r4, ip
   297ac:	42a3      	cmp	r3, r4
   297ae:	dd22      	ble.n	297f6 <_strtol_l.constprop.0+0xbe>
   297b0:	2f00      	cmp	r7, #0
   297b2:	db1d      	blt.n	297f0 <_strtol_l.constprop.0+0xb8>
   297b4:	4581      	cmp	r9, r0
   297b6:	d31b      	bcc.n	297f0 <_strtol_l.constprop.0+0xb8>
   297b8:	d101      	bne.n	297be <_strtol_l.constprop.0+0x86>
   297ba:	45a2      	cmp	sl, r4
   297bc:	db18      	blt.n	297f0 <_strtol_l.constprop.0+0xb8>
   297be:	fb00 4003 	mla	r0, r0, r3, r4
   297c2:	2701      	movs	r7, #1
   297c4:	f815 4b01 	ldrb.w	r4, [r5], #1
   297c8:	e7ea      	b.n	297a0 <_strtol_l.constprop.0+0x68>
   297ca:	2c2b      	cmp	r4, #43	; 0x2b
   297cc:	bf04      	itt	eq
   297ce:	782c      	ldrbeq	r4, [r5, #0]
   297d0:	1c85      	addeq	r5, r0, #2
   297d2:	e7cd      	b.n	29770 <_strtol_l.constprop.0+0x38>
   297d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   297d8:	f1bc 0f19 	cmp.w	ip, #25
   297dc:	d801      	bhi.n	297e2 <_strtol_l.constprop.0+0xaa>
   297de:	3c37      	subs	r4, #55	; 0x37
   297e0:	e7e4      	b.n	297ac <_strtol_l.constprop.0+0x74>
   297e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   297e6:	f1bc 0f19 	cmp.w	ip, #25
   297ea:	d804      	bhi.n	297f6 <_strtol_l.constprop.0+0xbe>
   297ec:	3c57      	subs	r4, #87	; 0x57
   297ee:	e7dd      	b.n	297ac <_strtol_l.constprop.0+0x74>
   297f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   297f4:	e7e6      	b.n	297c4 <_strtol_l.constprop.0+0x8c>
   297f6:	2f00      	cmp	r7, #0
   297f8:	da07      	bge.n	2980a <_strtol_l.constprop.0+0xd2>
   297fa:	2322      	movs	r3, #34	; 0x22
   297fc:	4670      	mov	r0, lr
   297fe:	f8c8 3000 	str.w	r3, [r8]
   29802:	2a00      	cmp	r2, #0
   29804:	d0a4      	beq.n	29750 <_strtol_l.constprop.0+0x18>
   29806:	1e69      	subs	r1, r5, #1
   29808:	e005      	b.n	29816 <_strtol_l.constprop.0+0xde>
   2980a:	b106      	cbz	r6, 2980e <_strtol_l.constprop.0+0xd6>
   2980c:	4240      	negs	r0, r0
   2980e:	2a00      	cmp	r2, #0
   29810:	d09e      	beq.n	29750 <_strtol_l.constprop.0+0x18>
   29812:	2f00      	cmp	r7, #0
   29814:	d1f7      	bne.n	29806 <_strtol_l.constprop.0+0xce>
   29816:	6011      	str	r1, [r2, #0]
   29818:	e79a      	b.n	29750 <_strtol_l.constprop.0+0x18>
   2981a:	2430      	movs	r4, #48	; 0x30
   2981c:	2b00      	cmp	r3, #0
   2981e:	d1b5      	bne.n	2978c <_strtol_l.constprop.0+0x54>
   29820:	2308      	movs	r3, #8
   29822:	e7b3      	b.n	2978c <_strtol_l.constprop.0+0x54>
   29824:	2c30      	cmp	r4, #48	; 0x30
   29826:	d0a9      	beq.n	2977c <_strtol_l.constprop.0+0x44>
   29828:	230a      	movs	r3, #10
   2982a:	e7af      	b.n	2978c <_strtol_l.constprop.0+0x54>
   2982c:	00031a3d 	.word	0x00031a3d

00029830 <strtol>:
   29830:	4613      	mov	r3, r2
   29832:	460a      	mov	r2, r1
   29834:	4601      	mov	r1, r0
   29836:	4802      	ldr	r0, [pc, #8]	; (29840 <strtol+0x10>)
   29838:	6800      	ldr	r0, [r0, #0]
   2983a:	f7ff bf7d 	b.w	29738 <_strtol_l.constprop.0>
   2983e:	bf00      	nop
   29840:	2000c6e4 	.word	0x2000c6e4

00029844 <_strtoll_l.constprop.0>:
   29844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29848:	b085      	sub	sp, #20
   2984a:	4688      	mov	r8, r1
   2984c:	461e      	mov	r6, r3
   2984e:	460d      	mov	r5, r1
   29850:	9201      	str	r2, [sp, #4]
   29852:	4a46      	ldr	r2, [pc, #280]	; (2996c <_strtoll_l.constprop.0+0x128>)
   29854:	9003      	str	r0, [sp, #12]
   29856:	462b      	mov	r3, r5
   29858:	f815 4b01 	ldrb.w	r4, [r5], #1
   2985c:	5ca7      	ldrb	r7, [r4, r2]
   2985e:	f017 0708 	ands.w	r7, r7, #8
   29862:	d1f8      	bne.n	29856 <_strtoll_l.constprop.0+0x12>
   29864:	2c2d      	cmp	r4, #45	; 0x2d
   29866:	d148      	bne.n	298fa <_strtoll_l.constprop.0+0xb6>
   29868:	782c      	ldrb	r4, [r5, #0]
   2986a:	2701      	movs	r7, #1
   2986c:	1c9d      	adds	r5, r3, #2
   2986e:	2e00      	cmp	r6, #0
   29870:	d078      	beq.n	29964 <_strtoll_l.constprop.0+0x120>
   29872:	2e10      	cmp	r6, #16
   29874:	d109      	bne.n	2988a <_strtoll_l.constprop.0+0x46>
   29876:	2c30      	cmp	r4, #48	; 0x30
   29878:	d107      	bne.n	2988a <_strtoll_l.constprop.0+0x46>
   2987a:	782b      	ldrb	r3, [r5, #0]
   2987c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   29880:	2b58      	cmp	r3, #88	; 0x58
   29882:	d16a      	bne.n	2995a <_strtoll_l.constprop.0+0x116>
   29884:	786c      	ldrb	r4, [r5, #1]
   29886:	2610      	movs	r6, #16
   29888:	3502      	adds	r5, #2
   2988a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   2988e:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   29892:	ea4f 79e6 	mov.w	r9, r6, asr #31
   29896:	4632      	mov	r2, r6
   29898:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   2989c:	4658      	mov	r0, fp
   2989e:	464b      	mov	r3, r9
   298a0:	4651      	mov	r1, sl
   298a2:	f7ef fbfd 	bl	190a0 <__aeabi_uldivmod>
   298a6:	2300      	movs	r3, #0
   298a8:	468c      	mov	ip, r1
   298aa:	9202      	str	r2, [sp, #8]
   298ac:	4619      	mov	r1, r3
   298ae:	4602      	mov	r2, r0
   298b0:	4618      	mov	r0, r3
   298b2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   298b6:	f1be 0f09 	cmp.w	lr, #9
   298ba:	d823      	bhi.n	29904 <_strtoll_l.constprop.0+0xc0>
   298bc:	4674      	mov	r4, lr
   298be:	42a6      	cmp	r6, r4
   298c0:	dd31      	ble.n	29926 <_strtoll_l.constprop.0+0xe2>
   298c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   298c6:	d015      	beq.n	298f4 <_strtoll_l.constprop.0+0xb0>
   298c8:	4282      	cmp	r2, r0
   298ca:	eb7c 0301 	sbcs.w	r3, ip, r1
   298ce:	d327      	bcc.n	29920 <_strtoll_l.constprop.0+0xdc>
   298d0:	458c      	cmp	ip, r1
   298d2:	bf08      	it	eq
   298d4:	4282      	cmpeq	r2, r0
   298d6:	d102      	bne.n	298de <_strtoll_l.constprop.0+0x9a>
   298d8:	9b02      	ldr	r3, [sp, #8]
   298da:	42a3      	cmp	r3, r4
   298dc:	db20      	blt.n	29920 <_strtoll_l.constprop.0+0xdc>
   298de:	4371      	muls	r1, r6
   298e0:	fb00 1109 	mla	r1, r0, r9, r1
   298e4:	fba6 0300 	umull	r0, r3, r6, r0
   298e8:	4419      	add	r1, r3
   298ea:	1820      	adds	r0, r4, r0
   298ec:	f04f 0301 	mov.w	r3, #1
   298f0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   298f4:	f815 4b01 	ldrb.w	r4, [r5], #1
   298f8:	e7db      	b.n	298b2 <_strtoll_l.constprop.0+0x6e>
   298fa:	2c2b      	cmp	r4, #43	; 0x2b
   298fc:	bf04      	itt	eq
   298fe:	782c      	ldrbeq	r4, [r5, #0]
   29900:	1c9d      	addeq	r5, r3, #2
   29902:	e7b4      	b.n	2986e <_strtoll_l.constprop.0+0x2a>
   29904:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   29908:	f1be 0f19 	cmp.w	lr, #25
   2990c:	d801      	bhi.n	29912 <_strtoll_l.constprop.0+0xce>
   2990e:	3c37      	subs	r4, #55	; 0x37
   29910:	e7d5      	b.n	298be <_strtoll_l.constprop.0+0x7a>
   29912:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   29916:	f1be 0f19 	cmp.w	lr, #25
   2991a:	d804      	bhi.n	29926 <_strtoll_l.constprop.0+0xe2>
   2991c:	3c57      	subs	r4, #87	; 0x57
   2991e:	e7ce      	b.n	298be <_strtoll_l.constprop.0+0x7a>
   29920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29924:	e7e6      	b.n	298f4 <_strtoll_l.constprop.0+0xb0>
   29926:	1c5a      	adds	r2, r3, #1
   29928:	d109      	bne.n	2993e <_strtoll_l.constprop.0+0xfa>
   2992a:	2322      	movs	r3, #34	; 0x22
   2992c:	9a03      	ldr	r2, [sp, #12]
   2992e:	4658      	mov	r0, fp
   29930:	4651      	mov	r1, sl
   29932:	6013      	str	r3, [r2, #0]
   29934:	9b01      	ldr	r3, [sp, #4]
   29936:	b953      	cbnz	r3, 2994e <_strtoll_l.constprop.0+0x10a>
   29938:	b005      	add	sp, #20
   2993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2993e:	b117      	cbz	r7, 29946 <_strtoll_l.constprop.0+0x102>
   29940:	4240      	negs	r0, r0
   29942:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   29946:	9a01      	ldr	r2, [sp, #4]
   29948:	2a00      	cmp	r2, #0
   2994a:	d0f5      	beq.n	29938 <_strtoll_l.constprop.0+0xf4>
   2994c:	b10b      	cbz	r3, 29952 <_strtoll_l.constprop.0+0x10e>
   2994e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   29952:	9b01      	ldr	r3, [sp, #4]
   29954:	f8c3 8000 	str.w	r8, [r3]
   29958:	e7ee      	b.n	29938 <_strtoll_l.constprop.0+0xf4>
   2995a:	2430      	movs	r4, #48	; 0x30
   2995c:	2e00      	cmp	r6, #0
   2995e:	d194      	bne.n	2988a <_strtoll_l.constprop.0+0x46>
   29960:	2608      	movs	r6, #8
   29962:	e792      	b.n	2988a <_strtoll_l.constprop.0+0x46>
   29964:	2c30      	cmp	r4, #48	; 0x30
   29966:	d088      	beq.n	2987a <_strtoll_l.constprop.0+0x36>
   29968:	260a      	movs	r6, #10
   2996a:	e78e      	b.n	2988a <_strtoll_l.constprop.0+0x46>
   2996c:	00031a3d 	.word	0x00031a3d

00029970 <strtoll>:
   29970:	4613      	mov	r3, r2
   29972:	460a      	mov	r2, r1
   29974:	4601      	mov	r1, r0
   29976:	4802      	ldr	r0, [pc, #8]	; (29980 <strtoll+0x10>)
   29978:	6800      	ldr	r0, [r0, #0]
   2997a:	f7ff bf63 	b.w	29844 <_strtoll_l.constprop.0>
   2997e:	bf00      	nop
   29980:	2000c6e4 	.word	0x2000c6e4

00029984 <_strtoul_l.constprop.0>:
   29984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29988:	4686      	mov	lr, r0
   2998a:	460d      	mov	r5, r1
   2998c:	4f35      	ldr	r7, [pc, #212]	; (29a64 <_strtoul_l.constprop.0+0xe0>)
   2998e:	4628      	mov	r0, r5
   29990:	f815 4b01 	ldrb.w	r4, [r5], #1
   29994:	5de6      	ldrb	r6, [r4, r7]
   29996:	f016 0608 	ands.w	r6, r6, #8
   2999a:	d1f8      	bne.n	2998e <_strtoul_l.constprop.0+0xa>
   2999c:	2c2d      	cmp	r4, #45	; 0x2d
   2999e:	d12f      	bne.n	29a00 <_strtoul_l.constprop.0+0x7c>
   299a0:	782c      	ldrb	r4, [r5, #0]
   299a2:	2601      	movs	r6, #1
   299a4:	1c85      	adds	r5, r0, #2
   299a6:	2b00      	cmp	r3, #0
   299a8:	d057      	beq.n	29a5a <_strtoul_l.constprop.0+0xd6>
   299aa:	2b10      	cmp	r3, #16
   299ac:	d109      	bne.n	299c2 <_strtoul_l.constprop.0+0x3e>
   299ae:	2c30      	cmp	r4, #48	; 0x30
   299b0:	d107      	bne.n	299c2 <_strtoul_l.constprop.0+0x3e>
   299b2:	7828      	ldrb	r0, [r5, #0]
   299b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   299b8:	2858      	cmp	r0, #88	; 0x58
   299ba:	d149      	bne.n	29a50 <_strtoul_l.constprop.0+0xcc>
   299bc:	786c      	ldrb	r4, [r5, #1]
   299be:	2310      	movs	r3, #16
   299c0:	3502      	adds	r5, #2
   299c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   299c6:	2700      	movs	r7, #0
   299c8:	fbb8 f8f3 	udiv	r8, r8, r3
   299cc:	fb03 f908 	mul.w	r9, r3, r8
   299d0:	4638      	mov	r0, r7
   299d2:	ea6f 0909 	mvn.w	r9, r9
   299d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   299da:	f1bc 0f09 	cmp.w	ip, #9
   299de:	d814      	bhi.n	29a0a <_strtoul_l.constprop.0+0x86>
   299e0:	4664      	mov	r4, ip
   299e2:	42a3      	cmp	r3, r4
   299e4:	dd22      	ble.n	29a2c <_strtoul_l.constprop.0+0xa8>
   299e6:	2f00      	cmp	r7, #0
   299e8:	db1d      	blt.n	29a26 <_strtoul_l.constprop.0+0xa2>
   299ea:	4580      	cmp	r8, r0
   299ec:	d31b      	bcc.n	29a26 <_strtoul_l.constprop.0+0xa2>
   299ee:	d101      	bne.n	299f4 <_strtoul_l.constprop.0+0x70>
   299f0:	45a1      	cmp	r9, r4
   299f2:	db18      	blt.n	29a26 <_strtoul_l.constprop.0+0xa2>
   299f4:	fb00 4003 	mla	r0, r0, r3, r4
   299f8:	2701      	movs	r7, #1
   299fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   299fe:	e7ea      	b.n	299d6 <_strtoul_l.constprop.0+0x52>
   29a00:	2c2b      	cmp	r4, #43	; 0x2b
   29a02:	bf04      	itt	eq
   29a04:	782c      	ldrbeq	r4, [r5, #0]
   29a06:	1c85      	addeq	r5, r0, #2
   29a08:	e7cd      	b.n	299a6 <_strtoul_l.constprop.0+0x22>
   29a0a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   29a0e:	f1bc 0f19 	cmp.w	ip, #25
   29a12:	d801      	bhi.n	29a18 <_strtoul_l.constprop.0+0x94>
   29a14:	3c37      	subs	r4, #55	; 0x37
   29a16:	e7e4      	b.n	299e2 <_strtoul_l.constprop.0+0x5e>
   29a18:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   29a1c:	f1bc 0f19 	cmp.w	ip, #25
   29a20:	d804      	bhi.n	29a2c <_strtoul_l.constprop.0+0xa8>
   29a22:	3c57      	subs	r4, #87	; 0x57
   29a24:	e7dd      	b.n	299e2 <_strtoul_l.constprop.0+0x5e>
   29a26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   29a2a:	e7e6      	b.n	299fa <_strtoul_l.constprop.0+0x76>
   29a2c:	2f00      	cmp	r7, #0
   29a2e:	da07      	bge.n	29a40 <_strtoul_l.constprop.0+0xbc>
   29a30:	2322      	movs	r3, #34	; 0x22
   29a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29a36:	f8ce 3000 	str.w	r3, [lr]
   29a3a:	b932      	cbnz	r2, 29a4a <_strtoul_l.constprop.0+0xc6>
   29a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29a40:	b106      	cbz	r6, 29a44 <_strtoul_l.constprop.0+0xc0>
   29a42:	4240      	negs	r0, r0
   29a44:	2a00      	cmp	r2, #0
   29a46:	d0f9      	beq.n	29a3c <_strtoul_l.constprop.0+0xb8>
   29a48:	b107      	cbz	r7, 29a4c <_strtoul_l.constprop.0+0xc8>
   29a4a:	1e69      	subs	r1, r5, #1
   29a4c:	6011      	str	r1, [r2, #0]
   29a4e:	e7f5      	b.n	29a3c <_strtoul_l.constprop.0+0xb8>
   29a50:	2430      	movs	r4, #48	; 0x30
   29a52:	2b00      	cmp	r3, #0
   29a54:	d1b5      	bne.n	299c2 <_strtoul_l.constprop.0+0x3e>
   29a56:	2308      	movs	r3, #8
   29a58:	e7b3      	b.n	299c2 <_strtoul_l.constprop.0+0x3e>
   29a5a:	2c30      	cmp	r4, #48	; 0x30
   29a5c:	d0a9      	beq.n	299b2 <_strtoul_l.constprop.0+0x2e>
   29a5e:	230a      	movs	r3, #10
   29a60:	e7af      	b.n	299c2 <_strtoul_l.constprop.0+0x3e>
   29a62:	bf00      	nop
   29a64:	00031a3d 	.word	0x00031a3d

00029a68 <strtoul>:
   29a68:	4613      	mov	r3, r2
   29a6a:	460a      	mov	r2, r1
   29a6c:	4601      	mov	r1, r0
   29a6e:	4802      	ldr	r0, [pc, #8]	; (29a78 <strtoul+0x10>)
   29a70:	6800      	ldr	r0, [r0, #0]
   29a72:	f7ff bf87 	b.w	29984 <_strtoul_l.constprop.0>
   29a76:	bf00      	nop
   29a78:	2000c6e4 	.word	0x2000c6e4

00029a7c <__tzcalc_limits>:
   29a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a80:	4605      	mov	r5, r0
   29a82:	f000 fb07 	bl	2a094 <__gettzinfo>
   29a86:	f240 73b1 	movw	r3, #1969	; 0x7b1
   29a8a:	429d      	cmp	r5, r3
   29a8c:	f340 809b 	ble.w	29bc6 <__tzcalc_limits+0x14a>
   29a90:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
   29a94:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
   29a98:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
   29a9c:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   29aa0:	18ac      	adds	r4, r5, r2
   29aa2:	f240 126d 	movw	r2, #365	; 0x16d
   29aa6:	6045      	str	r5, [r0, #4]
   29aa8:	10a4      	asrs	r4, r4, #2
   29aaa:	fb02 4403 	mla	r4, r2, r3, r4
   29aae:	f06f 0263 	mvn.w	r2, #99	; 0x63
   29ab2:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
   29ab6:	fb93 f3f2 	sdiv	r3, r3, r2
   29aba:	186a      	adds	r2, r5, r1
   29abc:	441c      	add	r4, r3
   29abe:	f44f 73c8 	mov.w	r3, #400	; 0x190
   29ac2:	4601      	mov	r1, r0
   29ac4:	fbb2 f2f3 	udiv	r2, r2, r3
   29ac8:	fb95 fcf3 	sdiv	ip, r5, r3
   29acc:	4414      	add	r4, r2
   29ace:	2264      	movs	r2, #100	; 0x64
   29ad0:	fb03 5c1c 	mls	ip, r3, ip, r5
   29ad4:	fb95 f7f2 	sdiv	r7, r5, r2
   29ad8:	fabc f68c 	clz	r6, ip
   29adc:	fb02 5717 	mls	r7, r2, r7, r5
   29ae0:	f005 0203 	and.w	r2, r5, #3
   29ae4:	0976      	lsrs	r6, r6, #5
   29ae6:	7a0d      	ldrb	r5, [r1, #8]
   29ae8:	694b      	ldr	r3, [r1, #20]
   29aea:	2d4a      	cmp	r5, #74	; 0x4a
   29aec:	d12d      	bne.n	29b4a <__tzcalc_limits+0xce>
   29aee:	eb04 0e03 	add.w	lr, r4, r3
   29af2:	b902      	cbnz	r2, 29af6 <__tzcalc_limits+0x7a>
   29af4:	b917      	cbnz	r7, 29afc <__tzcalc_limits+0x80>
   29af6:	f1bc 0f00 	cmp.w	ip, #0
   29afa:	d124      	bne.n	29b46 <__tzcalc_limits+0xca>
   29afc:	2b3b      	cmp	r3, #59	; 0x3b
   29afe:	bfd4      	ite	le
   29b00:	2300      	movle	r3, #0
   29b02:	2301      	movgt	r3, #1
   29b04:	4473      	add	r3, lr
   29b06:	3b01      	subs	r3, #1
   29b08:	698d      	ldr	r5, [r1, #24]
   29b0a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 29bcc <__tzcalc_limits+0x150>
   29b0e:	ea4f 7ee5 	mov.w	lr, r5, asr #31
   29b12:	fbc3 5e08 	smlal	r5, lr, r3, r8
   29b16:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   29b18:	18ed      	adds	r5, r5, r3
   29b1a:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
   29b1e:	e9c1 5308 	strd	r5, r3, [r1, #32]
   29b22:	3128      	adds	r1, #40	; 0x28
   29b24:	458b      	cmp	fp, r1
   29b26:	d1de      	bne.n	29ae6 <__tzcalc_limits+0x6a>
   29b28:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
   29b2c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   29b30:	428c      	cmp	r4, r1
   29b32:	eb72 0303 	sbcs.w	r3, r2, r3
   29b36:	bfb4      	ite	lt
   29b38:	2301      	movlt	r3, #1
   29b3a:	2300      	movge	r3, #0
   29b3c:	6003      	str	r3, [r0, #0]
   29b3e:	2001      	movs	r0, #1
   29b40:	b003      	add	sp, #12
   29b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b46:	2300      	movs	r3, #0
   29b48:	e7dc      	b.n	29b04 <__tzcalc_limits+0x88>
   29b4a:	2d44      	cmp	r5, #68	; 0x44
   29b4c:	d101      	bne.n	29b52 <__tzcalc_limits+0xd6>
   29b4e:	4423      	add	r3, r4
   29b50:	e7da      	b.n	29b08 <__tzcalc_limits+0x8c>
   29b52:	bb92      	cbnz	r2, 29bba <__tzcalc_limits+0x13e>
   29b54:	2f00      	cmp	r7, #0
   29b56:	bf0c      	ite	eq
   29b58:	4635      	moveq	r5, r6
   29b5a:	2501      	movne	r5, #1
   29b5c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 29bd0 <__tzcalc_limits+0x154>
   29b60:	f04f 0a30 	mov.w	sl, #48	; 0x30
   29b64:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   29b68:	f04f 0800 	mov.w	r8, #0
   29b6c:	fb0a 9505 	mla	r5, sl, r5, r9
   29b70:	f8cd e004 	str.w	lr, [sp, #4]
   29b74:	46a6      	mov	lr, r4
   29b76:	3d04      	subs	r5, #4
   29b78:	f108 0801 	add.w	r8, r8, #1
   29b7c:	f8dd a004 	ldr.w	sl, [sp, #4]
   29b80:	45c2      	cmp	sl, r8
   29b82:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
   29b86:	dc1a      	bgt.n	29bbe <__tzcalc_limits+0x142>
   29b88:	f10e 0504 	add.w	r5, lr, #4
   29b8c:	f04f 0807 	mov.w	r8, #7
   29b90:	fb95 f8f8 	sdiv	r8, r5, r8
   29b94:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
   29b98:	eba5 0808 	sub.w	r8, r5, r8
   29b9c:	ebb3 0808 	subs.w	r8, r3, r8
   29ba0:	690b      	ldr	r3, [r1, #16]
   29ba2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   29ba6:	bf48      	it	mi
   29ba8:	f108 0807 	addmi.w	r8, r8, #7
   29bac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   29bb0:	4443      	add	r3, r8
   29bb2:	454b      	cmp	r3, r9
   29bb4:	da05      	bge.n	29bc2 <__tzcalc_limits+0x146>
   29bb6:	4473      	add	r3, lr
   29bb8:	e7a6      	b.n	29b08 <__tzcalc_limits+0x8c>
   29bba:	4635      	mov	r5, r6
   29bbc:	e7ce      	b.n	29b5c <__tzcalc_limits+0xe0>
   29bbe:	44ce      	add	lr, r9
   29bc0:	e7da      	b.n	29b78 <__tzcalc_limits+0xfc>
   29bc2:	3b07      	subs	r3, #7
   29bc4:	e7f5      	b.n	29bb2 <__tzcalc_limits+0x136>
   29bc6:	2000      	movs	r0, #0
   29bc8:	e7ba      	b.n	29b40 <__tzcalc_limits+0xc4>
   29bca:	bf00      	nop
   29bcc:	00015180 	.word	0x00015180
   29bd0:	0002eeb4 	.word	0x0002eeb4

00029bd4 <__tz_lock>:
   29bd4:	4801      	ldr	r0, [pc, #4]	; (29bdc <__tz_lock+0x8>)
   29bd6:	f7f3 b979 	b.w	1cecc <__retarget_lock_acquire>
   29bda:	bf00      	nop
   29bdc:	2000ca74 	.word	0x2000ca74

00029be0 <__tz_unlock>:
   29be0:	4801      	ldr	r0, [pc, #4]	; (29be8 <__tz_unlock+0x8>)
   29be2:	f7f3 b9ab 	b.w	1cf3c <__retarget_lock_release>
   29be6:	bf00      	nop
   29be8:	2000ca74 	.word	0x2000ca74

00029bec <_tzset_unlocked>:
   29bec:	4b01      	ldr	r3, [pc, #4]	; (29bf4 <_tzset_unlocked+0x8>)
   29bee:	6818      	ldr	r0, [r3, #0]
   29bf0:	f000 b802 	b.w	29bf8 <_tzset_unlocked_r>
   29bf4:	2000c6e4 	.word	0x2000c6e4

00029bf8 <_tzset_unlocked_r>:
   29bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bfc:	4607      	mov	r7, r0
   29bfe:	b08d      	sub	sp, #52	; 0x34
   29c00:	f000 fa48 	bl	2a094 <__gettzinfo>
   29c04:	49b2      	ldr	r1, [pc, #712]	; (29ed0 <_tzset_unlocked_r+0x2d8>)
   29c06:	4605      	mov	r5, r0
   29c08:	4638      	mov	r0, r7
   29c0a:	f004 fa5b 	bl	2e0c4 <_getenv_r>
   29c0e:	4eb1      	ldr	r6, [pc, #708]	; (29ed4 <_tzset_unlocked_r+0x2dc>)
   29c10:	4604      	mov	r4, r0
   29c12:	b970      	cbnz	r0, 29c32 <_tzset_unlocked_r+0x3a>
   29c14:	4bb0      	ldr	r3, [pc, #704]	; (29ed8 <_tzset_unlocked_r+0x2e0>)
   29c16:	4ab1      	ldr	r2, [pc, #708]	; (29edc <_tzset_unlocked_r+0x2e4>)
   29c18:	6018      	str	r0, [r3, #0]
   29c1a:	4bb1      	ldr	r3, [pc, #708]	; (29ee0 <_tzset_unlocked_r+0x2e8>)
   29c1c:	6018      	str	r0, [r3, #0]
   29c1e:	4bb1      	ldr	r3, [pc, #708]	; (29ee4 <_tzset_unlocked_r+0x2ec>)
   29c20:	6830      	ldr	r0, [r6, #0]
   29c22:	e9c3 2200 	strd	r2, r2, [r3]
   29c26:	f7ff f917 	bl	28e58 <free>
   29c2a:	6034      	str	r4, [r6, #0]
   29c2c:	b00d      	add	sp, #52	; 0x34
   29c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c32:	6831      	ldr	r1, [r6, #0]
   29c34:	2900      	cmp	r1, #0
   29c36:	d162      	bne.n	29cfe <_tzset_unlocked_r+0x106>
   29c38:	6830      	ldr	r0, [r6, #0]
   29c3a:	f7ff f90d 	bl	28e58 <free>
   29c3e:	4620      	mov	r0, r4
   29c40:	f7ef fc8c 	bl	1955c <strlen>
   29c44:	1c41      	adds	r1, r0, #1
   29c46:	4638      	mov	r0, r7
   29c48:	f7ff f978 	bl	28f3c <_malloc_r>
   29c4c:	6030      	str	r0, [r6, #0]
   29c4e:	2800      	cmp	r0, #0
   29c50:	d15a      	bne.n	29d08 <_tzset_unlocked_r+0x110>
   29c52:	7823      	ldrb	r3, [r4, #0]
   29c54:	ae0a      	add	r6, sp, #40	; 0x28
   29c56:	4aa4      	ldr	r2, [pc, #656]	; (29ee8 <_tzset_unlocked_r+0x2f0>)
   29c58:	2b3a      	cmp	r3, #58	; 0x3a
   29c5a:	49a4      	ldr	r1, [pc, #656]	; (29eec <_tzset_unlocked_r+0x2f4>)
   29c5c:	4633      	mov	r3, r6
   29c5e:	bf08      	it	eq
   29c60:	3401      	addeq	r4, #1
   29c62:	4620      	mov	r0, r4
   29c64:	f7ff fd3e 	bl	296e4 <siscanf>
   29c68:	2800      	cmp	r0, #0
   29c6a:	dddf      	ble.n	29c2c <_tzset_unlocked_r+0x34>
   29c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29c6e:	18e7      	adds	r7, r4, r3
   29c70:	5ce3      	ldrb	r3, [r4, r3]
   29c72:	2b2d      	cmp	r3, #45	; 0x2d
   29c74:	d14c      	bne.n	29d10 <_tzset_unlocked_r+0x118>
   29c76:	3701      	adds	r7, #1
   29c78:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   29c7c:	f10d 0a20 	add.w	sl, sp, #32
   29c80:	f10d 0b1e 	add.w	fp, sp, #30
   29c84:	2400      	movs	r4, #0
   29c86:	4633      	mov	r3, r6
   29c88:	aa07      	add	r2, sp, #28
   29c8a:	4999      	ldr	r1, [pc, #612]	; (29ef0 <_tzset_unlocked_r+0x2f8>)
   29c8c:	4638      	mov	r0, r7
   29c8e:	9603      	str	r6, [sp, #12]
   29c90:	f8cd b000 	str.w	fp, [sp]
   29c94:	f8ad 401e 	strh.w	r4, [sp, #30]
   29c98:	f8ad 4020 	strh.w	r4, [sp, #32]
   29c9c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   29ca0:	f7ff fd20 	bl	296e4 <siscanf>
   29ca4:	42a0      	cmp	r0, r4
   29ca6:	ddc1      	ble.n	29c2c <_tzset_unlocked_r+0x34>
   29ca8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   29cac:	213c      	movs	r1, #60	; 0x3c
   29cae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29cb2:	f8df 9240 	ldr.w	r9, [pc, #576]	; 29ef4 <_tzset_unlocked_r+0x2fc>
   29cb6:	fb01 3302 	mla	r3, r1, r2, r3
   29cba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   29cbe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29cc2:	fb01 3302 	mla	r3, r1, r2, r3
   29cc6:	464a      	mov	r2, r9
   29cc8:	4988      	ldr	r1, [pc, #544]	; (29eec <_tzset_unlocked_r+0x2f4>)
   29cca:	fb08 f303 	mul.w	r3, r8, r3
   29cce:	f8df 8214 	ldr.w	r8, [pc, #532]	; 29ee4 <_tzset_unlocked_r+0x2ec>
   29cd2:	62ab      	str	r3, [r5, #40]	; 0x28
   29cd4:	4b84      	ldr	r3, [pc, #528]	; (29ee8 <_tzset_unlocked_r+0x2f0>)
   29cd6:	f8c8 3000 	str.w	r3, [r8]
   29cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29cdc:	441f      	add	r7, r3
   29cde:	4633      	mov	r3, r6
   29ce0:	4638      	mov	r0, r7
   29ce2:	f7ff fcff 	bl	296e4 <siscanf>
   29ce6:	42a0      	cmp	r0, r4
   29ce8:	dc18      	bgt.n	29d1c <_tzset_unlocked_r+0x124>
   29cea:	f8d8 3000 	ldr.w	r3, [r8]
   29cee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   29cf0:	f8c8 3004 	str.w	r3, [r8, #4]
   29cf4:	4b78      	ldr	r3, [pc, #480]	; (29ed8 <_tzset_unlocked_r+0x2e0>)
   29cf6:	601a      	str	r2, [r3, #0]
   29cf8:	4b79      	ldr	r3, [pc, #484]	; (29ee0 <_tzset_unlocked_r+0x2e8>)
   29cfa:	601c      	str	r4, [r3, #0]
   29cfc:	e796      	b.n	29c2c <_tzset_unlocked_r+0x34>
   29cfe:	f7ef fc23 	bl	19548 <strcmp>
   29d02:	2800      	cmp	r0, #0
   29d04:	d198      	bne.n	29c38 <_tzset_unlocked_r+0x40>
   29d06:	e791      	b.n	29c2c <_tzset_unlocked_r+0x34>
   29d08:	4621      	mov	r1, r4
   29d0a:	f004 f8cd 	bl	2dea8 <strcpy>
   29d0e:	e7a0      	b.n	29c52 <_tzset_unlocked_r+0x5a>
   29d10:	2b2b      	cmp	r3, #43	; 0x2b
   29d12:	f04f 0801 	mov.w	r8, #1
   29d16:	bf08      	it	eq
   29d18:	3701      	addeq	r7, #1
   29d1a:	e7af      	b.n	29c7c <_tzset_unlocked_r+0x84>
   29d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29d1e:	f8c8 9004 	str.w	r9, [r8, #4]
   29d22:	18fc      	adds	r4, r7, r3
   29d24:	5cfb      	ldrb	r3, [r7, r3]
   29d26:	2b2d      	cmp	r3, #45	; 0x2d
   29d28:	f040 808c 	bne.w	29e44 <_tzset_unlocked_r+0x24c>
   29d2c:	3401      	adds	r4, #1
   29d2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   29d32:	2300      	movs	r3, #0
   29d34:	aa07      	add	r2, sp, #28
   29d36:	496e      	ldr	r1, [pc, #440]	; (29ef0 <_tzset_unlocked_r+0x2f8>)
   29d38:	4620      	mov	r0, r4
   29d3a:	f8ad 301c 	strh.w	r3, [sp, #28]
   29d3e:	f8ad 301e 	strh.w	r3, [sp, #30]
   29d42:	f8ad 3020 	strh.w	r3, [sp, #32]
   29d46:	930a      	str	r3, [sp, #40]	; 0x28
   29d48:	4633      	mov	r3, r6
   29d4a:	e9cd a602 	strd	sl, r6, [sp, #8]
   29d4e:	e9cd b600 	strd	fp, r6, [sp]
   29d52:	f7ff fcc7 	bl	296e4 <siscanf>
   29d56:	2800      	cmp	r0, #0
   29d58:	dc7a      	bgt.n	29e50 <_tzset_unlocked_r+0x258>
   29d5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   29d5c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   29d60:	652b      	str	r3, [r5, #80]	; 0x50
   29d62:	462f      	mov	r7, r5
   29d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29d66:	f04f 0900 	mov.w	r9, #0
   29d6a:	441c      	add	r4, r3
   29d6c:	7823      	ldrb	r3, [r4, #0]
   29d6e:	2b2c      	cmp	r3, #44	; 0x2c
   29d70:	bf08      	it	eq
   29d72:	3401      	addeq	r4, #1
   29d74:	f894 8000 	ldrb.w	r8, [r4]
   29d78:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   29d7c:	d17a      	bne.n	29e74 <_tzset_unlocked_r+0x27c>
   29d7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   29d82:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   29d86:	495c      	ldr	r1, [pc, #368]	; (29ef8 <_tzset_unlocked_r+0x300>)
   29d88:	4620      	mov	r0, r4
   29d8a:	9603      	str	r6, [sp, #12]
   29d8c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   29d90:	ab09      	add	r3, sp, #36	; 0x24
   29d92:	9300      	str	r3, [sp, #0]
   29d94:	4633      	mov	r3, r6
   29d96:	f7ff fca5 	bl	296e4 <siscanf>
   29d9a:	2803      	cmp	r0, #3
   29d9c:	f47f af46 	bne.w	29c2c <_tzset_unlocked_r+0x34>
   29da0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   29da4:	1e4b      	subs	r3, r1, #1
   29da6:	2b0b      	cmp	r3, #11
   29da8:	f63f af40 	bhi.w	29c2c <_tzset_unlocked_r+0x34>
   29dac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   29db0:	1e53      	subs	r3, r2, #1
   29db2:	2b04      	cmp	r3, #4
   29db4:	f63f af3a 	bhi.w	29c2c <_tzset_unlocked_r+0x34>
   29db8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   29dbc:	2b06      	cmp	r3, #6
   29dbe:	f63f af35 	bhi.w	29c2c <_tzset_unlocked_r+0x34>
   29dc2:	f887 8008 	strb.w	r8, [r7, #8]
   29dc6:	617b      	str	r3, [r7, #20]
   29dc8:	e9c7 1203 	strd	r1, r2, [r7, #12]
   29dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29dce:	eb04 0803 	add.w	r8, r4, r3
   29dd2:	2302      	movs	r3, #2
   29dd4:	f8ad 301c 	strh.w	r3, [sp, #28]
   29dd8:	2300      	movs	r3, #0
   29dda:	f8ad 301e 	strh.w	r3, [sp, #30]
   29dde:	f8ad 3020 	strh.w	r3, [sp, #32]
   29de2:	930a      	str	r3, [sp, #40]	; 0x28
   29de4:	f898 3000 	ldrb.w	r3, [r8]
   29de8:	2b2f      	cmp	r3, #47	; 0x2f
   29dea:	d109      	bne.n	29e00 <_tzset_unlocked_r+0x208>
   29dec:	4633      	mov	r3, r6
   29dee:	aa07      	add	r2, sp, #28
   29df0:	4942      	ldr	r1, [pc, #264]	; (29efc <_tzset_unlocked_r+0x304>)
   29df2:	4640      	mov	r0, r8
   29df4:	e9cd a602 	strd	sl, r6, [sp, #8]
   29df8:	e9cd b600 	strd	fp, r6, [sp]
   29dfc:	f7ff fc72 	bl	296e4 <siscanf>
   29e00:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   29e04:	213c      	movs	r1, #60	; 0x3c
   29e06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29e0a:	3728      	adds	r7, #40	; 0x28
   29e0c:	fb01 3302 	mla	r3, r1, r2, r3
   29e10:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   29e14:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29e18:	fb01 3302 	mla	r3, r1, r2, r3
   29e1c:	f847 3c10 	str.w	r3, [r7, #-16]
   29e20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   29e22:	4444      	add	r4, r8
   29e24:	f1b9 0f00 	cmp.w	r9, #0
   29e28:	d021      	beq.n	29e6e <_tzset_unlocked_r+0x276>
   29e2a:	6868      	ldr	r0, [r5, #4]
   29e2c:	f7ff fe26 	bl	29a7c <__tzcalc_limits>
   29e30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   29e32:	4b29      	ldr	r3, [pc, #164]	; (29ed8 <_tzset_unlocked_r+0x2e0>)
   29e34:	601a      	str	r2, [r3, #0]
   29e36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   29e38:	1a9b      	subs	r3, r3, r2
   29e3a:	4a29      	ldr	r2, [pc, #164]	; (29ee0 <_tzset_unlocked_r+0x2e8>)
   29e3c:	bf18      	it	ne
   29e3e:	2301      	movne	r3, #1
   29e40:	6013      	str	r3, [r2, #0]
   29e42:	e6f3      	b.n	29c2c <_tzset_unlocked_r+0x34>
   29e44:	2b2b      	cmp	r3, #43	; 0x2b
   29e46:	f04f 0701 	mov.w	r7, #1
   29e4a:	bf08      	it	eq
   29e4c:	3401      	addeq	r4, #1
   29e4e:	e770      	b.n	29d32 <_tzset_unlocked_r+0x13a>
   29e50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   29e54:	213c      	movs	r1, #60	; 0x3c
   29e56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29e5a:	fb01 3302 	mla	r3, r1, r2, r3
   29e5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   29e62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   29e66:	fb01 3302 	mla	r3, r1, r2, r3
   29e6a:	437b      	muls	r3, r7
   29e6c:	e778      	b.n	29d60 <_tzset_unlocked_r+0x168>
   29e6e:	f04f 0901 	mov.w	r9, #1
   29e72:	e77b      	b.n	29d6c <_tzset_unlocked_r+0x174>
   29e74:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   29e78:	f04f 020a 	mov.w	r2, #10
   29e7c:	a90b      	add	r1, sp, #44	; 0x2c
   29e7e:	bf06      	itte	eq
   29e80:	3401      	addeq	r4, #1
   29e82:	4643      	moveq	r3, r8
   29e84:	2344      	movne	r3, #68	; 0x44
   29e86:	4620      	mov	r0, r4
   29e88:	9305      	str	r3, [sp, #20]
   29e8a:	f7ff fded 	bl	29a68 <strtoul>
   29e8e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   29e92:	9b05      	ldr	r3, [sp, #20]
   29e94:	45a0      	cmp	r8, r4
   29e96:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   29e9a:	d114      	bne.n	29ec6 <_tzset_unlocked_r+0x2ce>
   29e9c:	234d      	movs	r3, #77	; 0x4d
   29e9e:	f1b9 0f00 	cmp.w	r9, #0
   29ea2:	d107      	bne.n	29eb4 <_tzset_unlocked_r+0x2bc>
   29ea4:	2103      	movs	r1, #3
   29ea6:	722b      	strb	r3, [r5, #8]
   29ea8:	2302      	movs	r3, #2
   29eaa:	f8c5 9014 	str.w	r9, [r5, #20]
   29eae:	e9c5 1303 	strd	r1, r3, [r5, #12]
   29eb2:	e78e      	b.n	29dd2 <_tzset_unlocked_r+0x1da>
   29eb4:	220b      	movs	r2, #11
   29eb6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   29eba:	2301      	movs	r3, #1
   29ebc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   29ec0:	2300      	movs	r3, #0
   29ec2:	63eb      	str	r3, [r5, #60]	; 0x3c
   29ec4:	e785      	b.n	29dd2 <_tzset_unlocked_r+0x1da>
   29ec6:	b280      	uxth	r0, r0
   29ec8:	723b      	strb	r3, [r7, #8]
   29eca:	6178      	str	r0, [r7, #20]
   29ecc:	e781      	b.n	29dd2 <_tzset_unlocked_r+0x1da>
   29ece:	bf00      	nop
   29ed0:	00031c05 	.word	0x00031c05
   29ed4:	2000d4ac 	.word	0x2000d4ac
   29ed8:	2000d4b4 	.word	0x2000d4b4
   29edc:	00031c08 	.word	0x00031c08
   29ee0:	2000d4b0 	.word	0x2000d4b0
   29ee4:	2000c6dc 	.word	0x2000c6dc
   29ee8:	2000db99 	.word	0x2000db99
   29eec:	00031c0c 	.word	0x00031c0c
   29ef0:	00031c2f 	.word	0x00031c2f
   29ef4:	2000db8e 	.word	0x2000db8e
   29ef8:	00031c1b 	.word	0x00031c1b
   29efc:	00031c2e 	.word	0x00031c2e

00029f00 <vsniprintf>:
   29f00:	b507      	push	{r0, r1, r2, lr}
   29f02:	9300      	str	r3, [sp, #0]
   29f04:	4613      	mov	r3, r2
   29f06:	460a      	mov	r2, r1
   29f08:	4601      	mov	r1, r0
   29f0a:	4803      	ldr	r0, [pc, #12]	; (29f18 <vsniprintf+0x18>)
   29f0c:	6800      	ldr	r0, [r0, #0]
   29f0e:	f004 f820 	bl	2df52 <_vsniprintf_r>
   29f12:	b003      	add	sp, #12
   29f14:	f85d fb04 	ldr.w	pc, [sp], #4
   29f18:	2000c6e4 	.word	0x2000c6e4

00029f1c <_vsiscanf_r>:
   29f1c:	b570      	push	{r4, r5, r6, lr}
   29f1e:	461e      	mov	r6, r3
   29f20:	b09a      	sub	sp, #104	; 0x68
   29f22:	f44f 7301 	mov.w	r3, #516	; 0x204
   29f26:	4604      	mov	r4, r0
   29f28:	4608      	mov	r0, r1
   29f2a:	4615      	mov	r5, r2
   29f2c:	f8ad 300c 	strh.w	r3, [sp, #12]
   29f30:	9100      	str	r1, [sp, #0]
   29f32:	9104      	str	r1, [sp, #16]
   29f34:	f7ef fb12 	bl	1955c <strlen>
   29f38:	4b09      	ldr	r3, [pc, #36]	; (29f60 <_vsiscanf_r+0x44>)
   29f3a:	462a      	mov	r2, r5
   29f3c:	4669      	mov	r1, sp
   29f3e:	9001      	str	r0, [sp, #4]
   29f40:	9309      	str	r3, [sp, #36]	; 0x24
   29f42:	2300      	movs	r3, #0
   29f44:	9005      	str	r0, [sp, #20]
   29f46:	4620      	mov	r0, r4
   29f48:	930d      	str	r3, [sp, #52]	; 0x34
   29f4a:	9312      	str	r3, [sp, #72]	; 0x48
   29f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29f50:	f8ad 300e 	strh.w	r3, [sp, #14]
   29f54:	4633      	mov	r3, r6
   29f56:	f000 fcdf 	bl	2a918 <__ssvfiscanf_r>
   29f5a:	b01a      	add	sp, #104	; 0x68
   29f5c:	bd70      	pop	{r4, r5, r6, pc}
   29f5e:	bf00      	nop
   29f60:	0002de27 	.word	0x0002de27

00029f64 <vsiscanf>:
   29f64:	4613      	mov	r3, r2
   29f66:	460a      	mov	r2, r1
   29f68:	4601      	mov	r1, r0
   29f6a:	4802      	ldr	r0, [pc, #8]	; (29f74 <vsiscanf+0x10>)
   29f6c:	6800      	ldr	r0, [r0, #0]
   29f6e:	f7ff bfd5 	b.w	29f1c <_vsiscanf_r>
   29f72:	bf00      	nop
   29f74:	2000c6e4 	.word	0x2000c6e4

00029f78 <_write_r>:
   29f78:	b538      	push	{r3, r4, r5, lr}
   29f7a:	4604      	mov	r4, r0
   29f7c:	4d06      	ldr	r5, [pc, #24]	; (29f98 <_write_r+0x20>)
   29f7e:	4608      	mov	r0, r1
   29f80:	4611      	mov	r1, r2
   29f82:	2200      	movs	r2, #0
   29f84:	602a      	str	r2, [r5, #0]
   29f86:	461a      	mov	r2, r3
   29f88:	f001 ff15 	bl	2bdb6 <_write>
   29f8c:	1c43      	adds	r3, r0, #1
   29f8e:	d102      	bne.n	29f96 <_write_r+0x1e>
   29f90:	682b      	ldr	r3, [r5, #0]
   29f92:	b103      	cbz	r3, 29f96 <_write_r+0x1e>
   29f94:	6023      	str	r3, [r4, #0]
   29f96:	bd38      	pop	{r3, r4, r5, pc}
   29f98:	2000d4b8 	.word	0x2000d4b8

00029f9c <__assert_func>:
   29f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   29f9e:	4614      	mov	r4, r2
   29fa0:	461a      	mov	r2, r3
   29fa2:	4b09      	ldr	r3, [pc, #36]	; (29fc8 <__assert_func+0x2c>)
   29fa4:	4605      	mov	r5, r0
   29fa6:	681b      	ldr	r3, [r3, #0]
   29fa8:	68d8      	ldr	r0, [r3, #12]
   29faa:	b14c      	cbz	r4, 29fc0 <__assert_func+0x24>
   29fac:	4b07      	ldr	r3, [pc, #28]	; (29fcc <__assert_func+0x30>)
   29fae:	9100      	str	r1, [sp, #0]
   29fb0:	4907      	ldr	r1, [pc, #28]	; (29fd0 <__assert_func+0x34>)
   29fb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   29fb6:	462b      	mov	r3, r5
   29fb8:	f000 f81e 	bl	29ff8 <fiprintf>
   29fbc:	f004 fa50 	bl	2e460 <abort>
   29fc0:	4b04      	ldr	r3, [pc, #16]	; (29fd4 <__assert_func+0x38>)
   29fc2:	461c      	mov	r4, r3
   29fc4:	e7f3      	b.n	29fae <__assert_func+0x12>
   29fc6:	bf00      	nop
   29fc8:	2000c6e4 	.word	0x2000c6e4
   29fcc:	00031c41 	.word	0x00031c41
   29fd0:	00031c4e 	.word	0x00031c4e
   29fd4:	000317b6 	.word	0x000317b6

00029fd8 <_close_r>:
   29fd8:	b538      	push	{r3, r4, r5, lr}
   29fda:	2300      	movs	r3, #0
   29fdc:	4d05      	ldr	r5, [pc, #20]	; (29ff4 <_close_r+0x1c>)
   29fde:	4604      	mov	r4, r0
   29fe0:	4608      	mov	r0, r1
   29fe2:	602b      	str	r3, [r5, #0]
   29fe4:	f001 feeb 	bl	2bdbe <_close>
   29fe8:	1c43      	adds	r3, r0, #1
   29fea:	d102      	bne.n	29ff2 <_close_r+0x1a>
   29fec:	682b      	ldr	r3, [r5, #0]
   29fee:	b103      	cbz	r3, 29ff2 <_close_r+0x1a>
   29ff0:	6023      	str	r3, [r4, #0]
   29ff2:	bd38      	pop	{r3, r4, r5, pc}
   29ff4:	2000d4b8 	.word	0x2000d4b8

00029ff8 <fiprintf>:
   29ff8:	b40e      	push	{r1, r2, r3}
   29ffa:	b503      	push	{r0, r1, lr}
   29ffc:	ab03      	add	r3, sp, #12
   29ffe:	4601      	mov	r1, r0
   2a000:	4805      	ldr	r0, [pc, #20]	; (2a018 <fiprintf+0x20>)
   2a002:	f853 2b04 	ldr.w	r2, [r3], #4
   2a006:	6800      	ldr	r0, [r0, #0]
   2a008:	9301      	str	r3, [sp, #4]
   2a00a:	f000 fe01 	bl	2ac10 <_vfiprintf_r>
   2a00e:	b002      	add	sp, #8
   2a010:	f85d eb04 	ldr.w	lr, [sp], #4
   2a014:	b003      	add	sp, #12
   2a016:	4770      	bx	lr
   2a018:	2000c6e4 	.word	0x2000c6e4

0002a01c <_findenv_r>:
   2a01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a020:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2a090 <_findenv_r+0x74>
   2a024:	4607      	mov	r7, r0
   2a026:	4689      	mov	r9, r1
   2a028:	4616      	mov	r6, r2
   2a02a:	f001 f945 	bl	2b2b8 <__env_lock>
   2a02e:	f8da 4000 	ldr.w	r4, [sl]
   2a032:	b134      	cbz	r4, 2a042 <_findenv_r+0x26>
   2a034:	464b      	mov	r3, r9
   2a036:	4698      	mov	r8, r3
   2a038:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a03c:	b13a      	cbz	r2, 2a04e <_findenv_r+0x32>
   2a03e:	2a3d      	cmp	r2, #61	; 0x3d
   2a040:	d1f9      	bne.n	2a036 <_findenv_r+0x1a>
   2a042:	4638      	mov	r0, r7
   2a044:	f001 f93e 	bl	2b2c4 <__env_unlock>
   2a048:	2000      	movs	r0, #0
   2a04a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a04e:	eba8 0809 	sub.w	r8, r8, r9
   2a052:	46a3      	mov	fp, r4
   2a054:	f854 0b04 	ldr.w	r0, [r4], #4
   2a058:	2800      	cmp	r0, #0
   2a05a:	d0f2      	beq.n	2a042 <_findenv_r+0x26>
   2a05c:	4642      	mov	r2, r8
   2a05e:	4649      	mov	r1, r9
   2a060:	f003 ff2a 	bl	2deb8 <strncmp>
   2a064:	2800      	cmp	r0, #0
   2a066:	d1f4      	bne.n	2a052 <_findenv_r+0x36>
   2a068:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2a06c:	eb03 0508 	add.w	r5, r3, r8
   2a070:	f813 3008 	ldrb.w	r3, [r3, r8]
   2a074:	2b3d      	cmp	r3, #61	; 0x3d
   2a076:	d1ec      	bne.n	2a052 <_findenv_r+0x36>
   2a078:	f8da 3000 	ldr.w	r3, [sl]
   2a07c:	4638      	mov	r0, r7
   2a07e:	ebab 0303 	sub.w	r3, fp, r3
   2a082:	109b      	asrs	r3, r3, #2
   2a084:	6033      	str	r3, [r6, #0]
   2a086:	f001 f91d 	bl	2b2c4 <__env_unlock>
   2a08a:	1c68      	adds	r0, r5, #1
   2a08c:	e7dd      	b.n	2a04a <_findenv_r+0x2e>
   2a08e:	bf00      	nop
   2a090:	2000c748 	.word	0x2000c748

0002a094 <__gettzinfo>:
   2a094:	4800      	ldr	r0, [pc, #0]	; (2a098 <__gettzinfo+0x4>)
   2a096:	4770      	bx	lr
   2a098:	2000c530 	.word	0x2000c530

0002a09c <_localeconv_r>:
   2a09c:	4800      	ldr	r0, [pc, #0]	; (2a0a0 <_localeconv_r+0x4>)
   2a09e:	4770      	bx	lr
   2a0a0:	2000c83c 	.word	0x2000c83c

0002a0a4 <_lseek_r>:
   2a0a4:	b538      	push	{r3, r4, r5, lr}
   2a0a6:	4604      	mov	r4, r0
   2a0a8:	4d06      	ldr	r5, [pc, #24]	; (2a0c4 <_lseek_r+0x20>)
   2a0aa:	4608      	mov	r0, r1
   2a0ac:	4611      	mov	r1, r2
   2a0ae:	2200      	movs	r2, #0
   2a0b0:	602a      	str	r2, [r5, #0]
   2a0b2:	461a      	mov	r2, r3
   2a0b4:	f001 fe86 	bl	2bdc4 <_lseek>
   2a0b8:	1c43      	adds	r3, r0, #1
   2a0ba:	d102      	bne.n	2a0c2 <_lseek_r+0x1e>
   2a0bc:	682b      	ldr	r3, [r5, #0]
   2a0be:	b103      	cbz	r3, 2a0c2 <_lseek_r+0x1e>
   2a0c0:	6023      	str	r3, [r4, #0]
   2a0c2:	bd38      	pop	{r3, r4, r5, pc}
   2a0c4:	2000d4b8 	.word	0x2000d4b8

0002a0c8 <__malloc_lock>:
   2a0c8:	4801      	ldr	r0, [pc, #4]	; (2a0d0 <__malloc_lock+0x8>)
   2a0ca:	f7f2 bf1b 	b.w	1cf04 <__retarget_lock_acquire_recursive>
   2a0ce:	bf00      	nop
   2a0d0:	2000c9c0 	.word	0x2000c9c0

0002a0d4 <__malloc_unlock>:
   2a0d4:	4801      	ldr	r0, [pc, #4]	; (2a0dc <__malloc_unlock+0x8>)
   2a0d6:	f7f2 bf49 	b.w	1cf6c <__retarget_lock_release_recursive>
   2a0da:	bf00      	nop
   2a0dc:	2000c9c0 	.word	0x2000c9c0

0002a0e0 <_Balloc>:
   2a0e0:	b570      	push	{r4, r5, r6, lr}
   2a0e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2a0e4:	4604      	mov	r4, r0
   2a0e6:	460d      	mov	r5, r1
   2a0e8:	b976      	cbnz	r6, 2a108 <_Balloc+0x28>
   2a0ea:	2010      	movs	r0, #16
   2a0ec:	f7fe feac 	bl	28e48 <malloc>
   2a0f0:	4602      	mov	r2, r0
   2a0f2:	6260      	str	r0, [r4, #36]	; 0x24
   2a0f4:	b920      	cbnz	r0, 2a100 <_Balloc+0x20>
   2a0f6:	4b18      	ldr	r3, [pc, #96]	; (2a158 <_Balloc+0x78>)
   2a0f8:	2166      	movs	r1, #102	; 0x66
   2a0fa:	4818      	ldr	r0, [pc, #96]	; (2a15c <_Balloc+0x7c>)
   2a0fc:	f7ff ff4e 	bl	29f9c <__assert_func>
   2a100:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2a104:	6006      	str	r6, [r0, #0]
   2a106:	60c6      	str	r6, [r0, #12]
   2a108:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2a10a:	68f3      	ldr	r3, [r6, #12]
   2a10c:	b183      	cbz	r3, 2a130 <_Balloc+0x50>
   2a10e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a110:	68db      	ldr	r3, [r3, #12]
   2a112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2a116:	b9b8      	cbnz	r0, 2a148 <_Balloc+0x68>
   2a118:	2101      	movs	r1, #1
   2a11a:	4620      	mov	r0, r4
   2a11c:	fa01 f605 	lsl.w	r6, r1, r5
   2a120:	1d72      	adds	r2, r6, #5
   2a122:	0092      	lsls	r2, r2, #2
   2a124:	f004 f83d 	bl	2e1a2 <_calloc_r>
   2a128:	b160      	cbz	r0, 2a144 <_Balloc+0x64>
   2a12a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2a12e:	e00e      	b.n	2a14e <_Balloc+0x6e>
   2a130:	2221      	movs	r2, #33	; 0x21
   2a132:	2104      	movs	r1, #4
   2a134:	4620      	mov	r0, r4
   2a136:	f004 f834 	bl	2e1a2 <_calloc_r>
   2a13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a13c:	60f0      	str	r0, [r6, #12]
   2a13e:	68db      	ldr	r3, [r3, #12]
   2a140:	2b00      	cmp	r3, #0
   2a142:	d1e4      	bne.n	2a10e <_Balloc+0x2e>
   2a144:	2000      	movs	r0, #0
   2a146:	bd70      	pop	{r4, r5, r6, pc}
   2a148:	6802      	ldr	r2, [r0, #0]
   2a14a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2a14e:	2300      	movs	r3, #0
   2a150:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2a154:	e7f7      	b.n	2a146 <_Balloc+0x66>
   2a156:	bf00      	nop
   2a158:	00031b3d 	.word	0x00031b3d
   2a15c:	00031d19 	.word	0x00031d19

0002a160 <_Bfree>:
   2a160:	b570      	push	{r4, r5, r6, lr}
   2a162:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2a164:	4605      	mov	r5, r0
   2a166:	460c      	mov	r4, r1
   2a168:	b976      	cbnz	r6, 2a188 <_Bfree+0x28>
   2a16a:	2010      	movs	r0, #16
   2a16c:	f7fe fe6c 	bl	28e48 <malloc>
   2a170:	4602      	mov	r2, r0
   2a172:	6268      	str	r0, [r5, #36]	; 0x24
   2a174:	b920      	cbnz	r0, 2a180 <_Bfree+0x20>
   2a176:	4b09      	ldr	r3, [pc, #36]	; (2a19c <_Bfree+0x3c>)
   2a178:	218a      	movs	r1, #138	; 0x8a
   2a17a:	4809      	ldr	r0, [pc, #36]	; (2a1a0 <_Bfree+0x40>)
   2a17c:	f7ff ff0e 	bl	29f9c <__assert_func>
   2a180:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2a184:	6006      	str	r6, [r0, #0]
   2a186:	60c6      	str	r6, [r0, #12]
   2a188:	b13c      	cbz	r4, 2a19a <_Bfree+0x3a>
   2a18a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2a18c:	6862      	ldr	r2, [r4, #4]
   2a18e:	68db      	ldr	r3, [r3, #12]
   2a190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2a194:	6021      	str	r1, [r4, #0]
   2a196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2a19a:	bd70      	pop	{r4, r5, r6, pc}
   2a19c:	00031b3d 	.word	0x00031b3d
   2a1a0:	00031d19 	.word	0x00031d19

0002a1a4 <__multadd>:
   2a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1a8:	f101 0c14 	add.w	ip, r1, #20
   2a1ac:	4607      	mov	r7, r0
   2a1ae:	460c      	mov	r4, r1
   2a1b0:	461e      	mov	r6, r3
   2a1b2:	690d      	ldr	r5, [r1, #16]
   2a1b4:	2000      	movs	r0, #0
   2a1b6:	f8dc 3000 	ldr.w	r3, [ip]
   2a1ba:	3001      	adds	r0, #1
   2a1bc:	b299      	uxth	r1, r3
   2a1be:	4285      	cmp	r5, r0
   2a1c0:	fb02 6101 	mla	r1, r2, r1, r6
   2a1c4:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2a1c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2a1cc:	b289      	uxth	r1, r1
   2a1ce:	fb02 3306 	mla	r3, r2, r6, r3
   2a1d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2a1d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2a1da:	f84c 1b04 	str.w	r1, [ip], #4
   2a1de:	dcea      	bgt.n	2a1b6 <__multadd+0x12>
   2a1e0:	b30e      	cbz	r6, 2a226 <__multadd+0x82>
   2a1e2:	68a3      	ldr	r3, [r4, #8]
   2a1e4:	42ab      	cmp	r3, r5
   2a1e6:	dc19      	bgt.n	2a21c <__multadd+0x78>
   2a1e8:	6861      	ldr	r1, [r4, #4]
   2a1ea:	4638      	mov	r0, r7
   2a1ec:	3101      	adds	r1, #1
   2a1ee:	f7ff ff77 	bl	2a0e0 <_Balloc>
   2a1f2:	4680      	mov	r8, r0
   2a1f4:	b928      	cbnz	r0, 2a202 <__multadd+0x5e>
   2a1f6:	4602      	mov	r2, r0
   2a1f8:	4b0c      	ldr	r3, [pc, #48]	; (2a22c <__multadd+0x88>)
   2a1fa:	21b5      	movs	r1, #181	; 0xb5
   2a1fc:	480c      	ldr	r0, [pc, #48]	; (2a230 <__multadd+0x8c>)
   2a1fe:	f7ff fecd 	bl	29f9c <__assert_func>
   2a202:	6922      	ldr	r2, [r4, #16]
   2a204:	f104 010c 	add.w	r1, r4, #12
   2a208:	300c      	adds	r0, #12
   2a20a:	3202      	adds	r2, #2
   2a20c:	0092      	lsls	r2, r2, #2
   2a20e:	f003 fcd6 	bl	2dbbe <memcpy>
   2a212:	4621      	mov	r1, r4
   2a214:	4644      	mov	r4, r8
   2a216:	4638      	mov	r0, r7
   2a218:	f7ff ffa2 	bl	2a160 <_Bfree>
   2a21c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2a220:	3501      	adds	r5, #1
   2a222:	615e      	str	r6, [r3, #20]
   2a224:	6125      	str	r5, [r4, #16]
   2a226:	4620      	mov	r0, r4
   2a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a22c:	00031d08 	.word	0x00031d08
   2a230:	00031d19 	.word	0x00031d19

0002a234 <__i2b>:
   2a234:	b510      	push	{r4, lr}
   2a236:	460c      	mov	r4, r1
   2a238:	2101      	movs	r1, #1
   2a23a:	f7ff ff51 	bl	2a0e0 <_Balloc>
   2a23e:	4602      	mov	r2, r0
   2a240:	b928      	cbnz	r0, 2a24e <__i2b+0x1a>
   2a242:	4b05      	ldr	r3, [pc, #20]	; (2a258 <__i2b+0x24>)
   2a244:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2a248:	4804      	ldr	r0, [pc, #16]	; (2a25c <__i2b+0x28>)
   2a24a:	f7ff fea7 	bl	29f9c <__assert_func>
   2a24e:	2301      	movs	r3, #1
   2a250:	6144      	str	r4, [r0, #20]
   2a252:	6103      	str	r3, [r0, #16]
   2a254:	bd10      	pop	{r4, pc}
   2a256:	bf00      	nop
   2a258:	00031d08 	.word	0x00031d08
   2a25c:	00031d19 	.word	0x00031d19

0002a260 <__multiply>:
   2a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a264:	4691      	mov	r9, r2
   2a266:	690a      	ldr	r2, [r1, #16]
   2a268:	460c      	mov	r4, r1
   2a26a:	b085      	sub	sp, #20
   2a26c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2a270:	429a      	cmp	r2, r3
   2a272:	bfbe      	ittt	lt
   2a274:	460b      	movlt	r3, r1
   2a276:	464c      	movlt	r4, r9
   2a278:	4699      	movlt	r9, r3
   2a27a:	6927      	ldr	r7, [r4, #16]
   2a27c:	68a3      	ldr	r3, [r4, #8]
   2a27e:	f8d9 a010 	ldr.w	sl, [r9, #16]
   2a282:	6861      	ldr	r1, [r4, #4]
   2a284:	eb07 060a 	add.w	r6, r7, sl
   2a288:	42b3      	cmp	r3, r6
   2a28a:	bfb8      	it	lt
   2a28c:	3101      	addlt	r1, #1
   2a28e:	f7ff ff27 	bl	2a0e0 <_Balloc>
   2a292:	b930      	cbnz	r0, 2a2a2 <__multiply+0x42>
   2a294:	4602      	mov	r2, r0
   2a296:	4b44      	ldr	r3, [pc, #272]	; (2a3a8 <__multiply+0x148>)
   2a298:	f240 115d 	movw	r1, #349	; 0x15d
   2a29c:	4843      	ldr	r0, [pc, #268]	; (2a3ac <__multiply+0x14c>)
   2a29e:	f7ff fe7d 	bl	29f9c <__assert_func>
   2a2a2:	f100 0514 	add.w	r5, r0, #20
   2a2a6:	2200      	movs	r2, #0
   2a2a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   2a2ac:	462b      	mov	r3, r5
   2a2ae:	4543      	cmp	r3, r8
   2a2b0:	d321      	bcc.n	2a2f6 <__multiply+0x96>
   2a2b2:	f104 0314 	add.w	r3, r4, #20
   2a2b6:	f104 0115 	add.w	r1, r4, #21
   2a2ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2a2be:	f109 0314 	add.w	r3, r9, #20
   2a2c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   2a2c6:	9202      	str	r2, [sp, #8]
   2a2c8:	1b3a      	subs	r2, r7, r4
   2a2ca:	3a15      	subs	r2, #21
   2a2cc:	f022 0203 	bic.w	r2, r2, #3
   2a2d0:	3204      	adds	r2, #4
   2a2d2:	428f      	cmp	r7, r1
   2a2d4:	bf38      	it	cc
   2a2d6:	2204      	movcc	r2, #4
   2a2d8:	9201      	str	r2, [sp, #4]
   2a2da:	9a02      	ldr	r2, [sp, #8]
   2a2dc:	9303      	str	r3, [sp, #12]
   2a2de:	429a      	cmp	r2, r3
   2a2e0:	d80c      	bhi.n	2a2fc <__multiply+0x9c>
   2a2e2:	2e00      	cmp	r6, #0
   2a2e4:	dd03      	ble.n	2a2ee <__multiply+0x8e>
   2a2e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2a2ea:	2b00      	cmp	r3, #0
   2a2ec:	d05a      	beq.n	2a3a4 <__multiply+0x144>
   2a2ee:	6106      	str	r6, [r0, #16]
   2a2f0:	b005      	add	sp, #20
   2a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2f6:	f843 2b04 	str.w	r2, [r3], #4
   2a2fa:	e7d8      	b.n	2a2ae <__multiply+0x4e>
   2a2fc:	f8b3 a000 	ldrh.w	sl, [r3]
   2a300:	f1ba 0f00 	cmp.w	sl, #0
   2a304:	d024      	beq.n	2a350 <__multiply+0xf0>
   2a306:	f104 0e14 	add.w	lr, r4, #20
   2a30a:	46a9      	mov	r9, r5
   2a30c:	f04f 0c00 	mov.w	ip, #0
   2a310:	f85e 2b04 	ldr.w	r2, [lr], #4
   2a314:	f8d9 1000 	ldr.w	r1, [r9]
   2a318:	fa1f fb82 	uxth.w	fp, r2
   2a31c:	4577      	cmp	r7, lr
   2a31e:	b289      	uxth	r1, r1
   2a320:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2a324:	fb0a 110b 	mla	r1, sl, fp, r1
   2a328:	4461      	add	r1, ip
   2a32a:	f8d9 c000 	ldr.w	ip, [r9]
   2a32e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2a332:	fb0a c202 	mla	r2, sl, r2, ip
   2a336:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2a33a:	b289      	uxth	r1, r1
   2a33c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   2a340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2a344:	f849 1b04 	str.w	r1, [r9], #4
   2a348:	d8e2      	bhi.n	2a310 <__multiply+0xb0>
   2a34a:	9a01      	ldr	r2, [sp, #4]
   2a34c:	f845 c002 	str.w	ip, [r5, r2]
   2a350:	9a03      	ldr	r2, [sp, #12]
   2a352:	3304      	adds	r3, #4
   2a354:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   2a358:	f1b9 0f00 	cmp.w	r9, #0
   2a35c:	d020      	beq.n	2a3a0 <__multiply+0x140>
   2a35e:	6829      	ldr	r1, [r5, #0]
   2a360:	f104 0c14 	add.w	ip, r4, #20
   2a364:	46ae      	mov	lr, r5
   2a366:	f04f 0a00 	mov.w	sl, #0
   2a36a:	f8bc b000 	ldrh.w	fp, [ip]
   2a36e:	b289      	uxth	r1, r1
   2a370:	f8be 2002 	ldrh.w	r2, [lr, #2]
   2a374:	fb09 220b 	mla	r2, r9, fp, r2
   2a378:	4492      	add	sl, r2
   2a37a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   2a37e:	f84e 1b04 	str.w	r1, [lr], #4
   2a382:	f85c 2b04 	ldr.w	r2, [ip], #4
   2a386:	f8be 1000 	ldrh.w	r1, [lr]
   2a38a:	0c12      	lsrs	r2, r2, #16
   2a38c:	4567      	cmp	r7, ip
   2a38e:	fb09 1102 	mla	r1, r9, r2, r1
   2a392:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   2a396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   2a39a:	d8e6      	bhi.n	2a36a <__multiply+0x10a>
   2a39c:	9a01      	ldr	r2, [sp, #4]
   2a39e:	50a9      	str	r1, [r5, r2]
   2a3a0:	3504      	adds	r5, #4
   2a3a2:	e79a      	b.n	2a2da <__multiply+0x7a>
   2a3a4:	3e01      	subs	r6, #1
   2a3a6:	e79c      	b.n	2a2e2 <__multiply+0x82>
   2a3a8:	00031d08 	.word	0x00031d08
   2a3ac:	00031d19 	.word	0x00031d19

0002a3b0 <__pow5mult>:
   2a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a3b4:	4615      	mov	r5, r2
   2a3b6:	f012 0203 	ands.w	r2, r2, #3
   2a3ba:	4606      	mov	r6, r0
   2a3bc:	460f      	mov	r7, r1
   2a3be:	d007      	beq.n	2a3d0 <__pow5mult+0x20>
   2a3c0:	3a01      	subs	r2, #1
   2a3c2:	4c25      	ldr	r4, [pc, #148]	; (2a458 <__pow5mult+0xa8>)
   2a3c4:	2300      	movs	r3, #0
   2a3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2a3ca:	f7ff feeb 	bl	2a1a4 <__multadd>
   2a3ce:	4607      	mov	r7, r0
   2a3d0:	10ad      	asrs	r5, r5, #2
   2a3d2:	d03d      	beq.n	2a450 <__pow5mult+0xa0>
   2a3d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2a3d6:	b97c      	cbnz	r4, 2a3f8 <__pow5mult+0x48>
   2a3d8:	2010      	movs	r0, #16
   2a3da:	f7fe fd35 	bl	28e48 <malloc>
   2a3de:	4602      	mov	r2, r0
   2a3e0:	6270      	str	r0, [r6, #36]	; 0x24
   2a3e2:	b928      	cbnz	r0, 2a3f0 <__pow5mult+0x40>
   2a3e4:	4b1d      	ldr	r3, [pc, #116]	; (2a45c <__pow5mult+0xac>)
   2a3e6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2a3ea:	481d      	ldr	r0, [pc, #116]	; (2a460 <__pow5mult+0xb0>)
   2a3ec:	f7ff fdd6 	bl	29f9c <__assert_func>
   2a3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2a3f4:	6004      	str	r4, [r0, #0]
   2a3f6:	60c4      	str	r4, [r0, #12]
   2a3f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2a3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2a400:	b94c      	cbnz	r4, 2a416 <__pow5mult+0x66>
   2a402:	f240 2171 	movw	r1, #625	; 0x271
   2a406:	4630      	mov	r0, r6
   2a408:	f7ff ff14 	bl	2a234 <__i2b>
   2a40c:	2300      	movs	r3, #0
   2a40e:	4604      	mov	r4, r0
   2a410:	f8c8 0008 	str.w	r0, [r8, #8]
   2a414:	6003      	str	r3, [r0, #0]
   2a416:	f04f 0900 	mov.w	r9, #0
   2a41a:	07eb      	lsls	r3, r5, #31
   2a41c:	d50a      	bpl.n	2a434 <__pow5mult+0x84>
   2a41e:	4639      	mov	r1, r7
   2a420:	4622      	mov	r2, r4
   2a422:	4630      	mov	r0, r6
   2a424:	f7ff ff1c 	bl	2a260 <__multiply>
   2a428:	4680      	mov	r8, r0
   2a42a:	4639      	mov	r1, r7
   2a42c:	4630      	mov	r0, r6
   2a42e:	4647      	mov	r7, r8
   2a430:	f7ff fe96 	bl	2a160 <_Bfree>
   2a434:	106d      	asrs	r5, r5, #1
   2a436:	d00b      	beq.n	2a450 <__pow5mult+0xa0>
   2a438:	6820      	ldr	r0, [r4, #0]
   2a43a:	b938      	cbnz	r0, 2a44c <__pow5mult+0x9c>
   2a43c:	4622      	mov	r2, r4
   2a43e:	4621      	mov	r1, r4
   2a440:	4630      	mov	r0, r6
   2a442:	f7ff ff0d 	bl	2a260 <__multiply>
   2a446:	6020      	str	r0, [r4, #0]
   2a448:	f8c0 9000 	str.w	r9, [r0]
   2a44c:	4604      	mov	r4, r0
   2a44e:	e7e4      	b.n	2a41a <__pow5mult+0x6a>
   2a450:	4638      	mov	r0, r7
   2a452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a456:	bf00      	nop
   2a458:	0002ef18 	.word	0x0002ef18
   2a45c:	00031b3d 	.word	0x00031b3d
   2a460:	00031d19 	.word	0x00031d19

0002a464 <__lshift>:
   2a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a468:	460c      	mov	r4, r1
   2a46a:	4607      	mov	r7, r0
   2a46c:	4691      	mov	r9, r2
   2a46e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2a472:	6923      	ldr	r3, [r4, #16]
   2a474:	6849      	ldr	r1, [r1, #4]
   2a476:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2a47a:	68a3      	ldr	r3, [r4, #8]
   2a47c:	f108 0601 	add.w	r6, r8, #1
   2a480:	42b3      	cmp	r3, r6
   2a482:	db0b      	blt.n	2a49c <__lshift+0x38>
   2a484:	4638      	mov	r0, r7
   2a486:	f7ff fe2b 	bl	2a0e0 <_Balloc>
   2a48a:	4605      	mov	r5, r0
   2a48c:	b948      	cbnz	r0, 2a4a2 <__lshift+0x3e>
   2a48e:	4602      	mov	r2, r0
   2a490:	4b2a      	ldr	r3, [pc, #168]	; (2a53c <__lshift+0xd8>)
   2a492:	f240 11d9 	movw	r1, #473	; 0x1d9
   2a496:	482a      	ldr	r0, [pc, #168]	; (2a540 <__lshift+0xdc>)
   2a498:	f7ff fd80 	bl	29f9c <__assert_func>
   2a49c:	3101      	adds	r1, #1
   2a49e:	005b      	lsls	r3, r3, #1
   2a4a0:	e7ee      	b.n	2a480 <__lshift+0x1c>
   2a4a2:	2300      	movs	r3, #0
   2a4a4:	f100 0114 	add.w	r1, r0, #20
   2a4a8:	f100 0210 	add.w	r2, r0, #16
   2a4ac:	4618      	mov	r0, r3
   2a4ae:	4553      	cmp	r3, sl
   2a4b0:	db37      	blt.n	2a522 <__lshift+0xbe>
   2a4b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2a4b6:	f104 0314 	add.w	r3, r4, #20
   2a4ba:	6920      	ldr	r0, [r4, #16]
   2a4bc:	f019 091f 	ands.w	r9, r9, #31
   2a4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2a4c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2a4c8:	d02f      	beq.n	2a52a <__lshift+0xc6>
   2a4ca:	f1c9 0e20 	rsb	lr, r9, #32
   2a4ce:	468a      	mov	sl, r1
   2a4d0:	f04f 0c00 	mov.w	ip, #0
   2a4d4:	681a      	ldr	r2, [r3, #0]
   2a4d6:	fa02 f209 	lsl.w	r2, r2, r9
   2a4da:	ea42 020c 	orr.w	r2, r2, ip
   2a4de:	f84a 2b04 	str.w	r2, [sl], #4
   2a4e2:	f853 2b04 	ldr.w	r2, [r3], #4
   2a4e6:	4298      	cmp	r0, r3
   2a4e8:	fa22 fc0e 	lsr.w	ip, r2, lr
   2a4ec:	d8f2      	bhi.n	2a4d4 <__lshift+0x70>
   2a4ee:	1b03      	subs	r3, r0, r4
   2a4f0:	f104 0215 	add.w	r2, r4, #21
   2a4f4:	3b15      	subs	r3, #21
   2a4f6:	f023 0303 	bic.w	r3, r3, #3
   2a4fa:	3304      	adds	r3, #4
   2a4fc:	4290      	cmp	r0, r2
   2a4fe:	bf38      	it	cc
   2a500:	2304      	movcc	r3, #4
   2a502:	f841 c003 	str.w	ip, [r1, r3]
   2a506:	f1bc 0f00 	cmp.w	ip, #0
   2a50a:	d001      	beq.n	2a510 <__lshift+0xac>
   2a50c:	f108 0602 	add.w	r6, r8, #2
   2a510:	3e01      	subs	r6, #1
   2a512:	4638      	mov	r0, r7
   2a514:	4621      	mov	r1, r4
   2a516:	612e      	str	r6, [r5, #16]
   2a518:	f7ff fe22 	bl	2a160 <_Bfree>
   2a51c:	4628      	mov	r0, r5
   2a51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a522:	3301      	adds	r3, #1
   2a524:	f842 0f04 	str.w	r0, [r2, #4]!
   2a528:	e7c1      	b.n	2a4ae <__lshift+0x4a>
   2a52a:	3904      	subs	r1, #4
   2a52c:	f853 2b04 	ldr.w	r2, [r3], #4
   2a530:	4298      	cmp	r0, r3
   2a532:	f841 2f04 	str.w	r2, [r1, #4]!
   2a536:	d8f9      	bhi.n	2a52c <__lshift+0xc8>
   2a538:	e7ea      	b.n	2a510 <__lshift+0xac>
   2a53a:	bf00      	nop
   2a53c:	00031d08 	.word	0x00031d08
   2a540:	00031d19 	.word	0x00031d19

0002a544 <__mdiff>:
   2a544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a548:	460d      	mov	r5, r1
   2a54a:	4607      	mov	r7, r0
   2a54c:	4611      	mov	r1, r2
   2a54e:	4614      	mov	r4, r2
   2a550:	4628      	mov	r0, r5
   2a552:	f003 fe0b 	bl	2e16c <__mcmp>
   2a556:	1e06      	subs	r6, r0, #0
   2a558:	d111      	bne.n	2a57e <__mdiff+0x3a>
   2a55a:	4631      	mov	r1, r6
   2a55c:	4638      	mov	r0, r7
   2a55e:	f7ff fdbf 	bl	2a0e0 <_Balloc>
   2a562:	4602      	mov	r2, r0
   2a564:	b928      	cbnz	r0, 2a572 <__mdiff+0x2e>
   2a566:	4b3c      	ldr	r3, [pc, #240]	; (2a658 <__mdiff+0x114>)
   2a568:	f240 2132 	movw	r1, #562	; 0x232
   2a56c:	483b      	ldr	r0, [pc, #236]	; (2a65c <__mdiff+0x118>)
   2a56e:	f7ff fd15 	bl	29f9c <__assert_func>
   2a572:	2301      	movs	r3, #1
   2a574:	e9c0 3604 	strd	r3, r6, [r0, #16]
   2a578:	4610      	mov	r0, r2
   2a57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a57e:	bfa4      	itt	ge
   2a580:	4623      	movge	r3, r4
   2a582:	462c      	movge	r4, r5
   2a584:	4638      	mov	r0, r7
   2a586:	bfa8      	it	ge
   2a588:	2600      	movge	r6, #0
   2a58a:	6861      	ldr	r1, [r4, #4]
   2a58c:	bfac      	ite	ge
   2a58e:	461d      	movge	r5, r3
   2a590:	2601      	movlt	r6, #1
   2a592:	f7ff fda5 	bl	2a0e0 <_Balloc>
   2a596:	4602      	mov	r2, r0
   2a598:	b918      	cbnz	r0, 2a5a2 <__mdiff+0x5e>
   2a59a:	4b2f      	ldr	r3, [pc, #188]	; (2a658 <__mdiff+0x114>)
   2a59c:	f44f 7110 	mov.w	r1, #576	; 0x240
   2a5a0:	e7e4      	b.n	2a56c <__mdiff+0x28>
   2a5a2:	6927      	ldr	r7, [r4, #16]
   2a5a4:	f105 0914 	add.w	r9, r5, #20
   2a5a8:	60c6      	str	r6, [r0, #12]
   2a5aa:	f102 0814 	add.w	r8, r2, #20
   2a5ae:	f104 0014 	add.w	r0, r4, #20
   2a5b2:	692e      	ldr	r6, [r5, #16]
   2a5b4:	3410      	adds	r4, #16
   2a5b6:	46c2      	mov	sl, r8
   2a5b8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
   2a5bc:	f04f 0c00 	mov.w	ip, #0
   2a5c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   2a5c4:	f854 bf04 	ldr.w	fp, [r4, #4]!
   2a5c8:	f859 3b04 	ldr.w	r3, [r9], #4
   2a5cc:	fa1f f18b 	uxth.w	r1, fp
   2a5d0:	454e      	cmp	r6, r9
   2a5d2:	448c      	add	ip, r1
   2a5d4:	b299      	uxth	r1, r3
   2a5d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2a5da:	ebac 0101 	sub.w	r1, ip, r1
   2a5de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   2a5e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2a5e6:	b289      	uxth	r1, r1
   2a5e8:	ea4f 4c23 	mov.w	ip, r3, asr #16
   2a5ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2a5f0:	f84a 3b04 	str.w	r3, [sl], #4
   2a5f4:	d8e6      	bhi.n	2a5c4 <__mdiff+0x80>
   2a5f6:	1b73      	subs	r3, r6, r5
   2a5f8:	3515      	adds	r5, #21
   2a5fa:	3b15      	subs	r3, #21
   2a5fc:	f023 0303 	bic.w	r3, r3, #3
   2a600:	3304      	adds	r3, #4
   2a602:	42ae      	cmp	r6, r5
   2a604:	bf38      	it	cc
   2a606:	2304      	movcc	r3, #4
   2a608:	4418      	add	r0, r3
   2a60a:	4443      	add	r3, r8
   2a60c:	4605      	mov	r5, r0
   2a60e:	461e      	mov	r6, r3
   2a610:	4575      	cmp	r5, lr
   2a612:	d30e      	bcc.n	2a632 <__mdiff+0xee>
   2a614:	f10e 0103 	add.w	r1, lr, #3
   2a618:	1a09      	subs	r1, r1, r0
   2a61a:	3803      	subs	r0, #3
   2a61c:	f021 0103 	bic.w	r1, r1, #3
   2a620:	4586      	cmp	lr, r0
   2a622:	bf38      	it	cc
   2a624:	2100      	movcc	r1, #0
   2a626:	4419      	add	r1, r3
   2a628:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   2a62c:	b18b      	cbz	r3, 2a652 <__mdiff+0x10e>
   2a62e:	6117      	str	r7, [r2, #16]
   2a630:	e7a2      	b.n	2a578 <__mdiff+0x34>
   2a632:	f855 8b04 	ldr.w	r8, [r5], #4
   2a636:	fa1f f188 	uxth.w	r1, r8
   2a63a:	4461      	add	r1, ip
   2a63c:	140c      	asrs	r4, r1, #16
   2a63e:	b289      	uxth	r1, r1
   2a640:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   2a644:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   2a648:	ea4f 4c24 	mov.w	ip, r4, asr #16
   2a64c:	f846 1b04 	str.w	r1, [r6], #4
   2a650:	e7de      	b.n	2a610 <__mdiff+0xcc>
   2a652:	3f01      	subs	r7, #1
   2a654:	e7e8      	b.n	2a628 <__mdiff+0xe4>
   2a656:	bf00      	nop
   2a658:	00031d08 	.word	0x00031d08
   2a65c:	00031d19 	.word	0x00031d19

0002a660 <__d2b>:
   2a660:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a664:	2101      	movs	r1, #1
   2a666:	4690      	mov	r8, r2
   2a668:	461d      	mov	r5, r3
   2a66a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   2a66e:	f7ff fd37 	bl	2a0e0 <_Balloc>
   2a672:	4604      	mov	r4, r0
   2a674:	b930      	cbnz	r0, 2a684 <__d2b+0x24>
   2a676:	4602      	mov	r2, r0
   2a678:	4b25      	ldr	r3, [pc, #148]	; (2a710 <__d2b+0xb0>)
   2a67a:	f240 310a 	movw	r1, #778	; 0x30a
   2a67e:	4825      	ldr	r0, [pc, #148]	; (2a714 <__d2b+0xb4>)
   2a680:	f7ff fc8c 	bl	29f9c <__assert_func>
   2a684:	f3c5 0313 	ubfx	r3, r5, #0, #20
   2a688:	f3c5 550a 	ubfx	r5, r5, #20, #11
   2a68c:	bb2d      	cbnz	r5, 2a6da <__d2b+0x7a>
   2a68e:	9301      	str	r3, [sp, #4]
   2a690:	f1b8 0300 	subs.w	r3, r8, #0
   2a694:	d026      	beq.n	2a6e4 <__d2b+0x84>
   2a696:	4668      	mov	r0, sp
   2a698:	9300      	str	r3, [sp, #0]
   2a69a:	f003 fd3a 	bl	2e112 <__lo0bits>
   2a69e:	9900      	ldr	r1, [sp, #0]
   2a6a0:	b1f0      	cbz	r0, 2a6e0 <__d2b+0x80>
   2a6a2:	9a01      	ldr	r2, [sp, #4]
   2a6a4:	f1c0 0320 	rsb	r3, r0, #32
   2a6a8:	fa02 f303 	lsl.w	r3, r2, r3
   2a6ac:	40c2      	lsrs	r2, r0
   2a6ae:	430b      	orrs	r3, r1
   2a6b0:	9201      	str	r2, [sp, #4]
   2a6b2:	6163      	str	r3, [r4, #20]
   2a6b4:	9b01      	ldr	r3, [sp, #4]
   2a6b6:	2b00      	cmp	r3, #0
   2a6b8:	61a3      	str	r3, [r4, #24]
   2a6ba:	bf14      	ite	ne
   2a6bc:	2102      	movne	r1, #2
   2a6be:	2101      	moveq	r1, #1
   2a6c0:	6121      	str	r1, [r4, #16]
   2a6c2:	b1c5      	cbz	r5, 2a6f6 <__d2b+0x96>
   2a6c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2a6c8:	4405      	add	r5, r0
   2a6ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2a6ce:	603d      	str	r5, [r7, #0]
   2a6d0:	6030      	str	r0, [r6, #0]
   2a6d2:	4620      	mov	r0, r4
   2a6d4:	b002      	add	sp, #8
   2a6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a6da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2a6de:	e7d6      	b.n	2a68e <__d2b+0x2e>
   2a6e0:	6161      	str	r1, [r4, #20]
   2a6e2:	e7e7      	b.n	2a6b4 <__d2b+0x54>
   2a6e4:	a801      	add	r0, sp, #4
   2a6e6:	f003 fd14 	bl	2e112 <__lo0bits>
   2a6ea:	9b01      	ldr	r3, [sp, #4]
   2a6ec:	2101      	movs	r1, #1
   2a6ee:	3020      	adds	r0, #32
   2a6f0:	6163      	str	r3, [r4, #20]
   2a6f2:	6121      	str	r1, [r4, #16]
   2a6f4:	e7e5      	b.n	2a6c2 <__d2b+0x62>
   2a6f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   2a6fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2a6fe:	6038      	str	r0, [r7, #0]
   2a700:	6918      	ldr	r0, [r3, #16]
   2a702:	f003 fce6 	bl	2e0d2 <__hi0bits>
   2a706:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   2a70a:	6031      	str	r1, [r6, #0]
   2a70c:	e7e1      	b.n	2a6d2 <__d2b+0x72>
   2a70e:	bf00      	nop
   2a710:	00031d08 	.word	0x00031d08
   2a714:	00031d19 	.word	0x00031d19

0002a718 <_svfiprintf_r>:
   2a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a71c:	4698      	mov	r8, r3
   2a71e:	898b      	ldrh	r3, [r1, #12]
   2a720:	b09d      	sub	sp, #116	; 0x74
   2a722:	4607      	mov	r7, r0
   2a724:	061b      	lsls	r3, r3, #24
   2a726:	460d      	mov	r5, r1
   2a728:	4614      	mov	r4, r2
   2a72a:	d50e      	bpl.n	2a74a <_svfiprintf_r+0x32>
   2a72c:	690b      	ldr	r3, [r1, #16]
   2a72e:	b963      	cbnz	r3, 2a74a <_svfiprintf_r+0x32>
   2a730:	2140      	movs	r1, #64	; 0x40
   2a732:	f7fe fc03 	bl	28f3c <_malloc_r>
   2a736:	6028      	str	r0, [r5, #0]
   2a738:	6128      	str	r0, [r5, #16]
   2a73a:	b920      	cbnz	r0, 2a746 <_svfiprintf_r+0x2e>
   2a73c:	230c      	movs	r3, #12
   2a73e:	603b      	str	r3, [r7, #0]
   2a740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a744:	e0d1      	b.n	2a8ea <_svfiprintf_r+0x1d2>
   2a746:	2340      	movs	r3, #64	; 0x40
   2a748:	616b      	str	r3, [r5, #20]
   2a74a:	2300      	movs	r3, #0
   2a74c:	f8cd 800c 	str.w	r8, [sp, #12]
   2a750:	f04f 0901 	mov.w	r9, #1
   2a754:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2a904 <_svfiprintf_r+0x1ec>
   2a758:	9309      	str	r3, [sp, #36]	; 0x24
   2a75a:	2320      	movs	r3, #32
   2a75c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2a760:	2330      	movs	r3, #48	; 0x30
   2a762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2a766:	4623      	mov	r3, r4
   2a768:	469a      	mov	sl, r3
   2a76a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2a76e:	b10a      	cbz	r2, 2a774 <_svfiprintf_r+0x5c>
   2a770:	2a25      	cmp	r2, #37	; 0x25
   2a772:	d1f9      	bne.n	2a768 <_svfiprintf_r+0x50>
   2a774:	ebba 0b04 	subs.w	fp, sl, r4
   2a778:	d00b      	beq.n	2a792 <_svfiprintf_r+0x7a>
   2a77a:	465b      	mov	r3, fp
   2a77c:	4622      	mov	r2, r4
   2a77e:	4629      	mov	r1, r5
   2a780:	4638      	mov	r0, r7
   2a782:	f003 fd22 	bl	2e1ca <__ssputs_r>
   2a786:	3001      	adds	r0, #1
   2a788:	f000 80aa 	beq.w	2a8e0 <_svfiprintf_r+0x1c8>
   2a78c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a78e:	445a      	add	r2, fp
   2a790:	9209      	str	r2, [sp, #36]	; 0x24
   2a792:	f89a 3000 	ldrb.w	r3, [sl]
   2a796:	2b00      	cmp	r3, #0
   2a798:	f000 80a2 	beq.w	2a8e0 <_svfiprintf_r+0x1c8>
   2a79c:	2300      	movs	r3, #0
   2a79e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a7a2:	f10a 0a01 	add.w	sl, sl, #1
   2a7a6:	9304      	str	r3, [sp, #16]
   2a7a8:	9307      	str	r3, [sp, #28]
   2a7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2a7ae:	931a      	str	r3, [sp, #104]	; 0x68
   2a7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2a7b4:	4654      	mov	r4, sl
   2a7b6:	2205      	movs	r2, #5
   2a7b8:	4852      	ldr	r0, [pc, #328]	; (2a904 <_svfiprintf_r+0x1ec>)
   2a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a7be:	f003 f9e0 	bl	2db82 <memchr>
   2a7c2:	9a04      	ldr	r2, [sp, #16]
   2a7c4:	b9d8      	cbnz	r0, 2a7fe <_svfiprintf_r+0xe6>
   2a7c6:	06d0      	lsls	r0, r2, #27
   2a7c8:	bf44      	itt	mi
   2a7ca:	2320      	movmi	r3, #32
   2a7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a7d0:	0711      	lsls	r1, r2, #28
   2a7d2:	bf44      	itt	mi
   2a7d4:	232b      	movmi	r3, #43	; 0x2b
   2a7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2a7da:	f89a 3000 	ldrb.w	r3, [sl]
   2a7de:	2b2a      	cmp	r3, #42	; 0x2a
   2a7e0:	d015      	beq.n	2a80e <_svfiprintf_r+0xf6>
   2a7e2:	9a07      	ldr	r2, [sp, #28]
   2a7e4:	4654      	mov	r4, sl
   2a7e6:	2000      	movs	r0, #0
   2a7e8:	f04f 0c0a 	mov.w	ip, #10
   2a7ec:	4621      	mov	r1, r4
   2a7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a7f2:	3b30      	subs	r3, #48	; 0x30
   2a7f4:	2b09      	cmp	r3, #9
   2a7f6:	d94e      	bls.n	2a896 <_svfiprintf_r+0x17e>
   2a7f8:	b1b0      	cbz	r0, 2a828 <_svfiprintf_r+0x110>
   2a7fa:	9207      	str	r2, [sp, #28]
   2a7fc:	e014      	b.n	2a828 <_svfiprintf_r+0x110>
   2a7fe:	eba0 0308 	sub.w	r3, r0, r8
   2a802:	46a2      	mov	sl, r4
   2a804:	fa09 f303 	lsl.w	r3, r9, r3
   2a808:	4313      	orrs	r3, r2
   2a80a:	9304      	str	r3, [sp, #16]
   2a80c:	e7d2      	b.n	2a7b4 <_svfiprintf_r+0x9c>
   2a80e:	9b03      	ldr	r3, [sp, #12]
   2a810:	1d19      	adds	r1, r3, #4
   2a812:	681b      	ldr	r3, [r3, #0]
   2a814:	2b00      	cmp	r3, #0
   2a816:	9103      	str	r1, [sp, #12]
   2a818:	bfbb      	ittet	lt
   2a81a:	425b      	neglt	r3, r3
   2a81c:	f042 0202 	orrlt.w	r2, r2, #2
   2a820:	9307      	strge	r3, [sp, #28]
   2a822:	9307      	strlt	r3, [sp, #28]
   2a824:	bfb8      	it	lt
   2a826:	9204      	strlt	r2, [sp, #16]
   2a828:	7823      	ldrb	r3, [r4, #0]
   2a82a:	2b2e      	cmp	r3, #46	; 0x2e
   2a82c:	d10c      	bne.n	2a848 <_svfiprintf_r+0x130>
   2a82e:	7863      	ldrb	r3, [r4, #1]
   2a830:	2b2a      	cmp	r3, #42	; 0x2a
   2a832:	d135      	bne.n	2a8a0 <_svfiprintf_r+0x188>
   2a834:	9b03      	ldr	r3, [sp, #12]
   2a836:	3402      	adds	r4, #2
   2a838:	1d1a      	adds	r2, r3, #4
   2a83a:	681b      	ldr	r3, [r3, #0]
   2a83c:	2b00      	cmp	r3, #0
   2a83e:	9203      	str	r2, [sp, #12]
   2a840:	bfb8      	it	lt
   2a842:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2a846:	9305      	str	r3, [sp, #20]
   2a848:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 2a908 <_svfiprintf_r+0x1f0>
   2a84c:	2203      	movs	r2, #3
   2a84e:	7821      	ldrb	r1, [r4, #0]
   2a850:	4650      	mov	r0, sl
   2a852:	f003 f996 	bl	2db82 <memchr>
   2a856:	b140      	cbz	r0, 2a86a <_svfiprintf_r+0x152>
   2a858:	2340      	movs	r3, #64	; 0x40
   2a85a:	eba0 000a 	sub.w	r0, r0, sl
   2a85e:	3401      	adds	r4, #1
   2a860:	fa03 f000 	lsl.w	r0, r3, r0
   2a864:	9b04      	ldr	r3, [sp, #16]
   2a866:	4303      	orrs	r3, r0
   2a868:	9304      	str	r3, [sp, #16]
   2a86a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a86e:	2206      	movs	r2, #6
   2a870:	4826      	ldr	r0, [pc, #152]	; (2a90c <_svfiprintf_r+0x1f4>)
   2a872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2a876:	f003 f984 	bl	2db82 <memchr>
   2a87a:	2800      	cmp	r0, #0
   2a87c:	d038      	beq.n	2a8f0 <_svfiprintf_r+0x1d8>
   2a87e:	4b24      	ldr	r3, [pc, #144]	; (2a910 <_svfiprintf_r+0x1f8>)
   2a880:	bb1b      	cbnz	r3, 2a8ca <_svfiprintf_r+0x1b2>
   2a882:	9b03      	ldr	r3, [sp, #12]
   2a884:	3307      	adds	r3, #7
   2a886:	f023 0307 	bic.w	r3, r3, #7
   2a88a:	3308      	adds	r3, #8
   2a88c:	9303      	str	r3, [sp, #12]
   2a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a890:	4433      	add	r3, r6
   2a892:	9309      	str	r3, [sp, #36]	; 0x24
   2a894:	e767      	b.n	2a766 <_svfiprintf_r+0x4e>
   2a896:	fb0c 3202 	mla	r2, ip, r2, r3
   2a89a:	460c      	mov	r4, r1
   2a89c:	2001      	movs	r0, #1
   2a89e:	e7a5      	b.n	2a7ec <_svfiprintf_r+0xd4>
   2a8a0:	2300      	movs	r3, #0
   2a8a2:	3401      	adds	r4, #1
   2a8a4:	f04f 0c0a 	mov.w	ip, #10
   2a8a8:	4619      	mov	r1, r3
   2a8aa:	9305      	str	r3, [sp, #20]
   2a8ac:	4620      	mov	r0, r4
   2a8ae:	f810 2b01 	ldrb.w	r2, [r0], #1
   2a8b2:	3a30      	subs	r2, #48	; 0x30
   2a8b4:	2a09      	cmp	r2, #9
   2a8b6:	d903      	bls.n	2a8c0 <_svfiprintf_r+0x1a8>
   2a8b8:	2b00      	cmp	r3, #0
   2a8ba:	d0c5      	beq.n	2a848 <_svfiprintf_r+0x130>
   2a8bc:	9105      	str	r1, [sp, #20]
   2a8be:	e7c3      	b.n	2a848 <_svfiprintf_r+0x130>
   2a8c0:	fb0c 2101 	mla	r1, ip, r1, r2
   2a8c4:	4604      	mov	r4, r0
   2a8c6:	2301      	movs	r3, #1
   2a8c8:	e7f0      	b.n	2a8ac <_svfiprintf_r+0x194>
   2a8ca:	ab03      	add	r3, sp, #12
   2a8cc:	462a      	mov	r2, r5
   2a8ce:	a904      	add	r1, sp, #16
   2a8d0:	4638      	mov	r0, r7
   2a8d2:	9300      	str	r3, [sp, #0]
   2a8d4:	4b0f      	ldr	r3, [pc, #60]	; (2a914 <_svfiprintf_r+0x1fc>)
   2a8d6:	f7fe fba5 	bl	29024 <_printf_float>
   2a8da:	1c42      	adds	r2, r0, #1
   2a8dc:	4606      	mov	r6, r0
   2a8de:	d1d6      	bne.n	2a88e <_svfiprintf_r+0x176>
   2a8e0:	89ab      	ldrh	r3, [r5, #12]
   2a8e2:	065b      	lsls	r3, r3, #25
   2a8e4:	f53f af2c 	bmi.w	2a740 <_svfiprintf_r+0x28>
   2a8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a8ea:	b01d      	add	sp, #116	; 0x74
   2a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8f0:	ab03      	add	r3, sp, #12
   2a8f2:	462a      	mov	r2, r5
   2a8f4:	a904      	add	r1, sp, #16
   2a8f6:	4638      	mov	r0, r7
   2a8f8:	9300      	str	r3, [sp, #0]
   2a8fa:	4b06      	ldr	r3, [pc, #24]	; (2a914 <_svfiprintf_r+0x1fc>)
   2a8fc:	f7fe fdbc 	bl	29478 <_printf_i>
   2a900:	e7eb      	b.n	2a8da <_svfiprintf_r+0x1c2>
   2a902:	bf00      	nop
   2a904:	00031d98 	.word	0x00031d98
   2a908:	00031d9e 	.word	0x00031d9e
   2a90c:	00031da2 	.word	0x00031da2
   2a910:	00029025 	.word	0x00029025
   2a914:	0002e1cb 	.word	0x0002e1cb

0002a918 <__ssvfiscanf_r>:
   2a918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a91c:	460c      	mov	r4, r1
   2a91e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2a922:	2100      	movs	r1, #0
   2a924:	4606      	mov	r6, r0
   2a926:	f10d 0804 	add.w	r8, sp, #4
   2a92a:	4fa8      	ldr	r7, [pc, #672]	; (2abcc <__ssvfiscanf_r+0x2b4>)
   2a92c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 2abd0 <__ssvfiscanf_r+0x2b8>
   2a930:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2a934:	9300      	str	r3, [sp, #0]
   2a936:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2a93a:	49a6      	ldr	r1, [pc, #664]	; (2abd4 <__ssvfiscanf_r+0x2bc>)
   2a93c:	91a0      	str	r1, [sp, #640]	; 0x280
   2a93e:	49a6      	ldr	r1, [pc, #664]	; (2abd8 <__ssvfiscanf_r+0x2c0>)
   2a940:	91a1      	str	r1, [sp, #644]	; 0x284
   2a942:	7813      	ldrb	r3, [r2, #0]
   2a944:	2b00      	cmp	r3, #0
   2a946:	f000 815e 	beq.w	2ac06 <__ssvfiscanf_r+0x2ee>
   2a94a:	5dd9      	ldrb	r1, [r3, r7]
   2a94c:	1c55      	adds	r5, r2, #1
   2a94e:	f011 0108 	ands.w	r1, r1, #8
   2a952:	d019      	beq.n	2a988 <__ssvfiscanf_r+0x70>
   2a954:	6863      	ldr	r3, [r4, #4]
   2a956:	2b00      	cmp	r3, #0
   2a958:	dd0f      	ble.n	2a97a <__ssvfiscanf_r+0x62>
   2a95a:	6823      	ldr	r3, [r4, #0]
   2a95c:	781a      	ldrb	r2, [r3, #0]
   2a95e:	5cba      	ldrb	r2, [r7, r2]
   2a960:	0712      	lsls	r2, r2, #28
   2a962:	d401      	bmi.n	2a968 <__ssvfiscanf_r+0x50>
   2a964:	462a      	mov	r2, r5
   2a966:	e7ec      	b.n	2a942 <__ssvfiscanf_r+0x2a>
   2a968:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2a96a:	3301      	adds	r3, #1
   2a96c:	3201      	adds	r2, #1
   2a96e:	6023      	str	r3, [r4, #0]
   2a970:	9245      	str	r2, [sp, #276]	; 0x114
   2a972:	6862      	ldr	r2, [r4, #4]
   2a974:	3a01      	subs	r2, #1
   2a976:	6062      	str	r2, [r4, #4]
   2a978:	e7ec      	b.n	2a954 <__ssvfiscanf_r+0x3c>
   2a97a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2a97c:	4621      	mov	r1, r4
   2a97e:	4630      	mov	r0, r6
   2a980:	4798      	blx	r3
   2a982:	2800      	cmp	r0, #0
   2a984:	d0e9      	beq.n	2a95a <__ssvfiscanf_r+0x42>
   2a986:	e7ed      	b.n	2a964 <__ssvfiscanf_r+0x4c>
   2a988:	2b25      	cmp	r3, #37	; 0x25
   2a98a:	d012      	beq.n	2a9b2 <__ssvfiscanf_r+0x9a>
   2a98c:	469a      	mov	sl, r3
   2a98e:	6863      	ldr	r3, [r4, #4]
   2a990:	2b00      	cmp	r3, #0
   2a992:	f340 8094 	ble.w	2aabe <__ssvfiscanf_r+0x1a6>
   2a996:	6822      	ldr	r2, [r4, #0]
   2a998:	7813      	ldrb	r3, [r2, #0]
   2a99a:	4553      	cmp	r3, sl
   2a99c:	f040 8133 	bne.w	2ac06 <__ssvfiscanf_r+0x2ee>
   2a9a0:	6863      	ldr	r3, [r4, #4]
   2a9a2:	3201      	adds	r2, #1
   2a9a4:	3b01      	subs	r3, #1
   2a9a6:	6022      	str	r2, [r4, #0]
   2a9a8:	6063      	str	r3, [r4, #4]
   2a9aa:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2a9ac:	3301      	adds	r3, #1
   2a9ae:	9345      	str	r3, [sp, #276]	; 0x114
   2a9b0:	e7d8      	b.n	2a964 <__ssvfiscanf_r+0x4c>
   2a9b2:	9141      	str	r1, [sp, #260]	; 0x104
   2a9b4:	9143      	str	r1, [sp, #268]	; 0x10c
   2a9b6:	7853      	ldrb	r3, [r2, #1]
   2a9b8:	2b2a      	cmp	r3, #42	; 0x2a
   2a9ba:	bf04      	itt	eq
   2a9bc:	2310      	moveq	r3, #16
   2a9be:	1c95      	addeq	r5, r2, #2
   2a9c0:	f04f 020a 	mov.w	r2, #10
   2a9c4:	bf08      	it	eq
   2a9c6:	9341      	streq	r3, [sp, #260]	; 0x104
   2a9c8:	46aa      	mov	sl, r5
   2a9ca:	f81a 1b01 	ldrb.w	r1, [sl], #1
   2a9ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2a9d2:	2b09      	cmp	r3, #9
   2a9d4:	d91d      	bls.n	2aa12 <__ssvfiscanf_r+0xfa>
   2a9d6:	2203      	movs	r2, #3
   2a9d8:	487d      	ldr	r0, [pc, #500]	; (2abd0 <__ssvfiscanf_r+0x2b8>)
   2a9da:	f003 f8d2 	bl	2db82 <memchr>
   2a9de:	b140      	cbz	r0, 2a9f2 <__ssvfiscanf_r+0xda>
   2a9e0:	2301      	movs	r3, #1
   2a9e2:	eba0 0009 	sub.w	r0, r0, r9
   2a9e6:	4655      	mov	r5, sl
   2a9e8:	fa03 f000 	lsl.w	r0, r3, r0
   2a9ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2a9ee:	4318      	orrs	r0, r3
   2a9f0:	9041      	str	r0, [sp, #260]	; 0x104
   2a9f2:	f815 3b01 	ldrb.w	r3, [r5], #1
   2a9f6:	2b78      	cmp	r3, #120	; 0x78
   2a9f8:	d806      	bhi.n	2aa08 <__ssvfiscanf_r+0xf0>
   2a9fa:	2b57      	cmp	r3, #87	; 0x57
   2a9fc:	d810      	bhi.n	2aa20 <__ssvfiscanf_r+0x108>
   2a9fe:	2b25      	cmp	r3, #37	; 0x25
   2aa00:	d0c4      	beq.n	2a98c <__ssvfiscanf_r+0x74>
   2aa02:	d857      	bhi.n	2aab4 <__ssvfiscanf_r+0x19c>
   2aa04:	2b00      	cmp	r3, #0
   2aa06:	d065      	beq.n	2aad4 <__ssvfiscanf_r+0x1bc>
   2aa08:	2303      	movs	r3, #3
   2aa0a:	9347      	str	r3, [sp, #284]	; 0x11c
   2aa0c:	230a      	movs	r3, #10
   2aa0e:	9342      	str	r3, [sp, #264]	; 0x108
   2aa10:	e072      	b.n	2aaf8 <__ssvfiscanf_r+0x1e0>
   2aa12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2aa14:	4655      	mov	r5, sl
   2aa16:	fb02 1103 	mla	r1, r2, r3, r1
   2aa1a:	3930      	subs	r1, #48	; 0x30
   2aa1c:	9143      	str	r1, [sp, #268]	; 0x10c
   2aa1e:	e7d3      	b.n	2a9c8 <__ssvfiscanf_r+0xb0>
   2aa20:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2aa24:	2a20      	cmp	r2, #32
   2aa26:	d8ef      	bhi.n	2aa08 <__ssvfiscanf_r+0xf0>
   2aa28:	a101      	add	r1, pc, #4	; (adr r1, 2aa30 <__ssvfiscanf_r+0x118>)
   2aa2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2aa2e:	bf00      	nop
   2aa30:	0002aae3 	.word	0x0002aae3
   2aa34:	0002aa09 	.word	0x0002aa09
   2aa38:	0002aa09 	.word	0x0002aa09
   2aa3c:	0002ab41 	.word	0x0002ab41
   2aa40:	0002aa09 	.word	0x0002aa09
   2aa44:	0002aa09 	.word	0x0002aa09
   2aa48:	0002aa09 	.word	0x0002aa09
   2aa4c:	0002aa09 	.word	0x0002aa09
   2aa50:	0002aa09 	.word	0x0002aa09
   2aa54:	0002aa09 	.word	0x0002aa09
   2aa58:	0002aa09 	.word	0x0002aa09
   2aa5c:	0002ab57 	.word	0x0002ab57
   2aa60:	0002ab2d 	.word	0x0002ab2d
   2aa64:	0002aabb 	.word	0x0002aabb
   2aa68:	0002aabb 	.word	0x0002aabb
   2aa6c:	0002aabb 	.word	0x0002aabb
   2aa70:	0002aa09 	.word	0x0002aa09
   2aa74:	0002ab31 	.word	0x0002ab31
   2aa78:	0002aa09 	.word	0x0002aa09
   2aa7c:	0002aa09 	.word	0x0002aa09
   2aa80:	0002aa09 	.word	0x0002aa09
   2aa84:	0002aa09 	.word	0x0002aa09
   2aa88:	0002ab67 	.word	0x0002ab67
   2aa8c:	0002ab39 	.word	0x0002ab39
   2aa90:	0002aadb 	.word	0x0002aadb
   2aa94:	0002aa09 	.word	0x0002aa09
   2aa98:	0002aa09 	.word	0x0002aa09
   2aa9c:	0002ab63 	.word	0x0002ab63
   2aaa0:	0002aa09 	.word	0x0002aa09
   2aaa4:	0002ab2d 	.word	0x0002ab2d
   2aaa8:	0002aa09 	.word	0x0002aa09
   2aaac:	0002aa09 	.word	0x0002aa09
   2aab0:	0002aae3 	.word	0x0002aae3
   2aab4:	3b45      	subs	r3, #69	; 0x45
   2aab6:	2b02      	cmp	r3, #2
   2aab8:	d8a6      	bhi.n	2aa08 <__ssvfiscanf_r+0xf0>
   2aaba:	2305      	movs	r3, #5
   2aabc:	e01b      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2aabe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2aac0:	4621      	mov	r1, r4
   2aac2:	4630      	mov	r0, r6
   2aac4:	4798      	blx	r3
   2aac6:	2800      	cmp	r0, #0
   2aac8:	f43f af65 	beq.w	2a996 <__ssvfiscanf_r+0x7e>
   2aacc:	9844      	ldr	r0, [sp, #272]	; 0x110
   2aace:	2800      	cmp	r0, #0
   2aad0:	f040 808f 	bne.w	2abf2 <__ssvfiscanf_r+0x2da>
   2aad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aad8:	e091      	b.n	2abfe <__ssvfiscanf_r+0x2e6>
   2aada:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2aadc:	f042 0220 	orr.w	r2, r2, #32
   2aae0:	9241      	str	r2, [sp, #260]	; 0x104
   2aae2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2aae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2aae8:	9241      	str	r2, [sp, #260]	; 0x104
   2aaea:	2210      	movs	r2, #16
   2aaec:	2b6f      	cmp	r3, #111	; 0x6f
   2aaee:	9242      	str	r2, [sp, #264]	; 0x108
   2aaf0:	bf34      	ite	cc
   2aaf2:	2303      	movcc	r3, #3
   2aaf4:	2304      	movcs	r3, #4
   2aaf6:	9347      	str	r3, [sp, #284]	; 0x11c
   2aaf8:	6863      	ldr	r3, [r4, #4]
   2aafa:	2b00      	cmp	r3, #0
   2aafc:	dd43      	ble.n	2ab86 <__ssvfiscanf_r+0x26e>
   2aafe:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2ab00:	0659      	lsls	r1, r3, #25
   2ab02:	d404      	bmi.n	2ab0e <__ssvfiscanf_r+0x1f6>
   2ab04:	6823      	ldr	r3, [r4, #0]
   2ab06:	781a      	ldrb	r2, [r3, #0]
   2ab08:	5cba      	ldrb	r2, [r7, r2]
   2ab0a:	0712      	lsls	r2, r2, #28
   2ab0c:	d442      	bmi.n	2ab94 <__ssvfiscanf_r+0x27c>
   2ab0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2ab10:	2b02      	cmp	r3, #2
   2ab12:	dc51      	bgt.n	2abb8 <__ssvfiscanf_r+0x2a0>
   2ab14:	466b      	mov	r3, sp
   2ab16:	4622      	mov	r2, r4
   2ab18:	a941      	add	r1, sp, #260	; 0x104
   2ab1a:	4630      	mov	r0, r6
   2ab1c:	f000 f9a8 	bl	2ae70 <_scanf_chars>
   2ab20:	2801      	cmp	r0, #1
   2ab22:	d070      	beq.n	2ac06 <__ssvfiscanf_r+0x2ee>
   2ab24:	2802      	cmp	r0, #2
   2ab26:	f47f af1d 	bne.w	2a964 <__ssvfiscanf_r+0x4c>
   2ab2a:	e7cf      	b.n	2aacc <__ssvfiscanf_r+0x1b4>
   2ab2c:	220a      	movs	r2, #10
   2ab2e:	e7dd      	b.n	2aaec <__ssvfiscanf_r+0x1d4>
   2ab30:	2300      	movs	r3, #0
   2ab32:	9342      	str	r3, [sp, #264]	; 0x108
   2ab34:	2303      	movs	r3, #3
   2ab36:	e7de      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2ab38:	2308      	movs	r3, #8
   2ab3a:	9342      	str	r3, [sp, #264]	; 0x108
   2ab3c:	2304      	movs	r3, #4
   2ab3e:	e7da      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2ab40:	4629      	mov	r1, r5
   2ab42:	4640      	mov	r0, r8
   2ab44:	f003 fc1d 	bl	2e382 <__sccl>
   2ab48:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2ab4a:	4605      	mov	r5, r0
   2ab4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ab50:	9341      	str	r3, [sp, #260]	; 0x104
   2ab52:	2301      	movs	r3, #1
   2ab54:	e7cf      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2ab56:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2ab58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ab5c:	9341      	str	r3, [sp, #260]	; 0x104
   2ab5e:	2300      	movs	r3, #0
   2ab60:	e7c9      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2ab62:	2302      	movs	r3, #2
   2ab64:	e7c7      	b.n	2aaf6 <__ssvfiscanf_r+0x1de>
   2ab66:	9841      	ldr	r0, [sp, #260]	; 0x104
   2ab68:	06c3      	lsls	r3, r0, #27
   2ab6a:	f53f aefb 	bmi.w	2a964 <__ssvfiscanf_r+0x4c>
   2ab6e:	9b00      	ldr	r3, [sp, #0]
   2ab70:	f010 0f01 	tst.w	r0, #1
   2ab74:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2ab76:	f103 0104 	add.w	r1, r3, #4
   2ab7a:	9100      	str	r1, [sp, #0]
   2ab7c:	681b      	ldr	r3, [r3, #0]
   2ab7e:	bf14      	ite	ne
   2ab80:	801a      	strhne	r2, [r3, #0]
   2ab82:	601a      	streq	r2, [r3, #0]
   2ab84:	e6ee      	b.n	2a964 <__ssvfiscanf_r+0x4c>
   2ab86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2ab88:	4621      	mov	r1, r4
   2ab8a:	4630      	mov	r0, r6
   2ab8c:	4798      	blx	r3
   2ab8e:	2800      	cmp	r0, #0
   2ab90:	d0b5      	beq.n	2aafe <__ssvfiscanf_r+0x1e6>
   2ab92:	e79b      	b.n	2aacc <__ssvfiscanf_r+0x1b4>
   2ab94:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2ab96:	3201      	adds	r2, #1
   2ab98:	9245      	str	r2, [sp, #276]	; 0x114
   2ab9a:	6862      	ldr	r2, [r4, #4]
   2ab9c:	3a01      	subs	r2, #1
   2ab9e:	2a00      	cmp	r2, #0
   2aba0:	6062      	str	r2, [r4, #4]
   2aba2:	dd02      	ble.n	2abaa <__ssvfiscanf_r+0x292>
   2aba4:	3301      	adds	r3, #1
   2aba6:	6023      	str	r3, [r4, #0]
   2aba8:	e7ac      	b.n	2ab04 <__ssvfiscanf_r+0x1ec>
   2abaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2abac:	4621      	mov	r1, r4
   2abae:	4630      	mov	r0, r6
   2abb0:	4798      	blx	r3
   2abb2:	2800      	cmp	r0, #0
   2abb4:	d0a6      	beq.n	2ab04 <__ssvfiscanf_r+0x1ec>
   2abb6:	e789      	b.n	2aacc <__ssvfiscanf_r+0x1b4>
   2abb8:	2b04      	cmp	r3, #4
   2abba:	dc0f      	bgt.n	2abdc <__ssvfiscanf_r+0x2c4>
   2abbc:	466b      	mov	r3, sp
   2abbe:	4622      	mov	r2, r4
   2abc0:	a941      	add	r1, sp, #260	; 0x104
   2abc2:	4630      	mov	r0, r6
   2abc4:	f000 f9ae 	bl	2af24 <_scanf_i>
   2abc8:	e7aa      	b.n	2ab20 <__ssvfiscanf_r+0x208>
   2abca:	bf00      	nop
   2abcc:	00031a3d 	.word	0x00031a3d
   2abd0:	00031d9e 	.word	0x00031d9e
   2abd4:	0002e281 	.word	0x0002e281
   2abd8:	0002e2fb 	.word	0x0002e2fb
   2abdc:	4b0b      	ldr	r3, [pc, #44]	; (2ac0c <__ssvfiscanf_r+0x2f4>)
   2abde:	2b00      	cmp	r3, #0
   2abe0:	f43f aec0 	beq.w	2a964 <__ssvfiscanf_r+0x4c>
   2abe4:	466b      	mov	r3, sp
   2abe6:	4622      	mov	r2, r4
   2abe8:	a941      	add	r1, sp, #260	; 0x104
   2abea:	4630      	mov	r0, r6
   2abec:	e000      	b.n	2abf0 <__ssvfiscanf_r+0x2d8>
   2abee:	bf00      	nop
   2abf0:	e796      	b.n	2ab20 <__ssvfiscanf_r+0x208>
   2abf2:	89a3      	ldrh	r3, [r4, #12]
   2abf4:	f013 0f40 	tst.w	r3, #64	; 0x40
   2abf8:	bf18      	it	ne
   2abfa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2abfe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   2ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ac06:	9844      	ldr	r0, [sp, #272]	; 0x110
   2ac08:	e7f9      	b.n	2abfe <__ssvfiscanf_r+0x2e6>
   2ac0a:	bf00      	nop
   2ac0c:	00000000 	.word	0x00000000

0002ac10 <_vfiprintf_r>:
   2ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac14:	460d      	mov	r5, r1
   2ac16:	b09d      	sub	sp, #116	; 0x74
   2ac18:	4614      	mov	r4, r2
   2ac1a:	4698      	mov	r8, r3
   2ac1c:	4606      	mov	r6, r0
   2ac1e:	b118      	cbz	r0, 2ac28 <_vfiprintf_r+0x18>
   2ac20:	6983      	ldr	r3, [r0, #24]
   2ac22:	b90b      	cbnz	r3, 2ac28 <_vfiprintf_r+0x18>
   2ac24:	f000 fc52 	bl	2b4cc <__sinit>
   2ac28:	4b89      	ldr	r3, [pc, #548]	; (2ae50 <_vfiprintf_r+0x240>)
   2ac2a:	429d      	cmp	r5, r3
   2ac2c:	d11b      	bne.n	2ac66 <_vfiprintf_r+0x56>
   2ac2e:	6875      	ldr	r5, [r6, #4]
   2ac30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2ac32:	07d9      	lsls	r1, r3, #31
   2ac34:	d405      	bmi.n	2ac42 <_vfiprintf_r+0x32>
   2ac36:	89ab      	ldrh	r3, [r5, #12]
   2ac38:	059a      	lsls	r2, r3, #22
   2ac3a:	d402      	bmi.n	2ac42 <_vfiprintf_r+0x32>
   2ac3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2ac3e:	f7f2 f961 	bl	1cf04 <__retarget_lock_acquire_recursive>
   2ac42:	89ab      	ldrh	r3, [r5, #12]
   2ac44:	071b      	lsls	r3, r3, #28
   2ac46:	d501      	bpl.n	2ac4c <_vfiprintf_r+0x3c>
   2ac48:	692b      	ldr	r3, [r5, #16]
   2ac4a:	b9eb      	cbnz	r3, 2ac88 <_vfiprintf_r+0x78>
   2ac4c:	4629      	mov	r1, r5
   2ac4e:	4630      	mov	r0, r6
   2ac50:	f000 fac4 	bl	2b1dc <__swsetup_r>
   2ac54:	b1c0      	cbz	r0, 2ac88 <_vfiprintf_r+0x78>
   2ac56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2ac58:	07dc      	lsls	r4, r3, #31
   2ac5a:	d50e      	bpl.n	2ac7a <_vfiprintf_r+0x6a>
   2ac5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ac60:	b01d      	add	sp, #116	; 0x74
   2ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac66:	4b7b      	ldr	r3, [pc, #492]	; (2ae54 <_vfiprintf_r+0x244>)
   2ac68:	429d      	cmp	r5, r3
   2ac6a:	d101      	bne.n	2ac70 <_vfiprintf_r+0x60>
   2ac6c:	68b5      	ldr	r5, [r6, #8]
   2ac6e:	e7df      	b.n	2ac30 <_vfiprintf_r+0x20>
   2ac70:	4b79      	ldr	r3, [pc, #484]	; (2ae58 <_vfiprintf_r+0x248>)
   2ac72:	429d      	cmp	r5, r3
   2ac74:	bf08      	it	eq
   2ac76:	68f5      	ldreq	r5, [r6, #12]
   2ac78:	e7da      	b.n	2ac30 <_vfiprintf_r+0x20>
   2ac7a:	89ab      	ldrh	r3, [r5, #12]
   2ac7c:	0598      	lsls	r0, r3, #22
   2ac7e:	d4ed      	bmi.n	2ac5c <_vfiprintf_r+0x4c>
   2ac80:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2ac82:	f7f2 f973 	bl	1cf6c <__retarget_lock_release_recursive>
   2ac86:	e7e9      	b.n	2ac5c <_vfiprintf_r+0x4c>
   2ac88:	2300      	movs	r3, #0
   2ac8a:	f8cd 800c 	str.w	r8, [sp, #12]
   2ac8e:	f04f 0901 	mov.w	r9, #1
   2ac92:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 2ae5c <_vfiprintf_r+0x24c>
   2ac96:	9309      	str	r3, [sp, #36]	; 0x24
   2ac98:	2320      	movs	r3, #32
   2ac9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2ac9e:	2330      	movs	r3, #48	; 0x30
   2aca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2aca4:	4623      	mov	r3, r4
   2aca6:	469a      	mov	sl, r3
   2aca8:	f813 2b01 	ldrb.w	r2, [r3], #1
   2acac:	b10a      	cbz	r2, 2acb2 <_vfiprintf_r+0xa2>
   2acae:	2a25      	cmp	r2, #37	; 0x25
   2acb0:	d1f9      	bne.n	2aca6 <_vfiprintf_r+0x96>
   2acb2:	ebba 0b04 	subs.w	fp, sl, r4
   2acb6:	d00b      	beq.n	2acd0 <_vfiprintf_r+0xc0>
   2acb8:	465b      	mov	r3, fp
   2acba:	4622      	mov	r2, r4
   2acbc:	4629      	mov	r1, r5
   2acbe:	4630      	mov	r0, r6
   2acc0:	f003 fb4d 	bl	2e35e <__sfputs_r>
   2acc4:	3001      	adds	r0, #1
   2acc6:	f000 80aa 	beq.w	2ae1e <_vfiprintf_r+0x20e>
   2acca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2accc:	445a      	add	r2, fp
   2acce:	9209      	str	r2, [sp, #36]	; 0x24
   2acd0:	f89a 3000 	ldrb.w	r3, [sl]
   2acd4:	2b00      	cmp	r3, #0
   2acd6:	f000 80a2 	beq.w	2ae1e <_vfiprintf_r+0x20e>
   2acda:	2300      	movs	r3, #0
   2acdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ace0:	f10a 0a01 	add.w	sl, sl, #1
   2ace4:	9304      	str	r3, [sp, #16]
   2ace6:	9307      	str	r3, [sp, #28]
   2ace8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2acec:	931a      	str	r3, [sp, #104]	; 0x68
   2acee:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2acf2:	4654      	mov	r4, sl
   2acf4:	2205      	movs	r2, #5
   2acf6:	4859      	ldr	r0, [pc, #356]	; (2ae5c <_vfiprintf_r+0x24c>)
   2acf8:	f814 1b01 	ldrb.w	r1, [r4], #1
   2acfc:	f002 ff41 	bl	2db82 <memchr>
   2ad00:	9a04      	ldr	r2, [sp, #16]
   2ad02:	b9d8      	cbnz	r0, 2ad3c <_vfiprintf_r+0x12c>
   2ad04:	06d1      	lsls	r1, r2, #27
   2ad06:	bf44      	itt	mi
   2ad08:	2320      	movmi	r3, #32
   2ad0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ad0e:	0713      	lsls	r3, r2, #28
   2ad10:	bf44      	itt	mi
   2ad12:	232b      	movmi	r3, #43	; 0x2b
   2ad14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ad18:	f89a 3000 	ldrb.w	r3, [sl]
   2ad1c:	2b2a      	cmp	r3, #42	; 0x2a
   2ad1e:	d015      	beq.n	2ad4c <_vfiprintf_r+0x13c>
   2ad20:	9a07      	ldr	r2, [sp, #28]
   2ad22:	4654      	mov	r4, sl
   2ad24:	2000      	movs	r0, #0
   2ad26:	f04f 0c0a 	mov.w	ip, #10
   2ad2a:	4621      	mov	r1, r4
   2ad2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ad30:	3b30      	subs	r3, #48	; 0x30
   2ad32:	2b09      	cmp	r3, #9
   2ad34:	d94e      	bls.n	2add4 <_vfiprintf_r+0x1c4>
   2ad36:	b1b0      	cbz	r0, 2ad66 <_vfiprintf_r+0x156>
   2ad38:	9207      	str	r2, [sp, #28]
   2ad3a:	e014      	b.n	2ad66 <_vfiprintf_r+0x156>
   2ad3c:	eba0 0308 	sub.w	r3, r0, r8
   2ad40:	46a2      	mov	sl, r4
   2ad42:	fa09 f303 	lsl.w	r3, r9, r3
   2ad46:	4313      	orrs	r3, r2
   2ad48:	9304      	str	r3, [sp, #16]
   2ad4a:	e7d2      	b.n	2acf2 <_vfiprintf_r+0xe2>
   2ad4c:	9b03      	ldr	r3, [sp, #12]
   2ad4e:	1d19      	adds	r1, r3, #4
   2ad50:	681b      	ldr	r3, [r3, #0]
   2ad52:	2b00      	cmp	r3, #0
   2ad54:	9103      	str	r1, [sp, #12]
   2ad56:	bfbb      	ittet	lt
   2ad58:	425b      	neglt	r3, r3
   2ad5a:	f042 0202 	orrlt.w	r2, r2, #2
   2ad5e:	9307      	strge	r3, [sp, #28]
   2ad60:	9307      	strlt	r3, [sp, #28]
   2ad62:	bfb8      	it	lt
   2ad64:	9204      	strlt	r2, [sp, #16]
   2ad66:	7823      	ldrb	r3, [r4, #0]
   2ad68:	2b2e      	cmp	r3, #46	; 0x2e
   2ad6a:	d10c      	bne.n	2ad86 <_vfiprintf_r+0x176>
   2ad6c:	7863      	ldrb	r3, [r4, #1]
   2ad6e:	2b2a      	cmp	r3, #42	; 0x2a
   2ad70:	d135      	bne.n	2adde <_vfiprintf_r+0x1ce>
   2ad72:	9b03      	ldr	r3, [sp, #12]
   2ad74:	3402      	adds	r4, #2
   2ad76:	1d1a      	adds	r2, r3, #4
   2ad78:	681b      	ldr	r3, [r3, #0]
   2ad7a:	2b00      	cmp	r3, #0
   2ad7c:	9203      	str	r2, [sp, #12]
   2ad7e:	bfb8      	it	lt
   2ad80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2ad84:	9305      	str	r3, [sp, #20]
   2ad86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2ae60 <_vfiprintf_r+0x250>
   2ad8a:	2203      	movs	r2, #3
   2ad8c:	7821      	ldrb	r1, [r4, #0]
   2ad8e:	4650      	mov	r0, sl
   2ad90:	f002 fef7 	bl	2db82 <memchr>
   2ad94:	b140      	cbz	r0, 2ada8 <_vfiprintf_r+0x198>
   2ad96:	2340      	movs	r3, #64	; 0x40
   2ad98:	eba0 000a 	sub.w	r0, r0, sl
   2ad9c:	3401      	adds	r4, #1
   2ad9e:	fa03 f000 	lsl.w	r0, r3, r0
   2ada2:	9b04      	ldr	r3, [sp, #16]
   2ada4:	4303      	orrs	r3, r0
   2ada6:	9304      	str	r3, [sp, #16]
   2ada8:	f814 1b01 	ldrb.w	r1, [r4], #1
   2adac:	2206      	movs	r2, #6
   2adae:	482d      	ldr	r0, [pc, #180]	; (2ae64 <_vfiprintf_r+0x254>)
   2adb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2adb4:	f002 fee5 	bl	2db82 <memchr>
   2adb8:	2800      	cmp	r0, #0
   2adba:	d03f      	beq.n	2ae3c <_vfiprintf_r+0x22c>
   2adbc:	4b2a      	ldr	r3, [pc, #168]	; (2ae68 <_vfiprintf_r+0x258>)
   2adbe:	bb1b      	cbnz	r3, 2ae08 <_vfiprintf_r+0x1f8>
   2adc0:	9b03      	ldr	r3, [sp, #12]
   2adc2:	3307      	adds	r3, #7
   2adc4:	f023 0307 	bic.w	r3, r3, #7
   2adc8:	3308      	adds	r3, #8
   2adca:	9303      	str	r3, [sp, #12]
   2adcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2adce:	443b      	add	r3, r7
   2add0:	9309      	str	r3, [sp, #36]	; 0x24
   2add2:	e767      	b.n	2aca4 <_vfiprintf_r+0x94>
   2add4:	fb0c 3202 	mla	r2, ip, r2, r3
   2add8:	460c      	mov	r4, r1
   2adda:	2001      	movs	r0, #1
   2addc:	e7a5      	b.n	2ad2a <_vfiprintf_r+0x11a>
   2adde:	2300      	movs	r3, #0
   2ade0:	3401      	adds	r4, #1
   2ade2:	f04f 0c0a 	mov.w	ip, #10
   2ade6:	4619      	mov	r1, r3
   2ade8:	9305      	str	r3, [sp, #20]
   2adea:	4620      	mov	r0, r4
   2adec:	f810 2b01 	ldrb.w	r2, [r0], #1
   2adf0:	3a30      	subs	r2, #48	; 0x30
   2adf2:	2a09      	cmp	r2, #9
   2adf4:	d903      	bls.n	2adfe <_vfiprintf_r+0x1ee>
   2adf6:	2b00      	cmp	r3, #0
   2adf8:	d0c5      	beq.n	2ad86 <_vfiprintf_r+0x176>
   2adfa:	9105      	str	r1, [sp, #20]
   2adfc:	e7c3      	b.n	2ad86 <_vfiprintf_r+0x176>
   2adfe:	fb0c 2101 	mla	r1, ip, r1, r2
   2ae02:	4604      	mov	r4, r0
   2ae04:	2301      	movs	r3, #1
   2ae06:	e7f0      	b.n	2adea <_vfiprintf_r+0x1da>
   2ae08:	ab03      	add	r3, sp, #12
   2ae0a:	462a      	mov	r2, r5
   2ae0c:	a904      	add	r1, sp, #16
   2ae0e:	4630      	mov	r0, r6
   2ae10:	9300      	str	r3, [sp, #0]
   2ae12:	4b16      	ldr	r3, [pc, #88]	; (2ae6c <_vfiprintf_r+0x25c>)
   2ae14:	f7fe f906 	bl	29024 <_printf_float>
   2ae18:	4607      	mov	r7, r0
   2ae1a:	1c78      	adds	r0, r7, #1
   2ae1c:	d1d6      	bne.n	2adcc <_vfiprintf_r+0x1bc>
   2ae1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2ae20:	07d9      	lsls	r1, r3, #31
   2ae22:	d405      	bmi.n	2ae30 <_vfiprintf_r+0x220>
   2ae24:	89ab      	ldrh	r3, [r5, #12]
   2ae26:	059a      	lsls	r2, r3, #22
   2ae28:	d402      	bmi.n	2ae30 <_vfiprintf_r+0x220>
   2ae2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2ae2c:	f7f2 f89e 	bl	1cf6c <__retarget_lock_release_recursive>
   2ae30:	89ab      	ldrh	r3, [r5, #12]
   2ae32:	065b      	lsls	r3, r3, #25
   2ae34:	f53f af12 	bmi.w	2ac5c <_vfiprintf_r+0x4c>
   2ae38:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ae3a:	e711      	b.n	2ac60 <_vfiprintf_r+0x50>
   2ae3c:	ab03      	add	r3, sp, #12
   2ae3e:	462a      	mov	r2, r5
   2ae40:	a904      	add	r1, sp, #16
   2ae42:	4630      	mov	r0, r6
   2ae44:	9300      	str	r3, [sp, #0]
   2ae46:	4b09      	ldr	r3, [pc, #36]	; (2ae6c <_vfiprintf_r+0x25c>)
   2ae48:	f7fe fb16 	bl	29478 <_printf_i>
   2ae4c:	e7e4      	b.n	2ae18 <_vfiprintf_r+0x208>
   2ae4e:	bf00      	nop
   2ae50:	0002ef44 	.word	0x0002ef44
   2ae54:	0002ef64 	.word	0x0002ef64
   2ae58:	0002ef24 	.word	0x0002ef24
   2ae5c:	00031d98 	.word	0x00031d98
   2ae60:	00031d9e 	.word	0x00031d9e
   2ae64:	00031da2 	.word	0x00031da2
   2ae68:	00029025 	.word	0x00029025
   2ae6c:	0002e35f 	.word	0x0002e35f

0002ae70 <_scanf_chars>:
   2ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ae74:	4615      	mov	r5, r2
   2ae76:	688a      	ldr	r2, [r1, #8]
   2ae78:	4680      	mov	r8, r0
   2ae7a:	460c      	mov	r4, r1
   2ae7c:	b932      	cbnz	r2, 2ae8c <_scanf_chars+0x1c>
   2ae7e:	698a      	ldr	r2, [r1, #24]
   2ae80:	2a00      	cmp	r2, #0
   2ae82:	bf0c      	ite	eq
   2ae84:	2201      	moveq	r2, #1
   2ae86:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2ae8a:	608a      	str	r2, [r1, #8]
   2ae8c:	6822      	ldr	r2, [r4, #0]
   2ae8e:	2700      	movs	r7, #0
   2ae90:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2af20 <_scanf_chars+0xb0>
   2ae94:	06d1      	lsls	r1, r2, #27
   2ae96:	bf5f      	itttt	pl
   2ae98:	681a      	ldrpl	r2, [r3, #0]
   2ae9a:	1d11      	addpl	r1, r2, #4
   2ae9c:	6019      	strpl	r1, [r3, #0]
   2ae9e:	6816      	ldrpl	r6, [r2, #0]
   2aea0:	69a0      	ldr	r0, [r4, #24]
   2aea2:	b188      	cbz	r0, 2aec8 <_scanf_chars+0x58>
   2aea4:	2801      	cmp	r0, #1
   2aea6:	d107      	bne.n	2aeb8 <_scanf_chars+0x48>
   2aea8:	682b      	ldr	r3, [r5, #0]
   2aeaa:	781a      	ldrb	r2, [r3, #0]
   2aeac:	6963      	ldr	r3, [r4, #20]
   2aeae:	5c9b      	ldrb	r3, [r3, r2]
   2aeb0:	b953      	cbnz	r3, 2aec8 <_scanf_chars+0x58>
   2aeb2:	2f00      	cmp	r7, #0
   2aeb4:	d031      	beq.n	2af1a <_scanf_chars+0xaa>
   2aeb6:	e022      	b.n	2aefe <_scanf_chars+0x8e>
   2aeb8:	2802      	cmp	r0, #2
   2aeba:	d120      	bne.n	2aefe <_scanf_chars+0x8e>
   2aebc:	682b      	ldr	r3, [r5, #0]
   2aebe:	781b      	ldrb	r3, [r3, #0]
   2aec0:	f813 3009 	ldrb.w	r3, [r3, r9]
   2aec4:	071b      	lsls	r3, r3, #28
   2aec6:	d41a      	bmi.n	2aefe <_scanf_chars+0x8e>
   2aec8:	6823      	ldr	r3, [r4, #0]
   2aeca:	3701      	adds	r7, #1
   2aecc:	06da      	lsls	r2, r3, #27
   2aece:	bf5e      	ittt	pl
   2aed0:	682b      	ldrpl	r3, [r5, #0]
   2aed2:	781b      	ldrbpl	r3, [r3, #0]
   2aed4:	f806 3b01 	strbpl.w	r3, [r6], #1
   2aed8:	682a      	ldr	r2, [r5, #0]
   2aeda:	686b      	ldr	r3, [r5, #4]
   2aedc:	3201      	adds	r2, #1
   2aede:	3b01      	subs	r3, #1
   2aee0:	602a      	str	r2, [r5, #0]
   2aee2:	68a2      	ldr	r2, [r4, #8]
   2aee4:	606b      	str	r3, [r5, #4]
   2aee6:	3a01      	subs	r2, #1
   2aee8:	60a2      	str	r2, [r4, #8]
   2aeea:	b142      	cbz	r2, 2aefe <_scanf_chars+0x8e>
   2aeec:	2b00      	cmp	r3, #0
   2aeee:	dcd7      	bgt.n	2aea0 <_scanf_chars+0x30>
   2aef0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2aef4:	4629      	mov	r1, r5
   2aef6:	4640      	mov	r0, r8
   2aef8:	4798      	blx	r3
   2aefa:	2800      	cmp	r0, #0
   2aefc:	d0d0      	beq.n	2aea0 <_scanf_chars+0x30>
   2aefe:	6823      	ldr	r3, [r4, #0]
   2af00:	f013 0310 	ands.w	r3, r3, #16
   2af04:	d105      	bne.n	2af12 <_scanf_chars+0xa2>
   2af06:	68e2      	ldr	r2, [r4, #12]
   2af08:	3201      	adds	r2, #1
   2af0a:	60e2      	str	r2, [r4, #12]
   2af0c:	69a2      	ldr	r2, [r4, #24]
   2af0e:	b102      	cbz	r2, 2af12 <_scanf_chars+0xa2>
   2af10:	7033      	strb	r3, [r6, #0]
   2af12:	6923      	ldr	r3, [r4, #16]
   2af14:	2000      	movs	r0, #0
   2af16:	443b      	add	r3, r7
   2af18:	6123      	str	r3, [r4, #16]
   2af1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2af1e:	bf00      	nop
   2af20:	00031a3d 	.word	0x00031a3d

0002af24 <_scanf_i>:
   2af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af28:	4698      	mov	r8, r3
   2af2a:	b087      	sub	sp, #28
   2af2c:	4b75      	ldr	r3, [pc, #468]	; (2b104 <_scanf_i+0x1e0>)
   2af2e:	460c      	mov	r4, r1
   2af30:	4682      	mov	sl, r0
   2af32:	4616      	mov	r6, r2
   2af34:	4627      	mov	r7, r4
   2af36:	f04f 0b00 	mov.w	fp, #0
   2af3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2af3e:	ab03      	add	r3, sp, #12
   2af40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2af44:	4b70      	ldr	r3, [pc, #448]	; (2b108 <_scanf_i+0x1e4>)
   2af46:	69a1      	ldr	r1, [r4, #24]
   2af48:	4a70      	ldr	r2, [pc, #448]	; (2b10c <_scanf_i+0x1e8>)
   2af4a:	2903      	cmp	r1, #3
   2af4c:	bf18      	it	ne
   2af4e:	461a      	movne	r2, r3
   2af50:	68a3      	ldr	r3, [r4, #8]
   2af52:	9201      	str	r2, [sp, #4]
   2af54:	1e5a      	subs	r2, r3, #1
   2af56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2af5a:	bf89      	itett	hi
   2af5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2af60:	f04f 0900 	movls.w	r9, #0
   2af64:	eb03 0905 	addhi.w	r9, r3, r5
   2af68:	f240 135d 	movwhi	r3, #349	; 0x15d
   2af6c:	bf88      	it	hi
   2af6e:	60a3      	strhi	r3, [r4, #8]
   2af70:	f857 3b1c 	ldr.w	r3, [r7], #28
   2af74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2af78:	463d      	mov	r5, r7
   2af7a:	6023      	str	r3, [r4, #0]
   2af7c:	6831      	ldr	r1, [r6, #0]
   2af7e:	ab03      	add	r3, sp, #12
   2af80:	2202      	movs	r2, #2
   2af82:	7809      	ldrb	r1, [r1, #0]
   2af84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2af88:	f002 fdfb 	bl	2db82 <memchr>
   2af8c:	b328      	cbz	r0, 2afda <_scanf_i+0xb6>
   2af8e:	f1bb 0f01 	cmp.w	fp, #1
   2af92:	d159      	bne.n	2b048 <_scanf_i+0x124>
   2af94:	6862      	ldr	r2, [r4, #4]
   2af96:	b92a      	cbnz	r2, 2afa4 <_scanf_i+0x80>
   2af98:	6822      	ldr	r2, [r4, #0]
   2af9a:	2308      	movs	r3, #8
   2af9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2afa0:	6063      	str	r3, [r4, #4]
   2afa2:	6022      	str	r2, [r4, #0]
   2afa4:	6822      	ldr	r2, [r4, #0]
   2afa6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2afaa:	6022      	str	r2, [r4, #0]
   2afac:	68a2      	ldr	r2, [r4, #8]
   2afae:	1e51      	subs	r1, r2, #1
   2afb0:	60a1      	str	r1, [r4, #8]
   2afb2:	b192      	cbz	r2, 2afda <_scanf_i+0xb6>
   2afb4:	6832      	ldr	r2, [r6, #0]
   2afb6:	1c51      	adds	r1, r2, #1
   2afb8:	6031      	str	r1, [r6, #0]
   2afba:	7812      	ldrb	r2, [r2, #0]
   2afbc:	f805 2b01 	strb.w	r2, [r5], #1
   2afc0:	6872      	ldr	r2, [r6, #4]
   2afc2:	3a01      	subs	r2, #1
   2afc4:	2a00      	cmp	r2, #0
   2afc6:	6072      	str	r2, [r6, #4]
   2afc8:	dc07      	bgt.n	2afda <_scanf_i+0xb6>
   2afca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2afce:	4631      	mov	r1, r6
   2afd0:	4650      	mov	r0, sl
   2afd2:	4790      	blx	r2
   2afd4:	2800      	cmp	r0, #0
   2afd6:	f040 8085 	bne.w	2b0e4 <_scanf_i+0x1c0>
   2afda:	f10b 0b01 	add.w	fp, fp, #1
   2afde:	f1bb 0f03 	cmp.w	fp, #3
   2afe2:	d1cb      	bne.n	2af7c <_scanf_i+0x58>
   2afe4:	6863      	ldr	r3, [r4, #4]
   2afe6:	b90b      	cbnz	r3, 2afec <_scanf_i+0xc8>
   2afe8:	230a      	movs	r3, #10
   2afea:	6063      	str	r3, [r4, #4]
   2afec:	6863      	ldr	r3, [r4, #4]
   2afee:	f04f 0b00 	mov.w	fp, #0
   2aff2:	4947      	ldr	r1, [pc, #284]	; (2b110 <_scanf_i+0x1ec>)
   2aff4:	6960      	ldr	r0, [r4, #20]
   2aff6:	1ac9      	subs	r1, r1, r3
   2aff8:	f003 f9c3 	bl	2e382 <__sccl>
   2affc:	68a3      	ldr	r3, [r4, #8]
   2affe:	6822      	ldr	r2, [r4, #0]
   2b000:	2b00      	cmp	r3, #0
   2b002:	d03d      	beq.n	2b080 <_scanf_i+0x15c>
   2b004:	6831      	ldr	r1, [r6, #0]
   2b006:	6960      	ldr	r0, [r4, #20]
   2b008:	f891 c000 	ldrb.w	ip, [r1]
   2b00c:	f810 000c 	ldrb.w	r0, [r0, ip]
   2b010:	2800      	cmp	r0, #0
   2b012:	d035      	beq.n	2b080 <_scanf_i+0x15c>
   2b014:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2b018:	d124      	bne.n	2b064 <_scanf_i+0x140>
   2b01a:	0510      	lsls	r0, r2, #20
   2b01c:	d522      	bpl.n	2b064 <_scanf_i+0x140>
   2b01e:	f10b 0b01 	add.w	fp, fp, #1
   2b022:	f1b9 0f00 	cmp.w	r9, #0
   2b026:	d003      	beq.n	2b030 <_scanf_i+0x10c>
   2b028:	3301      	adds	r3, #1
   2b02a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   2b02e:	60a3      	str	r3, [r4, #8]
   2b030:	6873      	ldr	r3, [r6, #4]
   2b032:	3b01      	subs	r3, #1
   2b034:	2b00      	cmp	r3, #0
   2b036:	6073      	str	r3, [r6, #4]
   2b038:	dd1b      	ble.n	2b072 <_scanf_i+0x14e>
   2b03a:	6833      	ldr	r3, [r6, #0]
   2b03c:	3301      	adds	r3, #1
   2b03e:	6033      	str	r3, [r6, #0]
   2b040:	68a3      	ldr	r3, [r4, #8]
   2b042:	3b01      	subs	r3, #1
   2b044:	60a3      	str	r3, [r4, #8]
   2b046:	e7d9      	b.n	2affc <_scanf_i+0xd8>
   2b048:	f1bb 0f02 	cmp.w	fp, #2
   2b04c:	d1ae      	bne.n	2afac <_scanf_i+0x88>
   2b04e:	6822      	ldr	r2, [r4, #0]
   2b050:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2b054:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2b058:	d1bf      	bne.n	2afda <_scanf_i+0xb6>
   2b05a:	2310      	movs	r3, #16
   2b05c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2b060:	6063      	str	r3, [r4, #4]
   2b062:	e7a2      	b.n	2afaa <_scanf_i+0x86>
   2b064:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2b068:	6022      	str	r2, [r4, #0]
   2b06a:	780b      	ldrb	r3, [r1, #0]
   2b06c:	f805 3b01 	strb.w	r3, [r5], #1
   2b070:	e7de      	b.n	2b030 <_scanf_i+0x10c>
   2b072:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2b076:	4631      	mov	r1, r6
   2b078:	4650      	mov	r0, sl
   2b07a:	4798      	blx	r3
   2b07c:	2800      	cmp	r0, #0
   2b07e:	d0df      	beq.n	2b040 <_scanf_i+0x11c>
   2b080:	6823      	ldr	r3, [r4, #0]
   2b082:	05db      	lsls	r3, r3, #23
   2b084:	d50d      	bpl.n	2b0a2 <_scanf_i+0x17e>
   2b086:	42bd      	cmp	r5, r7
   2b088:	d909      	bls.n	2b09e <_scanf_i+0x17a>
   2b08a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2b08e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2b092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2b096:	4632      	mov	r2, r6
   2b098:	464d      	mov	r5, r9
   2b09a:	4650      	mov	r0, sl
   2b09c:	4798      	blx	r3
   2b09e:	42bd      	cmp	r5, r7
   2b0a0:	d02d      	beq.n	2b0fe <_scanf_i+0x1da>
   2b0a2:	6822      	ldr	r2, [r4, #0]
   2b0a4:	f012 0210 	ands.w	r2, r2, #16
   2b0a8:	d113      	bne.n	2b0d2 <_scanf_i+0x1ae>
   2b0aa:	4639      	mov	r1, r7
   2b0ac:	702a      	strb	r2, [r5, #0]
   2b0ae:	4650      	mov	r0, sl
   2b0b0:	6863      	ldr	r3, [r4, #4]
   2b0b2:	9e01      	ldr	r6, [sp, #4]
   2b0b4:	47b0      	blx	r6
   2b0b6:	6821      	ldr	r1, [r4, #0]
   2b0b8:	f8d8 3000 	ldr.w	r3, [r8]
   2b0bc:	f011 0f20 	tst.w	r1, #32
   2b0c0:	d013      	beq.n	2b0ea <_scanf_i+0x1c6>
   2b0c2:	1d1a      	adds	r2, r3, #4
   2b0c4:	f8c8 2000 	str.w	r2, [r8]
   2b0c8:	681b      	ldr	r3, [r3, #0]
   2b0ca:	6018      	str	r0, [r3, #0]
   2b0cc:	68e3      	ldr	r3, [r4, #12]
   2b0ce:	3301      	adds	r3, #1
   2b0d0:	60e3      	str	r3, [r4, #12]
   2b0d2:	1bed      	subs	r5, r5, r7
   2b0d4:	2000      	movs	r0, #0
   2b0d6:	44ab      	add	fp, r5
   2b0d8:	6925      	ldr	r5, [r4, #16]
   2b0da:	445d      	add	r5, fp
   2b0dc:	6125      	str	r5, [r4, #16]
   2b0de:	b007      	add	sp, #28
   2b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0e4:	f04f 0b00 	mov.w	fp, #0
   2b0e8:	e7ca      	b.n	2b080 <_scanf_i+0x15c>
   2b0ea:	1d1a      	adds	r2, r3, #4
   2b0ec:	f011 0f01 	tst.w	r1, #1
   2b0f0:	f8c8 2000 	str.w	r2, [r8]
   2b0f4:	681b      	ldr	r3, [r3, #0]
   2b0f6:	bf14      	ite	ne
   2b0f8:	8018      	strhne	r0, [r3, #0]
   2b0fa:	6018      	streq	r0, [r3, #0]
   2b0fc:	e7e6      	b.n	2b0cc <_scanf_i+0x1a8>
   2b0fe:	2001      	movs	r0, #1
   2b100:	e7ed      	b.n	2b0de <_scanf_i+0x1ba>
   2b102:	bf00      	nop
   2b104:	0002ea78 	.word	0x0002ea78
   2b108:	0002df4f 	.word	0x0002df4f
   2b10c:	0002df4b 	.word	0x0002df4b
   2b110:	00031dc2 	.word	0x00031dc2

0002b114 <_read_r>:
   2b114:	b538      	push	{r3, r4, r5, lr}
   2b116:	4604      	mov	r4, r0
   2b118:	4d06      	ldr	r5, [pc, #24]	; (2b134 <_read_r+0x20>)
   2b11a:	4608      	mov	r0, r1
   2b11c:	4611      	mov	r1, r2
   2b11e:	2200      	movs	r2, #0
   2b120:	602a      	str	r2, [r5, #0]
   2b122:	461a      	mov	r2, r3
   2b124:	f000 fe43 	bl	2bdae <_read>
   2b128:	1c43      	adds	r3, r0, #1
   2b12a:	d102      	bne.n	2b132 <_read_r+0x1e>
   2b12c:	682b      	ldr	r3, [r5, #0]
   2b12e:	b103      	cbz	r3, 2b132 <_read_r+0x1e>
   2b130:	6023      	str	r3, [r4, #0]
   2b132:	bd38      	pop	{r3, r4, r5, pc}
   2b134:	2000d4b8 	.word	0x2000d4b8

0002b138 <__swbuf_r>:
   2b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b13a:	460e      	mov	r6, r1
   2b13c:	4614      	mov	r4, r2
   2b13e:	4605      	mov	r5, r0
   2b140:	b118      	cbz	r0, 2b14a <__swbuf_r+0x12>
   2b142:	6983      	ldr	r3, [r0, #24]
   2b144:	b90b      	cbnz	r3, 2b14a <__swbuf_r+0x12>
   2b146:	f000 f9c1 	bl	2b4cc <__sinit>
   2b14a:	4b21      	ldr	r3, [pc, #132]	; (2b1d0 <__swbuf_r+0x98>)
   2b14c:	429c      	cmp	r4, r3
   2b14e:	d12b      	bne.n	2b1a8 <__swbuf_r+0x70>
   2b150:	686c      	ldr	r4, [r5, #4]
   2b152:	69a3      	ldr	r3, [r4, #24]
   2b154:	60a3      	str	r3, [r4, #8]
   2b156:	89a3      	ldrh	r3, [r4, #12]
   2b158:	071a      	lsls	r2, r3, #28
   2b15a:	d52f      	bpl.n	2b1bc <__swbuf_r+0x84>
   2b15c:	6923      	ldr	r3, [r4, #16]
   2b15e:	b36b      	cbz	r3, 2b1bc <__swbuf_r+0x84>
   2b160:	6923      	ldr	r3, [r4, #16]
   2b162:	b2f6      	uxtb	r6, r6
   2b164:	6820      	ldr	r0, [r4, #0]
   2b166:	4637      	mov	r7, r6
   2b168:	1ac0      	subs	r0, r0, r3
   2b16a:	6963      	ldr	r3, [r4, #20]
   2b16c:	4283      	cmp	r3, r0
   2b16e:	dc04      	bgt.n	2b17a <__swbuf_r+0x42>
   2b170:	4621      	mov	r1, r4
   2b172:	4628      	mov	r0, r5
   2b174:	f000 f92c 	bl	2b3d0 <_fflush_r>
   2b178:	bb30      	cbnz	r0, 2b1c8 <__swbuf_r+0x90>
   2b17a:	68a3      	ldr	r3, [r4, #8]
   2b17c:	3001      	adds	r0, #1
   2b17e:	3b01      	subs	r3, #1
   2b180:	60a3      	str	r3, [r4, #8]
   2b182:	6823      	ldr	r3, [r4, #0]
   2b184:	1c5a      	adds	r2, r3, #1
   2b186:	6022      	str	r2, [r4, #0]
   2b188:	701e      	strb	r6, [r3, #0]
   2b18a:	6963      	ldr	r3, [r4, #20]
   2b18c:	4283      	cmp	r3, r0
   2b18e:	d004      	beq.n	2b19a <__swbuf_r+0x62>
   2b190:	89a3      	ldrh	r3, [r4, #12]
   2b192:	07db      	lsls	r3, r3, #31
   2b194:	d506      	bpl.n	2b1a4 <__swbuf_r+0x6c>
   2b196:	2e0a      	cmp	r6, #10
   2b198:	d104      	bne.n	2b1a4 <__swbuf_r+0x6c>
   2b19a:	4621      	mov	r1, r4
   2b19c:	4628      	mov	r0, r5
   2b19e:	f000 f917 	bl	2b3d0 <_fflush_r>
   2b1a2:	b988      	cbnz	r0, 2b1c8 <__swbuf_r+0x90>
   2b1a4:	4638      	mov	r0, r7
   2b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b1a8:	4b0a      	ldr	r3, [pc, #40]	; (2b1d4 <__swbuf_r+0x9c>)
   2b1aa:	429c      	cmp	r4, r3
   2b1ac:	d101      	bne.n	2b1b2 <__swbuf_r+0x7a>
   2b1ae:	68ac      	ldr	r4, [r5, #8]
   2b1b0:	e7cf      	b.n	2b152 <__swbuf_r+0x1a>
   2b1b2:	4b09      	ldr	r3, [pc, #36]	; (2b1d8 <__swbuf_r+0xa0>)
   2b1b4:	429c      	cmp	r4, r3
   2b1b6:	bf08      	it	eq
   2b1b8:	68ec      	ldreq	r4, [r5, #12]
   2b1ba:	e7ca      	b.n	2b152 <__swbuf_r+0x1a>
   2b1bc:	4621      	mov	r1, r4
   2b1be:	4628      	mov	r0, r5
   2b1c0:	f000 f80c 	bl	2b1dc <__swsetup_r>
   2b1c4:	2800      	cmp	r0, #0
   2b1c6:	d0cb      	beq.n	2b160 <__swbuf_r+0x28>
   2b1c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2b1cc:	e7ea      	b.n	2b1a4 <__swbuf_r+0x6c>
   2b1ce:	bf00      	nop
   2b1d0:	0002ef44 	.word	0x0002ef44
   2b1d4:	0002ef64 	.word	0x0002ef64
   2b1d8:	0002ef24 	.word	0x0002ef24

0002b1dc <__swsetup_r>:
   2b1dc:	4b32      	ldr	r3, [pc, #200]	; (2b2a8 <__swsetup_r+0xcc>)
   2b1de:	b570      	push	{r4, r5, r6, lr}
   2b1e0:	681d      	ldr	r5, [r3, #0]
   2b1e2:	4606      	mov	r6, r0
   2b1e4:	460c      	mov	r4, r1
   2b1e6:	b125      	cbz	r5, 2b1f2 <__swsetup_r+0x16>
   2b1e8:	69ab      	ldr	r3, [r5, #24]
   2b1ea:	b913      	cbnz	r3, 2b1f2 <__swsetup_r+0x16>
   2b1ec:	4628      	mov	r0, r5
   2b1ee:	f000 f96d 	bl	2b4cc <__sinit>
   2b1f2:	4b2e      	ldr	r3, [pc, #184]	; (2b2ac <__swsetup_r+0xd0>)
   2b1f4:	429c      	cmp	r4, r3
   2b1f6:	d10f      	bne.n	2b218 <__swsetup_r+0x3c>
   2b1f8:	686c      	ldr	r4, [r5, #4]
   2b1fa:	89a3      	ldrh	r3, [r4, #12]
   2b1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2b200:	0719      	lsls	r1, r3, #28
   2b202:	d42c      	bmi.n	2b25e <__swsetup_r+0x82>
   2b204:	06dd      	lsls	r5, r3, #27
   2b206:	d411      	bmi.n	2b22c <__swsetup_r+0x50>
   2b208:	2309      	movs	r3, #9
   2b20a:	6033      	str	r3, [r6, #0]
   2b20c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   2b210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b214:	81a3      	strh	r3, [r4, #12]
   2b216:	e03e      	b.n	2b296 <__swsetup_r+0xba>
   2b218:	4b25      	ldr	r3, [pc, #148]	; (2b2b0 <__swsetup_r+0xd4>)
   2b21a:	429c      	cmp	r4, r3
   2b21c:	d101      	bne.n	2b222 <__swsetup_r+0x46>
   2b21e:	68ac      	ldr	r4, [r5, #8]
   2b220:	e7eb      	b.n	2b1fa <__swsetup_r+0x1e>
   2b222:	4b24      	ldr	r3, [pc, #144]	; (2b2b4 <__swsetup_r+0xd8>)
   2b224:	429c      	cmp	r4, r3
   2b226:	bf08      	it	eq
   2b228:	68ec      	ldreq	r4, [r5, #12]
   2b22a:	e7e6      	b.n	2b1fa <__swsetup_r+0x1e>
   2b22c:	0758      	lsls	r0, r3, #29
   2b22e:	d512      	bpl.n	2b256 <__swsetup_r+0x7a>
   2b230:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2b232:	b141      	cbz	r1, 2b246 <__swsetup_r+0x6a>
   2b234:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b238:	4299      	cmp	r1, r3
   2b23a:	d002      	beq.n	2b242 <__swsetup_r+0x66>
   2b23c:	4630      	mov	r0, r6
   2b23e:	f7fd fe13 	bl	28e68 <_free_r>
   2b242:	2300      	movs	r3, #0
   2b244:	6363      	str	r3, [r4, #52]	; 0x34
   2b246:	89a3      	ldrh	r3, [r4, #12]
   2b248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2b24c:	81a3      	strh	r3, [r4, #12]
   2b24e:	2300      	movs	r3, #0
   2b250:	6063      	str	r3, [r4, #4]
   2b252:	6923      	ldr	r3, [r4, #16]
   2b254:	6023      	str	r3, [r4, #0]
   2b256:	89a3      	ldrh	r3, [r4, #12]
   2b258:	f043 0308 	orr.w	r3, r3, #8
   2b25c:	81a3      	strh	r3, [r4, #12]
   2b25e:	6923      	ldr	r3, [r4, #16]
   2b260:	b94b      	cbnz	r3, 2b276 <__swsetup_r+0x9a>
   2b262:	89a3      	ldrh	r3, [r4, #12]
   2b264:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2b268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2b26c:	d003      	beq.n	2b276 <__swsetup_r+0x9a>
   2b26e:	4621      	mov	r1, r4
   2b270:	4630      	mov	r0, r6
   2b272:	f000 f9a9 	bl	2b5c8 <__smakebuf_r>
   2b276:	89a0      	ldrh	r0, [r4, #12]
   2b278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2b27c:	f010 0301 	ands.w	r3, r0, #1
   2b280:	d00a      	beq.n	2b298 <__swsetup_r+0xbc>
   2b282:	2300      	movs	r3, #0
   2b284:	60a3      	str	r3, [r4, #8]
   2b286:	6963      	ldr	r3, [r4, #20]
   2b288:	425b      	negs	r3, r3
   2b28a:	61a3      	str	r3, [r4, #24]
   2b28c:	6923      	ldr	r3, [r4, #16]
   2b28e:	b943      	cbnz	r3, 2b2a2 <__swsetup_r+0xc6>
   2b290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   2b294:	d1ba      	bne.n	2b20c <__swsetup_r+0x30>
   2b296:	bd70      	pop	{r4, r5, r6, pc}
   2b298:	0781      	lsls	r1, r0, #30
   2b29a:	bf58      	it	pl
   2b29c:	6963      	ldrpl	r3, [r4, #20]
   2b29e:	60a3      	str	r3, [r4, #8]
   2b2a0:	e7f4      	b.n	2b28c <__swsetup_r+0xb0>
   2b2a2:	2000      	movs	r0, #0
   2b2a4:	e7f7      	b.n	2b296 <__swsetup_r+0xba>
   2b2a6:	bf00      	nop
   2b2a8:	2000c6e4 	.word	0x2000c6e4
   2b2ac:	0002ef44 	.word	0x0002ef44
   2b2b0:	0002ef64 	.word	0x0002ef64
   2b2b4:	0002ef24 	.word	0x0002ef24

0002b2b8 <__env_lock>:
   2b2b8:	4801      	ldr	r0, [pc, #4]	; (2b2c0 <__env_lock+0x8>)
   2b2ba:	f7f1 be23 	b.w	1cf04 <__retarget_lock_acquire_recursive>
   2b2be:	bf00      	nop
   2b2c0:	2000c9ac 	.word	0x2000c9ac

0002b2c4 <__env_unlock>:
   2b2c4:	4801      	ldr	r0, [pc, #4]	; (2b2cc <__env_unlock+0x8>)
   2b2c6:	f7f1 be51 	b.w	1cf6c <__retarget_lock_release_recursive>
   2b2ca:	bf00      	nop
   2b2cc:	2000c9ac 	.word	0x2000c9ac

0002b2d0 <__sflush_r>:
   2b2d0:	898a      	ldrh	r2, [r1, #12]
   2b2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b2d4:	4605      	mov	r5, r0
   2b2d6:	0710      	lsls	r0, r2, #28
   2b2d8:	460c      	mov	r4, r1
   2b2da:	d457      	bmi.n	2b38c <__sflush_r+0xbc>
   2b2dc:	684b      	ldr	r3, [r1, #4]
   2b2de:	2b00      	cmp	r3, #0
   2b2e0:	dc04      	bgt.n	2b2ec <__sflush_r+0x1c>
   2b2e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2b2e4:	2b00      	cmp	r3, #0
   2b2e6:	dc01      	bgt.n	2b2ec <__sflush_r+0x1c>
   2b2e8:	2000      	movs	r0, #0
   2b2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b2ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b2ee:	2e00      	cmp	r6, #0
   2b2f0:	d0fa      	beq.n	2b2e8 <__sflush_r+0x18>
   2b2f2:	2300      	movs	r3, #0
   2b2f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2b2f8:	682f      	ldr	r7, [r5, #0]
   2b2fa:	602b      	str	r3, [r5, #0]
   2b2fc:	d032      	beq.n	2b364 <__sflush_r+0x94>
   2b2fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2b300:	89a3      	ldrh	r3, [r4, #12]
   2b302:	075a      	lsls	r2, r3, #29
   2b304:	d505      	bpl.n	2b312 <__sflush_r+0x42>
   2b306:	6863      	ldr	r3, [r4, #4]
   2b308:	1ac0      	subs	r0, r0, r3
   2b30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b30c:	b10b      	cbz	r3, 2b312 <__sflush_r+0x42>
   2b30e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2b310:	1ac0      	subs	r0, r0, r3
   2b312:	2300      	movs	r3, #0
   2b314:	4602      	mov	r2, r0
   2b316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2b318:	4628      	mov	r0, r5
   2b31a:	6a21      	ldr	r1, [r4, #32]
   2b31c:	47b0      	blx	r6
   2b31e:	1c43      	adds	r3, r0, #1
   2b320:	89a3      	ldrh	r3, [r4, #12]
   2b322:	d106      	bne.n	2b332 <__sflush_r+0x62>
   2b324:	6829      	ldr	r1, [r5, #0]
   2b326:	291d      	cmp	r1, #29
   2b328:	d82c      	bhi.n	2b384 <__sflush_r+0xb4>
   2b32a:	4a28      	ldr	r2, [pc, #160]	; (2b3cc <__sflush_r+0xfc>)
   2b32c:	40ca      	lsrs	r2, r1
   2b32e:	07d6      	lsls	r6, r2, #31
   2b330:	d528      	bpl.n	2b384 <__sflush_r+0xb4>
   2b332:	2200      	movs	r2, #0
   2b334:	04d9      	lsls	r1, r3, #19
   2b336:	6062      	str	r2, [r4, #4]
   2b338:	6922      	ldr	r2, [r4, #16]
   2b33a:	6022      	str	r2, [r4, #0]
   2b33c:	d504      	bpl.n	2b348 <__sflush_r+0x78>
   2b33e:	1c42      	adds	r2, r0, #1
   2b340:	d101      	bne.n	2b346 <__sflush_r+0x76>
   2b342:	682b      	ldr	r3, [r5, #0]
   2b344:	b903      	cbnz	r3, 2b348 <__sflush_r+0x78>
   2b346:	6560      	str	r0, [r4, #84]	; 0x54
   2b348:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2b34a:	602f      	str	r7, [r5, #0]
   2b34c:	2900      	cmp	r1, #0
   2b34e:	d0cb      	beq.n	2b2e8 <__sflush_r+0x18>
   2b350:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2b354:	4299      	cmp	r1, r3
   2b356:	d002      	beq.n	2b35e <__sflush_r+0x8e>
   2b358:	4628      	mov	r0, r5
   2b35a:	f7fd fd85 	bl	28e68 <_free_r>
   2b35e:	2000      	movs	r0, #0
   2b360:	6360      	str	r0, [r4, #52]	; 0x34
   2b362:	e7c2      	b.n	2b2ea <__sflush_r+0x1a>
   2b364:	6a21      	ldr	r1, [r4, #32]
   2b366:	2301      	movs	r3, #1
   2b368:	4628      	mov	r0, r5
   2b36a:	47b0      	blx	r6
   2b36c:	1c41      	adds	r1, r0, #1
   2b36e:	d1c7      	bne.n	2b300 <__sflush_r+0x30>
   2b370:	682b      	ldr	r3, [r5, #0]
   2b372:	2b00      	cmp	r3, #0
   2b374:	d0c4      	beq.n	2b300 <__sflush_r+0x30>
   2b376:	2b1d      	cmp	r3, #29
   2b378:	d001      	beq.n	2b37e <__sflush_r+0xae>
   2b37a:	2b16      	cmp	r3, #22
   2b37c:	d101      	bne.n	2b382 <__sflush_r+0xb2>
   2b37e:	602f      	str	r7, [r5, #0]
   2b380:	e7b2      	b.n	2b2e8 <__sflush_r+0x18>
   2b382:	89a3      	ldrh	r3, [r4, #12]
   2b384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b388:	81a3      	strh	r3, [r4, #12]
   2b38a:	e7ae      	b.n	2b2ea <__sflush_r+0x1a>
   2b38c:	690f      	ldr	r7, [r1, #16]
   2b38e:	2f00      	cmp	r7, #0
   2b390:	d0aa      	beq.n	2b2e8 <__sflush_r+0x18>
   2b392:	0793      	lsls	r3, r2, #30
   2b394:	680e      	ldr	r6, [r1, #0]
   2b396:	600f      	str	r7, [r1, #0]
   2b398:	bf0c      	ite	eq
   2b39a:	694b      	ldreq	r3, [r1, #20]
   2b39c:	2300      	movne	r3, #0
   2b39e:	1bf6      	subs	r6, r6, r7
   2b3a0:	608b      	str	r3, [r1, #8]
   2b3a2:	2e00      	cmp	r6, #0
   2b3a4:	dda0      	ble.n	2b2e8 <__sflush_r+0x18>
   2b3a6:	4633      	mov	r3, r6
   2b3a8:	463a      	mov	r2, r7
   2b3aa:	6a21      	ldr	r1, [r4, #32]
   2b3ac:	4628      	mov	r0, r5
   2b3ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2b3b2:	47e0      	blx	ip
   2b3b4:	2800      	cmp	r0, #0
   2b3b6:	dc06      	bgt.n	2b3c6 <__sflush_r+0xf6>
   2b3b8:	89a3      	ldrh	r3, [r4, #12]
   2b3ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b3c2:	81a3      	strh	r3, [r4, #12]
   2b3c4:	e791      	b.n	2b2ea <__sflush_r+0x1a>
   2b3c6:	4407      	add	r7, r0
   2b3c8:	1a36      	subs	r6, r6, r0
   2b3ca:	e7ea      	b.n	2b3a2 <__sflush_r+0xd2>
   2b3cc:	20400001 	.word	0x20400001

0002b3d0 <_fflush_r>:
   2b3d0:	b538      	push	{r3, r4, r5, lr}
   2b3d2:	690b      	ldr	r3, [r1, #16]
   2b3d4:	4605      	mov	r5, r0
   2b3d6:	460c      	mov	r4, r1
   2b3d8:	b913      	cbnz	r3, 2b3e0 <_fflush_r+0x10>
   2b3da:	2500      	movs	r5, #0
   2b3dc:	4628      	mov	r0, r5
   2b3de:	bd38      	pop	{r3, r4, r5, pc}
   2b3e0:	b118      	cbz	r0, 2b3ea <_fflush_r+0x1a>
   2b3e2:	6983      	ldr	r3, [r0, #24]
   2b3e4:	b90b      	cbnz	r3, 2b3ea <_fflush_r+0x1a>
   2b3e6:	f000 f871 	bl	2b4cc <__sinit>
   2b3ea:	4b14      	ldr	r3, [pc, #80]	; (2b43c <_fflush_r+0x6c>)
   2b3ec:	429c      	cmp	r4, r3
   2b3ee:	d11b      	bne.n	2b428 <_fflush_r+0x58>
   2b3f0:	686c      	ldr	r4, [r5, #4]
   2b3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b3f6:	2b00      	cmp	r3, #0
   2b3f8:	d0ef      	beq.n	2b3da <_fflush_r+0xa>
   2b3fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2b3fc:	07d0      	lsls	r0, r2, #31
   2b3fe:	d404      	bmi.n	2b40a <_fflush_r+0x3a>
   2b400:	0599      	lsls	r1, r3, #22
   2b402:	d402      	bmi.n	2b40a <_fflush_r+0x3a>
   2b404:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2b406:	f7f1 fd7d 	bl	1cf04 <__retarget_lock_acquire_recursive>
   2b40a:	4628      	mov	r0, r5
   2b40c:	4621      	mov	r1, r4
   2b40e:	f7ff ff5f 	bl	2b2d0 <__sflush_r>
   2b412:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2b414:	4605      	mov	r5, r0
   2b416:	07da      	lsls	r2, r3, #31
   2b418:	d4e0      	bmi.n	2b3dc <_fflush_r+0xc>
   2b41a:	89a3      	ldrh	r3, [r4, #12]
   2b41c:	059b      	lsls	r3, r3, #22
   2b41e:	d4dd      	bmi.n	2b3dc <_fflush_r+0xc>
   2b420:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2b422:	f7f1 fda3 	bl	1cf6c <__retarget_lock_release_recursive>
   2b426:	e7d9      	b.n	2b3dc <_fflush_r+0xc>
   2b428:	4b05      	ldr	r3, [pc, #20]	; (2b440 <_fflush_r+0x70>)
   2b42a:	429c      	cmp	r4, r3
   2b42c:	d101      	bne.n	2b432 <_fflush_r+0x62>
   2b42e:	68ac      	ldr	r4, [r5, #8]
   2b430:	e7df      	b.n	2b3f2 <_fflush_r+0x22>
   2b432:	4b04      	ldr	r3, [pc, #16]	; (2b444 <_fflush_r+0x74>)
   2b434:	429c      	cmp	r4, r3
   2b436:	bf08      	it	eq
   2b438:	68ec      	ldreq	r4, [r5, #12]
   2b43a:	e7da      	b.n	2b3f2 <_fflush_r+0x22>
   2b43c:	0002ef44 	.word	0x0002ef44
   2b440:	0002ef64 	.word	0x0002ef64
   2b444:	0002ef24 	.word	0x0002ef24

0002b448 <std>:
   2b448:	2300      	movs	r3, #0
   2b44a:	b510      	push	{r4, lr}
   2b44c:	4604      	mov	r4, r0
   2b44e:	6083      	str	r3, [r0, #8]
   2b450:	8181      	strh	r1, [r0, #12]
   2b452:	4619      	mov	r1, r3
   2b454:	6643      	str	r3, [r0, #100]	; 0x64
   2b456:	81c2      	strh	r2, [r0, #14]
   2b458:	2208      	movs	r2, #8
   2b45a:	6183      	str	r3, [r0, #24]
   2b45c:	e9c0 3300 	strd	r3, r3, [r0]
   2b460:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2b464:	305c      	adds	r0, #92	; 0x5c
   2b466:	f002 fbb7 	bl	2dbd8 <memset>
   2b46a:	4b05      	ldr	r3, [pc, #20]	; (2b480 <std+0x38>)
   2b46c:	6224      	str	r4, [r4, #32]
   2b46e:	6263      	str	r3, [r4, #36]	; 0x24
   2b470:	4b04      	ldr	r3, [pc, #16]	; (2b484 <std+0x3c>)
   2b472:	62a3      	str	r3, [r4, #40]	; 0x28
   2b474:	4b04      	ldr	r3, [pc, #16]	; (2b488 <std+0x40>)
   2b476:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b478:	4b04      	ldr	r3, [pc, #16]	; (2b48c <std+0x44>)
   2b47a:	6323      	str	r3, [r4, #48]	; 0x30
   2b47c:	bd10      	pop	{r4, pc}
   2b47e:	bf00      	nop
   2b480:	0002de05 	.word	0x0002de05
   2b484:	0002de2b 	.word	0x0002de2b
   2b488:	0002de63 	.word	0x0002de63
   2b48c:	0002de87 	.word	0x0002de87

0002b490 <_cleanup_r>:
   2b490:	4901      	ldr	r1, [pc, #4]	; (2b498 <_cleanup_r+0x8>)
   2b492:	f003 b802 	b.w	2e49a <_fwalk_reent>
   2b496:	bf00      	nop
   2b498:	0002b3d1 	.word	0x0002b3d1

0002b49c <__sfp_lock_acquire>:
   2b49c:	4801      	ldr	r0, [pc, #4]	; (2b4a4 <__sfp_lock_acquire+0x8>)
   2b49e:	f7f1 bd31 	b.w	1cf04 <__retarget_lock_acquire_recursive>
   2b4a2:	bf00      	nop
   2b4a4:	2000c9d4 	.word	0x2000c9d4

0002b4a8 <__sfp_lock_release>:
   2b4a8:	4801      	ldr	r0, [pc, #4]	; (2b4b0 <__sfp_lock_release+0x8>)
   2b4aa:	f7f1 bd5f 	b.w	1cf6c <__retarget_lock_release_recursive>
   2b4ae:	bf00      	nop
   2b4b0:	2000c9d4 	.word	0x2000c9d4

0002b4b4 <__sinit_lock_acquire>:
   2b4b4:	4801      	ldr	r0, [pc, #4]	; (2b4bc <__sinit_lock_acquire+0x8>)
   2b4b6:	f7f1 bd25 	b.w	1cf04 <__retarget_lock_acquire_recursive>
   2b4ba:	bf00      	nop
   2b4bc:	2000c9e8 	.word	0x2000c9e8

0002b4c0 <__sinit_lock_release>:
   2b4c0:	4801      	ldr	r0, [pc, #4]	; (2b4c8 <__sinit_lock_release+0x8>)
   2b4c2:	f7f1 bd53 	b.w	1cf6c <__retarget_lock_release_recursive>
   2b4c6:	bf00      	nop
   2b4c8:	2000c9e8 	.word	0x2000c9e8

0002b4cc <__sinit>:
   2b4cc:	b510      	push	{r4, lr}
   2b4ce:	4604      	mov	r4, r0
   2b4d0:	f7ff fff0 	bl	2b4b4 <__sinit_lock_acquire>
   2b4d4:	69a3      	ldr	r3, [r4, #24]
   2b4d6:	b11b      	cbz	r3, 2b4e0 <__sinit+0x14>
   2b4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b4dc:	f7ff bff0 	b.w	2b4c0 <__sinit_lock_release>
   2b4e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2b4e4:	6523      	str	r3, [r4, #80]	; 0x50
   2b4e6:	4620      	mov	r0, r4
   2b4e8:	4b12      	ldr	r3, [pc, #72]	; (2b534 <__sinit+0x68>)
   2b4ea:	4a13      	ldr	r2, [pc, #76]	; (2b538 <__sinit+0x6c>)
   2b4ec:	681b      	ldr	r3, [r3, #0]
   2b4ee:	62a2      	str	r2, [r4, #40]	; 0x28
   2b4f0:	42a3      	cmp	r3, r4
   2b4f2:	bf04      	itt	eq
   2b4f4:	2301      	moveq	r3, #1
   2b4f6:	61a3      	streq	r3, [r4, #24]
   2b4f8:	f000 f820 	bl	2b53c <__sfp>
   2b4fc:	6060      	str	r0, [r4, #4]
   2b4fe:	4620      	mov	r0, r4
   2b500:	f000 f81c 	bl	2b53c <__sfp>
   2b504:	60a0      	str	r0, [r4, #8]
   2b506:	4620      	mov	r0, r4
   2b508:	f000 f818 	bl	2b53c <__sfp>
   2b50c:	2200      	movs	r2, #0
   2b50e:	2104      	movs	r1, #4
   2b510:	60e0      	str	r0, [r4, #12]
   2b512:	6860      	ldr	r0, [r4, #4]
   2b514:	f7ff ff98 	bl	2b448 <std>
   2b518:	2201      	movs	r2, #1
   2b51a:	2109      	movs	r1, #9
   2b51c:	68a0      	ldr	r0, [r4, #8]
   2b51e:	f7ff ff93 	bl	2b448 <std>
   2b522:	2202      	movs	r2, #2
   2b524:	2112      	movs	r1, #18
   2b526:	68e0      	ldr	r0, [r4, #12]
   2b528:	f7ff ff8e 	bl	2b448 <std>
   2b52c:	2301      	movs	r3, #1
   2b52e:	61a3      	str	r3, [r4, #24]
   2b530:	e7d2      	b.n	2b4d8 <__sinit+0xc>
   2b532:	bf00      	nop
   2b534:	0002ef14 	.word	0x0002ef14
   2b538:	0002b491 	.word	0x0002b491

0002b53c <__sfp>:
   2b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b53e:	4607      	mov	r7, r0
   2b540:	f7ff ffac 	bl	2b49c <__sfp_lock_acquire>
   2b544:	4b1e      	ldr	r3, [pc, #120]	; (2b5c0 <__sfp+0x84>)
   2b546:	681e      	ldr	r6, [r3, #0]
   2b548:	69b3      	ldr	r3, [r6, #24]
   2b54a:	b913      	cbnz	r3, 2b552 <__sfp+0x16>
   2b54c:	4630      	mov	r0, r6
   2b54e:	f7ff ffbd 	bl	2b4cc <__sinit>
   2b552:	3648      	adds	r6, #72	; 0x48
   2b554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2b558:	3b01      	subs	r3, #1
   2b55a:	d503      	bpl.n	2b564 <__sfp+0x28>
   2b55c:	6833      	ldr	r3, [r6, #0]
   2b55e:	b30b      	cbz	r3, 2b5a4 <__sfp+0x68>
   2b560:	6836      	ldr	r6, [r6, #0]
   2b562:	e7f7      	b.n	2b554 <__sfp+0x18>
   2b564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2b568:	b9d5      	cbnz	r5, 2b5a0 <__sfp+0x64>
   2b56a:	4b16      	ldr	r3, [pc, #88]	; (2b5c4 <__sfp+0x88>)
   2b56c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2b570:	6665      	str	r5, [r4, #100]	; 0x64
   2b572:	60e3      	str	r3, [r4, #12]
   2b574:	f7f1 fc82 	bl	1ce7c <__retarget_lock_init_recursive>
   2b578:	f7ff ff96 	bl	2b4a8 <__sfp_lock_release>
   2b57c:	2208      	movs	r2, #8
   2b57e:	4629      	mov	r1, r5
   2b580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2b584:	6025      	str	r5, [r4, #0]
   2b586:	61a5      	str	r5, [r4, #24]
   2b588:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2b58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2b590:	f002 fb22 	bl	2dbd8 <memset>
   2b594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2b598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2b59c:	4620      	mov	r0, r4
   2b59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b5a0:	3468      	adds	r4, #104	; 0x68
   2b5a2:	e7d9      	b.n	2b558 <__sfp+0x1c>
   2b5a4:	2104      	movs	r1, #4
   2b5a6:	4638      	mov	r0, r7
   2b5a8:	f002 ff61 	bl	2e46e <__sfmoreglue>
   2b5ac:	4604      	mov	r4, r0
   2b5ae:	6030      	str	r0, [r6, #0]
   2b5b0:	2800      	cmp	r0, #0
   2b5b2:	d1d5      	bne.n	2b560 <__sfp+0x24>
   2b5b4:	f7ff ff78 	bl	2b4a8 <__sfp_lock_release>
   2b5b8:	230c      	movs	r3, #12
   2b5ba:	603b      	str	r3, [r7, #0]
   2b5bc:	e7ee      	b.n	2b59c <__sfp+0x60>
   2b5be:	bf00      	nop
   2b5c0:	0002ef14 	.word	0x0002ef14
   2b5c4:	ffff0001 	.word	0xffff0001

0002b5c8 <__smakebuf_r>:
   2b5c8:	898b      	ldrh	r3, [r1, #12]
   2b5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b5cc:	079d      	lsls	r5, r3, #30
   2b5ce:	4606      	mov	r6, r0
   2b5d0:	460c      	mov	r4, r1
   2b5d2:	d507      	bpl.n	2b5e4 <__smakebuf_r+0x1c>
   2b5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2b5d8:	6023      	str	r3, [r4, #0]
   2b5da:	6123      	str	r3, [r4, #16]
   2b5dc:	2301      	movs	r3, #1
   2b5de:	6163      	str	r3, [r4, #20]
   2b5e0:	b002      	add	sp, #8
   2b5e2:	bd70      	pop	{r4, r5, r6, pc}
   2b5e4:	ab01      	add	r3, sp, #4
   2b5e6:	466a      	mov	r2, sp
   2b5e8:	f002 ff76 	bl	2e4d8 <__swhatbuf_r>
   2b5ec:	9900      	ldr	r1, [sp, #0]
   2b5ee:	4605      	mov	r5, r0
   2b5f0:	4630      	mov	r0, r6
   2b5f2:	f7fd fca3 	bl	28f3c <_malloc_r>
   2b5f6:	b948      	cbnz	r0, 2b60c <__smakebuf_r+0x44>
   2b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2b5fc:	059a      	lsls	r2, r3, #22
   2b5fe:	d4ef      	bmi.n	2b5e0 <__smakebuf_r+0x18>
   2b600:	f023 0303 	bic.w	r3, r3, #3
   2b604:	f043 0302 	orr.w	r3, r3, #2
   2b608:	81a3      	strh	r3, [r4, #12]
   2b60a:	e7e3      	b.n	2b5d4 <__smakebuf_r+0xc>
   2b60c:	4b0d      	ldr	r3, [pc, #52]	; (2b644 <__smakebuf_r+0x7c>)
   2b60e:	62b3      	str	r3, [r6, #40]	; 0x28
   2b610:	89a3      	ldrh	r3, [r4, #12]
   2b612:	6020      	str	r0, [r4, #0]
   2b614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b618:	6120      	str	r0, [r4, #16]
   2b61a:	81a3      	strh	r3, [r4, #12]
   2b61c:	9b00      	ldr	r3, [sp, #0]
   2b61e:	6163      	str	r3, [r4, #20]
   2b620:	9b01      	ldr	r3, [sp, #4]
   2b622:	b15b      	cbz	r3, 2b63c <__smakebuf_r+0x74>
   2b624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2b628:	4630      	mov	r0, r6
   2b62a:	f000 f839 	bl	2b6a0 <_isatty_r>
   2b62e:	b128      	cbz	r0, 2b63c <__smakebuf_r+0x74>
   2b630:	89a3      	ldrh	r3, [r4, #12]
   2b632:	f023 0303 	bic.w	r3, r3, #3
   2b636:	f043 0301 	orr.w	r3, r3, #1
   2b63a:	81a3      	strh	r3, [r4, #12]
   2b63c:	89a0      	ldrh	r0, [r4, #12]
   2b63e:	4305      	orrs	r5, r0
   2b640:	81a5      	strh	r5, [r4, #12]
   2b642:	e7cd      	b.n	2b5e0 <__smakebuf_r+0x18>
   2b644:	0002b491 	.word	0x0002b491

0002b648 <raise>:
   2b648:	4b02      	ldr	r3, [pc, #8]	; (2b654 <raise+0xc>)
   2b64a:	4601      	mov	r1, r0
   2b64c:	6818      	ldr	r0, [r3, #0]
   2b64e:	f002 bfc3 	b.w	2e5d8 <_raise_r>
   2b652:	bf00      	nop
   2b654:	2000c6e4 	.word	0x2000c6e4

0002b658 <_kill_r>:
   2b658:	b538      	push	{r3, r4, r5, lr}
   2b65a:	2300      	movs	r3, #0
   2b65c:	4d06      	ldr	r5, [pc, #24]	; (2b678 <_kill_r+0x20>)
   2b65e:	4604      	mov	r4, r0
   2b660:	4608      	mov	r0, r1
   2b662:	4611      	mov	r1, r2
   2b664:	602b      	str	r3, [r5, #0]
   2b666:	f000 fbb4 	bl	2bdd2 <_kill>
   2b66a:	1c43      	adds	r3, r0, #1
   2b66c:	d102      	bne.n	2b674 <_kill_r+0x1c>
   2b66e:	682b      	ldr	r3, [r5, #0]
   2b670:	b103      	cbz	r3, 2b674 <_kill_r+0x1c>
   2b672:	6023      	str	r3, [r4, #0]
   2b674:	bd38      	pop	{r3, r4, r5, pc}
   2b676:	bf00      	nop
   2b678:	2000d4b8 	.word	0x2000d4b8

0002b67c <_fstat_r>:
   2b67c:	b538      	push	{r3, r4, r5, lr}
   2b67e:	2300      	movs	r3, #0
   2b680:	4d06      	ldr	r5, [pc, #24]	; (2b69c <_fstat_r+0x20>)
   2b682:	4604      	mov	r4, r0
   2b684:	4608      	mov	r0, r1
   2b686:	4611      	mov	r1, r2
   2b688:	602b      	str	r3, [r5, #0]
   2b68a:	f000 fba6 	bl	2bdda <_fstat>
   2b68e:	1c43      	adds	r3, r0, #1
   2b690:	d102      	bne.n	2b698 <_fstat_r+0x1c>
   2b692:	682b      	ldr	r3, [r5, #0]
   2b694:	b103      	cbz	r3, 2b698 <_fstat_r+0x1c>
   2b696:	6023      	str	r3, [r4, #0]
   2b698:	bd38      	pop	{r3, r4, r5, pc}
   2b69a:	bf00      	nop
   2b69c:	2000d4b8 	.word	0x2000d4b8

0002b6a0 <_isatty_r>:
   2b6a0:	b538      	push	{r3, r4, r5, lr}
   2b6a2:	2300      	movs	r3, #0
   2b6a4:	4d05      	ldr	r5, [pc, #20]	; (2b6bc <_isatty_r+0x1c>)
   2b6a6:	4604      	mov	r4, r0
   2b6a8:	4608      	mov	r0, r1
   2b6aa:	602b      	str	r3, [r5, #0]
   2b6ac:	f000 fb8c 	bl	2bdc8 <_isatty>
   2b6b0:	1c43      	adds	r3, r0, #1
   2b6b2:	d102      	bne.n	2b6ba <_isatty_r+0x1a>
   2b6b4:	682b      	ldr	r3, [r5, #0]
   2b6b6:	b103      	cbz	r3, 2b6ba <_isatty_r+0x1a>
   2b6b8:	6023      	str	r3, [r4, #0]
   2b6ba:	bd38      	pop	{r3, r4, r5, pc}
   2b6bc:	2000d4b8 	.word	0x2000d4b8

0002b6c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b6c0:	4770      	bx	lr

0002b6c2 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2b6c2:	b40c      	push	{r2, r3}
   2b6c4:	4603      	mov	r3, r0
   2b6c6:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2b6c8:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2b6ca:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2b6cc:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   2b6ce:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   2b6d2:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2b6d4:	4798      	blx	r3
	va_end(args);

	return res;
}
   2b6d6:	b003      	add	sp, #12
   2b6d8:	f85d eb04 	ldr.w	lr, [sp], #4
   2b6dc:	b002      	add	sp, #8
   2b6de:	4770      	bx	lr

0002b6e0 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2b6e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2b6e4:	b2db      	uxtb	r3, r3
   2b6e6:	2b09      	cmp	r3, #9
   2b6e8:	d802      	bhi.n	2b6f0 <char2hex+0x10>
		*x = c - '0';
   2b6ea:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2b6ec:	2000      	movs	r0, #0
   2b6ee:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2b6f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2b6f4:	2b05      	cmp	r3, #5
   2b6f6:	d802      	bhi.n	2b6fe <char2hex+0x1e>
		*x = c - 'a' + 10;
   2b6f8:	3857      	subs	r0, #87	; 0x57
   2b6fa:	7008      	strb	r0, [r1, #0]
   2b6fc:	e7f6      	b.n	2b6ec <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2b6fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2b702:	2b05      	cmp	r3, #5
   2b704:	d801      	bhi.n	2b70a <char2hex+0x2a>
		*x = c - 'A' + 10;
   2b706:	3837      	subs	r0, #55	; 0x37
   2b708:	e7f7      	b.n	2b6fa <char2hex+0x1a>
		return -EINVAL;
   2b70a:	f06f 0015 	mvn.w	r0, #21
}
   2b70e:	4770      	bx	lr

0002b710 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2b710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b712:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2b714:	f001 0001 	and.w	r0, r1, #1
   2b718:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2b71c:	429d      	cmp	r5, r3
   2b71e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2b722:	d903      	bls.n	2b72c <hex2bin+0x1c>
		return 0;
   2b724:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2b726:	4628      	mov	r0, r5
   2b728:	b003      	add	sp, #12
   2b72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2b72c:	b158      	cbz	r0, 2b746 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2b72e:	7820      	ldrb	r0, [r4, #0]
   2b730:	f10d 0107 	add.w	r1, sp, #7
   2b734:	f7ff ffd4 	bl	2b6e0 <char2hex>
   2b738:	2800      	cmp	r0, #0
   2b73a:	dbf3      	blt.n	2b724 <hex2bin+0x14>
		buf[0] = dec;
   2b73c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2b740:	3401      	adds	r4, #1
		buf[0] = dec;
   2b742:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2b746:	3401      	adds	r4, #1
   2b748:	4416      	add	r6, r2
   2b74a:	42b2      	cmp	r2, r6
   2b74c:	d0eb      	beq.n	2b726 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2b74e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2b752:	f10d 0107 	add.w	r1, sp, #7
   2b756:	f7ff ffc3 	bl	2b6e0 <char2hex>
   2b75a:	2800      	cmp	r0, #0
   2b75c:	dbe2      	blt.n	2b724 <hex2bin+0x14>
		buf[i] = dec << 4;
   2b75e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b762:	011b      	lsls	r3, r3, #4
   2b764:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2b766:	f814 0b02 	ldrb.w	r0, [r4], #2
   2b76a:	f7ff ffb9 	bl	2b6e0 <char2hex>
   2b76e:	2800      	cmp	r0, #0
   2b770:	dbd8      	blt.n	2b724 <hex2bin+0x14>
		buf[i] += dec;
   2b772:	7813      	ldrb	r3, [r2, #0]
   2b774:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2b778:	440b      	add	r3, r1
   2b77a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2b77e:	e7e4      	b.n	2b74a <hex2bin+0x3a>

0002b780 <sys_notify_validate>:
	if (notify == NULL) {
   2b780:	4603      	mov	r3, r0
   2b782:	b140      	cbz	r0, 2b796 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2b784:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2b786:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2b78a:	2a02      	cmp	r2, #2
   2b78c:	d006      	beq.n	2b79c <sys_notify_validate+0x1c>
   2b78e:	2a03      	cmp	r2, #3
   2b790:	d004      	beq.n	2b79c <sys_notify_validate+0x1c>
   2b792:	2a01      	cmp	r2, #1
   2b794:	d005      	beq.n	2b7a2 <sys_notify_validate+0x22>
		return -EINVAL;
   2b796:	f06f 0015 	mvn.w	r0, #21
}
   2b79a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2b79c:	681a      	ldr	r2, [r3, #0]
   2b79e:	2a00      	cmp	r2, #0
   2b7a0:	d0f9      	beq.n	2b796 <sys_notify_validate+0x16>
		notify->result = 0;
   2b7a2:	2000      	movs	r0, #0
   2b7a4:	6098      	str	r0, [r3, #8]
   2b7a6:	4770      	bx	lr

0002b7a8 <arch_printk_char_out>:
}
   2b7a8:	2000      	movs	r0, #0
   2b7aa:	4770      	bx	lr

0002b7ac <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   2b7ac:	b40f      	push	{r0, r1, r2, r3}
   2b7ae:	b507      	push	{r0, r1, r2, lr}
   2b7b0:	a904      	add	r1, sp, #16
   2b7b2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2b7b6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2b7b8:	f7ef f882 	bl	1a8c0 <vprintk>

	va_end(ap);
}
   2b7bc:	b003      	add	sp, #12
   2b7be:	f85d eb04 	ldr.w	lr, [sp], #4
   2b7c2:	b004      	add	sp, #16
   2b7c4:	4770      	bx	lr

0002b7c6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2b7c6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2b7c8:	f013 0307 	ands.w	r3, r3, #7
   2b7cc:	d105      	bne.n	2b7da <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2b7ce:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2b7d0:	2b00      	cmp	r3, #0
   2b7d2:	bf0c      	ite	eq
   2b7d4:	2000      	moveq	r0, #0
   2b7d6:	2003      	movne	r0, #3
   2b7d8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2b7da:	2b02      	cmp	r3, #2
   2b7dc:	d105      	bne.n	2b7ea <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2b7de:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   2b7e0:	2b00      	cmp	r3, #0
   2b7e2:	bf14      	ite	ne
   2b7e4:	2000      	movne	r0, #0
   2b7e6:	2004      	moveq	r0, #4
   2b7e8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2b7ea:	2b01      	cmp	r3, #1
   2b7ec:	d105      	bne.n	2b7fa <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2b7ee:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2b7f0:	2b00      	cmp	r3, #0
   2b7f2:	bf0c      	ite	eq
   2b7f4:	2000      	moveq	r0, #0
   2b7f6:	2005      	movne	r0, #5
   2b7f8:	4770      	bx	lr
	int evt = EVT_NOP;
   2b7fa:	2000      	movs	r0, #0
}
   2b7fc:	4770      	bx	lr

0002b7fe <notify_one>:
{
   2b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b802:	460d      	mov	r5, r1
   2b804:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2b806:	4619      	mov	r1, r3
   2b808:	1d28      	adds	r0, r5, #4
{
   2b80a:	4690      	mov	r8, r2
   2b80c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2b80e:	f7ef f81d 	bl	1a84c <sys_notify_finalize>
	if (cb) {
   2b812:	4604      	mov	r4, r0
   2b814:	b138      	cbz	r0, 2b826 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2b816:	4633      	mov	r3, r6
   2b818:	4642      	mov	r2, r8
   2b81a:	4629      	mov	r1, r5
   2b81c:	4638      	mov	r0, r7
   2b81e:	46a4      	mov	ip, r4
}
   2b820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2b824:	4760      	bx	ip
}
   2b826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b82a <validate_args>:
{
   2b82a:	b510      	push	{r4, lr}
   2b82c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2b82e:	b140      	cbz	r0, 2b842 <validate_args+0x18>
   2b830:	b139      	cbz	r1, 2b842 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2b832:	1d08      	adds	r0, r1, #4
   2b834:	f7ff ffa4 	bl	2b780 <sys_notify_validate>
	if ((rv == 0)
   2b838:	b928      	cbnz	r0, 2b846 <validate_args+0x1c>
	    && ((cli->notify.flags
   2b83a:	68a3      	ldr	r3, [r4, #8]
   2b83c:	f033 0303 	bics.w	r3, r3, #3
   2b840:	d001      	beq.n	2b846 <validate_args+0x1c>
		rv = -EINVAL;
   2b842:	f06f 0015 	mvn.w	r0, #21
}
   2b846:	bd10      	pop	{r4, pc}

0002b848 <onoff_manager_init>:
{
   2b848:	b538      	push	{r3, r4, r5, lr}
   2b84a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2b84c:	4605      	mov	r5, r0
   2b84e:	b158      	cbz	r0, 2b868 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2b850:	b151      	cbz	r1, 2b868 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2b852:	680b      	ldr	r3, [r1, #0]
   2b854:	b143      	cbz	r3, 2b868 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2b856:	684b      	ldr	r3, [r1, #4]
   2b858:	b133      	cbz	r3, 2b868 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2b85a:	2220      	movs	r2, #32
   2b85c:	2100      	movs	r1, #0
   2b85e:	f002 f9bb 	bl	2dbd8 <memset>
	return 0;
   2b862:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2b864:	612c      	str	r4, [r5, #16]
}
   2b866:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2b868:	f06f 0015 	mvn.w	r0, #21
   2b86c:	e7fb      	b.n	2b866 <onoff_manager_init+0x1e>

0002b86e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2b86e:	4604      	mov	r4, r0
   2b870:	b508      	push	{r3, lr}
   2b872:	4608      	mov	r0, r1
   2b874:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2b876:	461a      	mov	r2, r3
   2b878:	47a0      	blx	r4
	return z_impl_z_current_get();
   2b87a:	f7fc fa49 	bl	27d10 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2b87e:	f7f1 f87d 	bl	1c97c <z_impl_k_thread_abort>

0002b882 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2b882:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2b886:	8840      	ldrh	r0, [r0, #2]
}
   2b888:	0840      	lsrs	r0, r0, #1
   2b88a:	4770      	bx	lr

0002b88c <free_list_add>:
{
   2b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b88e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2b890:	f7ff fff7 	bl	2b882 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2b894:	fab0 f080 	clz	r0, r0
   2b898:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2b89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2b8a0:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2b8a4:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2b8a6:	1d17      	adds	r7, r2, #4
{
   2b8a8:	460c      	mov	r4, r1
   2b8aa:	3206      	adds	r2, #6
   2b8ac:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2b8ae:	b956      	cbnz	r6, 2b8c6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2b8b0:	2101      	movs	r1, #1
   2b8b2:	fa01 f000 	lsl.w	r0, r1, r0
   2b8b6:	68d9      	ldr	r1, [r3, #12]
   2b8b8:	4301      	orrs	r1, r0
   2b8ba:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2b8bc:	f8cc 4010 	str.w	r4, [ip, #16]
   2b8c0:	53dd      	strh	r5, [r3, r7]
   2b8c2:	529d      	strh	r5, [r3, r2]
}
   2b8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2b8c6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2b8c8:	3104      	adds	r1, #4
   2b8ca:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2b8cc:	53d8      	strh	r0, [r3, r7]
   2b8ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2b8d2:	529e      	strh	r6, [r3, r2]
   2b8d4:	80c5      	strh	r5, [r0, #6]
   2b8d6:	525d      	strh	r5, [r3, r1]
   2b8d8:	e7f4      	b.n	2b8c4 <free_list_add+0x38>

0002b8da <free_list_remove_bidx>:
{
   2b8da:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2b8dc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2b8e0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2b8e2:	4299      	cmp	r1, r3
   2b8e4:	f102 0104 	add.w	r1, r2, #4
   2b8e8:	d10a      	bne.n	2b900 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2b8ea:	2301      	movs	r3, #1
   2b8ec:	fa03 f202 	lsl.w	r2, r3, r2
   2b8f0:	68c3      	ldr	r3, [r0, #12]
   2b8f2:	ea23 0302 	bic.w	r3, r3, r2
   2b8f6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2b8f8:	2300      	movs	r3, #0
   2b8fa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2b8fe:	bd10      	pop	{r4, pc}
   2b900:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2b902:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2b906:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2b90a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2b90e:	80cb      	strh	r3, [r1, #6]
   2b910:	8082      	strh	r2, [r0, #4]
}
   2b912:	e7f4      	b.n	2b8fe <free_list_remove_bidx+0x24>

0002b914 <free_list_remove>:
{
   2b914:	b508      	push	{r3, lr}
   2b916:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2b918:	f7ff ffb3 	bl	2b882 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2b91c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2b920:	4618      	mov	r0, r3
}
   2b922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2b926:	f1c2 021f 	rsb	r2, r2, #31
   2b92a:	f7ff bfd6 	b.w	2b8da <free_list_remove_bidx>

0002b92e <alloc_chunk>:
{
   2b92e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b932:	fab1 f581 	clz	r5, r1
   2b936:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2b93a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   2b93e:	693a      	ldr	r2, [r7, #16]
{
   2b940:	4603      	mov	r3, r0
   2b942:	460e      	mov	r6, r1
	if (b->next) {
   2b944:	b1c2      	cbz	r2, 2b978 <alloc_chunk+0x4a>
   2b946:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   2b94a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2b94c:	4618      	mov	r0, r3
   2b94e:	4621      	mov	r1, r4
   2b950:	f7ff ff97 	bl	2b882 <chunk_size>
   2b954:	42b0      	cmp	r0, r6
   2b956:	d306      	bcc.n	2b966 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   2b958:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2b95a:	4618      	mov	r0, r3
   2b95c:	f7ff ffbd 	bl	2b8da <free_list_remove_bidx>
}
   2b960:	4620      	mov	r0, r4
   2b962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2b966:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
   2b96a:	88c0      	ldrh	r0, [r0, #6]
		} while (--i && b->next != first);
   2b96c:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   2b970:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2b972:	d001      	beq.n	2b978 <alloc_chunk+0x4a>
   2b974:	4282      	cmp	r2, r0
   2b976:	d1e8      	bne.n	2b94a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2b978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b97c:	f1c5 0220 	rsb	r2, r5, #32
   2b980:	4094      	lsls	r4, r2
   2b982:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2b984:	4014      	ands	r4, r2
   2b986:	d0eb      	beq.n	2b960 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   2b988:	fa94 f2a4 	rbit	r2, r4
   2b98c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2b990:	1d11      	adds	r1, r2, #4
   2b992:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2b996:	4621      	mov	r1, r4
   2b998:	e7df      	b.n	2b95a <alloc_chunk+0x2c>

0002b99a <merge_chunks>:
{
   2b99a:	b538      	push	{r3, r4, r5, lr}
   2b99c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2b99e:	f7ff ff70 	bl	2b882 <chunk_size>
{
   2b9a2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2b9a4:	4604      	mov	r4, r0
   2b9a6:	4611      	mov	r1, r2
   2b9a8:	4618      	mov	r0, r3
   2b9aa:	f7ff ff6a 	bl	2b882 <chunk_size>
   2b9ae:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2b9b0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2b9b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2b9b6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2b9b8:	4618      	mov	r0, r3
   2b9ba:	f7ff ff62 	bl	2b882 <chunk_size>
	void *cmem = &buf[c];
   2b9be:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2b9c0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2b9c4:	bd38      	pop	{r3, r4, r5, pc}

0002b9c6 <split_chunks>:
{
   2b9c6:	b538      	push	{r3, r4, r5, lr}
   2b9c8:	460c      	mov	r4, r1
   2b9ca:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2b9cc:	f7ff ff59 	bl	2b882 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2b9d0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2b9d2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2b9d4:	4405      	add	r5, r0
   2b9d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2b9da:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2b9dc:	8060      	strh	r0, [r4, #2]
   2b9de:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2b9e2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2b9e4:	8044      	strh	r4, [r0, #2]
   2b9e6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2b9ea:	4618      	mov	r0, r3
   2b9ec:	4611      	mov	r1, r2
   2b9ee:	f7ff ff48 	bl	2b882 <chunk_size>
	void *cmem = &buf[c];
   2b9f2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2b9f4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2b9f8:	bd38      	pop	{r3, r4, r5, pc}

0002b9fa <free_chunk>:
{
   2b9fa:	b538      	push	{r3, r4, r5, lr}
   2b9fc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2b9fe:	f7ff ff40 	bl	2b882 <chunk_size>
   2ba02:	460c      	mov	r4, r1
   2ba04:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2ba06:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2ba0a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2ba0c:	07da      	lsls	r2, r3, #31
   2ba0e:	d40a      	bmi.n	2ba26 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2ba10:	4628      	mov	r0, r5
   2ba12:	f7ff ff7f 	bl	2b914 <free_list_remove>
	return c + chunk_size(h, c);
   2ba16:	4621      	mov	r1, r4
   2ba18:	4628      	mov	r0, r5
   2ba1a:	f7ff ff32 	bl	2b882 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2ba1e:	1822      	adds	r2, r4, r0
   2ba20:	4628      	mov	r0, r5
   2ba22:	f7ff ffba 	bl	2b99a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2ba26:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2ba2a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2ba2c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2ba30:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2ba32:	07db      	lsls	r3, r3, #31
   2ba34:	d40c      	bmi.n	2ba50 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2ba36:	4628      	mov	r0, r5
   2ba38:	f7ff ff6c 	bl	2b914 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2ba3c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2ba40:	4622      	mov	r2, r4
   2ba42:	1a61      	subs	r1, r4, r1
   2ba44:	4628      	mov	r0, r5
   2ba46:	f7ff ffa8 	bl	2b99a <merge_chunks>
   2ba4a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2ba4e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2ba50:	4621      	mov	r1, r4
   2ba52:	4628      	mov	r0, r5
}
   2ba54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2ba58:	f7ff bf18 	b.w	2b88c <free_list_add>

0002ba5c <sys_heap_alloc>:
{
   2ba5c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2ba5e:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ba60:	b909      	cbnz	r1, 2ba66 <sys_heap_alloc+0xa>
		return NULL;
   2ba62:	2000      	movs	r0, #0
}
   2ba64:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2ba66:	68ab      	ldr	r3, [r5, #8]
   2ba68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2ba6c:	d9f9      	bls.n	2ba62 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2ba6e:	310b      	adds	r1, #11
   2ba70:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2ba72:	4621      	mov	r1, r4
   2ba74:	4628      	mov	r0, r5
   2ba76:	f7ff ff5a 	bl	2b92e <alloc_chunk>
	if (c == 0U) {
   2ba7a:	4606      	mov	r6, r0
   2ba7c:	2800      	cmp	r0, #0
   2ba7e:	d0f0      	beq.n	2ba62 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2ba80:	4601      	mov	r1, r0
   2ba82:	4628      	mov	r0, r5
   2ba84:	f7ff fefd 	bl	2b882 <chunk_size>
   2ba88:	42a0      	cmp	r0, r4
   2ba8a:	d907      	bls.n	2ba9c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2ba8c:	4628      	mov	r0, r5
   2ba8e:	1932      	adds	r2, r6, r4
   2ba90:	f7ff ff99 	bl	2b9c6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2ba94:	4611      	mov	r1, r2
   2ba96:	4628      	mov	r0, r5
   2ba98:	f7ff fef8 	bl	2b88c <free_list_add>
	void *cmem = &buf[c];
   2ba9c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2baa0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2baa2:	8853      	ldrh	r3, [r2, #2]
   2baa4:	3004      	adds	r0, #4
   2baa6:	f043 0301 	orr.w	r3, r3, #1
   2baaa:	8053      	strh	r3, [r2, #2]
	return mem;
   2baac:	e7da      	b.n	2ba64 <sys_heap_alloc+0x8>

0002baae <outs>:
{
   2baae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bab2:	4607      	mov	r7, r0
   2bab4:	4688      	mov	r8, r1
   2bab6:	4615      	mov	r5, r2
   2bab8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2baba:	4614      	mov	r4, r2
   2babc:	42b4      	cmp	r4, r6
   2babe:	eba4 0005 	sub.w	r0, r4, r5
   2bac2:	d302      	bcc.n	2baca <outs+0x1c>
   2bac4:	b93e      	cbnz	r6, 2bad6 <outs+0x28>
   2bac6:	7823      	ldrb	r3, [r4, #0]
   2bac8:	b12b      	cbz	r3, 2bad6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2baca:	4641      	mov	r1, r8
   2bacc:	f814 0b01 	ldrb.w	r0, [r4], #1
   2bad0:	47b8      	blx	r7
		if (rc < 0) {
   2bad2:	2800      	cmp	r0, #0
   2bad4:	daf2      	bge.n	2babc <outs+0xe>
}
   2bad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bada <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2bada:	4040      	eors	r0, r0
   2badc:	f380 8811 	msr	BASEPRI, r0
   2bae0:	f04f 0004 	mov.w	r0, #4
   2bae4:	df02      	svc	2
}
   2bae6:	4770      	bx	lr

0002bae8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2bae8:	4770      	bx	lr

0002baea <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2baea:	2806      	cmp	r0, #6
   2baec:	d108      	bne.n	2bb00 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2baee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2baf2:	2201      	movs	r2, #1
   2baf4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2baf8:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2bafc:	bf20      	wfe
    while (true)
   2bafe:	e7fd      	b.n	2bafc <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2bb00:	4770      	bx	lr

0002bb02 <pm_state_exit_post_ops>:
   2bb02:	2300      	movs	r3, #0
   2bb04:	f383 8811 	msr	BASEPRI, r3
   2bb08:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2bb0c:	4770      	bx	lr

0002bb0e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   2bb0e:	b40f      	push	{r0, r1, r2, r3}
   2bb10:	b507      	push	{r0, r1, r2, lr}
   2bb12:	a904      	add	r1, sp, #16
   2bb14:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2bb18:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2bb1a:	f7ee fed1 	bl	1a8c0 <vprintk>
	va_end(ap);
}
   2bb1e:	b003      	add	sp, #12
   2bb20:	f85d eb04 	ldr.w	lr, [sp], #4
   2bb24:	b004      	add	sp, #16
   2bb26:	4770      	bx	lr

0002bb28 <sntp_init>:
{
   2bb28:	b570      	push	{r4, r5, r6, lr}
   2bb2a:	460d      	mov	r5, r1
   2bb2c:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   2bb2e:	4604      	mov	r4, r0
   2bb30:	b330      	cbz	r0, 2bb80 <sntp_init+0x58>
   2bb32:	b329      	cbz	r1, 2bb80 <sntp_init+0x58>
   2bb34:	2214      	movs	r2, #20
   2bb36:	2100      	movs	r1, #0
   2bb38:	f002 f84e 	bl	2dbd8 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2bb3c:	8828      	ldrh	r0, [r5, #0]
   2bb3e:	2211      	movs	r2, #17
   2bb40:	2102      	movs	r1, #2
   2bb42:	f7ef ff8b 	bl	1ba5c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   2bb46:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   2bb48:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   2bb4a:	da04      	bge.n	2bb56 <sntp_init+0x2e>
		return -errno;
   2bb4c:	f000 f94a 	bl	2bde4 <__errno>
   2bb50:	6800      	ldr	r0, [r0, #0]
   2bb52:	4240      	negs	r0, r0
}
   2bb54:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   2bb56:	4632      	mov	r2, r6
   2bb58:	4629      	mov	r1, r5
   2bb5a:	f000 f854 	bl	2bc06 <z_impl_zsock_connect>
	if (ret < 0) {
   2bb5e:	2800      	cmp	r0, #0
   2bb60:	68e0      	ldr	r0, [r4, #12]
   2bb62:	da02      	bge.n	2bb6a <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   2bb64:	f000 f82b 	bl	2bbbe <z_impl_zsock_close>
   2bb68:	e7f0      	b.n	2bb4c <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2bb6a:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   2bb6c:	68a3      	ldr	r3, [r4, #8]
   2bb6e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2bb72:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   2bb76:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   2bb78:	8091      	strh	r1, [r2, #4]
	return 0;
   2bb7a:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   2bb7c:	60a3      	str	r3, [r4, #8]
	return 0;
   2bb7e:	e7e9      	b.n	2bb54 <sntp_init+0x2c>
		return -EFAULT;
   2bb80:	f06f 000d 	mvn.w	r0, #13
   2bb84:	e7e6      	b.n	2bb54 <sntp_init+0x2c>

0002bb86 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   2bb86:	b110      	cbz	r0, 2bb8e <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   2bb88:	68c0      	ldr	r0, [r0, #12]
   2bb8a:	f000 b818 	b.w	2bbbe <z_impl_zsock_close>
	}
}
   2bb8e:	4770      	bx	lr

0002bb90 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   2bb90:	f7f0 b8dc 	b.w	1bd4c <socket_offload_getaddrinfo>

0002bb94 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   2bb94:	f7f0 b90e 	b.w	1bdb4 <socket_offload_freeaddrinfo>

0002bb98 <z_fdtable_call_ioctl>:
{
   2bb98:	b40c      	push	{r2, r3}
   2bb9a:	4603      	mov	r3, r0
   2bb9c:	b507      	push	{r0, r1, r2, lr}
   2bb9e:	aa04      	add	r2, sp, #16
   2bba0:	4608      	mov	r0, r1
   2bba2:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   2bba6:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2bba8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2bbaa:	4798      	blx	r3
}
   2bbac:	b003      	add	sp, #12
   2bbae:	f85d eb04 	ldr.w	lr, [sp], #4
   2bbb2:	b002      	add	sp, #8
   2bbb4:	4770      	bx	lr

0002bbb6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2bbb6:	f7fa bbb3 	b.w	26320 <z_impl_k_mutex_lock>

0002bbba <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2bbba:	f7fa bc83 	b.w	264c4 <z_impl_k_mutex_unlock>

0002bbbe <z_impl_zsock_close>:
{
   2bbbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   2bbc0:	4669      	mov	r1, sp
   2bbc2:	aa01      	add	r2, sp, #4
{
   2bbc4:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   2bbc6:	f7ee fdbb 	bl	1a740 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   2bbca:	4604      	mov	r4, r0
   2bbcc:	b940      	cbnz	r0, 2bbe0 <z_impl_zsock_close+0x22>
		errno = EBADF;
   2bbce:	f000 f909 	bl	2bde4 <__errno>
   2bbd2:	2309      	movs	r3, #9
		return -1;
   2bbd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   2bbd8:	6003      	str	r3, [r0, #0]
}
   2bbda:	4620      	mov	r0, r4
   2bbdc:	b003      	add	sp, #12
   2bbde:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   2bbe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bbe4:	9801      	ldr	r0, [sp, #4]
   2bbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bbea:	f7ff ffe4 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   2bbee:	9b00      	ldr	r3, [sp, #0]
   2bbf0:	4620      	mov	r0, r4
   2bbf2:	689b      	ldr	r3, [r3, #8]
   2bbf4:	4798      	blx	r3
   2bbf6:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   2bbf8:	9801      	ldr	r0, [sp, #4]
   2bbfa:	f7ff ffde 	bl	2bbba <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   2bbfe:	4628      	mov	r0, r5
   2bc00:	f7ee fe06 	bl	1a810 <z_free_fd>
	return ret;
   2bc04:	e7e9      	b.n	2bbda <z_impl_zsock_close+0x1c>

0002bc06 <z_impl_zsock_connect>:
{
   2bc06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bc08:	460d      	mov	r5, r1
   2bc0a:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2bc0c:	4669      	mov	r1, sp
   2bc0e:	aa01      	add	r2, sp, #4
   2bc10:	f7ee fd96 	bl	1a740 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   2bc14:	4604      	mov	r4, r0
   2bc16:	b110      	cbz	r0, 2bc1e <z_impl_zsock_connect+0x18>
   2bc18:	9b00      	ldr	r3, [sp, #0]
   2bc1a:	699b      	ldr	r3, [r3, #24]
   2bc1c:	b943      	cbnz	r3, 2bc30 <z_impl_zsock_connect+0x2a>
   2bc1e:	f000 f8e1 	bl	2bde4 <__errno>
   2bc22:	2309      	movs	r3, #9
   2bc24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bc28:	6003      	str	r3, [r0, #0]
}
   2bc2a:	4620      	mov	r0, r4
   2bc2c:	b002      	add	sp, #8
   2bc2e:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   2bc30:	9801      	ldr	r0, [sp, #4]
   2bc32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bc36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bc3a:	f7ff ffbc 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
   2bc3e:	9b00      	ldr	r3, [sp, #0]
   2bc40:	4632      	mov	r2, r6
   2bc42:	4629      	mov	r1, r5
   2bc44:	4620      	mov	r0, r4
   2bc46:	699b      	ldr	r3, [r3, #24]
   2bc48:	4798      	blx	r3
   2bc4a:	4604      	mov	r4, r0
   2bc4c:	9801      	ldr	r0, [sp, #4]
   2bc4e:	f7ff ffb4 	bl	2bbba <k_mutex_unlock.isra.0>
   2bc52:	e7ea      	b.n	2bc2a <z_impl_zsock_connect+0x24>

0002bc54 <z_impl_zsock_sendto>:
{
   2bc54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2bc58:	460d      	mov	r5, r1
   2bc5a:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2bc5c:	a902      	add	r1, sp, #8
   2bc5e:	aa03      	add	r2, sp, #12
{
   2bc60:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2bc62:	f7ee fd6d 	bl	1a740 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2bc66:	4604      	mov	r4, r0
   2bc68:	b110      	cbz	r0, 2bc70 <z_impl_zsock_sendto+0x1c>
   2bc6a:	9b02      	ldr	r3, [sp, #8]
   2bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2bc6e:	b94b      	cbnz	r3, 2bc84 <z_impl_zsock_sendto+0x30>
   2bc70:	f000 f8b8 	bl	2bde4 <__errno>
   2bc74:	2309      	movs	r3, #9
   2bc76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bc7a:	6003      	str	r3, [r0, #0]
}
   2bc7c:	4620      	mov	r0, r4
   2bc7e:	b004      	add	sp, #16
   2bc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   2bc84:	9803      	ldr	r0, [sp, #12]
   2bc86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bc8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bc8e:	f7ff ff92 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
   2bc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bc94:	4632      	mov	r2, r6
   2bc96:	9301      	str	r3, [sp, #4]
   2bc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc9a:	4629      	mov	r1, r5
   2bc9c:	9300      	str	r3, [sp, #0]
   2bc9e:	9b02      	ldr	r3, [sp, #8]
   2bca0:	4620      	mov	r0, r4
   2bca2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   2bca6:	463b      	mov	r3, r7
   2bca8:	47c0      	blx	r8
   2bcaa:	4604      	mov	r4, r0
   2bcac:	9803      	ldr	r0, [sp, #12]
   2bcae:	f7ff ff84 	bl	2bbba <k_mutex_unlock.isra.0>
   2bcb2:	e7e3      	b.n	2bc7c <z_impl_zsock_sendto+0x28>

0002bcb4 <z_impl_zsock_recvfrom>:
{
   2bcb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2bcb8:	460d      	mov	r5, r1
   2bcba:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   2bcbc:	a902      	add	r1, sp, #8
   2bcbe:	aa03      	add	r2, sp, #12
{
   2bcc0:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   2bcc2:	f7ee fd3d 	bl	1a740 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2bcc6:	4604      	mov	r4, r0
   2bcc8:	b110      	cbz	r0, 2bcd0 <z_impl_zsock_recvfrom+0x1c>
   2bcca:	9b02      	ldr	r3, [sp, #8]
   2bccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bcce:	b94b      	cbnz	r3, 2bce4 <z_impl_zsock_recvfrom+0x30>
   2bcd0:	f000 f888 	bl	2bde4 <__errno>
   2bcd4:	2309      	movs	r3, #9
   2bcd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bcda:	6003      	str	r3, [r0, #0]
}
   2bcdc:	4620      	mov	r0, r4
   2bcde:	b004      	add	sp, #16
   2bce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   2bce4:	9803      	ldr	r0, [sp, #12]
   2bce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bcea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bcee:	f7ff ff62 	bl	2bbb6 <k_mutex_lock.constprop.0.isra.0>
   2bcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bcf4:	4632      	mov	r2, r6
   2bcf6:	9301      	str	r3, [sp, #4]
   2bcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bcfa:	4629      	mov	r1, r5
   2bcfc:	9300      	str	r3, [sp, #0]
   2bcfe:	9b02      	ldr	r3, [sp, #8]
   2bd00:	4620      	mov	r0, r4
   2bd02:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   2bd06:	463b      	mov	r3, r7
   2bd08:	47c0      	blx	r8
   2bd0a:	4604      	mov	r4, r0
   2bd0c:	9803      	ldr	r0, [sp, #12]
   2bd0e:	f7ff ff54 	bl	2bbba <k_mutex_unlock.isra.0>
   2bd12:	e7e3      	b.n	2bcdc <z_impl_zsock_recvfrom+0x28>

0002bd14 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   2bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   2bd18:	1e14      	subs	r4, r2, #0
{
   2bd1a:	4605      	mov	r5, r0
   2bd1c:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   2bd1e:	db13      	blt.n	2bd48 <z_impl_zsock_poll+0x34>
   2bd20:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2bd24:	f240 30e7 	movw	r0, #999	; 0x3e7
   2bd28:	2100      	movs	r1, #0
   2bd2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bd2e:	2300      	movs	r3, #0
   2bd30:	fbc4 0107 	smlal	r0, r1, r4, r7
   2bd34:	f7ed f9b4 	bl	190a0 <__aeabi_uldivmod>
   2bd38:	4602      	mov	r2, r0
   2bd3a:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   2bd3c:	4631      	mov	r1, r6
   2bd3e:	4628      	mov	r0, r5
}
   2bd40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   2bd44:	f7ef bed0 	b.w	1bae8 <zsock_poll_internal>
		timeout = K_FOREVER;
   2bd48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd4c:	4613      	mov	r3, r2
   2bd4e:	e7f5      	b.n	2bd3c <z_impl_zsock_poll+0x28>

0002bd50 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2bd50:	b510      	push	{r4, lr}
   2bd52:	b40f      	push	{r0, r1, r2, r3}
   2bd54:	f7f0 f9ce 	bl	1c0f4 <before_nse>
   2bd58:	bc0f      	pop	{r0, r1, r2, r3}
   2bd5a:	f7ec f945 	bl	17fe8 <spm_request_random_number_nse>
   2bd5e:	b40f      	push	{r0, r1, r2, r3}
   2bd60:	f7f0 f9d2 	bl	1c108 <after_nse>
   2bd64:	bc0f      	pop	{r0, r1, r2, r3}
   2bd66:	bd10      	pop	{r4, pc}

0002bd68 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2bd68:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bd6a:	6800      	ldr	r0, [r0, #0]
   2bd6c:	f7f0 b9f4 	b.w	1c158 <z_arm_fatal_error>

0002bd70 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2bd70:	2100      	movs	r1, #0
   2bd72:	2001      	movs	r0, #1
   2bd74:	f7f0 b9f0 	b.w	1c158 <z_arm_fatal_error>

0002bd78 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bd78:	b508      	push	{r3, lr}
	handler();
   2bd7a:	f7f0 fa81 	bl	1c280 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2bd7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bd82:	f7f0 bb43 	b.w	1c40c <z_arm_exc_exit>

0002bd86 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bd86:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2bd88:	f383 880b 	msr	PSPLIM, r3
}
   2bd8c:	4770      	bx	lr

0002bd8e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bd8e:	4770      	bx	lr

0002bd90 <z_arm_restore_fp_context>:
   2bd90:	4770      	bx	lr

0002bd92 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bd92:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bd96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2bd9a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bd9c:	bf08      	it	eq
   2bd9e:	f06f 0015 	mvneq.w	r0, #21
   2bda2:	4770      	bx	lr

0002bda4 <_stdout_hook_default>:
}
   2bda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bda8:	4770      	bx	lr

0002bdaa <_stdin_hook_default>:
}
   2bdaa:	2000      	movs	r0, #0
   2bdac:	4770      	bx	lr

0002bdae <_read>:
{
   2bdae:	4608      	mov	r0, r1
   2bdb0:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bdb2:	f7f1 b81b 	b.w	1cdec <z_impl_zephyr_read_stdin>

0002bdb6 <_write>:
{
   2bdb6:	4608      	mov	r0, r1
   2bdb8:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bdba:	f7f1 b82b 	b.w	1ce14 <z_impl_zephyr_write_stdout>

0002bdbe <_close>:
   2bdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bdc2:	4770      	bx	lr

0002bdc4 <_lseek>:
}
   2bdc4:	2000      	movs	r0, #0
   2bdc6:	4770      	bx	lr

0002bdc8 <_isatty>:
}
   2bdc8:	2802      	cmp	r0, #2
   2bdca:	bfcc      	ite	gt
   2bdcc:	2000      	movgt	r0, #0
   2bdce:	2001      	movle	r0, #1
   2bdd0:	4770      	bx	lr

0002bdd2 <_kill>:
}
   2bdd2:	2000      	movs	r0, #0
   2bdd4:	4770      	bx	lr

0002bdd6 <_getpid>:
}
   2bdd6:	2000      	movs	r0, #0
   2bdd8:	4770      	bx	lr

0002bdda <_fstat>:
	st->st_mode = S_IFCHR;
   2bdda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2bdde:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2bde0:	604b      	str	r3, [r1, #4]
}
   2bde2:	4770      	bx	lr

0002bde4 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bde4:	f7f9 beec 	b.w	25bc0 <z_impl_z_errno>

0002bde8 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   2bde8:	b508      	push	{r3, lr}
	net_if_init();
   2bdea:	f7f1 f983 	bl	1d0f4 <net_if_init>
	net_if_post_init();
   2bdee:	f7f1 f9b3 	bl	1d158 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   2bdf2:	2000      	movs	r0, #0
   2bdf4:	bd08      	pop	{r3, pc}

0002bdf6 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   2bdf6:	b110      	cbz	r0, 2bdfe <net_if_l2+0x8>
   2bdf8:	6800      	ldr	r0, [r0, #0]
   2bdfa:	b100      	cbz	r0, 2bdfe <net_if_l2+0x8>
	return iface->if_dev->l2;
   2bdfc:	6840      	ldr	r0, [r0, #4]
}
   2bdfe:	4770      	bx	lr

0002be00 <net_if_flag_is_set>:
	if (iface == NULL) {
   2be00:	b130      	cbz	r0, 2be10 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2be02:	6803      	ldr	r3, [r0, #0]
   2be04:	330c      	adds	r3, #12
   2be06:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2be0a:	4108      	asrs	r0, r1
   2be0c:	f000 0001 	and.w	r0, r0, #1
}
   2be10:	4770      	bx	lr

0002be12 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   2be12:	b510      	push	{r4, lr}
   2be14:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   2be16:	f7ff ffee 	bl	2bdf6 <net_if_l2>
   2be1a:	b128      	cbz	r0, 2be28 <l2_flags_get.isra.0+0x16>
   2be1c:	68c2      	ldr	r2, [r0, #12]
   2be1e:	b11a      	cbz	r2, 2be28 <l2_flags_get.isra.0+0x16>
}
   2be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   2be24:	4618      	mov	r0, r3
   2be26:	4710      	bx	r2
}
   2be28:	bd10      	pop	{r4, pc}

0002be2a <set_on_state>:
	__asm__ volatile(
   2be2a:	f04f 0320 	mov.w	r3, #32
   2be2e:	f3ef 8211 	mrs	r2, BASEPRI
   2be32:	f383 8812 	msr	BASEPRI_MAX, r3
   2be36:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2be3a:	6803      	ldr	r3, [r0, #0]
   2be3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2be40:	f043 0302 	orr.w	r3, r3, #2
   2be44:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2be46:	f382 8811 	msr	BASEPRI, r2
   2be4a:	f3bf 8f6f 	isb	sy
}
   2be4e:	4770      	bx	lr

0002be50 <async_start>:
{
   2be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be52:	9f06      	ldr	r7, [sp, #24]
   2be54:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   2be56:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2be58:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2be5a:	f04f 0020 	mov.w	r0, #32
   2be5e:	f3ef 8c11 	mrs	ip, BASEPRI
   2be62:	f380 8812 	msr	BASEPRI_MAX, r0
   2be66:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2be6a:	260c      	movs	r6, #12
   2be6c:	fb06 4601 	mla	r6, r6, r1, r4
   2be70:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2be72:	f000 0e07 	and.w	lr, r0, #7
   2be76:	f1be 0f01 	cmp.w	lr, #1
   2be7a:	d110      	bne.n	2be9e <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2be7c:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
   2be7e:	2600      	movs	r6, #0
	__asm__ volatile(
   2be80:	f38c 8811 	msr	BASEPRI, ip
   2be84:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2be88:	b93e      	cbnz	r6, 2be9a <async_start+0x4a>
	subdata->cb = cb;
   2be8a:	200c      	movs	r0, #12
   2be8c:	4341      	muls	r1, r0
   2be8e:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2be90:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2be94:	686b      	ldr	r3, [r5, #4]
   2be96:	585b      	ldr	r3, [r3, r1]
   2be98:	4798      	blx	r3
}
   2be9a:	4630      	mov	r0, r6
   2be9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2be9e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2bea2:	4287      	cmp	r7, r0
   2bea4:	bf14      	ite	ne
   2bea6:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2beaa:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2beae:	e7e7      	b.n	2be80 <async_start+0x30>

0002beb0 <api_start>:
{
   2beb0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2beb2:	2480      	movs	r4, #128	; 0x80
   2beb4:	9400      	str	r4, [sp, #0]
   2beb6:	f7ff ffcb 	bl	2be50 <async_start>
}
   2beba:	b002      	add	sp, #8
   2bebc:	bd10      	pop	{r4, pc}

0002bebe <onoff_started_callback>:
	return &data->mgr[type];
   2bebe:	6900      	ldr	r0, [r0, #16]
   2bec0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2bec2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2bec6:	2100      	movs	r1, #0
   2bec8:	4710      	bx	r2

0002beca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2beca:	2000      	movs	r0, #0
   2becc:	f7f5 bb86 	b.w	215dc <nrfx_clock_start>

0002bed0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2bed0:	2000      	movs	r0, #0
   2bed2:	f7f5 bbcf 	b.w	21674 <nrfx_clock_stop>

0002bed6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2bed6:	2280      	movs	r2, #128	; 0x80
   2bed8:	f7f1 b99c 	b.w	1d214 <stop>

0002bedc <blocking_start_callback>:
{
   2bedc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2bede:	f7fa bc6d 	b.w	267bc <z_impl_k_sem_give>

0002bee2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bee2:	6843      	ldr	r3, [r0, #4]
}
   2bee4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bee6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2bee8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2beea:	600b      	str	r3, [r1, #0]
}
   2beec:	4770      	bx	lr

0002beee <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2beee:	6843      	ldr	r3, [r0, #4]
   2bef0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2bef2:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2bef4:	4042      	eors	r2, r0
   2bef6:	400a      	ands	r2, r1
   2bef8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2befa:	605a      	str	r2, [r3, #4]
}
   2befc:	2000      	movs	r0, #0
   2befe:	4770      	bx	lr

0002bf00 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf00:	6843      	ldr	r3, [r0, #4]
}
   2bf02:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf04:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2bf06:	6099      	str	r1, [r3, #8]
}
   2bf08:	4770      	bx	lr

0002bf0a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf0a:	6843      	ldr	r3, [r0, #4]
}
   2bf0c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf0e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2bf10:	60d9      	str	r1, [r3, #12]
}
   2bf12:	4770      	bx	lr

0002bf14 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf14:	6843      	ldr	r3, [r0, #4]
}
   2bf16:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2bf18:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2bf1a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2bf1c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2bf1e:	6053      	str	r3, [r2, #4]
}
   2bf20:	4770      	bx	lr

0002bf22 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   2bf22:	b510      	push	{r4, lr}
   2bf24:	4604      	mov	r4, r0
   2bf26:	2200      	movs	r2, #0
   2bf28:	200a      	movs	r0, #10
   2bf2a:	2101      	movs	r1, #1
   2bf2c:	f7f0 f974 	bl	1c218 <z_arm_irq_priority_set>
   2bf30:	4620      	mov	r0, r4
   2bf32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bf36:	f7f1 bd3d 	b.w	1d9b4 <init_twim>

0002bf3a <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2bf3a:	b530      	push	{r4, r5, lr}
   2bf3c:	4604      	mov	r4, r0
	while (*count) {
   2bf3e:	6808      	ldr	r0, [r1, #0]
   2bf40:	b908      	cbnz	r0, 2bf46 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   2bf42:	6010      	str	r0, [r2, #0]
	return NULL;
   2bf44:	e004      	b.n	2bf50 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   2bf46:	6823      	ldr	r3, [r4, #0]
   2bf48:	685d      	ldr	r5, [r3, #4]
   2bf4a:	b115      	cbz	r5, 2bf52 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   2bf4c:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   2bf4e:	6015      	str	r5, [r2, #0]
}
   2bf50:	bd30      	pop	{r4, r5, pc}
		++(*current);
   2bf52:	3308      	adds	r3, #8
		--(*count);
   2bf54:	3801      	subs	r0, #1
		++(*current);
   2bf56:	6023      	str	r3, [r4, #0]
		--(*count);
   2bf58:	6008      	str	r0, [r1, #0]
   2bf5a:	e7f0      	b.n	2bf3e <spi_context_get_next_buf.constprop.0+0x4>

0002bf5c <_spi_context_cs_control>:
{
   2bf5c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2bf5e:	6803      	ldr	r3, [r0, #0]
{
   2bf60:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2bf62:	b1e3      	cbz	r3, 2bf9e <_spi_context_cs_control+0x42>
   2bf64:	6898      	ldr	r0, [r3, #8]
   2bf66:	b1d0      	cbz	r0, 2bf9e <_spi_context_cs_control+0x42>
   2bf68:	6805      	ldr	r5, [r0, #0]
   2bf6a:	b1c5      	cbz	r5, 2bf9e <_spi_context_cs_control+0x42>
		if (on) {
   2bf6c:	b149      	cbz	r1, 2bf82 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2bf6e:	2101      	movs	r1, #1
   2bf70:	f7f1 fe8c 	bl	1dc8c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2bf74:	6823      	ldr	r3, [r4, #0]
   2bf76:	689b      	ldr	r3, [r3, #8]
   2bf78:	6898      	ldr	r0, [r3, #8]
}
   2bf7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2bf7e:	f001 bd1d 	b.w	2d9bc <z_impl_k_busy_wait>
			if (!force_off &&
   2bf82:	b912      	cbnz	r2, 2bf8a <_spi_context_cs_control+0x2e>
   2bf84:	889b      	ldrh	r3, [r3, #4]
   2bf86:	04db      	lsls	r3, r3, #19
   2bf88:	d409      	bmi.n	2bf9e <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2bf8a:	6880      	ldr	r0, [r0, #8]
   2bf8c:	f001 fd16 	bl	2d9bc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2bf90:	6823      	ldr	r3, [r4, #0]
   2bf92:	2100      	movs	r1, #0
   2bf94:	6898      	ldr	r0, [r3, #8]
}
   2bf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2bf9a:	f7f1 be77 	b.w	1dc8c <gpio_pin_set_dt.isra.0>
}
   2bf9e:	bd38      	pop	{r3, r4, r5, pc}

0002bfa0 <spi_context_unlock_unconditionally>:
{
   2bfa0:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2bfa2:	2201      	movs	r2, #1
   2bfa4:	2100      	movs	r1, #0
{
   2bfa6:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2bfa8:	f7ff ffd8 	bl	2bf5c <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2bfac:	69a3      	ldr	r3, [r4, #24]
   2bfae:	b933      	cbnz	r3, 2bfbe <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2bfb0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2bfb2:	f104 0010 	add.w	r0, r4, #16
}
   2bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bfba:	f7fa bbff 	b.w	267bc <z_impl_k_sem_give>
   2bfbe:	bd10      	pop	{r4, pc}

0002bfc0 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
   2bfc0:	6900      	ldr	r0, [r0, #16]
{
   2bfc2:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2bfc4:	6803      	ldr	r3, [r0, #0]
   2bfc6:	428b      	cmp	r3, r1
   2bfc8:	d106      	bne.n	2bfd8 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2bfca:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2bfce:	b934      	cbnz	r4, 2bfde <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2bfd0:	f7ff ffe6 	bl	2bfa0 <spi_context_unlock_unconditionally>
	return 0;
   2bfd4:	4620      	mov	r0, r4
}
   2bfd6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2bfd8:	f06f 0015 	mvn.w	r0, #21
   2bfdc:	e7fb      	b.n	2bfd6 <spi_nrfx_release+0x16>
		return -EBUSY;
   2bfde:	f06f 000f 	mvn.w	r0, #15
   2bfe2:	e7f8      	b.n	2bfd6 <spi_nrfx_release+0x16>

0002bfe4 <entropy_cc3xx_rng_init>:
		return -EINVAL;
	}
#endif

	return 0;
}
   2bfe4:	2000      	movs	r0, #0
   2bfe6:	4770      	bx	lr

0002bfe8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2bfe8:	4770      	bx	lr

0002bfea <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   2bfea:	f001 bce7 	b.w	2d9bc <z_impl_k_busy_wait>

0002bfee <nrf_modem_os_errno_set>:
{
   2bfee:	b510      	push	{r4, lr}
   2bff0:	4604      	mov	r4, r0
	errno = err_code;
   2bff2:	f7ff fef7 	bl	2bde4 <__errno>
   2bff6:	6004      	str	r4, [r0, #0]
}
   2bff8:	bd10      	pop	{r4, pc}

0002bffa <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   2bffa:	f001 bc46 	b.w	2d88a <k_is_in_isr>

0002bffe <read_task_create>:
{
   2bffe:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   2c000:	201c      	movs	r0, #28
   2c002:	2200      	movs	r2, #0
   2c004:	2106      	movs	r1, #6
   2c006:	f7f0 f907 	bl	1c218 <z_arm_irq_priority_set>
}
   2c00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   2c00e:	201c      	movs	r0, #28
   2c010:	f7f0 b8d0 	b.w	1c1b4 <arch_irq_enable>

0002c014 <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   2c014:	2000      	movs	r0, #0
   2c016:	4770      	bx	lr

0002c018 <z_to_nrf_flags>:
{
   2c018:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   2c01a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   2c01e:	bf18      	it	ne
   2c020:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   2c022:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   2c024:	bf48      	it	mi
   2c026:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   2c02a:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   2c02c:	bf48      	it	mi
   2c02e:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   2c032:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   2c034:	bf48      	it	mi
   2c036:	f040 0010 	orrmi.w	r0, r0, #16
}
   2c03a:	4770      	bx	lr

0002c03c <z_to_nrf_protocol>:
	switch (proto) {
   2c03c:	2811      	cmp	r0, #17
   2c03e:	d013      	beq.n	2c068 <z_to_nrf_protocol+0x2c>
   2c040:	dc06      	bgt.n	2c050 <z_to_nrf_protocol+0x14>
   2c042:	b1a8      	cbz	r0, 2c070 <z_to_nrf_protocol+0x34>
		return NRF_IPPROTO_TCP;
   2c044:	2806      	cmp	r0, #6
   2c046:	bf14      	ite	ne
   2c048:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2c04c:	2001      	moveq	r0, #1
   2c04e:	4770      	bx	lr
	switch (proto) {
   2c050:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2c054:	d00a      	beq.n	2c06c <z_to_nrf_protocol+0x30>
   2c056:	f240 1311 	movw	r3, #273	; 0x111
		return NRF_SPROTO_DTLS1v2;
   2c05a:	4298      	cmp	r0, r3
   2c05c:	bf14      	ite	ne
   2c05e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   2c062:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   2c066:	4770      	bx	lr
	switch (proto) {
   2c068:	2002      	movs	r0, #2
   2c06a:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   2c06c:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   2c070:	4770      	bx	lr

0002c072 <nrf91_socket_offload_getsockopt>:
{
   2c072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c076:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   2c078:	2300      	movs	r3, #0
{
   2c07a:	b086      	sub	sp, #24
   2c07c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   2c080:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2c084:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   2c088:	2901      	cmp	r1, #1
{
   2c08a:	460e      	mov	r6, r1
   2c08c:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   2c08e:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   2c090:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   2c092:	d002      	beq.n	2c09a <nrf91_socket_offload_getsockopt+0x28>
   2c094:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2c098:	d13a      	bne.n	2c110 <nrf91_socket_offload_getsockopt+0x9e>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2c09a:	4629      	mov	r1, r5
   2c09c:	4630      	mov	r0, r6
   2c09e:	aa02      	add	r2, sp, #8
   2c0a0:	f7f2 fd5c 	bl	1eb5c <z_to_nrf_optname>
   2c0a4:	2800      	cmp	r0, #0
   2c0a6:	db33      	blt.n	2c110 <nrf91_socket_offload_getsockopt+0x9e>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2c0a8:	2e01      	cmp	r6, #1
   2c0aa:	d123      	bne.n	2c0f4 <nrf91_socket_offload_getsockopt+0x82>
   2c0ac:	f1a5 0314 	sub.w	r3, r5, #20
   2c0b0:	2b01      	cmp	r3, #1
   2c0b2:	d81f      	bhi.n	2c0f4 <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   2c0b4:	2308      	movs	r3, #8
   2c0b6:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   2c0b8:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2c0ba:	aa03      	add	r2, sp, #12
   2c0bc:	4638      	mov	r0, r7
   2c0be:	9200      	str	r2, [sp, #0]
   2c0c0:	4631      	mov	r1, r6
   2c0c2:	9a02      	ldr	r2, [sp, #8]
   2c0c4:	f001 fb6e 	bl	2d7a4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2c0c8:	4607      	mov	r7, r0
   2c0ca:	b978      	cbnz	r0, 2c0ec <nrf91_socket_offload_getsockopt+0x7a>
   2c0cc:	b174      	cbz	r4, 2c0ec <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   2c0ce:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   2c0d0:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   2c0d2:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   2c0d6:	d109      	bne.n	2c0ec <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   2c0d8:	2d04      	cmp	r5, #4
   2c0da:	d10d      	bne.n	2c0f8 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   2c0dc:	6820      	ldr	r0, [r4, #0]
   2c0de:	b128      	cbz	r0, 2c0ec <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   2c0e0:	f7ff ff85 	bl	2bfee <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   2c0e4:	f7ff fe7e 	bl	2bde4 <__errno>
   2c0e8:	6803      	ldr	r3, [r0, #0]
   2c0ea:	6023      	str	r3, [r4, #0]
}
   2c0ec:	4638      	mov	r0, r7
   2c0ee:	b006      	add	sp, #24
   2c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c0f4:	4623      	mov	r3, r4
   2c0f6:	e7e0      	b.n	2c0ba <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   2c0f8:	3d14      	subs	r5, #20
   2c0fa:	2d01      	cmp	r5, #1
   2c0fc:	d8f6      	bhi.n	2c0ec <nrf91_socket_offload_getsockopt+0x7a>
					nrf_timeo.tv_sec;
   2c0fe:	9b04      	ldr	r3, [sp, #16]
   2c100:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   2c104:	9b05      	ldr	r3, [sp, #20]
   2c106:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   2c108:	2310      	movs	r3, #16
   2c10a:	f8c8 3000 	str.w	r3, [r8]
   2c10e:	e7ed      	b.n	2c0ec <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   2c110:	f7ff fe68 	bl	2bde4 <__errno>
   2c114:	236d      	movs	r3, #109	; 0x6d
	return retval;
   2c116:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   2c11a:	6003      	str	r3, [r0, #0]
	return retval;
   2c11c:	e7e6      	b.n	2c0ec <nrf91_socket_offload_getsockopt+0x7a>

0002c11e <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   2c11e:	6800      	ldr	r0, [r0, #0]
   2c120:	f001 baf0 	b.w	2d704 <nrf_listen>

0002c124 <nrf91_socket_offload_freeaddrinfo>:
{
   2c124:	b538      	push	{r3, r4, r5, lr}
   2c126:	4604      	mov	r4, r0
	while (next != NULL) {
   2c128:	b904      	cbnz	r4, 2c12c <nrf91_socket_offload_freeaddrinfo+0x8>
}
   2c12a:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   2c12c:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   2c12e:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   2c130:	f001 fd0a 	bl	2db48 <k_free>
		k_free(this);
   2c134:	4620      	mov	r0, r4
   2c136:	f001 fd07 	bl	2db48 <k_free>
		next = next->ai_next;
   2c13a:	462c      	mov	r4, r5
   2c13c:	e7f4      	b.n	2c128 <nrf91_socket_offload_freeaddrinfo+0x4>

0002c13e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   2c13e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   2c140:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   2c142:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   2c144:	4603      	mov	r3, r0
{
   2c146:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   2c148:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c14c:	f101 0420 	add.w	r4, r1, #32
   2c150:	f101 0210 	add.w	r2, r1, #16
   2c154:	f852 5b04 	ldr.w	r5, [r2], #4
   2c158:	42a2      	cmp	r2, r4
   2c15a:	f843 5b04 	str.w	r5, [r3], #4
   2c15e:	d1f9      	bne.n	2c154 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   2c160:	6a0b      	ldr	r3, [r1, #32]
   2c162:	7503      	strb	r3, [r0, #20]
}
   2c164:	bd30      	pop	{r4, r5, pc}

0002c166 <z_to_nrf_ipv6>:
{
   2c166:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   2c168:	2124      	movs	r1, #36	; 0x24
   2c16a:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2c16c:	8841      	ldrh	r1, [r0, #2]
{
   2c16e:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   2c170:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   2c172:	210a      	movs	r1, #10
{
   2c174:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   2c176:	6059      	str	r1, [r3, #4]
   2c178:	1d04      	adds	r4, r0, #4
   2c17a:	f103 0610 	add.w	r6, r3, #16
   2c17e:	f100 0714 	add.w	r7, r0, #20
   2c182:	4635      	mov	r5, r6
   2c184:	6820      	ldr	r0, [r4, #0]
   2c186:	6861      	ldr	r1, [r4, #4]
   2c188:	3408      	adds	r4, #8
   2c18a:	c503      	stmia	r5!, {r0, r1}
   2c18c:	42bc      	cmp	r4, r7
   2c18e:	462e      	mov	r6, r5
   2c190:	d1f7      	bne.n	2c182 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   2c192:	7d12      	ldrb	r2, [r2, #20]
   2c194:	621a      	str	r2, [r3, #32]
}
   2c196:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c198 <nrf91_socket_offload_sendto>:
{
   2c198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c19c:	b08d      	sub	sp, #52	; 0x34
   2c19e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c1a0:	460d      	mov	r5, r1
   2c1a2:	4616      	mov	r6, r2
   2c1a4:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   2c1a6:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   2c1aa:	b964      	cbnz	r4, 2c1c6 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2c1ac:	4618      	mov	r0, r3
   2c1ae:	f7ff ff33 	bl	2c018 <z_to_nrf_flags>
   2c1b2:	4632      	mov	r2, r6
   2c1b4:	4603      	mov	r3, r0
   2c1b6:	4629      	mov	r1, r5
   2c1b8:	4640      	mov	r0, r8
   2c1ba:	9415      	str	r4, [sp, #84]	; 0x54
}
   2c1bc:	b00d      	add	sp, #52	; 0x34
   2c1be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   2c1c2:	f001 ba58 	b.w	2d676 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   2c1c6:	8823      	ldrh	r3, [r4, #0]
   2c1c8:	2b01      	cmp	r3, #1
   2c1ca:	d11a      	bne.n	2c202 <nrf91_socket_offload_sendto+0x6a>
	nrf_out->sin_port = ptr->sin_port;
   2c1cc:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c1ce:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   2c1d2:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   2c1d6:	2302      	movs	r3, #2
   2c1d8:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c1da:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2c1dc:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c1de:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c1e0:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   2c1e4:	f7ff ff18 	bl	2c018 <z_to_nrf_flags>
   2c1e8:	4603      	mov	r3, r0
   2c1ea:	aa03      	add	r2, sp, #12
   2c1ec:	f8cd 9004 	str.w	r9, [sp, #4]
   2c1f0:	9200      	str	r2, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2c1f2:	4632      	mov	r2, r6
   2c1f4:	4629      	mov	r1, r5
   2c1f6:	4640      	mov	r0, r8
   2c1f8:	f001 fa3d 	bl	2d676 <nrf_sendto>
}
   2c1fc:	b00d      	add	sp, #52	; 0x34
   2c1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET6) {
   2c202:	2b02      	cmp	r3, #2
   2c204:	d10d      	bne.n	2c222 <nrf91_socket_offload_sendto+0x8a>
		z_to_nrf_ipv6(to, &ipv6);
   2c206:	f10d 090c 	add.w	r9, sp, #12
   2c20a:	4649      	mov	r1, r9
   2c20c:	4620      	mov	r0, r4
   2c20e:	f7ff ffaa 	bl	2c166 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   2c212:	4638      	mov	r0, r7
   2c214:	f7ff ff00 	bl	2c018 <z_to_nrf_flags>
   2c218:	2224      	movs	r2, #36	; 0x24
   2c21a:	4603      	mov	r3, r0
   2c21c:	e9cd 9200 	strd	r9, r2, [sp]
   2c220:	e7e7      	b.n	2c1f2 <nrf91_socket_offload_sendto+0x5a>
	errno = ENOTSUP;
   2c222:	f7ff fddf 	bl	2bde4 <__errno>
   2c226:	2386      	movs	r3, #134	; 0x86
   2c228:	6003      	str	r3, [r0, #0]
	return retval;
   2c22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c22e:	e7e5      	b.n	2c1fc <nrf91_socket_offload_sendto+0x64>

0002c230 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2c230:	2300      	movs	r3, #0
{
   2c232:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   2c234:	e9cd 3300 	strd	r3, r3, [sp]
   2c238:	f7ff ffae 	bl	2c198 <nrf91_socket_offload_sendto>
}
   2c23c:	b003      	add	sp, #12
   2c23e:	f85d fb04 	ldr.w	pc, [sp], #4

0002c242 <nrf91_socket_offload_connect>:
{
   2c242:	4603      	mov	r3, r0
   2c244:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2c246:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2c248:	880b      	ldrh	r3, [r1, #0]
{
   2c24a:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2c24c:	2b01      	cmp	r3, #1
{
   2c24e:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2c250:	d10f      	bne.n	2c272 <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2c252:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c254:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2c256:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2c25a:	2302      	movs	r3, #2
   2c25c:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c25e:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c260:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c264:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2c266:	4620      	mov	r0, r4
   2c268:	a901      	add	r1, sp, #4
   2c26a:	f001 fa3a 	bl	2d6e2 <nrf_connect>
}
   2c26e:	b00a      	add	sp, #40	; 0x28
   2c270:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2c272:	2b02      	cmp	r3, #2
   2c274:	d104      	bne.n	2c280 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2c276:	a901      	add	r1, sp, #4
   2c278:	f7ff ff75 	bl	2c166 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   2c27c:	2224      	movs	r2, #36	; 0x24
   2c27e:	e7f2      	b.n	2c266 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   2c280:	4620      	mov	r0, r4
   2c282:	f001 fa2e 	bl	2d6e2 <nrf_connect>
		if (retval < 0) {
   2c286:	2800      	cmp	r0, #0
   2c288:	daf1      	bge.n	2c26e <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   2c28a:	f7ff fdab 	bl	2bde4 <__errno>
   2c28e:	2386      	movs	r3, #134	; 0x86
   2c290:	6003      	str	r3, [r0, #0]
	return retval;
   2c292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c296:	e7ea      	b.n	2c26e <nrf91_socket_offload_connect+0x2c>

0002c298 <nrf91_socket_offload_bind>:
{
   2c298:	4603      	mov	r3, r0
   2c29a:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   2c29c:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   2c29e:	880b      	ldrh	r3, [r1, #0]
{
   2c2a0:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   2c2a2:	2b01      	cmp	r3, #1
{
   2c2a4:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   2c2a6:	d10f      	bne.n	2c2c8 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   2c2a8:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c2aa:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   2c2ac:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   2c2b0:	2302      	movs	r3, #2
   2c2b2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c2b4:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2c2b6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   2c2ba:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2c2bc:	4620      	mov	r0, r4
   2c2be:	a901      	add	r1, sp, #4
   2c2c0:	f001 fa44 	bl	2d74c <nrf_bind>
}
   2c2c4:	b00a      	add	sp, #40	; 0x28
   2c2c6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   2c2c8:	2b02      	cmp	r3, #2
   2c2ca:	d104      	bne.n	2c2d6 <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   2c2cc:	a901      	add	r1, sp, #4
   2c2ce:	f7ff ff4a 	bl	2c166 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   2c2d2:	2224      	movs	r2, #36	; 0x24
   2c2d4:	e7f2      	b.n	2c2bc <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   2c2d6:	f7ff fd85 	bl	2bde4 <__errno>
   2c2da:	2386      	movs	r3, #134	; 0x86
   2c2dc:	6003      	str	r3, [r0, #0]
	return retval;
   2c2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c2e2:	e7ef      	b.n	2c2c4 <nrf91_socket_offload_bind+0x2c>

0002c2e4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2c2e4:	f7fa b81c 	b.w	26320 <z_impl_k_mutex_lock>

0002c2e8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2c2e8:	f7fa b8ec 	b.w	264c4 <z_impl_k_mutex_unlock>

0002c2ec <nrf91_socket_offload_recvfrom>:
{
   2c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2f0:	4698      	mov	r8, r3
   2c2f2:	b08d      	sub	sp, #52	; 0x34
   2c2f4:	4606      	mov	r6, r0
   2c2f6:	e9dd 5916 	ldrd	r5, r9, [sp, #88]	; 0x58
	k_mutex_unlock(ctx->lock);
   2c2fa:	6840      	ldr	r0, [r0, #4]
{
   2c2fc:	460c      	mov	r4, r1
   2c2fe:	4617      	mov	r7, r2
	k_mutex_unlock(ctx->lock);
   2c300:	f7ff fff2 	bl	2c2e8 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2c304:	4640      	mov	r0, r8
   2c306:	f7ff fe87 	bl	2c018 <z_to_nrf_flags>
   2c30a:	4680      	mov	r8, r0
	if (from == NULL) {
   2c30c:	b9a5      	cbnz	r5, 2c338 <nrf91_socket_offload_recvfrom+0x4c>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2c30e:	4603      	mov	r3, r0
   2c310:	4621      	mov	r1, r4
   2c312:	463a      	mov	r2, r7
   2c314:	e9cd 5500 	strd	r5, r5, [sp]
   2c318:	6830      	ldr	r0, [r6, #0]
   2c31a:	f001 f9c7 	bl	2d6ac <nrf_recvfrom>
   2c31e:	4604      	mov	r4, r0
	if (ctx->lock) {
   2c320:	6870      	ldr	r0, [r6, #4]
   2c322:	b128      	cbz	r0, 2c330 <nrf91_socket_offload_recvfrom+0x44>
		k_mutex_lock(ctx->lock, K_FOREVER);
   2c324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c32c:	f7ff ffda 	bl	2c2e4 <k_mutex_lock.constprop.0.isra.0>
}
   2c330:	4620      	mov	r0, r4
   2c332:	b00d      	add	sp, #52	; 0x34
   2c334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   2c338:	f04f 0b24 	mov.w	fp, #36	; 0x24
   2c33c:	f10d 0a0c 	add.w	sl, sp, #12
   2c340:	465a      	mov	r2, fp
   2c342:	2100      	movs	r1, #0
   2c344:	4650      	mov	r0, sl
   2c346:	f001 fc47 	bl	2dbd8 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2c34a:	ab02      	add	r3, sp, #8
   2c34c:	4621      	mov	r1, r4
   2c34e:	e9cd a300 	strd	sl, r3, [sp]
   2c352:	463a      	mov	r2, r7
   2c354:	4643      	mov	r3, r8
   2c356:	6830      	ldr	r0, [r6, #0]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   2c358:	f8cd b008 	str.w	fp, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2c35c:	f001 f9a6 	bl	2d6ac <nrf_recvfrom>
		if (retval < 0) {
   2c360:	1e04      	subs	r4, r0, #0
   2c362:	dbdd      	blt.n	2c320 <nrf91_socket_offload_recvfrom+0x34>
		if (cliaddr->sa_family == NRF_AF_INET) {
   2c364:	9b04      	ldr	r3, [sp, #16]
   2c366:	2b02      	cmp	r3, #2
   2c368:	d10a      	bne.n	2c380 <nrf91_socket_offload_recvfrom+0x94>
	ptr->sin_port = nrf_in->sin_port;
   2c36a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2c36e:	806b      	strh	r3, [r5, #2]
	ptr->sin_family = AF_INET;
   2c370:	2301      	movs	r3, #1
   2c372:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2c374:	9b06      	ldr	r3, [sp, #24]
   2c376:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   2c378:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   2c37a:	f8c9 3000 	str.w	r3, [r9]
   2c37e:	e7cf      	b.n	2c320 <nrf91_socket_offload_recvfrom+0x34>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   2c380:	2b0a      	cmp	r3, #10
   2c382:	d1cd      	bne.n	2c320 <nrf91_socket_offload_recvfrom+0x34>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   2c384:	4651      	mov	r1, sl
   2c386:	4628      	mov	r0, r5
   2c388:	f7ff fed9 	bl	2c13e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   2c38c:	2318      	movs	r3, #24
   2c38e:	e7f4      	b.n	2c37a <nrf91_socket_offload_recvfrom+0x8e>

0002c390 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2c390:	2300      	movs	r3, #0
{
   2c392:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   2c394:	e9cd 3300 	strd	r3, r3, [sp]
   2c398:	f7ff ffa8 	bl	2c2ec <nrf91_socket_offload_recvfrom>
}
   2c39c:	b003      	add	sp, #12
   2c39e:	f85d fb04 	ldr.w	pc, [sp], #4

0002c3a2 <nrf91_socket_offload_close>:
{
   2c3a2:	b538      	push	{r3, r4, r5, lr}
   2c3a4:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   2c3a6:	6800      	ldr	r0, [r0, #0]
   2c3a8:	f001 f958 	bl	2d65c <nrf_close>
	if (retval == 0) {
   2c3ac:	4604      	mov	r4, r0
   2c3ae:	b910      	cbnz	r0, 2c3b6 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   2c3b0:	4628      	mov	r0, r5
   2c3b2:	f7f2 ff01 	bl	1f1b8 <release_ctx>
}
   2c3b6:	4620      	mov	r0, r4
   2c3b8:	bd38      	pop	{r3, r4, r5, pc}

0002c3ba <nrf91_socket_offload_setsockopt>:
{
   2c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   2c3be:	2901      	cmp	r1, #1
{
   2c3c0:	b086      	sub	sp, #24
   2c3c2:	460c      	mov	r4, r1
   2c3c4:	4615      	mov	r5, r2
   2c3c6:	461e      	mov	r6, r3
   2c3c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   2c3ca:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   2c3ce:	d002      	beq.n	2c3d6 <nrf91_socket_offload_setsockopt+0x1c>
   2c3d0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   2c3d4:	d122      	bne.n	2c41c <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   2c3d6:	4629      	mov	r1, r5
   2c3d8:	4620      	mov	r0, r4
   2c3da:	aa03      	add	r2, sp, #12
   2c3dc:	f7f2 fbbe 	bl	1eb5c <z_to_nrf_optname>
   2c3e0:	2800      	cmp	r0, #0
   2c3e2:	db1b      	blt.n	2c41c <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2c3e4:	2c01      	cmp	r4, #1
   2c3e6:	d112      	bne.n	2c40e <nrf91_socket_offload_setsockopt+0x54>
   2c3e8:	3d14      	subs	r5, #20
   2c3ea:	2d01      	cmp	r5, #1
   2c3ec:	d805      	bhi.n	2c3fa <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   2c3ee:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   2c3f0:	6833      	ldr	r3, [r6, #0]
   2c3f2:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2c3f4:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   2c3f6:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2c3f8:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2c3fa:	4633      	mov	r3, r6
   2c3fc:	4621      	mov	r1, r4
   2c3fe:	4640      	mov	r0, r8
   2c400:	9a03      	ldr	r2, [sp, #12]
   2c402:	9700      	str	r7, [sp, #0]
   2c404:	f001 f9b3 	bl	2d76e <nrf_setsockopt>
}
   2c408:	b006      	add	sp, #24
   2c40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   2c40e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   2c412:	d1f2      	bne.n	2c3fa <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   2c414:	2d0a      	cmp	r5, #10
   2c416:	bf08      	it	eq
   2c418:	2701      	moveq	r7, #1
   2c41a:	e7ee      	b.n	2c3fa <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   2c41c:	f7ff fce2 	bl	2bde4 <__errno>
   2c420:	236d      	movs	r3, #109	; 0x6d
   2c422:	6003      	str	r3, [r0, #0]
	return retval;
   2c424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c428:	e7ee      	b.n	2c408 <nrf91_socket_offload_setsockopt+0x4e>

0002c42a <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   2c42a:	280d      	cmp	r0, #13
   2c42c:	d004      	beq.n	2c438 <is_lfcr+0xe>
   2c42e:	f1a0 030a 	sub.w	r3, r0, #10
   2c432:	4258      	negs	r0, r3
   2c434:	4158      	adcs	r0, r3
   2c436:	4770      	bx	lr
		return true;
   2c438:	2001      	movs	r0, #1
}
   2c43a:	4770      	bx	lr

0002c43c <skip_command_prefix>:
{
   2c43c:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   2c43e:	6801      	ldr	r1, [r0, #0]
{
   2c440:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   2c442:	1c8b      	adds	r3, r1, #2
   2c444:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2c446:	788c      	ldrb	r4, [r1, #2]
   2c448:	4620      	mov	r0, r4
   2c44a:	f7ff ffee 	bl	2c42a <is_lfcr>
   2c44e:	b910      	cbnz	r0, 2c456 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c450:	b10c      	cbz	r4, 2c456 <skip_command_prefix+0x1a>
	(*cmd)++;
   2c452:	3103      	adds	r1, #3
   2c454:	6011      	str	r1, [r2, #0]
}
   2c456:	bd10      	pop	{r4, pc}

0002c458 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   2c458:	6813      	ldr	r3, [r2, #0]
   2c45a:	f7f3 ba69 	b.w	1f930 <at_parser_max_params_from_str>

0002c45e <at_params_list_init>:
{
   2c45e:	b538      	push	{r3, r4, r5, lr}
   2c460:	460d      	mov	r5, r1
	if (list == NULL) {
   2c462:	4604      	mov	r4, r0
   2c464:	b140      	cbz	r0, 2c478 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   2c466:	2110      	movs	r1, #16
   2c468:	4628      	mov	r0, r5
   2c46a:	f001 fb78 	bl	2db5e <k_calloc>
   2c46e:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   2c470:	b128      	cbz	r0, 2c47e <at_params_list_init+0x20>
	return 0;
   2c472:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   2c474:	6025      	str	r5, [r4, #0]
}
   2c476:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c478:	f06f 0015 	mvn.w	r0, #21
   2c47c:	e7fb      	b.n	2c476 <at_params_list_init+0x18>
		return -ENOMEM;
   2c47e:	f06f 000b 	mvn.w	r0, #11
   2c482:	e7f8      	b.n	2c476 <at_params_list_init+0x18>

0002c484 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   2c484:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2c486:	4604      	mov	r4, r0
   2c488:	b148      	cbz	r0, 2c49e <at_params_list_free+0x1a>
   2c48a:	6843      	ldr	r3, [r0, #4]
   2c48c:	b13b      	cbz	r3, 2c49e <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   2c48e:	2500      	movs	r5, #0
	at_params_list_clear(list);
   2c490:	f7f3 fb4c 	bl	1fb2c <at_params_list_clear>
	k_free(list->params);
   2c494:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2c496:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2c498:	f001 fb56 	bl	2db48 <k_free>
	list->params = NULL;
   2c49c:	6065      	str	r5, [r4, #4]
}
   2c49e:	bd38      	pop	{r3, r4, r5, pc}

0002c4a0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   2c4a0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   2c4a2:	b910      	cbnz	r0, 2c4aa <at_params_empty_put+0xa>
		return -EINVAL;
   2c4a4:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   2c4a8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   2c4aa:	6843      	ldr	r3, [r0, #4]
   2c4ac:	2b00      	cmp	r3, #0
   2c4ae:	d0f9      	beq.n	2c4a4 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   2c4b0:	f7f3 faea 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c4b4:	4604      	mov	r4, r0
   2c4b6:	2800      	cmp	r0, #0
   2c4b8:	d0f4      	beq.n	2c4a4 <at_params_empty_put+0x4>
	at_param_clear(param);
   2c4ba:	f7f3 fb1b 	bl	1faf4 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   2c4be:	2304      	movs	r3, #4
	param->value.int_val = 0;
   2c4c0:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   2c4c2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   2c4c4:	2300      	movs	r3, #0
	return 0;
   2c4c6:	2000      	movs	r0, #0
	param->value.int_val = 0;
   2c4c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   2c4cc:	e7ec      	b.n	2c4a8 <at_params_empty_put+0x8>

0002c4ce <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   2c4ce:	b570      	push	{r4, r5, r6, lr}
   2c4d0:	4616      	mov	r6, r2
   2c4d2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   2c4d4:	b910      	cbnz	r0, 2c4dc <at_params_int_put+0xe>
		return -EINVAL;
   2c4d6:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   2c4da:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   2c4dc:	6843      	ldr	r3, [r0, #4]
   2c4de:	2b00      	cmp	r3, #0
   2c4e0:	d0f9      	beq.n	2c4d6 <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2c4e2:	f7f3 fad1 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c4e6:	4604      	mov	r4, r0
   2c4e8:	2800      	cmp	r0, #0
   2c4ea:	d0f4      	beq.n	2c4d6 <at_params_int_put+0x8>
	at_param_clear(param);
   2c4ec:	f7f3 fb02 	bl	1faf4 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   2c4f0:	2301      	movs	r3, #1
	return 0;
   2c4f2:	2000      	movs	r0, #0
	param->value.int_val = value;
   2c4f4:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   2c4f8:	7023      	strb	r3, [r4, #0]
	return 0;
   2c4fa:	e7ee      	b.n	2c4da <at_params_int_put+0xc>

0002c4fc <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   2c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c4fe:	4617      	mov	r7, r2
   2c500:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2c502:	b910      	cbnz	r0, 2c50a <at_params_string_put+0xe>
		return -EINVAL;
   2c504:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   2c508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   2c50a:	6843      	ldr	r3, [r0, #4]
   2c50c:	2b00      	cmp	r3, #0
   2c50e:	d0f9      	beq.n	2c504 <at_params_string_put+0x8>
   2c510:	2a00      	cmp	r2, #0
   2c512:	d0f7      	beq.n	2c504 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2c514:	f7f3 fab8 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c518:	4604      	mov	r4, r0
   2c51a:	2800      	cmp	r0, #0
   2c51c:	d0f2      	beq.n	2c504 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   2c51e:	1c68      	adds	r0, r5, #1
   2c520:	f001 fb19 	bl	2db56 <k_malloc>
	if (param_value == NULL) {
   2c524:	4606      	mov	r6, r0
   2c526:	b160      	cbz	r0, 2c542 <at_params_string_put+0x46>
   2c528:	462a      	mov	r2, r5
   2c52a:	4639      	mov	r1, r7
   2c52c:	f001 fb47 	bl	2dbbe <memcpy>
	at_param_clear(param);
   2c530:	4620      	mov	r0, r4
   2c532:	f7f3 fadf 	bl	1faf4 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   2c536:	2302      	movs	r3, #2
	return 0;
   2c538:	2000      	movs	r0, #0
	param->size = str_len;
   2c53a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   2c53c:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2c53e:	60a6      	str	r6, [r4, #8]
	return 0;
   2c540:	e7e2      	b.n	2c508 <at_params_string_put+0xc>
		return -ENOMEM;
   2c542:	f06f 000b 	mvn.w	r0, #11
   2c546:	e7df      	b.n	2c508 <at_params_string_put+0xc>

0002c548 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c54a:	4617      	mov	r7, r2
   2c54c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   2c54e:	b910      	cbnz	r0, 2c556 <at_params_array_put+0xe>
		return -EINVAL;
   2c550:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   2c554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   2c556:	6843      	ldr	r3, [r0, #4]
   2c558:	2b00      	cmp	r3, #0
   2c55a:	d0f9      	beq.n	2c550 <at_params_array_put+0x8>
   2c55c:	2a00      	cmp	r2, #0
   2c55e:	d0f7      	beq.n	2c550 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   2c560:	f7f3 fa92 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c564:	4604      	mov	r4, r0
   2c566:	2800      	cmp	r0, #0
   2c568:	d0f2      	beq.n	2c550 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   2c56a:	4628      	mov	r0, r5
   2c56c:	f001 faf3 	bl	2db56 <k_malloc>
	if (param_value == NULL) {
   2c570:	4606      	mov	r6, r0
   2c572:	b160      	cbz	r0, 2c58e <at_params_array_put+0x46>
   2c574:	462a      	mov	r2, r5
   2c576:	4639      	mov	r1, r7
   2c578:	f001 fb21 	bl	2dbbe <memcpy>
	at_param_clear(param);
   2c57c:	4620      	mov	r0, r4
   2c57e:	f7f3 fab9 	bl	1faf4 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   2c582:	2303      	movs	r3, #3
	return 0;
   2c584:	2000      	movs	r0, #0
	param->size = array_len;
   2c586:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2c588:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   2c58a:	60a6      	str	r6, [r4, #8]
	return 0;
   2c58c:	e7e2      	b.n	2c554 <at_params_array_put+0xc>
		return -ENOMEM;
   2c58e:	f06f 000b 	mvn.w	r0, #11
   2c592:	e7df      	b.n	2c554 <at_params_array_put+0xc>

0002c594 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   2c594:	b510      	push	{r4, lr}
   2c596:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2c598:	b910      	cbnz	r0, 2c5a0 <at_params_short_get+0xc>
		return -EINVAL;
   2c59a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   2c59e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2c5a0:	6843      	ldr	r3, [r0, #4]
   2c5a2:	2b00      	cmp	r3, #0
   2c5a4:	d0f9      	beq.n	2c59a <at_params_short_get+0x6>
   2c5a6:	2a00      	cmp	r2, #0
   2c5a8:	d0f7      	beq.n	2c59a <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2c5aa:	f7f3 fa6d 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c5ae:	2800      	cmp	r0, #0
   2c5b0:	d0f3      	beq.n	2c59a <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2c5b2:	7803      	ldrb	r3, [r0, #0]
   2c5b4:	2b01      	cmp	r3, #1
   2c5b6:	d1f0      	bne.n	2c59a <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   2c5b8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2c5bc:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   2c5c0:	f142 0200 	adc.w	r2, r2, #0
   2c5c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2c5c8:	f172 0200 	sbcs.w	r2, r2, #0
   2c5cc:	d2e5      	bcs.n	2c59a <at_params_short_get+0x6>
	return 0;
   2c5ce:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   2c5d0:	8023      	strh	r3, [r4, #0]
	return 0;
   2c5d2:	e7e4      	b.n	2c59e <at_params_short_get+0xa>

0002c5d4 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   2c5d4:	b510      	push	{r4, lr}
   2c5d6:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2c5d8:	b910      	cbnz	r0, 2c5e0 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   2c5da:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   2c5de:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2c5e0:	6843      	ldr	r3, [r0, #4]
   2c5e2:	2b00      	cmp	r3, #0
   2c5e4:	d0f9      	beq.n	2c5da <at_params_unsigned_short_get+0x6>
   2c5e6:	2a00      	cmp	r2, #0
   2c5e8:	d0f7      	beq.n	2c5da <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2c5ea:	f7f3 fa4d 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c5ee:	2800      	cmp	r0, #0
   2c5f0:	d0f3      	beq.n	2c5da <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2c5f2:	7803      	ldrb	r3, [r0, #0]
   2c5f4:	2b01      	cmp	r3, #1
   2c5f6:	d1f0      	bne.n	2c5da <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   2c5f8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2c5fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2c600:	f172 0200 	sbcs.w	r2, r2, #0
   2c604:	d2e9      	bcs.n	2c5da <at_params_unsigned_short_get+0x6>
	return 0;
   2c606:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   2c608:	8023      	strh	r3, [r4, #0]
	return 0;
   2c60a:	e7e8      	b.n	2c5de <at_params_unsigned_short_get+0xa>

0002c60c <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   2c60c:	b510      	push	{r4, lr}
   2c60e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2c610:	b910      	cbnz	r0, 2c618 <at_params_int_get+0xc>
		return -EINVAL;
   2c612:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   2c616:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2c618:	6843      	ldr	r3, [r0, #4]
   2c61a:	2b00      	cmp	r3, #0
   2c61c:	d0f9      	beq.n	2c612 <at_params_int_get+0x6>
   2c61e:	2a00      	cmp	r2, #0
   2c620:	d0f7      	beq.n	2c612 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2c622:	f7f3 fa31 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c626:	2800      	cmp	r0, #0
   2c628:	d0f3      	beq.n	2c612 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2c62a:	7803      	ldrb	r3, [r0, #0]
   2c62c:	2b01      	cmp	r3, #1
   2c62e:	d1f0      	bne.n	2c612 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   2c630:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   2c634:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   2c638:	f142 0200 	adc.w	r2, r2, #0
   2c63c:	2a00      	cmp	r2, #0
   2c63e:	d1e8      	bne.n	2c612 <at_params_int_get+0x6>
	return 0;
   2c640:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   2c642:	6023      	str	r3, [r4, #0]
	return 0;
   2c644:	e7e7      	b.n	2c616 <at_params_int_get+0xa>

0002c646 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   2c646:	b510      	push	{r4, lr}
   2c648:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   2c64a:	b910      	cbnz	r0, 2c652 <at_params_int64_get+0xc>
		return -EINVAL;
   2c64c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   2c650:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   2c652:	6843      	ldr	r3, [r0, #4]
   2c654:	2b00      	cmp	r3, #0
   2c656:	d0f9      	beq.n	2c64c <at_params_int64_get+0x6>
   2c658:	2a00      	cmp	r2, #0
   2c65a:	d0f7      	beq.n	2c64c <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   2c65c:	f7f3 fa14 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c660:	2800      	cmp	r0, #0
   2c662:	d0f3      	beq.n	2c64c <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   2c664:	7803      	ldrb	r3, [r0, #0]
   2c666:	2b01      	cmp	r3, #1
   2c668:	d1f0      	bne.n	2c64c <at_params_int64_get+0x6>
	*value = param->value.int_val;
   2c66a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   2c66e:	2000      	movs	r0, #0
	*value = param->value.int_val;
   2c670:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   2c674:	e7ec      	b.n	2c650 <at_params_int64_get+0xa>

0002c676 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   2c676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c678:	4617      	mov	r7, r2
   2c67a:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   2c67c:	b910      	cbnz	r0, 2c684 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   2c67e:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   2c682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   2c684:	6843      	ldr	r3, [r0, #4]
   2c686:	2b00      	cmp	r3, #0
   2c688:	d0f9      	beq.n	2c67e <at_params_string_get+0x8>
   2c68a:	2a00      	cmp	r2, #0
   2c68c:	d0f7      	beq.n	2c67e <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   2c68e:	2c00      	cmp	r4, #0
   2c690:	d0f5      	beq.n	2c67e <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   2c692:	f7f3 f9f9 	bl	1fa88 <at_params_get>
	if (param == NULL) {
   2c696:	4606      	mov	r6, r0
   2c698:	2800      	cmp	r0, #0
   2c69a:	d0f0      	beq.n	2c67e <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   2c69c:	7803      	ldrb	r3, [r0, #0]
   2c69e:	2b02      	cmp	r3, #2
   2c6a0:	d1ed      	bne.n	2c67e <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   2c6a2:	f7f3 fa0b 	bl	1fabc <at_param_size>
	if (*len < param_len) {
   2c6a6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   2c6a8:	4605      	mov	r5, r0
	if (*len < param_len) {
   2c6aa:	4283      	cmp	r3, r0
   2c6ac:	d307      	bcc.n	2c6be <at_params_string_get+0x48>
   2c6ae:	4602      	mov	r2, r0
   2c6b0:	68b1      	ldr	r1, [r6, #8]
   2c6b2:	4638      	mov	r0, r7
   2c6b4:	f001 fa83 	bl	2dbbe <memcpy>
	return 0;
   2c6b8:	2000      	movs	r0, #0
	*len = param_len;
   2c6ba:	6025      	str	r5, [r4, #0]
	return 0;
   2c6bc:	e7e1      	b.n	2c682 <at_params_string_get+0xc>
		return -ENOMEM;
   2c6be:	f06f 000b 	mvn.w	r0, #11
   2c6c2:	e7de      	b.n	2c682 <at_params_string_get+0xc>

0002c6c4 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   2c6c4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2c6c6:	4605      	mov	r5, r0
   2c6c8:	b180      	cbz	r0, 2c6ec <at_params_valid_count_get+0x28>
   2c6ca:	6843      	ldr	r3, [r0, #4]
   2c6cc:	b173      	cbz	r3, 2c6ec <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   2c6ce:	2100      	movs	r1, #0
   2c6d0:	f7f3 f9da 	bl	1fa88 <at_params_get>
	size_t valid_i = 0;
   2c6d4:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   2c6d6:	b108      	cbz	r0, 2c6dc <at_params_valid_count_get+0x18>
   2c6d8:	7803      	ldrb	r3, [r0, #0]
   2c6da:	b90b      	cbnz	r3, 2c6e0 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   2c6dc:	4620      	mov	r0, r4
   2c6de:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   2c6e0:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   2c6e2:	4621      	mov	r1, r4
   2c6e4:	4628      	mov	r0, r5
   2c6e6:	f7f3 f9cf 	bl	1fa88 <at_params_get>
   2c6ea:	e7f4      	b.n	2c6d6 <at_params_valid_count_get+0x12>
		return -EINVAL;
   2c6ec:	f06f 0415 	mvn.w	r4, #21
   2c6f0:	e7f4      	b.n	2c6dc <at_params_valid_count_get+0x18>

0002c6f2 <lte_lc_init_and_connect_async>:
{
   2c6f2:	b510      	push	{r4, lr}
   2c6f4:	4604      	mov	r4, r0
	err = init_and_config();
   2c6f6:	f7f3 fdff 	bl	202f8 <init_and_config>
	if (err) {
   2c6fa:	b920      	cbnz	r0, 2c706 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   2c6fc:	4620      	mov	r0, r4
}
   2c6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   2c702:	f7f3 bf31 	b.w	20568 <lte_lc_connect_async>
}
   2c706:	f06f 000d 	mvn.w	r0, #13
   2c70a:	bd10      	pop	{r4, pc}

0002c70c <string_to_int>:
{
   2c70c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c70e:	460c      	mov	r4, r1
   2c710:	4605      	mov	r5, r0
   2c712:	4616      	mov	r6, r2
	errno = 0;
   2c714:	f7ff fb66 	bl	2bde4 <__errno>
   2c718:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   2c71a:	4622      	mov	r2, r4
	errno = 0;
   2c71c:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   2c71e:	a901      	add	r1, sp, #4
   2c720:	4628      	mov	r0, r5
   2c722:	f7fd f885 	bl	29830 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2c726:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   2c728:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2c72a:	42ab      	cmp	r3, r5
   2c72c:	d103      	bne.n	2c736 <string_to_int+0x2a>
		return -ENODATA;
   2c72e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   2c732:	b002      	add	sp, #8
   2c734:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2c736:	781b      	ldrb	r3, [r3, #0]
   2c738:	2b00      	cmp	r3, #0
   2c73a:	d1f8      	bne.n	2c72e <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2c73c:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   2c740:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   2c742:	3303      	adds	r3, #3
   2c744:	d802      	bhi.n	2c74c <string_to_int+0x40>
	return 0;
   2c746:	2000      	movs	r0, #0
	*output = temp;
   2c748:	6034      	str	r4, [r6, #0]
	return 0;
   2c74a:	e7f2      	b.n	2c732 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   2c74c:	f7ff fb4a 	bl	2bde4 <__errno>
   2c750:	6803      	ldr	r3, [r0, #0]
   2c752:	2b22      	cmp	r3, #34	; 0x22
   2c754:	d1f7      	bne.n	2c746 <string_to_int+0x3a>
   2c756:	e7ea      	b.n	2c72e <string_to_int+0x22>

0002c758 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   2c758:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   2c75a:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   2c75c:	b087      	sub	sp, #28
   2c75e:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2c760:	ab01      	add	r3, sp, #4
   2c762:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   2c764:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   2c766:	f7ff ff86 	bl	2c676 <at_params_string_get>
	if (err) {
   2c76a:	b968      	cbnz	r0, 2c788 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   2c76c:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   2c76e:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   2c770:	3318      	adds	r3, #24
   2c772:	446b      	add	r3, sp
   2c774:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   2c778:	4629      	mov	r1, r5
   2c77a:	a802      	add	r0, sp, #8
   2c77c:	f7ff ffc6 	bl	2c70c <string_to_int>
		return -ENODATA;
   2c780:	2800      	cmp	r0, #0
   2c782:	bf18      	it	ne
   2c784:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   2c788:	b007      	add	sp, #28
   2c78a:	bd30      	pop	{r4, r5, pc}

0002c78c <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   2c78c:	b508      	push	{r3, lr}
	date_time_core_init();
   2c78e:	f7f4 fbe5 	bl	20f5c <date_time_core_init>

	return 0;
}
   2c792:	2000      	movs	r0, #0
   2c794:	bd08      	pop	{r3, pc}

0002c796 <date_time_is_valid>:
	return date_time_core_is_valid();
   2c796:	f7f4 bc11 	b.w	20fbc <date_time_core_is_valid>

0002c79a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2c79a:	4700      	bx	r0

0002c79c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2c79c:	f001 b90e 	b.w	2d9bc <z_impl_k_busy_wait>

0002c7a0 <nrf_gpio_pin_present_check>:
    switch (port)
   2c7a0:	0943      	lsrs	r3, r0, #5
   2c7a2:	bf0c      	ite	eq
   2c7a4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2c7a8:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2c7aa:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2c7ae:	fa23 f000 	lsr.w	r0, r3, r0
}
   2c7b2:	f000 0001 	and.w	r0, r0, #1
   2c7b6:	4770      	bx	lr

0002c7b8 <pin_is_task_output>:
{
   2c7b8:	b508      	push	{r3, lr}
   2c7ba:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2c7bc:	f7f4 fffc 	bl	217b8 <pin_is_output>
   2c7c0:	b110      	cbz	r0, 2c7c8 <pin_is_task_output+0x10>
   2c7c2:	4610      	mov	r0, r2
   2c7c4:	f7f4 ffe2 	bl	2178c <pin_in_use_by_te>
}
   2c7c8:	f000 0001 	and.w	r0, r0, #1
   2c7cc:	bd08      	pop	{r3, pc}

0002c7ce <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2c7ce:	0080      	lsls	r0, r0, #2
}
   2c7d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2c7d4:	4770      	bx	lr

0002c7d6 <nrf_gpio_reconfigure>:
{
   2c7d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c7da:	4690      	mov	r8, r2
   2c7dc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2c7e0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c7e2:	a801      	add	r0, sp, #4
{
   2c7e4:	460e      	mov	r6, r1
   2c7e6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c7e8:	f7f5 f86a 	bl	218c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2c7ec:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2c7ee:	f1b8 0f00 	cmp.w	r8, #0
   2c7f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2c7f6:	bf14      	ite	ne
   2c7f8:	2302      	movne	r3, #2
   2c7fa:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2c7fc:	2e00      	cmp	r6, #0
   2c7fe:	bf18      	it	ne
   2c800:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2c804:	2d00      	cmp	r5, #0
   2c806:	bf14      	ite	ne
   2c808:	210c      	movne	r1, #12
   2c80a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2c80c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2c80e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2c812:	bf14      	ite	ne
   2c814:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2c818:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2c81a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2c81c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2c820:	bf14      	ite	ne
   2c822:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2c826:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2c828:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2c82c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2c82e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2c832:	b106      	cbz	r6, 2c836 <nrf_gpio_reconfigure+0x60>
   2c834:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2c836:	f1b8 0f00 	cmp.w	r8, #0
   2c83a:	d003      	beq.n	2c844 <nrf_gpio_reconfigure+0x6e>
   2c83c:	f898 8000 	ldrb.w	r8, [r8]
   2c840:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2c844:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2c846:	b10d      	cbz	r5, 2c84c <nrf_gpio_reconfigure+0x76>
   2c848:	782d      	ldrb	r5, [r5, #0]
   2c84a:	00ad      	lsls	r5, r5, #2
   2c84c:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2c850:	b10c      	cbz	r4, 2c856 <nrf_gpio_reconfigure+0x80>
   2c852:	7822      	ldrb	r2, [r4, #0]
   2c854:	0214      	lsls	r4, r2, #8
   2c856:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2c858:	b10f      	cbz	r7, 2c85e <nrf_gpio_reconfigure+0x88>
   2c85a:	783f      	ldrb	r7, [r7, #0]
   2c85c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2c85e:	432c      	orrs	r4, r5
   2c860:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2c862:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   2c866:	b002      	add	sp, #8
   2c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c86c <nrf_gpio_cfg_sense_set>:
{
   2c86c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2c86e:	f10d 030f 	add.w	r3, sp, #15
   2c872:	9301      	str	r3, [sp, #4]
   2c874:	2300      	movs	r3, #0
{
   2c876:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2c87a:	461a      	mov	r2, r3
   2c87c:	4619      	mov	r1, r3
   2c87e:	9300      	str	r3, [sp, #0]
   2c880:	f7ff ffa9 	bl	2c7d6 <nrf_gpio_reconfigure>
}
   2c884:	b005      	add	sp, #20
   2c886:	f85d fb04 	ldr.w	pc, [sp], #4

0002c88a <nrf_gpio_pin_write>:
{
   2c88a:	b507      	push	{r0, r1, r2, lr}
   2c88c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c88e:	a801      	add	r0, sp, #4
    if (value == 0)
   2c890:	b941      	cbnz	r1, 2c8a4 <nrf_gpio_pin_write+0x1a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c892:	f7f5 fc17 	bl	220c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2c896:	2301      	movs	r3, #1
   2c898:	9a01      	ldr	r2, [sp, #4]
   2c89a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2c89c:	60c3      	str	r3, [r0, #12]
}
   2c89e:	b003      	add	sp, #12
   2c8a0:	f85d fb04 	ldr.w	pc, [sp], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c8a4:	f7f5 fc0e 	bl	220c4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2c8a8:	2301      	movs	r3, #1
   2c8aa:	9a01      	ldr	r2, [sp, #4]
   2c8ac:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2c8ae:	6083      	str	r3, [r0, #8]
}
   2c8b0:	e7f5      	b.n	2c89e <nrf_gpio_pin_write+0x14>

0002c8b2 <set_ss_pin_state>:
{
   2c8b2:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2c8b4:	7fc0      	ldrb	r0, [r0, #31]
   2c8b6:	28ff      	cmp	r0, #255	; 0xff
   2c8b8:	d006      	beq.n	2c8c8 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   2c8ba:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   2c8bc:	079b      	lsls	r3, r3, #30
   2c8be:	bf58      	it	pl
   2c8c0:	f081 0101 	eorpl.w	r1, r1, #1
   2c8c4:	f7ff bfe1 	b.w	2c88a <nrf_gpio_pin_write>
}
   2c8c8:	4770      	bx	lr

0002c8ca <nrf_gpio_cfg_default>:
{
   2c8ca:	b507      	push	{r0, r1, r2, lr}
   2c8cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c8ce:	a801      	add	r0, sp, #4
   2c8d0:	f7f5 fbf8 	bl	220c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2c8d4:	2202      	movs	r2, #2
   2c8d6:	9b01      	ldr	r3, [sp, #4]
   2c8d8:	3380      	adds	r3, #128	; 0x80
   2c8da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2c8de:	b003      	add	sp, #12
   2c8e0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c8e4 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2c8e4:	7b0a      	ldrb	r2, [r1, #12]
{
   2c8e6:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   2c8e8:	2a03      	cmp	r2, #3
   2c8ea:	d829      	bhi.n	2c940 <xfer_completeness_check+0x5c>
   2c8ec:	e8df f002 	tbb	[pc, r2]
   2c8f0:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2c8f4:	688a      	ldr	r2, [r1, #8]
   2c8f6:	0350      	lsls	r0, r2, #13
   2c8f8:	d504      	bpl.n	2c904 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   2c8fa:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   2c8fe:	6908      	ldr	r0, [r1, #16]
   2c900:	4290      	cmp	r0, r2
   2c902:	d107      	bne.n	2c914 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2c904:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2c906:	0352      	lsls	r2, r2, #13
   2c908:	d41a      	bmi.n	2c940 <xfer_completeness_check+0x5c>
   2c90a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2c90e:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2c910:	4291      	cmp	r1, r2
   2c912:	d015      	beq.n	2c940 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2c914:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2c916:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2c918:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2c91c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2c920:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   2c922:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2c926:	6908      	ldr	r0, [r1, #16]
   2c928:	4290      	cmp	r0, r2
   2c92a:	d1f3      	bne.n	2c914 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2c92c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2c930:	e7ed      	b.n	2c90e <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   2c932:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2c936:	6909      	ldr	r1, [r1, #16]
   2c938:	e7ea      	b.n	2c910 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   2c93a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2c93e:	e7fa      	b.n	2c936 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2c940:	2001      	movs	r0, #1
}
   2c942:	4770      	bx	lr

0002c944 <nrf_gpio_pin_set>:
{
   2c944:	b507      	push	{r0, r1, r2, lr}
   2c946:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c948:	a801      	add	r0, sp, #4
   2c94a:	f7f6 fa19 	bl	22d80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2c94e:	2301      	movs	r3, #1
   2c950:	9a01      	ldr	r2, [sp, #4]
   2c952:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2c954:	6083      	str	r3, [r0, #8]
}
   2c956:	b003      	add	sp, #12
   2c958:	f85d fb04 	ldr.w	pc, [sp], #4

0002c95c <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2c95c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2c95e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2c960:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2c962:	bf9c      	itt	ls
   2c964:	6880      	ldrls	r0, [r0, #8]
   2c966:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2c968:	3b01      	subs	r3, #1
   2c96a:	1a98      	subs	r0, r3, r2
}
   2c96c:	4770      	bx	lr

0002c96e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2c96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c972:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2c974:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2c978:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   2c97c:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   2c980:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   2c982:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2c986:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2c988:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   2c98a:	d906      	bls.n	2c99a <_WriteNoCheck+0x2c>
   2c98c:	f001 f917 	bl	2dbbe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2c990:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   2c994:	60e5      	str	r5, [r4, #12]
}
   2c996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c99a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2c99c:	eba5 0508 	sub.w	r5, r5, r8
   2c9a0:	f001 f90d 	bl	2dbbe <memcpy>
   2c9a4:	462a      	mov	r2, r5
   2c9a6:	6860      	ldr	r0, [r4, #4]
   2c9a8:	19b9      	adds	r1, r7, r6
   2c9aa:	e7ef      	b.n	2c98c <_WriteNoCheck+0x1e>

0002c9ac <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2c9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c9b0:	4606      	mov	r6, r0
   2c9b2:	4689      	mov	r9, r1
   2c9b4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2c9b6:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   2c9ba:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2c9bc:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2c9be:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   2c9c0:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2c9c2:	bf28      	it	cs
   2c9c4:	18e4      	addcs	r4, r4, r3
   2c9c6:	3c01      	subs	r4, #1
   2c9c8:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2c9ca:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2c9cc:	42bc      	cmp	r4, r7
   2c9ce:	bf28      	it	cs
   2c9d0:	463c      	movcs	r4, r7
   2c9d2:	4294      	cmp	r4, r2
   2c9d4:	bf28      	it	cs
   2c9d6:	4614      	movcs	r4, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2c9d8:	6870      	ldr	r0, [r6, #4]
   2c9da:	4649      	mov	r1, r9
   2c9dc:	4622      	mov	r2, r4
   2c9de:	4428      	add	r0, r5
   2c9e0:	f001 f8ed 	bl	2dbbe <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2c9e4:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2c9e6:	4425      	add	r5, r4
      WrOff = 0u;
   2c9e8:	42ab      	cmp	r3, r5
   2c9ea:	bf08      	it	eq
   2c9ec:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
   2c9ee:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2c9f0:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   2c9f2:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2c9f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   2c9f8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2c9fa:	2f00      	cmp	r7, #0
   2c9fc:	d1de      	bne.n	2c9bc <_WriteBlocking+0x10>
}
   2c9fe:	4640      	mov	r0, r8
   2ca00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002ca04 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2ca04:	f7f6 ba4c 	b.w	22ea0 <_DoInit>

0002ca08 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2ca08:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2ca0a:	f7ff fffb 	bl	2ca04 <SEGGER_RTT_Init>

	return 0;
}
   2ca0e:	2000      	movs	r0, #0
   2ca10:	bd08      	pop	{r3, pc}

0002ca12 <rpc_handle_ctrl_message>:
   2ca12:	2902      	cmp	r1, #2
   2ca14:	b510      	push	{r4, lr}
   2ca16:	4604      	mov	r4, r0
   2ca18:	d005      	beq.n	2ca26 <rpc_handle_ctrl_message+0x14>
   2ca1a:	2904      	cmp	r1, #4
   2ca1c:	d001      	beq.n	2ca22 <rpc_handle_ctrl_message+0x10>
   2ca1e:	2901      	cmp	r1, #1
   2ca20:	d107      	bne.n	2ca32 <rpc_handle_ctrl_message+0x20>
   2ca22:	2000      	movs	r0, #0
   2ca24:	bd10      	pop	{r4, pc}
   2ca26:	6880      	ldr	r0, [r0, #8]
   2ca28:	2800      	cmp	r0, #0
   2ca2a:	d0fa      	beq.n	2ca22 <rpc_handle_ctrl_message+0x10>
   2ca2c:	f000 f833 	bl	2ca96 <rpc_transport_local_data_free>
   2ca30:	e7f7      	b.n	2ca22 <rpc_handle_ctrl_message+0x10>
   2ca32:	6880      	ldr	r0, [r0, #8]
   2ca34:	b108      	cbz	r0, 2ca3a <rpc_handle_ctrl_message+0x28>
   2ca36:	f000 f82e 	bl	2ca96 <rpc_transport_local_data_free>
   2ca3a:	4620      	mov	r0, r4
   2ca3c:	f000 f827 	bl	2ca8e <rpc_transport_msg_free>
   2ca40:	e7ef      	b.n	2ca22 <rpc_handle_ctrl_message+0x10>

0002ca42 <rpc_message_send>:
   2ca42:	6843      	ldr	r3, [r0, #4]
   2ca44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2ca48:	f043 0302 	orr.w	r3, r3, #2
   2ca4c:	6043      	str	r3, [r0, #4]
   2ca4e:	f000 b826 	b.w	2ca9e <rpc_transport_data_msg_send>

0002ca52 <rpc_message_alloc>:
   2ca52:	b570      	push	{r4, r5, r6, lr}
   2ca54:	4606      	mov	r6, r0
   2ca56:	b130      	cbz	r0, 2ca66 <rpc_message_alloc+0x14>
   2ca58:	f000 f81b 	bl	2ca92 <rpc_transport_data_alloc>
   2ca5c:	4605      	mov	r5, r0
   2ca5e:	b918      	cbnz	r0, 2ca68 <rpc_message_alloc+0x16>
   2ca60:	2400      	movs	r4, #0
   2ca62:	4620      	mov	r0, r4
   2ca64:	bd70      	pop	{r4, r5, r6, pc}
   2ca66:	4605      	mov	r5, r0
   2ca68:	f000 f80f 	bl	2ca8a <rpc_transport_data_msg_alloc>
   2ca6c:	4604      	mov	r4, r0
   2ca6e:	b110      	cbz	r0, 2ca76 <rpc_message_alloc+0x24>
   2ca70:	60c6      	str	r6, [r0, #12]
   2ca72:	6085      	str	r5, [r0, #8]
   2ca74:	e7f5      	b.n	2ca62 <rpc_message_alloc+0x10>
   2ca76:	2d00      	cmp	r5, #0
   2ca78:	d0f2      	beq.n	2ca60 <rpc_message_alloc+0xe>
   2ca7a:	4628      	mov	r0, r5
   2ca7c:	f000 f80b 	bl	2ca96 <rpc_transport_local_data_free>
   2ca80:	e7ef      	b.n	2ca62 <rpc_message_alloc+0x10>

0002ca82 <rpc_message_free>:
   2ca82:	f000 b804 	b.w	2ca8e <rpc_transport_msg_free>

0002ca86 <rpc_message_data_free>:
   2ca86:	f000 b808 	b.w	2ca9a <rpc_transport_peer_data_free>

0002ca8a <rpc_transport_data_msg_alloc>:
   2ca8a:	f7f6 bca5 	b.w	233d8 <rpc_transport_ipc_data_msg_alloc>

0002ca8e <rpc_transport_msg_free>:
   2ca8e:	f7f6 bcef 	b.w	23470 <rpc_transport_ipc_msg_free>

0002ca92 <rpc_transport_data_alloc>:
   2ca92:	f7f6 bcd3 	b.w	2343c <rpc_transport_ipc_data_alloc>

0002ca96 <rpc_transport_local_data_free>:
   2ca96:	f000 b804 	b.w	2caa2 <rpc_transport_ipc_local_data_free>

0002ca9a <rpc_transport_peer_data_free>:
   2ca9a:	f000 b809 	b.w	2cab0 <rpc_transport_ipc_peer_data_free>

0002ca9e <rpc_transport_data_msg_send>:
   2ca9e:	f7f6 bc5f 	b.w	23360 <rpc_transport_ipc_data_msg_send>

0002caa2 <rpc_transport_ipc_local_data_free>:
   2caa2:	b508      	push	{r3, lr}
   2caa4:	f7f2 f82e 	bl	1eb04 <nrf_modem_os_shm_tx_free>
   2caa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2caac:	f7f1 bff4 	b.w	1ea98 <nrf_modem_os_application_irq_set>

0002cab0 <rpc_transport_ipc_peer_data_free>:
   2cab0:	b510      	push	{r4, lr}
   2cab2:	4604      	mov	r4, r0
   2cab4:	f7f6 fca2 	bl	233fc <rpc_transport_ipc_ctrl_msg_alloc>
   2cab8:	2101      	movs	r1, #1
   2caba:	2200      	movs	r2, #0
   2cabc:	7001      	strb	r1, [r0, #0]
   2cabe:	2102      	movs	r1, #2
   2cac0:	6084      	str	r4, [r0, #8]
   2cac2:	7042      	strb	r2, [r0, #1]
   2cac4:	7081      	strb	r1, [r0, #2]
   2cac6:	70c2      	strb	r2, [r0, #3]
   2cac8:	f7f6 fc68 	bl	2339c <rpc_transport_ipc_ctrl_msg_send>
   2cacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cad0:	f7f1 bfe2 	b.w	1ea98 <nrf_modem_os_application_irq_set>

0002cad4 <rpc_client_request_alloc>:
   2cad4:	b508      	push	{r3, lr}
   2cad6:	f7ff ffbc 	bl	2ca52 <rpc_message_alloc>
   2cada:	b100      	cbz	r0, 2cade <rpc_client_request_alloc+0xa>
   2cadc:	3008      	adds	r0, #8
   2cade:	bd08      	pop	{r3, pc}

0002cae0 <rpc_client_request_send>:
   2cae0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2cae4:	4610      	mov	r0, r2
   2cae6:	f840 1d08 	str.w	r1, [r0, #-8]!
   2caea:	f7ff bfaa 	b.w	2ca42 <rpc_message_send>

0002caee <rpc_client_message_free>:
   2caee:	3808      	subs	r0, #8
   2caf0:	f7ff bfc7 	b.w	2ca82 <rpc_message_free>

0002caf4 <rpc_client_data_free>:
   2caf4:	f7ff bfc7 	b.w	2ca86 <rpc_message_data_free>

0002caf8 <packet_handler_alloc_and_init>:
   2caf8:	b538      	push	{r3, r4, r5, lr}
   2cafa:	4604      	mov	r4, r0
   2cafc:	4608      	mov	r0, r1
   2cafe:	4611      	mov	r1, r2
   2cb00:	4622      	mov	r2, r4
   2cb02:	f7f8 ffab 	bl	25a5c <packet_handler_create>
   2cb06:	61e0      	str	r0, [r4, #28]
   2cb08:	b158      	cbz	r0, 2cb22 <packet_handler_alloc_and_init+0x2a>
   2cb0a:	6803      	ldr	r3, [r0, #0]
   2cb0c:	681b      	ldr	r3, [r3, #0]
   2cb0e:	4798      	blx	r3
   2cb10:	4605      	mov	r5, r0
   2cb12:	b120      	cbz	r0, 2cb1e <packet_handler_alloc_and_init+0x26>
   2cb14:	69e0      	ldr	r0, [r4, #28]
   2cb16:	f000 fce3 	bl	2d4e0 <packet_handler_delete>
   2cb1a:	2300      	movs	r3, #0
   2cb1c:	61e3      	str	r3, [r4, #28]
   2cb1e:	4628      	mov	r0, r5
   2cb20:	bd38      	pop	{r3, r4, r5, pc}
   2cb22:	250c      	movs	r5, #12
   2cb24:	e7fb      	b.n	2cb1e <packet_handler_alloc_and_init+0x26>

0002cb26 <socket_free>:
   2cb26:	b510      	push	{r4, lr}
   2cb28:	4604      	mov	r4, r0
   2cb2a:	69c0      	ldr	r0, [r0, #28]
   2cb2c:	b108      	cbz	r0, 2cb32 <socket_free+0xc>
   2cb2e:	f000 fcd7 	bl	2d4e0 <packet_handler_delete>
   2cb32:	4620      	mov	r0, r4
   2cb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb38:	222c      	movs	r2, #44	; 0x2c
   2cb3a:	2100      	movs	r1, #0
   2cb3c:	f001 b84c 	b.w	2dbd8 <memset>

0002cb40 <interface_socket_event_get>:
   2cb40:	b510      	push	{r4, lr}
   2cb42:	4604      	mov	r4, r0
   2cb44:	b189      	cbz	r1, 2cb6a <interface_socket_event_get+0x2a>
   2cb46:	f7f6 fee1 	bl	2390c <interface_socket_from_handle_get>
   2cb4a:	b158      	cbz	r0, 2cb64 <interface_socket_event_get+0x24>
   2cb4c:	6803      	ldr	r3, [r0, #0]
   2cb4e:	0c1b      	lsrs	r3, r3, #16
   2cb50:	f003 020a 	and.w	r2, r3, #10
   2cb54:	2a0a      	cmp	r2, #10
   2cb56:	bf14      	ite	ne
   2cb58:	f003 030f 	andne.w	r3, r3, #15
   2cb5c:	f003 030d 	andeq.w	r3, r3, #13
   2cb60:	600b      	str	r3, [r1, #0]
   2cb62:	e002      	b.n	2cb6a <interface_socket_event_get+0x2a>
   2cb64:	2c00      	cmp	r4, #0
   2cb66:	da01      	bge.n	2cb6c <interface_socket_event_get+0x2c>
   2cb68:	6008      	str	r0, [r1, #0]
   2cb6a:	bd10      	pop	{r4, pc}
   2cb6c:	2310      	movs	r3, #16
   2cb6e:	e7f7      	b.n	2cb60 <interface_socket_event_get+0x20>

0002cb70 <ip_recvd_packet_free_cb>:
   2cb70:	b510      	push	{r4, lr}
   2cb72:	4604      	mov	r4, r0
   2cb74:	6800      	ldr	r0, [r0, #0]
   2cb76:	f7ff ffbd 	bl	2caf4 <rpc_client_data_free>
   2cb7a:	68a0      	ldr	r0, [r4, #8]
   2cb7c:	b118      	cbz	r0, 2cb86 <ip_recvd_packet_free_cb+0x16>
   2cb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb82:	f7f1 bfb1 	b.w	1eae8 <nrf_modem_os_free>
   2cb86:	bd10      	pop	{r4, pc}

0002cb88 <protocol_verify>:
   2cb88:	b508      	push	{r3, lr}
   2cb8a:	4603      	mov	r3, r0
   2cb8c:	4608      	mov	r0, r1
   2cb8e:	b169      	cbz	r1, 2cbac <protocol_verify+0x24>
   2cb90:	2b01      	cmp	r3, #1
   2cb92:	d107      	bne.n	2cba4 <protocol_verify+0x1c>
   2cb94:	2901      	cmp	r1, #1
   2cb96:	d013      	beq.n	2cbc0 <protocol_verify+0x38>
   2cb98:	206b      	movs	r0, #107	; 0x6b
   2cb9a:	f7ff fa28 	bl	2bfee <nrf_modem_os_errno_set>
   2cb9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cba2:	bd08      	pop	{r3, pc}
   2cba4:	2b02      	cmp	r3, #2
   2cba6:	d10b      	bne.n	2cbc0 <protocol_verify+0x38>
   2cba8:	2902      	cmp	r1, #2
   2cbaa:	e7f4      	b.n	2cb96 <protocol_verify+0xe>
   2cbac:	2b01      	cmp	r3, #1
   2cbae:	d101      	bne.n	2cbb4 <protocol_verify+0x2c>
   2cbb0:	6013      	str	r3, [r2, #0]
   2cbb2:	e7f6      	b.n	2cba2 <protocol_verify+0x1a>
   2cbb4:	2b03      	cmp	r3, #3
   2cbb6:	d101      	bne.n	2cbbc <protocol_verify+0x34>
   2cbb8:	6011      	str	r1, [r2, #0]
   2cbba:	e7f2      	b.n	2cba2 <protocol_verify+0x1a>
   2cbbc:	2302      	movs	r3, #2
   2cbbe:	e7f7      	b.n	2cbb0 <protocol_verify+0x28>
   2cbc0:	2000      	movs	r0, #0
   2cbc2:	e7ee      	b.n	2cba2 <protocol_verify+0x1a>

0002cbc4 <ip_addr_parse>:
   2cbc4:	b570      	push	{r4, r5, r6, lr}
   2cbc6:	684d      	ldr	r5, [r1, #4]
   2cbc8:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   2cbcc:	4285      	cmp	r5, r0
   2cbce:	d11f      	bne.n	2cc10 <ip_addr_parse+0x4c>
   2cbd0:	7808      	ldrb	r0, [r1, #0]
   2cbd2:	4290      	cmp	r0, r2
   2cbd4:	d11e      	bne.n	2cc14 <ip_addr_parse+0x50>
   2cbd6:	2d02      	cmp	r5, #2
   2cbd8:	d109      	bne.n	2cbee <ip_addr_parse+0x2a>
   2cbda:	2810      	cmp	r0, #16
   2cbdc:	d11a      	bne.n	2cc14 <ip_addr_parse+0x50>
   2cbde:	890a      	ldrh	r2, [r1, #8]
   2cbe0:	8032      	strh	r2, [r6, #0]
   2cbe2:	2204      	movs	r2, #4
   2cbe4:	801a      	strh	r2, [r3, #0]
   2cbe6:	68cb      	ldr	r3, [r1, #12]
   2cbe8:	6023      	str	r3, [r4, #0]
   2cbea:	2000      	movs	r0, #0
   2cbec:	bd70      	pop	{r4, r5, r6, pc}
   2cbee:	2d0a      	cmp	r5, #10
   2cbf0:	d110      	bne.n	2cc14 <ip_addr_parse+0x50>
   2cbf2:	2824      	cmp	r0, #36	; 0x24
   2cbf4:	d10e      	bne.n	2cc14 <ip_addr_parse+0x50>
   2cbf6:	890a      	ldrh	r2, [r1, #8]
   2cbf8:	8032      	strh	r2, [r6, #0]
   2cbfa:	2210      	movs	r2, #16
   2cbfc:	801a      	strh	r2, [r3, #0]
   2cbfe:	188b      	adds	r3, r1, r2
   2cc00:	3120      	adds	r1, #32
   2cc02:	f853 2b04 	ldr.w	r2, [r3], #4
   2cc06:	428b      	cmp	r3, r1
   2cc08:	f844 2b04 	str.w	r2, [r4], #4
   2cc0c:	d1f9      	bne.n	2cc02 <ip_addr_parse+0x3e>
   2cc0e:	e7ec      	b.n	2cbea <ip_addr_parse+0x26>
   2cc10:	206a      	movs	r0, #106	; 0x6a
   2cc12:	e7eb      	b.n	2cbec <ip_addr_parse+0x28>
   2cc14:	2016      	movs	r0, #22
   2cc16:	e7e9      	b.n	2cbec <ip_addr_parse+0x28>

0002cc18 <ip_interface_request_create>:
   2cc18:	b570      	push	{r4, r5, r6, lr}
   2cc1a:	4606      	mov	r6, r0
   2cc1c:	4618      	mov	r0, r3
   2cc1e:	460d      	mov	r5, r1
   2cc20:	4614      	mov	r4, r2
   2cc22:	f7ff ff57 	bl	2cad4 <rpc_client_request_alloc>
   2cc26:	b148      	cbz	r0, 2cc3c <ip_interface_request_create+0x24>
   2cc28:	2300      	movs	r3, #0
   2cc2a:	2208      	movs	r2, #8
   2cc2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2cc30:	60c4      	str	r4, [r0, #12]
   2cc32:	6105      	str	r5, [r0, #16]
   2cc34:	7202      	strb	r2, [r0, #8]
   2cc36:	7243      	strb	r3, [r0, #9]
   2cc38:	7283      	strb	r3, [r0, #10]
   2cc3a:	72c3      	strb	r3, [r0, #11]
   2cc3c:	bd70      	pop	{r4, r5, r6, pc}

0002cc3e <ip_interface_wait>:
   2cc3e:	b538      	push	{r3, r4, r5, lr}
   2cc40:	4605      	mov	r5, r0
   2cc42:	f7f6 fde9 	bl	23818 <interface_socket_wait>
   2cc46:	4604      	mov	r4, r0
   2cc48:	b938      	cbnz	r0, 2cc5a <ip_interface_wait+0x1c>
   2cc4a:	4628      	mov	r0, r5
   2cc4c:	f7f6 fe5e 	bl	2390c <interface_socket_from_handle_get>
   2cc50:	b118      	cbz	r0, 2cc5a <ip_interface_wait+0x1c>
   2cc52:	6844      	ldr	r4, [r0, #4]
   2cc54:	b10c      	cbz	r4, 2cc5a <ip_interface_wait+0x1c>
   2cc56:	2300      	movs	r3, #0
   2cc58:	6043      	str	r3, [r0, #4]
   2cc5a:	4620      	mov	r0, r4
   2cc5c:	bd38      	pop	{r3, r4, r5, pc}

0002cc5e <ip_interface_recvfrom>:
   2cc5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc62:	b087      	sub	sp, #28
   2cc64:	4681      	mov	r9, r0
   2cc66:	461e      	mov	r6, r3
   2cc68:	4690      	mov	r8, r2
   2cc6a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2cc6c:	9101      	str	r1, [sp, #4]
   2cc6e:	2a00      	cmp	r2, #0
   2cc70:	f000 80e8 	beq.w	2ce44 <ip_interface_recvfrom+0x1e6>
   2cc74:	b11b      	cbz	r3, 2cc7e <ip_interface_recvfrom+0x20>
   2cc76:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2cc7a:	f000 80e5 	beq.w	2ce48 <ip_interface_recvfrom+0x1ea>
   2cc7e:	4648      	mov	r0, r9
   2cc80:	f7f6 fe44 	bl	2390c <interface_socket_from_handle_get>
   2cc84:	4604      	mov	r4, r0
   2cc86:	2800      	cmp	r0, #0
   2cc88:	f000 80e0 	beq.w	2ce4c <ip_interface_recvfrom+0x1ee>
   2cc8c:	6803      	ldr	r3, [r0, #0]
   2cc8e:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   2cc92:	d10f      	bne.n	2ccb4 <ip_interface_recvfrom+0x56>
   2cc94:	6802      	ldr	r2, [r0, #0]
   2cc96:	b292      	uxth	r2, r2
   2cc98:	2a06      	cmp	r2, #6
   2cc9a:	f000 809e 	beq.w	2cdda <ip_interface_recvfrom+0x17c>
   2cc9e:	6802      	ldr	r2, [r0, #0]
   2cca0:	461e      	mov	r6, r3
   2cca2:	b292      	uxth	r2, r2
   2cca4:	2a07      	cmp	r2, #7
   2cca6:	469a      	mov	sl, r3
   2cca8:	f000 8099 	beq.w	2cdde <ip_interface_recvfrom+0x180>
   2ccac:	2280      	movs	r2, #128	; 0x80
   2ccae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ccb2:	e084      	b.n	2cdbe <ip_interface_recvfrom+0x160>
   2ccb4:	07b1      	lsls	r1, r6, #30
   2ccb6:	d422      	bmi.n	2ccfe <ip_interface_recvfrom+0xa0>
   2ccb8:	6803      	ldr	r3, [r0, #0]
   2ccba:	00da      	lsls	r2, r3, #3
   2ccbc:	d522      	bpl.n	2cd04 <ip_interface_recvfrom+0xa6>
   2ccbe:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   2ccc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ccc6:	f006 0b10 	and.w	fp, r6, #16
   2ccca:	6822      	ldr	r2, [r4, #0]
   2cccc:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   2ccd0:	d01b      	beq.n	2cd0a <ip_interface_recvfrom+0xac>
   2ccd2:	6822      	ldr	r2, [r4, #0]
   2ccd4:	69e0      	ldr	r0, [r4, #28]
   2ccd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   2ccda:	6022      	str	r2, [r4, #0]
   2ccdc:	6802      	ldr	r2, [r0, #0]
   2ccde:	68d2      	ldr	r2, [r2, #12]
   2cce0:	4790      	blx	r2
   2cce2:	1c43      	adds	r3, r0, #1
   2cce4:	4605      	mov	r5, r0
   2cce6:	d029      	beq.n	2cd3c <ip_interface_recvfrom+0xde>
   2cce8:	4580      	cmp	r8, r0
   2ccea:	dd05      	ble.n	2ccf8 <ip_interface_recvfrom+0x9a>
   2ccec:	6923      	ldr	r3, [r4, #16]
   2ccee:	2b01      	cmp	r3, #1
   2ccf0:	d102      	bne.n	2ccf8 <ip_interface_recvfrom+0x9a>
   2ccf2:	f1bb 0f00 	cmp.w	fp, #0
   2ccf6:	d125      	bne.n	2cd44 <ip_interface_recvfrom+0xe6>
   2ccf8:	f04f 0a00 	mov.w	sl, #0
   2ccfc:	e04a      	b.n	2cd94 <ip_interface_recvfrom+0x136>
   2ccfe:	f04f 0a00 	mov.w	sl, #0
   2cd02:	e7de      	b.n	2ccc2 <ip_interface_recvfrom+0x64>
   2cd04:	f04f 0a01 	mov.w	sl, #1
   2cd08:	e7db      	b.n	2ccc2 <ip_interface_recvfrom+0x64>
   2cd0a:	6821      	ldr	r1, [r4, #0]
   2cd0c:	0308      	lsls	r0, r1, #12
   2cd0e:	d515      	bpl.n	2cd3c <ip_interface_recvfrom+0xde>
   2cd10:	6821      	ldr	r1, [r4, #0]
   2cd12:	b289      	uxth	r1, r1
   2cd14:	290d      	cmp	r1, #13
   2cd16:	d011      	beq.n	2cd3c <ip_interface_recvfrom+0xde>
   2cd18:	6923      	ldr	r3, [r4, #16]
   2cd1a:	2b01      	cmp	r3, #1
   2cd1c:	f000 809e 	beq.w	2ce5c <ip_interface_recvfrom+0x1fe>
   2cd20:	4692      	mov	sl, r2
   2cd22:	2280      	movs	r2, #128	; 0x80
   2cd24:	6823      	ldr	r3, [r4, #0]
   2cd26:	0c1b      	lsrs	r3, r3, #16
   2cd28:	041b      	lsls	r3, r3, #16
   2cd2a:	f043 030d 	orr.w	r3, r3, #13
   2cd2e:	6023      	str	r3, [r4, #0]
   2cd30:	6823      	ldr	r3, [r4, #0]
   2cd32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2cd36:	6023      	str	r3, [r4, #0]
   2cd38:	2600      	movs	r6, #0
   2cd3a:	e040      	b.n	2cdbe <ip_interface_recvfrom+0x160>
   2cd3c:	f1ba 0f00 	cmp.w	sl, #0
   2cd40:	f000 808d 	beq.w	2ce5e <ip_interface_recvfrom+0x200>
   2cd44:	6a23      	ldr	r3, [r4, #32]
   2cd46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2cd4a:	2b00      	cmp	r3, #0
   2cd4c:	bf08      	it	eq
   2cd4e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2cd52:	4611      	mov	r1, r2
   2cd54:	9302      	str	r3, [sp, #8]
   2cd56:	4648      	mov	r0, r9
   2cd58:	ab02      	add	r3, sp, #8
   2cd5a:	f7ff ff70 	bl	2cc3e <ip_interface_wait>
   2cd5e:	6823      	ldr	r3, [r4, #0]
   2cd60:	4602      	mov	r2, r0
   2cd62:	b29b      	uxth	r3, r3
   2cd64:	b933      	cbnz	r3, 2cd74 <ip_interface_recvfrom+0x116>
   2cd66:	2204      	movs	r2, #4
   2cd68:	4610      	mov	r0, r2
   2cd6a:	f7ff f940 	bl	2bfee <nrf_modem_os_errno_set>
   2cd6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2cd72:	e046      	b.n	2ce02 <ip_interface_recvfrom+0x1a4>
   2cd74:	2800      	cmp	r0, #0
   2cd76:	d06b      	beq.n	2ce50 <ip_interface_recvfrom+0x1f2>
   2cd78:	6823      	ldr	r3, [r4, #0]
   2cd7a:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   2cd7e:	d06a      	beq.n	2ce56 <ip_interface_recvfrom+0x1f8>
   2cd80:	6823      	ldr	r3, [r4, #0]
   2cd82:	b29b      	uxth	r3, r3
   2cd84:	2b0d      	cmp	r3, #13
   2cd86:	d066      	beq.n	2ce56 <ip_interface_recvfrom+0x1f8>
   2cd88:	6923      	ldr	r3, [r4, #16]
   2cd8a:	1e59      	subs	r1, r3, #1
   2cd8c:	f1d1 0a00 	rsbs	sl, r1, #0
   2cd90:	eb4a 0a01 	adc.w	sl, sl, r1
   2cd94:	b107      	cbz	r7, 2cd98 <ip_interface_recvfrom+0x13a>
   2cd96:	683f      	ldr	r7, [r7, #0]
   2cd98:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2cd9a:	69e0      	ldr	r0, [r4, #28]
   2cd9c:	e9cd 2704 	strd	r2, r7, [sp, #16]
   2cda0:	9b01      	ldr	r3, [sp, #4]
   2cda2:	6802      	ldr	r2, [r0, #0]
   2cda4:	e9cd 3802 	strd	r3, r8, [sp, #8]
   2cda8:	6895      	ldr	r5, [r2, #8]
   2cdaa:	a902      	add	r1, sp, #8
   2cdac:	4632      	mov	r2, r6
   2cdae:	47a8      	blx	r5
   2cdb0:	1c42      	adds	r2, r0, #1
   2cdb2:	4605      	mov	r5, r0
   2cdb4:	bf0b      	itete	eq
   2cdb6:	2600      	moveq	r6, #0
   2cdb8:	2601      	movne	r6, #1
   2cdba:	220b      	moveq	r2, #11
   2cdbc:	2200      	movne	r2, #0
   2cdbe:	69e0      	ldr	r0, [r4, #28]
   2cdc0:	9201      	str	r2, [sp, #4]
   2cdc2:	6801      	ldr	r1, [r0, #0]
   2cdc4:	68c9      	ldr	r1, [r1, #12]
   2cdc6:	4788      	blx	r1
   2cdc8:	3001      	adds	r0, #1
   2cdca:	9a01      	ldr	r2, [sp, #4]
   2cdcc:	d009      	beq.n	2cde2 <ip_interface_recvfrom+0x184>
   2cdce:	6823      	ldr	r3, [r4, #0]
   2cdd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2cdd4:	6023      	str	r3, [r4, #0]
   2cdd6:	b1a2      	cbz	r2, 2ce02 <ip_interface_recvfrom+0x1a4>
   2cdd8:	e7c6      	b.n	2cd68 <ip_interface_recvfrom+0x10a>
   2cdda:	461e      	mov	r6, r3
   2cddc:	469a      	mov	sl, r3
   2cdde:	2209      	movs	r2, #9
   2cde0:	e765      	b.n	2ccae <ip_interface_recvfrom+0x50>
   2cde2:	f1ba 0f00 	cmp.w	sl, #0
   2cde6:	d010      	beq.n	2ce0a <ip_interface_recvfrom+0x1ac>
   2cde8:	2e00      	cmp	r6, #0
   2cdea:	d1f4      	bne.n	2cdd6 <ip_interface_recvfrom+0x178>
   2cdec:	4635      	mov	r5, r6
   2cdee:	6823      	ldr	r3, [r4, #0]
   2cdf0:	0c1b      	lsrs	r3, r3, #16
   2cdf2:	041b      	lsls	r3, r3, #16
   2cdf4:	f043 030d 	orr.w	r3, r3, #13
   2cdf8:	6023      	str	r3, [r4, #0]
   2cdfa:	6823      	ldr	r3, [r4, #0]
   2cdfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2ce00:	6023      	str	r3, [r4, #0]
   2ce02:	4628      	mov	r0, r5
   2ce04:	b007      	add	sp, #28
   2ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce0a:	2e00      	cmp	r6, #0
   2ce0c:	d1e3      	bne.n	2cdd6 <ip_interface_recvfrom+0x178>
   2ce0e:	6823      	ldr	r3, [r4, #0]
   2ce10:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2ce14:	6823      	ldr	r3, [r4, #0]
   2ce16:	d00a      	beq.n	2ce2e <ip_interface_recvfrom+0x1d0>
   2ce18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2ce1c:	6023      	str	r3, [r4, #0]
   2ce1e:	6823      	ldr	r3, [r4, #0]
   2ce20:	2269      	movs	r2, #105	; 0x69
   2ce22:	0c1b      	lsrs	r3, r3, #16
   2ce24:	041b      	lsls	r3, r3, #16
   2ce26:	f043 030d 	orr.w	r3, r3, #13
   2ce2a:	6023      	str	r3, [r4, #0]
   2ce2c:	e79c      	b.n	2cd68 <ip_interface_recvfrom+0x10a>
   2ce2e:	031b      	lsls	r3, r3, #12
   2ce30:	d5d1      	bpl.n	2cdd6 <ip_interface_recvfrom+0x178>
   2ce32:	6823      	ldr	r3, [r4, #0]
   2ce34:	b29b      	uxth	r3, r3
   2ce36:	2b0d      	cmp	r3, #13
   2ce38:	d1cd      	bne.n	2cdd6 <ip_interface_recvfrom+0x178>
   2ce3a:	68a3      	ldr	r3, [r4, #8]
   2ce3c:	2b00      	cmp	r3, #0
   2ce3e:	d0ca      	beq.n	2cdd6 <ip_interface_recvfrom+0x178>
   2ce40:	68a2      	ldr	r2, [r4, #8]
   2ce42:	e7c8      	b.n	2cdd6 <ip_interface_recvfrom+0x178>
   2ce44:	2216      	movs	r2, #22
   2ce46:	e78f      	b.n	2cd68 <ip_interface_recvfrom+0x10a>
   2ce48:	225f      	movs	r2, #95	; 0x5f
   2ce4a:	e78d      	b.n	2cd68 <ip_interface_recvfrom+0x10a>
   2ce4c:	2209      	movs	r2, #9
   2ce4e:	e78b      	b.n	2cd68 <ip_interface_recvfrom+0x10a>
   2ce50:	f04f 0a01 	mov.w	sl, #1
   2ce54:	e739      	b.n	2ccca <ip_interface_recvfrom+0x6c>
   2ce56:	2600      	movs	r6, #0
   2ce58:	46b2      	mov	sl, r6
   2ce5a:	e7b0      	b.n	2cdbe <ip_interface_recvfrom+0x160>
   2ce5c:	469a      	mov	sl, r3
   2ce5e:	220b      	movs	r2, #11
   2ce60:	e76a      	b.n	2cd38 <ip_interface_recvfrom+0xda>

0002ce62 <ip_interface_connect>:
   2ce62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ce66:	4606      	mov	r6, r0
   2ce68:	4691      	mov	r9, r2
   2ce6a:	460f      	mov	r7, r1
   2ce6c:	b085      	sub	sp, #20
   2ce6e:	2900      	cmp	r1, #0
   2ce70:	d067      	beq.n	2cf42 <ip_interface_connect+0xe0>
   2ce72:	2a00      	cmp	r2, #0
   2ce74:	d065      	beq.n	2cf42 <ip_interface_connect+0xe0>
   2ce76:	f7f6 fd49 	bl	2390c <interface_socket_from_handle_get>
   2ce7a:	4604      	mov	r4, r0
   2ce7c:	2800      	cmp	r0, #0
   2ce7e:	d062      	beq.n	2cf46 <ip_interface_connect+0xe4>
   2ce80:	6803      	ldr	r3, [r0, #0]
   2ce82:	b29b      	uxth	r3, r3
   2ce84:	2b02      	cmp	r3, #2
   2ce86:	d003      	beq.n	2ce90 <ip_interface_connect+0x2e>
   2ce88:	6803      	ldr	r3, [r0, #0]
   2ce8a:	b29b      	uxth	r3, r3
   2ce8c:	2b04      	cmp	r3, #4
   2ce8e:	d151      	bne.n	2cf34 <ip_interface_connect+0xd2>
   2ce90:	6823      	ldr	r3, [r4, #0]
   2ce92:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   2ce96:	d158      	bne.n	2cf4a <ip_interface_connect+0xe8>
   2ce98:	f247 0202 	movw	r2, #28674	; 0x7002
   2ce9c:	4630      	mov	r0, r6
   2ce9e:	69a1      	ldr	r1, [r4, #24]
   2cea0:	f7ff feba 	bl	2cc18 <ip_interface_request_create>
   2cea4:	4605      	mov	r5, r0
   2cea6:	2800      	cmp	r0, #0
   2cea8:	d051      	beq.n	2cf4e <ip_interface_connect+0xec>
   2ceaa:	f247 0802 	movw	r8, #28674	; 0x7002
   2ceae:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   2ceb2:	60c3      	str	r3, [r0, #12]
   2ceb4:	69a3      	ldr	r3, [r4, #24]
   2ceb6:	464a      	mov	r2, r9
   2ceb8:	6103      	str	r3, [r0, #16]
   2ceba:	6883      	ldr	r3, [r0, #8]
   2cebc:	4639      	mov	r1, r7
   2cebe:	3304      	adds	r3, #4
   2cec0:	6083      	str	r3, [r0, #8]
   2cec2:	f100 0318 	add.w	r3, r0, #24
   2cec6:	9301      	str	r3, [sp, #4]
   2cec8:	f10d 030a 	add.w	r3, sp, #10
   2cecc:	9300      	str	r3, [sp, #0]
   2cece:	68e0      	ldr	r0, [r4, #12]
   2ced0:	ab02      	add	r3, sp, #8
   2ced2:	f7ff fe77 	bl	2cbc4 <ip_addr_parse>
   2ced6:	bb30      	cbnz	r0, 2cf26 <ip_interface_connect+0xc4>
   2ced8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2cedc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2cee0:	82ab      	strh	r3, [r5, #20]
   2cee2:	68ab      	ldr	r3, [r5, #8]
   2cee4:	6827      	ldr	r7, [r4, #0]
   2cee6:	4413      	add	r3, r2
   2cee8:	60ab      	str	r3, [r5, #8]
   2ceea:	6823      	ldr	r3, [r4, #0]
   2ceec:	82ea      	strh	r2, [r5, #22]
   2ceee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2cef2:	6023      	str	r3, [r4, #0]
   2cef4:	462a      	mov	r2, r5
   2cef6:	4641      	mov	r1, r8
   2cef8:	2004      	movs	r0, #4
   2cefa:	f7ff fdf1 	bl	2cae0 <rpc_client_request_send>
   2cefe:	6823      	ldr	r3, [r4, #0]
   2cf00:	00db      	lsls	r3, r3, #3
   2cf02:	d426      	bmi.n	2cf52 <ip_interface_connect+0xf0>
   2cf04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cf06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2cf0a:	2b00      	cmp	r3, #0
   2cf0c:	bf08      	it	eq
   2cf0e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2cf12:	2105      	movs	r1, #5
   2cf14:	9303      	str	r3, [sp, #12]
   2cf16:	4630      	mov	r0, r6
   2cf18:	ab03      	add	r3, sp, #12
   2cf1a:	f7ff fe90 	bl	2cc3e <ip_interface_wait>
   2cf1e:	b130      	cbz	r0, 2cf2e <ip_interface_connect+0xcc>
   2cf20:	2877      	cmp	r0, #119	; 0x77
   2cf22:	d000      	beq.n	2cf26 <ip_interface_connect+0xc4>
   2cf24:	6027      	str	r7, [r4, #0]
   2cf26:	f7ff f862 	bl	2bfee <nrf_modem_os_errno_set>
   2cf2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf2e:	b005      	add	sp, #20
   2cf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cf34:	6803      	ldr	r3, [r0, #0]
   2cf36:	b29b      	uxth	r3, r3
   2cf38:	2b05      	cmp	r3, #5
   2cf3a:	bf14      	ite	ne
   2cf3c:	2009      	movne	r0, #9
   2cf3e:	207f      	moveq	r0, #127	; 0x7f
   2cf40:	e7f1      	b.n	2cf26 <ip_interface_connect+0xc4>
   2cf42:	2016      	movs	r0, #22
   2cf44:	e7ef      	b.n	2cf26 <ip_interface_connect+0xc4>
   2cf46:	2009      	movs	r0, #9
   2cf48:	e7ed      	b.n	2cf26 <ip_interface_connect+0xc4>
   2cf4a:	2078      	movs	r0, #120	; 0x78
   2cf4c:	e7eb      	b.n	2cf26 <ip_interface_connect+0xc4>
   2cf4e:	200c      	movs	r0, #12
   2cf50:	e7e9      	b.n	2cf26 <ip_interface_connect+0xc4>
   2cf52:	2077      	movs	r0, #119	; 0x77
   2cf54:	e7e7      	b.n	2cf26 <ip_interface_connect+0xc4>

0002cf56 <getopt_check_and_send_int>:
   2cf56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cf58:	4604      	mov	r4, r0
   2cf5a:	460d      	mov	r5, r1
   2cf5c:	4618      	mov	r0, r3
   2cf5e:	4611      	mov	r1, r2
   2cf60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2cf64:	b18b      	cbz	r3, 2cf8a <getopt_check_and_send_int+0x34>
   2cf66:	681e      	ldr	r6, [r3, #0]
   2cf68:	b17e      	cbz	r6, 2cf8a <getopt_check_and_send_int+0x34>
   2cf6a:	b172      	cbz	r2, 2cf8a <getopt_check_and_send_int+0x34>
   2cf6c:	e9cd 2300 	strd	r2, r3, [sp]
   2cf70:	462b      	mov	r3, r5
   2cf72:	4622      	mov	r2, r4
   2cf74:	f7f6 ffb0 	bl	23ed8 <ip_interface_socketoption_get>
   2cf78:	4603      	mov	r3, r0
   2cf7a:	b118      	cbz	r0, 2cf84 <getopt_check_and_send_int+0x2e>
   2cf7c:	f7ff f837 	bl	2bfee <nrf_modem_os_errno_set>
   2cf80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cf84:	4618      	mov	r0, r3
   2cf86:	b002      	add	sp, #8
   2cf88:	bd70      	pop	{r4, r5, r6, pc}
   2cf8a:	2016      	movs	r0, #22
   2cf8c:	e7f6      	b.n	2cf7c <getopt_check_and_send_int+0x26>

0002cf8e <ip_interface_socketoption_send>:
   2cf8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf92:	4698      	mov	r8, r3
   2cf94:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   2cf98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cf9c:	9301      	str	r3, [sp, #4]
   2cf9e:	680b      	ldr	r3, [r1, #0]
   2cfa0:	4606      	mov	r6, r0
   2cfa2:	025d      	lsls	r5, r3, #9
   2cfa4:	460c      	mov	r4, r1
   2cfa6:	4692      	mov	sl, r2
   2cfa8:	d43a      	bmi.n	2d020 <ip_interface_socketoption_send+0x92>
   2cfaa:	680b      	ldr	r3, [r1, #0]
   2cfac:	0219      	lsls	r1, r3, #8
   2cfae:	d437      	bmi.n	2d020 <ip_interface_socketoption_send+0x92>
   2cfb0:	6823      	ldr	r3, [r4, #0]
   2cfb2:	01da      	lsls	r2, r3, #7
   2cfb4:	d434      	bmi.n	2d020 <ip_interface_socketoption_send+0x92>
   2cfb6:	6823      	ldr	r3, [r4, #0]
   2cfb8:	019b      	lsls	r3, r3, #6
   2cfba:	d431      	bmi.n	2d020 <ip_interface_socketoption_send+0x92>
   2cfbc:	f8d4 9000 	ldr.w	r9, [r4]
   2cfc0:	6823      	ldr	r3, [r4, #0]
   2cfc2:	f247 0203 	movw	r2, #28675	; 0x7003
   2cfc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2cfca:	6023      	str	r3, [r4, #0]
   2cfcc:	69a1      	ldr	r1, [r4, #24]
   2cfce:	463b      	mov	r3, r7
   2cfd0:	f7ff fe22 	bl	2cc18 <ip_interface_request_create>
   2cfd4:	4605      	mov	r5, r0
   2cfd6:	b308      	cbz	r0, 2d01c <ip_interface_socketoption_send+0x8e>
   2cfd8:	6883      	ldr	r3, [r0, #8]
   2cfda:	f8c0 a014 	str.w	sl, [r0, #20]
   2cfde:	3308      	adds	r3, #8
   2cfe0:	6083      	str	r3, [r0, #8]
   2cfe2:	f8c0 8018 	str.w	r8, [r0, #24]
   2cfe6:	b13f      	cbz	r7, 2cff8 <ip_interface_socketoption_send+0x6a>
   2cfe8:	f1bb 0f00 	cmp.w	fp, #0
   2cfec:	d004      	beq.n	2cff8 <ip_interface_socketoption_send+0x6a>
   2cfee:	463a      	mov	r2, r7
   2cff0:	4659      	mov	r1, fp
   2cff2:	6800      	ldr	r0, [r0, #0]
   2cff4:	f000 fde3 	bl	2dbbe <memcpy>
   2cff8:	462a      	mov	r2, r5
   2cffa:	f247 0103 	movw	r1, #28675	; 0x7003
   2cffe:	2004      	movs	r0, #4
   2d000:	f7ff fd6e 	bl	2cae0 <rpc_client_request_send>
   2d004:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2d008:	4630      	mov	r0, r6
   2d00a:	4611      	mov	r1, r2
   2d00c:	ab01      	add	r3, sp, #4
   2d00e:	f7ff fe16 	bl	2cc3e <ip_interface_wait>
   2d012:	f8c4 9000 	str.w	r9, [r4]
   2d016:	b003      	add	sp, #12
   2d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d01c:	200c      	movs	r0, #12
   2d01e:	e7f8      	b.n	2d012 <ip_interface_socketoption_send+0x84>
   2d020:	200b      	movs	r0, #11
   2d022:	e7f8      	b.n	2d016 <ip_interface_socketoption_send+0x88>

0002d024 <setopt_check_and_send_int>:
   2d024:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d026:	4604      	mov	r4, r0
   2d028:	460d      	mov	r5, r1
   2d02a:	4618      	mov	r0, r3
   2d02c:	4611      	mov	r1, r2
   2d02e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   2d032:	2a04      	cmp	r2, #4
   2d034:	d10f      	bne.n	2d056 <setopt_check_and_send_int+0x32>
   2d036:	b173      	cbz	r3, 2d056 <setopt_check_and_send_int+0x32>
   2d038:	e9cd 3200 	strd	r3, r2, [sp]
   2d03c:	462b      	mov	r3, r5
   2d03e:	4622      	mov	r2, r4
   2d040:	f7ff ffa5 	bl	2cf8e <ip_interface_socketoption_send>
   2d044:	4603      	mov	r3, r0
   2d046:	b118      	cbz	r0, 2d050 <setopt_check_and_send_int+0x2c>
   2d048:	f7fe ffd1 	bl	2bfee <nrf_modem_os_errno_set>
   2d04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d050:	4618      	mov	r0, r3
   2d052:	b003      	add	sp, #12
   2d054:	bd30      	pop	{r4, r5, pc}
   2d056:	2016      	movs	r0, #22
   2d058:	e7f6      	b.n	2d048 <setopt_check_and_send_int+0x24>

0002d05a <ip_interface_getopt>:
   2d05a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d05e:	2901      	cmp	r1, #1
   2d060:	4604      	mov	r4, r0
   2d062:	460f      	mov	r7, r1
   2d064:	4616      	mov	r6, r2
   2d066:	461d      	mov	r5, r3
   2d068:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2d06c:	d007      	beq.n	2d07e <ip_interface_getopt+0x24>
   2d06e:	206d      	movs	r0, #109	; 0x6d
   2d070:	f7fe ffbd 	bl	2bfee <nrf_modem_os_errno_set>
   2d074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d078:	b002      	add	sp, #8
   2d07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d07e:	f7f6 fc45 	bl	2390c <interface_socket_from_handle_get>
   2d082:	4602      	mov	r2, r0
   2d084:	b908      	cbnz	r0, 2d08a <ip_interface_getopt+0x30>
   2d086:	2009      	movs	r0, #9
   2d088:	e7f2      	b.n	2d070 <ip_interface_getopt+0x16>
   2d08a:	2e28      	cmp	r6, #40	; 0x28
   2d08c:	dc0d      	bgt.n	2d0aa <ip_interface_getopt+0x50>
   2d08e:	2e1d      	cmp	r6, #29
   2d090:	dd0d      	ble.n	2d0ae <ip_interface_getopt+0x54>
   2d092:	f1a6 031e 	sub.w	r3, r6, #30
   2d096:	2b0a      	cmp	r3, #10
   2d098:	d809      	bhi.n	2d0ae <ip_interface_getopt+0x54>
   2d09a:	e8df f003 	tbb	[pc, r3]
   2d09e:	1d13      	.short	0x1d13
   2d0a0:	08080824 	.word	0x08080824
   2d0a4:	08080808 	.word	0x08080808
   2d0a8:	2b          	.byte	0x2b
   2d0a9:	00          	.byte	0x00
   2d0aa:	2e37      	cmp	r6, #55	; 0x37
   2d0ac:	d029      	beq.n	2d102 <ip_interface_getopt+0xa8>
   2d0ae:	462b      	mov	r3, r5
   2d0b0:	4632      	mov	r2, r6
   2d0b2:	2101      	movs	r1, #1
   2d0b4:	4620      	mov	r0, r4
   2d0b6:	f8cd 8020 	str.w	r8, [sp, #32]
   2d0ba:	b002      	add	sp, #8
   2d0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d0c0:	f7f6 bc68 	b.w	23994 <interface_socket_getopt>
   2d0c4:	4623      	mov	r3, r4
   2d0c6:	f248 0101 	movw	r1, #32769	; 0x8001
   2d0ca:	f44f 7000 	mov.w	r0, #512	; 0x200
   2d0ce:	e9cd 5800 	strd	r5, r8, [sp]
   2d0d2:	f7ff ff40 	bl	2cf56 <getopt_check_and_send_int>
   2d0d6:	e7cf      	b.n	2d078 <ip_interface_getopt+0x1e>
   2d0d8:	4623      	mov	r3, r4
   2d0da:	f244 0110 	movw	r1, #16400	; 0x4010
   2d0de:	2004      	movs	r0, #4
   2d0e0:	e9cd 5800 	strd	r5, r8, [sp]
   2d0e4:	e7f5      	b.n	2d0d2 <ip_interface_getopt+0x78>
   2d0e6:	4623      	mov	r3, r4
   2d0e8:	f246 0110 	movw	r1, #24592	; 0x6010
   2d0ec:	2006      	movs	r0, #6
   2d0ee:	e9cd 5800 	strd	r5, r8, [sp]
   2d0f2:	e7ee      	b.n	2d0d2 <ip_interface_getopt+0x78>
   2d0f4:	4623      	mov	r3, r4
   2d0f6:	f241 0104 	movw	r1, #4100	; 0x1004
   2d0fa:	2008      	movs	r0, #8
   2d0fc:	e9cd 5800 	strd	r5, r8, [sp]
   2d100:	e7e7      	b.n	2d0d2 <ip_interface_getopt+0x78>
   2d102:	4623      	mov	r3, r4
   2d104:	f245 0106 	movw	r1, #20486	; 0x5006
   2d108:	4638      	mov	r0, r7
   2d10a:	e9cd 5800 	strd	r5, r8, [sp]
   2d10e:	e7e0      	b.n	2d0d2 <ip_interface_getopt+0x78>

0002d110 <attach_trigger_condition_verify>:
   2d110:	6903      	ldr	r3, [r0, #16]
   2d112:	2b01      	cmp	r3, #1
   2d114:	d105      	bne.n	2d122 <attach_trigger_condition_verify+0x12>
   2d116:	6800      	ldr	r0, [r0, #0]
   2d118:	b280      	uxth	r0, r0
   2d11a:	1f43      	subs	r3, r0, #5
   2d11c:	4258      	negs	r0, r3
   2d11e:	4158      	adcs	r0, r3
   2d120:	4770      	bx	lr
   2d122:	2b02      	cmp	r3, #2
   2d124:	d109      	bne.n	2d13a <attach_trigger_condition_verify+0x2a>
   2d126:	6803      	ldr	r3, [r0, #0]
   2d128:	b29b      	uxth	r3, r3
   2d12a:	2b02      	cmp	r3, #2
   2d12c:	d003      	beq.n	2d136 <attach_trigger_condition_verify+0x26>
   2d12e:	6803      	ldr	r3, [r0, #0]
   2d130:	b29b      	uxth	r3, r3
   2d132:	2b04      	cmp	r3, #4
   2d134:	d1ef      	bne.n	2d116 <attach_trigger_condition_verify+0x6>
   2d136:	2001      	movs	r0, #1
   2d138:	4770      	bx	lr
   2d13a:	2000      	movs	r0, #0
   2d13c:	4770      	bx	lr

0002d13e <secure_client_socket>:
   2d13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d144:	9301      	str	r3, [sp, #4]
   2d146:	680b      	ldr	r3, [r1, #0]
   2d148:	4606      	mov	r6, r0
   2d14a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2d14e:	600b      	str	r3, [r1, #0]
   2d150:	680b      	ldr	r3, [r1, #0]
   2d152:	460c      	mov	r4, r1
   2d154:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2d158:	600b      	str	r3, [r1, #0]
   2d15a:	680f      	ldr	r7, [r1, #0]
   2d15c:	463a      	mov	r2, r7
   2d15e:	f7f7 fd1f 	bl	24ba0 <secure_socket_attach_initiate>
   2d162:	4605      	mov	r5, r0
   2d164:	b950      	cbnz	r0, 2d17c <secure_client_socket+0x3e>
   2d166:	220c      	movs	r2, #12
   2d168:	4630      	mov	r0, r6
   2d16a:	4611      	mov	r1, r2
   2d16c:	ab01      	add	r3, sp, #4
   2d16e:	f7ff fd66 	bl	2cc3e <ip_interface_wait>
   2d172:	4605      	mov	r5, r0
   2d174:	b128      	cbz	r0, 2d182 <secure_client_socket+0x44>
   2d176:	2877      	cmp	r0, #119	; 0x77
   2d178:	d000      	beq.n	2d17c <secure_client_socket+0x3e>
   2d17a:	6027      	str	r7, [r4, #0]
   2d17c:	4628      	mov	r0, r5
   2d17e:	b003      	add	sp, #12
   2d180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d182:	4630      	mov	r0, r6
   2d184:	f7f7 fcfa 	bl	24b7c <hostname_free>
   2d188:	6823      	ldr	r3, [r4, #0]
   2d18a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   2d18e:	6023      	str	r3, [r4, #0]
   2d190:	6823      	ldr	r3, [r4, #0]
   2d192:	0c1b      	lsrs	r3, r3, #16
   2d194:	041b      	lsls	r3, r3, #16
   2d196:	f043 030c 	orr.w	r3, r3, #12
   2d19a:	6023      	str	r3, [r4, #0]
   2d19c:	6823      	ldr	r3, [r4, #0]
   2d19e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d1a2:	6023      	str	r3, [r4, #0]
   2d1a4:	6823      	ldr	r3, [r4, #0]
   2d1a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2d1aa:	6023      	str	r3, [r4, #0]
   2d1ac:	e7e6      	b.n	2d17c <secure_client_socket+0x3e>

0002d1ae <tls_interface_close>:
   2d1ae:	b510      	push	{r4, lr}
   2d1b0:	4604      	mov	r4, r0
   2d1b2:	f7f6 fbab 	bl	2390c <interface_socket_from_handle_get>
   2d1b6:	b138      	cbz	r0, 2d1c8 <tls_interface_close+0x1a>
   2d1b8:	4620      	mov	r0, r4
   2d1ba:	f7f7 fcdf 	bl	24b7c <hostname_free>
   2d1be:	4620      	mov	r0, r4
   2d1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d1c4:	f7f6 bd24 	b.w	23c10 <ip_interface_close>
   2d1c8:	2009      	movs	r0, #9
   2d1ca:	f7fe ff10 	bl	2bfee <nrf_modem_os_errno_set>
   2d1ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d1d2:	bd10      	pop	{r4, pc}

0002d1d4 <null_handler_init>:
   2d1d4:	2000      	movs	r0, #0
   2d1d6:	4770      	bx	lr

0002d1d8 <null_handler_put>:
   2d1d8:	b510      	push	{r4, lr}
   2d1da:	460c      	mov	r4, r1
   2d1dc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2d1e0:	4620      	mov	r0, r4
   2d1e2:	4798      	blx	r3
   2d1e4:	6860      	ldr	r0, [r4, #4]
   2d1e6:	bd10      	pop	{r4, pc}

0002d1e8 <null_handler_get>:
   2d1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d1ec:	4770      	bx	lr

0002d1ee <null_handler_available>:
   2d1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d1f2:	4770      	bx	lr

0002d1f4 <null_handler_flush>:
   2d1f4:	2000      	movs	r0, #0
   2d1f6:	4770      	bx	lr

0002d1f8 <null_handler_free>:
   2d1f8:	4770      	bx	lr

0002d1fa <stream_handler_free_packet>:
   2d1fa:	b530      	push	{r4, r5, lr}
   2d1fc:	4605      	mov	r5, r0
   2d1fe:	b085      	sub	sp, #20
   2d200:	68c0      	ldr	r0, [r0, #12]
   2d202:	f000 fb0e 	bl	2d822 <linked_list_pop>
   2d206:	4604      	mov	r4, r0
   2d208:	b170      	cbz	r0, 2d228 <stream_handler_free_packet+0x2e>
   2d20a:	6843      	ldr	r3, [r0, #4]
   2d20c:	9300      	str	r3, [sp, #0]
   2d20e:	6883      	ldr	r3, [r0, #8]
   2d210:	9301      	str	r3, [sp, #4]
   2d212:	6903      	ldr	r3, [r0, #16]
   2d214:	9302      	str	r3, [sp, #8]
   2d216:	68c3      	ldr	r3, [r0, #12]
   2d218:	4668      	mov	r0, sp
   2d21a:	9303      	str	r3, [sp, #12]
   2d21c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2d220:	4798      	blx	r3
   2d222:	4620      	mov	r0, r4
   2d224:	f7f1 fc60 	bl	1eae8 <nrf_modem_os_free>
   2d228:	b005      	add	sp, #20
   2d22a:	bd30      	pop	{r4, r5, pc}

0002d22c <stream_handler_init>:
   2d22c:	b510      	push	{r4, lr}
   2d22e:	4604      	mov	r4, r0
   2d230:	200c      	movs	r0, #12
   2d232:	f7f1 fc51 	bl	1ead8 <nrf_modem_os_alloc>
   2d236:	60e0      	str	r0, [r4, #12]
   2d238:	b128      	cbz	r0, 2d246 <stream_handler_init+0x1a>
   2d23a:	2300      	movs	r3, #0
   2d23c:	6123      	str	r3, [r4, #16]
   2d23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d242:	f000 bad2 	b.w	2d7ea <linked_list_init>
   2d246:	200c      	movs	r0, #12
   2d248:	bd10      	pop	{r4, pc}

0002d24a <stream_handler_put>:
   2d24a:	b570      	push	{r4, r5, r6, lr}
   2d24c:	4606      	mov	r6, r0
   2d24e:	2014      	movs	r0, #20
   2d250:	460d      	mov	r5, r1
   2d252:	f7f1 fc41 	bl	1ead8 <nrf_modem_os_alloc>
   2d256:	4604      	mov	r4, r0
   2d258:	b178      	cbz	r0, 2d27a <stream_handler_put+0x30>
   2d25a:	682b      	ldr	r3, [r5, #0]
   2d25c:	4601      	mov	r1, r0
   2d25e:	6043      	str	r3, [r0, #4]
   2d260:	686b      	ldr	r3, [r5, #4]
   2d262:	6083      	str	r3, [r0, #8]
   2d264:	68eb      	ldr	r3, [r5, #12]
   2d266:	60c3      	str	r3, [r0, #12]
   2d268:	68ab      	ldr	r3, [r5, #8]
   2d26a:	6103      	str	r3, [r0, #16]
   2d26c:	68f0      	ldr	r0, [r6, #12]
   2d26e:	f000 fac5 	bl	2d7fc <linked_list_push>
   2d272:	b128      	cbz	r0, 2d280 <stream_handler_put+0x36>
   2d274:	4620      	mov	r0, r4
   2d276:	f7f1 fc37 	bl	1eae8 <nrf_modem_os_free>
   2d27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d27e:	e000      	b.n	2d282 <stream_handler_put+0x38>
   2d280:	6868      	ldr	r0, [r5, #4]
   2d282:	bd70      	pop	{r4, r5, r6, pc}

0002d284 <stream_handler_get>:
   2d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d288:	4606      	mov	r6, r0
   2d28a:	b085      	sub	sp, #20
   2d28c:	68c0      	ldr	r0, [r0, #12]
   2d28e:	468a      	mov	sl, r1
   2d290:	4617      	mov	r7, r2
   2d292:	f000 fad0 	bl	2d836 <linked_list_peek>
   2d296:	4604      	mov	r4, r0
   2d298:	2800      	cmp	r0, #0
   2d29a:	d055      	beq.n	2d348 <stream_handler_get+0xc4>
   2d29c:	f8da 0008 	ldr.w	r0, [sl, #8]
   2d2a0:	2800      	cmp	r0, #0
   2d2a2:	d049      	beq.n	2d338 <stream_handler_get+0xb4>
   2d2a4:	6921      	ldr	r1, [r4, #16]
   2d2a6:	2900      	cmp	r1, #0
   2d2a8:	d046      	beq.n	2d338 <stream_handler_get+0xb4>
   2d2aa:	68e2      	ldr	r2, [r4, #12]
   2d2ac:	2a00      	cmp	r2, #0
   2d2ae:	d043      	beq.n	2d338 <stream_handler_get+0xb4>
   2d2b0:	f8da 500c 	ldr.w	r5, [sl, #12]
   2d2b4:	42aa      	cmp	r2, r5
   2d2b6:	bf28      	it	cs
   2d2b8:	462a      	movcs	r2, r5
   2d2ba:	f8ca 200c 	str.w	r2, [sl, #12]
   2d2be:	f000 fc7e 	bl	2dbbe <memcpy>
   2d2c2:	2500      	movs	r5, #0
   2d2c4:	f8da 3004 	ldr.w	r3, [sl, #4]
   2d2c8:	6931      	ldr	r1, [r6, #16]
   2d2ca:	9301      	str	r3, [sp, #4]
   2d2cc:	f8da 3000 	ldr.w	r3, [sl]
   2d2d0:	9302      	str	r3, [sp, #8]
   2d2d2:	f007 0320 	and.w	r3, r7, #32
   2d2d6:	9303      	str	r3, [sp, #12]
   2d2d8:	f007 0708 	and.w	r7, r7, #8
   2d2dc:	9b01      	ldr	r3, [sp, #4]
   2d2de:	42ab      	cmp	r3, r5
   2d2e0:	d924      	bls.n	2d32c <stream_handler_get+0xa8>
   2d2e2:	68a2      	ldr	r2, [r4, #8]
   2d2e4:	9b01      	ldr	r3, [sp, #4]
   2d2e6:	eba2 0801 	sub.w	r8, r2, r1
   2d2ea:	eba3 0b05 	sub.w	fp, r3, r5
   2d2ee:	f8da 2000 	ldr.w	r2, [sl]
   2d2f2:	45d8      	cmp	r8, fp
   2d2f4:	46c1      	mov	r9, r8
   2d2f6:	bf28      	it	cs
   2d2f8:	46d9      	movcs	r9, fp
   2d2fa:	b142      	cbz	r2, 2d30e <stream_handler_get+0x8a>
   2d2fc:	9b03      	ldr	r3, [sp, #12]
   2d2fe:	b933      	cbnz	r3, 2d30e <stream_handler_get+0x8a>
   2d300:	6860      	ldr	r0, [r4, #4]
   2d302:	9b02      	ldr	r3, [sp, #8]
   2d304:	4401      	add	r1, r0
   2d306:	464a      	mov	r2, r9
   2d308:	1958      	adds	r0, r3, r5
   2d30a:	f000 fc58 	bl	2dbbe <memcpy>
   2d30e:	4620      	mov	r0, r4
   2d310:	f000 fa98 	bl	2d844 <linked_list_get_next>
   2d314:	4604      	mov	r4, r0
   2d316:	b92f      	cbnz	r7, 2d324 <stream_handler_get+0xa0>
   2d318:	45d8      	cmp	r8, fp
   2d31a:	d811      	bhi.n	2d340 <stream_handler_get+0xbc>
   2d31c:	4630      	mov	r0, r6
   2d31e:	f7ff ff6c 	bl	2d1fa <stream_handler_free_packet>
   2d322:	6137      	str	r7, [r6, #16]
   2d324:	2100      	movs	r1, #0
   2d326:	444d      	add	r5, r9
   2d328:	2c00      	cmp	r4, #0
   2d32a:	d1d7      	bne.n	2d2dc <stream_handler_get+0x58>
   2d32c:	4628      	mov	r0, r5
   2d32e:	f8ca 5004 	str.w	r5, [sl, #4]
   2d332:	b005      	add	sp, #20
   2d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d338:	2200      	movs	r2, #0
   2d33a:	f8ca 200c 	str.w	r2, [sl, #12]
   2d33e:	e7c0      	b.n	2d2c2 <stream_handler_get+0x3e>
   2d340:	6932      	ldr	r2, [r6, #16]
   2d342:	444a      	add	r2, r9
   2d344:	6132      	str	r2, [r6, #16]
   2d346:	e7ed      	b.n	2d324 <stream_handler_get+0xa0>
   2d348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d34c:	e7f1      	b.n	2d332 <stream_handler_get+0xae>

0002d34e <stream_handler_available>:
   2d34e:	b510      	push	{r4, lr}
   2d350:	4604      	mov	r4, r0
   2d352:	68c0      	ldr	r0, [r0, #12]
   2d354:	f000 fa6f 	bl	2d836 <linked_list_peek>
   2d358:	b150      	cbz	r0, 2d370 <stream_handler_available+0x22>
   2d35a:	6924      	ldr	r4, [r4, #16]
   2d35c:	4264      	negs	r4, r4
   2d35e:	6883      	ldr	r3, [r0, #8]
   2d360:	441c      	add	r4, r3
   2d362:	f000 fa6f 	bl	2d844 <linked_list_get_next>
   2d366:	2800      	cmp	r0, #0
   2d368:	d1f9      	bne.n	2d35e <stream_handler_available+0x10>
   2d36a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2d36e:	bd10      	pop	{r4, pc}
   2d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d374:	e7fb      	b.n	2d36e <stream_handler_available+0x20>

0002d376 <stream_handler_flush>:
   2d376:	68c3      	ldr	r3, [r0, #12]
   2d378:	b510      	push	{r4, lr}
   2d37a:	4604      	mov	r4, r0
   2d37c:	b923      	cbnz	r3, 2d388 <stream_handler_flush+0x12>
   2d37e:	2016      	movs	r0, #22
   2d380:	e007      	b.n	2d392 <stream_handler_flush+0x1c>
   2d382:	4620      	mov	r0, r4
   2d384:	f7ff ff39 	bl	2d1fa <stream_handler_free_packet>
   2d388:	68e0      	ldr	r0, [r4, #12]
   2d38a:	f000 fa59 	bl	2d840 <linked_list_size_get>
   2d38e:	2800      	cmp	r0, #0
   2d390:	d1f7      	bne.n	2d382 <stream_handler_flush+0xc>
   2d392:	bd10      	pop	{r4, pc}

0002d394 <stream_handler_free>:
   2d394:	68c3      	ldr	r3, [r0, #12]
   2d396:	b510      	push	{r4, lr}
   2d398:	4604      	mov	r4, r0
   2d39a:	b133      	cbz	r3, 2d3aa <stream_handler_free+0x16>
   2d39c:	f7ff ffeb 	bl	2d376 <stream_handler_flush>
   2d3a0:	68e0      	ldr	r0, [r4, #12]
   2d3a2:	f7f1 fba1 	bl	1eae8 <nrf_modem_os_free>
   2d3a6:	2300      	movs	r3, #0
   2d3a8:	60e3      	str	r3, [r4, #12]
   2d3aa:	bd10      	pop	{r4, pc}

0002d3ac <datagram_handler_free_packet>:
   2d3ac:	b530      	push	{r4, r5, lr}
   2d3ae:	4605      	mov	r5, r0
   2d3b0:	b085      	sub	sp, #20
   2d3b2:	68c0      	ldr	r0, [r0, #12]
   2d3b4:	f000 fa35 	bl	2d822 <linked_list_pop>
   2d3b8:	4604      	mov	r4, r0
   2d3ba:	b170      	cbz	r0, 2d3da <datagram_handler_free_packet+0x2e>
   2d3bc:	6843      	ldr	r3, [r0, #4]
   2d3be:	9300      	str	r3, [sp, #0]
   2d3c0:	6883      	ldr	r3, [r0, #8]
   2d3c2:	9301      	str	r3, [sp, #4]
   2d3c4:	6903      	ldr	r3, [r0, #16]
   2d3c6:	9302      	str	r3, [sp, #8]
   2d3c8:	68c3      	ldr	r3, [r0, #12]
   2d3ca:	4668      	mov	r0, sp
   2d3cc:	9303      	str	r3, [sp, #12]
   2d3ce:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2d3d2:	4798      	blx	r3
   2d3d4:	4620      	mov	r0, r4
   2d3d6:	f7f1 fb87 	bl	1eae8 <nrf_modem_os_free>
   2d3da:	b005      	add	sp, #20
   2d3dc:	bd30      	pop	{r4, r5, pc}

0002d3de <datagram_handler_init>:
   2d3de:	b510      	push	{r4, lr}
   2d3e0:	4604      	mov	r4, r0
   2d3e2:	200c      	movs	r0, #12
   2d3e4:	f7f1 fb78 	bl	1ead8 <nrf_modem_os_alloc>
   2d3e8:	60e0      	str	r0, [r4, #12]
   2d3ea:	b118      	cbz	r0, 2d3f4 <datagram_handler_init+0x16>
   2d3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d3f0:	f000 b9fb 	b.w	2d7ea <linked_list_init>
   2d3f4:	200c      	movs	r0, #12
   2d3f6:	bd10      	pop	{r4, pc}

0002d3f8 <datagram_handler_put>:
   2d3f8:	b570      	push	{r4, r5, r6, lr}
   2d3fa:	4606      	mov	r6, r0
   2d3fc:	2014      	movs	r0, #20
   2d3fe:	460d      	mov	r5, r1
   2d400:	f7f1 fb6a 	bl	1ead8 <nrf_modem_os_alloc>
   2d404:	4604      	mov	r4, r0
   2d406:	b178      	cbz	r0, 2d428 <datagram_handler_put+0x30>
   2d408:	682b      	ldr	r3, [r5, #0]
   2d40a:	4601      	mov	r1, r0
   2d40c:	6043      	str	r3, [r0, #4]
   2d40e:	686b      	ldr	r3, [r5, #4]
   2d410:	6083      	str	r3, [r0, #8]
   2d412:	68eb      	ldr	r3, [r5, #12]
   2d414:	60c3      	str	r3, [r0, #12]
   2d416:	68ab      	ldr	r3, [r5, #8]
   2d418:	6103      	str	r3, [r0, #16]
   2d41a:	68f0      	ldr	r0, [r6, #12]
   2d41c:	f000 f9ee 	bl	2d7fc <linked_list_push>
   2d420:	b128      	cbz	r0, 2d42e <datagram_handler_put+0x36>
   2d422:	4620      	mov	r0, r4
   2d424:	f7f1 fb60 	bl	1eae8 <nrf_modem_os_free>
   2d428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d42c:	e000      	b.n	2d430 <datagram_handler_put+0x38>
   2d42e:	6868      	ldr	r0, [r5, #4]
   2d430:	bd70      	pop	{r4, r5, r6, pc}

0002d432 <datagram_handler_get>:
   2d432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d434:	4607      	mov	r7, r0
   2d436:	68c0      	ldr	r0, [r0, #12]
   2d438:	460c      	mov	r4, r1
   2d43a:	4616      	mov	r6, r2
   2d43c:	f000 f9fb 	bl	2d836 <linked_list_peek>
   2d440:	4605      	mov	r5, r0
   2d442:	b328      	cbz	r0, 2d490 <datagram_handler_get+0x5e>
   2d444:	6882      	ldr	r2, [r0, #8]
   2d446:	6863      	ldr	r3, [r4, #4]
   2d448:	6820      	ldr	r0, [r4, #0]
   2d44a:	429a      	cmp	r2, r3
   2d44c:	bf28      	it	cs
   2d44e:	461a      	movcs	r2, r3
   2d450:	6062      	str	r2, [r4, #4]
   2d452:	b110      	cbz	r0, 2d45a <datagram_handler_get+0x28>
   2d454:	6869      	ldr	r1, [r5, #4]
   2d456:	f000 fbb2 	bl	2dbbe <memcpy>
   2d45a:	68a0      	ldr	r0, [r4, #8]
   2d45c:	b1a8      	cbz	r0, 2d48a <datagram_handler_get+0x58>
   2d45e:	6929      	ldr	r1, [r5, #16]
   2d460:	b199      	cbz	r1, 2d48a <datagram_handler_get+0x58>
   2d462:	68ea      	ldr	r2, [r5, #12]
   2d464:	b18a      	cbz	r2, 2d48a <datagram_handler_get+0x58>
   2d466:	68e3      	ldr	r3, [r4, #12]
   2d468:	429a      	cmp	r2, r3
   2d46a:	bf28      	it	cs
   2d46c:	461a      	movcs	r2, r3
   2d46e:	60e2      	str	r2, [r4, #12]
   2d470:	f000 fba5 	bl	2dbbe <memcpy>
   2d474:	0732      	lsls	r2, r6, #28
   2d476:	68ad      	ldr	r5, [r5, #8]
   2d478:	d402      	bmi.n	2d480 <datagram_handler_get+0x4e>
   2d47a:	4638      	mov	r0, r7
   2d47c:	f7ff ff96 	bl	2d3ac <datagram_handler_free_packet>
   2d480:	06b3      	lsls	r3, r6, #26
   2d482:	bf4c      	ite	mi
   2d484:	4628      	movmi	r0, r5
   2d486:	6860      	ldrpl	r0, [r4, #4]
   2d488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d48a:	2300      	movs	r3, #0
   2d48c:	60e3      	str	r3, [r4, #12]
   2d48e:	e7f1      	b.n	2d474 <datagram_handler_get+0x42>
   2d490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d494:	e7f8      	b.n	2d488 <datagram_handler_get+0x56>

0002d496 <datagram_handler_available>:
   2d496:	b508      	push	{r3, lr}
   2d498:	68c0      	ldr	r0, [r0, #12]
   2d49a:	f000 f9cc 	bl	2d836 <linked_list_peek>
   2d49e:	b108      	cbz	r0, 2d4a4 <datagram_handler_available+0xe>
   2d4a0:	6880      	ldr	r0, [r0, #8]
   2d4a2:	bd08      	pop	{r3, pc}
   2d4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d4a8:	e7fb      	b.n	2d4a2 <datagram_handler_available+0xc>

0002d4aa <datagram_handler_flush>:
   2d4aa:	68c3      	ldr	r3, [r0, #12]
   2d4ac:	b510      	push	{r4, lr}
   2d4ae:	4604      	mov	r4, r0
   2d4b0:	b923      	cbnz	r3, 2d4bc <datagram_handler_flush+0x12>
   2d4b2:	2016      	movs	r0, #22
   2d4b4:	e007      	b.n	2d4c6 <datagram_handler_flush+0x1c>
   2d4b6:	4620      	mov	r0, r4
   2d4b8:	f7ff ff78 	bl	2d3ac <datagram_handler_free_packet>
   2d4bc:	68e0      	ldr	r0, [r4, #12]
   2d4be:	f000 f9bf 	bl	2d840 <linked_list_size_get>
   2d4c2:	2800      	cmp	r0, #0
   2d4c4:	d1f7      	bne.n	2d4b6 <datagram_handler_flush+0xc>
   2d4c6:	bd10      	pop	{r4, pc}

0002d4c8 <datagram_handler_free>:
   2d4c8:	68c3      	ldr	r3, [r0, #12]
   2d4ca:	b510      	push	{r4, lr}
   2d4cc:	4604      	mov	r4, r0
   2d4ce:	b133      	cbz	r3, 2d4de <datagram_handler_free+0x16>
   2d4d0:	f7ff ffeb 	bl	2d4aa <datagram_handler_flush>
   2d4d4:	68e0      	ldr	r0, [r4, #12]
   2d4d6:	f7f1 fb07 	bl	1eae8 <nrf_modem_os_free>
   2d4da:	2300      	movs	r3, #0
   2d4dc:	60e3      	str	r3, [r4, #12]
   2d4de:	bd10      	pop	{r4, pc}

0002d4e0 <packet_handler_delete>:
   2d4e0:	b510      	push	{r4, lr}
   2d4e2:	4604      	mov	r4, r0
   2d4e4:	6803      	ldr	r3, [r0, #0]
   2d4e6:	691b      	ldr	r3, [r3, #16]
   2d4e8:	4798      	blx	r3
   2d4ea:	6823      	ldr	r3, [r4, #0]
   2d4ec:	4620      	mov	r0, r4
   2d4ee:	695b      	ldr	r3, [r3, #20]
   2d4f0:	4798      	blx	r3
   2d4f2:	4620      	mov	r0, r4
   2d4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d4f8:	f7f1 baf6 	b.w	1eae8 <nrf_modem_os_free>

0002d4fc <nrf_modem_recoverable_error_handler>:
   2d4fc:	4770      	bx	lr

0002d4fe <nrf_modem_platform_error_handler>:
   2d4fe:	b508      	push	{r3, lr}
   2d500:	f7ff fffc 	bl	2d4fc <nrf_modem_recoverable_error_handler>
   2d504:	bd08      	pop	{r3, pc}

0002d506 <unimplemented_method>:
   2d506:	b40f      	push	{r0, r1, r2, r3}
   2d508:	b508      	push	{r3, lr}
   2d50a:	205f      	movs	r0, #95	; 0x5f
   2d50c:	f7fe fd6f 	bl	2bfee <nrf_modem_os_errno_set>
   2d510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d518:	b004      	add	sp, #16
   2d51a:	4770      	bx	lr

0002d51c <rpc_transport_ipc_fault_handler>:
   2d51c:	f7ff bfef 	b.w	2d4fe <nrf_modem_platform_error_handler>

0002d520 <nrf_modem_platform_init>:
   2d520:	b513      	push	{r0, r1, r4, lr}
   2d522:	4604      	mov	r4, r0
   2d524:	f7f1 faf4 	bl	1eb10 <nrf_modem_os_init>
   2d528:	6a23      	ldr	r3, [r4, #32]
   2d52a:	4668      	mov	r0, sp
   2d52c:	9400      	str	r4, [sp, #0]
   2d52e:	f88d 3004 	strb.w	r3, [sp, #4]
   2d532:	f7f5 ffc3 	bl	234bc <rpc_transport_ipc_init>
   2d536:	4604      	mov	r4, r0
   2d538:	b948      	cbnz	r0, 2d54e <nrf_modem_platform_init+0x2e>
   2d53a:	f7f6 f915 	bl	23768 <interface_init>
   2d53e:	f7f7 ffd3 	bl	254e8 <nrf_modem_at_init>
   2d542:	4604      	mov	r4, r0
   2d544:	b918      	cbnz	r0, 2d54e <nrf_modem_platform_init+0x2e>
   2d546:	f7f6 facf 	bl	23ae8 <ip_interface_init>
   2d54a:	f7f7 fb7b 	bl	24c44 <tls_interface_init>
   2d54e:	4620      	mov	r0, r4
   2d550:	b002      	add	sp, #8
   2d552:	bd10      	pop	{r4, pc}

0002d554 <nrf_modem_platform_fd_method_table_get>:
   2d554:	b510      	push	{r4, lr}
   2d556:	f7f6 f9d9 	bl	2390c <interface_socket_from_handle_get>
   2d55a:	4604      	mov	r4, r0
   2d55c:	b130      	cbz	r0, 2d56c <nrf_modem_platform_fd_method_table_get+0x18>
   2d55e:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   2d562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d566:	68c0      	ldr	r0, [r0, #12]
   2d568:	f7f8 bae0 	b.w	25b2c <nrf_modem_platform_af_method_table_get>
   2d56c:	2009      	movs	r0, #9
   2d56e:	f7fe fd3e 	bl	2bfee <nrf_modem_os_errno_set>
   2d572:	4620      	mov	r0, r4
   2d574:	bd10      	pop	{r4, pc}

0002d576 <internal_poll>:
   2d576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d57a:	2600      	movs	r6, #0
   2d57c:	4688      	mov	r8, r1
   2d57e:	4604      	mov	r4, r0
   2d580:	4637      	mov	r7, r6
   2d582:	4546      	cmp	r6, r8
   2d584:	d103      	bne.n	2d58e <internal_poll+0x18>
   2d586:	4638      	mov	r0, r7
   2d588:	b002      	add	sp, #8
   2d58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d58e:	88a5      	ldrh	r5, [r4, #4]
   2d590:	6820      	ldr	r0, [r4, #0]
   2d592:	a901      	add	r1, sp, #4
   2d594:	f7ff fad4 	bl	2cb40 <interface_socket_event_get>
   2d598:	f005 0503 	and.w	r5, r5, #3
   2d59c:	9b01      	ldr	r3, [sp, #4]
   2d59e:	f045 051c 	orr.w	r5, r5, #28
   2d5a2:	401d      	ands	r5, r3
   2d5a4:	6820      	ldr	r0, [r4, #0]
   2d5a6:	80e5      	strh	r5, [r4, #6]
   2d5a8:	f7f6 f9b0 	bl	2390c <interface_socket_from_handle_get>
   2d5ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   2d5b0:	b168      	cbz	r0, 2d5ce <internal_poll+0x58>
   2d5b2:	071a      	lsls	r2, r3, #28
   2d5b4:	d50b      	bpl.n	2d5ce <internal_poll+0x58>
   2d5b6:	6942      	ldr	r2, [r0, #20]
   2d5b8:	2a01      	cmp	r2, #1
   2d5ba:	d003      	beq.n	2d5c4 <internal_poll+0x4e>
   2d5bc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   2d5c0:	2a01      	cmp	r2, #1
   2d5c2:	d802      	bhi.n	2d5ca <internal_poll+0x54>
   2d5c4:	f043 0301 	orr.w	r3, r3, #1
   2d5c8:	80e3      	strh	r3, [r4, #6]
   2d5ca:	3701      	adds	r7, #1
   2d5cc:	e001      	b.n	2d5d2 <internal_poll+0x5c>
   2d5ce:	2b00      	cmp	r3, #0
   2d5d0:	d1fb      	bne.n	2d5ca <internal_poll+0x54>
   2d5d2:	3601      	adds	r6, #1
   2d5d4:	3408      	adds	r4, #8
   2d5d6:	e7d4      	b.n	2d582 <internal_poll+0xc>

0002d5d8 <nrf_modem_platform_getaddrinfo>:
   2d5d8:	f7f6 bf32 	b.w	24440 <ip_interface_getaddrinfo>

0002d5dc <nrf_modem_platform_freeaddrinfo>:
   2d5dc:	f7f7 b82e 	b.w	2463c <ip_interface_freeaddrinfo>

0002d5e0 <nrf_modem_platform_poll>:
   2d5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d5e2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   2d5e6:	2908      	cmp	r1, #8
   2d5e8:	4605      	mov	r5, r0
   2d5ea:	460e      	mov	r6, r1
   2d5ec:	9201      	str	r2, [sp, #4]
   2d5ee:	d906      	bls.n	2d5fe <nrf_modem_platform_poll+0x1e>
   2d5f0:	2016      	movs	r0, #22
   2d5f2:	f7fe fcfc 	bl	2bfee <nrf_modem_os_errno_set>
   2d5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d5fa:	b002      	add	sp, #8
   2d5fc:	bd70      	pop	{r4, r5, r6, pc}
   2d5fe:	b910      	cbnz	r0, 2d606 <nrf_modem_platform_poll+0x26>
   2d600:	b109      	cbz	r1, 2d606 <nrf_modem_platform_poll+0x26>
   2d602:	200e      	movs	r0, #14
   2d604:	e7f5      	b.n	2d5f2 <nrf_modem_platform_poll+0x12>
   2d606:	4631      	mov	r1, r6
   2d608:	4628      	mov	r0, r5
   2d60a:	f7ff ffb4 	bl	2d576 <internal_poll>
   2d60e:	2400      	movs	r4, #0
   2d610:	2800      	cmp	r0, #0
   2d612:	d1f2      	bne.n	2d5fa <nrf_modem_platform_poll+0x1a>
   2d614:	2c00      	cmp	r4, #0
   2d616:	d1f0      	bne.n	2d5fa <nrf_modem_platform_poll+0x1a>
   2d618:	4628      	mov	r0, r5
   2d61a:	a901      	add	r1, sp, #4
   2d61c:	f7f1 f8fa 	bl	1e814 <nrf_modem_os_timedwait>
   2d620:	4604      	mov	r4, r0
   2d622:	b118      	cbz	r0, 2d62c <nrf_modem_platform_poll+0x4c>
   2d624:	2874      	cmp	r0, #116	; 0x74
   2d626:	d001      	beq.n	2d62c <nrf_modem_platform_poll+0x4c>
   2d628:	200b      	movs	r0, #11
   2d62a:	e7e2      	b.n	2d5f2 <nrf_modem_platform_poll+0x12>
   2d62c:	4631      	mov	r1, r6
   2d62e:	4628      	mov	r0, r5
   2d630:	f7ff ffa1 	bl	2d576 <internal_poll>
   2d634:	e7ec      	b.n	2d610 <nrf_modem_platform_poll+0x30>

0002d636 <nrf_modem_platform_fcntl>:
   2d636:	f7f6 b9fb 	b.w	23a30 <interface_socket_fcntl>

0002d63a <nrf_socket>:
   2d63a:	b570      	push	{r4, r5, r6, lr}
   2d63c:	4604      	mov	r4, r0
   2d63e:	460d      	mov	r5, r1
   2d640:	4616      	mov	r6, r2
   2d642:	f7f8 fa73 	bl	25b2c <nrf_modem_platform_af_method_table_get>
   2d646:	b130      	cbz	r0, 2d656 <nrf_socket+0x1c>
   2d648:	4632      	mov	r2, r6
   2d64a:	4629      	mov	r1, r5
   2d64c:	6803      	ldr	r3, [r0, #0]
   2d64e:	4620      	mov	r0, r4
   2d650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d654:	4718      	bx	r3
   2d656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d65a:	bd70      	pop	{r4, r5, r6, pc}

0002d65c <nrf_close>:
   2d65c:	b510      	push	{r4, lr}
   2d65e:	4604      	mov	r4, r0
   2d660:	f7ff ff78 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d664:	b120      	cbz	r0, 2d670 <nrf_close+0x14>
   2d666:	6843      	ldr	r3, [r0, #4]
   2d668:	4620      	mov	r0, r4
   2d66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d66e:	4718      	bx	r3
   2d670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d674:	bd10      	pop	{r4, pc}

0002d676 <nrf_sendto>:
   2d676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d67a:	4604      	mov	r4, r0
   2d67c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2d680:	460d      	mov	r5, r1
   2d682:	4616      	mov	r6, r2
   2d684:	461f      	mov	r7, r3
   2d686:	f7ff ff65 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d68a:	b158      	cbz	r0, 2d6a4 <nrf_sendto+0x2e>
   2d68c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2d690:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2d694:	463b      	mov	r3, r7
   2d696:	4632      	mov	r2, r6
   2d698:	4629      	mov	r1, r5
   2d69a:	4620      	mov	r0, r4
   2d69c:	46f4      	mov	ip, lr
   2d69e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6a2:	4760      	bx	ip
   2d6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d6ac <nrf_recvfrom>:
   2d6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6b0:	4604      	mov	r4, r0
   2d6b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2d6b6:	460d      	mov	r5, r1
   2d6b8:	4616      	mov	r6, r2
   2d6ba:	461f      	mov	r7, r3
   2d6bc:	f7ff ff4a 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d6c0:	b158      	cbz	r0, 2d6da <nrf_recvfrom+0x2e>
   2d6c2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2d6c6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2d6ca:	463b      	mov	r3, r7
   2d6cc:	4632      	mov	r2, r6
   2d6ce:	4629      	mov	r1, r5
   2d6d0:	4620      	mov	r0, r4
   2d6d2:	46f4      	mov	ip, lr
   2d6d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6d8:	4760      	bx	ip
   2d6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d6e2 <nrf_connect>:
   2d6e2:	b570      	push	{r4, r5, r6, lr}
   2d6e4:	4604      	mov	r4, r0
   2d6e6:	460d      	mov	r5, r1
   2d6e8:	4616      	mov	r6, r2
   2d6ea:	f7ff ff33 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d6ee:	b130      	cbz	r0, 2d6fe <nrf_connect+0x1c>
   2d6f0:	4632      	mov	r2, r6
   2d6f2:	4629      	mov	r1, r5
   2d6f4:	6943      	ldr	r3, [r0, #20]
   2d6f6:	4620      	mov	r0, r4
   2d6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d6fc:	4718      	bx	r3
   2d6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d702:	bd70      	pop	{r4, r5, r6, pc}

0002d704 <nrf_listen>:
   2d704:	b570      	push	{r4, r5, r6, lr}
   2d706:	4604      	mov	r4, r0
   2d708:	460d      	mov	r5, r1
   2d70a:	f7ff ff23 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d70e:	b128      	cbz	r0, 2d71c <nrf_listen+0x18>
   2d710:	4629      	mov	r1, r5
   2d712:	6983      	ldr	r3, [r0, #24]
   2d714:	4620      	mov	r0, r4
   2d716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d71a:	4718      	bx	r3
   2d71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d720:	bd70      	pop	{r4, r5, r6, pc}

0002d722 <nrf_accept>:
   2d722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d726:	4604      	mov	r4, r0
   2d728:	460d      	mov	r5, r1
   2d72a:	4616      	mov	r6, r2
   2d72c:	f7ff ff12 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d730:	b140      	cbz	r0, 2d744 <nrf_accept+0x22>
   2d732:	69c7      	ldr	r7, [r0, #28]
   2d734:	4632      	mov	r2, r6
   2d736:	4629      	mov	r1, r5
   2d738:	4620      	mov	r0, r4
   2d73a:	46bc      	mov	ip, r7
   2d73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d740:	2300      	movs	r3, #0
   2d742:	4760      	bx	ip
   2d744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d74c <nrf_bind>:
   2d74c:	b570      	push	{r4, r5, r6, lr}
   2d74e:	4604      	mov	r4, r0
   2d750:	460d      	mov	r5, r1
   2d752:	4616      	mov	r6, r2
   2d754:	f7ff fefe 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d758:	b130      	cbz	r0, 2d768 <nrf_bind+0x1c>
   2d75a:	4632      	mov	r2, r6
   2d75c:	4629      	mov	r1, r5
   2d75e:	6903      	ldr	r3, [r0, #16]
   2d760:	4620      	mov	r0, r4
   2d762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d766:	4718      	bx	r3
   2d768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d76c:	bd70      	pop	{r4, r5, r6, pc}

0002d76e <nrf_setsockopt>:
   2d76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d772:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2d776:	4604      	mov	r4, r0
   2d778:	460d      	mov	r5, r1
   2d77a:	4616      	mov	r6, r2
   2d77c:	461f      	mov	r7, r3
   2d77e:	f7ff fee9 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d782:	b158      	cbz	r0, 2d79c <nrf_setsockopt+0x2e>
   2d784:	f8cd 8018 	str.w	r8, [sp, #24]
   2d788:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2d78c:	463b      	mov	r3, r7
   2d78e:	4632      	mov	r2, r6
   2d790:	4629      	mov	r1, r5
   2d792:	4620      	mov	r0, r4
   2d794:	46f4      	mov	ip, lr
   2d796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d79a:	4760      	bx	ip
   2d79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d7a4 <nrf_getsockopt>:
   2d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d7a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2d7ac:	4604      	mov	r4, r0
   2d7ae:	460d      	mov	r5, r1
   2d7b0:	4616      	mov	r6, r2
   2d7b2:	461f      	mov	r7, r3
   2d7b4:	f7ff fece 	bl	2d554 <nrf_modem_platform_fd_method_table_get>
   2d7b8:	b158      	cbz	r0, 2d7d2 <nrf_getsockopt+0x2e>
   2d7ba:	f8cd 8018 	str.w	r8, [sp, #24]
   2d7be:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2d7c2:	463b      	mov	r3, r7
   2d7c4:	4632      	mov	r2, r6
   2d7c6:	4629      	mov	r1, r5
   2d7c8:	4620      	mov	r0, r4
   2d7ca:	46f4      	mov	ip, lr
   2d7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d7d0:	4760      	bx	ip
   2d7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d7da <nrf_getaddrinfo>:
   2d7da:	f7ff befd 	b.w	2d5d8 <nrf_modem_platform_getaddrinfo>

0002d7de <nrf_freeaddrinfo>:
   2d7de:	f7ff befd 	b.w	2d5dc <nrf_modem_platform_freeaddrinfo>

0002d7e2 <nrf_poll>:
   2d7e2:	f7ff befd 	b.w	2d5e0 <nrf_modem_platform_poll>

0002d7e6 <nrf_fcntl>:
   2d7e6:	f7ff bf26 	b.w	2d636 <nrf_modem_platform_fcntl>

0002d7ea <linked_list_init>:
   2d7ea:	4603      	mov	r3, r0
   2d7ec:	b120      	cbz	r0, 2d7f8 <linked_list_init+0xe>
   2d7ee:	2000      	movs	r0, #0
   2d7f0:	e9c3 0001 	strd	r0, r0, [r3, #4]
   2d7f4:	6018      	str	r0, [r3, #0]
   2d7f6:	4770      	bx	lr
   2d7f8:	2016      	movs	r0, #22
   2d7fa:	4770      	bx	lr

0002d7fc <linked_list_push>:
   2d7fc:	6803      	ldr	r3, [r0, #0]
   2d7fe:	3301      	adds	r3, #1
   2d800:	d00d      	beq.n	2d81e <linked_list_push+0x22>
   2d802:	2300      	movs	r3, #0
   2d804:	600b      	str	r3, [r1, #0]
   2d806:	6803      	ldr	r3, [r0, #0]
   2d808:	b933      	cbnz	r3, 2d818 <linked_list_push+0x1c>
   2d80a:	6041      	str	r1, [r0, #4]
   2d80c:	6803      	ldr	r3, [r0, #0]
   2d80e:	6081      	str	r1, [r0, #8]
   2d810:	3301      	adds	r3, #1
   2d812:	6003      	str	r3, [r0, #0]
   2d814:	2000      	movs	r0, #0
   2d816:	4770      	bx	lr
   2d818:	6883      	ldr	r3, [r0, #8]
   2d81a:	6019      	str	r1, [r3, #0]
   2d81c:	e7f6      	b.n	2d80c <linked_list_push+0x10>
   2d81e:	200c      	movs	r0, #12
   2d820:	4770      	bx	lr

0002d822 <linked_list_pop>:
   2d822:	4603      	mov	r3, r0
   2d824:	6800      	ldr	r0, [r0, #0]
   2d826:	b128      	cbz	r0, 2d834 <linked_list_pop+0x12>
   2d828:	6858      	ldr	r0, [r3, #4]
   2d82a:	6802      	ldr	r2, [r0, #0]
   2d82c:	605a      	str	r2, [r3, #4]
   2d82e:	681a      	ldr	r2, [r3, #0]
   2d830:	3a01      	subs	r2, #1
   2d832:	601a      	str	r2, [r3, #0]
   2d834:	4770      	bx	lr

0002d836 <linked_list_peek>:
   2d836:	4603      	mov	r3, r0
   2d838:	6800      	ldr	r0, [r0, #0]
   2d83a:	b100      	cbz	r0, 2d83e <linked_list_peek+0x8>
   2d83c:	6858      	ldr	r0, [r3, #4]
   2d83e:	4770      	bx	lr

0002d840 <linked_list_size_get>:
   2d840:	6800      	ldr	r0, [r0, #0]
   2d842:	4770      	bx	lr

0002d844 <linked_list_get_next>:
   2d844:	6800      	ldr	r0, [r0, #0]
   2d846:	4770      	bx	lr

0002d848 <z_device_state_init>:
}
   2d848:	4770      	bx	lr

0002d84a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2d84a:	b138      	cbz	r0, 2d85c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2d84c:	68c3      	ldr	r3, [r0, #12]
   2d84e:	8818      	ldrh	r0, [r3, #0]
   2d850:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2d854:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2d858:	4258      	negs	r0, r3
   2d85a:	4158      	adcs	r0, r3
}
   2d85c:	4770      	bx	lr

0002d85e <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   2d85e:	f000 b9bb 	b.w	2dbd8 <memset>

0002d862 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d862:	f000 b9ac 	b.w	2dbbe <memcpy>

0002d866 <k_heap_init>:
{
   2d866:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2d868:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2d86c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d870:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d872:	f7ed bbc5 	b.w	1b000 <sys_heap_init>

0002d876 <k_heap_alloc>:
{
   2d876:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   2d878:	e9cd 2300 	strd	r2, r3, [sp]
   2d87c:	460a      	mov	r2, r1
   2d87e:	2104      	movs	r1, #4
   2d880:	f7f8 fae8 	bl	25e54 <k_heap_aligned_alloc>
}
   2d884:	b003      	add	sp, #12
   2d886:	f85d fb04 	ldr.w	pc, [sp], #4

0002d88a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d88a:	f3ef 8005 	mrs	r0, IPSR
}
   2d88e:	3800      	subs	r0, #0
   2d890:	bf18      	it	ne
   2d892:	2001      	movne	r0, #1
   2d894:	4770      	bx	lr

0002d896 <z_impl_k_thread_name_set>:
}
   2d896:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2d89a:	4770      	bx	lr

0002d89c <k_thread_name_get>:
}
   2d89c:	2000      	movs	r0, #0
   2d89e:	4770      	bx	lr

0002d8a0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2d8a0:	f7f9 be24 	b.w	274ec <z_sched_start>

0002d8a4 <z_pm_save_idle_exit>:
{
   2d8a4:	b508      	push	{r3, lr}
	pm_system_resume();
   2d8a6:	f7ee fb11 	bl	1becc <pm_system_resume>
}
   2d8aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2d8ae:	f7fe bb9b 	b.w	2bfe8 <sys_clock_idle_exit>

0002d8b2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2d8b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2d8b6:	428b      	cmp	r3, r1
   2d8b8:	d001      	beq.n	2d8be <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2d8ba:	f7f9 bf6b 	b.w	27794 <z_set_prio>
}
   2d8be:	2000      	movs	r0, #0
   2d8c0:	4770      	bx	lr

0002d8c2 <z_impl_k_mutex_init>:
{
   2d8c2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d8c4:	2000      	movs	r0, #0
   2d8c6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2d8ca:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2d8ce:	4770      	bx	lr

0002d8d0 <z_queue_node_peek>:
{
   2d8d0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d8d2:	4604      	mov	r4, r0
   2d8d4:	b130      	cbz	r0, 2d8e4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d8d6:	6802      	ldr	r2, [r0, #0]
   2d8d8:	0793      	lsls	r3, r2, #30
   2d8da:	d003      	beq.n	2d8e4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2d8dc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d8de:	b109      	cbz	r1, 2d8e4 <z_queue_node_peek+0x14>
			k_free(anode);
   2d8e0:	f000 f932 	bl	2db48 <k_free>
}
   2d8e4:	4620      	mov	r0, r4
   2d8e6:	bd10      	pop	{r4, pc}

0002d8e8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2d8e8:	2301      	movs	r3, #1
{
   2d8ea:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d8ec:	9300      	str	r3, [sp, #0]
   2d8ee:	2300      	movs	r3, #0
{
   2d8f0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d8f2:	4619      	mov	r1, r3
   2d8f4:	f7f8 fe7e 	bl	265f4 <queue_insert>
}
   2d8f8:	b003      	add	sp, #12
   2d8fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002d8fe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2d8fe:	b15a      	cbz	r2, 2d918 <z_impl_k_sem_init+0x1a>
   2d900:	428a      	cmp	r2, r1
   2d902:	d309      	bcc.n	2d918 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d904:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d908:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2d90c:	e9c0 0000 	strd	r0, r0, [r0]
   2d910:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d914:	2000      	movs	r0, #0
   2d916:	4770      	bx	lr
		return -EINVAL;
   2d918:	f06f 0015 	mvn.w	r0, #21
}
   2d91c:	4770      	bx	lr

0002d91e <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   2d91e:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   2d920:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2d922:	408b      	lsls	r3, r1
   2d924:	ea22 0303 	bic.w	r3, r2, r3
   2d928:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2d92a:	fa22 f001 	lsr.w	r0, r2, r1
}
   2d92e:	f000 0001 	and.w	r0, r0, #1
   2d932:	4770      	bx	lr

0002d934 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2d934:	b120      	cbz	r0, 2d940 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2d936:	2200      	movs	r2, #0
   2d938:	3088      	adds	r0, #136	; 0x88
   2d93a:	4611      	mov	r1, r2
   2d93c:	f7fa ba92 	b.w	27e64 <z_sched_wake>
}
   2d940:	4770      	bx	lr

0002d942 <k_work_delayable_busy_get>:
   2d942:	f7f9 b9a5 	b.w	26c90 <k_work_busy_get>

0002d946 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2d946:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2d94a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2d94e:	4283      	cmp	r3, r0
		return b2 - b1;
   2d950:	bf14      	ite	ne
   2d952:	1ac0      	subne	r0, r0, r3
	return 0;
   2d954:	2000      	moveq	r0, #0
}
   2d956:	4770      	bx	lr

0002d958 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d958:	4603      	mov	r3, r0
   2d95a:	b920      	cbnz	r0, 2d966 <z_reschedule_irqlock+0xe>
   2d95c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2d960:	b90a      	cbnz	r2, 2d966 <z_reschedule_irqlock+0xe>
   2d962:	f7ee bcad 	b.w	1c2c0 <arch_swap>
   2d966:	f383 8811 	msr	BASEPRI, r3
   2d96a:	f3bf 8f6f 	isb	sy
}
   2d96e:	4770      	bx	lr

0002d970 <z_reschedule_unlocked>:
	__asm__ volatile(
   2d970:	f04f 0320 	mov.w	r3, #32
   2d974:	f3ef 8011 	mrs	r0, BASEPRI
   2d978:	f383 8812 	msr	BASEPRI_MAX, r3
   2d97c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d980:	f7ff bfea 	b.w	2d958 <z_reschedule_irqlock>

0002d984 <z_priq_dumb_best>:
{
   2d984:	4603      	mov	r3, r0
	return list->head == list;
   2d986:	6800      	ldr	r0, [r0, #0]
}
   2d988:	4283      	cmp	r3, r0
   2d98a:	bf08      	it	eq
   2d98c:	2000      	moveq	r0, #0
   2d98e:	4770      	bx	lr

0002d990 <z_unpend_all>:
{
   2d990:	b538      	push	{r3, r4, r5, lr}
   2d992:	4605      	mov	r5, r0
	int need_sched = 0;
   2d994:	2000      	movs	r0, #0
   2d996:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d998:	42a5      	cmp	r5, r4
   2d99a:	d000      	beq.n	2d99e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d99c:	b904      	cbnz	r4, 2d9a0 <z_unpend_all+0x10>
}
   2d99e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2d9a0:	4620      	mov	r0, r4
   2d9a2:	f7f9 fc05 	bl	271b0 <z_unpend_thread>
		z_ready_thread(thread);
   2d9a6:	4620      	mov	r0, r4
   2d9a8:	f7f9 fd6a 	bl	27480 <z_ready_thread>
		need_sched = 1;
   2d9ac:	2001      	movs	r0, #1
   2d9ae:	e7f2      	b.n	2d996 <z_unpend_all+0x6>

0002d9b0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2d9b0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2d9b2:	f7fa fd0f 	bl	283d4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2d9b6:	bd08      	pop	{r3, pc}

0002d9b8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2d9b8:	f7fa bd0c 	b.w	283d4 <sys_clock_tick_get>

0002d9bc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2d9bc:	b108      	cbz	r0, 2d9c2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2d9be:	f7ed bfa7 	b.w	1b910 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2d9c2:	4770      	bx	lr

0002d9c4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d9c4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2d9c8:	bf08      	it	eq
   2d9ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2d9ce:	b538      	push	{r3, r4, r5, lr}
   2d9d0:	4605      	mov	r5, r0
   2d9d2:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d9d4:	d01d      	beq.n	2da12 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d9d6:	ea51 0300 	orrs.w	r3, r1, r0
   2d9da:	d103      	bne.n	2d9e4 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2d9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2d9e0:	f7fa bcf8 	b.w	283d4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2d9e4:	f06f 0301 	mvn.w	r3, #1
   2d9e8:	1a18      	subs	r0, r3, r0
   2d9ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d9ee:	eb63 0101 	sbc.w	r1, r3, r1
   2d9f2:	2900      	cmp	r1, #0
   2d9f4:	da0c      	bge.n	2da10 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2d9f6:	f7fa fced 	bl	283d4 <sys_clock_tick_get>
   2d9fa:	2d01      	cmp	r5, #1
   2d9fc:	4622      	mov	r2, r4
   2d9fe:	f174 0400 	sbcs.w	r4, r4, #0
   2da02:	462b      	mov	r3, r5
   2da04:	bfbc      	itt	lt
   2da06:	2301      	movlt	r3, #1
   2da08:	2200      	movlt	r2, #0
   2da0a:	1818      	adds	r0, r3, r0
   2da0c:	eb41 0102 	adc.w	r1, r1, r2
}
   2da10:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2da12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da16:	4601      	mov	r1, r0
   2da18:	e7fa      	b.n	2da10 <sys_clock_timeout_end_calc+0x4c>

0002da1a <add_event>:
{
   2da1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da1c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2da1e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2da22:	4288      	cmp	r0, r1
   2da24:	4604      	mov	r4, r0
   2da26:	d00d      	beq.n	2da44 <add_event+0x2a>
	if ((pending == NULL) ||
   2da28:	b163      	cbz	r3, 2da44 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2da2a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2da2c:	b100      	cbz	r0, 2da30 <add_event+0x16>
   2da2e:	3860      	subs	r0, #96	; 0x60
   2da30:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2da34:	4639      	mov	r1, r7
   2da36:	f7ff ff86 	bl	2d946 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2da3a:	2800      	cmp	r0, #0
   2da3c:	dc02      	bgt.n	2da44 <add_event+0x2a>
	return list->head == list;
   2da3e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2da40:	42b4      	cmp	r4, r6
   2da42:	d109      	bne.n	2da58 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2da44:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2da46:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2da4a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2da4c:	6065      	str	r5, [r4, #4]
}
   2da4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2da50:	6863      	ldr	r3, [r4, #4]
   2da52:	42b3      	cmp	r3, r6
   2da54:	d0f6      	beq.n	2da44 <add_event+0x2a>
   2da56:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2da58:	2e00      	cmp	r6, #0
   2da5a:	d0f3      	beq.n	2da44 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2da5c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2da5e:	b101      	cbz	r1, 2da62 <add_event+0x48>
   2da60:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2da62:	4638      	mov	r0, r7
   2da64:	f7ff ff6f 	bl	2d946 <z_sched_prio_cmp>
   2da68:	2800      	cmp	r0, #0
   2da6a:	ddf1      	ble.n	2da50 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2da6c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2da6e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2da72:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2da74:	6075      	str	r5, [r6, #4]
			return;
   2da76:	e7ea      	b.n	2da4e <add_event+0x34>

0002da78 <signal_poll_event>:
{
   2da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2da7c:	6884      	ldr	r4, [r0, #8]
{
   2da7e:	4605      	mov	r5, r0
   2da80:	460e      	mov	r6, r1
	if (poller != NULL) {
   2da82:	b144      	cbz	r4, 2da96 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2da84:	7863      	ldrb	r3, [r4, #1]
   2da86:	2b01      	cmp	r3, #1
   2da88:	d136      	bne.n	2daf8 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2da8a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2da8e:	f013 0302 	ands.w	r3, r3, #2
   2da92:	d10a      	bne.n	2daaa <signal_poll_event+0x32>
		poller->is_polling = false;
   2da94:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2da96:	2000      	movs	r0, #0
	event->state |= state;
   2da98:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   2da9a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2da9c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2daa0:	430e      	orrs	r6, r1
   2daa2:	f366 3352 	bfi	r3, r6, #13, #6
   2daa6:	60eb      	str	r3, [r5, #12]
	return retcode;
   2daa8:	e00b      	b.n	2dac2 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2daaa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2daae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2dab2:	bf08      	it	eq
   2dab4:	f112 0f02 	cmneq.w	r2, #2
   2dab8:	d105      	bne.n	2dac6 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2daba:	2300      	movs	r3, #0
		return -EAGAIN;
   2dabc:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   2dac0:	7023      	strb	r3, [r4, #0]
}
   2dac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2dac6:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2daca:	4640      	mov	r0, r8
   2dacc:	f7f9 fb70 	bl	271b0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2dad0:	2e08      	cmp	r6, #8
   2dad2:	bf0c      	ite	eq
   2dad4:	f06f 0303 	mvneq.w	r3, #3
   2dad8:	2300      	movne	r3, #0
   2dada:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2dadc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2dae0:	06db      	lsls	r3, r3, #27
   2dae2:	d102      	bne.n	2daea <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2dae4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2dae8:	b10f      	cbz	r7, 2daee <signal_poll_event+0x76>
		poller->is_polling = false;
   2daea:	2300      	movs	r3, #0
   2daec:	e7d2      	b.n	2da94 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2daee:	4640      	mov	r0, r8
   2daf0:	f7f9 fcc6 	bl	27480 <z_ready_thread>
		poller->is_polling = false;
   2daf4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2daf6:	e7ce      	b.n	2da96 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2daf8:	2b02      	cmp	r3, #2
   2dafa:	d1f6      	bne.n	2daea <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2dafc:	7823      	ldrb	r3, [r4, #0]
   2dafe:	2b00      	cmp	r3, #0
   2db00:	d0c9      	beq.n	2da96 <signal_poll_event+0x1e>
   2db02:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2db06:	2f00      	cmp	r7, #0
   2db08:	d0f4      	beq.n	2daf4 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2db0a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2db0e:	f1a4 0914 	sub.w	r9, r4, #20
   2db12:	f104 0014 	add.w	r0, r4, #20
   2db16:	f7fa fb0f 	bl	28138 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2db1a:	4649      	mov	r1, r9
   2db1c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2db1e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2db22:	f7f9 f8eb 	bl	26cfc <k_work_submit_to_queue>
		poller->is_polling = false;
   2db26:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2db2a:	e7b4      	b.n	2da96 <signal_poll_event+0x1e>

0002db2c <z_handle_obj_poll_events>:
{
   2db2c:	4603      	mov	r3, r0
	return list->head == list;
   2db2e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2db30:	4283      	cmp	r3, r0
   2db32:	d008      	beq.n	2db46 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2db34:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2db38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2db3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2db3c:	2300      	movs	r3, #0
	node->prev = NULL;
   2db3e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2db42:	f7ff bf99 	b.w	2da78 <signal_poll_event>
}
   2db46:	4770      	bx	lr

0002db48 <k_free>:
	if (ptr != NULL) {
   2db48:	b120      	cbz	r0, 2db54 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2db4a:	1f01      	subs	r1, r0, #4
   2db4c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2db50:	f7f8 ba08 	b.w	25f64 <k_heap_free>
}
   2db54:	4770      	bx	lr

0002db56 <k_malloc>:
{
   2db56:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2db58:	2004      	movs	r0, #4
   2db5a:	f7fa bf4b 	b.w	289f4 <k_aligned_alloc>

0002db5e <k_calloc>:
{
   2db5e:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2db60:	fba0 5401 	umull	r5, r4, r0, r1
   2db64:	b934      	cbnz	r4, 2db74 <k_calloc+0x16>
	ret = k_malloc(bounds);
   2db66:	4628      	mov	r0, r5
   2db68:	f7ff fff5 	bl	2db56 <k_malloc>
	if (ret != NULL) {
   2db6c:	4606      	mov	r6, r0
   2db6e:	b918      	cbnz	r0, 2db78 <k_calloc+0x1a>
}
   2db70:	4630      	mov	r0, r6
   2db72:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2db74:	2600      	movs	r6, #0
   2db76:	e7fb      	b.n	2db70 <k_calloc+0x12>
__ssp_bos_icheck3(memset, void *, int)
   2db78:	462a      	mov	r2, r5
   2db7a:	4621      	mov	r1, r4
   2db7c:	f000 f82c 	bl	2dbd8 <memset>
   2db80:	e7f6      	b.n	2db70 <k_calloc+0x12>

0002db82 <memchr>:
   2db82:	b2c9      	uxtb	r1, r1
   2db84:	4603      	mov	r3, r0
   2db86:	4402      	add	r2, r0
   2db88:	b510      	push	{r4, lr}
   2db8a:	4293      	cmp	r3, r2
   2db8c:	4618      	mov	r0, r3
   2db8e:	d101      	bne.n	2db94 <memchr+0x12>
   2db90:	2000      	movs	r0, #0
   2db92:	e003      	b.n	2db9c <memchr+0x1a>
   2db94:	7804      	ldrb	r4, [r0, #0]
   2db96:	3301      	adds	r3, #1
   2db98:	428c      	cmp	r4, r1
   2db9a:	d1f6      	bne.n	2db8a <memchr+0x8>
   2db9c:	bd10      	pop	{r4, pc}

0002db9e <memcmp>:
   2db9e:	3901      	subs	r1, #1
   2dba0:	4402      	add	r2, r0
   2dba2:	b510      	push	{r4, lr}
   2dba4:	4290      	cmp	r0, r2
   2dba6:	d101      	bne.n	2dbac <memcmp+0xe>
   2dba8:	2000      	movs	r0, #0
   2dbaa:	e005      	b.n	2dbb8 <memcmp+0x1a>
   2dbac:	7803      	ldrb	r3, [r0, #0]
   2dbae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2dbb2:	42a3      	cmp	r3, r4
   2dbb4:	d001      	beq.n	2dbba <memcmp+0x1c>
   2dbb6:	1b18      	subs	r0, r3, r4
   2dbb8:	bd10      	pop	{r4, pc}
   2dbba:	3001      	adds	r0, #1
   2dbbc:	e7f2      	b.n	2dba4 <memcmp+0x6>

0002dbbe <memcpy>:
   2dbbe:	440a      	add	r2, r1
   2dbc0:	1e43      	subs	r3, r0, #1
   2dbc2:	4291      	cmp	r1, r2
   2dbc4:	d100      	bne.n	2dbc8 <memcpy+0xa>
   2dbc6:	4770      	bx	lr
   2dbc8:	b510      	push	{r4, lr}
   2dbca:	f811 4b01 	ldrb.w	r4, [r1], #1
   2dbce:	4291      	cmp	r1, r2
   2dbd0:	f803 4f01 	strb.w	r4, [r3, #1]!
   2dbd4:	d1f9      	bne.n	2dbca <memcpy+0xc>
   2dbd6:	bd10      	pop	{r4, pc}

0002dbd8 <memset>:
   2dbd8:	4402      	add	r2, r0
   2dbda:	4603      	mov	r3, r0
   2dbdc:	4293      	cmp	r3, r2
   2dbde:	d100      	bne.n	2dbe2 <memset+0xa>
   2dbe0:	4770      	bx	lr
   2dbe2:	f803 1b01 	strb.w	r1, [r3], #1
   2dbe6:	e7f9      	b.n	2dbdc <memset+0x4>

0002dbe8 <__cvt>:
   2dbe8:	2b00      	cmp	r3, #0
   2dbea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dbee:	461f      	mov	r7, r3
   2dbf0:	b088      	sub	sp, #32
   2dbf2:	bfb4      	ite	lt
   2dbf4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2dbf8:	2300      	movge	r3, #0
   2dbfa:	4614      	mov	r4, r2
   2dbfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2dbfe:	bfbc      	itt	lt
   2dc00:	461f      	movlt	r7, r3
   2dc02:	232d      	movlt	r3, #45	; 0x2d
   2dc04:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2dc06:	7013      	strb	r3, [r2, #0]
   2dc08:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2dc0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2dc0e:	f023 0820 	bic.w	r8, r3, #32
   2dc12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2dc16:	d005      	beq.n	2dc24 <__cvt+0x3c>
   2dc18:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   2dc1c:	d100      	bne.n	2dc20 <__cvt+0x38>
   2dc1e:	3501      	adds	r5, #1
   2dc20:	2302      	movs	r3, #2
   2dc22:	e000      	b.n	2dc26 <__cvt+0x3e>
   2dc24:	2303      	movs	r3, #3
   2dc26:	aa07      	add	r2, sp, #28
   2dc28:	9204      	str	r2, [sp, #16]
   2dc2a:	aa06      	add	r2, sp, #24
   2dc2c:	e9cd 3500 	strd	r3, r5, [sp]
   2dc30:	e9cd a202 	strd	sl, r2, [sp, #8]
   2dc34:	463b      	mov	r3, r7
   2dc36:	4622      	mov	r2, r4
   2dc38:	f7eb fe76 	bl	19928 <_dtoa_r>
   2dc3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2dc40:	4606      	mov	r6, r0
   2dc42:	d102      	bne.n	2dc4a <__cvt+0x62>
   2dc44:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dc46:	07db      	lsls	r3, r3, #31
   2dc48:	d522      	bpl.n	2dc90 <__cvt+0xa8>
   2dc4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2dc4e:	eb06 0905 	add.w	r9, r6, r5
   2dc52:	d110      	bne.n	2dc76 <__cvt+0x8e>
   2dc54:	7833      	ldrb	r3, [r6, #0]
   2dc56:	2b30      	cmp	r3, #48	; 0x30
   2dc58:	d10a      	bne.n	2dc70 <__cvt+0x88>
   2dc5a:	2200      	movs	r2, #0
   2dc5c:	2300      	movs	r3, #0
   2dc5e:	4620      	mov	r0, r4
   2dc60:	4639      	mov	r1, r7
   2dc62:	f7eb fc01 	bl	19468 <__aeabi_dcmpeq>
   2dc66:	b918      	cbnz	r0, 2dc70 <__cvt+0x88>
   2dc68:	f1c5 0501 	rsb	r5, r5, #1
   2dc6c:	f8ca 5000 	str.w	r5, [sl]
   2dc70:	f8da 3000 	ldr.w	r3, [sl]
   2dc74:	4499      	add	r9, r3
   2dc76:	2200      	movs	r2, #0
   2dc78:	2300      	movs	r3, #0
   2dc7a:	4620      	mov	r0, r4
   2dc7c:	4639      	mov	r1, r7
   2dc7e:	f7eb fbf3 	bl	19468 <__aeabi_dcmpeq>
   2dc82:	b108      	cbz	r0, 2dc88 <__cvt+0xa0>
   2dc84:	f8cd 901c 	str.w	r9, [sp, #28]
   2dc88:	2230      	movs	r2, #48	; 0x30
   2dc8a:	9b07      	ldr	r3, [sp, #28]
   2dc8c:	454b      	cmp	r3, r9
   2dc8e:	d307      	bcc.n	2dca0 <__cvt+0xb8>
   2dc90:	9b07      	ldr	r3, [sp, #28]
   2dc92:	4630      	mov	r0, r6
   2dc94:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2dc96:	1b9b      	subs	r3, r3, r6
   2dc98:	6013      	str	r3, [r2, #0]
   2dc9a:	b008      	add	sp, #32
   2dc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dca0:	1c59      	adds	r1, r3, #1
   2dca2:	9107      	str	r1, [sp, #28]
   2dca4:	701a      	strb	r2, [r3, #0]
   2dca6:	e7f0      	b.n	2dc8a <__cvt+0xa2>

0002dca8 <__exponent>:
   2dca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2dcaa:	2900      	cmp	r1, #0
   2dcac:	4603      	mov	r3, r0
   2dcae:	bfb8      	it	lt
   2dcb0:	4249      	neglt	r1, r1
   2dcb2:	f803 2b02 	strb.w	r2, [r3], #2
   2dcb6:	bfb4      	ite	lt
   2dcb8:	222d      	movlt	r2, #45	; 0x2d
   2dcba:	222b      	movge	r2, #43	; 0x2b
   2dcbc:	2909      	cmp	r1, #9
   2dcbe:	7042      	strb	r2, [r0, #1]
   2dcc0:	dd2a      	ble.n	2dd18 <__exponent+0x70>
   2dcc2:	f10d 0407 	add.w	r4, sp, #7
   2dcc6:	270a      	movs	r7, #10
   2dcc8:	46a4      	mov	ip, r4
   2dcca:	460a      	mov	r2, r1
   2dccc:	46a6      	mov	lr, r4
   2dcce:	3c01      	subs	r4, #1
   2dcd0:	2a63      	cmp	r2, #99	; 0x63
   2dcd2:	fb91 f6f7 	sdiv	r6, r1, r7
   2dcd6:	fb07 1516 	mls	r5, r7, r6, r1
   2dcda:	4631      	mov	r1, r6
   2dcdc:	f105 0530 	add.w	r5, r5, #48	; 0x30
   2dce0:	f80e 5c01 	strb.w	r5, [lr, #-1]
   2dce4:	dcf1      	bgt.n	2dcca <__exponent+0x22>
   2dce6:	3130      	adds	r1, #48	; 0x30
   2dce8:	f1ae 0502 	sub.w	r5, lr, #2
   2dcec:	f804 1c01 	strb.w	r1, [r4, #-1]
   2dcf0:	1c44      	adds	r4, r0, #1
   2dcf2:	4629      	mov	r1, r5
   2dcf4:	4561      	cmp	r1, ip
   2dcf6:	d30a      	bcc.n	2dd0e <__exponent+0x66>
   2dcf8:	f10d 0209 	add.w	r2, sp, #9
   2dcfc:	eba2 020e 	sub.w	r2, r2, lr
   2dd00:	4565      	cmp	r5, ip
   2dd02:	bf88      	it	hi
   2dd04:	2200      	movhi	r2, #0
   2dd06:	4413      	add	r3, r2
   2dd08:	1a18      	subs	r0, r3, r0
   2dd0a:	b003      	add	sp, #12
   2dd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2dd12:	f804 2f01 	strb.w	r2, [r4, #1]!
   2dd16:	e7ed      	b.n	2dcf4 <__exponent+0x4c>
   2dd18:	2330      	movs	r3, #48	; 0x30
   2dd1a:	3130      	adds	r1, #48	; 0x30
   2dd1c:	7083      	strb	r3, [r0, #2]
   2dd1e:	1d03      	adds	r3, r0, #4
   2dd20:	70c1      	strb	r1, [r0, #3]
   2dd22:	e7f1      	b.n	2dd08 <__exponent+0x60>

0002dd24 <_printf_common>:
   2dd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dd28:	4616      	mov	r6, r2
   2dd2a:	4699      	mov	r9, r3
   2dd2c:	688a      	ldr	r2, [r1, #8]
   2dd2e:	4607      	mov	r7, r0
   2dd30:	690b      	ldr	r3, [r1, #16]
   2dd32:	460c      	mov	r4, r1
   2dd34:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2dd38:	4293      	cmp	r3, r2
   2dd3a:	bfb8      	it	lt
   2dd3c:	4613      	movlt	r3, r2
   2dd3e:	6033      	str	r3, [r6, #0]
   2dd40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2dd44:	b10a      	cbz	r2, 2dd4a <_printf_common+0x26>
   2dd46:	3301      	adds	r3, #1
   2dd48:	6033      	str	r3, [r6, #0]
   2dd4a:	6823      	ldr	r3, [r4, #0]
   2dd4c:	0699      	lsls	r1, r3, #26
   2dd4e:	bf42      	ittt	mi
   2dd50:	6833      	ldrmi	r3, [r6, #0]
   2dd52:	3302      	addmi	r3, #2
   2dd54:	6033      	strmi	r3, [r6, #0]
   2dd56:	6825      	ldr	r5, [r4, #0]
   2dd58:	f015 0506 	ands.w	r5, r5, #6
   2dd5c:	d106      	bne.n	2dd6c <_printf_common+0x48>
   2dd5e:	f104 0a19 	add.w	sl, r4, #25
   2dd62:	68e3      	ldr	r3, [r4, #12]
   2dd64:	6832      	ldr	r2, [r6, #0]
   2dd66:	1a9b      	subs	r3, r3, r2
   2dd68:	42ab      	cmp	r3, r5
   2dd6a:	dc29      	bgt.n	2ddc0 <_printf_common+0x9c>
   2dd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2dd70:	1e13      	subs	r3, r2, #0
   2dd72:	6822      	ldr	r2, [r4, #0]
   2dd74:	bf18      	it	ne
   2dd76:	2301      	movne	r3, #1
   2dd78:	0692      	lsls	r2, r2, #26
   2dd7a:	d42e      	bmi.n	2ddda <_printf_common+0xb6>
   2dd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2dd80:	4649      	mov	r1, r9
   2dd82:	4638      	mov	r0, r7
   2dd84:	47c0      	blx	r8
   2dd86:	3001      	adds	r0, #1
   2dd88:	d021      	beq.n	2ddce <_printf_common+0xaa>
   2dd8a:	6823      	ldr	r3, [r4, #0]
   2dd8c:	341a      	adds	r4, #26
   2dd8e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   2dd92:	f003 0306 	and.w	r3, r3, #6
   2dd96:	6832      	ldr	r2, [r6, #0]
   2dd98:	2600      	movs	r6, #0
   2dd9a:	2b04      	cmp	r3, #4
   2dd9c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2dda0:	bf08      	it	eq
   2dda2:	1aad      	subeq	r5, r5, r2
   2dda4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2dda8:	bf14      	ite	ne
   2ddaa:	2500      	movne	r5, #0
   2ddac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2ddb0:	4293      	cmp	r3, r2
   2ddb2:	bfc4      	itt	gt
   2ddb4:	1a9b      	subgt	r3, r3, r2
   2ddb6:	18ed      	addgt	r5, r5, r3
   2ddb8:	42b5      	cmp	r5, r6
   2ddba:	d11a      	bne.n	2ddf2 <_printf_common+0xce>
   2ddbc:	2000      	movs	r0, #0
   2ddbe:	e008      	b.n	2ddd2 <_printf_common+0xae>
   2ddc0:	2301      	movs	r3, #1
   2ddc2:	4652      	mov	r2, sl
   2ddc4:	4649      	mov	r1, r9
   2ddc6:	4638      	mov	r0, r7
   2ddc8:	47c0      	blx	r8
   2ddca:	3001      	adds	r0, #1
   2ddcc:	d103      	bne.n	2ddd6 <_printf_common+0xb2>
   2ddce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ddd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ddd6:	3501      	adds	r5, #1
   2ddd8:	e7c3      	b.n	2dd62 <_printf_common+0x3e>
   2ddda:	18e1      	adds	r1, r4, r3
   2dddc:	1c5a      	adds	r2, r3, #1
   2ddde:	2030      	movs	r0, #48	; 0x30
   2dde0:	3302      	adds	r3, #2
   2dde2:	4422      	add	r2, r4
   2dde4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2dde8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2ddec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2ddf0:	e7c4      	b.n	2dd7c <_printf_common+0x58>
   2ddf2:	2301      	movs	r3, #1
   2ddf4:	4622      	mov	r2, r4
   2ddf6:	4649      	mov	r1, r9
   2ddf8:	4638      	mov	r0, r7
   2ddfa:	47c0      	blx	r8
   2ddfc:	3001      	adds	r0, #1
   2ddfe:	d0e6      	beq.n	2ddce <_printf_common+0xaa>
   2de00:	3601      	adds	r6, #1
   2de02:	e7d9      	b.n	2ddb8 <_printf_common+0x94>

0002de04 <__sread>:
   2de04:	b510      	push	{r4, lr}
   2de06:	460c      	mov	r4, r1
   2de08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2de0c:	f7fd f982 	bl	2b114 <_read_r>
   2de10:	2800      	cmp	r0, #0
   2de12:	bfab      	itete	ge
   2de14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2de16:	89a3      	ldrhlt	r3, [r4, #12]
   2de18:	181b      	addge	r3, r3, r0
   2de1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2de1e:	bfac      	ite	ge
   2de20:	6563      	strge	r3, [r4, #84]	; 0x54
   2de22:	81a3      	strhlt	r3, [r4, #12]
   2de24:	bd10      	pop	{r4, pc}

0002de26 <__seofread>:
   2de26:	2000      	movs	r0, #0
   2de28:	4770      	bx	lr

0002de2a <__swrite>:
   2de2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de2e:	461f      	mov	r7, r3
   2de30:	898b      	ldrh	r3, [r1, #12]
   2de32:	4605      	mov	r5, r0
   2de34:	460c      	mov	r4, r1
   2de36:	05db      	lsls	r3, r3, #23
   2de38:	4616      	mov	r6, r2
   2de3a:	d505      	bpl.n	2de48 <__swrite+0x1e>
   2de3c:	2302      	movs	r3, #2
   2de3e:	2200      	movs	r2, #0
   2de40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2de44:	f7fc f92e 	bl	2a0a4 <_lseek_r>
   2de48:	89a3      	ldrh	r3, [r4, #12]
   2de4a:	4632      	mov	r2, r6
   2de4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2de50:	4628      	mov	r0, r5
   2de52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2de56:	81a3      	strh	r3, [r4, #12]
   2de58:	463b      	mov	r3, r7
   2de5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2de5e:	f7fc b88b 	b.w	29f78 <_write_r>

0002de62 <__sseek>:
   2de62:	b510      	push	{r4, lr}
   2de64:	460c      	mov	r4, r1
   2de66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2de6a:	f7fc f91b 	bl	2a0a4 <_lseek_r>
   2de6e:	1c43      	adds	r3, r0, #1
   2de70:	89a3      	ldrh	r3, [r4, #12]
   2de72:	bf15      	itete	ne
   2de74:	6560      	strne	r0, [r4, #84]	; 0x54
   2de76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2de7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2de7e:	81a3      	strheq	r3, [r4, #12]
   2de80:	bf18      	it	ne
   2de82:	81a3      	strhne	r3, [r4, #12]
   2de84:	bd10      	pop	{r4, pc}

0002de86 <__sclose>:
   2de86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2de8a:	f7fc b8a5 	b.w	29fd8 <_close_r>

0002de8e <strchr>:
   2de8e:	b2c9      	uxtb	r1, r1
   2de90:	4603      	mov	r3, r0
   2de92:	4618      	mov	r0, r3
   2de94:	f813 2b01 	ldrb.w	r2, [r3], #1
   2de98:	b112      	cbz	r2, 2dea0 <strchr+0x12>
   2de9a:	428a      	cmp	r2, r1
   2de9c:	d1f9      	bne.n	2de92 <strchr+0x4>
   2de9e:	4770      	bx	lr
   2dea0:	2900      	cmp	r1, #0
   2dea2:	bf18      	it	ne
   2dea4:	2000      	movne	r0, #0
   2dea6:	4770      	bx	lr

0002dea8 <strcpy>:
   2dea8:	4603      	mov	r3, r0
   2deaa:	f811 2b01 	ldrb.w	r2, [r1], #1
   2deae:	f803 2b01 	strb.w	r2, [r3], #1
   2deb2:	2a00      	cmp	r2, #0
   2deb4:	d1f9      	bne.n	2deaa <strcpy+0x2>
   2deb6:	4770      	bx	lr

0002deb8 <strncmp>:
   2deb8:	4603      	mov	r3, r0
   2deba:	b510      	push	{r4, lr}
   2debc:	b172      	cbz	r2, 2dedc <strncmp+0x24>
   2debe:	3901      	subs	r1, #1
   2dec0:	1884      	adds	r4, r0, r2
   2dec2:	f813 0b01 	ldrb.w	r0, [r3], #1
   2dec6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2deca:	4290      	cmp	r0, r2
   2decc:	d101      	bne.n	2ded2 <strncmp+0x1a>
   2dece:	42a3      	cmp	r3, r4
   2ded0:	d101      	bne.n	2ded6 <strncmp+0x1e>
   2ded2:	1a80      	subs	r0, r0, r2
   2ded4:	bd10      	pop	{r4, pc}
   2ded6:	2800      	cmp	r0, #0
   2ded8:	d1f3      	bne.n	2dec2 <strncmp+0xa>
   2deda:	e7fa      	b.n	2ded2 <strncmp+0x1a>
   2dedc:	4610      	mov	r0, r2
   2dede:	e7f9      	b.n	2ded4 <strncmp+0x1c>

0002dee0 <strncpy>:
   2dee0:	3901      	subs	r1, #1
   2dee2:	4603      	mov	r3, r0
   2dee4:	b510      	push	{r4, lr}
   2dee6:	b132      	cbz	r2, 2def6 <strncpy+0x16>
   2dee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2deec:	3a01      	subs	r2, #1
   2deee:	f803 4b01 	strb.w	r4, [r3], #1
   2def2:	2c00      	cmp	r4, #0
   2def4:	d1f7      	bne.n	2dee6 <strncpy+0x6>
   2def6:	441a      	add	r2, r3
   2def8:	2100      	movs	r1, #0
   2defa:	4293      	cmp	r3, r2
   2defc:	d100      	bne.n	2df00 <strncpy+0x20>
   2defe:	bd10      	pop	{r4, pc}
   2df00:	f803 1b01 	strb.w	r1, [r3], #1
   2df04:	e7f9      	b.n	2defa <strncpy+0x1a>

0002df06 <strnlen>:
   2df06:	4602      	mov	r2, r0
   2df08:	4401      	add	r1, r0
   2df0a:	b510      	push	{r4, lr}
   2df0c:	428a      	cmp	r2, r1
   2df0e:	4613      	mov	r3, r2
   2df10:	d003      	beq.n	2df1a <strnlen+0x14>
   2df12:	781c      	ldrb	r4, [r3, #0]
   2df14:	3201      	adds	r2, #1
   2df16:	2c00      	cmp	r4, #0
   2df18:	d1f8      	bne.n	2df0c <strnlen+0x6>
   2df1a:	1a18      	subs	r0, r3, r0
   2df1c:	bd10      	pop	{r4, pc}

0002df1e <strstr>:
   2df1e:	780a      	ldrb	r2, [r1, #0]
   2df20:	b570      	push	{r4, r5, r6, lr}
   2df22:	b96a      	cbnz	r2, 2df40 <strstr+0x22>
   2df24:	bd70      	pop	{r4, r5, r6, pc}
   2df26:	429a      	cmp	r2, r3
   2df28:	d109      	bne.n	2df3e <strstr+0x20>
   2df2a:	460c      	mov	r4, r1
   2df2c:	4605      	mov	r5, r0
   2df2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2df32:	2b00      	cmp	r3, #0
   2df34:	d0f6      	beq.n	2df24 <strstr+0x6>
   2df36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2df3a:	429e      	cmp	r6, r3
   2df3c:	d0f7      	beq.n	2df2e <strstr+0x10>
   2df3e:	3001      	adds	r0, #1
   2df40:	7803      	ldrb	r3, [r0, #0]
   2df42:	2b00      	cmp	r3, #0
   2df44:	d1ef      	bne.n	2df26 <strstr+0x8>
   2df46:	4618      	mov	r0, r3
   2df48:	e7ec      	b.n	2df24 <strstr+0x6>

0002df4a <_strtol_r>:
   2df4a:	f7fb bbf5 	b.w	29738 <_strtol_l.constprop.0>

0002df4e <_strtoul_r>:
   2df4e:	f7fb bd19 	b.w	29984 <_strtoul_l.constprop.0>

0002df52 <_vsniprintf_r>:
   2df52:	b530      	push	{r4, r5, lr}
   2df54:	4614      	mov	r4, r2
   2df56:	b09b      	sub	sp, #108	; 0x6c
   2df58:	4605      	mov	r5, r0
   2df5a:	461a      	mov	r2, r3
   2df5c:	2c00      	cmp	r4, #0
   2df5e:	da05      	bge.n	2df6c <_vsniprintf_r+0x1a>
   2df60:	238b      	movs	r3, #139	; 0x8b
   2df62:	6003      	str	r3, [r0, #0]
   2df64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df68:	b01b      	add	sp, #108	; 0x6c
   2df6a:	bd30      	pop	{r4, r5, pc}
   2df6c:	f44f 7302 	mov.w	r3, #520	; 0x208
   2df70:	9100      	str	r1, [sp, #0]
   2df72:	9104      	str	r1, [sp, #16]
   2df74:	4669      	mov	r1, sp
   2df76:	f8ad 300c 	strh.w	r3, [sp, #12]
   2df7a:	bf14      	ite	ne
   2df7c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2df80:	4623      	moveq	r3, r4
   2df82:	9302      	str	r3, [sp, #8]
   2df84:	9305      	str	r3, [sp, #20]
   2df86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2df8a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2df8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2df90:	f7fc fbc2 	bl	2a718 <_svfiprintf_r>
   2df94:	1c43      	adds	r3, r0, #1
   2df96:	bfbc      	itt	lt
   2df98:	238b      	movlt	r3, #139	; 0x8b
   2df9a:	602b      	strlt	r3, [r5, #0]
   2df9c:	2c00      	cmp	r4, #0
   2df9e:	d0e3      	beq.n	2df68 <_vsniprintf_r+0x16>
   2dfa0:	9b00      	ldr	r3, [sp, #0]
   2dfa2:	2200      	movs	r2, #0
   2dfa4:	701a      	strb	r2, [r3, #0]
   2dfa6:	e7df      	b.n	2df68 <_vsniprintf_r+0x16>

0002dfa8 <quorem>:
   2dfa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dfac:	6903      	ldr	r3, [r0, #16]
   2dfae:	4607      	mov	r7, r0
   2dfb0:	690c      	ldr	r4, [r1, #16]
   2dfb2:	42a3      	cmp	r3, r4
   2dfb4:	f2c0 8084 	blt.w	2e0c0 <quorem+0x118>
   2dfb8:	3c01      	subs	r4, #1
   2dfba:	f100 0514 	add.w	r5, r0, #20
   2dfbe:	f101 0814 	add.w	r8, r1, #20
   2dfc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2dfc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2dfca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   2dfce:	9301      	str	r3, [sp, #4]
   2dfd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2dfd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2dfd8:	3301      	adds	r3, #1
   2dfda:	429a      	cmp	r2, r3
   2dfdc:	fbb2 f6f3 	udiv	r6, r2, r3
   2dfe0:	d332      	bcc.n	2e048 <quorem+0xa0>
   2dfe2:	f04f 0e00 	mov.w	lr, #0
   2dfe6:	4640      	mov	r0, r8
   2dfe8:	46ac      	mov	ip, r5
   2dfea:	46f2      	mov	sl, lr
   2dfec:	f850 2b04 	ldr.w	r2, [r0], #4
   2dff0:	b293      	uxth	r3, r2
   2dff2:	4581      	cmp	r9, r0
   2dff4:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2dff8:	fb06 e303 	mla	r3, r6, r3, lr
   2dffc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   2e000:	b29b      	uxth	r3, r3
   2e002:	fb06 e202 	mla	r2, r6, r2, lr
   2e006:	ebaa 0303 	sub.w	r3, sl, r3
   2e00a:	f8dc a000 	ldr.w	sl, [ip]
   2e00e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2e012:	fa1f fa8a 	uxth.w	sl, sl
   2e016:	b292      	uxth	r2, r2
   2e018:	4453      	add	r3, sl
   2e01a:	f8dc a000 	ldr.w	sl, [ip]
   2e01e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   2e022:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e026:	b29b      	uxth	r3, r3
   2e028:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2e02c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e030:	f84c 3b04 	str.w	r3, [ip], #4
   2e034:	d2da      	bcs.n	2dfec <quorem+0x44>
   2e036:	f855 300b 	ldr.w	r3, [r5, fp]
   2e03a:	b92b      	cbnz	r3, 2e048 <quorem+0xa0>
   2e03c:	9b01      	ldr	r3, [sp, #4]
   2e03e:	3b04      	subs	r3, #4
   2e040:	429d      	cmp	r5, r3
   2e042:	461a      	mov	r2, r3
   2e044:	d330      	bcc.n	2e0a8 <quorem+0x100>
   2e046:	613c      	str	r4, [r7, #16]
   2e048:	4638      	mov	r0, r7
   2e04a:	f000 f88f 	bl	2e16c <__mcmp>
   2e04e:	2800      	cmp	r0, #0
   2e050:	db26      	blt.n	2e0a0 <quorem+0xf8>
   2e052:	3601      	adds	r6, #1
   2e054:	4628      	mov	r0, r5
   2e056:	f04f 0c00 	mov.w	ip, #0
   2e05a:	f858 1b04 	ldr.w	r1, [r8], #4
   2e05e:	f8d0 e000 	ldr.w	lr, [r0]
   2e062:	b28b      	uxth	r3, r1
   2e064:	45c1      	cmp	r9, r8
   2e066:	fa1f f28e 	uxth.w	r2, lr
   2e06a:	ebac 0303 	sub.w	r3, ip, r3
   2e06e:	4413      	add	r3, r2
   2e070:	ea4f 4211 	mov.w	r2, r1, lsr #16
   2e074:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2e078:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e07c:	b29b      	uxth	r3, r3
   2e07e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2e082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e086:	f840 3b04 	str.w	r3, [r0], #4
   2e08a:	d2e6      	bcs.n	2e05a <quorem+0xb2>
   2e08c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e094:	b922      	cbnz	r2, 2e0a0 <quorem+0xf8>
   2e096:	3b04      	subs	r3, #4
   2e098:	429d      	cmp	r5, r3
   2e09a:	461a      	mov	r2, r3
   2e09c:	d30a      	bcc.n	2e0b4 <quorem+0x10c>
   2e09e:	613c      	str	r4, [r7, #16]
   2e0a0:	4630      	mov	r0, r6
   2e0a2:	b003      	add	sp, #12
   2e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0a8:	6812      	ldr	r2, [r2, #0]
   2e0aa:	3b04      	subs	r3, #4
   2e0ac:	2a00      	cmp	r2, #0
   2e0ae:	d1ca      	bne.n	2e046 <quorem+0x9e>
   2e0b0:	3c01      	subs	r4, #1
   2e0b2:	e7c5      	b.n	2e040 <quorem+0x98>
   2e0b4:	6812      	ldr	r2, [r2, #0]
   2e0b6:	3b04      	subs	r3, #4
   2e0b8:	2a00      	cmp	r2, #0
   2e0ba:	d1f0      	bne.n	2e09e <quorem+0xf6>
   2e0bc:	3c01      	subs	r4, #1
   2e0be:	e7eb      	b.n	2e098 <quorem+0xf0>
   2e0c0:	2000      	movs	r0, #0
   2e0c2:	e7ee      	b.n	2e0a2 <quorem+0xfa>

0002e0c4 <_getenv_r>:
   2e0c4:	b507      	push	{r0, r1, r2, lr}
   2e0c6:	aa01      	add	r2, sp, #4
   2e0c8:	f7fb ffa8 	bl	2a01c <_findenv_r>
   2e0cc:	b003      	add	sp, #12
   2e0ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0d2 <__hi0bits>:
   2e0d2:	0c02      	lsrs	r2, r0, #16
   2e0d4:	4603      	mov	r3, r0
   2e0d6:	0412      	lsls	r2, r2, #16
   2e0d8:	b9ca      	cbnz	r2, 2e10e <__hi0bits+0x3c>
   2e0da:	0403      	lsls	r3, r0, #16
   2e0dc:	2010      	movs	r0, #16
   2e0de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2e0e2:	bf04      	itt	eq
   2e0e4:	021b      	lsleq	r3, r3, #8
   2e0e6:	3008      	addeq	r0, #8
   2e0e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2e0ec:	bf04      	itt	eq
   2e0ee:	011b      	lsleq	r3, r3, #4
   2e0f0:	3004      	addeq	r0, #4
   2e0f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2e0f6:	bf04      	itt	eq
   2e0f8:	009b      	lsleq	r3, r3, #2
   2e0fa:	3002      	addeq	r0, #2
   2e0fc:	2b00      	cmp	r3, #0
   2e0fe:	db05      	blt.n	2e10c <__hi0bits+0x3a>
   2e100:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2e104:	f100 0001 	add.w	r0, r0, #1
   2e108:	bf08      	it	eq
   2e10a:	2020      	moveq	r0, #32
   2e10c:	4770      	bx	lr
   2e10e:	2000      	movs	r0, #0
   2e110:	e7e5      	b.n	2e0de <__hi0bits+0xc>

0002e112 <__lo0bits>:
   2e112:	6803      	ldr	r3, [r0, #0]
   2e114:	4602      	mov	r2, r0
   2e116:	f013 0007 	ands.w	r0, r3, #7
   2e11a:	d00b      	beq.n	2e134 <__lo0bits+0x22>
   2e11c:	07d9      	lsls	r1, r3, #31
   2e11e:	d421      	bmi.n	2e164 <__lo0bits+0x52>
   2e120:	0798      	lsls	r0, r3, #30
   2e122:	bf47      	ittee	mi
   2e124:	085b      	lsrmi	r3, r3, #1
   2e126:	2001      	movmi	r0, #1
   2e128:	089b      	lsrpl	r3, r3, #2
   2e12a:	2002      	movpl	r0, #2
   2e12c:	bf4c      	ite	mi
   2e12e:	6013      	strmi	r3, [r2, #0]
   2e130:	6013      	strpl	r3, [r2, #0]
   2e132:	4770      	bx	lr
   2e134:	b299      	uxth	r1, r3
   2e136:	b909      	cbnz	r1, 2e13c <__lo0bits+0x2a>
   2e138:	0c1b      	lsrs	r3, r3, #16
   2e13a:	2010      	movs	r0, #16
   2e13c:	b2d9      	uxtb	r1, r3
   2e13e:	b909      	cbnz	r1, 2e144 <__lo0bits+0x32>
   2e140:	3008      	adds	r0, #8
   2e142:	0a1b      	lsrs	r3, r3, #8
   2e144:	0719      	lsls	r1, r3, #28
   2e146:	bf04      	itt	eq
   2e148:	091b      	lsreq	r3, r3, #4
   2e14a:	3004      	addeq	r0, #4
   2e14c:	0799      	lsls	r1, r3, #30
   2e14e:	bf04      	itt	eq
   2e150:	089b      	lsreq	r3, r3, #2
   2e152:	3002      	addeq	r0, #2
   2e154:	07d9      	lsls	r1, r3, #31
   2e156:	d403      	bmi.n	2e160 <__lo0bits+0x4e>
   2e158:	085b      	lsrs	r3, r3, #1
   2e15a:	f100 0001 	add.w	r0, r0, #1
   2e15e:	d003      	beq.n	2e168 <__lo0bits+0x56>
   2e160:	6013      	str	r3, [r2, #0]
   2e162:	4770      	bx	lr
   2e164:	2000      	movs	r0, #0
   2e166:	4770      	bx	lr
   2e168:	2020      	movs	r0, #32
   2e16a:	4770      	bx	lr

0002e16c <__mcmp>:
   2e16c:	4603      	mov	r3, r0
   2e16e:	690a      	ldr	r2, [r1, #16]
   2e170:	6900      	ldr	r0, [r0, #16]
   2e172:	1a80      	subs	r0, r0, r2
   2e174:	b530      	push	{r4, r5, lr}
   2e176:	d10d      	bne.n	2e194 <__mcmp+0x28>
   2e178:	3314      	adds	r3, #20
   2e17a:	3114      	adds	r1, #20
   2e17c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2e180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2e184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2e188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e18c:	4295      	cmp	r5, r2
   2e18e:	d002      	beq.n	2e196 <__mcmp+0x2a>
   2e190:	d304      	bcc.n	2e19c <__mcmp+0x30>
   2e192:	2001      	movs	r0, #1
   2e194:	bd30      	pop	{r4, r5, pc}
   2e196:	42a3      	cmp	r3, r4
   2e198:	d3f4      	bcc.n	2e184 <__mcmp+0x18>
   2e19a:	e7fb      	b.n	2e194 <__mcmp+0x28>
   2e19c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e1a0:	e7f8      	b.n	2e194 <__mcmp+0x28>

0002e1a2 <_calloc_r>:
   2e1a2:	b570      	push	{r4, r5, r6, lr}
   2e1a4:	fba1 5402 	umull	r5, r4, r1, r2
   2e1a8:	b934      	cbnz	r4, 2e1b8 <_calloc_r+0x16>
   2e1aa:	4629      	mov	r1, r5
   2e1ac:	f7fa fec6 	bl	28f3c <_malloc_r>
   2e1b0:	4606      	mov	r6, r0
   2e1b2:	b928      	cbnz	r0, 2e1c0 <_calloc_r+0x1e>
   2e1b4:	4630      	mov	r0, r6
   2e1b6:	bd70      	pop	{r4, r5, r6, pc}
   2e1b8:	220c      	movs	r2, #12
   2e1ba:	2600      	movs	r6, #0
   2e1bc:	6002      	str	r2, [r0, #0]
   2e1be:	e7f9      	b.n	2e1b4 <_calloc_r+0x12>
   2e1c0:	462a      	mov	r2, r5
   2e1c2:	4621      	mov	r1, r4
   2e1c4:	f7ff fd08 	bl	2dbd8 <memset>
   2e1c8:	e7f4      	b.n	2e1b4 <_calloc_r+0x12>

0002e1ca <__ssputs_r>:
   2e1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e1ce:	688e      	ldr	r6, [r1, #8]
   2e1d0:	4682      	mov	sl, r0
   2e1d2:	460c      	mov	r4, r1
   2e1d4:	4690      	mov	r8, r2
   2e1d6:	429e      	cmp	r6, r3
   2e1d8:	461f      	mov	r7, r3
   2e1da:	d838      	bhi.n	2e24e <__ssputs_r+0x84>
   2e1dc:	898a      	ldrh	r2, [r1, #12]
   2e1de:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2e1e2:	d032      	beq.n	2e24a <__ssputs_r+0x80>
   2e1e4:	6825      	ldr	r5, [r4, #0]
   2e1e6:	3301      	adds	r3, #1
   2e1e8:	6909      	ldr	r1, [r1, #16]
   2e1ea:	eba5 0901 	sub.w	r9, r5, r1
   2e1ee:	6965      	ldr	r5, [r4, #20]
   2e1f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e1f4:	444b      	add	r3, r9
   2e1f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e1fa:	106d      	asrs	r5, r5, #1
   2e1fc:	429d      	cmp	r5, r3
   2e1fe:	bf38      	it	cc
   2e200:	461d      	movcc	r5, r3
   2e202:	0553      	lsls	r3, r2, #21
   2e204:	d531      	bpl.n	2e26a <__ssputs_r+0xa0>
   2e206:	4629      	mov	r1, r5
   2e208:	f7fa fe98 	bl	28f3c <_malloc_r>
   2e20c:	4606      	mov	r6, r0
   2e20e:	b950      	cbnz	r0, 2e226 <__ssputs_r+0x5c>
   2e210:	230c      	movs	r3, #12
   2e212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e216:	f8ca 3000 	str.w	r3, [sl]
   2e21a:	89a3      	ldrh	r3, [r4, #12]
   2e21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e220:	81a3      	strh	r3, [r4, #12]
   2e222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e226:	464a      	mov	r2, r9
   2e228:	6921      	ldr	r1, [r4, #16]
   2e22a:	f7ff fcc8 	bl	2dbbe <memcpy>
   2e22e:	89a3      	ldrh	r3, [r4, #12]
   2e230:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2e234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e238:	81a3      	strh	r3, [r4, #12]
   2e23a:	6126      	str	r6, [r4, #16]
   2e23c:	444e      	add	r6, r9
   2e23e:	6165      	str	r5, [r4, #20]
   2e240:	eba5 0509 	sub.w	r5, r5, r9
   2e244:	6026      	str	r6, [r4, #0]
   2e246:	463e      	mov	r6, r7
   2e248:	60a5      	str	r5, [r4, #8]
   2e24a:	42be      	cmp	r6, r7
   2e24c:	d900      	bls.n	2e250 <__ssputs_r+0x86>
   2e24e:	463e      	mov	r6, r7
   2e250:	4632      	mov	r2, r6
   2e252:	4641      	mov	r1, r8
   2e254:	6820      	ldr	r0, [r4, #0]
   2e256:	f000 f976 	bl	2e546 <memmove>
   2e25a:	68a3      	ldr	r3, [r4, #8]
   2e25c:	2000      	movs	r0, #0
   2e25e:	1b9b      	subs	r3, r3, r6
   2e260:	60a3      	str	r3, [r4, #8]
   2e262:	6823      	ldr	r3, [r4, #0]
   2e264:	4433      	add	r3, r6
   2e266:	6023      	str	r3, [r4, #0]
   2e268:	e7db      	b.n	2e222 <__ssputs_r+0x58>
   2e26a:	462a      	mov	r2, r5
   2e26c:	f000 f985 	bl	2e57a <_realloc_r>
   2e270:	4606      	mov	r6, r0
   2e272:	2800      	cmp	r0, #0
   2e274:	d1e1      	bne.n	2e23a <__ssputs_r+0x70>
   2e276:	6921      	ldr	r1, [r4, #16]
   2e278:	4650      	mov	r0, sl
   2e27a:	f7fa fdf5 	bl	28e68 <_free_r>
   2e27e:	e7c7      	b.n	2e210 <__ssputs_r+0x46>

0002e280 <_sungetc_r>:
   2e280:	b538      	push	{r3, r4, r5, lr}
   2e282:	1c4b      	adds	r3, r1, #1
   2e284:	4614      	mov	r4, r2
   2e286:	d103      	bne.n	2e290 <_sungetc_r+0x10>
   2e288:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e28c:	4628      	mov	r0, r5
   2e28e:	bd38      	pop	{r3, r4, r5, pc}
   2e290:	8993      	ldrh	r3, [r2, #12]
   2e292:	b2cd      	uxtb	r5, r1
   2e294:	f023 0320 	bic.w	r3, r3, #32
   2e298:	8193      	strh	r3, [r2, #12]
   2e29a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e29c:	6852      	ldr	r2, [r2, #4]
   2e29e:	b18b      	cbz	r3, 2e2c4 <_sungetc_r+0x44>
   2e2a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2e2a2:	4293      	cmp	r3, r2
   2e2a4:	dd08      	ble.n	2e2b8 <_sungetc_r+0x38>
   2e2a6:	6823      	ldr	r3, [r4, #0]
   2e2a8:	1e5a      	subs	r2, r3, #1
   2e2aa:	6022      	str	r2, [r4, #0]
   2e2ac:	f803 5c01 	strb.w	r5, [r3, #-1]
   2e2b0:	6863      	ldr	r3, [r4, #4]
   2e2b2:	3301      	adds	r3, #1
   2e2b4:	6063      	str	r3, [r4, #4]
   2e2b6:	e7e9      	b.n	2e28c <_sungetc_r+0xc>
   2e2b8:	4621      	mov	r1, r4
   2e2ba:	f000 f89a 	bl	2e3f2 <__submore>
   2e2be:	2800      	cmp	r0, #0
   2e2c0:	d0f1      	beq.n	2e2a6 <_sungetc_r+0x26>
   2e2c2:	e7e1      	b.n	2e288 <_sungetc_r+0x8>
   2e2c4:	6921      	ldr	r1, [r4, #16]
   2e2c6:	6823      	ldr	r3, [r4, #0]
   2e2c8:	b151      	cbz	r1, 2e2e0 <_sungetc_r+0x60>
   2e2ca:	4299      	cmp	r1, r3
   2e2cc:	d208      	bcs.n	2e2e0 <_sungetc_r+0x60>
   2e2ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2e2d2:	42a9      	cmp	r1, r5
   2e2d4:	d104      	bne.n	2e2e0 <_sungetc_r+0x60>
   2e2d6:	3b01      	subs	r3, #1
   2e2d8:	3201      	adds	r2, #1
   2e2da:	6023      	str	r3, [r4, #0]
   2e2dc:	6062      	str	r2, [r4, #4]
   2e2de:	e7d5      	b.n	2e28c <_sungetc_r+0xc>
   2e2e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2e2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e2e8:	6363      	str	r3, [r4, #52]	; 0x34
   2e2ea:	2303      	movs	r3, #3
   2e2ec:	63a3      	str	r3, [r4, #56]	; 0x38
   2e2ee:	4623      	mov	r3, r4
   2e2f0:	f803 5f46 	strb.w	r5, [r3, #70]!
   2e2f4:	6023      	str	r3, [r4, #0]
   2e2f6:	2301      	movs	r3, #1
   2e2f8:	e7dc      	b.n	2e2b4 <_sungetc_r+0x34>

0002e2fa <__ssrefill_r>:
   2e2fa:	b510      	push	{r4, lr}
   2e2fc:	460c      	mov	r4, r1
   2e2fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2e300:	b169      	cbz	r1, 2e31e <__ssrefill_r+0x24>
   2e302:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e306:	4299      	cmp	r1, r3
   2e308:	d001      	beq.n	2e30e <__ssrefill_r+0x14>
   2e30a:	f7fa fdad 	bl	28e68 <_free_r>
   2e30e:	2000      	movs	r0, #0
   2e310:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2e312:	6360      	str	r0, [r4, #52]	; 0x34
   2e314:	6063      	str	r3, [r4, #4]
   2e316:	b113      	cbz	r3, 2e31e <__ssrefill_r+0x24>
   2e318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2e31a:	6023      	str	r3, [r4, #0]
   2e31c:	bd10      	pop	{r4, pc}
   2e31e:	6923      	ldr	r3, [r4, #16]
   2e320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e324:	6023      	str	r3, [r4, #0]
   2e326:	2300      	movs	r3, #0
   2e328:	6063      	str	r3, [r4, #4]
   2e32a:	89a3      	ldrh	r3, [r4, #12]
   2e32c:	f043 0320 	orr.w	r3, r3, #32
   2e330:	81a3      	strh	r3, [r4, #12]
   2e332:	e7f3      	b.n	2e31c <__ssrefill_r+0x22>

0002e334 <__sfputc_r>:
   2e334:	6893      	ldr	r3, [r2, #8]
   2e336:	3b01      	subs	r3, #1
   2e338:	2b00      	cmp	r3, #0
   2e33a:	6093      	str	r3, [r2, #8]
   2e33c:	b410      	push	{r4}
   2e33e:	da07      	bge.n	2e350 <__sfputc_r+0x1c>
   2e340:	6994      	ldr	r4, [r2, #24]
   2e342:	42a3      	cmp	r3, r4
   2e344:	db01      	blt.n	2e34a <__sfputc_r+0x16>
   2e346:	290a      	cmp	r1, #10
   2e348:	d102      	bne.n	2e350 <__sfputc_r+0x1c>
   2e34a:	bc10      	pop	{r4}
   2e34c:	f7fc bef4 	b.w	2b138 <__swbuf_r>
   2e350:	6813      	ldr	r3, [r2, #0]
   2e352:	1c58      	adds	r0, r3, #1
   2e354:	6010      	str	r0, [r2, #0]
   2e356:	4608      	mov	r0, r1
   2e358:	7019      	strb	r1, [r3, #0]
   2e35a:	bc10      	pop	{r4}
   2e35c:	4770      	bx	lr

0002e35e <__sfputs_r>:
   2e35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e360:	4606      	mov	r6, r0
   2e362:	460f      	mov	r7, r1
   2e364:	4614      	mov	r4, r2
   2e366:	18d5      	adds	r5, r2, r3
   2e368:	42ac      	cmp	r4, r5
   2e36a:	d101      	bne.n	2e370 <__sfputs_r+0x12>
   2e36c:	2000      	movs	r0, #0
   2e36e:	e007      	b.n	2e380 <__sfputs_r+0x22>
   2e370:	463a      	mov	r2, r7
   2e372:	f814 1b01 	ldrb.w	r1, [r4], #1
   2e376:	4630      	mov	r0, r6
   2e378:	f7ff ffdc 	bl	2e334 <__sfputc_r>
   2e37c:	1c43      	adds	r3, r0, #1
   2e37e:	d1f3      	bne.n	2e368 <__sfputs_r+0xa>
   2e380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e382 <__sccl>:
   2e382:	b570      	push	{r4, r5, r6, lr}
   2e384:	780b      	ldrb	r3, [r1, #0]
   2e386:	4604      	mov	r4, r0
   2e388:	2b5e      	cmp	r3, #94	; 0x5e
   2e38a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2e38e:	bf13      	iteet	ne
   2e390:	1c48      	addne	r0, r1, #1
   2e392:	1c88      	addeq	r0, r1, #2
   2e394:	784b      	ldrbeq	r3, [r1, #1]
   2e396:	2200      	movne	r2, #0
   2e398:	bf08      	it	eq
   2e39a:	2201      	moveq	r2, #1
   2e39c:	1e61      	subs	r1, r4, #1
   2e39e:	f801 2f01 	strb.w	r2, [r1, #1]!
   2e3a2:	42a9      	cmp	r1, r5
   2e3a4:	d1fb      	bne.n	2e39e <__sccl+0x1c>
   2e3a6:	b90b      	cbnz	r3, 2e3ac <__sccl+0x2a>
   2e3a8:	3801      	subs	r0, #1
   2e3aa:	bd70      	pop	{r4, r5, r6, pc}
   2e3ac:	f082 0201 	eor.w	r2, r2, #1
   2e3b0:	4605      	mov	r5, r0
   2e3b2:	54e2      	strb	r2, [r4, r3]
   2e3b4:	4628      	mov	r0, r5
   2e3b6:	f810 1b01 	ldrb.w	r1, [r0], #1
   2e3ba:	292d      	cmp	r1, #45	; 0x2d
   2e3bc:	d006      	beq.n	2e3cc <__sccl+0x4a>
   2e3be:	295d      	cmp	r1, #93	; 0x5d
   2e3c0:	d0f3      	beq.n	2e3aa <__sccl+0x28>
   2e3c2:	b909      	cbnz	r1, 2e3c8 <__sccl+0x46>
   2e3c4:	4628      	mov	r0, r5
   2e3c6:	e7f0      	b.n	2e3aa <__sccl+0x28>
   2e3c8:	460b      	mov	r3, r1
   2e3ca:	e7f1      	b.n	2e3b0 <__sccl+0x2e>
   2e3cc:	786e      	ldrb	r6, [r5, #1]
   2e3ce:	2e5d      	cmp	r6, #93	; 0x5d
   2e3d0:	d0fa      	beq.n	2e3c8 <__sccl+0x46>
   2e3d2:	42b3      	cmp	r3, r6
   2e3d4:	dcf8      	bgt.n	2e3c8 <__sccl+0x46>
   2e3d6:	3502      	adds	r5, #2
   2e3d8:	4619      	mov	r1, r3
   2e3da:	3101      	adds	r1, #1
   2e3dc:	428e      	cmp	r6, r1
   2e3de:	5462      	strb	r2, [r4, r1]
   2e3e0:	dcfb      	bgt.n	2e3da <__sccl+0x58>
   2e3e2:	1af1      	subs	r1, r6, r3
   2e3e4:	1c58      	adds	r0, r3, #1
   2e3e6:	3901      	subs	r1, #1
   2e3e8:	42b3      	cmp	r3, r6
   2e3ea:	bfa8      	it	ge
   2e3ec:	2100      	movge	r1, #0
   2e3ee:	1843      	adds	r3, r0, r1
   2e3f0:	e7e0      	b.n	2e3b4 <__sccl+0x32>

0002e3f2 <__submore>:
   2e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e3f6:	460c      	mov	r4, r1
   2e3f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2e3fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e3fe:	4299      	cmp	r1, r3
   2e400:	d11a      	bne.n	2e438 <__submore+0x46>
   2e402:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2e406:	f7fa fd99 	bl	28f3c <_malloc_r>
   2e40a:	b918      	cbnz	r0, 2e414 <__submore+0x22>
   2e40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e414:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e418:	6360      	str	r0, [r4, #52]	; 0x34
   2e41a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2e41e:	63a3      	str	r3, [r4, #56]	; 0x38
   2e420:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2e424:	7083      	strb	r3, [r0, #2]
   2e426:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2e42a:	7043      	strb	r3, [r0, #1]
   2e42c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2e430:	7003      	strb	r3, [r0, #0]
   2e432:	6020      	str	r0, [r4, #0]
   2e434:	2000      	movs	r0, #0
   2e436:	e7eb      	b.n	2e410 <__submore+0x1e>
   2e438:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2e43a:	0077      	lsls	r7, r6, #1
   2e43c:	463a      	mov	r2, r7
   2e43e:	f000 f89c 	bl	2e57a <_realloc_r>
   2e442:	4605      	mov	r5, r0
   2e444:	2800      	cmp	r0, #0
   2e446:	d0e1      	beq.n	2e40c <__submore+0x1a>
   2e448:	eb00 0806 	add.w	r8, r0, r6
   2e44c:	4601      	mov	r1, r0
   2e44e:	4632      	mov	r2, r6
   2e450:	4640      	mov	r0, r8
   2e452:	f7ff fbb4 	bl	2dbbe <memcpy>
   2e456:	f8c4 8000 	str.w	r8, [r4]
   2e45a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2e45e:	e7e9      	b.n	2e434 <__submore+0x42>

0002e460 <abort>:
   2e460:	2006      	movs	r0, #6
   2e462:	b508      	push	{r3, lr}
   2e464:	f7fd f8f0 	bl	2b648 <raise>
   2e468:	2001      	movs	r0, #1
   2e46a:	f7ee fceb 	bl	1ce44 <_exit>

0002e46e <__sfmoreglue>:
   2e46e:	b570      	push	{r4, r5, r6, lr}
   2e470:	2268      	movs	r2, #104	; 0x68
   2e472:	1e4d      	subs	r5, r1, #1
   2e474:	460e      	mov	r6, r1
   2e476:	4355      	muls	r5, r2
   2e478:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2e47c:	f7fa fd5e 	bl	28f3c <_malloc_r>
   2e480:	4604      	mov	r4, r0
   2e482:	b140      	cbz	r0, 2e496 <__sfmoreglue+0x28>
   2e484:	2100      	movs	r1, #0
   2e486:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2e48a:	e9c0 1600 	strd	r1, r6, [r0]
   2e48e:	300c      	adds	r0, #12
   2e490:	60a0      	str	r0, [r4, #8]
   2e492:	f7ff fba1 	bl	2dbd8 <memset>
   2e496:	4620      	mov	r0, r4
   2e498:	bd70      	pop	{r4, r5, r6, pc}

0002e49a <_fwalk_reent>:
   2e49a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e49e:	4606      	mov	r6, r0
   2e4a0:	4688      	mov	r8, r1
   2e4a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2e4a6:	2700      	movs	r7, #0
   2e4a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2e4ac:	f1b9 0901 	subs.w	r9, r9, #1
   2e4b0:	d505      	bpl.n	2e4be <_fwalk_reent+0x24>
   2e4b2:	6824      	ldr	r4, [r4, #0]
   2e4b4:	2c00      	cmp	r4, #0
   2e4b6:	d1f7      	bne.n	2e4a8 <_fwalk_reent+0xe>
   2e4b8:	4638      	mov	r0, r7
   2e4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e4be:	89ab      	ldrh	r3, [r5, #12]
   2e4c0:	2b01      	cmp	r3, #1
   2e4c2:	d907      	bls.n	2e4d4 <_fwalk_reent+0x3a>
   2e4c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2e4c8:	3301      	adds	r3, #1
   2e4ca:	d003      	beq.n	2e4d4 <_fwalk_reent+0x3a>
   2e4cc:	4629      	mov	r1, r5
   2e4ce:	4630      	mov	r0, r6
   2e4d0:	47c0      	blx	r8
   2e4d2:	4307      	orrs	r7, r0
   2e4d4:	3568      	adds	r5, #104	; 0x68
   2e4d6:	e7e9      	b.n	2e4ac <_fwalk_reent+0x12>

0002e4d8 <__swhatbuf_r>:
   2e4d8:	b570      	push	{r4, r5, r6, lr}
   2e4da:	460e      	mov	r6, r1
   2e4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e4e0:	b096      	sub	sp, #88	; 0x58
   2e4e2:	4614      	mov	r4, r2
   2e4e4:	2900      	cmp	r1, #0
   2e4e6:	461d      	mov	r5, r3
   2e4e8:	da08      	bge.n	2e4fc <__swhatbuf_r+0x24>
   2e4ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   2e4ee:	2200      	movs	r2, #0
   2e4f0:	602a      	str	r2, [r5, #0]
   2e4f2:	061a      	lsls	r2, r3, #24
   2e4f4:	d410      	bmi.n	2e518 <__swhatbuf_r+0x40>
   2e4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e4fa:	e00e      	b.n	2e51a <__swhatbuf_r+0x42>
   2e4fc:	466a      	mov	r2, sp
   2e4fe:	f7fd f8bd 	bl	2b67c <_fstat_r>
   2e502:	2800      	cmp	r0, #0
   2e504:	dbf1      	blt.n	2e4ea <__swhatbuf_r+0x12>
   2e506:	9a01      	ldr	r2, [sp, #4]
   2e508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2e50c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2e510:	425a      	negs	r2, r3
   2e512:	415a      	adcs	r2, r3
   2e514:	602a      	str	r2, [r5, #0]
   2e516:	e7ee      	b.n	2e4f6 <__swhatbuf_r+0x1e>
   2e518:	2340      	movs	r3, #64	; 0x40
   2e51a:	2000      	movs	r0, #0
   2e51c:	6023      	str	r3, [r4, #0]
   2e51e:	b016      	add	sp, #88	; 0x58
   2e520:	bd70      	pop	{r4, r5, r6, pc}

0002e522 <__ascii_mbtowc>:
   2e522:	b082      	sub	sp, #8
   2e524:	b901      	cbnz	r1, 2e528 <__ascii_mbtowc+0x6>
   2e526:	a901      	add	r1, sp, #4
   2e528:	b142      	cbz	r2, 2e53c <__ascii_mbtowc+0x1a>
   2e52a:	b14b      	cbz	r3, 2e540 <__ascii_mbtowc+0x1e>
   2e52c:	7813      	ldrb	r3, [r2, #0]
   2e52e:	600b      	str	r3, [r1, #0]
   2e530:	7812      	ldrb	r2, [r2, #0]
   2e532:	1e10      	subs	r0, r2, #0
   2e534:	bf18      	it	ne
   2e536:	2001      	movne	r0, #1
   2e538:	b002      	add	sp, #8
   2e53a:	4770      	bx	lr
   2e53c:	4610      	mov	r0, r2
   2e53e:	e7fb      	b.n	2e538 <__ascii_mbtowc+0x16>
   2e540:	f06f 0001 	mvn.w	r0, #1
   2e544:	e7f8      	b.n	2e538 <__ascii_mbtowc+0x16>

0002e546 <memmove>:
   2e546:	4288      	cmp	r0, r1
   2e548:	b510      	push	{r4, lr}
   2e54a:	eb01 0402 	add.w	r4, r1, r2
   2e54e:	d902      	bls.n	2e556 <memmove+0x10>
   2e550:	4284      	cmp	r4, r0
   2e552:	4623      	mov	r3, r4
   2e554:	d807      	bhi.n	2e566 <memmove+0x20>
   2e556:	1e43      	subs	r3, r0, #1
   2e558:	42a1      	cmp	r1, r4
   2e55a:	d008      	beq.n	2e56e <memmove+0x28>
   2e55c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e560:	f803 2f01 	strb.w	r2, [r3, #1]!
   2e564:	e7f8      	b.n	2e558 <memmove+0x12>
   2e566:	4402      	add	r2, r0
   2e568:	4601      	mov	r1, r0
   2e56a:	428a      	cmp	r2, r1
   2e56c:	d100      	bne.n	2e570 <memmove+0x2a>
   2e56e:	bd10      	pop	{r4, pc}
   2e570:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2e574:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2e578:	e7f7      	b.n	2e56a <memmove+0x24>

0002e57a <_realloc_r>:
   2e57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e57e:	4680      	mov	r8, r0
   2e580:	4614      	mov	r4, r2
   2e582:	460e      	mov	r6, r1
   2e584:	b921      	cbnz	r1, 2e590 <_realloc_r+0x16>
   2e586:	4611      	mov	r1, r2
   2e588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e58c:	f7fa bcd6 	b.w	28f3c <_malloc_r>
   2e590:	b92a      	cbnz	r2, 2e59e <_realloc_r+0x24>
   2e592:	4625      	mov	r5, r4
   2e594:	f7fa fc68 	bl	28e68 <_free_r>
   2e598:	4628      	mov	r0, r5
   2e59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e59e:	f000 f852 	bl	2e646 <_malloc_usable_size_r>
   2e5a2:	4284      	cmp	r4, r0
   2e5a4:	4607      	mov	r7, r0
   2e5a6:	d802      	bhi.n	2e5ae <_realloc_r+0x34>
   2e5a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
   2e5ac:	d812      	bhi.n	2e5d4 <_realloc_r+0x5a>
   2e5ae:	4621      	mov	r1, r4
   2e5b0:	4640      	mov	r0, r8
   2e5b2:	f7fa fcc3 	bl	28f3c <_malloc_r>
   2e5b6:	4605      	mov	r5, r0
   2e5b8:	2800      	cmp	r0, #0
   2e5ba:	d0ed      	beq.n	2e598 <_realloc_r+0x1e>
   2e5bc:	42bc      	cmp	r4, r7
   2e5be:	4622      	mov	r2, r4
   2e5c0:	4631      	mov	r1, r6
   2e5c2:	bf28      	it	cs
   2e5c4:	463a      	movcs	r2, r7
   2e5c6:	f7ff fafa 	bl	2dbbe <memcpy>
   2e5ca:	4631      	mov	r1, r6
   2e5cc:	4640      	mov	r0, r8
   2e5ce:	f7fa fc4b 	bl	28e68 <_free_r>
   2e5d2:	e7e1      	b.n	2e598 <_realloc_r+0x1e>
   2e5d4:	4635      	mov	r5, r6
   2e5d6:	e7df      	b.n	2e598 <_realloc_r+0x1e>

0002e5d8 <_raise_r>:
   2e5d8:	291f      	cmp	r1, #31
   2e5da:	b538      	push	{r3, r4, r5, lr}
   2e5dc:	4604      	mov	r4, r0
   2e5de:	460d      	mov	r5, r1
   2e5e0:	d904      	bls.n	2e5ec <_raise_r+0x14>
   2e5e2:	2316      	movs	r3, #22
   2e5e4:	6003      	str	r3, [r0, #0]
   2e5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e5ea:	bd38      	pop	{r3, r4, r5, pc}
   2e5ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2e5ee:	b112      	cbz	r2, 2e5f6 <_raise_r+0x1e>
   2e5f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2e5f4:	b94b      	cbnz	r3, 2e60a <_raise_r+0x32>
   2e5f6:	4620      	mov	r0, r4
   2e5f8:	f000 f816 	bl	2e628 <_getpid_r>
   2e5fc:	462a      	mov	r2, r5
   2e5fe:	4601      	mov	r1, r0
   2e600:	4620      	mov	r0, r4
   2e602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e606:	f7fd b827 	b.w	2b658 <_kill_r>
   2e60a:	2b01      	cmp	r3, #1
   2e60c:	d00a      	beq.n	2e624 <_raise_r+0x4c>
   2e60e:	1c59      	adds	r1, r3, #1
   2e610:	d103      	bne.n	2e61a <_raise_r+0x42>
   2e612:	2316      	movs	r3, #22
   2e614:	6003      	str	r3, [r0, #0]
   2e616:	2001      	movs	r0, #1
   2e618:	e7e7      	b.n	2e5ea <_raise_r+0x12>
   2e61a:	2400      	movs	r4, #0
   2e61c:	4628      	mov	r0, r5
   2e61e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   2e622:	4798      	blx	r3
   2e624:	2000      	movs	r0, #0
   2e626:	e7e0      	b.n	2e5ea <_raise_r+0x12>

0002e628 <_getpid_r>:
   2e628:	f7fd bbd5 	b.w	2bdd6 <_getpid>

0002e62c <__ascii_wctomb>:
   2e62c:	4603      	mov	r3, r0
   2e62e:	4608      	mov	r0, r1
   2e630:	b141      	cbz	r1, 2e644 <__ascii_wctomb+0x18>
   2e632:	2aff      	cmp	r2, #255	; 0xff
   2e634:	d904      	bls.n	2e640 <__ascii_wctomb+0x14>
   2e636:	228a      	movs	r2, #138	; 0x8a
   2e638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e63c:	601a      	str	r2, [r3, #0]
   2e63e:	4770      	bx	lr
   2e640:	2001      	movs	r0, #1
   2e642:	700a      	strb	r2, [r1, #0]
   2e644:	4770      	bx	lr

0002e646 <_malloc_usable_size_r>:
   2e646:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2e64a:	1f18      	subs	r0, r3, #4
   2e64c:	2b00      	cmp	r3, #0
   2e64e:	bfbc      	itt	lt
   2e650:	580b      	ldrlt	r3, [r1, r0]
   2e652:	18c0      	addlt	r0, r0, r3
   2e654:	4770      	bx	lr
	...

0002e658 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2e658:	f7f2 bf3a 	b.w	214d0 <SystemInit>
