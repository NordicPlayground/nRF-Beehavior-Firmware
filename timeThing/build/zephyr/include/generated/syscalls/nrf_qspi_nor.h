
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_NRF_QSPI_NOR_H
#define Z_INCLUDE_SYSCALLS_NRF_QSPI_NOR_H


#include <tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#include <linker/sections.h>


#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#if !defined(__XCC__)
#pragma GCC diagnostic ignored "-Warray-bounds"
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_nrf_qspi_nor_base_clock_div_force(const struct device * dev, bool force);

__pinned_func
static inline void nrf_qspi_nor_base_clock_div_force(const struct device * dev, bool force)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&force, K_SYSCALL_NRF_QSPI_NOR_BASE_CLOCK_DIV_FORCE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_nrf_qspi_nor_base_clock_div_force(dev, force);
}

#if (CONFIG_TRACING_SYSCALL == 1)
#ifndef DISABLE_SYSCALL_TRACING

#define nrf_qspi_nor_base_clock_div_force(dev, force) do { 	sys_port_trace_syscall_enter(K_SYSCALL_NRF_QSPI_NOR_BASE_CLOCK_DIV_FORCE, nrf_qspi_nor_base_clock_div_force, dev, force); 	nrf_qspi_nor_base_clock_div_force(dev, force); 	sys_port_trace_syscall_exit(K_SYSCALL_NRF_QSPI_NOR_BASE_CLOCK_DIV_FORCE, nrf_qspi_nor_base_clock_div_force, dev, force); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
