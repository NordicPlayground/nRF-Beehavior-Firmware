
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20012658 	.word	0x20012658
   4:	00002e41 	.word	0x00002e41
   8:	0000675f 	.word	0x0000675f
   c:	00002e15 	.word	0x00002e15
  10:	00002e15 	.word	0x00002e15
  14:	00002e15 	.word	0x00002e15
  18:	00002e15 	.word	0x00002e15
  1c:	00002e15 	.word	0x00002e15
	...
  2c:	000029d1 	.word	0x000029d1
  30:	00002e15 	.word	0x00002e15
  34:	00000000 	.word	0x00000000
  38:	00002e15 	.word	0x00002e15
  3c:	00002e15 	.word	0x00002e15

00000040 <_irq_vector_table>:
  40:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  50:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  60:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  70:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  80:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  90:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  a0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  b0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  c0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  d0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  e0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
  f0:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
 100:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
 110:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
 120:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
 130:	00002a2d 00002a2d 00002a2d 00002a2d     -*..-*..-*..-*..
 140:	00002a2d                                -*..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__data_size+0x4>
     146:	b94a      	cbnz	r2, 15c <__data_size+0x4>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_BOOT_MAX_LINE_INPUT_LEN>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf0>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x30>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x26>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x86>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x82>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xaa>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc6>
     3c0:	d106      	bne.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd0>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x86>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x26>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     442:	4b3f      	ldr	r3, [pc, #252]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     444:	4a3f      	ldr	r2, [pc, #252]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     446:	4840      	ldr	r0, [pc, #256]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     448:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     44c:	2149      	movs	r1, #73	; 0x49
     44e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     452:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     456:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     45a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     45e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     462:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     466:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     46a:	f005 fe32 	bl	60d2 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     46e:	f000 f8af 	bl	5d0 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     472:	4836      	ldr	r0, [pc, #216]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     474:	f000 f87e 	bl	574 <flash_device_get_binding>
     478:	b928      	cbnz	r0, 486 <main+0x46>
        BOOT_LOG_ERR("Flash device %s not found",
     47a:	2145      	movs	r1, #69	; 0x45
     47c:	4a33      	ldr	r2, [pc, #204]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     47e:	4834      	ldr	r0, [pc, #208]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     480:	f005 fe27 	bl	60d2 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     484:	e7fe      	b.n	484 <main+0x44>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     486:	4833      	ldr	r0, [pc, #204]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     488:	f004 ff66 	bl	5358 <z_impl_device_get_binding>
     48c:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     48e:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     490:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     492:	6813      	ldr	r3, [r2, #0]
     494:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     498:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     49a:	680b      	ldr	r3, [r1, #0]
     49c:	f44f 7288 	mov.w	r2, #272	; 0x110
     4a0:	211a      	movs	r1, #26
     4a2:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     4a4:	68a3      	ldr	r3, [r4, #8]
     4a6:	4620      	mov	r0, r4
     4a8:	685b      	ldr	r3, [r3, #4]
     4aa:	a901      	add	r1, sp, #4
     4ac:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     4ae:	b990      	cbnz	r0, 4d6 <FIH_LABEL_FIH_CALL_START_511>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     4b0:	9b01      	ldr	r3, [sp, #4]
     4b2:	015a      	lsls	r2, r3, #5
     4b4:	d40f      	bmi.n	4d6 <FIH_LABEL_FIH_CALL_START_511>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4be:	b10b      	cbz	r3, 4c4 <main+0x84>
     4c0:	07db      	lsls	r3, r3, #31
     4c2:	d508      	bpl.n	4d6 <FIH_LABEL_FIH_CALL_START_511>
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     4c4:	2149      	movs	r1, #73	; 0x49
     4c6:	4824      	ldr	r0, [pc, #144]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     4c8:	f005 fe03 	bl	60d2 <z_log_minimal_printk>
        rc = boot_console_init();
     4cc:	f001 fd5a 	bl	1f84 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4d0:	4822      	ldr	r0, [pc, #136]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)
     4d2:	f002 f8d9 	bl	2688 <boot_serial_start>

000004d6 <FIH_LABEL_FIH_CALL_START_511>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4d6:	a801      	add	r0, sp, #4
     4d8:	f000 fcda 	bl	e90 <boot_go>

000004dc <FIH_LABEL_FIH_CALL_END_524>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4dc:	4b20      	ldr	r3, [pc, #128]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	4283      	cmp	r3, r0
     4e2:	d004      	beq.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
        BOOT_LOG_ERR("Unable to find bootable image");
     4e4:	2145      	movs	r1, #69	; 0x45
     4e6:	481f      	ldr	r0, [pc, #124]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4e8:	f005 fdf3 	bl	60d2 <z_log_minimal_printk>
        FIH_PANIC;
     4ec:	e7fe      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4ee:	9a03      	ldr	r2, [sp, #12]
     4f0:	2149      	movs	r1, #73	; 0x49
     4f2:	481d      	ldr	r0, [pc, #116]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     4f4:	f005 fded 	bl	60d2 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     4f8:	2149      	movs	r1, #73	; 0x49
     4fa:	481c      	ldr	r0, [pc, #112]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     4fc:	f005 fde9 	bl	60d2 <z_log_minimal_printk>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     500:	4669      	mov	r1, sp
     502:	f89d 0008 	ldrb.w	r0, [sp, #8]
     506:	f000 f841 	bl	58c <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     50a:	9b00      	ldr	r3, [sp, #0]
     50c:	9c03      	ldr	r4, [sp, #12]
     50e:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     510:	9b01      	ldr	r3, [sp, #4]
     512:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     514:	f000 ff64 	bl	13e0 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     518:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     51a:	f04f 0220 	mov.w	r2, #32
     51e:	f3ef 8311 	mrs	r3, BASEPRI
     522:	f382 8812 	msr	BASEPRI_MAX, r2
     526:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     52a:	5963      	ldr	r3, [r4, r5]
     52c:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     530:	6873      	ldr	r3, [r6, #4]
     532:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     534:	2145      	movs	r1, #69	; 0x45
     536:	480e      	ldr	r0, [pc, #56]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     538:	f005 fdcb 	bl	60d2 <z_log_minimal_printk>
    while (1)
     53c:	e7fe      	b.n	53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
     53e:	bf00      	nop
     540:	50018000 	.word	0x50018000
     544:	6e524635 	.word	0x6e524635
     548:	0000903b 	.word	0x0000903b
     54c:	00009054 	.word	0x00009054
     550:	00009067 	.word	0x00009067
     554:	00009086 	.word	0x00009086
     558:	0000908d 	.word	0x0000908d
     55c:	00008c68 	.word	0x00008c68
     560:	2000c71c 	.word	0x2000c71c
     564:	000090b1 	.word	0x000090b1
     568:	000090d4 	.word	0x000090d4
     56c:	00009103 	.word	0x00009103
     570:	00009128 	.word	0x00009128

00000574 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     574:	b510      	push	{r4, lr}
    if (!flash_dev) {
     576:	4c04      	ldr	r4, [pc, #16]	; (588 <flash_device_get_binding+0x14>)
     578:	6823      	ldr	r3, [r4, #0]
     57a:	b913      	cbnz	r3, 582 <flash_device_get_binding+0xe>
     57c:	f004 feec 	bl	5358 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     580:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     582:	6820      	ldr	r0, [r4, #0]
     584:	bd10      	pop	{r4, pc}
     586:	bf00      	nop
     588:	2000c718 	.word	0x2000c718

0000058c <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     58c:	4602      	mov	r2, r0
{
     58e:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     590:	b138      	cbz	r0, 5a2 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     592:	4805      	ldr	r0, [pc, #20]	; (5a8 <flash_device_base+0x1c>)
     594:	2300      	movs	r3, #0
     596:	2145      	movs	r1, #69	; 0x45
     598:	f005 fd9b 	bl	60d2 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     59c:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     5a0:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     5a2:	6008      	str	r0, [r1, #0]
    return 0;
     5a4:	e7fc      	b.n	5a0 <flash_device_base+0x14>
     5a6:	bf00      	nop
     5a8:	0000914b 	.word	0x0000914b

000005ac <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5ae:	4a07      	ldr	r2, [pc, #28]	; (5cc <flash_area_sector_from_off+0x20>)
{
     5b0:	4603      	mov	r3, r0
     5b2:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5b4:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     5b6:	4619      	mov	r1, r3
     5b8:	aa01      	add	r2, sp, #4
     5ba:	f006 fa54 	bl	6a66 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     5be:	b918      	cbnz	r0, 5c8 <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     5c0:	9b01      	ldr	r3, [sp, #4]
     5c2:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     5c4:	9b02      	ldr	r3, [sp, #8]
     5c6:	6063      	str	r3, [r4, #4]

    return rc;
}
     5c8:	b004      	add	sp, #16
     5ca:	bd10      	pop	{r4, pc}
     5cc:	2000c718 	.word	0x2000c718

000005d0 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5d4:	4801      	ldr	r0, [pc, #4]	; (5dc <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN>)
     5d6:	f003 bf59 	b.w	448c <mbedtls_memory_buffer_alloc_init>
     5da:	bf00      	nop
     5dc:	2000e08e 	.word	0x2000e08e

000005e0 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     5e4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 7e0 <FIH_LABEL_FIH_CALL_END_644+0x34>
{
     5e8:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5ea:	a838      	add	r0, sp, #224	; 0xe0
     5ec:	4617      	mov	r7, r2
     5ee:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     5f2:	461d      	mov	r5, r3
     5f4:	f8dd b208 	ldr.w	fp, [sp, #520]	; 0x208
    fih_int valid_signature = FIH_FAILURE;
     5f8:	f8d9 6000 	ldr.w	r6, [r9]
     5fc:	f008 f885 	bl	870a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     600:	2100      	movs	r1, #0
     602:	a838      	add	r0, sp, #224	; 0xe0
     604:	f004 f848 	bl	4698 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     608:	f8cd 900c 	str.w	r9, [sp, #12]
     60c:	b13c      	cbz	r4, 61e <bootutil_img_validate+0x3e>
     60e:	f1b8 0f00 	cmp.w	r8, #0
     612:	dd04      	ble.n	61e <bootutil_img_validate+0x3e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     614:	4642      	mov	r2, r8
     616:	4621      	mov	r1, r4
     618:	a838      	add	r0, sp, #224	; 0xe0
     61a:	f008 f87a 	bl	8712 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     61e:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     622:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     624:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     628:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     62e:	45c8      	cmp	r8, r9
     630:	d84b      	bhi.n	6ca <FIH_LABEL_FIH_CALL_END_310+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     632:	a90d      	add	r1, sp, #52	; 0x34
     634:	a838      	add	r0, sp, #224	; 0xe0
     636:	f008 f8a9 	bl	878c <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     63a:	9b86      	ldr	r3, [sp, #536]	; 0x218
     63c:	b123      	cbz	r3, 648 <bootutil_img_validate+0x68>
        memcpy(out_hash, hash, 32);
     63e:	2220      	movs	r2, #32
     640:	4618      	mov	r0, r3
     642:	a90d      	add	r1, sp, #52	; 0x34
     644:	f006 f8d5 	bl	67f2 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     648:	2300      	movs	r3, #0
     64a:	462a      	mov	r2, r5
     64c:	9300      	str	r3, [sp, #0]
     64e:	4639      	mov	r1, r7
     650:	f64f 73ff 	movw	r3, #65535	; 0xffff
     654:	a807      	add	r0, sp, #28
     656:	f005 f9cb 	bl	59f0 <bootutil_tlv_iter_begin>
    if (rc) {
     65a:	4604      	mov	r4, r0
     65c:	2800      	cmp	r0, #0
     65e:	f040 80b5 	bne.w	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
    int sha256_valid = 0;
     662:	4680      	mov	r8, r0
    int key_id = -1;
     664:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     668:	f8df 9178 	ldr.w	r9, [pc, #376]	; 7e4 <FIH_LABEL_FIH_CALL_END_644+0x38>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     66c:	f10d 0316 	add.w	r3, sp, #22
     670:	aa05      	add	r2, sp, #20
     672:	a906      	add	r1, sp, #24
     674:	a807      	add	r0, sp, #28
     676:	f005 fa07 	bl	5a88 <bootutil_tlv_iter_next>
        if (rc < 0) {
     67a:	1e04      	subs	r4, r0, #0
     67c:	f2c0 80a6 	blt.w	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
        } else if (rc > 0) {
     680:	f040 8097 	bne.w	7b2 <FIH_LABEL_FIH_CALL_END_644+0x6>
        if (type == IMAGE_TLV_SHA256) {
     684:	f8bd a016 	ldrh.w	sl, [sp, #22]
     688:	f1ba 0f10 	cmp.w	sl, #16
     68c:	d134      	bne.n	6f8 <FIH_LABEL_FIH_CALL_END_310+0x3e>
            if (len != sizeof(hash)) {
     68e:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     692:	f1b8 0f20 	cmp.w	r8, #32
     696:	f040 8097 	bne.w	7c8 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     69a:	4643      	mov	r3, r8
     69c:	4628      	mov	r0, r5
     69e:	9906      	ldr	r1, [sp, #24]
     6a0:	aa38      	add	r2, sp, #224	; 0xe0
     6a2:	f005 fd24 	bl	60ee <flash_area_read>
            if (rc) {
     6a6:	4604      	mov	r4, r0
     6a8:	2800      	cmp	r0, #0
     6aa:	f040 808f 	bne.w	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>

000006ae <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6ae:	4642      	mov	r2, r8
     6b0:	a938      	add	r1, sp, #224	; 0xe0
     6b2:	a80d      	add	r0, sp, #52	; 0x34
     6b4:	f005 fa33 	bl	5b1e <boot_fih_memequal>
     6b8:	4604      	mov	r4, r0

000006ba <FIH_LABEL_FIH_CALL_END_310>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     6ba:	4b47      	ldr	r3, [pc, #284]	; (7d8 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
     6bc:	681b      	ldr	r3, [r3, #0]
     6be:	4283      	cmp	r3, r0
     6c0:	f040 8084 	bne.w	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
            sha256_valid = 1;
     6c4:	f04f 0801 	mov.w	r8, #1
     6c8:	e7d0      	b.n	66c <bootutil_img_validate+0x8c>
        blk_sz = size - off;
     6ca:	9a83      	ldr	r2, [sp, #524]	; 0x20c
     6cc:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     6d0:	429a      	cmp	r2, r3
     6d2:	bf28      	it	cs
     6d4:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6d6:	4649      	mov	r1, r9
     6d8:	4613      	mov	r3, r2
     6da:	4692      	mov	sl, r2
     6dc:	4628      	mov	r0, r5
     6de:	465a      	mov	r2, fp
     6e0:	f005 fd05 	bl	60ee <flash_area_read>
        if (rc) {
     6e4:	4604      	mov	r4, r0
     6e6:	2800      	cmp	r0, #0
     6e8:	d170      	bne.n	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6ea:	4652      	mov	r2, sl
     6ec:	4659      	mov	r1, fp
     6ee:	a838      	add	r0, sp, #224	; 0xe0
     6f0:	f008 f80f 	bl	8712 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6f4:	44d1      	add	r9, sl
     6f6:	e79a      	b.n	62e <bootutil_img_validate+0x4e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6f8:	f1ba 0f01 	cmp.w	sl, #1
     6fc:	d136      	bne.n	76c <FIH_LABEL_FIH_CALL_END_310+0xb2>
            if (len > 32) {
     6fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     702:	2b20      	cmp	r3, #32
     704:	d860      	bhi.n	7c8 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     706:	4628      	mov	r0, r5
     708:	9906      	ldr	r1, [sp, #24]
     70a:	aa38      	add	r2, sp, #224	; 0xe0
     70c:	f005 fcef 	bl	60ee <flash_area_read>
            if (rc) {
     710:	4604      	mov	r4, r0
     712:	2800      	cmp	r0, #0
     714:	d15a      	bne.n	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
            key_id = bootutil_find_key(buf, len);
     716:	f89d a014 	ldrb.w	sl, [sp, #20]
    if (keyhash_len > 32) {
     71a:	f1ba 0f20 	cmp.w	sl, #32
     71e:	d903      	bls.n	728 <FIH_LABEL_FIH_CALL_END_310+0x6e>
        return -1;
     720:	f04f 34ff 	mov.w	r4, #4294967295
            key_id = bootutil_find_key(buf, len);
     724:	4627      	mov	r7, r4
     726:	e7a1      	b.n	66c <bootutil_img_validate+0x8c>
    for (i = 0; i < bootutil_key_cnt; i++) {
     728:	f8d9 3000 	ldr.w	r3, [r9]
     72c:	4f2b      	ldr	r7, [pc, #172]	; (7dc <FIH_LABEL_FIH_CALL_END_644+0x30>)
     72e:	9302      	str	r3, [sp, #8]
     730:	9b02      	ldr	r3, [sp, #8]
     732:	429c      	cmp	r4, r3
     734:	daf4      	bge.n	720 <FIH_LABEL_FIH_CALL_END_310+0x66>
    mbedtls_sha256_init(ctx);
     736:	a81d      	add	r0, sp, #116	; 0x74
     738:	f007 ffe7 	bl	870a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     73c:	2100      	movs	r1, #0
     73e:	a81d      	add	r0, sp, #116	; 0x74
     740:	f003 ffaa 	bl	4698 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     744:	687b      	ldr	r3, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     746:	a81d      	add	r0, sp, #116	; 0x74
     748:	681a      	ldr	r2, [r3, #0]
     74a:	f857 1b08 	ldr.w	r1, [r7], #8
     74e:	f007 ffe0 	bl	8712 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     752:	a915      	add	r1, sp, #84	; 0x54
     754:	a81d      	add	r0, sp, #116	; 0x74
     756:	f008 f819 	bl	878c <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     75a:	4652      	mov	r2, sl
     75c:	a938      	add	r1, sp, #224	; 0xe0
     75e:	a815      	add	r0, sp, #84	; 0x54
     760:	f006 f820 	bl	67a4 <memcmp>
     764:	2800      	cmp	r0, #0
     766:	d0dd      	beq.n	724 <FIH_LABEL_FIH_CALL_END_310+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     768:	3401      	adds	r4, #1
     76a:	e7e1      	b.n	730 <FIH_LABEL_FIH_CALL_END_310+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     76c:	f1ba 0f20 	cmp.w	sl, #32
     770:	f47f af7c 	bne.w	66c <bootutil_img_validate+0x8c>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     774:	2f00      	cmp	r7, #0
     776:	db19      	blt.n	7ac <FIH_LABEL_FIH_CALL_END_644>
     778:	f8d9 3000 	ldr.w	r3, [r9]
     77c:	42bb      	cmp	r3, r7
     77e:	dd15      	ble.n	7ac <FIH_LABEL_FIH_CALL_END_644>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     780:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     788:	d11e      	bne.n	7c8 <FIH_LABEL_FIH_CALL_END_644+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     78a:	4628      	mov	r0, r5
     78c:	9906      	ldr	r1, [sp, #24]
     78e:	aa38      	add	r2, sp, #224	; 0xe0
     790:	f005 fcad 	bl	60ee <flash_area_read>
            if (rc) {
     794:	4604      	mov	r4, r0
     796:	b9c8      	cbnz	r0, 7cc <FIH_LABEL_FIH_CALL_END_644+0x20>

00000798 <FIH_LABEL_FIH_CALL_START_622>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     798:	b2ff      	uxtb	r7, r7
     79a:	4651      	mov	r1, sl
     79c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7a0:	9700      	str	r7, [sp, #0]
     7a2:	aa38      	add	r2, sp, #224	; 0xe0
     7a4:	a80d      	add	r0, sp, #52	; 0x34
     7a6:	f000 f81f 	bl	7e8 <bootutil_verify_sig>
     7aa:	4606      	mov	r6, r0

000007ac <FIH_LABEL_FIH_CALL_END_644>:
                key_id = -1;
     7ac:	f04f 37ff 	mov.w	r7, #4294967295
     7b0:	e75c      	b.n	66c <bootutil_img_validate+0x8c>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     7b2:	f1b8 0f00 	cmp.w	r8, #0
     7b6:	d00d      	beq.n	7d4 <FIH_LABEL_FIH_CALL_END_644+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	42b3      	cmp	r3, r6
     7be:	d001      	beq.n	7c4 <FIH_LABEL_FIH_CALL_END_644+0x18>
        return FIH_FAILURE;
     7c0:	9b03      	ldr	r3, [sp, #12]
     7c2:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     7c4:	4634      	mov	r4, r6
     7c6:	e001      	b.n	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
     7c8:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     7cc:	4620      	mov	r0, r4
     7ce:	b079      	add	sp, #484	; 0x1e4
     7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7d4:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     7d6:	e7f9      	b.n	7cc <FIH_LABEL_FIH_CALL_END_644+0x20>
     7d8:	2000c71c 	.word	0x2000c71c
     7dc:	00008c74 	.word	0x00008c74
     7e0:	2000c500 	.word	0x2000c500
     7e4:	00008c70 	.word	0x00008c70

000007e8 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ec:	4698      	mov	r8, r3
     7ee:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     7f2:	4b6b      	ldr	r3, [pc, #428]	; (9a0 <FIH_LABEL_FIH_CALL_END_686+0x4>)
{
     7f4:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     7f6:	a827      	add	r0, sp, #156	; 0x9c
{
     7f8:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     7fc:	468a      	mov	sl, r1
     7fe:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     800:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     802:	f007 ff3f 	bl	8684 <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     806:	4b67      	ldr	r3, [pc, #412]	; (9a4 <FIH_LABEL_FIH_CALL_END_686+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     808:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     80a:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     80e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     812:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     814:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     816:	6819      	ldr	r1, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     818:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     81a:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     81c:	2330      	movs	r3, #48	; 0x30
     81e:	4621      	mov	r1, r4
     820:	f006 fbe1 	bl	6fe6 <mbedtls_asn1_get_tag>
     824:	bb68      	cbnz	r0, 882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    if (*p + len != end) {
     826:	9b02      	ldr	r3, [sp, #8]
     828:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     82a:	4413      	add	r3, r2
     82c:	429c      	cmp	r4, r3
     82e:	d128      	bne.n	882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     830:	4621      	mov	r1, r4
     832:	aa29      	add	r2, sp, #164	; 0xa4
     834:	a802      	add	r0, sp, #8
     836:	f006 fbea 	bl	700e <mbedtls_asn1_get_mpi>
     83a:	bb10      	cbnz	r0, 882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     83c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     840:	465a      	mov	r2, fp
     842:	4621      	mov	r1, r4
     844:	a802      	add	r0, sp, #8
     846:	f006 fbe2 	bl	700e <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     84a:	4606      	mov	r6, r0
     84c:	b9c8      	cbnz	r0, 882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     84e:	a829      	add	r0, sp, #164	; 0xa4
     850:	f007 f819 	bl	7886 <mbedtls_mpi_size>
    if (*p != end) {
     854:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     856:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     858:	429c      	cmp	r4, r3
     85a:	d112      	bne.n	882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     85c:	4633      	mov	r3, r6
     85e:	4632      	mov	r2, r6
     860:	e9cd 6b00 	strd	r6, fp, [sp]
     864:	a929      	add	r1, sp, #164	; 0xa4
     866:	a827      	add	r0, sp, #156	; 0x9c
     868:	f007 fec8 	bl	85fc <mbedtls_rsa_import>
    if (rc != 0) {
     86c:	b948      	cbnz	r0, 882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    rc = mbedtls_rsa_check_pubkey(ctx);
     86e:	a827      	add	r0, sp, #156	; 0x9c
     870:	f003 feb0 	bl	45d4 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     874:	b928      	cbnz	r0, 882 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x82>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     876:	a829      	add	r0, sp, #164	; 0xa4
     878:	f007 f805 	bl	7886 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     87c:	4580      	cmp	r8, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     87e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     880:	d00a      	beq.n	898 <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     882:	a827      	add	r0, sp, #156	; 0x9c
     884:	f007 ff08 	bl	8698 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     888:	a827      	add	r0, sp, #156	; 0x9c
     88a:	f007 ff05 	bl	8698 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     88e:	4628      	mov	r0, r5
     890:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000898 <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     898:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     89c:	d002      	beq.n	8a4 <FIH_LABEL_FIH_CALL_END_290+0x2>
     89e:	f04f 35ff 	mov.w	r5, #4294967295

000008a2 <FIH_LABEL_FIH_CALL_END_290>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8a2:	e7f1      	b.n	888 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x88>
    if (hlen != PSS_HLEN) {
     8a4:	f1ba 0f20 	cmp.w	sl, #32
     8a8:	d1f9      	bne.n	89e <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     8aa:	4649      	mov	r1, r9
     8ac:	aa8a      	add	r2, sp, #552	; 0x228
     8ae:	a827      	add	r0, sp, #156	; 0x9c
     8b0:	f003 feb4 	bl	461c <mbedtls_rsa_public>
     8b4:	4604      	mov	r4, r0
     8b6:	2800      	cmp	r0, #0
     8b8:	d1f1      	bne.n	89e <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8ba:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     8be:	2bbc      	cmp	r3, #188	; 0xbc
     8c0:	d1ed      	bne.n	89e <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8c2:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     8c6:	26df      	movs	r6, #223	; 0xdf
     8c8:	4645      	mov	r5, r8
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8ca:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     8cc:	a80c      	add	r0, sp, #48	; 0x30
     8ce:	f007 ff1c 	bl	870a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8d2:	2100      	movs	r1, #0
     8d4:	a80c      	add	r0, sp, #48	; 0x30
     8d6:	f003 fedf 	bl	4698 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8da:	2220      	movs	r2, #32
     8dc:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8e0:	a80c      	add	r0, sp, #48	; 0x30
     8e2:	f007 ff16 	bl	8712 <mbedtls_sha256_update>
     8e6:	2204      	movs	r2, #4
     8e8:	a903      	add	r1, sp, #12
     8ea:	a80c      	add	r0, sp, #48	; 0x30
     8ec:	f007 ff11 	bl	8712 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     8f0:	a904      	add	r1, sp, #16
     8f2:	a80c      	add	r0, sp, #48	; 0x30
     8f4:	f007 ff4a 	bl	878c <mbedtls_sha256_finish>
        if (bytes > count)
     8f8:	2e1f      	cmp	r6, #31
     8fa:	bfd4      	ite	le
     8fc:	46b1      	movle	r9, r6
     8fe:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     902:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     906:	4640      	mov	r0, r8
        counter[3]++;
     908:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     90a:	464a      	mov	r2, r9
     90c:	a904      	add	r1, sp, #16
        count -= bytes;
     90e:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     912:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     916:	f005 ff6c 	bl	67f2 <memcpy>
    while (count > 0) {
     91a:	2e00      	cmp	r6, #0
        mask += bytes;
     91c:	44c8      	add	r8, r9
    while (count > 0) {
     91e:	dcd5      	bgt.n	8cc <FIH_LABEL_FIH_CALL_END_290+0x2a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     920:	4628      	mov	r0, r5
     922:	462a      	mov	r2, r5
     924:	23df      	movs	r3, #223	; 0xdf
     926:	ae8a      	add	r6, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     92e:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     930:	ea81 010c 	eor.w	r1, r1, ip
     934:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     938:	d1f6      	bne.n	928 <FIH_LABEL_FIH_CALL_END_290+0x86>
    db_mask[0] &= 0x7F;
     93a:	782b      	ldrb	r3, [r5, #0]
     93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     940:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     942:	f810 6b01 	ldrb.w	r6, [r0], #1
     946:	2e00      	cmp	r6, #0
     948:	d1a9      	bne.n	89e <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     94a:	3401      	adds	r4, #1
     94c:	2cbe      	cmp	r4, #190	; 0xbe
     94e:	d1f8      	bne.n	942 <FIH_LABEL_FIH_CALL_END_290+0xa0>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     950:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     954:	2b01      	cmp	r3, #1
     956:	d1a2      	bne.n	89e <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     958:	a80c      	add	r0, sp, #48	; 0x30
     95a:	f007 fed6 	bl	870a <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     95e:	4631      	mov	r1, r6
     960:	a80c      	add	r0, sp, #48	; 0x30
     962:	f003 fe99 	bl	4698 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     966:	2208      	movs	r2, #8
     968:	490f      	ldr	r1, [pc, #60]	; (9a8 <FIH_LABEL_FIH_CALL_END_686+0xc>)
     96a:	a80c      	add	r0, sp, #48	; 0x30
     96c:	f007 fed1 	bl	8712 <mbedtls_sha256_update>
     970:	4639      	mov	r1, r7
     972:	2220      	movs	r2, #32
     974:	a80c      	add	r0, sp, #48	; 0x30
     976:	f007 fecc 	bl	8712 <mbedtls_sha256_update>
     97a:	2220      	movs	r2, #32
     97c:	f20d 2107 	addw	r1, sp, #519	; 0x207
     980:	a80c      	add	r0, sp, #48	; 0x30
     982:	f007 fec6 	bl	8712 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     986:	a904      	add	r1, sp, #16
     988:	a80c      	add	r0, sp, #48	; 0x30
     98a:	f007 feff 	bl	878c <mbedtls_sha256_finish>

0000098e <FIH_LABEL_FIH_CALL_START_665>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     98e:	2220      	movs	r2, #32
     990:	f20d 3107 	addw	r1, sp, #775	; 0x307
     994:	a804      	add	r0, sp, #16
     996:	f005 f8c2 	bl	5b1e <boot_fih_memequal>
     99a:	4605      	mov	r5, r0

0000099c <FIH_LABEL_FIH_CALL_END_686>:
    if (rc) {
     99c:	e781      	b.n	8a2 <FIH_LABEL_FIH_CALL_END_290>
     99e:	bf00      	nop
     9a0:	2000c500 	.word	0x2000c500
     9a4:	00008c74 	.word	0x00008c74
     9a8:	00009171 	.word	0x00009171

000009ac <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     9b0:	2302      	movs	r3, #2
{
     9b2:	b086      	sub	sp, #24
     9b4:	460d      	mov	r5, r1
     9b6:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9b8:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9ba:	f8df 8068 	ldr.w	r8, [pc, #104]	; a24 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     9be:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     9c2:	f817 0b01 	ldrb.w	r0, [r7], #1
     9c6:	a901      	add	r1, sp, #4
     9c8:	f001 f9d8 	bl	1d7c <flash_area_open>
        if (rc != 0) {
     9cc:	4604      	mov	r4, r0
     9ce:	b9a0      	cbnz	r0, 9fa <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     9d0:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9d2:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     9d4:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9d6:	aa02      	add	r2, sp, #8
     9d8:	3910      	subs	r1, #16
     9da:	f005 fb88 	bl	60ee <flash_area_read>
     9de:	4604      	mov	r4, r0
        flash_area_close(*fap);
     9e0:	9801      	ldr	r0, [sp, #4]
     9e2:	f005 fb83 	bl	60ec <flash_area_close>
        if (rc != 0) {
     9e6:	b944      	cbnz	r4, 9fa <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9e8:	2210      	movs	r2, #16
     9ea:	4641      	mov	r1, r8
     9ec:	a802      	add	r0, sp, #8
     9ee:	f005 fed9 	bl	67a4 <memcmp>
     9f2:	b140      	cbz	r0, a06 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9f4:	b12e      	cbz	r6, a02 <boot_read_swap_size+0x56>
    return -1;
     9f6:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     9fa:	4620      	mov	r0, r4
     9fc:	b006      	add	sp, #24
     9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a02:	2601      	movs	r6, #1
     a04:	e7dd      	b.n	9c2 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     a06:	9801      	ldr	r0, [sp, #4]
     a08:	f006 fa0a 	bl	6e20 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     a0c:	2304      	movs	r3, #4
     a0e:	f1a0 0108 	sub.w	r1, r0, #8
     a12:	462a      	mov	r2, r5
     a14:	9801      	ldr	r0, [sp, #4]
     a16:	f005 fb6a 	bl	60ee <flash_area_read>
     a1a:	4604      	mov	r4, r0
        flash_area_close(fap);
     a1c:	9801      	ldr	r0, [sp, #4]
     a1e:	f005 fb65 	bl	60ec <flash_area_close>
     a22:	e7ea      	b.n	9fa <boot_read_swap_size+0x4e>
     a24:	00008e7c 	.word	0x00008e7c

00000a28 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     a2c:	4b38      	ldr	r3, [pc, #224]	; (b10 <FIH_LABEL_FIH_CALL_END_475+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     a2e:	b088      	sub	sp, #32
     a30:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a32:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     a34:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     a36:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a38:	f004 ffcf 	bl	59da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a3c:	a906      	add	r1, sp, #24
     a3e:	b2c0      	uxtb	r0, r0
     a40:	f001 f99c 	bl	1d7c <flash_area_open>
    if (rc != 0) {
     a44:	2800      	cmp	r0, #0
     a46:	d157      	bne.n	af8 <FIH_LABEL_FIH_CALL_END_475+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a48:	4629      	mov	r1, r5
     a4a:	f004 ffc6 	bl	59da <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a4e:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a50:	a907      	add	r1, sp, #28
     a52:	b2c0      	uxtb	r0, r0
     a54:	fb04 6405 	mla	r4, r4, r5, r6
     a58:	f001 f990 	bl	1d7c <flash_area_open>
    if (rc != 0) {
     a5c:	2800      	cmp	r0, #0
     a5e:	d036      	beq.n	ace <FIH_LABEL_FIH_CALL_END_475+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a60:	f04f 082c 	mov.w	r8, #44	; 0x2c
     a64:	fb08 f805 	mul.w	r8, r8, r5
     a68:	eb06 0708 	add.w	r7, r6, r8
     a6c:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a6e:	f011 0110 	ands.w	r1, r1, #16
     a72:	d137      	bne.n	ae4 <FIH_LABEL_FIH_CALL_END_475+0x54>

00000a74 <FIH_LABEL_FIH_CALL_START_419>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a74:	f44f 7380 	mov.w	r3, #256	; 0x100
     a78:	9301      	str	r3, [sp, #4]
     a7a:	4b26      	ldr	r3, [pc, #152]	; (b14 <FIH_LABEL_FIH_CALL_END_475+0x84>)
     a7c:	4622      	mov	r2, r4
     a7e:	9300      	str	r3, [sp, #0]
     a80:	4608      	mov	r0, r1
     a82:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a86:	9b06      	ldr	r3, [sp, #24]
     a88:	9102      	str	r1, [sp, #8]
     a8a:	f7ff fda9 	bl	5e0 <bootutil_img_validate>
     a8e:	4604      	mov	r4, r0

00000a90 <FIH_LABEL_FIH_CALL_END_475>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a90:	4b21      	ldr	r3, [pc, #132]	; (b18 <FIH_LABEL_FIH_CALL_END_475+0x88>)
     a92:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a96:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a98:	429a      	cmp	r2, r3
     a9a:	d10c      	bne.n	ab6 <FIH_LABEL_FIH_CALL_END_475+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a9c:	893a      	ldrh	r2, [r7, #8]
     a9e:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     aa0:	43d1      	mvns	r1, r2
     aa2:	428b      	cmp	r3, r1
     aa4:	d807      	bhi.n	ab6 <FIH_LABEL_FIH_CALL_END_475+0x26>
        *dest = a + b;
     aa6:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     aa8:	6882      	ldr	r2, [r0, #8]
     aaa:	4293      	cmp	r3, r2
     aac:	d203      	bcs.n	ab6 <FIH_LABEL_FIH_CALL_END_475+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     aae:	4b1b      	ldr	r3, [pc, #108]	; (b1c <FIH_LABEL_FIH_CALL_END_475+0x8c>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	42a3      	cmp	r3, r4
     ab4:	d01d      	beq.n	af2 <FIH_LABEL_FIH_CALL_END_475+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     ab6:	b345      	cbz	r5, b0a <FIH_LABEL_FIH_CALL_END_475+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     ab8:	6882      	ldr	r2, [r0, #8]
     aba:	2100      	movs	r1, #0
     abc:	f005 fb66 	bl	618c <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ac0:	4a17      	ldr	r2, [pc, #92]	; (b20 <FIH_LABEL_FIH_CALL_END_475+0x90>)
     ac2:	2145      	movs	r1, #69	; 0x45
     ac4:	4817      	ldr	r0, [pc, #92]	; (b24 <FIH_LABEL_FIH_CALL_END_475+0x94>)
     ac6:	f005 fb04 	bl	60d2 <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     aca:	2401      	movs	r4, #1
     acc:	e011      	b.n	af2 <FIH_LABEL_FIH_CALL_END_475+0x62>
    erased_val = flash_area_erased_val(fap);
     ace:	9807      	ldr	r0, [sp, #28]
     ad0:	f005 fb94 	bl	61fc <flash_area_erased_val>
     ad4:	4607      	mov	r7, r0
    flash_area_close(fap);
     ad6:	9807      	ldr	r0, [sp, #28]
     ad8:	f005 fb08 	bl	60ec <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     adc:	1e63      	subs	r3, r4, #1
     ade:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     ae0:	4293      	cmp	r3, r2
     ae2:	d10d      	bne.n	b00 <FIH_LABEL_FIH_CALL_END_475+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     ae4:	2d00      	cmp	r5, #0
     ae6:	d0f0      	beq.n	aca <FIH_LABEL_FIH_CALL_END_475+0x3a>
            swap_erase_trailer_sectors(state, fap);
     ae8:	4630      	mov	r0, r6
     aea:	9906      	ldr	r1, [sp, #24]
     aec:	f005 f914 	bl	5d18 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     af0:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     af2:	9806      	ldr	r0, [sp, #24]
     af4:	f005 fafa 	bl	60ec <flash_area_close>

    FIH_RET(fih_rc);
}
     af8:	4620      	mov	r0, r4
     afa:	b008      	add	sp, #32
     afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     b00:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     b04:	42b9      	cmp	r1, r7
     b06:	d0eb      	beq.n	ae0 <FIH_LABEL_FIH_CALL_END_475+0x50>
     b08:	e7aa      	b.n	a60 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     b0a:	4a07      	ldr	r2, [pc, #28]	; (b28 <FIH_LABEL_FIH_CALL_END_475+0x98>)
     b0c:	e7d9      	b.n	ac2 <FIH_LABEL_FIH_CALL_END_475+0x32>
     b0e:	bf00      	nop
     b10:	2000c500 	.word	0x2000c500
     b14:	2000f88e 	.word	0x2000f88e
     b18:	96f3b83d 	.word	0x96f3b83d
     b1c:	2000c71c 	.word	0x2000c71c
     b20:	00009179 	.word	0x00009179
     b24:	0000918b 	.word	0x0000918b
     b28:	00009183 	.word	0x00009183

00000b2c <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     b2e:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     b30:	2100      	movs	r1, #0
{
     b32:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     b34:	4628      	mov	r0, r5
    size = copy_size = 0;
     b36:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     b3a:	f005 f8ac 	bl	5c96 <boot_status_is_reset>
     b3e:	b330      	cbz	r0, b8e <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b40:	4e16      	ldr	r6, [pc, #88]	; (b9c <boot_swap_image+0x70>)
     b42:	6822      	ldr	r2, [r4, #0]
     b44:	42b2      	cmp	r2, r6
     b46:	d103      	bne.n	b50 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b48:	4620      	mov	r0, r4
     b4a:	aa01      	add	r2, sp, #4
     b4c:	f005 f818 	bl	5b80 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b52:	42b3      	cmp	r3, r6
     b54:	d104      	bne.n	b60 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b56:	466a      	mov	r2, sp
     b58:	2101      	movs	r1, #1
     b5a:	4620      	mov	r0, r4
     b5c:	f005 f810 	bl	5b80 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b60:	e9dd 3200 	ldrd	r3, r2, [sp]
     b64:	4293      	cmp	r3, r2
            copy_size = size;
     b66:	bf88      	it	hi
     b68:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b6a:	9b01      	ldr	r3, [sp, #4]
     b6c:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b6e:	9a01      	ldr	r2, [sp, #4]
     b70:	4629      	mov	r1, r5
     b72:	4620      	mov	r0, r4
     b74:	f000 fb3a 	bl	11ec <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b78:	4b09      	ldr	r3, [pc, #36]	; (ba0 <boot_swap_image+0x74>)
     b7a:	681a      	ldr	r2, [r3, #0]
     b7c:	2a00      	cmp	r2, #0
     b7e:	dd03      	ble.n	b88 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b80:	2157      	movs	r1, #87	; 0x57
     b82:	4808      	ldr	r0, [pc, #32]	; (ba4 <boot_swap_image+0x78>)
     b84:	f005 faa5 	bl	60d2 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b88:	2000      	movs	r0, #0
     b8a:	b002      	add	sp, #8
     b8c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b8e:	f105 0108 	add.w	r1, r5, #8
     b92:	f7ff ff0b 	bl	9ac <boot_read_swap_size>
        copy_size = bs->swap_size;
     b96:	68ab      	ldr	r3, [r5, #8]
     b98:	9301      	str	r3, [sp, #4]
     b9a:	e7e8      	b.n	b6e <boot_swap_image+0x42>
     b9c:	96f3b83d 	.word	0x96f3b83d
     ba0:	2000db80 	.word	0x2000db80
     ba4:	000091b3 	.word	0x000091b3

00000ba8 <boot_copy_region>:
{
     ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bac:	4688      	mov	r8, r1
     bae:	4691      	mov	r9, r2
     bb0:	469a      	mov	sl, r3
    bytes_copied = 0;
     bb2:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bb4:	f8df b070 	ldr.w	fp, [pc, #112]	; c28 <boot_copy_region+0x80>
     bb8:	4c19      	ldr	r4, [pc, #100]	; (c20 <boot_copy_region+0x78>)
     bba:	4d1a      	ldr	r5, [pc, #104]	; (c24 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bbe:	429e      	cmp	r6, r3
     bc0:	d301      	bcc.n	bc6 <boot_copy_region+0x1e>
    return 0;
     bc2:	2000      	movs	r0, #0
     bc4:	e00f      	b.n	be6 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bc8:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     bca:	1b9f      	subs	r7, r3, r6
     bcc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     bd0:	bf28      	it	cs
     bd2:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bd6:	4a14      	ldr	r2, [pc, #80]	; (c28 <boot_copy_region+0x80>)
     bd8:	463b      	mov	r3, r7
     bda:	eb06 010a 	add.w	r1, r6, sl
     bde:	f005 fa86 	bl	60ee <flash_area_read>
        if (rc != 0) {
     be2:	b110      	cbz	r0, bea <boot_copy_region+0x42>
            return BOOT_EFLASH;
     be4:	2001      	movs	r0, #1
}
     be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     bea:	990a      	ldr	r1, [sp, #40]	; 0x28
     bec:	463b      	mov	r3, r7
     bee:	465a      	mov	r2, fp
     bf0:	4648      	mov	r0, r9
     bf2:	1871      	adds	r1, r6, r1
     bf4:	f005 fa97 	bl	6126 <flash_area_write>
        if (rc != 0) {
     bf8:	2800      	cmp	r0, #0
     bfa:	d1f3      	bne.n	be4 <boot_copy_region+0x3c>
     bfc:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     c00:	443e      	add	r6, r7
     c02:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     c06:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     c0a:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     c0e:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     c12:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     c16:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     c1a:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     c1e:	e7cd      	b.n	bbc <boot_copy_region+0x14>
     c20:	50018000 	.word	0x50018000
     c24:	6e524635 	.word	0x6e524635
     c28:	2000c780 	.word	0x2000c780

00000c2c <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c30:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c32:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     c34:	4b8e      	ldr	r3, [pc, #568]	; (e70 <FIH_LABEL_FIH_CALL_END_2435+0x48>)
{
     c36:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     c38:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c3a:	4b8e      	ldr	r3, [pc, #568]	; (e74 <FIH_LABEL_FIH_CALL_END_2435+0x4c>)
{
     c3c:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c3e:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c40:	4b8d      	ldr	r3, [pc, #564]	; (e78 <FIH_LABEL_FIH_CALL_END_2435+0x50>)
     c42:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c44:	4608      	mov	r0, r1
     c46:	f004 fec8 	bl	59da <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c4a:	f104 0120 	add.w	r1, r4, #32
     c4e:	b2c0      	uxtb	r0, r0
     c50:	f001 f894 	bl	1d7c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c54:	2101      	movs	r1, #1
     c56:	2000      	movs	r0, #0
     c58:	f004 febf 	bl	59da <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c5c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c60:	b2c0      	uxtb	r0, r0
     c62:	f001 f88b 	bl	1d7c <flash_area_open>
     c66:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c68:	4620      	mov	r0, r4
     c6a:	f004 ffe9 	bl	5c40 <boot_read_sectors>
    if (rc != 0) {
     c6e:	4680      	mov	r8, r0
     c70:	b968      	cbnz	r0, c8e <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     c72:	2200      	movs	r2, #0
     c74:	4620      	mov	r0, r4
     c76:	4611      	mov	r1, r2
     c78:	f004 ffca 	bl	5c10 <boot_read_image_headers>
    if (rc != 0) {
     c7c:	4680      	mov	r8, r0
     c7e:	b308      	cbz	r0, cc4 <context_boot_go+0x98>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c80:	2200      	movs	r2, #0
     c82:	2157      	movs	r1, #87	; 0x57
     c84:	487d      	ldr	r0, [pc, #500]	; (e7c <FIH_LABEL_FIH_CALL_END_2435+0x54>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c86:	f005 fa24 	bl	60d2 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c8a:	2301      	movs	r3, #1
     c8c:	e092      	b.n	db4 <FIH_LABEL_FIH_CALL_END_2222+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
     c92:	2157      	movs	r1, #87	; 0x57
     c94:	487a      	ldr	r0, [pc, #488]	; (e80 <FIH_LABEL_FIH_CALL_END_2435+0x58>)
     c96:	f005 fa1c 	bl	60d2 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c9a:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c9c:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c9e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     ca2:	d1e6      	bne.n	c72 <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     ca4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     ca8:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     caa:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     cae:	f200 8084 	bhi.w	dba <FIH_LABEL_FIH_CALL_END_2222+0x14>
     cb2:	2b01      	cmp	r3, #1
     cb4:	f200 8088 	bhi.w	dc8 <FIH_LABEL_FIH_CALL_END_2222+0x22>
     cb8:	f000 809f 	beq.w	dfa <FIH_LABEL_FIH_CALL_END_2222+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cbc:	23ff      	movs	r3, #255	; 0xff
     cbe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cc2:	e09a      	b.n	dfa <FIH_LABEL_FIH_CALL_END_2222+0x54>
    if (boot_slots_compatible(state)) {
     cc4:	4620      	mov	r0, r4
     cc6:	f000 f9a7 	bl	1018 <boot_slots_compatible>
     cca:	2800      	cmp	r0, #0
     ccc:	d0dd      	beq.n	c8a <context_boot_go+0x5e>
        boot_status_reset(bs);
     cce:	4668      	mov	r0, sp
     cd0:	f004 ffd8 	bl	5c84 <boot_status_reset>
        rc = swap_read_status(state, bs);
     cd4:	4669      	mov	r1, sp
     cd6:	4620      	mov	r0, r4
     cd8:	f005 f873 	bl	5dc2 <swap_read_status>
        if (rc != 0) {
     cdc:	b118      	cbz	r0, ce6 <context_boot_go+0xba>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     cde:	4642      	mov	r2, r8
     ce0:	2157      	movs	r1, #87	; 0x57
     ce2:	4868      	ldr	r0, [pc, #416]	; (e84 <FIH_LABEL_FIH_CALL_END_2435+0x5c>)
     ce4:	e7cf      	b.n	c86 <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     ce6:	4668      	mov	r0, sp
     ce8:	f004 ffd5 	bl	5c96 <boot_status_is_reset>
     cec:	f080 0101 	eor.w	r1, r0, #1
     cf0:	466a      	mov	r2, sp
     cf2:	4620      	mov	r0, r4
     cf4:	b2c9      	uxtb	r1, r1
     cf6:	f004 ff8b 	bl	5c10 <boot_read_image_headers>
        if (rc != 0) {
     cfa:	4602      	mov	r2, r0
     cfc:	2800      	cmp	r0, #0
     cfe:	d1bf      	bne.n	c80 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     d00:	4668      	mov	r0, sp
     d02:	f004 ffc8 	bl	5c96 <boot_status_is_reset>
     d06:	4680      	mov	r8, r0
     d08:	bb60      	cbnz	r0, d64 <context_boot_go+0x138>
    rc = boot_swap_image(state, bs);
     d0a:	4669      	mov	r1, sp
     d0c:	4620      	mov	r0, r4
     d0e:	f7ff ff0d 	bl	b2c <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d12:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d16:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     d1a:	3b03      	subs	r3, #3
     d1c:	2b01      	cmp	r3, #1
     d1e:	d806      	bhi.n	d2e <context_boot_go+0x102>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d20:	4640      	mov	r0, r8
     d22:	f005 f89c 	bl	5e5e <swap_set_image_ok>
        if (rc != 0) {
     d26:	b110      	cbz	r0, d2e <context_boot_go+0x102>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d28:	23ff      	movs	r3, #255	; 0xff
     d2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d32:	3b02      	subs	r3, #2
     d34:	2b02      	cmp	r3, #2
     d36:	d80b      	bhi.n	d50 <context_boot_go+0x124>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d38:	2000      	movs	r0, #0
     d3a:	f005 f87e 	bl	5e3a <swap_set_copy_done>
        if (rc != 0) {
     d3e:	b138      	cbz	r0, d50 <context_boot_go+0x124>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d40:	23ff      	movs	r3, #255	; 0xff
     d42:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     d46:	2145      	movs	r1, #69	; 0x45
     d48:	484f      	ldr	r0, [pc, #316]	; (e88 <FIH_LABEL_FIH_CALL_END_2435+0x60>)
     d4a:	f005 f9c2 	bl	60d2 <z_log_minimal_printk>
        while (1) {}
     d4e:	e7fe      	b.n	d4e <context_boot_go+0x122>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d50:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d54:	2bff      	cmp	r3, #255	; 0xff
     d56:	d0f6      	beq.n	d46 <context_boot_go+0x11a>
            rc = boot_read_image_headers(state, false, bs);
     d58:	466a      	mov	r2, sp
     d5a:	2100      	movs	r1, #0
     d5c:	4620      	mov	r0, r4
     d5e:	f004 ff57 	bl	5c10 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d62:	e792      	b.n	c8a <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d64:	f89d 9007 	ldrb.w	r9, [sp, #7]
     d68:	f1b9 0f01 	cmp.w	r9, #1
     d6c:	d117      	bne.n	d9e <FIH_LABEL_FIH_CALL_START_2202>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d6e:	4610      	mov	r0, r2
     d70:	f003 f9c0 	bl	40f4 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d74:	1e83      	subs	r3, r0, #2
     d76:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d78:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d7a:	d80d      	bhi.n	d98 <FIH_LABEL_FIH_CALL_END_2137+0x14>

00000d7c <FIH_LABEL_FIH_CALL_START_2113>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d7c:	4649      	mov	r1, r9
     d7e:	4620      	mov	r0, r4
     d80:	f7ff fe52 	bl	a28 <boot_validate_slot.isra.0>

00000d84 <FIH_LABEL_FIH_CALL_END_2137>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d84:	4b41      	ldr	r3, [pc, #260]	; (e8c <FIH_LABEL_FIH_CALL_END_2435+0x64>)
     d86:	681b      	ldr	r3, [r3, #0]
     d88:	4298      	cmp	r0, r3
     d8a:	d005      	beq.n	d98 <FIH_LABEL_FIH_CALL_END_2137+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     d8c:	2801      	cmp	r0, #1
     d8e:	bf0c      	ite	eq
     d90:	f04f 0801 	moveq.w	r8, #1
     d94:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d98:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     d9c:	e782      	b.n	ca4 <context_boot_go+0x78>

00000d9e <FIH_LABEL_FIH_CALL_START_2202>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d9e:	2101      	movs	r1, #1
     da0:	4620      	mov	r0, r4
     da2:	f7ff fe41 	bl	a28 <boot_validate_slot.isra.0>

00000da6 <FIH_LABEL_FIH_CALL_END_2222>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     da6:	4b39      	ldr	r3, [pc, #228]	; (e8c <FIH_LABEL_FIH_CALL_END_2435+0x64>)
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     dac:	bf14      	ite	ne
     dae:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     db0:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     db4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     db8:	e774      	b.n	ca4 <context_boot_go+0x78>
        switch (BOOT_SWAP_TYPE(state)) {
     dba:	2b05      	cmp	r3, #5
     dbc:	f47f af7e 	bne.w	cbc <context_boot_go+0x90>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     dc0:	2000      	movs	r0, #0
     dc2:	f005 f84c 	bl	5e5e <swap_set_image_ok>
     dc6:	e013      	b.n	df0 <FIH_LABEL_FIH_CALL_END_2222+0x4a>
        rc = boot_swap_image(state, bs);
     dc8:	4669      	mov	r1, sp
     dca:	4620      	mov	r0, r4
     dcc:	f7ff feae 	bl	b2c <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     dd0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     dd4:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     dd6:	1eda      	subs	r2, r3, #3
     dd8:	2a01      	cmp	r2, #1
     dda:	d80c      	bhi.n	df6 <FIH_LABEL_FIH_CALL_END_2222+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     ddc:	2000      	movs	r0, #0
     dde:	f005 f83e 	bl	5e5e <swap_set_image_ok>
        if (rc != 0) {
     de2:	4605      	mov	r5, r0
     de4:	2800      	cmp	r0, #0
     de6:	f47f af69 	bne.w	cbc <context_boot_go+0x90>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     dea:	2000      	movs	r0, #0
     dec:	f005 f825 	bl	5e3a <swap_set_copy_done>
            if (rc != 0) {
     df0:	4605      	mov	r5, r0
     df2:	b110      	cbz	r0, dfa <FIH_LABEL_FIH_CALL_END_2222+0x54>
     df4:	e762      	b.n	cbc <context_boot_go+0x90>
    if (BOOT_IS_UPGRADE(swap_type)) {
     df6:	2b02      	cmp	r3, #2
     df8:	d0f7      	beq.n	dea <FIH_LABEL_FIH_CALL_END_2222+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     dfa:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     dfe:	2bff      	cmp	r3, #255	; 0xff
     e00:	d104      	bne.n	e0c <FIH_LABEL_FIH_CALL_END_2222+0x66>
            BOOT_LOG_ERR("panic!");
     e02:	2145      	movs	r1, #69	; 0x45
     e04:	4820      	ldr	r0, [pc, #128]	; (e88 <FIH_LABEL_FIH_CALL_END_2435+0x60>)
     e06:	f005 f964 	bl	60d2 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     e0a:	e7fe      	b.n	e0a <FIH_LABEL_FIH_CALL_END_2222+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     e0c:	2b01      	cmp	r3, #1
     e0e:	d006      	beq.n	e1e <FIH_LABEL_FIH_CALL_START_2419>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     e10:	466a      	mov	r2, sp
     e12:	2100      	movs	r1, #0
     e14:	4620      	mov	r0, r4
     e16:	f004 fefb 	bl	5c10 <boot_read_image_headers>
            if (rc != 0) {
     e1a:	4605      	mov	r5, r0
     e1c:	b9d0      	cbnz	r0, e54 <FIH_LABEL_FIH_CALL_END_2435+0x2c>

00000e1e <FIH_LABEL_FIH_CALL_START_2419>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     e1e:	2100      	movs	r1, #0
     e20:	4620      	mov	r0, r4
     e22:	f7ff fe01 	bl	a28 <boot_validate_slot.isra.0>
     e26:	4606      	mov	r6, r0

00000e28 <FIH_LABEL_FIH_CALL_END_2435>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     e28:	f8df 8060 	ldr.w	r8, [pc, #96]	; e8c <FIH_LABEL_FIH_CALL_END_2435+0x64>
     e2c:	f8d8 3000 	ldr.w	r3, [r8]
     e30:	4298      	cmp	r0, r3
     e32:	d10f      	bne.n	e54 <FIH_LABEL_FIH_CALL_END_2435+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     e34:	2210      	movs	r2, #16
     e36:	2100      	movs	r1, #0
     e38:	4668      	mov	r0, sp
     e3a:	f005 fce5 	bl	6808 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     e3e:	6a20      	ldr	r0, [r4, #32]
     e40:	f004 fdd4 	bl	59ec <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     e44:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     e46:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     e48:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     e4a:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e4e:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e50:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e52:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e54:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e56:	f005 f949 	bl	60ec <flash_area_close>
     e5a:	6a20      	ldr	r0, [r4, #32]
     e5c:	f005 f946 	bl	60ec <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     e60:	2d00      	cmp	r5, #0
     e62:	bf14      	ite	ne
     e64:	4628      	movne	r0, r5
     e66:	4630      	moveq	r0, r6
     e68:	b005      	add	sp, #20
     e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e6e:	bf00      	nop
     e70:	2000c500 	.word	0x2000c500
     e74:	2000cb80 	.word	0x2000cb80
     e78:	2000d380 	.word	0x2000d380
     e7c:	00009224 	.word	0x00009224
     e80:	000091e2 	.word	0x000091e2
     e84:	00009250 	.word	0x00009250
     e88:	0000927a 	.word	0x0000927a
     e8c:	2000c71c 	.word	0x2000c71c

00000e90 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e90:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e92:	4d06      	ldr	r5, [pc, #24]	; (eac <FIH_LABEL_FIH_CALL_END_3116+0x4>)
{
     e94:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e96:	2260      	movs	r2, #96	; 0x60
     e98:	2100      	movs	r1, #0
     e9a:	4628      	mov	r0, r5
     e9c:	f005 fcb4 	bl	6808 <memset>

00000ea0 <FIH_LABEL_FIH_CALL_START_3101>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     ea0:	4621      	mov	r1, r4
     ea2:	4628      	mov	r0, r5
     ea4:	f7ff fec2 	bl	c2c <context_boot_go>

00000ea8 <FIH_LABEL_FIH_CALL_END_3116>:
}
     ea8:	bd38      	pop	{r3, r4, r5, pc}
     eaa:	bf00      	nop
     eac:	2000c720 	.word	0x2000c720

00000eb0 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     eb2:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     eb4:	461c      	mov	r4, r3
     eb6:	b333      	cbz	r3, f06 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eba:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     ebc:	7963      	ldrb	r3, [r4, #5]
     ebe:	2b01      	cmp	r3, #1
     ec0:	d115      	bne.n	eee <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     ec2:	bb01      	cbnz	r1, f06 <boot_read_image_header+0x56>
     ec4:	4b1f      	ldr	r3, [pc, #124]	; (f44 <boot_read_image_header+0x94>)
     ec6:	6822      	ldr	r2, [r4, #0]
     ec8:	681b      	ldr	r3, [r3, #0]
    off = 0;
     eca:	429a      	cmp	r2, r3
     ecc:	bf98      	it	ls
     ece:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ed0:	2000      	movs	r0, #0
     ed2:	f004 fd82 	bl	59da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ed6:	a901      	add	r1, sp, #4
     ed8:	b2c0      	uxtb	r0, r0
     eda:	f000 ff4f 	bl	1d7c <flash_area_open>
    if (rc != 0) {
     ede:	b1f0      	cbz	r0, f1e <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     ee0:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     ee2:	9801      	ldr	r0, [sp, #4]
     ee4:	f005 f902 	bl	60ec <flash_area_close>
    return rc;
}
     ee8:	4628      	mov	r0, r5
     eea:	b002      	add	sp, #8
     eec:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     eee:	2b02      	cmp	r3, #2
     ef0:	d109      	bne.n	f06 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     ef2:	6823      	ldr	r3, [r4, #0]
     ef4:	2b01      	cmp	r3, #1
     ef6:	d908      	bls.n	f0a <boot_read_image_header+0x5a>
     ef8:	4a12      	ldr	r2, [pc, #72]	; (f44 <boot_read_image_header+0x94>)
     efa:	6812      	ldr	r2, [r2, #0]
     efc:	4293      	cmp	r3, r2
     efe:	d802      	bhi.n	f06 <boot_read_image_header+0x56>
                if (slot == 0) {
     f00:	fab1 f181 	clz	r1, r1
     f04:	0949      	lsrs	r1, r1, #5
    off = 0;
     f06:	2500      	movs	r5, #0
     f08:	e7e2      	b.n	ed0 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     f0a:	d1fc      	bne.n	f06 <boot_read_image_header+0x56>
                if (slot == 0) {
     f0c:	2900      	cmp	r1, #0
     f0e:	d0df      	beq.n	ed0 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     f10:	2901      	cmp	r1, #1
     f12:	d1f8      	bne.n	f06 <boot_read_image_header+0x56>
     f14:	7921      	ldrb	r1, [r4, #4]
     f16:	3902      	subs	r1, #2
     f18:	bf18      	it	ne
     f1a:	2101      	movne	r1, #1
     f1c:	e7f3      	b.n	f06 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     f1e:	4629      	mov	r1, r5
     f20:	2320      	movs	r3, #32
     f22:	4632      	mov	r2, r6
     f24:	9801      	ldr	r0, [sp, #4]
     f26:	f005 f8e2 	bl	60ee <flash_area_read>
    if (rc != 0) {
     f2a:	4605      	mov	r5, r0
     f2c:	2800      	cmp	r0, #0
     f2e:	d1d7      	bne.n	ee0 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     f30:	2c00      	cmp	r4, #0
     f32:	d0d6      	beq.n	ee2 <boot_read_image_header+0x32>
     f34:	6835      	ldr	r5, [r6, #0]
     f36:	4804      	ldr	r0, [pc, #16]	; (f48 <boot_read_image_header+0x98>)
     f38:	1a2d      	subs	r5, r5, r0
     f3a:	bf18      	it	ne
     f3c:	f04f 35ff 	movne.w	r5, #4294967295
     f40:	e7cf      	b.n	ee2 <boot_read_image_header+0x32>
     f42:	bf00      	nop
     f44:	2000c504 	.word	0x2000c504
     f48:	96f3b83d 	.word	0x96f3b83d

00000f4c <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f50:	4607      	mov	r7, r0
     f52:	460c      	mov	r4, r1
     f54:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f56:	4601      	mov	r1, r0
     f58:	2000      	movs	r0, #0
{
     f5a:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f5c:	f004 fde6 	bl	5b2c <boot_status_entries>
    if (max_entries < 0) {
     f60:	1e05      	subs	r5, r0, #0
     f62:	db52      	blt.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f64:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f66:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f68:	f004 fdea 	bl	5b40 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f6c:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f70:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f74:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f78:	f04f 34ff 	mov.w	r4, #4294967295
     f7c:	f105 38ff 	add.w	r8, r5, #4294967295
     f80:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     f84:	b99d      	cbnz	r5, fae <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f86:	f1ba 0f01 	cmp.w	sl, #1
     f8a:	dd03      	ble.n	f94 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f8c:	2145      	movs	r1, #69	; 0x45
     f8e:	4821      	ldr	r0, [pc, #132]	; (1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>)
     f90:	f005 f89f 	bl	60d2 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f94:	1c63      	adds	r3, r4, #1
     f96:	d006      	beq.n	fa6 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f98:	2cff      	cmp	r4, #255	; 0xff
     f9a:	dc2a      	bgt.n	ff2 <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f9c:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa0:	3401      	adds	r4, #1
     fa2:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     fa4:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     fa6:	4628      	mov	r0, r5
     fa8:	b005      	add	sp, #20
     faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     fae:	1e6b      	subs	r3, r5, #1
     fb0:	9300      	str	r3, [sp, #0]
     fb2:	4641      	mov	r1, r8
     fb4:	2301      	movs	r3, #1
     fb6:	4638      	mov	r0, r7
     fb8:	f10d 020f 	add.w	r2, sp, #15
     fbc:	f005 f897 	bl	60ee <flash_area_read>
        if (rc < 0) {
     fc0:	1e03      	subs	r3, r0, #0
     fc2:	9301      	str	r3, [sp, #4]
     fc4:	db23      	blt.n	100e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     fc6:	2201      	movs	r2, #1
     fc8:	4638      	mov	r0, r7
     fca:	f10d 010f 	add.w	r1, sp, #15
     fce:	f005 ff38 	bl	6e42 <bootutil_buffer_is_erased>
     fd2:	9b01      	ldr	r3, [sp, #4]
     fd4:	b140      	cbz	r0, fe8 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     fd6:	455b      	cmp	r3, fp
     fd8:	d001      	beq.n	fde <swap_read_status_bytes+0x92>
                erased_sections++;
     fda:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     fde:	469b      	mov	fp, r3
     fe0:	9d00      	ldr	r5, [sp, #0]
     fe2:	eba8 0809 	sub.w	r8, r8, r9
     fe6:	e7cd      	b.n	f84 <swap_read_status_bytes+0x38>
     fe8:	f1b4 3fff 	cmp.w	r4, #4294967295
     fec:	bf08      	it	eq
     fee:	462c      	moveq	r4, r5
     ff0:	e7f5      	b.n	fde <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     ff2:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ff4:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     ff8:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ffa:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ffc:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1000:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    1002:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1004:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    1006:	7134      	strb	r4, [r6, #4]
    1008:	e7cd      	b.n	fa6 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
    100a:	2507      	movs	r5, #7
    100c:	e7cb      	b.n	fa6 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
    100e:	2501      	movs	r5, #1
    1010:	e7c9      	b.n	fa6 <swap_read_status_bytes+0x5a>
    1012:	bf00      	nop
    1014:	00009286 	.word	0x00009286

00001018 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    1018:	6a81      	ldr	r1, [r0, #40]	; 0x28
    101a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
    101c:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
    101e:	428a      	cmp	r2, r1
    1020:	d008      	beq.n	1034 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    1022:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    1024:	428b      	cmp	r3, r1
    1026:	d005      	beq.n	1034 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
    1028:	2157      	movs	r1, #87	; 0x57
    102a:	4814      	ldr	r0, [pc, #80]	; (107c <boot_slots_compatible+0x64>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    102c:	f005 f851 	bl	60d2 <z_log_minimal_printk>
            return 0;
    1030:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    1032:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    1034:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1038:	d91c      	bls.n	1074 <boot_slots_compatible+0x5c>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    103a:	2157      	movs	r1, #87	; 0x57
    103c:	4810      	ldr	r0, [pc, #64]	; (1080 <boot_slots_compatible+0x68>)
    103e:	e7f5      	b.n	102c <boot_slots_compatible+0x14>
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    1040:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1042:	6d05      	ldr	r5, [r0, #80]	; 0x50
    1044:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    1048:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    104c:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    104e:	686d      	ldr	r5, [r5, #4]
    1050:	42ac      	cmp	r4, r5
    1052:	d002      	beq.n	105a <boot_slots_compatible+0x42>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1054:	2157      	movs	r1, #87	; 0x57
    1056:	480b      	ldr	r0, [pc, #44]	; (1084 <boot_slots_compatible+0x6c>)
    1058:	e7e8      	b.n	102c <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    105a:	3301      	adds	r3, #1
    105c:	429a      	cmp	r2, r3
    105e:	d1ef      	bne.n	1040 <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    1060:	4291      	cmp	r1, r2
    1062:	d905      	bls.n	1070 <boot_slots_compatible+0x58>
    1064:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1066:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    106a:	6853      	ldr	r3, [r2, #4]
    106c:	42a3      	cmp	r3, r4
    106e:	d1f1      	bne.n	1054 <boot_slots_compatible+0x3c>
    return 1;
    1070:	2001      	movs	r0, #1
    1072:	e7de      	b.n	1032 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1074:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1076:	461c      	mov	r4, r3
    1078:	e7f0      	b.n	105c <boot_slots_compatible+0x44>
    107a:	bf00      	nop
    107c:	000092a9 	.word	0x000092a9
    1080:	000092e1 	.word	0x000092e1
    1084:	00009310 	.word	0x00009310

00001088 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1088:	b500      	push	{lr}
    108a:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    108c:	2002      	movs	r0, #2
    108e:	a904      	add	r1, sp, #16
    1090:	f005 ff3c 	bl	6f0c <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1094:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1098:	2a01      	cmp	r2, #1
    109a:	d041      	beq.n	1120 <swap_status_source+0x98>
    109c:	4b25      	ldr	r3, [pc, #148]	; (1134 <swap_status_source+0xac>)
    109e:	4926      	ldr	r1, [pc, #152]	; (1138 <swap_status_source+0xb0>)
    10a0:	2a03      	cmp	r2, #3
    10a2:	bf18      	it	ne
    10a4:	460b      	movne	r3, r1
    10a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    10aa:	2149      	movs	r1, #73	; 0x49
    10ac:	9202      	str	r2, [sp, #8]
    10ae:	f89d 2012 	ldrb.w	r2, [sp, #18]
    10b2:	4822      	ldr	r0, [pc, #136]	; (113c <swap_status_source+0xb4>)
    10b4:	9201      	str	r2, [sp, #4]
    10b6:	f89d 2011 	ldrb.w	r2, [sp, #17]
    10ba:	9200      	str	r2, [sp, #0]
    10bc:	4a20      	ldr	r2, [pc, #128]	; (1140 <swap_status_source+0xb8>)
    10be:	f005 f808 	bl	60d2 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10c2:	2006      	movs	r0, #6
    10c4:	a906      	add	r1, sp, #24
    10c6:	f005 ff21 	bl	6f0c <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10ca:	f89d 2018 	ldrb.w	r2, [sp, #24]
    10ce:	2a01      	cmp	r2, #1
    10d0:	d028      	beq.n	1124 <swap_status_source+0x9c>
    10d2:	4b18      	ldr	r3, [pc, #96]	; (1134 <swap_status_source+0xac>)
    10d4:	4918      	ldr	r1, [pc, #96]	; (1138 <swap_status_source+0xb0>)
    10d6:	2a03      	cmp	r2, #3
    10d8:	bf18      	it	ne
    10da:	460b      	movne	r3, r1
    10dc:	f89d 201b 	ldrb.w	r2, [sp, #27]
    10e0:	2149      	movs	r1, #73	; 0x49
    10e2:	9202      	str	r2, [sp, #8]
    10e4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    10e8:	4814      	ldr	r0, [pc, #80]	; (113c <swap_status_source+0xb4>)
    10ea:	9201      	str	r2, [sp, #4]
    10ec:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10f0:	9200      	str	r2, [sp, #0]
    10f2:	4a14      	ldr	r2, [pc, #80]	; (1144 <swap_status_source+0xbc>)
    10f4:	f004 ffed 	bl	60d2 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10fc:	2b01      	cmp	r3, #1
    10fe:	d113      	bne.n	1128 <swap_status_source+0xa0>
    1100:	f89d 3012 	ldrb.w	r3, [sp, #18]
    1104:	2b03      	cmp	r3, #3
    1106:	d10f      	bne.n	1128 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1108:	f89d 3018 	ldrb.w	r3, [sp, #24]
    110c:	2b01      	cmp	r3, #1
    110e:	d00b      	beq.n	1128 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    1110:	480d      	ldr	r0, [pc, #52]	; (1148 <swap_status_source+0xc0>)
    1112:	2149      	movs	r1, #73	; 0x49
    1114:	f004 ffdd 	bl	60d2 <z_log_minimal_printk>
        return source;
    1118:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    111a:	b009      	add	sp, #36	; 0x24
    111c:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1120:	4b0a      	ldr	r3, [pc, #40]	; (114c <swap_status_source+0xc4>)
    1122:	e7c0      	b.n	10a6 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1124:	4b09      	ldr	r3, [pc, #36]	; (114c <swap_status_source+0xc4>)
    1126:	e7d9      	b.n	10dc <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    1128:	4809      	ldr	r0, [pc, #36]	; (1150 <swap_status_source+0xc8>)
    112a:	2149      	movs	r1, #73	; 0x49
    112c:	f004 ffd1 	bl	60d2 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    1130:	2000      	movs	r0, #0
    1132:	e7f2      	b.n	111a <swap_status_source+0x92>
    1134:	00009341 	.word	0x00009341
    1138:	00009347 	.word	0x00009347
    113c:	00009359 	.word	0x00009359
    1140:	0000934b 	.word	0x0000934b
    1144:	0000939a 	.word	0x0000939a
    1148:	000093aa 	.word	0x000093aa
    114c:	0000933c 	.word	0x0000933c
    1150:	000093c9 	.word	0x000093c9

00001154 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1154:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1156:	684b      	ldr	r3, [r1, #4]
{
    1158:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    115a:	4a1e      	ldr	r2, [pc, #120]	; (11d4 <fixup_revert+0x80>)
    115c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1160:	4293      	cmp	r3, r2
{
    1162:	4606      	mov	r6, r0
    1164:	460d      	mov	r5, r1
    1166:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1168:	d12f      	bne.n	11ca <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    116a:	680b      	ldr	r3, [r1, #0]
    116c:	2b01      	cmp	r3, #1
    116e:	d12c      	bne.n	11ca <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1170:	4620      	mov	r0, r4
    1172:	a904      	add	r1, sp, #16
    1174:	f002 ff6e 	bl	4054 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1178:	f89d 2010 	ldrb.w	r2, [sp, #16]
    117c:	2a01      	cmp	r2, #1
    117e:	d026      	beq.n	11ce <fixup_revert+0x7a>
    1180:	4b15      	ldr	r3, [pc, #84]	; (11d8 <fixup_revert+0x84>)
    1182:	4916      	ldr	r1, [pc, #88]	; (11dc <fixup_revert+0x88>)
    1184:	2a03      	cmp	r2, #3
    1186:	bf18      	it	ne
    1188:	460b      	movne	r3, r1
    118a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    118e:	2149      	movs	r1, #73	; 0x49
    1190:	9202      	str	r2, [sp, #8]
    1192:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1196:	4812      	ldr	r0, [pc, #72]	; (11e0 <fixup_revert+0x8c>)
    1198:	9201      	str	r2, [sp, #4]
    119a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    119e:	9200      	str	r2, [sp, #0]
    11a0:	4a10      	ldr	r2, [pc, #64]	; (11e4 <fixup_revert+0x90>)
    11a2:	f004 ff96 	bl	60d2 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    11a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    11aa:	2b03      	cmp	r3, #3
    11ac:	d10d      	bne.n	11ca <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11ae:	4621      	mov	r1, r4
    11b0:	4630      	mov	r0, r6
    11b2:	f004 fdb1 	bl	5d18 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    11b6:	4620      	mov	r0, r4
    11b8:	f005 fe9f 	bl	6efa <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    11bc:	4620      	mov	r0, r4
    11be:	68a9      	ldr	r1, [r5, #8]
    11c0:	f004 fccf 	bl	5b62 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    11c4:	4620      	mov	r0, r4
    11c6:	f002 ff37 	bl	4038 <boot_write_magic>
        assert(rc == 0);
    }
}
    11ca:	b006      	add	sp, #24
    11cc:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    11ce:	4b06      	ldr	r3, [pc, #24]	; (11e8 <fixup_revert+0x94>)
    11d0:	e7db      	b.n	118a <fixup_revert+0x36>
    11d2:	bf00      	nop
    11d4:	04000100 	.word	0x04000100
    11d8:	00009341 	.word	0x00009341
    11dc:	00009347 	.word	0x00009347
    11e0:	00009359 	.word	0x00009359
    11e4:	0000939a 	.word	0x0000939a
    11e8:	0000933c 	.word	0x0000933c

000011ec <swap_run>:
    11ec:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    11ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11f2:	460c      	mov	r4, r1
    11f4:	685e      	ldr	r6, [r3, #4]
    11f6:	4605      	mov	r5, r0
    11f8:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    11fa:	2300      	movs	r3, #0
{
    11fc:	b08b      	sub	sp, #44	; 0x2c
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11fe:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1200:	429a      	cmp	r2, r3
    1202:	4608      	mov	r0, r1
    1204:	f101 0101 	add.w	r1, r1, #1
    1208:	d8f9      	bhi.n	11fe <swap_run+0x12>
    120a:	4f72      	ldr	r7, [pc, #456]	; (13d4 <swap_run+0x1e8>)
    120c:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    120e:	4620      	mov	r0, r4
    1210:	f004 fd41 	bl	5c96 <boot_status_is_reset>
    1214:	9703      	str	r7, [sp, #12]
    1216:	b1b8      	cbz	r0, 1248 <swap_run+0x5c>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1218:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    121a:	f004 fc82 	bl	5b22 <boot_trailer_sz>
        sz = 0;
    121e:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1220:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1222:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    1224:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1226:	4290      	cmp	r0, r2
    1228:	d901      	bls.n	122e <swap_run+0x42>
                break;
            }
            first_trailer_idx--;
    122a:	3b01      	subs	r3, #1
            sz += sector_sz;
    122c:	e7fa      	b.n	1224 <swap_run+0x38>
        }

        if (g_last_idx >= first_trailer_idx) {
    122e:	9a03      	ldr	r2, [sp, #12]
    1230:	6812      	ldr	r2, [r2, #0]
    1232:	429a      	cmp	r2, r3
    1234:	d308      	bcc.n	1248 <swap_run+0x5c>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1236:	2157      	movs	r1, #87	; 0x57
    1238:	4867      	ldr	r0, [pc, #412]	; (13d8 <swap_run+0x1ec>)
    123a:	f004 ff4a 	bl	60d2 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    123e:	2301      	movs	r3, #1
    1240:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1242:	b00b      	add	sp, #44	; 0x2c
    1244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1248:	a908      	add	r1, sp, #32
    124a:	2002      	movs	r0, #2
    124c:	f000 fd96 	bl	1d7c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1250:	a909      	add	r1, sp, #36	; 0x24
    1252:	2006      	movs	r0, #6
    1254:	f000 fd92 	bl	1d7c <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1258:	4621      	mov	r1, r4
    125a:	4628      	mov	r0, r5
    125c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    125e:	f7ff ff79 	bl	1154 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1262:	7963      	ldrb	r3, [r4, #5]
    1264:	2b01      	cmp	r3, #1
    1266:	d108      	bne.n	127a <swap_run+0x8e>
        idx = g_last_idx;
    1268:	9b03      	ldr	r3, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
    126a:	f8df b170 	ldr.w	fp, [pc, #368]	; 13dc <swap_run+0x1f0>
        idx = g_last_idx;
    126e:	681f      	ldr	r7, [r3, #0]
        while (idx > 0) {
    1270:	9b03      	ldr	r3, [sp, #12]
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	b9a7      	cbnz	r7, 12a0 <swap_run+0xb4>
        bs->idx = BOOT_STATUS_IDX_0;
    1276:	2301      	movs	r3, #1
    1278:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    127a:	2302      	movs	r3, #2
    idx = 1;
    127c:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    127e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13dc <swap_run+0x1f0>
    bs->op = BOOT_STATUS_OP_SWAP;
    1282:	7163      	strb	r3, [r4, #5]
        bs->state = BOOT_STATUS_STATE_1;
    1284:	9306      	str	r3, [sp, #24]
    while (idx <= g_last_idx) {
    1286:	9b03      	ldr	r3, [sp, #12]
    1288:	f8dd 9020 	ldr.w	r9, [sp, #32]
    128c:	681b      	ldr	r3, [r3, #0]
    128e:	429f      	cmp	r7, r3
    1290:	d94a      	bls.n	1328 <swap_run+0x13c>
    flash_area_close(fap_pri);
    1292:	4648      	mov	r0, r9
    1294:	f004 ff2a 	bl	60ec <flash_area_close>
    flash_area_close(fap_sec);
    1298:	9809      	ldr	r0, [sp, #36]	; 0x24
    129a:	f004 ff27 	bl	60ec <flash_area_close>
    129e:	e7d0      	b.n	1242 <swap_run+0x56>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    12a0:	6822      	ldr	r2, [r4, #0]
    12a2:	3301      	adds	r3, #1
    12a4:	1a9b      	subs	r3, r3, r2
    12a6:	429f      	cmp	r7, r3
    12a8:	d83c      	bhi.n	1324 <swap_run+0x138>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    12aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    12ac:	2a01      	cmp	r2, #1
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
    12ae:	6819      	ldr	r1, [r3, #0]
    12b0:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    12b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    12b8:	f853 3c08 	ldr.w	r3, [r3, #-8]
    12bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    12c0:	eba0 0901 	sub.w	r9, r0, r1
    12c4:	eba3 0a01 	sub.w	sl, r3, r1
    12c8:	d112      	bne.n	12f0 <swap_run+0x104>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12ca:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12ce:	2a02      	cmp	r2, #2
    12d0:	d00a      	beq.n	12e8 <swap_run+0xfc>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12d2:	4641      	mov	r1, r8
    12d4:	4628      	mov	r0, r5
    12d6:	9304      	str	r3, [sp, #16]
    12d8:	f004 fd1e 	bl	5d18 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12dc:	4622      	mov	r2, r4
    12de:	4641      	mov	r1, r8
    12e0:	4628      	mov	r0, r5
    12e2:	f004 fd4f 	bl	5d84 <swap_status_init>
    12e6:	9b04      	ldr	r3, [sp, #16]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12e8:	4619      	mov	r1, r3
    12ea:	4628      	mov	r0, r5
    12ec:	f004 fd14 	bl	5d18 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12f0:	4632      	mov	r2, r6
    12f2:	4649      	mov	r1, r9
    12f4:	4640      	mov	r0, r8
    12f6:	f004 fd0d 	bl	5d14 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12fa:	4653      	mov	r3, sl
    12fc:	4642      	mov	r2, r8
    12fe:	4641      	mov	r1, r8
    1300:	4628      	mov	r0, r5
    1302:	e9cd 9600 	strd	r9, r6, [sp]
    1306:	f7ff fc4f 	bl	ba8 <boot_copy_region>
    rc = boot_write_status(state, bs);
    130a:	4621      	mov	r1, r4
    130c:	4628      	mov	r0, r5
    130e:	f004 fccf 	bl	5cb0 <boot_write_status>
    bs->idx++;
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	3301      	adds	r3, #1
    1316:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    1318:	b120      	cbz	r0, 1324 <swap_run+0x138>
    131a:	f8db 3000 	ldr.w	r3, [fp]
    131e:	3301      	adds	r3, #1
    1320:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    1324:	3f01      	subs	r7, #1
    1326:	e7a3      	b.n	1270 <swap_run+0x84>
        if (idx >= bs->idx) {
    1328:	6823      	ldr	r3, [r4, #0]
    132a:	429f      	cmp	r7, r3
    132c:	d350      	bcc.n	13d0 <swap_run+0x1e4>
    132e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1330:	00fb      	lsls	r3, r7, #3
    1332:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    1336:	3b08      	subs	r3, #8
    1338:	9105      	str	r1, [sp, #20]
    133a:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    133c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    1340:	9104      	str	r1, [sp, #16]
    1342:	6d29      	ldr	r1, [r5, #80]	; 0x50
    1344:	58c8      	ldr	r0, [r1, r3]
    1346:	6809      	ldr	r1, [r1, #0]
    1348:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    134c:	7921      	ldrb	r1, [r4, #4]
    134e:	2901      	cmp	r1, #1
    1350:	d13c      	bne.n	13cc <swap_run+0x1e0>
    1352:	58d1      	ldr	r1, [r2, r3]
    1354:	9b04      	ldr	r3, [sp, #16]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1356:	4632      	mov	r2, r6
    1358:	1ac9      	subs	r1, r1, r3
    135a:	4648      	mov	r0, r9
    135c:	9107      	str	r1, [sp, #28]
    135e:	f004 fcd9 	bl	5d14 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1362:	9907      	ldr	r1, [sp, #28]
    1364:	465b      	mov	r3, fp
    1366:	464a      	mov	r2, r9
    1368:	9100      	str	r1, [sp, #0]
    136a:	4628      	mov	r0, r5
    136c:	4651      	mov	r1, sl
    136e:	9601      	str	r6, [sp, #4]
    1370:	f7ff fc1a 	bl	ba8 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1374:	4621      	mov	r1, r4
    1376:	4628      	mov	r0, r5
    1378:	f004 fc9a 	bl	5cb0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    137c:	9b06      	ldr	r3, [sp, #24]
    137e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1380:	b120      	cbz	r0, 138c <swap_run+0x1a0>
    1382:	f8d8 3000 	ldr.w	r3, [r8]
    1386:	3301      	adds	r3, #1
    1388:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    138c:	4632      	mov	r2, r6
    138e:	4659      	mov	r1, fp
    1390:	4650      	mov	r0, sl
    1392:	f004 fcbf 	bl	5d14 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    139a:	4649      	mov	r1, r9
    139c:	1a9b      	subs	r3, r3, r2
    139e:	4628      	mov	r0, r5
    13a0:	4652      	mov	r2, sl
    13a2:	e9cd b600 	strd	fp, r6, [sp]
    13a6:	f7ff fbff 	bl	ba8 <boot_copy_region>
        rc = boot_write_status(state, bs);
    13aa:	4621      	mov	r1, r4
    13ac:	4628      	mov	r0, r5
    13ae:	f004 fc7f 	bl	5cb0 <boot_write_status>
        bs->idx++;
    13b2:	6823      	ldr	r3, [r4, #0]
    13b4:	3301      	adds	r3, #1
    13b6:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    13b8:	f04f 0301 	mov.w	r3, #1
    13bc:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    13be:	b138      	cbz	r0, 13d0 <swap_run+0x1e4>
    13c0:	f8d8 3000 	ldr.w	r3, [r8]
    13c4:	3301      	adds	r3, #1
    13c6:	f8c8 3000 	str.w	r3, [r8]
    13ca:	e001      	b.n	13d0 <swap_run+0x1e4>
    if (bs->state == BOOT_STATUS_STATE_1) {
    13cc:	2902      	cmp	r1, #2
    13ce:	d0dd      	beq.n	138c <swap_run+0x1a0>
        idx++;
    13d0:	3701      	adds	r7, #1
    13d2:	e758      	b.n	1286 <swap_run+0x9a>
    13d4:	2000c504 	.word	0x2000c504
    13d8:	000093e0 	.word	0x000093e0
    13dc:	2000db80 	.word	0x2000db80

000013e0 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    13e0:	b538      	push	{r3, r4, r5, lr}
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    13e2:	f04f 34ff 	mov.w	r4, #4294967295
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13e6:	2301      	movs	r3, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13e8:	2500      	movs	r5, #0
    13ea:	4a1a      	ldr	r2, [pc, #104]	; (1454 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    13ec:	4629      	mov	r1, r5
    13ee:	6013      	str	r3, [r2, #0]
    p_reg->EVTENCLR = mask;
    13f0:	f8c2 4344 	str.w	r4, [r2, #836]	; 0x344
    p_reg->INTENCLR = mask;
    13f4:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    13fc:	6013      	str	r3, [r2, #0]
    p_reg->EVTENCLR = mask;
    13fe:	4b16      	ldr	r3, [pc, #88]	; (1458 <nrf_cleanup_peripheral+0x78>)
    1400:	2280      	movs	r2, #128	; 0x80
    1402:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1406:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    140a:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    140e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1412:	4812      	ldr	r0, [pc, #72]	; (145c <nrf_cleanup_peripheral+0x7c>)
    p_reg->INTENCLR = mask;
    1414:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1418:	f005 f9f6 	bl	6808 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    141c:	2280      	movs	r2, #128	; 0x80
    141e:	4629      	mov	r1, r5
    1420:	480f      	ldr	r0, [pc, #60]	; (1460 <nrf_cleanup_peripheral+0x80>)
    1422:	f005 f9f1 	bl	6808 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <nrf_cleanup_peripheral+0x84>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1428:	2280      	movs	r2, #128	; 0x80
    142a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    142e:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    1430:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1434:	480c      	ldr	r0, [pc, #48]	; (1468 <nrf_cleanup_peripheral+0x88>)
    1436:	f005 f9e7 	bl	6808 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    143a:	2280      	movs	r2, #128	; 0x80
    143c:	4629      	mov	r1, r5
    143e:	480b      	ldr	r0, [pc, #44]	; (146c <nrf_cleanup_peripheral+0x8c>)
    1440:	f005 f9e2 	bl	6808 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    1444:	4b0a      	ldr	r3, [pc, #40]	; (1470 <nrf_cleanup_peripheral+0x90>)
    1446:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    144a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    144e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1452:	bd38      	pop	{r3, r4, r5, pc}
    1454:	50014004 	.word	0x50014004
    1458:	50015000 	.word	0x50015000
    145c:	50008080 	.word	0x50008080
    1460:	50008180 	.word	0x50008180
    1464:	50009000 	.word	0x50009000
    1468:	50009080 	.word	0x50009080
    146c:	50009180 	.word	0x50009180
    1470:	50017000 	.word	0x50017000

00001474 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1478:	4605      	mov	r5, r0
    147a:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    147c:	b910      	cbnz	r0, 1484 <base64_encode+0x10>
		*olen = 0;
    147e:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    1484:	2403      	movs	r4, #3
    1486:	fbb0 f4f4 	udiv	r4, r0, r4
    148a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    148e:	42b8      	cmp	r0, r7
    1490:	bf18      	it	ne
    1492:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1494:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1498:	d305      	bcc.n	14a6 <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    149a:	f04f 33ff 	mov.w	r3, #4294967295
    149e:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    14a0:	f06f 000b 	mvn.w	r0, #11
    14a4:	e7ec      	b.n	1480 <base64_encode+0xc>
	n *= 4;
    14a6:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    14a8:	3401      	adds	r4, #1
    14aa:	428c      	cmp	r4, r1
    14ac:	d800      	bhi.n	14b0 <base64_encode+0x3c>
    14ae:	b90d      	cbnz	r5, 14b4 <base64_encode+0x40>
		*olen = n + 1;
    14b0:	6014      	str	r4, [r2, #0]
    14b2:	e7f5      	b.n	14a0 <base64_encode+0x2c>
	for (i = 0, p = dst; i < n; i += 3) {
    14b4:	462e      	mov	r6, r5
    14b6:	2400      	movs	r4, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14b8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1570 <base64_encode+0xfc>
	for (i = 0, p = dst; i < n; i += 3) {
    14bc:	42bc      	cmp	r4, r7
    14be:	4631      	mov	r1, r6
    14c0:	469c      	mov	ip, r3
    14c2:	f106 0604 	add.w	r6, r6, #4
    14c6:	f103 0303 	add.w	r3, r3, #3
    14ca:	d329      	bcc.n	1520 <base64_encode+0xac>
	if (i < slen) {
    14cc:	4284      	cmp	r4, r0
    14ce:	d222      	bcs.n	1516 <base64_encode+0xa2>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14d0:	3401      	adds	r4, #1
    14d2:	4284      	cmp	r4, r0
    14d4:	bf28      	it	cs
    14d6:	2300      	movcs	r3, #0
		C1 = *src++;
    14d8:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14dc:	4f24      	ldr	r7, [pc, #144]	; (1570 <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14de:	bf38      	it	cc
    14e0:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14e4:	ea4f 0ca6 	mov.w	ip, r6, asr #2
    14e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
		if ((i + 1) < slen) {
    14ec:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14ee:	f881 c000 	strb.w	ip, [r1]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14f2:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = '=';
    14f6:	bf2f      	iteee	cs
    14f8:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14fa:	009b      	lslcc	r3, r3, #2
    14fc:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
    1500:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1502:	0136      	lsls	r6, r6, #4
    1504:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    1506:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1508:	f006 0630 	and.w	r6, r6, #48	; 0x30
    150c:	f81c 6006 	ldrb.w	r6, [ip, r6]
		*p++ = '=';
    1510:	70cb      	strb	r3, [r1, #3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1512:	704e      	strb	r6, [r1, #1]
		*p++ = '=';
    1514:	3104      	adds	r1, #4
	*p = 0U;
    1516:	2000      	movs	r0, #0
	*olen = p - dst;
    1518:	1b4d      	subs	r5, r1, r5
    151a:	6015      	str	r5, [r2, #0]
	*p = 0U;
    151c:	7008      	strb	r0, [r1, #0]
	return 0;
    151e:	e7af      	b.n	1480 <base64_encode+0xc>
		C1 = *src++;
    1520:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    1524:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1528:	ea4f 09ac 	mov.w	r9, ip, asr #2
    152c:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1530:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		C3 = *src++;
    1534:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1538:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    153c:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1540:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
    1544:	f819 c00c 	ldrb.w	ip, [r9, ip]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1548:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    154a:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    154e:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    1552:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
    1556:	f81c 1001 	ldrb.w	r1, [ip, r1]
		*p++ = base64_enc_map[C3 & 0x3F];
    155a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    155e:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1562:	f81e 1008 	ldrb.w	r1, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    1566:	3403      	adds	r4, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    1568:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    156c:	e7a6      	b.n	14bc <base64_encode+0x48>
    156e:	bf00      	nop
    1570:	0000959d 	.word	0x0000959d

00001574 <base64_decode>:
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    1574:	f04f 0c00 	mov.w	ip, #0
{
    1578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    157c:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    157e:	4665      	mov	r5, ip
    1580:	4660      	mov	r0, ip
{
    1582:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1584:	f8df 8120 	ldr.w	r8, [pc, #288]	; 16a8 <base64_decode+0x134>
	for (i = n = j = 0U; i < slen; i++) {
    1588:	42b5      	cmp	r5, r6
    158a:	d30a      	bcc.n	15a2 <base64_decode+0x2e>
    158c:	462e      	mov	r6, r5
    158e:	e004      	b.n	159a <base64_decode+0x26>
			++i;
    1590:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    1592:	42ae      	cmp	r6, r5
			++x;
    1594:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    1598:	d105      	bne.n	15a6 <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    159a:	bba8      	cbnz	r0, 1608 <base64_decode+0x94>
		*olen = 0;
    159c:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    15a2:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    15a6:	5d5c      	ldrb	r4, [r3, r5]
    15a8:	2c20      	cmp	r4, #32
    15aa:	d0f1      	beq.n	1590 <base64_decode+0x1c>
		if (i == slen) {
    15ac:	42ae      	cmp	r6, r5
    15ae:	d0f4      	beq.n	159a <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    15b0:	eba6 0905 	sub.w	r9, r6, r5
    15b4:	f1b9 0f01 	cmp.w	r9, #1
    15b8:	d915      	bls.n	15e6 <base64_decode+0x72>
    15ba:	2c0d      	cmp	r4, #13
    15bc:	d113      	bne.n	15e6 <base64_decode+0x72>
    15be:	eb03 0905 	add.w	r9, r3, r5
    15c2:	f899 9001 	ldrb.w	r9, [r9, #1]
    15c6:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    15ca:	d01b      	beq.n	1604 <base64_decode+0x90>
		if (x != 0U) {
    15cc:	f1be 0f00 	cmp.w	lr, #0
    15d0:	d106      	bne.n	15e0 <base64_decode+0x6c>
		if (src[i] == '=' && ++j > 2) {
    15d2:	2c3d      	cmp	r4, #61	; 0x3d
    15d4:	d109      	bne.n	15ea <base64_decode+0x76>
    15d6:	f10c 0c01 	add.w	ip, ip, #1
    15da:	f1bc 0f02 	cmp.w	ip, #2
    15de:	d907      	bls.n	15f0 <base64_decode+0x7c>
			return -EINVAL;
    15e0:	f06f 0015 	mvn.w	r0, #21
    15e4:	e7db      	b.n	159e <base64_decode+0x2a>
		if (src[i] == '\n') {
    15e6:	2c0a      	cmp	r4, #10
    15e8:	e7ef      	b.n	15ca <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    15ea:	f014 0f80 	tst.w	r4, #128	; 0x80
    15ee:	d1f7      	bne.n	15e0 <base64_decode+0x6c>
    15f0:	f818 4004 	ldrb.w	r4, [r8, r4]
    15f4:	2c7f      	cmp	r4, #127	; 0x7f
    15f6:	d0f3      	beq.n	15e0 <base64_decode+0x6c>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    15f8:	2c3f      	cmp	r4, #63	; 0x3f
    15fa:	d802      	bhi.n	1602 <base64_decode+0x8e>
    15fc:	f1bc 0f00 	cmp.w	ip, #0
    1600:	d1ee      	bne.n	15e0 <base64_decode+0x6c>
		n++;
    1602:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    1604:	3501      	adds	r5, #1
    1606:	e7bf      	b.n	1588 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1608:	2506      	movs	r5, #6
    160a:	f000 0407 	and.w	r4, r0, #7
    160e:	436c      	muls	r4, r5
    1610:	f104 0e07 	add.w	lr, r4, #7
    1614:	08c4      	lsrs	r4, r0, #3
    1616:	436c      	muls	r4, r5
    1618:	eba4 040c 	sub.w	r4, r4, ip
	n -= j;
    161c:	eb04 04de 	add.w	r4, r4, lr, lsr #3
	if (dst == NULL || dlen < n) {
    1620:	b187      	cbz	r7, 1644 <base64_decode+0xd0>
    1622:	428c      	cmp	r4, r1
    1624:	d80e      	bhi.n	1644 <base64_decode+0xd0>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1626:	2500      	movs	r5, #0
	if (dst == NULL || dlen < n) {
    1628:	4639      	mov	r1, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    162a:	2403      	movs	r4, #3
    162c:	4628      	mov	r0, r5
		j -= (base64_dec_map[*src] == 64U);
    162e:	f8df e078 	ldr.w	lr, [pc, #120]	; 16a8 <base64_decode+0x134>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1632:	f8df 8078 	ldr.w	r8, [pc, #120]	; 16ac <base64_decode+0x138>
    1636:	441e      	add	r6, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1638:	429e      	cmp	r6, r3
    163a:	d107      	bne.n	164c <base64_decode+0xd8>
	*olen = p - dst;
    163c:	1bc9      	subs	r1, r1, r7
	return 0;
    163e:	2000      	movs	r0, #0
	*olen = p - dst;
    1640:	6011      	str	r1, [r2, #0]
	return 0;
    1642:	e7ac      	b.n	159e <base64_decode+0x2a>
		return -ENOMEM;
    1644:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    1648:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    164a:	e7a8      	b.n	159e <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    164c:	f813 9b01 	ldrb.w	r9, [r3], #1
    1650:	f1a9 0c0a 	sub.w	ip, r9, #10
    1654:	fa5f fc8c 	uxtb.w	ip, ip
    1658:	f1bc 0f16 	cmp.w	ip, #22
    165c:	d804      	bhi.n	1668 <base64_decode+0xf4>
    165e:	fa28 fc0c 	lsr.w	ip, r8, ip
    1662:	f01c 0f01 	tst.w	ip, #1
    1666:	d1e7      	bne.n	1638 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    1668:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    166c:	3001      	adds	r0, #1
		j -= (base64_dec_map[*src] == 64U);
    166e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    1672:	bf08      	it	eq
    1674:	3c01      	subeq	r4, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1676:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    167a:	2804      	cmp	r0, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    167c:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
		if (++n == 4) {
    1680:	d1da      	bne.n	1638 <base64_decode+0xc4>
			if (j > 0) {
    1682:	b17c      	cbz	r4, 16a4 <base64_decode+0x130>
				*p++ = (unsigned char)(x >> 16);
    1684:	0c28      	lsrs	r0, r5, #16
			if (j > 1) {
    1686:	2c01      	cmp	r4, #1
				*p++ = (unsigned char)(x >> 16);
    1688:	7008      	strb	r0, [r1, #0]
			if (j > 1) {
    168a:	d102      	bne.n	1692 <base64_decode+0x11e>
				*p++ = (unsigned char)(x >> 16);
    168c:	3101      	adds	r1, #1
			n = 0;
    168e:	2000      	movs	r0, #0
    1690:	e7d2      	b.n	1638 <base64_decode+0xc4>
			if (j > 2) {
    1692:	2c02      	cmp	r4, #2
				*p++ = (unsigned char)(x >> 8);
    1694:	ea4f 2015 	mov.w	r0, r5, lsr #8
    1698:	7048      	strb	r0, [r1, #1]
				*p++ = (unsigned char)(x);
    169a:	bf16      	itet	ne
    169c:	708d      	strbne	r5, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    169e:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    16a0:	3103      	addne	r1, #3
    16a2:	e7f4      	b.n	168e <base64_decode+0x11a>
			n = 0;
    16a4:	4620      	mov	r0, r4
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16a6:	e7c7      	b.n	1638 <base64_decode+0xc4>
    16a8:	0000951d 	.word	0x0000951d
    16ac:	00400009 	.word	0x00400009

000016b0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    16b0:	680b      	ldr	r3, [r1, #0]
    16b2:	3301      	adds	r3, #1
    16b4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    16b6:	4b01      	ldr	r3, [pc, #4]	; (16bc <char_out+0xc>)
    16b8:	681b      	ldr	r3, [r3, #0]
    16ba:	4718      	bx	r3
    16bc:	2000c508 	.word	0x2000c508

000016c0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    16c0:	b507      	push	{r0, r1, r2, lr}
    16c2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    16c4:	2100      	movs	r1, #0
{
    16c6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    16c8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    16ca:	4803      	ldr	r0, [pc, #12]	; (16d8 <vprintk+0x18>)
    16cc:	a901      	add	r1, sp, #4
    16ce:	f000 f8eb 	bl	18a8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    16d2:	b003      	add	sp, #12
    16d4:	f85d fb04 	ldr.w	pc, [sp], #4
    16d8:	000016b1 	.word	0x000016b1

000016dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    16dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16e0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    16e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    16e6:	f019 0808 	ands.w	r8, r9, #8
{
    16ea:	4693      	mov	fp, r2
	if (processing) {
    16ec:	d00d      	beq.n	170a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    16ee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16f0:	bf0c      	ite	eq
    16f2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    16f6:	f049 0920 	orrne.w	r9, r9, #32
    16fa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    16fe:	f38b 8811 	msr	BASEPRI, fp
    1702:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    170a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    170e:	2902      	cmp	r1, #2
    1710:	d107      	bne.n	1722 <process_event+0x46>
			evt = process_recheck(mgr);
    1712:	4620      	mov	r0, r4
    1714:	f004 fc31 	bl	5f7a <process_recheck>
		if (evt == EVT_NOP) {
    1718:	2800      	cmp	r0, #0
    171a:	d0f0      	beq.n	16fe <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    171c:	2801      	cmp	r0, #1
    171e:	8b23      	ldrh	r3, [r4, #24]
    1720:	d150      	bne.n	17c4 <process_event+0xe8>
			res = mgr->last_res;
    1722:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1724:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1726:	2f00      	cmp	r7, #0
    1728:	da15      	bge.n	1756 <process_event+0x7a>
		*clients = mgr->clients;
    172a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1730:	e9c4 8800 	strd	r8, r8, [r4]
    1734:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1738:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    173a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    173c:	8b21      	ldrh	r1, [r4, #24]
    173e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1742:	45ca      	cmp	sl, r9
    1744:	d002      	beq.n	174c <process_event+0x70>
		if (do_monitors
    1746:	68a3      	ldr	r3, [r4, #8]
    1748:	2b00      	cmp	r3, #0
    174a:	d15c      	bne.n	1806 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    174c:	b90d      	cbnz	r5, 1752 <process_event+0x76>
		    || (transit != NULL)) {
    174e:	2e00      	cmp	r6, #0
    1750:	d074      	beq.n	183c <process_event+0x160>
    1752:	2300      	movs	r3, #0
    1754:	e058      	b.n	1808 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1756:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    175a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    175c:	2a01      	cmp	r2, #1
    175e:	d820      	bhi.n	17a2 <process_event+0xc6>
		*clients = mgr->clients;
    1760:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1764:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1766:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1768:	b289      	uxth	r1, r1
	list->tail = NULL;
    176a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    176e:	d10c      	bne.n	178a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1770:	2d00      	cmp	r5, #0
    1772:	462b      	mov	r3, r5
    1774:	bf38      	it	cc
    1776:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1778:	b12b      	cbz	r3, 1786 <process_event+0xaa>
				mgr->refs += 1U;
    177a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	3201      	adds	r2, #1
    1780:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1782:	2b00      	cmp	r3, #0
    1784:	d1f8      	bne.n	1778 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1786:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    178a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    178c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    178e:	f004 fbf4 	bl	5f7a <process_recheck>
    1792:	4606      	mov	r6, r0
    1794:	2800      	cmp	r0, #0
    1796:	d0d1      	beq.n	173c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1798:	8b23      	ldrh	r3, [r4, #24]
    179a:	f043 0320 	orr.w	r3, r3, #32
    179e:	8323      	strh	r3, [r4, #24]
    17a0:	e7cb      	b.n	173a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    17a2:	2b04      	cmp	r3, #4
    17a4:	d10c      	bne.n	17c0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17a6:	f021 0107 	bic.w	r1, r1, #7
    17aa:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    17ac:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    17ae:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    17b0:	f004 fbe3 	bl	5f7a <process_recheck>
    17b4:	4605      	mov	r5, r0
    17b6:	2800      	cmp	r0, #0
    17b8:	d0bf      	beq.n	173a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17ba:	f041 0120 	orr.w	r1, r1, #32
    17be:	8321      	strh	r1, [r4, #24]
    17c0:	2500      	movs	r5, #0
    17c2:	e7ba      	b.n	173a <process_event+0x5e>
		} else if (evt == EVT_START) {
    17c4:	2803      	cmp	r0, #3
    17c6:	d109      	bne.n	17dc <process_event+0x100>
			transit = mgr->transitions->start;
    17c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    17ce:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d0:	f043 0306 	orr.w	r3, r3, #6
}
    17d4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    17d6:	8323      	strh	r3, [r4, #24]
		res = 0;
    17d8:	462f      	mov	r7, r5
    17da:	e7af      	b.n	173c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    17dc:	2804      	cmp	r0, #4
    17de:	d106      	bne.n	17ee <process_event+0x112>
			transit = mgr->transitions->stop;
    17e0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17e2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    17e6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17e8:	f043 0304 	orr.w	r3, r3, #4
    17ec:	e7f2      	b.n	17d4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    17ee:	2805      	cmp	r0, #5
    17f0:	d106      	bne.n	1800 <process_event+0x124>
			transit = mgr->transitions->reset;
    17f2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17f4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    17f8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17fa:	f043 0305 	orr.w	r3, r3, #5
    17fe:	e7e9      	b.n	17d4 <process_event+0xf8>
    1800:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1802:	462e      	mov	r6, r5
    1804:	e7e8      	b.n	17d8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    1806:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1808:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    180c:	8321      	strh	r1, [r4, #24]
    180e:	f38b 8811 	msr	BASEPRI, fp
    1812:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1816:	bb03      	cbnz	r3, 185a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1818:	2d00      	cmp	r5, #0
    181a:	d133      	bne.n	1884 <process_event+0x1a8>
			if (transit != NULL) {
    181c:	b116      	cbz	r6, 1824 <process_event+0x148>
				transit(mgr, transition_complete);
    181e:	4620      	mov	r0, r4
    1820:	4920      	ldr	r1, [pc, #128]	; (18a4 <process_event+0x1c8>)
    1822:	47b0      	blx	r6
	__asm__ volatile(
    1824:	f04f 0320 	mov.w	r3, #32
    1828:	f3ef 8b11 	mrs	fp, BASEPRI
    182c:	f383 8812 	msr	BASEPRI_MAX, r3
    1830:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1834:	8b23      	ldrh	r3, [r4, #24]
    1836:	f023 0308 	bic.w	r3, r3, #8
    183a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    183c:	8b23      	ldrh	r3, [r4, #24]
    183e:	06da      	lsls	r2, r3, #27
    1840:	d528      	bpl.n	1894 <process_event+0x1b8>
			evt = EVT_COMPLETE;
    1842:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1844:	f023 0310 	bic.w	r3, r3, #16
    1848:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    184a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    184e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1852:	2900      	cmp	r1, #0
    1854:	f47f af5b 	bne.w	170e <process_event+0x32>
out:
    1858:	e751      	b.n	16fe <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    185a:	68a1      	ldr	r1, [r4, #8]
    185c:	2900      	cmp	r1, #0
    185e:	d0db      	beq.n	1818 <process_event+0x13c>
	return node->next;
    1860:	680b      	ldr	r3, [r1, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	bf38      	it	cc
    1866:	2300      	movcc	r3, #0
    1868:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    186a:	4652      	mov	r2, sl
    186c:	463b      	mov	r3, r7
    186e:	4620      	mov	r0, r4
    1870:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1874:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1876:	f1b9 0f00 	cmp.w	r9, #0
    187a:	d0cd      	beq.n	1818 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    187c:	4649      	mov	r1, r9
    187e:	f8d9 3000 	ldr.w	r3, [r9]
    1882:	e7ee      	b.n	1862 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1884:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1886:	463b      	mov	r3, r7
    1888:	4652      	mov	r2, sl
    188a:	4620      	mov	r0, r4
    188c:	682d      	ldr	r5, [r5, #0]
    188e:	f004 fb90 	bl	5fb2 <notify_one>
    1892:	e7c1      	b.n	1818 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1894:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1898:	bf1e      	ittt	ne
    189a:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    189e:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18a0:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    18a2:	e7d2      	b.n	184a <process_event+0x16e>
    18a4:	00005fdf 	.word	0x00005fdf

000018a8 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    18a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18ac:	468b      	mov	fp, r1
	size_t count = 0;
    18ae:	f04f 0a00 	mov.w	sl, #0
{
    18b2:	b08f      	sub	sp, #60	; 0x3c
    18b4:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18b6:	1e53      	subs	r3, r2, #1
{
    18b8:	9000      	str	r0, [sp, #0]
	fmt--;
    18ba:	9301      	str	r3, [sp, #4]

start:
	while (*++fmt != '%') {
    18bc:	9b01      	ldr	r3, [sp, #4]
    18be:	7858      	ldrb	r0, [r3, #1]
    18c0:	1c5c      	adds	r4, r3, #1
    18c2:	2825      	cmp	r0, #37	; 0x25
    18c4:	d122      	bne.n	190c <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    18c6:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    18ca:	f04f 36ff 	mov.w	r6, #4294967295

	for (fmt++ ; ; fmt++) {
    18ce:	4618      	mov	r0, r3
	length_mod = 0;
    18d0:	4661      	mov	r1, ip
	min_width = -1;
    18d2:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    18d4:	f04f 0e0a 	mov.w	lr, #10
	for (fmt++ ; ; fmt++) {
    18d8:	3002      	adds	r0, #2
	padding_mode = 0;
    18da:	f8cd c008 	str.w	ip, [sp, #8]
		switch (*fmt) {
    18de:	7802      	ldrb	r2, [r0, #0]
    18e0:	9001      	str	r0, [sp, #4]
    18e2:	2a39      	cmp	r2, #57	; 0x39
    18e4:	f100 0001 	add.w	r0, r0, #1
    18e8:	d858      	bhi.n	199c <cbvprintf+0xf4>
    18ea:	2a1f      	cmp	r2, #31
    18ec:	d818      	bhi.n	1920 <cbvprintf+0x78>
    18ee:	2a00      	cmp	r2, #0
    18f0:	f000 81ff 	beq.w	1cf2 <cbvprintf+0x44a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    18f4:	4659      	mov	r1, fp
    18f6:	9b00      	ldr	r3, [sp, #0]
    18f8:	2025      	movs	r0, #37	; 0x25
    18fa:	4798      	blx	r3
			OUTC(*fmt);
    18fc:	9b01      	ldr	r3, [sp, #4]
    18fe:	4659      	mov	r1, fp
    1900:	7818      	ldrb	r0, [r3, #0]
    1902:	9b00      	ldr	r3, [sp, #0]
    1904:	4798      	blx	r3
    1906:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    190a:	e7d7      	b.n	18bc <cbvprintf+0x14>
		if (*fmt == '\0') {
    190c:	2800      	cmp	r0, #0
    190e:	f000 81f0 	beq.w	1cf2 <cbvprintf+0x44a>
		OUTC(*fmt);
    1912:	4659      	mov	r1, fp
    1914:	9b00      	ldr	r3, [sp, #0]
    1916:	4798      	blx	r3
    1918:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    191c:	9401      	str	r4, [sp, #4]
    191e:	e7cd      	b.n	18bc <cbvprintf+0x14>
    1920:	f1a2 0320 	sub.w	r3, r2, #32
    1924:	2b19      	cmp	r3, #25
    1926:	d8e5      	bhi.n	18f4 <cbvprintf+0x4c>
    1928:	a501      	add	r5, pc, #4	; (adr r5, 1930 <cbvprintf+0x88>)
    192a:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    192e:	bf00      	nop
    1930:	00001999 	.word	0x00001999
    1934:	000018f5 	.word	0x000018f5
    1938:	000018f5 	.word	0x000018f5
    193c:	00001999 	.word	0x00001999
    1940:	000018f5 	.word	0x000018f5
    1944:	00001a19 	.word	0x00001a19
    1948:	000018f5 	.word	0x000018f5
    194c:	000018f5 	.word	0x000018f5
    1950:	000018f5 	.word	0x000018f5
    1954:	000018f5 	.word	0x000018f5
    1958:	00001a5b 	.word	0x00001a5b
    195c:	00001999 	.word	0x00001999
    1960:	000018f5 	.word	0x000018f5
    1964:	00001a6f 	.word	0x00001a6f
    1968:	00001a27 	.word	0x00001a27
    196c:	000018f5 	.word	0x000018f5
    1970:	00001a33 	.word	0x00001a33
    1974:	00001a4f 	.word	0x00001a4f
    1978:	00001a4f 	.word	0x00001a4f
    197c:	00001a4f 	.word	0x00001a4f
    1980:	00001a4f 	.word	0x00001a4f
    1984:	00001a4f 	.word	0x00001a4f
    1988:	00001a4f 	.word	0x00001a4f
    198c:	00001a4f 	.word	0x00001a4f
    1990:	00001a4f 	.word	0x00001a4f
    1994:	00001a4f 	.word	0x00001a4f
		switch (*fmt) {
    1998:	4694      	mov	ip, r2
    199a:	e7a0      	b.n	18de <cbvprintf+0x36>
    199c:	2a58      	cmp	r2, #88	; 0x58
    199e:	f000 8140 	beq.w	1c22 <cbvprintf+0x37a>
    19a2:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    19a6:	b2dd      	uxtb	r5, r3
    19a8:	2d17      	cmp	r5, #23
    19aa:	d8a3      	bhi.n	18f4 <cbvprintf+0x4c>
    19ac:	2b17      	cmp	r3, #23
    19ae:	d8a1      	bhi.n	18f4 <cbvprintf+0x4c>
    19b0:	a501      	add	r5, pc, #4	; (adr r5, 19b8 <cbvprintf+0x110>)
    19b2:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    19b6:	bf00      	nop
    19b8:	00001c7d 	.word	0x00001c7d
    19bc:	00001a95 	.word	0x00001a95
    19c0:	000018f5 	.word	0x000018f5
    19c4:	000018f5 	.word	0x000018f5
    19c8:	000018f5 	.word	0x000018f5
    19cc:	00001a75 	.word	0x00001a75
    19d0:	00001a95 	.word	0x00001a95
    19d4:	000018f5 	.word	0x000018f5
    19d8:	000018f5 	.word	0x000018f5
    19dc:	00001a75 	.word	0x00001a75
    19e0:	000018f5 	.word	0x000018f5
    19e4:	000018f5 	.word	0x000018f5
    19e8:	000018f5 	.word	0x000018f5
    19ec:	00001bcd 	.word	0x00001bcd
    19f0:	000018f5 	.word	0x000018f5
    19f4:	000018f5 	.word	0x000018f5
    19f8:	00001c5f 	.word	0x00001c5f
    19fc:	000018f5 	.word	0x000018f5
    1a00:	00001a95 	.word	0x00001a95
    1a04:	000018f5 	.word	0x000018f5
    1a08:	000018f5 	.word	0x000018f5
    1a0c:	00001bcd 	.word	0x00001bcd
    1a10:	000018f5 	.word	0x000018f5
    1a14:	00001a75 	.word	0x00001a75
			OUTC('%');
    1a18:	4659      	mov	r1, fp
    1a1a:	2025      	movs	r0, #37	; 0x25
    1a1c:	9b00      	ldr	r3, [sp, #0]
    1a1e:	4798      	blx	r3
    1a20:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    1a24:	e74a      	b.n	18bc <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a26:	9b02      	ldr	r3, [sp, #8]
			precision = 0;
    1a28:	2600      	movs	r6, #0
			padding_mode &= (char)~PAD_ZERO;
    1a2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1a2e:	9302      	str	r3, [sp, #8]
			continue;
    1a30:	e755      	b.n	18de <cbvprintf+0x36>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a32:	2c00      	cmp	r4, #0
    1a34:	da0b      	bge.n	1a4e <cbvprintf+0x1a6>
    1a36:	2e00      	cmp	r6, #0
    1a38:	da0b      	bge.n	1a52 <cbvprintf+0x1aa>
    1a3a:	9b02      	ldr	r3, [sp, #8]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	f000 8154 	beq.w	1cea <cbvprintf+0x442>
				min_width = 10 * min_width + *fmt - '0';
    1a42:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1a46:	fb0e 2404 	mla	r4, lr, r4, r2
    1a4a:	3c30      	subs	r4, #48	; 0x30
    1a4c:	e747      	b.n	18de <cbvprintf+0x36>
			if (precision >= 0) {
    1a4e:	2e00      	cmp	r6, #0
    1a50:	dbf7      	blt.n	1a42 <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    1a52:	fb0e 2606 	mla	r6, lr, r6, r2
    1a56:	3e30      	subs	r6, #48	; 0x30
    1a58:	e741      	b.n	18de <cbvprintf+0x36>
			if (precision >= 0) {
    1a5a:	2e00      	cmp	r6, #0
    1a5c:	f857 3b04 	ldr.w	r3, [r7], #4
    1a60:	db01      	blt.n	1a66 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    1a62:	461e      	mov	r6, r3
    1a64:	e73b      	b.n	18de <cbvprintf+0x36>
				if (min_width < 0) {
    1a66:	1e1c      	subs	r4, r3, #0
    1a68:	f6bf af39 	bge.w	18de <cbvprintf+0x36>
					min_width = -min_width;
    1a6c:	4264      	negs	r4, r4
		switch (*fmt) {
    1a6e:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1a70:	9302      	str	r3, [sp, #8]
    1a72:	e734      	b.n	18de <cbvprintf+0x36>
			if (*fmt == 'h' && length_mod == 'h') {
    1a74:	2a68      	cmp	r2, #104	; 0x68
    1a76:	d103      	bne.n	1a80 <cbvprintf+0x1d8>
    1a78:	2968      	cmp	r1, #104	; 0x68
    1a7a:	d106      	bne.n	1a8a <cbvprintf+0x1e2>
				length_mod = 'H';
    1a7c:	2148      	movs	r1, #72	; 0x48
    1a7e:	e72e      	b.n	18de <cbvprintf+0x36>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1a80:	2a6c      	cmp	r2, #108	; 0x6c
    1a82:	d102      	bne.n	1a8a <cbvprintf+0x1e2>
    1a84:	296c      	cmp	r1, #108	; 0x6c
    1a86:	f000 8132 	beq.w	1cee <cbvprintf+0x446>
			} else if (length_mod == '\0') {
    1a8a:	2900      	cmp	r1, #0
    1a8c:	f47f af32 	bne.w	18f4 <cbvprintf+0x4c>
    1a90:	4611      	mov	r1, r2
		switch (*fmt) {
    1a92:	e724      	b.n	18de <cbvprintf+0x36>
			if (length_mod == 'z') {
    1a94:	297a      	cmp	r1, #122	; 0x7a
    1a96:	d10f      	bne.n	1ab8 <cbvprintf+0x210>
				d = va_arg(ap, unsigned int);
    1a98:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    1a9a:	2a75      	cmp	r2, #117	; 0x75
				d = va_arg(ap, unsigned int);
    1a9c:	4698      	mov	r8, r3
    1a9e:	f107 0504 	add.w	r5, r7, #4
			} else if (*fmt == 'u') {
    1aa2:	f040 8088 	bne.w	1bb6 <cbvprintf+0x30e>
				d = va_arg(ap, unsigned int);
    1aa6:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    1aaa:	f1bc 0f20 	cmp.w	ip, #32
    1aae:	f040 8085 	bne.w	1bbc <cbvprintf+0x314>
				prefix = " ";
    1ab2:	4f92      	ldr	r7, [pc, #584]	; (1cfc <cbvprintf+0x454>)
				min_width--;
    1ab4:	3c01      	subs	r4, #1
    1ab6:	e015      	b.n	1ae4 <cbvprintf+0x23c>
			} else if (length_mod == 'l') {
    1ab8:	296c      	cmp	r1, #108	; 0x6c
    1aba:	d0ed      	beq.n	1a98 <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    1abc:	294c      	cmp	r1, #76	; 0x4c
    1abe:	d1eb      	bne.n	1a98 <cbvprintf+0x1f0>
				if (*fmt == 'u') {
    1ac0:	1dfd      	adds	r5, r7, #7
    1ac2:	f025 0507 	bic.w	r5, r5, #7
    1ac6:	2a75      	cmp	r2, #117	; 0x75
    1ac8:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    1acc:	d0ed      	beq.n	1aaa <cbvprintf+0x202>
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1ace:	f1b8 0f00 	cmp.w	r8, #0
    1ad2:	f179 0300 	sbcs.w	r3, r9, #0
    1ad6:	dae8      	bge.n	1aaa <cbvprintf+0x202>
				d = -d;
    1ad8:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    1adc:	4f88      	ldr	r7, [pc, #544]	; (1d00 <cbvprintf+0x458>)
				d = -d;
    1ade:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    1ae2:	3c01      	subs	r4, #1
	int i = 0;
    1ae4:	ab0d      	add	r3, sp, #52	; 0x34
    1ae6:	9305      	str	r3, [sp, #20]
    1ae8:	2300      	movs	r3, #0
    1aea:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    1aec:	9b03      	ldr	r3, [sp, #12]
		unsigned int c = num % base;
    1aee:	4640      	mov	r0, r8
    1af0:	9304      	str	r3, [sp, #16]
		buftop[--i] = c + '0';
    1af2:	3b01      	subs	r3, #1
		unsigned int c = num % base;
    1af4:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    1af6:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    1af8:	220a      	movs	r2, #10
    1afa:	2300      	movs	r3, #0
    1afc:	f7fe fb22 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1b00:	9b05      	ldr	r3, [sp, #20]
    1b02:	3230      	adds	r2, #48	; 0x30
    1b04:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    1b08:	4640      	mov	r0, r8
    1b0a:	220a      	movs	r2, #10
    1b0c:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    1b0e:	9305      	str	r3, [sp, #20]
		num /= base;
    1b10:	2300      	movs	r3, #0
    1b12:	e9cd 8906 	strd	r8, r9, [sp, #24]
    1b16:	f7fe fb15 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	bf08      	it	eq
    1b22:	2a0a      	cmpeq	r2, #10
		num /= base;
    1b24:	4680      	mov	r8, r0
    1b26:	4689      	mov	r9, r1
	} while (num);
    1b28:	d2e0      	bcs.n	1aec <cbvprintf+0x244>
	return -i;
    1b2a:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    1b2c:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    1b2e:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b32:	eb02 0803 	add.w	r8, r2, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b36:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    1b38:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b3c:	da04      	bge.n	1b48 <cbvprintf+0x2a0>
    1b3e:	9b02      	ldr	r3, [sp, #8]
    1b40:	f013 0f01 	tst.w	r3, #1
    1b44:	bf18      	it	ne
    1b46:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b48:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    1b4c:	2b00      	cmp	r3, #0
		precision -= data_len;
    1b4e:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1b50:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    1b52:	bfd4      	ite	le
    1b54:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    1b58:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    1b5a:	079a      	lsls	r2, r3, #30
    1b5c:	f140 80af 	bpl.w	1cbe <cbvprintf+0x416>
    1b60:	ebaa 0607 	sub.w	r6, sl, r7
    1b64:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    1b68:	f817 0b01 	ldrb.w	r0, [r7], #1
    1b6c:	2800      	cmp	r0, #0
    1b6e:	f040 80a8 	bne.w	1cc2 <cbvprintf+0x41a>
		precision -= data_len;
    1b72:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    1b74:	3e01      	subs	r6, #1
    1b76:	f140 80a8 	bpl.w	1cca <cbvprintf+0x422>
    1b7a:	9b03      	ldr	r3, [sp, #12]
    1b7c:	464e      	mov	r6, r9
    1b7e:	1e5a      	subs	r2, r3, #1
    1b80:	3201      	adds	r2, #1
    1b82:	bfac      	ite	ge
    1b84:	461f      	movge	r7, r3
    1b86:	2700      	movlt	r7, #0
			OUTC('0');
		}
		while (--data_len >= 0) {
    1b88:	3e01      	subs	r6, #1
    1b8a:	f140 80a3 	bpl.w	1cd4 <cbvprintf+0x42c>
    1b8e:	f109 32ff 	add.w	r2, r9, #4294967295
    1b92:	3201      	adds	r2, #1
    1b94:	bfac      	ite	ge
    1b96:	464b      	movge	r3, r9
    1b98:	2300      	movlt	r3, #0
    1b9a:	4626      	mov	r6, r4
    1b9c:	eb03 0907 	add.w	r9, r3, r7
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1ba0:	3e01      	subs	r6, #1
    1ba2:	f140 809d 	bpl.w	1ce0 <cbvprintf+0x438>
    1ba6:	1e63      	subs	r3, r4, #1
    1ba8:	3301      	adds	r3, #1
    1baa:	bfb8      	it	lt
    1bac:	2400      	movlt	r4, #0
    1bae:	44a1      	add	r9, r4
    1bb0:	462f      	mov	r7, r5
    1bb2:	44ca      	add	sl, r9
    1bb4:	e682      	b.n	18bc <cbvprintf+0x14>
				d = va_arg(ap, int);
    1bb6:	ea4f 79e3 	mov.w	r9, r3, asr #31
    1bba:	e788      	b.n	1ace <cbvprintf+0x226>
			} else if (special == '+') {
    1bbc:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    1bc0:	bf0a      	itet	eq
    1bc2:	4f50      	ldreq	r7, [pc, #320]	; (1d04 <cbvprintf+0x45c>)
	prefix = "";
    1bc4:	4f50      	ldrne	r7, [pc, #320]	; (1d08 <cbvprintf+0x460>)
				min_width--;
    1bc6:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1bca:	e78b      	b.n	1ae4 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    1bcc:	2a70      	cmp	r2, #112	; 0x70
    1bce:	d128      	bne.n	1c22 <cbvprintf+0x37a>
				x = (uintptr_t)va_arg(ap, void *);
    1bd0:	463d      	mov	r5, r7
    1bd2:	f855 0b04 	ldr.w	r0, [r5], #4
				if (x == (uint_value_type)0) {
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d05a      	beq.n	1c90 <cbvprintf+0x3e8>
				x = (uintptr_t)va_arg(ap, void *);
    1bda:	2100      	movs	r1, #0
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bdc:	4f4b      	ldr	r7, [pc, #300]	; (1d0c <cbvprintf+0x464>)
				min_width -= 2;
    1bde:	3c02      	subs	r4, #2
	int i = 0;
    1be0:	f04f 0800 	mov.w	r8, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1be4:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1be8:	f1a2 0939 	sub.w	r9, r2, #57	; 0x39
	int i = 0;
    1bec:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    1bf0:	f000 030f 	and.w	r3, r0, #15
		if (c >= 10) {
    1bf4:	2b09      	cmp	r3, #9
			c += alpha;
    1bf6:	bf88      	it	hi
    1bf8:	444b      	addhi	r3, r9
		buftop[--i] = c + '0';
    1bfa:	3330      	adds	r3, #48	; 0x30
	} while (num);
    1bfc:	2900      	cmp	r1, #0
		buftop[--i] = c + '0';
    1bfe:	f80e 3901 	strb.w	r3, [lr], #-1
	} while (num);
    1c02:	bf08      	it	eq
    1c04:	2810      	cmpeq	r0, #16
		num /= base;
    1c06:	ea4f 1310 	mov.w	r3, r0, lsr #4
		buftop[--i] = c + '0';
    1c0a:	f108 3cff 	add.w	ip, r8, #4294967295
		num /= base;
    1c0e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    1c12:	ea4f 1211 	mov.w	r2, r1, lsr #4
	} while (num);
    1c16:	d21e      	bcs.n	1c56 <cbvprintf+0x3ae>
			data = buf + sizeof(buf) - data_len;
    1c18:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    1c1a:	f1c8 0901 	rsb	r9, r8, #1
			data = buf + sizeof(buf) - data_len;
    1c1e:	4498      	add	r8, r3
    1c20:	e789      	b.n	1b36 <cbvprintf+0x28e>
			} else if (length_mod == 'l') {
    1c22:	296c      	cmp	r1, #108	; 0x6c
    1c24:	d104      	bne.n	1c30 <cbvprintf+0x388>
				x = va_arg(ap, unsigned int);
    1c26:	463d      	mov	r5, r7
    1c28:	2100      	movs	r1, #0
    1c2a:	f855 0b04 	ldr.w	r0, [r5], #4
    1c2e:	e006      	b.n	1c3e <cbvprintf+0x396>
			} else if (length_mod == 'L') {
    1c30:	294c      	cmp	r1, #76	; 0x4c
    1c32:	d1f8      	bne.n	1c26 <cbvprintf+0x37e>
				unsigned long long llx =
    1c34:	1dfd      	adds	r5, r7, #7
    1c36:	f025 0507 	bic.w	r5, r5, #7
    1c3a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
			if (special == '#') {
    1c3e:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1c42:	d106      	bne.n	1c52 <cbvprintf+0x3aa>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c44:	4b31      	ldr	r3, [pc, #196]	; (1d0c <cbvprintf+0x464>)
    1c46:	f012 0f20 	tst.w	r2, #32
    1c4a:	4f31      	ldr	r7, [pc, #196]	; (1d10 <cbvprintf+0x468>)
    1c4c:	bf18      	it	ne
    1c4e:	461f      	movne	r7, r3
    1c50:	e7c5      	b.n	1bde <cbvprintf+0x336>
	prefix = "";
    1c52:	4f2d      	ldr	r7, [pc, #180]	; (1d08 <cbvprintf+0x460>)
    1c54:	e7c4      	b.n	1be0 <cbvprintf+0x338>
		buftop[--i] = c + '0';
    1c56:	46e0      	mov	r8, ip
		num /= base;
    1c58:	4618      	mov	r0, r3
    1c5a:	4611      	mov	r1, r2
    1c5c:	e7c8      	b.n	1bf0 <cbvprintf+0x348>
			data = va_arg(ap, char *);
    1c5e:	463d      	mov	r5, r7
    1c60:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    1c64:	4640      	mov	r0, r8
    1c66:	f004 fd8a 	bl	677e <strlen>
			if (precision >= 0 && data_len > precision) {
    1c6a:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    1c6c:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    1c6e:	db02      	blt.n	1c76 <cbvprintf+0x3ce>
    1c70:	42b0      	cmp	r0, r6
    1c72:	bfa8      	it	ge
    1c74:	46b1      	movge	r9, r6
    1c76:	2600      	movs	r6, #0
    1c78:	4f23      	ldr	r7, [pc, #140]	; (1d08 <cbvprintf+0x460>)
    1c7a:	e765      	b.n	1b48 <cbvprintf+0x2a0>
			int c = va_arg(ap, int);
    1c7c:	463d      	mov	r5, r7
			buf[0] = c;
    1c7e:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c82:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    1c86:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1c8a:	f10d 0820 	add.w	r8, sp, #32
    1c8e:	e7f2      	b.n	1c76 <cbvprintf+0x3ce>
					data_len = 5;
    1c90:	f04f 0905 	mov.w	r9, #5
					data = "(nil)";
    1c94:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1d14 <cbvprintf+0x46c>
    1c98:	e7ed      	b.n	1c76 <cbvprintf+0x3ce>
				OUTC(' ');
    1c9a:	4659      	mov	r1, fp
    1c9c:	2020      	movs	r0, #32
    1c9e:	9b00      	ldr	r3, [sp, #0]
    1ca0:	4798      	blx	r3
			while (--min_width >= 0) {
    1ca2:	3e01      	subs	r6, #1
    1ca4:	d5f9      	bpl.n	1c9a <cbvprintf+0x3f2>
    1ca6:	1e62      	subs	r2, r4, #1
    1ca8:	1c53      	adds	r3, r2, #1
    1caa:	bfac      	ite	ge
    1cac:	4621      	movge	r1, r4
    1cae:	2100      	movlt	r1, #0
    1cb0:	f1c4 0400 	rsb	r4, r4, #0
    1cb4:	bfb8      	it	lt
    1cb6:	2400      	movlt	r4, #0
    1cb8:	448a      	add	sl, r1
    1cba:	4414      	add	r4, r2
    1cbc:	e750      	b.n	1b60 <cbvprintf+0x2b8>
    1cbe:	4626      	mov	r6, r4
    1cc0:	e7ef      	b.n	1ca2 <cbvprintf+0x3fa>
			OUTC(*prefix++);
    1cc2:	4659      	mov	r1, fp
    1cc4:	9b00      	ldr	r3, [sp, #0]
    1cc6:	4798      	blx	r3
    1cc8:	e74c      	b.n	1b64 <cbvprintf+0x2bc>
			OUTC('0');
    1cca:	4659      	mov	r1, fp
    1ccc:	9b00      	ldr	r3, [sp, #0]
    1cce:	2030      	movs	r0, #48	; 0x30
    1cd0:	4798      	blx	r3
    1cd2:	e74f      	b.n	1b74 <cbvprintf+0x2cc>
			OUTC(*data++);
    1cd4:	4659      	mov	r1, fp
    1cd6:	f818 0b01 	ldrb.w	r0, [r8], #1
    1cda:	9b00      	ldr	r3, [sp, #0]
    1cdc:	4798      	blx	r3
    1cde:	e753      	b.n	1b88 <cbvprintf+0x2e0>
			OUTC(' ');
    1ce0:	4659      	mov	r1, fp
    1ce2:	9b00      	ldr	r3, [sp, #0]
    1ce4:	2020      	movs	r0, #32
    1ce6:	4798      	blx	r3
    1ce8:	e75a      	b.n	1ba0 <cbvprintf+0x2f8>
				padding_mode = PAD_ZERO;
    1cea:	2301      	movs	r3, #1
    1cec:	e6c0      	b.n	1a70 <cbvprintf+0x1c8>
				length_mod = 'L';
    1cee:	214c      	movs	r1, #76	; 0x4c
    1cf0:	e5f5      	b.n	18de <cbvprintf+0x36>
		}

		goto start;
	}
}
    1cf2:	4650      	mov	r0, sl
    1cf4:	b00f      	add	sp, #60	; 0x3c
    1cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cfa:	bf00      	nop
    1cfc:	00009aff 	.word	0x00009aff
    1d00:	000095dd 	.word	0x000095dd
    1d04:	000095df 	.word	0x000095df
    1d08:	00009e99 	.word	0x00009e99
    1d0c:	000095e1 	.word	0x000095e1
    1d10:	000095e4 	.word	0x000095e4
    1d14:	000095e7 	.word	0x000095e7

00001d18 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d18:	b508      	push	{r3, lr}
    1d1a:	f04f 0220 	mov.w	r2, #32
    1d1e:	f3ef 8311 	mrs	r3, BASEPRI
    1d22:	f382 8812 	msr	BASEPRI_MAX, r2
    1d26:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d2a:	f001 f8b9 	bl	2ea0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d2e:	4803      	ldr	r0, [pc, #12]	; (1d3c <sys_reboot+0x24>)
    1d30:	f004 f916 	bl	5f60 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d34:	f000 fdb2 	bl	289c <arch_cpu_idle>
    1d38:	e7fc      	b.n	1d34 <sys_reboot+0x1c>
    1d3a:	bf00      	nop
    1d3c:	000095ed 	.word	0x000095ed

00001d40 <nordicsemi_nrf91_init>:
    1d40:	f04f 0220 	mov.w	r2, #32
    1d44:	f3ef 8311 	mrs	r3, BASEPRI
    1d48:	f382 8812 	msr	BASEPRI_MAX, r2
    1d4c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d50:	2101      	movs	r1, #1
    1d52:	4a04      	ldr	r2, [pc, #16]	; (1d64 <nordicsemi_nrf91_init+0x24>)
    1d54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1d58:	f383 8811 	msr	BASEPRI, r3
    1d5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d60:	2000      	movs	r0, #0
    1d62:	4770      	bx	lr
    1d64:	50039000 	.word	0x50039000

00001d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d68:	b120      	cbz	r0, 1d74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1d6a:	4b03      	ldr	r3, [pc, #12]	; (1d78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1d6c:	0180      	lsls	r0, r0, #6
    1d6e:	f043 0301 	orr.w	r3, r3, #1
    1d72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	00008c60 	.word	0x00008c60

00001d7c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1d7c:	4b0c      	ldr	r3, [pc, #48]	; (1db0 <flash_area_open+0x34>)
{
    1d7e:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	b173      	cbz	r3, 1da2 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1d84:	4a0b      	ldr	r2, [pc, #44]	; (1db4 <flash_area_open+0x38>)
    1d86:	6815      	ldr	r5, [r2, #0]
    1d88:	2200      	movs	r2, #0
    1d8a:	42aa      	cmp	r2, r5
    1d8c:	db02      	blt.n	1d94 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1d8e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    1d92:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1d94:	461c      	mov	r4, r3
    1d96:	f813 6b10 	ldrb.w	r6, [r3], #16
    1d9a:	4286      	cmp	r6, r0
    1d9c:	d004      	beq.n	1da8 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    1d9e:	3201      	adds	r2, #1
    1da0:	e7f3      	b.n	1d8a <flash_area_open+0xe>
		return -EACCES;
    1da2:	f06f 000c 	mvn.w	r0, #12
    1da6:	e7f4      	b.n	1d92 <flash_area_open+0x16>
	return 0;
    1da8:	2000      	movs	r0, #0
	*fap = area;
    1daa:	600c      	str	r4, [r1, #0]
	return 0;
    1dac:	e7f1      	b.n	1d92 <flash_area_open+0x16>
    1dae:	bf00      	nop
    1db0:	2000c50c 	.word	0x2000c50c
    1db4:	00008d20 	.word	0x00008d20

00001db8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1db8:	b570      	push	{r4, r5, r6, lr}
    1dba:	b088      	sub	sp, #32
    1dbc:	4605      	mov	r5, r0
    1dbe:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1dc0:	b2c0      	uxtb	r0, r0
    1dc2:	4669      	mov	r1, sp
{
    1dc4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1dc6:	f7ff ffd9 	bl	1d7c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1dca:	2800      	cmp	r0, #0
    1dcc:	db1f      	blt.n	1e0e <flash_area_get_sectors+0x56>
    1dce:	9b00      	ldr	r3, [sp, #0]
    1dd0:	b1eb      	cbz	r3, 1e0e <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1dd2:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
    1dd4:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1dd6:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1dd8:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1dda:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
    1ddc:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1de0:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
    1de2:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
    1de4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1de8:	9205      	str	r2, [sp, #20]
    1dea:	f003 fab5 	bl	5358 <z_impl_device_get_binding>
    1dee:	4605      	mov	r5, r0
	flash_area_close(fa);
    1df0:	9800      	ldr	r0, [sp, #0]
    1df2:	f004 f97b 	bl	60ec <flash_area_close>
	if (flash_dev == NULL) {
    1df6:	b16d      	cbz	r5, 1e14 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1df8:	4628      	mov	r0, r5
    1dfa:	4908      	ldr	r1, [pc, #32]	; (1e1c <flash_area_get_sectors+0x64>)
    1dfc:	aa01      	add	r2, sp, #4
    1dfe:	f004 fe36 	bl	6a6e <flash_page_foreach>
	if (cb_data->status == 0) {
    1e02:	9807      	ldr	r0, [sp, #28]
    1e04:	b908      	cbnz	r0, 1e0a <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1e06:	9b05      	ldr	r3, [sp, #20]
    1e08:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e0a:	b008      	add	sp, #32
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1e0e:	f06f 0015 	mvn.w	r0, #21
    1e12:	e7fa      	b.n	1e0a <flash_area_get_sectors+0x52>
		return -ENODEV;
    1e14:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e18:	e7f7      	b.n	1e0a <flash_area_get_sectors+0x52>
    1e1a:	bf00      	nop
    1e1c:	0000620f 	.word	0x0000620f

00001e20 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e20:	4801      	ldr	r0, [pc, #4]	; (1e28 <nrf_cc3xx_platform_abort_init+0x8>)
    1e22:	f003 bc71 	b.w	5708 <nrf_cc3xx_platform_set_abort>
    1e26:	bf00      	nop
    1e28:	00008d24 	.word	0x00008d24

00001e2c <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    1e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    1e2e:	4d26      	ldr	r5, [pc, #152]	; (1ec8 <boot_uart_fifo_callback+0x9c>)
    1e30:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    1e32:	6883      	ldr	r3, [r0, #8]
    1e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e36:	b103      	cbz	r3, 1e3a <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    1e38:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    1e3a:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    1e3c:	6883      	ldr	r3, [r0, #8]
    1e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e40:	b9a3      	cbnz	r3, 1e6c <boot_uart_fifo_callback+0x40>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    1e42:	4c22      	ldr	r4, [pc, #136]	; (1ecc <boot_uart_fifo_callback+0xa0>)
Z_GENLIST_IS_EMPTY(slist)
    1e44:	4e22      	ldr	r6, [pc, #136]	; (1ed0 <boot_uart_fifo_callback+0xa4>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    1e46:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read == NULL) {
    1e48:	6883      	ldr	r3, [r0, #8]
    1e4a:	699b      	ldr	r3, [r3, #24]
    1e4c:	b18b      	cbz	r3, 1e72 <boot_uart_fifo_callback+0x46>
	return api->fifo_read(dev, rx_data, size);
    1e4e:	2201      	movs	r2, #1
    1e50:	f10d 0107 	add.w	r1, sp, #7
    1e54:	4798      	blx	r3
		if (rx != 1) {
    1e56:	2801      	cmp	r0, #1
    1e58:	d10b      	bne.n	1e72 <boot_uart_fifo_callback+0x46>
		if (!cmd) {
    1e5a:	6823      	ldr	r3, [r4, #0]
    1e5c:	b993      	cbnz	r3, 1e84 <boot_uart_fifo_callback+0x58>
    1e5e:	6833      	ldr	r3, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1e60:	b94b      	cbnz	r3, 1e76 <boot_uart_fifo_callback+0x4a>
			sys_snode_t *node;

			node = sys_slist_get(&avail_queue);
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
    1e62:	2145      	movs	r1, #69	; 0x45
    1e64:	481b      	ldr	r0, [pc, #108]	; (1ed4 <boot_uart_fifo_callback+0xa8>)
    1e66:	f004 f934 	bl	60d2 <z_log_minimal_printk>
					     " incoming data!");
				return;
    1e6a:	e002      	b.n	1e72 <boot_uart_fifo_callback+0x46>
	return api->irq_rx_ready(dev);
    1e6c:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1e6e:	2800      	cmp	r0, #0
    1e70:	d1e7      	bne.n	1e42 <boot_uart_fifo_callback+0x16>
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
			cmd = NULL;
		}
	}
}
    1e72:	b003      	add	sp, #12
    1e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e76:	6871      	ldr	r1, [r6, #4]
    1e78:	681a      	ldr	r2, [r3, #0]
    1e7a:	428b      	cmp	r3, r1
	list->head = node;
    1e7c:	6032      	str	r2, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e7e:	d100      	bne.n	1e82 <boot_uart_fifo_callback+0x56>
	list->tail = node;
    1e80:	6072      	str	r2, [r6, #4]
			cmd = CONTAINER_OF(node, struct line_input, node);
    1e82:	6023      	str	r3, [r4, #0]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1e84:	4914      	ldr	r1, [pc, #80]	; (1ed8 <boot_uart_fifo_callback+0xac>)
    1e86:	f89d 7007 	ldrb.w	r7, [sp, #7]
    1e8a:	880a      	ldrh	r2, [r1, #0]
    1e8c:	4608      	mov	r0, r1
    1e8e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1e92:	d206      	bcs.n	1ea2 <boot_uart_fifo_callback+0x76>
			cmd->line[cur++] = byte;
    1e94:	6823      	ldr	r3, [r4, #0]
    1e96:	f102 0c01 	add.w	ip, r2, #1
    1e9a:	4413      	add	r3, r2
    1e9c:	f8a1 c000 	strh.w	ip, [r1]
    1ea0:	721f      	strb	r7, [r3, #8]
		if (byte ==  '\n') {
    1ea2:	2f0a      	cmp	r7, #10
    1ea4:	d1cf      	bne.n	1e46 <boot_uart_fifo_callback+0x1a>
			cmd->len = cur;
    1ea6:	6823      	ldr	r3, [r4, #0]
    1ea8:	8802      	ldrh	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    1eaa:	490c      	ldr	r1, [pc, #48]	; (1edc <boot_uart_fifo_callback+0xb0>)
    1eac:	605a      	str	r2, [r3, #4]
	parent->next = child;
    1eae:	2200      	movs	r2, #0
    1eb0:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    1eb2:	684e      	ldr	r6, [r1, #4]
    1eb4:	b926      	cbnz	r6, 1ec0 <boot_uart_fifo_callback+0x94>
	list->head = node;
    1eb6:	e9c1 3300 	strd	r3, r3, [r1]
			cur = 0;
    1eba:	8002      	strh	r2, [r0, #0]
			cmd = NULL;
    1ebc:	6022      	str	r2, [r4, #0]
    1ebe:	e7c1      	b.n	1e44 <boot_uart_fifo_callback+0x18>
	parent->next = child;
    1ec0:	6033      	str	r3, [r6, #0]
	list->tail = node;
    1ec2:	604b      	str	r3, [r1, #4]
}
    1ec4:	e7f9      	b.n	1eba <boot_uart_fifo_callback+0x8e>
    1ec6:	bf00      	nop
    1ec8:	2000dfac 	.word	0x2000dfac
    1ecc:	2000db8c 	.word	0x2000db8c
    1ed0:	2000db84 	.word	0x2000db84
    1ed4:	0000961a 	.word	0x0000961a
    1ed8:	2000e08c 	.word	0x2000e08c
    1edc:	2000dfa4 	.word	0x2000dfa4

00001ee0 <console_out>:
	uart_poll_out(uart_dev, c);
    1ee0:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <console_out+0x14>)
{
    1ee2:	b510      	push	{r4, lr}
    1ee4:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    1ee6:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    1ee8:	6883      	ldr	r3, [r0, #8]
    1eea:	b2e1      	uxtb	r1, r4
    1eec:	685b      	ldr	r3, [r3, #4]
    1eee:	4798      	blx	r3
}
    1ef0:	4620      	mov	r0, r4
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	2000dfac 	.word	0x2000dfac

00001ef8 <console_read>:
{
    1ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1efa:	4606      	mov	r6, r0
    1efc:	460b      	mov	r3, r1
    1efe:	4615      	mov	r5, r2
	__asm__ volatile(
    1f00:	f04f 0220 	mov.w	r2, #32
    1f04:	f3ef 8c11 	mrs	ip, BASEPRI
    1f08:	f382 8812 	msr	BASEPRI_MAX, r2
    1f0c:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1f10:	4c19      	ldr	r4, [pc, #100]	; (1f78 <console_read+0x80>)
    1f12:	6821      	ldr	r1, [r4, #0]
    1f14:	b149      	cbz	r1, 1f2a <console_read+0x32>
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1f16:	4a19      	ldr	r2, [pc, #100]	; (1f7c <console_read+0x84>)
    1f18:	6850      	ldr	r0, [r2, #4]
    1f1a:	4288      	cmp	r0, r1
    1f1c:	d005      	beq.n	1f2a <console_read+0x32>
	parent->next = child;
    1f1e:	2000      	movs	r0, #0
    1f20:	6008      	str	r0, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    1f22:	6850      	ldr	r0, [r2, #4]
    1f24:	b998      	cbnz	r0, 1f4e <console_read+0x56>
	list->head = node;
    1f26:	e9c2 1100 	strd	r1, r1, [r2]
Z_GENLIST_IS_EMPTY(slist)
    1f2a:	4a15      	ldr	r2, [pc, #84]	; (1f80 <console_read+0x88>)
    1f2c:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET(slist, snode)
    1f2e:	b129      	cbz	r1, 1f3c <console_read+0x44>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f30:	6857      	ldr	r7, [r2, #4]
    1f32:	6808      	ldr	r0, [r1, #0]
    1f34:	42b9      	cmp	r1, r7
	list->head = node;
    1f36:	6010      	str	r0, [r2, #0]
	list->tail = node;
    1f38:	bf08      	it	eq
    1f3a:	6050      	streq	r0, [r2, #4]
	__asm__ volatile(
    1f3c:	f38c 8811 	msr	BASEPRI, ip
    1f40:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    1f44:	6021      	str	r1, [r4, #0]
	if (node == NULL) {
    1f46:	b929      	cbnz	r1, 1f54 <console_read+0x5c>
		*newline = 0;
    1f48:	2000      	movs	r0, #0
    1f4a:	6028      	str	r0, [r5, #0]
}
    1f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    1f4e:	6001      	str	r1, [r0, #0]
	list->tail = node;
    1f50:	6051      	str	r1, [r2, #4]
}
    1f52:	e7ea      	b.n	1f2a <console_read+0x32>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    1f54:	6848      	ldr	r0, [r1, #4]
	if (line == NULL) {
    1f56:	3108      	adds	r1, #8
    1f58:	d0f6      	beq.n	1f48 <console_read+0x50>
	if (len > str_size - 1) {
    1f5a:	1e5c      	subs	r4, r3, #1
    1f5c:	4284      	cmp	r4, r0
    1f5e:	bfa8      	it	ge
    1f60:	4604      	movge	r4, r0
	memcpy(str, line, len);
    1f62:	4630      	mov	r0, r6
    1f64:	4622      	mov	r2, r4
    1f66:	f004 fc44 	bl	67f2 <memcpy>
	str[len] = '\0';
    1f6a:	2300      	movs	r3, #0
    1f6c:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    1f6e:	2301      	movs	r3, #1
    1f70:	602b      	str	r3, [r5, #0]
	return len + 1;
    1f72:	18e0      	adds	r0, r4, r3
    1f74:	e7ea      	b.n	1f4c <console_read+0x54>
    1f76:	bf00      	nop
    1f78:	2000db90 	.word	0x2000db90
    1f7c:	2000db84 	.word	0x2000db84
    1f80:	2000dfa4 	.word	0x2000dfa4

00001f84 <boot_console_init>:
{
    1f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    1f86:	2500      	movs	r5, #0
    1f88:	4b1c      	ldr	r3, [pc, #112]	; (1ffc <boot_console_init+0x78>)
	list->head = node;
    1f8a:	4a1d      	ldr	r2, [pc, #116]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
	list->tail = NULL;
    1f8c:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    1f90:	4b1c      	ldr	r3, [pc, #112]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f92:	4c1d      	ldr	r4, [pc, #116]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1f94:	481d      	ldr	r0, [pc, #116]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
	parent->next = child;
    1f96:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    1f9a:	6013      	str	r3, [r2, #0]
	parent->next = child;
    1f9c:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    1fa0:	6019      	str	r1, [r3, #0]
	list->tail = node;
    1fa2:	6051      	str	r1, [r2, #4]
    1fa4:	6020      	str	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1fa6:	f006 fc8b 	bl	88c0 <z_device_ready>
    1faa:	b310      	cbz	r0, 1ff2 <boot_console_init+0x6e>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    1fac:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1fae:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1fb0:	b123      	cbz	r3, 1fbc <boot_console_init+0x38>
    1fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1fb4:	b113      	cbz	r3, 1fbc <boot_console_init+0x38>
		api->irq_callback_set(dev, cb, user_data);
    1fb6:	462a      	mov	r2, r5
    1fb8:	4915      	ldr	r1, [pc, #84]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1fba:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    1fbc:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    1fbe:	6883      	ldr	r3, [r0, #8]
    1fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1fc2:	b10b      	cbz	r3, 1fc8 <boot_console_init+0x44>
	return api->irq_rx_ready(dev);
    1fc4:	4798      	blx	r3
    1fc6:	b148      	cbz	r0, 1fdc <boot_console_init+0x58>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    1fc8:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    1fca:	6883      	ldr	r3, [r0, #8]
    1fcc:	699b      	ldr	r3, [r3, #24]
    1fce:	b903      	cbnz	r3, 1fd2 <boot_console_init+0x4e>
    1fd0:	e7fe      	b.n	1fd0 <boot_console_init+0x4c>
	return api->fifo_read(dev, rx_data, size);
    1fd2:	2201      	movs	r2, #1
    1fd4:	f10d 0107 	add.w	r1, sp, #7
    1fd8:	4798      	blx	r3
    1fda:	e7f4      	b.n	1fc6 <boot_console_init+0x42>
			;
		}
	}

	cur = 0;
    1fdc:	2500      	movs	r5, #0
    1fde:	4b0d      	ldr	r3, [pc, #52]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)

	uart_irq_rx_enable(uart_dev);
    1fe0:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    1fe2:	801d      	strh	r5, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    1fe4:	6883      	ldr	r3, [r0, #8]
    1fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fe8:	b133      	cbz	r3, 1ff8 <boot_console_init+0x74>
		api->irq_rx_enable(dev);
    1fea:	4798      	blx	r3

	return 0;
    1fec:	4628      	mov	r0, r5
}
    1fee:	b003      	add	sp, #12
    1ff0:	bd30      	pop	{r4, r5, pc}
		return (-1);
    1ff2:	f04f 30ff 	mov.w	r0, #4294967295
    1ff6:	e7fa      	b.n	1fee <boot_console_init+0x6a>
	return 0;
    1ff8:	4618      	mov	r0, r3
	return boot_uart_fifo_init();
    1ffa:	e7f8      	b.n	1fee <boot_console_init+0x6a>
    1ffc:	2000dfa4 	.word	0x2000dfa4
    2000:	2000db84 	.word	0x2000db84
    2004:	2000db94 	.word	0x2000db94
    2008:	2000dfac 	.word	0x2000dfac
    200c:	00008990 	.word	0x00008990
    2010:	00001e2d 	.word	0x00001e2d
    2014:	2000e08c 	.word	0x2000e08c

00002018 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2018:	f640 1306 	movw	r3, #2310	; 0x906
{
    201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    2020:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2138 <boot_serial_output+0x120>
{
    2024:	b0d2      	sub	sp, #328	; 0x148
    bs_hdr->nh_op++;
    2026:	f8d8 0000 	ldr.w	r0, [r8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    202a:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    202e:	4b3d      	ldr	r3, [pc, #244]	; (2124 <boot_serial_output+0x10c>)
    2030:	4f3d      	ldr	r7, [pc, #244]	; (2128 <boot_serial_output+0x110>)
    2032:	681c      	ldr	r4, [r3, #0]
    bs_hdr->nh_op++;
    2034:	7803      	ldrb	r3, [r0, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2036:	1be4      	subs	r4, r4, r7
    bs_hdr->nh_op++;
    2038:	3301      	adds	r3, #1
    203a:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_flags = 0;
    203c:	2300      	movs	r3, #0
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    203e:	8881      	ldrh	r1, [r0, #4]
    bs_hdr->nh_len = htons(len);
    2040:	f3c4 2207 	ubfx	r2, r4, #8, #8
    2044:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    2048:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    204a:	020a      	lsls	r2, r1, #8
    204c:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
    bs_hdr->nh_flags = 0;
    2050:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2052:	8082      	strh	r2, [r0, #4]

#ifdef __ZEPHYR__
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2054:	2108      	movs	r1, #8
    2056:	9300      	str	r3, [sp, #0]
    2058:	f241 0221 	movw	r2, #4129	; 0x1021
    205c:	f003 ff33 	bl	5ec6 <crc16>
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2060:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2062:	4603      	mov	r3, r0
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2064:	4621      	mov	r1, r4
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2066:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    206a:	9200      	str	r2, [sp, #0]
    206c:	4638      	mov	r0, r7
    206e:	f241 0221 	movw	r2, #4129	; 0x1021
    2072:	f003 ff28 	bl	5ec6 <crc16>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    2076:	2502      	movs	r5, #2
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2078:	4e2c      	ldr	r6, [pc, #176]	; (212c <boot_serial_output+0x114>)
    crc = htons(crc);
    207a:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    207c:	6833      	ldr	r3, [r6, #0]
    crc = htons(crc);
    207e:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2082:	2102      	movs	r1, #2
    2084:	a803      	add	r0, sp, #12
    2086:	685b      	ldr	r3, [r3, #4]
    2088:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    208a:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    208e:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    2090:	f10d 0112 	add.w	r1, sp, #18
    2094:	2202      	movs	r2, #2
    2096:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    2098:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    209c:	f004 fba9 	bl	67f2 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    20a0:	f8d8 1000 	ldr.w	r1, [r8]
    20a4:	2208      	movs	r2, #8
    20a6:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    20aa:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    20ae:	f004 fba0 	bl	67f2 <memcpy>
    totlen += sizeof(*bs_hdr);
    20b2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    20b6:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    20b8:	3008      	adds	r0, #8
    20ba:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    20bc:	4622      	mov	r2, r4
    20be:	4639      	mov	r1, r7
    totlen += sizeof(*bs_hdr);
    20c0:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    20c4:	4418      	add	r0, r3
    20c6:	f004 fb94 	bl	67f2 <memcpy>
    totlen += len;
    20ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20ce:	ab06      	add	r3, sp, #24
    totlen += len;
    20d0:	4420      	add	r0, r4
    20d2:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20d4:	462a      	mov	r2, r5
    totlen += len;
    20d6:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20da:	a904      	add	r1, sp, #16
    20dc:	4418      	add	r0, r3
    20de:	f004 fb88 	bl	67f2 <memcpy>
    totlen += sizeof(crc);
    20e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20e6:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    20e8:	442b      	add	r3, r5
    20ea:	b29b      	uxth	r3, r3
    20ec:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20f0:	9300      	str	r3, [sp, #0]
    20f2:	21ad      	movs	r1, #173	; 0xad
    20f4:	ab06      	add	r3, sp, #24
    20f6:	a826      	add	r0, sp, #152	; 0x98
    20f8:	f7ff f9bc 	bl	1474 <base64_encode>
    totlen = enc_len;
    20fc:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    20fe:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    2100:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    2104:	a826      	add	r0, sp, #152	; 0x98
    2106:	685b      	ldr	r3, [r3, #4]
    2108:	b289      	uxth	r1, r1
    210a:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    210c:	6833      	ldr	r3, [r6, #0]
    210e:	4629      	mov	r1, r5
    2110:	685b      	ldr	r3, [r3, #4]
    2112:	4807      	ldr	r0, [pc, #28]	; (2130 <boot_serial_output+0x118>)
    2114:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    2116:	2149      	movs	r1, #73	; 0x49
    2118:	4806      	ldr	r0, [pc, #24]	; (2134 <boot_serial_output+0x11c>)
    211a:	f003 ffda 	bl	60d2 <z_log_minimal_printk>
}
    211e:	b052      	add	sp, #328	; 0x148
    2120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2124:	2000c510 	.word	0x2000c510
    2128:	2000f98e 	.word	0x2000f98e
    212c:	2000dfb0 	.word	0x2000dfb0
    2130:	00009673 	.word	0x00009673
    2134:	00009676 	.word	0x00009676
    2138:	2000dfb4 	.word	0x2000dfb4

0000213c <bs_rc_rsp>:
{
    213c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    map_start_encode(&cbor_state, 10);
    213e:	4c0e      	ldr	r4, [pc, #56]	; (2178 <bs_rc_rsp+0x3c>)
{
    2140:	4605      	mov	r5, r0
    map_start_encode(&cbor_state, 10);
    2142:	210a      	movs	r1, #10
    2144:	4620      	mov	r0, r4
    2146:	f004 fa6c 	bl	6622 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    214a:	466b      	mov	r3, sp
    214c:	4a0b      	ldr	r2, [pc, #44]	; (217c <bs_rc_rsp+0x40>)
    214e:	e892 0003 	ldmia.w	r2, {r0, r1}
    2152:	e883 0003 	stmia.w	r3, {r0, r1}
    2156:	4619      	mov	r1, r3
    2158:	4620      	mov	r0, r4
    215a:	f004 fa3b 	bl	65d4 <tstrx_encode>
    uintx32_put(&cbor_state, rc_code);
    215e:	4629      	mov	r1, r5
    2160:	4620      	mov	r0, r4
    2162:	f004 fa2e 	bl	65c2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    2166:	210a      	movs	r1, #10
    2168:	4620      	mov	r0, r4
    216a:	f004 fa75 	bl	6658 <map_end_encode>
    boot_serial_output();
    216e:	f7ff ff53 	bl	2018 <boot_serial_output>
}
    2172:	b003      	add	sp, #12
    2174:	bd30      	pop	{r4, r5, pc}
    2176:	bf00      	nop
    2178:	2000c510 	.word	0x2000c510
    217c:	00008c30 	.word	0x00008c30

00002180 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    2180:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2184:	680c      	ldr	r4, [r1, #0]
    2186:	4f1b      	ldr	r7, [pc, #108]	; (21f4 <boot_serial_in_dec.constprop.0+0x74>)
    2188:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    218a:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    218c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2190:	9000      	str	r0, [sp, #0]
    2192:	4b19      	ldr	r3, [pc, #100]	; (21f8 <boot_serial_in_dec.constprop.0+0x78>)
    2194:	1938      	adds	r0, r7, r4
    2196:	aa03      	add	r2, sp, #12
    2198:	3101      	adds	r1, #1
    219a:	f7ff f9eb 	bl	1574 <base64_decode>
    if (err) {
    219e:	4604      	mov	r4, r0
    21a0:	bb28      	cbnz	r0, 21ee <boot_serial_in_dec.constprop.0+0x6e>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    21a2:	682b      	ldr	r3, [r5, #0]
    21a4:	9a03      	ldr	r2, [sp, #12]
    21a6:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    21a8:	2b02      	cmp	r3, #2
    *out_off += rc;
    21aa:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    21ac:	d91b      	bls.n	21e6 <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    21ae:	8839      	ldrh	r1, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    21b0:	3b02      	subs	r3, #2
    len = ntohs(*(uint16_t *)out);
    21b2:	020e      	lsls	r6, r1, #8
    21b4:	ea46 2611 	orr.w	r6, r6, r1, lsr #8
    21b8:	b2b6      	uxth	r6, r6
    if (len != *out_off - sizeof(uint16_t)) {
    21ba:	429e      	cmp	r6, r3
    21bc:	d113      	bne.n	21e6 <boot_serial_in_dec.constprop.0+0x66>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    21be:	f04f 0801 	mov.w	r8, #1
    21c2:	4603      	mov	r3, r0
    21c4:	f241 0221 	movw	r2, #4129	; 0x1021
    21c8:	4631      	mov	r1, r6
    21ca:	f8cd 8000 	str.w	r8, [sp]
    21ce:	1cb8      	adds	r0, r7, #2
    21d0:	f003 fe79 	bl	5ec6 <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    21d4:	b938      	cbnz	r0, 21e6 <boot_serial_in_dec.constprop.0+0x66>
    21d6:	2e02      	cmp	r6, #2
    21d8:	d905      	bls.n	21e6 <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }
    *out_off -= sizeof(crc);
    21da:	682b      	ldr	r3, [r5, #0]
    21dc:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    21de:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    21e0:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    21e2:	70bc      	strb	r4, [r7, #2]

    return 1;
    21e4:	4644      	mov	r4, r8
}
    21e6:	4620      	mov	r0, r4
    21e8:	b004      	add	sp, #16
    21ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    21ee:	f04f 34ff 	mov.w	r4, #4294967295
    21f2:	e7f8      	b.n	21e6 <boot_serial_in_dec.constprop.0+0x66>
    21f4:	2000fa0e 	.word	0x2000fa0e
    21f8:	2000fc11 	.word	0x2000fc11

000021fc <boot_serial_input>:
{
    21fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    2200:	2907      	cmp	r1, #7
{
    2202:	4604      	mov	r4, r0
    2204:	b0a9      	sub	sp, #164	; 0xa4
    if (len < sizeof(*hdr) ||
    2206:	f240 80c0 	bls.w	238a <boot_serial_input+0x18e>
    220a:	7802      	ldrb	r2, [r0, #0]
    220c:	f012 05fd 	ands.w	r5, r2, #253	; 0xfd
    2210:	f040 80bb 	bne.w	238a <boot_serial_input+0x18e>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    2214:	8842      	ldrh	r2, [r0, #2]
    2216:	f1a1 0608 	sub.w	r6, r1, #8
    221a:	0213      	lsls	r3, r2, #8
    221c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    2220:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    2222:	42b3      	cmp	r3, r6
    2224:	f0c0 80b1 	bcc.w	238a <boot_serial_input+0x18e>
    bs_hdr = hdr;
    2228:	4ba7      	ldr	r3, [pc, #668]	; (24c8 <FIH_LABEL_FIH_CALL_END_946+0x118>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    222a:	4fa8      	ldr	r7, [pc, #672]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    bs_hdr = hdr;
    222c:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    222e:	8880      	ldrh	r0, [r0, #4]
    2230:	0203      	lsls	r3, r0, #8
    2232:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
    2236:	b298      	uxth	r0, r3
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    2238:	4ba5      	ldr	r3, [pc, #660]	; (24d0 <FIH_LABEL_FIH_CALL_END_946+0x120>)
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    223a:	2801      	cmp	r0, #1
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    223c:	603b      	str	r3, [r7, #0]
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    223e:	f103 0380 	add.w	r3, r3, #128	; 0x80
    hdr->nh_group = ntohs(hdr->nh_group);
    2242:	80a0      	strh	r0, [r4, #4]
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    2244:	60fb      	str	r3, [r7, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    2246:	f040 81fc 	bne.w	2642 <FIH_LABEL_FIH_CALL_END_946+0x292>
        switch (hdr->nh_id) {
    224a:	f894 8007 	ldrb.w	r8, [r4, #7]
    224e:	f1b8 0f00 	cmp.w	r8, #0
    2252:	d007      	beq.n	2264 <boot_serial_input+0x68>
    2254:	f1b8 0f01 	cmp.w	r8, #1
    2258:	f000 80ab 	beq.w	23b2 <FIH_LABEL_FIH_CALL_END_946+0x2>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    225c:	2008      	movs	r0, #8
    225e:	f7ff ff6d 	bl	213c <bs_rc_rsp>
    2262:	e092      	b.n	238a <boot_serial_input+0x18e>
    map_start_encode(&cbor_state, 1);
    2264:	4601      	mov	r1, r0
    tstrx_put(&cbor_state, "images");
    2266:	4e9b      	ldr	r6, [pc, #620]	; (24d4 <FIH_LABEL_FIH_CALL_END_946+0x124>)
    map_start_encode(&cbor_state, 1);
    2268:	4638      	mov	r0, r7
    226a:	f004 f9da 	bl	6622 <map_start_encode>
    tstrx_put(&cbor_state, "images");
    226e:	e896 0003 	ldmia.w	r6, {r0, r1}
    2272:	ab08      	add	r3, sp, #32
    2274:	e883 0003 	stmia.w	r3, {r0, r1}
    2278:	4619      	mov	r1, r3
    227a:	4638      	mov	r0, r7
    227c:	f004 f9aa 	bl	65d4 <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    2280:	4638      	mov	r0, r7
    2282:	2105      	movs	r1, #5
    2284:	f004 f9c1 	bl	660a <list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2288:	4644      	mov	r4, r8
            if (hdr.ih_magic == IMAGE_MAGIC)
    228a:	f8df 8264 	ldr.w	r8, [pc, #612]	; 24f0 <FIH_LABEL_FIH_CALL_END_946+0x140>
            tstrx_put(&cbor_state, "slot");
    228e:	f106 0708 	add.w	r7, r6, #8
            tstrx_put(&cbor_state, "version");
    2292:	3610      	adds	r6, #16
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2294:	4621      	mov	r1, r4
    2296:	2000      	movs	r0, #0
    2298:	f003 fb9f 	bl	59da <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    229c:	a907      	add	r1, sp, #28
    229e:	b2c0      	uxtb	r0, r0
    22a0:	f7ff fd6c 	bl	1d7c <flash_area_open>
    22a4:	4605      	mov	r5, r0
    22a6:	2800      	cmp	r0, #0
    22a8:	d164      	bne.n	2374 <boot_serial_input+0x178>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    22aa:	2320      	movs	r3, #32
    22ac:	4601      	mov	r1, r0
    22ae:	aa10      	add	r2, sp, #64	; 0x40
    22b0:	9807      	ldr	r0, [sp, #28]
    22b2:	f003 ff1c 	bl	60ee <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    22b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    22b8:	4543      	cmp	r3, r8
    22ba:	d06b      	beq.n	2394 <FIH_LABEL_FIH_CALL_START_916>
            fih_int fih_rc = FIH_FAILURE;
    22bc:	4b86      	ldr	r3, [pc, #536]	; (24d8 <FIH_LABEL_FIH_CALL_END_946+0x128>)
    22be:	681d      	ldr	r5, [r3, #0]
            flash_area_close(fap);
    22c0:	9807      	ldr	r0, [sp, #28]
    22c2:	f003 ff13 	bl	60ec <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    22c6:	4b85      	ldr	r3, [pc, #532]	; (24dc <FIH_LABEL_FIH_CALL_END_946+0x12c>)
    22c8:	681b      	ldr	r3, [r3, #0]
    22ca:	42ab      	cmp	r3, r5
    22cc:	d152      	bne.n	2374 <boot_serial_input+0x178>
            map_start_encode(&cbor_state, 20);
    22ce:	2114      	movs	r1, #20
    22d0:	487e      	ldr	r0, [pc, #504]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    22d2:	f004 f9a6 	bl	6622 <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    22d6:	e897 0003 	ldmia.w	r7, {r0, r1}
    22da:	ab0a      	add	r3, sp, #40	; 0x28
    22dc:	e883 0003 	stmia.w	r3, {r0, r1}
    22e0:	4619      	mov	r1, r3
    22e2:	487a      	ldr	r0, [pc, #488]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    22e4:	f004 f976 	bl	65d4 <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    22e8:	4621      	mov	r1, r4
    22ea:	4878      	ldr	r0, [pc, #480]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    22ec:	f004 f969 	bl	65c2 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    22f0:	e896 0003 	ldmia.w	r6, {r0, r1}
    22f4:	ab0c      	add	r3, sp, #48	; 0x30
    off = u32toa(dst, ver->iv_major);
    22f6:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    22fa:	e883 0003 	stmia.w	r3, {r0, r1}
    22fe:	4619      	mov	r1, r3
    2300:	4872      	ldr	r0, [pc, #456]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2302:	f004 f967 	bl	65d4 <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    2306:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    230a:	4648      	mov	r0, r9
    230c:	f003 ffb0 	bl	6270 <u32toa>
    dst[off++] = '.';
    2310:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    2314:	ab28      	add	r3, sp, #160	; 0xa0
    2316:	1c45      	adds	r5, r0, #1
    2318:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_minor);
    231a:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    231e:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    2322:	eb09 0005 	add.w	r0, r9, r5
    2326:	f003 ffa3 	bl	6270 <u32toa>
    dst[off++] = '.';
    232a:	ab28      	add	r3, sp, #160	; 0xa0
    off += u32toa(dst + off, ver->iv_minor);
    232c:	4428      	add	r0, r5
    dst[off++] = '.';
    232e:	1c45      	adds	r5, r0, #1
    2330:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_revision);
    2332:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    2336:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    233a:	eb09 0005 	add.w	r0, r9, r5
    233e:	f003 ff97 	bl	6270 <u32toa>
    dst[off++] = '.';
    2342:	ab28      	add	r3, sp, #160	; 0xa0
    off += u32toa(dst + off, ver->iv_revision);
    2344:	4405      	add	r5, r0
    dst[off++] = '.';
    2346:	442b      	add	r3, r5
    2348:	3501      	adds	r5, #1
    off += u32toa(dst + off, ver->iv_build_num);
    234a:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    234c:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    2350:	eb09 0005 	add.w	r0, r9, r5
    2354:	f003 ff8c 	bl	6270 <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    2358:	4648      	mov	r0, r9
    235a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    235e:	f004 fa0e 	bl	677e <strlen>
    2362:	a90e      	add	r1, sp, #56	; 0x38
    2364:	900f      	str	r0, [sp, #60]	; 0x3c
    2366:	4859      	ldr	r0, [pc, #356]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2368:	f004 f934 	bl	65d4 <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    236c:	2114      	movs	r1, #20
    236e:	4857      	ldr	r0, [pc, #348]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2370:	f004 f972 	bl	6658 <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    2374:	b164      	cbz	r4, 2390 <boot_serial_input+0x194>
    list_end_encode(&cbor_state, 5);
    2376:	2105      	movs	r1, #5
    2378:	4854      	ldr	r0, [pc, #336]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    237a:	f004 f96a 	bl	6652 <list_end_encode>
    map_end_encode(&cbor_state, 1);
    237e:	4621      	mov	r1, r4
    2380:	4852      	ldr	r0, [pc, #328]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2382:	f004 f969 	bl	6658 <map_end_encode>
    boot_serial_output();
    2386:	f7ff fe47 	bl	2018 <boot_serial_output>
}
    238a:	b029      	add	sp, #164	; 0xa4
    238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2390:	2401      	movs	r4, #1
    2392:	e77f      	b.n	2294 <boot_serial_input+0x98>

00002394 <FIH_LABEL_FIH_CALL_START_916>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    2394:	2340      	movs	r3, #64	; 0x40
    2396:	9301      	str	r3, [sp, #4]
    2398:	ab18      	add	r3, sp, #96	; 0x60
    239a:	4629      	mov	r1, r5
    239c:	e9cd 5503 	strd	r5, r5, [sp, #12]
    23a0:	9502      	str	r5, [sp, #8]
    23a2:	9300      	str	r3, [sp, #0]
    23a4:	4628      	mov	r0, r5
    23a6:	9b07      	ldr	r3, [sp, #28]
    23a8:	aa10      	add	r2, sp, #64	; 0x40
    23aa:	f7fe f919 	bl	5e0 <bootutil_img_validate>
    23ae:	4605      	mov	r5, r0

000023b0 <FIH_LABEL_FIH_CALL_END_946>:
    23b0:	e786      	b.n	22c0 <boot_serial_input+0xc4>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    23b2:	4631      	mov	r1, r6
    23b4:	ab0a      	add	r3, sp, #40	; 0x28
    23b6:	aa18      	add	r2, sp, #96	; 0x60
    23b8:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    23bc:	9508      	str	r5, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    23be:	f000 fa59 	bl	2874 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    23c2:	b908      	cbnz	r0, 23c8 <FIH_LABEL_FIH_CALL_END_946+0x18>
        rc = MGMT_ERR_EINVAL;
    23c4:	2403      	movs	r4, #3
    23c6:	e036      	b.n	2436 <FIH_LABEL_FIH_CALL_END_946+0x86>
    if (!result || (len != decoded_len)) {
    23c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23ca:	429e      	cmp	r6, r3
    23cc:	d1fa      	bne.n	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    long long int data_len = UINT64_MAX;
    23ce:	f04f 3aff 	mov.w	sl, #4294967295
    23d2:	f04f 3bff 	mov.w	fp, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    23d6:	462a      	mov	r2, r5
    img_num = 0;
    23d8:	4628      	mov	r0, r5
    long long int off = UINT64_MAX;
    23da:	46d0      	mov	r8, sl
    23dc:	46d9      	mov	r9, fp
    const uint8_t *img_data = NULL;
    23de:	462f      	mov	r7, r5
    23e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    23e2:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    23e4:	42a2      	cmp	r2, r4
    23e6:	d156      	bne.n	2496 <FIH_LABEL_FIH_CALL_END_946+0xe6>
    if (off == UINT64_MAX || img_data == NULL) {
    23e8:	f1b9 3fff 	cmp.w	r9, #4294967295
    23ec:	bf08      	it	eq
    23ee:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    23f2:	d0e7      	beq.n	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    23f4:	2f00      	cmp	r7, #0
    23f6:	d0e5      	beq.n	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    23f8:	2100      	movs	r1, #0
    23fa:	f003 faee 	bl	59da <flash_area_id_from_multi_image_slot>
    23fe:	a908      	add	r1, sp, #32
    2400:	b2c0      	uxtb	r0, r0
    2402:	f7ff fcbb 	bl	1d7c <flash_area_open>
    if (rc) {
    2406:	2800      	cmp	r0, #0
    2408:	d1dc      	bne.n	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    if (off == 0) {
    240a:	ea58 0309 	orrs.w	r3, r8, r9
    240e:	4e34      	ldr	r6, [pc, #208]	; (24e0 <FIH_LABEL_FIH_CALL_END_946+0x130>)
    2410:	d10a      	bne.n	2428 <FIH_LABEL_FIH_CALL_END_946+0x78>
        if (data_len > flash_area_get_size(fap)) {
    2412:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    2414:	6030      	str	r0, [r6, #0]
        if (data_len > flash_area_get_size(fap)) {
    2416:	689a      	ldr	r2, [r3, #8]
    2418:	2300      	movs	r3, #0
    241a:	4552      	cmp	r2, sl
    241c:	eb73 030b 	sbcs.w	r3, r3, fp
    2420:	dbd0      	blt.n	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
        img_size = data_len;
    2422:	4b30      	ldr	r3, [pc, #192]	; (24e4 <FIH_LABEL_FIH_CALL_END_946+0x134>)
    2424:	f8c3 a000 	str.w	sl, [r3]
    if (off != curr_off) {
    2428:	2100      	movs	r1, #0
    242a:	6833      	ldr	r3, [r6, #0]
    242c:	4549      	cmp	r1, r9
    242e:	bf08      	it	eq
    2430:	4543      	cmpeq	r3, r8
    2432:	d05f      	beq.n	24f4 <FIH_LABEL_FIH_CALL_END_946+0x144>
        rc = 0;
    2434:	2400      	movs	r4, #0
    BOOT_LOG_INF("RX: 0x%x", rc);
    2436:	4622      	mov	r2, r4
    2438:	2149      	movs	r1, #73	; 0x49
    243a:	482b      	ldr	r0, [pc, #172]	; (24e8 <FIH_LABEL_FIH_CALL_END_946+0x138>)
    243c:	f003 fe49 	bl	60d2 <z_log_minimal_printk>
    tstrx_put(&cbor_state, "rc");
    2440:	4d2a      	ldr	r5, [pc, #168]	; (24ec <FIH_LABEL_FIH_CALL_END_946+0x13c>)
    map_start_encode(&cbor_state, 10);
    2442:	210a      	movs	r1, #10
    2444:	4821      	ldr	r0, [pc, #132]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2446:	f004 f8ec 	bl	6622 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    244a:	e895 0003 	ldmia.w	r5, {r0, r1}
    244e:	ab10      	add	r3, sp, #64	; 0x40
    2450:	e883 0003 	stmia.w	r3, {r0, r1}
    2454:	4619      	mov	r1, r3
    2456:	481d      	ldr	r0, [pc, #116]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2458:	f004 f8bc 	bl	65d4 <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    245c:	4621      	mov	r1, r4
    245e:	481b      	ldr	r0, [pc, #108]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2460:	f004 f8af 	bl	65c2 <uintx32_put>
    if (rc == 0) {
    2464:	b96c      	cbnz	r4, 2482 <FIH_LABEL_FIH_CALL_END_946+0xd2>
        tstrx_put(&cbor_state, "off");
    2466:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    246a:	ab0e      	add	r3, sp, #56	; 0x38
    246c:	e883 0003 	stmia.w	r3, {r0, r1}
    2470:	4619      	mov	r1, r3
    2472:	4816      	ldr	r0, [pc, #88]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2474:	f004 f8ae 	bl	65d4 <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    2478:	4b19      	ldr	r3, [pc, #100]	; (24e0 <FIH_LABEL_FIH_CALL_END_946+0x130>)
    247a:	4814      	ldr	r0, [pc, #80]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    247c:	6819      	ldr	r1, [r3, #0]
    247e:	f004 f8a0 	bl	65c2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    2482:	210a      	movs	r1, #10
    2484:	4811      	ldr	r0, [pc, #68]	; (24cc <FIH_LABEL_FIH_CALL_END_946+0x11c>)
    2486:	f004 f8e7 	bl	6658 <map_end_encode>
    boot_serial_output();
    248a:	f7ff fdc5 	bl	2018 <boot_serial_output>
    flash_area_close(fap);
    248e:	9808      	ldr	r0, [sp, #32]
    2490:	f003 fe2c 	bl	60ec <flash_area_close>
}
    2494:	e779      	b.n	238a <boot_serial_input+0x18e>
        switch(member->_Member_choice) {
    2496:	7a19      	ldrb	r1, [r3, #8]
    2498:	2903      	cmp	r1, #3
    249a:	d804      	bhi.n	24a6 <FIH_LABEL_FIH_CALL_END_946+0xf6>
    249c:	e8df f001 	tbb	[pc, r1]
    24a0:	0e090602 	.word	0x0e090602
                img_num = member->_Member_image;
    24a4:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    24a6:	3201      	adds	r2, #1
    24a8:	330c      	adds	r3, #12
    24aa:	e79b      	b.n	23e4 <FIH_LABEL_FIH_CALL_END_946+0x34>
                slen = member->_Member_data.len;
    24ac:	e9d3 7500 	ldrd	r7, r5, [r3]
                break;
    24b0:	e7f9      	b.n	24a6 <FIH_LABEL_FIH_CALL_END_946+0xf6>
                data_len = member->_Member_len;
    24b2:	6819      	ldr	r1, [r3, #0]
    24b4:	468a      	mov	sl, r1
    24b6:	ea4f 7be1 	mov.w	fp, r1, asr #31
                break;
    24ba:	e7f4      	b.n	24a6 <FIH_LABEL_FIH_CALL_END_946+0xf6>
                off = member->_Member_off;
    24bc:	6819      	ldr	r1, [r3, #0]
    24be:	4688      	mov	r8, r1
    24c0:	ea4f 79e1 	mov.w	r9, r1, asr #31
                break;
    24c4:	e7ef      	b.n	24a6 <FIH_LABEL_FIH_CALL_END_946+0xf6>
    24c6:	bf00      	nop
    24c8:	2000dfb4 	.word	0x2000dfb4
    24cc:	2000c510 	.word	0x2000c510
    24d0:	2000f98e 	.word	0x2000f98e
    24d4:	00008c38 	.word	0x00008c38
    24d8:	2000c500 	.word	0x2000c500
    24dc:	2000c71c 	.word	0x2000c71c
    24e0:	2000dfb8 	.word	0x2000dfb8
    24e4:	2000dfc8 	.word	0x2000dfc8
    24e8:	00009749 	.word	0x00009749
    24ec:	00008c30 	.word	0x00008c30
    24f0:	96f3b83d 	.word	0x96f3b83d
    if (curr_off + img_blen > img_size) {
    24f4:	4a5c      	ldr	r2, [pc, #368]	; (2668 <FIH_LABEL_FIH_CALL_END_946+0x2b8>)
    24f6:	442b      	add	r3, r5
    24f8:	6811      	ldr	r1, [r2, #0]
    24fa:	4692      	mov	sl, r2
    24fc:	428b      	cmp	r3, r1
    24fe:	f63f af61 	bhi.w	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    rem_bytes = img_blen % flash_area_align(fap);
    2502:	9808      	ldr	r0, [sp, #32]
    2504:	f003 fe71 	bl	61ea <flash_area_align>
    2508:	fbb5 f8f0 	udiv	r8, r5, r0
    250c:	fb08 5010 	mls	r0, r8, r0, r5
    2510:	fa5f f880 	uxtb.w	r8, r0
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    2514:	6830      	ldr	r0, [r6, #0]
    2516:	f8da 3000 	ldr.w	r3, [sl]
    251a:	1942      	adds	r2, r0, r5
    251c:	429a      	cmp	r2, r3
    251e:	d206      	bcs.n	252e <FIH_LABEL_FIH_CALL_END_946+0x17e>
    2520:	f1b8 0f00 	cmp.w	r8, #0
    2524:	d003      	beq.n	252e <FIH_LABEL_FIH_CALL_END_946+0x17e>
        img_blen -= rem_bytes;
    2526:	eba5 0508 	sub.w	r5, r5, r8
        rem_bytes = 0;
    252a:	f04f 0800 	mov.w	r8, #0
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    252e:	a90c      	add	r1, sp, #48	; 0x30
    2530:	4428      	add	r0, r5
    2532:	f7fe f83b 	bl	5ac <flash_area_sector_from_off>
    if (rc) {
    2536:	4604      	mov	r4, r0
    2538:	b120      	cbz	r0, 2544 <FIH_LABEL_FIH_CALL_END_946+0x194>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    253a:	2145      	movs	r1, #69	; 0x45
    253c:	484b      	ldr	r0, [pc, #300]	; (266c <FIH_LABEL_FIH_CALL_END_946+0x2bc>)
                BOOT_LOG_ERR("Unable to determine flash sector of"
    253e:	f003 fdc8 	bl	60d2 <z_log_minimal_printk>
                goto out;
    2542:	e778      	b.n	2436 <FIH_LABEL_FIH_CALL_END_946+0x86>
    if (off_last != flash_sector_get_off(&sector)) {
    2544:	4b4a      	ldr	r3, [pc, #296]	; (2670 <FIH_LABEL_FIH_CALL_END_946+0x2c0>)
    2546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2548:	6819      	ldr	r1, [r3, #0]
    254a:	4699      	mov	r9, r3
    254c:	428a      	cmp	r2, r1
    254e:	d011      	beq.n	2574 <FIH_LABEL_FIH_CALL_END_946+0x1c4>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    2550:	2149      	movs	r1, #73	; 0x49
    2552:	4848      	ldr	r0, [pc, #288]	; (2674 <FIH_LABEL_FIH_CALL_END_946+0x2c4>)
        off_last = flash_sector_get_off(&sector);
    2554:	601a      	str	r2, [r3, #0]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    2556:	f003 fdbc 	bl	60d2 <z_log_minimal_printk>
        rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    255a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    255e:	9808      	ldr	r0, [sp, #32]
    2560:	f003 fe14 	bl	618c <flash_area_erase>
        if (rc) {
    2564:	4604      	mov	r4, r0
    2566:	b128      	cbz	r0, 2574 <FIH_LABEL_FIH_CALL_END_946+0x1c4>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2568:	4622      	mov	r2, r4
    256a:	2145      	movs	r1, #69	; 0x45
    256c:	4842      	ldr	r0, [pc, #264]	; (2678 <FIH_LABEL_FIH_CALL_END_946+0x2c8>)
    256e:	f003 fdb0 	bl	60d2 <z_log_minimal_printk>
                    goto out;
    2572:	e760      	b.n	2436 <FIH_LABEL_FIH_CALL_END_946+0x86>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2574:	6832      	ldr	r2, [r6, #0]
    2576:	2149      	movs	r1, #73	; 0x49
    2578:	4840      	ldr	r0, [pc, #256]	; (267c <FIH_LABEL_FIH_CALL_END_946+0x2cc>)
    257a:	18ab      	adds	r3, r5, r2
    257c:	f003 fda9 	bl	60d2 <z_log_minimal_printk>
    if (rem_bytes) {
    2580:	f1b8 0f00 	cmp.w	r8, #0
    2584:	d044      	beq.n	2610 <FIH_LABEL_FIH_CALL_END_946+0x260>
        if (w_size) {
    2586:	ebb5 0408 	subs.w	r4, r5, r8
    258a:	d02c      	beq.n	25e6 <FIH_LABEL_FIH_CALL_END_946+0x236>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    258c:	4623      	mov	r3, r4
    258e:	463a      	mov	r2, r7
    2590:	6831      	ldr	r1, [r6, #0]
    2592:	9808      	ldr	r0, [sp, #32]
    2594:	f003 fdc7 	bl	6126 <flash_area_write>
            if (rc) {
    2598:	2800      	cmp	r0, #0
    259a:	f47f af13 	bne.w	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
            img_blen -= w_size;
    259e:	4645      	mov	r5, r8
            curr_off += w_size;
    25a0:	6833      	ldr	r3, [r6, #0]
            img_data += w_size;
    25a2:	4427      	add	r7, r4
            curr_off += w_size;
    25a4:	4423      	add	r3, r4
    25a6:	6033      	str	r3, [r6, #0]
            memcpy(wbs_aligned, img_data, rem_bytes);
    25a8:	4639      	mov	r1, r7
    25aa:	4642      	mov	r2, r8
    25ac:	a810      	add	r0, sp, #64	; 0x40
    25ae:	f004 f920 	bl	67f2 <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    25b2:	9808      	ldr	r0, [sp, #32]
    25b4:	f003 fe22 	bl	61fc <flash_area_erased_val>
    25b8:	ab10      	add	r3, sp, #64	; 0x40
    25ba:	4601      	mov	r1, r0
    25bc:	f1c8 0208 	rsb	r2, r8, #8
    25c0:	eb03 0008 	add.w	r0, r3, r8
    25c4:	f004 f920 	bl	6808 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    25c8:	9c08      	ldr	r4, [sp, #32]
    25ca:	6837      	ldr	r7, [r6, #0]
    25cc:	4620      	mov	r0, r4
    25ce:	f003 fe0c 	bl	61ea <flash_area_align>
    25d2:	4639      	mov	r1, r7
    25d4:	4603      	mov	r3, r0
    25d6:	4620      	mov	r0, r4
    25d8:	aa10      	add	r2, sp, #64	; 0x40
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    25da:	f003 fda4 	bl	6126 <flash_area_write>
    if (rc == 0) {
    25de:	2800      	cmp	r0, #0
    25e0:	f47f aef0 	bne.w	23c4 <FIH_LABEL_FIH_CALL_END_946+0x14>
    25e4:	e001      	b.n	25ea <FIH_LABEL_FIH_CALL_END_946+0x23a>
        if (img_blen) {
    25e6:	2d00      	cmp	r5, #0
    25e8:	d1de      	bne.n	25a8 <FIH_LABEL_FIH_CALL_END_946+0x1f8>
        curr_off += img_blen;
    25ea:	6833      	ldr	r3, [r6, #0]
    25ec:	441d      	add	r5, r3
        if (curr_off == img_size) {
    25ee:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    25f2:	6035      	str	r5, [r6, #0]
        if (curr_off == img_size) {
    25f4:	429d      	cmp	r5, r3
    25f6:	f47f af1d 	bne.w	2434 <FIH_LABEL_FIH_CALL_END_946+0x84>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    25fa:	9808      	ldr	r0, [sp, #32]
    25fc:	f003 faa0 	bl	5b40 <boot_status_off>
    2600:	a90c      	add	r1, sp, #48	; 0x30
    2602:	f7fd ffd3 	bl	5ac <flash_area_sector_from_off>
            if (rc) {
    2606:	4604      	mov	r4, r0
    2608:	b138      	cbz	r0, 261a <FIH_LABEL_FIH_CALL_END_946+0x26a>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    260a:	2145      	movs	r1, #69	; 0x45
    260c:	481c      	ldr	r0, [pc, #112]	; (2680 <FIH_LABEL_FIH_CALL_END_946+0x2d0>)
    260e:	e796      	b.n	253e <FIH_LABEL_FIH_CALL_END_946+0x18e>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    2610:	462b      	mov	r3, r5
    2612:	463a      	mov	r2, r7
    2614:	6831      	ldr	r1, [r6, #0]
    2616:	9808      	ldr	r0, [sp, #32]
    2618:	e7df      	b.n	25da <FIH_LABEL_FIH_CALL_END_946+0x22a>
    261a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            if (off_last < flash_sector_get_off(&sector)) {
    261c:	f8d9 3000 	ldr.w	r3, [r9]
    2620:	429a      	cmp	r2, r3
    2622:	f67f af07 	bls.w	2434 <FIH_LABEL_FIH_CALL_END_946+0x84>
                BOOT_LOG_INF("Erasing sector at offset 0x%x",
    2626:	2149      	movs	r1, #73	; 0x49
    2628:	4812      	ldr	r0, [pc, #72]	; (2674 <FIH_LABEL_FIH_CALL_END_946+0x2c4>)
    262a:	f003 fd52 	bl	60d2 <z_log_minimal_printk>
                rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    262e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2632:	9808      	ldr	r0, [sp, #32]
    2634:	f003 fdaa 	bl	618c <flash_area_erase>
                if (rc) {
    2638:	4604      	mov	r4, r0
    263a:	2800      	cmp	r0, #0
    263c:	f43f aefb 	beq.w	2436 <FIH_LABEL_FIH_CALL_END_946+0x86>
    2640:	e792      	b.n	2568 <FIH_LABEL_FIH_CALL_END_946+0x1b8>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    2642:	2800      	cmp	r0, #0
    2644:	f47f ae0a 	bne.w	225c <boot_serial_input+0x60>
        switch (hdr->nh_id) {
    2648:	79e3      	ldrb	r3, [r4, #7]
    264a:	2b01      	cmp	r3, #1
    264c:	f43f ae07 	beq.w	225e <boot_serial_input+0x62>
    2650:	2b05      	cmp	r3, #5
    2652:	f47f ae03 	bne.w	225c <boot_serial_input+0x60>
    bs_rc_rsp(0);
    2656:	f7ff fd71 	bl	213c <bs_rc_rsp>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    265a:	480a      	ldr	r0, [pc, #40]	; (2684 <FIH_LABEL_FIH_CALL_END_946+0x2d4>)
    265c:	f006 f940 	bl	88e0 <z_impl_k_busy_wait>
    sys_reboot(SYS_REBOOT_COLD);
    2660:	2001      	movs	r0, #1
    2662:	f7ff fb59 	bl	1d18 <sys_reboot>
    2666:	bf00      	nop
    2668:	2000dfc8 	.word	0x2000dfc8
    266c:	0000967e 	.word	0x0000967e
    2670:	2000c524 	.word	0x2000c524
    2674:	000096a9 	.word	0x000096a9
    2678:	000096cc 	.word	0x000096cc
    267c:	000096ef 	.word	0x000096ef
    2680:	0000970f 	.word	0x0000970f
    2684:	0003d090 	.word	0x0003d090

00002688 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    2688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    off = 0;
    while (1) {
        MCUBOOT_CPU_IDLE();
        MCUBOOT_WATCHDOG_FEED();
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    268c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2734 <boot_serial_start+0xac>
    int dec_off = 0;
    2690:	2400      	movs	r4, #0
{
    2692:	4606      	mov	r6, r0
    2694:	4647      	mov	r7, r8
    boot_uf = f;
    2696:	4b23      	ldr	r3, [pc, #140]	; (2724 <boot_serial_start+0x9c>)
    2698:	4d23      	ldr	r5, [pc, #140]	; (2728 <boot_serial_start+0xa0>)
    int dec_off = 0;
    269a:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    269c:	6018      	str	r0, [r3, #0]
    269e:	f000 f8fd 	bl	289c <arch_cpu_idle>
    26a2:	4b22      	ldr	r3, [pc, #136]	; (272c <boot_serial_start+0xa4>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    26a4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    26a8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    26ac:	aa01      	add	r2, sp, #4
    26ae:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
    26b2:	3101      	adds	r1, #1
    26b4:	f8c3 5608 	str.w	r5, [r3, #1544]	; 0x608
    26b8:	eb08 0004 	add.w	r0, r8, r4
    26bc:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
    26c0:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
    26c4:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    26c8:	f8c3 5618 	str.w	r5, [r3, #1560]	; 0x618
    26cc:	f8c3 561c 	str.w	r5, [r3, #1564]	; 0x61c
    26d0:	6833      	ldr	r3, [r6, #0]
    26d2:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    26d4:	2800      	cmp	r0, #0
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	dc01      	bgt.n	26de <boot_serial_start+0x56>
    26da:	2b00      	cmp	r3, #0
    26dc:	d0df      	beq.n	269e <boot_serial_start+0x16>
            continue;
        }
        off += rc;
    26de:	4404      	add	r4, r0
        if (!full_line) {
    26e0:	b92b      	cbnz	r3, 26ee <boot_serial_start+0x66>
            if (off == max_input) {
    26e2:	f240 2301 	movw	r3, #513	; 0x201
    26e6:	429c      	cmp	r4, r3
    26e8:	d1d9      	bne.n	269e <boot_serial_start+0x16>

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
        }
        off = 0;
    26ea:	2400      	movs	r4, #0
    26ec:	e7d7      	b.n	269e <boot_serial_start+0x16>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    26ee:	783b      	ldrb	r3, [r7, #0]
    26f0:	2b06      	cmp	r3, #6
    26f2:	d109      	bne.n	2708 <boot_serial_start+0x80>
    26f4:	787b      	ldrb	r3, [r7, #1]
    26f6:	2b09      	cmp	r3, #9
    26f8:	d10b      	bne.n	2712 <boot_serial_start+0x8a>
            dec_off = 0;
    26fa:	2300      	movs	r3, #0
    26fc:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    26fe:	4669      	mov	r1, sp
    2700:	1ea0      	subs	r0, r4, #2
    2702:	f7ff fd3d 	bl	2180 <boot_serial_in_dec.constprop.0>
    2706:	e004      	b.n	2712 <boot_serial_start+0x8a>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2708:	2b04      	cmp	r3, #4
    270a:	d102      	bne.n	2712 <boot_serial_start+0x8a>
    270c:	787b      	ldrb	r3, [r7, #1]
    270e:	2b14      	cmp	r3, #20
    2710:	d0f5      	beq.n	26fe <boot_serial_start+0x76>
        if (rc == 1) {
    2712:	2801      	cmp	r0, #1
    2714:	d1e9      	bne.n	26ea <boot_serial_start+0x62>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    2716:	9900      	ldr	r1, [sp, #0]
    2718:	4805      	ldr	r0, [pc, #20]	; (2730 <boot_serial_start+0xa8>)
    271a:	3902      	subs	r1, #2
    271c:	f7ff fd6e 	bl	21fc <boot_serial_input>
    2720:	e7e3      	b.n	26ea <boot_serial_start+0x62>
    2722:	bf00      	nop
    2724:	2000dfb0 	.word	0x2000dfb0
    2728:	6e524635 	.word	0x6e524635
    272c:	50018000 	.word	0x50018000
    2730:	2000fa10 	.word	0x2000fa10
    2734:	2000fc0f 	.word	0x2000fc0f

00002738 <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    2738:	b530      	push	{r4, r5, lr}
    273a:	b085      	sub	sp, #20
    273c:	4605      	mov	r5, r0
    273e:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2740:	f003 fe84 	bl	644c <map_start_decode>
    2744:	b920      	cbnz	r0, 2750 <decode_Upload+0x18>
    2746:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    2748:	f004 0001 	and.w	r0, r4, #1
    274c:	b005      	add	sp, #20
    274e:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2750:	230c      	movs	r3, #12
    2752:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    2756:	e9cd 4301 	strd	r4, r3, [sp, #4]
    275a:	2105      	movs	r1, #5
    275c:	2001      	movs	r0, #1
    275e:	4b05      	ldr	r3, [pc, #20]	; (2774 <decode_Upload+0x3c>)
    2760:	9500      	str	r5, [sp, #0]
    2762:	f003 fe83 	bl	646c <multi_decode>
    2766:	4604      	mov	r4, r0
    2768:	4628      	mov	r0, r5
    276a:	f003 fe7d 	bl	6468 <map_end_decode>
    276e:	2800      	cmp	r0, #0
    2770:	d0e9      	beq.n	2746 <decode_Upload+0xe>
    2772:	e7e9      	b.n	2748 <decode_Upload+0x10>
    2774:	00002779 	.word	0x00002779

00002778 <decode_Member>:
{
    2778:	b573      	push	{r0, r1, r4, r5, r6, lr}
    277a:	4604      	mov	r4, r0
    277c:	460e      	mov	r6, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    277e:	f003 ffa9 	bl	66d4 <union_start_code>
    2782:	4605      	mov	r5, r0
    2784:	b338      	cbz	r0, 27d6 <decode_Member+0x5e>
    2786:	4b36      	ldr	r3, [pc, #216]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    2788:	4669      	mov	r1, sp
    278a:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    278c:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    278e:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2790:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2792:	f003 fe58 	bl	6446 <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2796:	b138      	cbz	r0, 27a8 <decode_Member+0x30>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2798:	4631      	mov	r1, r6
    279a:	4620      	mov	r0, r4
    279c:	f003 fe07 	bl	63ae <intx32_decode>
    27a0:	b110      	cbz	r0, 27a8 <decode_Member+0x30>
    27a2:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    27a4:	7233      	strb	r3, [r6, #8]
    27a6:	e040      	b.n	282a <CONFIG_MAIN_STACK_SIZE+0x2a>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    27a8:	4620      	mov	r0, r4
    27aa:	f003 ff96 	bl	66da <union_elem_code>
    27ae:	b1a8      	cbz	r0, 27dc <decode_Member+0x64>
    27b0:	4b2c      	ldr	r3, [pc, #176]	; (2864 <CONFIG_MAIN_STACK_SIZE+0x64>)
    27b2:	4669      	mov	r1, sp
    27b4:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    27b6:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    27b8:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    27ba:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    27bc:	f003 fe43 	bl	6446 <tstrx_expect>
    27c0:	b160      	cbz	r0, 27dc <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    27c2:	4631      	mov	r1, r6
    27c4:	4620      	mov	r0, r4
    27c6:	f003 fe3b 	bl	6440 <bstrx_decode>
    27ca:	b138      	cbz	r0, 27dc <decode_Member+0x64>
    27cc:	2501      	movs	r5, #1
    27ce:	7235      	strb	r5, [r6, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    27d0:	4620      	mov	r0, r4
    27d2:	f003 ff86 	bl	66e2 <union_end_code>
}
    27d6:	4628      	mov	r0, r5
    27d8:	b002      	add	sp, #8
    27da:	bd70      	pop	{r4, r5, r6, pc}
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27dc:	4620      	mov	r0, r4
    27de:	f003 ff7c 	bl	66da <union_elem_code>
    27e2:	b178      	cbz	r0, 2804 <CONFIG_MAIN_STACK_SIZE+0x4>
    27e4:	4b20      	ldr	r3, [pc, #128]	; (2868 <CONFIG_MAIN_STACK_SIZE+0x68>)
    27e6:	4669      	mov	r1, sp
    27e8:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    27ea:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27ec:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    27ee:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    27f0:	f003 fe29 	bl	6446 <tstrx_expect>
    27f4:	b130      	cbz	r0, 2804 <CONFIG_MAIN_STACK_SIZE+0x4>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    27f6:	4631      	mov	r1, r6
    27f8:	4620      	mov	r0, r4
    27fa:	f003 fdd8 	bl	63ae <intx32_decode>
    27fe:	b108      	cbz	r0, 2804 <CONFIG_MAIN_STACK_SIZE+0x4>
    2800:	2302      	movs	r3, #2
    2802:	e7cf      	b.n	27a4 <decode_Member+0x2c>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    2804:	4620      	mov	r0, r4
    2806:	f003 ff68 	bl	66da <union_elem_code>
    280a:	b180      	cbz	r0, 282e <CONFIG_MAIN_STACK_SIZE+0x2e>
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    280c:	2503      	movs	r5, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    280e:	4b17      	ldr	r3, [pc, #92]	; (286c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    2810:	4669      	mov	r1, sp
    2812:	4620      	mov	r0, r4
    2814:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    2816:	9501      	str	r5, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    2818:	f003 fe15 	bl	6446 <tstrx_expect>
    281c:	b138      	cbz	r0, 282e <CONFIG_MAIN_STACK_SIZE+0x2e>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    281e:	4631      	mov	r1, r6
    2820:	4620      	mov	r0, r4
    2822:	f003 fdc4 	bl	63ae <intx32_decode>
    2826:	b110      	cbz	r0, 282e <CONFIG_MAIN_STACK_SIZE+0x2e>
    2828:	7235      	strb	r5, [r6, #8]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    282a:	2501      	movs	r5, #1
    282c:	e7d0      	b.n	27d0 <decode_Member+0x58>
    282e:	4620      	mov	r0, r4
    2830:	f003 ff53 	bl	66da <union_elem_code>
    2834:	b908      	cbnz	r0, 283a <CONFIG_MAIN_STACK_SIZE+0x3a>
    2836:	2500      	movs	r5, #0
    2838:	e7ca      	b.n	27d0 <decode_Member+0x58>
    283a:	4b0d      	ldr	r3, [pc, #52]	; (2870 <CONFIG_MAIN_STACK_SIZE+0x70>)
    283c:	4669      	mov	r1, sp
    283e:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2840:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2842:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2844:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2846:	f003 fdfe 	bl	6446 <tstrx_expect>
    284a:	2800      	cmp	r0, #0
    284c:	d0f3      	beq.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    284e:	4631      	mov	r1, r6
    2850:	4620      	mov	r0, r4
    2852:	f003 fdf5 	bl	6440 <bstrx_decode>
    2856:	2800      	cmp	r0, #0
    2858:	d0ed      	beq.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
    285a:	2304      	movs	r3, #4
    285c:	e7a2      	b.n	27a4 <decode_Member+0x2c>
    285e:	bf00      	nop
    2860:	000093a4 	.word	0x000093a4
    2864:	00009757 	.word	0x00009757
    2868:	0000975c 	.word	0x0000975c
    286c:	0000966f 	.word	0x0000966f
    2870:	00009760 	.word	0x00009760

00002874 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    2874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    2876:	f04f 0c02 	mov.w	ip, #2
    287a:	2401      	movs	r4, #1
    287c:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    2880:	4c02      	ldr	r4, [pc, #8]	; (288c <cbor_decode_Upload+0x18>)
    2882:	9400      	str	r4, [sp, #0]
    2884:	f003 ff31 	bl	66ea <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    2888:	b004      	add	sp, #16
    288a:	bd10      	pop	{r4, pc}
    288c:	00002739 	.word	0x00002739

00002890 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2890:	4901      	ldr	r1, [pc, #4]	; (2898 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2892:	2210      	movs	r2, #16
	str	r2, [r1]
    2894:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2896:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2898:	e000ed10 	.word	0xe000ed10

0000289c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    289c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    289e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    28a0:	f380 8811 	msr	BASEPRI, r0
	isb
    28a4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    28a8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    28ac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    28ae:	b662      	cpsie	i
	isb
    28b0:	f3bf 8f6f 	isb	sy

	bx	lr
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop

000028b8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    28b8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    28ba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    28bc:	f381 8811 	msr	BASEPRI, r1

	wfe
    28c0:	bf20      	wfe

	msr	BASEPRI, r0
    28c2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    28c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    28c8:	4770      	bx	lr
    28ca:	bf00      	nop

000028cc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    28cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    28ce:	4605      	mov	r5, r0

	if (esf != NULL) {
    28d0:	460c      	mov	r4, r1
    28d2:	b1c9      	cbz	r1, 2908 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    28d4:	688b      	ldr	r3, [r1, #8]
    28d6:	4810      	ldr	r0, [pc, #64]	; (2918 <z_arm_fatal_error+0x4c>)
    28d8:	9300      	str	r3, [sp, #0]
    28da:	e9d1 2300 	ldrd	r2, r3, [r1]
    28de:	2145      	movs	r1, #69	; 0x45
    28e0:	f003 fbf7 	bl	60d2 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    28e4:	6963      	ldr	r3, [r4, #20]
    28e6:	2145      	movs	r1, #69	; 0x45
    28e8:	9300      	str	r3, [sp, #0]
    28ea:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    28ee:	480b      	ldr	r0, [pc, #44]	; (291c <z_arm_fatal_error+0x50>)
    28f0:	f003 fbef 	bl	60d2 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    28f4:	2145      	movs	r1, #69	; 0x45
    28f6:	69e2      	ldr	r2, [r4, #28]
    28f8:	4809      	ldr	r0, [pc, #36]	; (2920 <z_arm_fatal_error+0x54>)
    28fa:	f003 fbea 	bl	60d2 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    28fe:	2145      	movs	r1, #69	; 0x45
    2900:	69a2      	ldr	r2, [r4, #24]
    2902:	4808      	ldr	r0, [pc, #32]	; (2924 <z_arm_fatal_error+0x58>)
    2904:	f003 fbe5 	bl	60d2 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2908:	4621      	mov	r1, r4
    290a:	4628      	mov	r0, r5
}
    290c:	b003      	add	sp, #12
    290e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2912:	f002 bd4d 	b.w	53b0 <z_fatal_error>
    2916:	bf00      	nop
    2918:	00009764 	.word	0x00009764
    291c:	00009798 	.word	0x00009798
    2920:	000097cc 	.word	0x000097cc
    2924:	000097e0 	.word	0x000097e0

00002928 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2928:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    292a:	2b00      	cmp	r3, #0
    292c:	db08      	blt.n	2940 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    292e:	2201      	movs	r2, #1
    2930:	f000 001f 	and.w	r0, r0, #31
    2934:	fa02 f000 	lsl.w	r0, r2, r0
    2938:	4a02      	ldr	r2, [pc, #8]	; (2944 <arch_irq_enable+0x1c>)
    293a:	095b      	lsrs	r3, r3, #5
    293c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2940:	4770      	bx	lr
    2942:	bf00      	nop
    2944:	e000e100 	.word	0xe000e100

00002948 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2948:	4b05      	ldr	r3, [pc, #20]	; (2960 <arch_irq_is_enabled+0x18>)
    294a:	0942      	lsrs	r2, r0, #5
    294c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2950:	2301      	movs	r3, #1
    2952:	f000 001f 	and.w	r0, r0, #31
    2956:	fa03 f000 	lsl.w	r0, r3, r0
}
    295a:	4010      	ands	r0, r2
    295c:	4770      	bx	lr
    295e:	bf00      	nop
    2960:	e000e100 	.word	0xe000e100

00002964 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2964:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2966:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    2968:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    296c:	bfac      	ite	ge
    296e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2972:	4b06      	ldrlt	r3, [pc, #24]	; (298c <z_arm_irq_priority_set+0x28>)
    2974:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2978:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    297a:	bfab      	itete	ge
    297c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2980:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2984:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2988:	5419      	strblt	r1, [r3, r0]
}
    298a:	4770      	bx	lr
    298c:	e000ed14 	.word	0xe000ed14

00002990 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2990:	bf30      	wfi
    b z_SysNmiOnReset
    2992:	f7ff bffd 	b.w	2990 <z_SysNmiOnReset>
    2996:	bf00      	nop

00002998 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2998:	4a0b      	ldr	r2, [pc, #44]	; (29c8 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    299a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    299c:	4b0b      	ldr	r3, [pc, #44]	; (29cc <z_arm_prep_c+0x34>)
    299e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    29a2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    29a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29a8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    29ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    29b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    29b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    29b8:	f002 fd50 	bl	545c <z_bss_zero>
	z_data_copy();
    29bc:	f002 fd92 	bl	54e4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    29c0:	f000 fa32 	bl	2e28 <z_arm_interrupt_init>
	z_cstart();
    29c4:	f002 fd54 	bl	5470 <z_cstart>
    29c8:	00000000 	.word	0x00000000
    29cc:	e000ed00 	.word	0xe000ed00

000029d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    29d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    29d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    29d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    29da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    29de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    29e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    29e4:	2902      	cmp	r1, #2
    beq _oops
    29e6:	d0ff      	beq.n	29e8 <_oops>

000029e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    29e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    29ea:	f003 feb0 	bl	674e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    29ee:	bd01      	pop	{r0, pc}

000029f0 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    29f0:	4604      	mov	r4, r0
    29f2:	4608      	mov	r0, r1
    29f4:	4611      	mov	r1, r2
    29f6:	461a      	mov	r2, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    29f8:	2300      	movs	r3, #0
    29fa:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    29fe:	4b0a      	ldr	r3, [pc, #40]	; (2a28 <loop+0x2>)
    2a00:	2520      	movs	r5, #32
    2a02:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    2a06:	f386 880b 	msr	PSPLIM, r6
    2a0a:	f383 8809 	msr	PSP, r3
    2a0e:	b663      	cpsie	if
    2a10:	f04f 0300 	mov.w	r3, #0
    2a14:	f383 8811 	msr	BASEPRI, r3
    2a18:	f3bf 8f6f 	isb	sy
    2a1c:	47a0      	blx	r4
    2a1e:	f385 8811 	msr	BASEPRI, r5
    2a22:	f3bf 8f6f 	isb	sy

00002a26 <loop>:
    2a26:	e7fe      	b.n	2a26 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2a28:	20012658 	.word	0x20012658

00002a2c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2a2c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2a2e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2a32:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2a36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2a3a:	4904      	ldr	r1, [pc, #16]	; (2a4c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2a3c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2a3e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2a40:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2a42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2a46:	4902      	ldr	r1, [pc, #8]	; (2a50 <_isr_wrapper+0x24>)
	bx r1
    2a48:	4708      	bx	r1
    2a4a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2a4c:	000089c0 	.word	0x000089c0
	ldr r1, =z_arm_int_exit
    2a50:	00002a55 	.word	0x00002a55

00002a54 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2a54:	4770      	bx	lr
    2a56:	bf00      	nop

00002a58 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2a58:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a5a:	4c22      	ldr	r4, [pc, #136]	; (2ae4 <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2a5c:	4606      	mov	r6, r0
    2a5e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a60:	4821      	ldr	r0, [pc, #132]	; (2ae8 <mem_manage_fault.isra.0+0x90>)
    2a62:	2145      	movs	r1, #69	; 0x45
    2a64:	f003 fb35 	bl	60d2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2a6a:	06d0      	lsls	r0, r2, #27
    2a6c:	d503      	bpl.n	2a76 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2a6e:	2145      	movs	r1, #69	; 0x45
    2a70:	481e      	ldr	r0, [pc, #120]	; (2aec <mem_manage_fault.isra.0+0x94>)
    2a72:	f003 fb2e 	bl	60d2 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a78:	0719      	lsls	r1, r3, #28
    2a7a:	d503      	bpl.n	2a84 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2a7c:	2145      	movs	r1, #69	; 0x45
    2a7e:	481c      	ldr	r0, [pc, #112]	; (2af0 <mem_manage_fault.isra.0+0x98>)
    2a80:	f003 fb27 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2a84:	4c17      	ldr	r4, [pc, #92]	; (2ae4 <mem_manage_fault.isra.0+0x8c>)
    2a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a88:	079a      	lsls	r2, r3, #30
    2a8a:	d510      	bpl.n	2aae <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2a8c:	2145      	movs	r1, #69	; 0x45
    2a8e:	4819      	ldr	r0, [pc, #100]	; (2af4 <mem_manage_fault.isra.0+0x9c>)
    2a90:	f003 fb1f 	bl	60d2 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2a94:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a98:	061b      	lsls	r3, r3, #24
    2a9a:	d508      	bpl.n	2aae <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2a9c:	2145      	movs	r1, #69	; 0x45
    2a9e:	4816      	ldr	r0, [pc, #88]	; (2af8 <mem_manage_fault.isra.0+0xa0>)
    2aa0:	f003 fb17 	bl	60d2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2aa4:	b11e      	cbz	r6, 2aae <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2aac:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2aae:	4c0d      	ldr	r4, [pc, #52]	; (2ae4 <mem_manage_fault.isra.0+0x8c>)
    2ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2ab2:	07d0      	lsls	r0, r2, #31
    2ab4:	d503      	bpl.n	2abe <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2ab6:	2145      	movs	r1, #69	; 0x45
    2ab8:	4810      	ldr	r0, [pc, #64]	; (2afc <mem_manage_fault.isra.0+0xa4>)
    2aba:	f003 fb0a 	bl	60d2 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ac0:	0699      	lsls	r1, r3, #26
    2ac2:	d503      	bpl.n	2acc <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    2ac4:	2145      	movs	r1, #69	; 0x45
    2ac6:	480e      	ldr	r0, [pc, #56]	; (2b00 <mem_manage_fault.isra.0+0xa8>)
    2ac8:	f003 fb03 	bl	60d2 <z_log_minimal_printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2acc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2ace:	4b05      	ldr	r3, [pc, #20]	; (2ae4 <mem_manage_fault.isra.0+0x8c>)
    2ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ad2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2ad4:	bf58      	it	pl
    2ad6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ada:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2ade:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2ae0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2ae2:	bd70      	pop	{r4, r5, r6, pc}
    2ae4:	e000ed00 	.word	0xe000ed00
    2ae8:	00009813 	.word	0x00009813
    2aec:	0000982e 	.word	0x0000982e
    2af0:	00009866 	.word	0x00009866
    2af4:	0000987e 	.word	0x0000987e
    2af8:	0000989b 	.word	0x0000989b
    2afc:	000098b6 	.word	0x000098b6
    2b00:	000098da 	.word	0x000098da

00002b04 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2b04:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2b06:	4c23      	ldr	r4, [pc, #140]	; (2b94 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2b08:	4606      	mov	r6, r0
    2b0a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2b0c:	4822      	ldr	r0, [pc, #136]	; (2b98 <bus_fault.isra.0+0x94>)
    2b0e:	2145      	movs	r1, #69	; 0x45
    2b10:	f003 fadf 	bl	60d2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2b14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2b16:	04d1      	lsls	r1, r2, #19
    2b18:	d503      	bpl.n	2b22 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2b1a:	2145      	movs	r1, #69	; 0x45
    2b1c:	481f      	ldr	r0, [pc, #124]	; (2b9c <bus_fault.isra.0+0x98>)
    2b1e:	f003 fad8 	bl	60d2 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b24:	051a      	lsls	r2, r3, #20
    2b26:	d503      	bpl.n	2b30 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2b28:	2145      	movs	r1, #69	; 0x45
    2b2a:	481d      	ldr	r0, [pc, #116]	; (2ba0 <bus_fault.isra.0+0x9c>)
    2b2c:	f003 fad1 	bl	60d2 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2b30:	4c18      	ldr	r4, [pc, #96]	; (2b94 <bus_fault.isra.0+0x90>)
    2b32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b34:	059b      	lsls	r3, r3, #22
    2b36:	d510      	bpl.n	2b5a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2b38:	481a      	ldr	r0, [pc, #104]	; (2ba4 <bus_fault.isra.0+0xa0>)
    2b3a:	2145      	movs	r1, #69	; 0x45
    2b3c:	f003 fac9 	bl	60d2 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2b40:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b44:	0418      	lsls	r0, r3, #16
    2b46:	d508      	bpl.n	2b5a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2b48:	2145      	movs	r1, #69	; 0x45
    2b4a:	4817      	ldr	r0, [pc, #92]	; (2ba8 <bus_fault.isra.0+0xa4>)
    2b4c:	f003 fac1 	bl	60d2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2b50:	b11e      	cbz	r6, 2b5a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2b58:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2b5a:	4c0e      	ldr	r4, [pc, #56]	; (2b94 <bus_fault.isra.0+0x90>)
    2b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b5e:	0559      	lsls	r1, r3, #21
    2b60:	d503      	bpl.n	2b6a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2b62:	2145      	movs	r1, #69	; 0x45
    2b64:	4811      	ldr	r0, [pc, #68]	; (2bac <bus_fault.isra.0+0xa8>)
    2b66:	f003 fab4 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b6c:	05da      	lsls	r2, r3, #23
    2b6e:	d50b      	bpl.n	2b88 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2b70:	2145      	movs	r1, #69	; 0x45
    2b72:	480f      	ldr	r0, [pc, #60]	; (2bb0 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b74:	f003 faad 	bl	60d2 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2b78:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b7a:	4a06      	ldr	r2, [pc, #24]	; (2b94 <bus_fault.isra.0+0x90>)
    2b7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b7e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2b82:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b84:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2b86:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b8a:	049b      	lsls	r3, r3, #18
    2b8c:	d5f4      	bpl.n	2b78 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b8e:	2145      	movs	r1, #69	; 0x45
    2b90:	4808      	ldr	r0, [pc, #32]	; (2bb4 <bus_fault.isra.0+0xb0>)
    2b92:	e7ef      	b.n	2b74 <bus_fault.isra.0+0x70>
    2b94:	e000ed00 	.word	0xe000ed00
    2b98:	0000990e 	.word	0x0000990e
    2b9c:	00009929 	.word	0x00009929
    2ba0:	00009866 	.word	0x00009866
    2ba4:	0000993f 	.word	0x0000993f
    2ba8:	0000995d 	.word	0x0000995d
    2bac:	00009977 	.word	0x00009977
    2bb0:	00009997 	.word	0x00009997
    2bb4:	000098da 	.word	0x000098da

00002bb8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2bb8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2bba:	4c21      	ldr	r4, [pc, #132]	; (2c40 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2bbc:	2145      	movs	r1, #69	; 0x45
    2bbe:	4821      	ldr	r0, [pc, #132]	; (2c44 <usage_fault.isra.0+0x8c>)
    2bc0:	f003 fa87 	bl	60d2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2bc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2bc6:	0195      	lsls	r5, r2, #6
    2bc8:	d503      	bpl.n	2bd2 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2bca:	2145      	movs	r1, #69	; 0x45
    2bcc:	481e      	ldr	r0, [pc, #120]	; (2c48 <usage_fault.isra.0+0x90>)
    2bce:	f003 fa80 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2bd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bd4:	01dc      	lsls	r4, r3, #7
    2bd6:	d503      	bpl.n	2be0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2bd8:	2145      	movs	r1, #69	; 0x45
    2bda:	481c      	ldr	r0, [pc, #112]	; (2c4c <usage_fault.isra.0+0x94>)
    2bdc:	f003 fa79 	bl	60d2 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2be0:	4d17      	ldr	r5, [pc, #92]	; (2c40 <usage_fault.isra.0+0x88>)
    2be2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2be4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2be8:	d004      	beq.n	2bf4 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2bea:	2145      	movs	r1, #69	; 0x45
    2bec:	4818      	ldr	r0, [pc, #96]	; (2c50 <usage_fault.isra.0+0x98>)
    2bee:	f003 fa70 	bl	60d2 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2bf2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2bf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2bf6:	0318      	lsls	r0, r3, #12
    2bf8:	d503      	bpl.n	2c02 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2bfa:	2145      	movs	r1, #69	; 0x45
    2bfc:	4815      	ldr	r0, [pc, #84]	; (2c54 <usage_fault.isra.0+0x9c>)
    2bfe:	f003 fa68 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2c02:	4d0f      	ldr	r5, [pc, #60]	; (2c40 <usage_fault.isra.0+0x88>)
    2c04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2c06:	0351      	lsls	r1, r2, #13
    2c08:	d503      	bpl.n	2c12 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2c0a:	2145      	movs	r1, #69	; 0x45
    2c0c:	4812      	ldr	r0, [pc, #72]	; (2c58 <usage_fault.isra.0+0xa0>)
    2c0e:	f003 fa60 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2c12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2c14:	039a      	lsls	r2, r3, #14
    2c16:	d503      	bpl.n	2c20 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2c18:	2145      	movs	r1, #69	; 0x45
    2c1a:	4810      	ldr	r0, [pc, #64]	; (2c5c <usage_fault.isra.0+0xa4>)
    2c1c:	f003 fa59 	bl	60d2 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2c20:	4d07      	ldr	r5, [pc, #28]	; (2c40 <usage_fault.isra.0+0x88>)
    2c22:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2c24:	03db      	lsls	r3, r3, #15
    2c26:	d503      	bpl.n	2c30 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2c28:	2145      	movs	r1, #69	; 0x45
    2c2a:	480d      	ldr	r0, [pc, #52]	; (2c60 <usage_fault.isra.0+0xa8>)
    2c2c:	f003 fa51 	bl	60d2 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2c30:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2c32:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2c34:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2c38:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2c3c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2c3e:	bd38      	pop	{r3, r4, r5, pc}
    2c40:	e000ed00 	.word	0xe000ed00
    2c44:	000099b4 	.word	0x000099b4
    2c48:	000099d1 	.word	0x000099d1
    2c4c:	000099e9 	.word	0x000099e9
    2c50:	00009a08 	.word	0x00009a08
    2c54:	00009a37 	.word	0x00009a37
    2c58:	00009a5a 	.word	0x00009a5a
    2c5c:	00009a84 	.word	0x00009a84
    2c60:	00009aa3 	.word	0x00009aa3

00002c64 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c68:	4b57      	ldr	r3, [pc, #348]	; (2dc8 <z_arm_fault+0x164>)
{
    2c6a:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
    2c70:	2500      	movs	r5, #0
{
    2c72:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c74:	f3c9 0808 	ubfx	r8, r9, #0, #9
    2c78:	f385 8811 	msr	BASEPRI, r5
    2c7c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c80:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c84:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c88:	d107      	bne.n	2c9a <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c8a:	f002 030c 	and.w	r3, r2, #12
    2c8e:	2b08      	cmp	r3, #8
    2c90:	d105      	bne.n	2c9e <z_arm_fault+0x3a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c92:	2145      	movs	r1, #69	; 0x45
    2c94:	484d      	ldr	r0, [pc, #308]	; (2dcc <z_arm_fault+0x168>)
    2c96:	f003 fa1c 	bl	60d2 <z_log_minimal_printk>
		return NULL;
    2c9a:	462f      	mov	r7, r5
    2c9c:	e003      	b.n	2ca6 <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c9e:	0712      	lsls	r2, r2, #28
    2ca0:	d401      	bmi.n	2ca6 <z_arm_fault+0x42>
			ptr_esf = (z_arch_esf_t *)msp;
    2ca2:	4607      	mov	r7, r0
			*nested_exc = true;
    2ca4:	2501      	movs	r5, #1
	*recoverable = false;
    2ca6:	2200      	movs	r2, #0
    2ca8:	f1a8 0603 	sub.w	r6, r8, #3
    2cac:	4614      	mov	r4, r2
    2cae:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2cb2:	2e09      	cmp	r6, #9
    2cb4:	d876      	bhi.n	2da4 <z_arm_fault+0x140>
    2cb6:	e8df f006 	tbb	[pc, r6]
    2cba:	6a05      	.short	0x6a05
    2cbc:	7575676e 	.word	0x7575676e
    2cc0:	72757575 	.word	0x72757575
	PR_FAULT_INFO("***** HARD FAULT *****");
    2cc4:	2145      	movs	r1, #69	; 0x45
    2cc6:	4842      	ldr	r0, [pc, #264]	; (2dd0 <z_arm_fault+0x16c>)
    2cc8:	f003 fa03 	bl	60d2 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2ccc:	4b3e      	ldr	r3, [pc, #248]	; (2dc8 <z_arm_fault+0x164>)
	*recoverable = false;
    2cce:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cd2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2cd4:	f014 0402 	ands.w	r4, r4, #2
    2cd8:	d005      	beq.n	2ce6 <z_arm_fault+0x82>
		PR_EXC("  Bus fault on vector table read");
    2cda:	2145      	movs	r1, #69	; 0x45
    2cdc:	483d      	ldr	r0, [pc, #244]	; (2dd4 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    2cde:	f003 f9f8 	bl	60d2 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2ce2:	2400      	movs	r4, #0
}
    2ce4:	e006      	b.n	2cf4 <z_arm_fault+0x90>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ce8:	2a00      	cmp	r2, #0
    2cea:	da1d      	bge.n	2d28 <z_arm_fault+0xc4>
		PR_EXC("  Debug event");
    2cec:	2145      	movs	r1, #69	; 0x45
    2cee:	483a      	ldr	r0, [pc, #232]	; (2dd8 <z_arm_fault+0x174>)
    2cf0:	f003 f9ef 	bl	60d2 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2cf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2cf8:	b99b      	cbnz	r3, 2d22 <z_arm_fault+0xbe>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2cfa:	2220      	movs	r2, #32
    2cfc:	4639      	mov	r1, r7
    2cfe:	a802      	add	r0, sp, #8
    2d00:	f003 fd77 	bl	67f2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d06:	2d00      	cmp	r5, #0
    2d08:	d059      	beq.n	2dbe <z_arm_fault+0x15a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2d0e:	b922      	cbnz	r2, 2d1a <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2d10:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d14:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d18:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2d1a:	4620      	mov	r0, r4
    2d1c:	a902      	add	r1, sp, #8
    2d1e:	f7ff fdd5 	bl	28cc <z_arm_fatal_error>
}
    2d22:	b00b      	add	sp, #44	; 0x2c
    2d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d2a:	005b      	lsls	r3, r3, #1
    2d2c:	d5e2      	bpl.n	2cf4 <z_arm_fault+0x90>
		PR_EXC("  Fault escalation (see below)");
    2d2e:	2145      	movs	r1, #69	; 0x45
    2d30:	482a      	ldr	r0, [pc, #168]	; (2ddc <z_arm_fault+0x178>)
    2d32:	f003 f9ce 	bl	60d2 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2d36:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2d38:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2d3c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d40:	429a      	cmp	r2, r3
    2d42:	d00c      	beq.n	2d5e <z_arm_fault+0xfa>
		} else if (SCB_MMFSR != 0) {
    2d44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d48:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	b16b      	cbz	r3, 2d6c <z_arm_fault+0x108>
			reason = mem_manage_fault(esf, 1, recoverable);
    2d50:	2001      	movs	r0, #1
    2d52:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2d56:	f7ff fe7f 	bl	2a58 <mem_manage_fault.isra.0>
    2d5a:	4604      	mov	r4, r0
		break;
    2d5c:	e7ca      	b.n	2cf4 <z_arm_fault+0x90>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2d5e:	2145      	movs	r1, #69	; 0x45
    2d60:	683a      	ldr	r2, [r7, #0]
    2d62:	481f      	ldr	r0, [pc, #124]	; (2de0 <z_arm_fault+0x17c>)
    2d64:	f003 f9b5 	bl	60d2 <z_log_minimal_printk>
			reason = esf->basic.r0;
    2d68:	683c      	ldr	r4, [r7, #0]
    2d6a:	e7c3      	b.n	2cf4 <z_arm_fault+0x90>
		} else if (SCB_BFSR != 0) {
    2d6c:	4b1d      	ldr	r3, [pc, #116]	; (2de4 <z_arm_fault+0x180>)
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	b12b      	cbz	r3, 2d7e <z_arm_fault+0x11a>
			reason = bus_fault(esf, 1, recoverable);
    2d72:	2001      	movs	r0, #1
    2d74:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2d78:	f7ff fec4 	bl	2b04 <bus_fault.isra.0>
    2d7c:	e7ed      	b.n	2d5a <z_arm_fault+0xf6>
		} else if (SCB_UFSR != 0) {
    2d7e:	4b1a      	ldr	r3, [pc, #104]	; (2de8 <z_arm_fault+0x184>)
    2d80:	881b      	ldrh	r3, [r3, #0]
    2d82:	b29b      	uxth	r3, r3
    2d84:	2b00      	cmp	r3, #0
    2d86:	d0b5      	beq.n	2cf4 <z_arm_fault+0x90>
		reason = usage_fault(esf);
    2d88:	f7ff ff16 	bl	2bb8 <usage_fault.isra.0>
    2d8c:	e7e5      	b.n	2d5a <z_arm_fault+0xf6>
		reason = mem_manage_fault(esf, 0, recoverable);
    2d8e:	2000      	movs	r0, #0
    2d90:	f10d 0107 	add.w	r1, sp, #7
    2d94:	e7df      	b.n	2d56 <z_arm_fault+0xf2>
		reason = bus_fault(esf, 0, recoverable);
    2d96:	2000      	movs	r0, #0
    2d98:	f10d 0107 	add.w	r1, sp, #7
    2d9c:	e7ec      	b.n	2d78 <z_arm_fault+0x114>
	PR_FAULT_INFO(
    2d9e:	2145      	movs	r1, #69	; 0x45
    2da0:	4812      	ldr	r0, [pc, #72]	; (2dec <z_arm_fault+0x188>)
    2da2:	e79c      	b.n	2cde <z_arm_fault+0x7a>
	PR_FAULT_INFO("***** %s %d) *****",
    2da4:	4912      	ldr	r1, [pc, #72]	; (2df0 <z_arm_fault+0x18c>)
    2da6:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    2daa:	4a12      	ldr	r2, [pc, #72]	; (2df4 <z_arm_fault+0x190>)
    2dac:	4812      	ldr	r0, [pc, #72]	; (2df8 <z_arm_fault+0x194>)
    2dae:	bf08      	it	eq
    2db0:	460a      	moveq	r2, r1
    2db2:	f1a8 0310 	sub.w	r3, r8, #16
    2db6:	2145      	movs	r1, #69	; 0x45
    2db8:	f003 f98b 	bl	60d2 <z_log_minimal_printk>
    2dbc:	e791      	b.n	2ce2 <z_arm_fault+0x7e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2dbe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2dc2:	f023 0301 	bic.w	r3, r3, #1
    2dc6:	e7a7      	b.n	2d18 <z_arm_fault+0xb4>
    2dc8:	e000ed00 	.word	0xe000ed00
    2dcc:	00009b01 	.word	0x00009b01
    2dd0:	00009b31 	.word	0x00009b31
    2dd4:	00009b4d 	.word	0x00009b4d
    2dd8:	00009b73 	.word	0x00009b73
    2ddc:	00009b86 	.word	0x00009b86
    2de0:	00009baa 	.word	0x00009baa
    2de4:	e000ed29 	.word	0xe000ed29
    2de8:	e000ed2a 	.word	0xe000ed2a
    2dec:	00009bcb 	.word	0x00009bcb
    2df0:	00009ad3 	.word	0x00009ad3
    2df4:	00009ae8 	.word	0x00009ae8
    2df8:	00009bf4 	.word	0x00009bf4

00002dfc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2dfc:	4b04      	ldr	r3, [pc, #16]	; (2e10 <z_arm_fault_init+0x14>)
    2dfe:	695a      	ldr	r2, [r3, #20]
    2e00:	f042 0210 	orr.w	r2, r2, #16
    2e04:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2e06:	695a      	ldr	r2, [r3, #20]
    2e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2e0c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2e0e:	4770      	bx	lr
    2e10:	e000ed00 	.word	0xe000ed00

00002e14 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2e14:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2e18:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2e1c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2e1e:	4672      	mov	r2, lr
	bl z_arm_fault
    2e20:	f7ff ff20 	bl	2c64 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2e24:	bd01      	pop	{r0, pc}
    2e26:	bf00      	nop

00002e28 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2e28:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e2a:	2120      	movs	r1, #32
    2e2c:	4803      	ldr	r0, [pc, #12]	; (2e3c <z_arm_interrupt_init+0x14>)
    2e2e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2e30:	3301      	adds	r3, #1
    2e32:	2b41      	cmp	r3, #65	; 0x41
    2e34:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2e38:	d1f9      	bne.n	2e2e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2e3a:	4770      	bx	lr
    2e3c:	e000e100 	.word	0xe000e100

00002e40 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2e40:	2000      	movs	r0, #0
    msr CONTROL, r0
    2e42:	f380 8814 	msr	CONTROL, r0
    isb
    2e46:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2e4a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2e4c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2e50:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2e54:	f005 fd4a 	bl	88ec <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2e58:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2e5a:	490e      	ldr	r1, [pc, #56]	; (2e94 <__start+0x54>)
    str r0, [r1]
    2e5c:	6008      	str	r0, [r1, #0]
    dsb
    2e5e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e62:	480d      	ldr	r0, [pc, #52]	; (2e98 <__start+0x58>)
    msr msp, r0
    2e64:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2e68:	f000 f83c 	bl	2ee4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2e6c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2e6e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2e72:	480a      	ldr	r0, [pc, #40]	; (2e9c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2e78:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2e7a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2e7e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2e82:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2e84:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2e86:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2e8a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2e8e:	f7ff fd83 	bl	2998 <z_arm_prep_c>
    2e92:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2e94:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e98:	20012658 	.word	0x20012658
    ldr r0, =z_interrupt_stacks
    2e9c:	20012658 	.word	0x20012658

00002ea0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2ea0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2ea4:	4905      	ldr	r1, [pc, #20]	; (2ebc <sys_arch_reboot+0x1c>)
    2ea6:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <sys_arch_reboot+0x20>)
    2ea8:	68ca      	ldr	r2, [r1, #12]
    2eaa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2eae:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2eb0:	60cb      	str	r3, [r1, #12]
    2eb2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2eb6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2eb8:	e7fd      	b.n	2eb6 <sys_arch_reboot+0x16>
    2eba:	bf00      	nop
    2ebc:	e000ed00 	.word	0xe000ed00
    2ec0:	05fa0004 	.word	0x05fa0004

00002ec4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2ec4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2ec6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2ec8:	4a05      	ldr	r2, [pc, #20]	; (2ee0 <z_arm_clear_arm_mpu_config+0x1c>)
    2eca:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    2ecc:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    2ed0:	428b      	cmp	r3, r1
    2ed2:	d100      	bne.n	2ed6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2ed4:	4770      	bx	lr
  mpu->RNR = rnr;
    2ed6:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    2ed8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2eda:	3301      	adds	r3, #1
    2edc:	e7f8      	b.n	2ed0 <z_arm_clear_arm_mpu_config+0xc>
    2ede:	bf00      	nop
    2ee0:	e000ed90 	.word	0xe000ed90

00002ee4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2ee4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2ee6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2ee8:	2400      	movs	r4, #0
    2eea:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2eee:	f7ff ffe9 	bl	2ec4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2ef2:	4a0e      	ldr	r2, [pc, #56]	; (2f2c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    2ef4:	4623      	mov	r3, r4
    2ef6:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    2ef8:	f04f 34ff 	mov.w	r4, #4294967295
    2efc:	f103 0020 	add.w	r0, r3, #32
    2f00:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2f02:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2f04:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2f08:	d1f8      	bne.n	2efc <z_arm_init_arch_hw_at_boot+0x18>
    2f0a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f0c:	f04f 30ff 	mov.w	r0, #4294967295
    2f10:	f103 0260 	add.w	r2, r3, #96	; 0x60
    2f14:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2f16:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f18:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2f1c:	d1f8      	bne.n	2f10 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2f1e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f24:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2f28:	bd10      	pop	{r4, pc}
    2f2a:	bf00      	nop
    2f2c:	e000e100 	.word	0xe000e100

00002f30 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2f30:	2101      	movs	r1, #1
    2f32:	4b02      	ldr	r3, [pc, #8]	; (2f3c <z_arm_configure_static_mpu_regions+0xc>)
    2f34:	4a02      	ldr	r2, [pc, #8]	; (2f40 <z_arm_configure_static_mpu_regions+0x10>)
    2f36:	4803      	ldr	r0, [pc, #12]	; (2f44 <z_arm_configure_static_mpu_regions+0x14>)
    2f38:	f000 b90c 	b.w	3154 <arm_core_mpu_configure_static_mpu_regions>
    2f3c:	20040000 	.word	0x20040000
    2f40:	2000c500 	.word	0x2000c500
    2f44:	00008d2c 	.word	0x00008d2c

00002f48 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2f48:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2f4a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2f4c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2f4e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2f52:	f004 031f 	and.w	r3, r4, #31
    2f56:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2f58:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2f5a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2f5c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2f60:	4904      	ldr	r1, [pc, #16]	; (2f74 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2f62:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2f66:	f043 0301 	orr.w	r3, r3, #1
    2f6a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2f6c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2f6e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2f70:	bd10      	pop	{r4, pc}
    2f72:	bf00      	nop
    2f74:	e000ed90 	.word	0xe000ed90

00002f78 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2f78:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2f7a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2f7c:	680c      	ldr	r4, [r1, #0]
{
    2f7e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2f80:	890a      	ldrh	r2, [r1, #8]
    2f82:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2f84:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f86:	3b01      	subs	r3, #1
    2f88:	f024 041f 	bic.w	r4, r4, #31
    2f8c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2f8e:	f002 021f 	and.w	r2, r2, #31
    2f92:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f96:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2f9a:	280f      	cmp	r0, #15
    2f9c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2f9e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2fa2:	9303      	str	r3, [sp, #12]
    2fa4:	d909      	bls.n	2fba <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2fa6:	4602      	mov	r2, r0
    2fa8:	2145      	movs	r1, #69	; 0x45
    2faa:	4806      	ldr	r0, [pc, #24]	; (2fc4 <mpu_configure_region+0x4c>)
    2fac:	f003 f891 	bl	60d2 <z_log_minimal_printk>
    2fb0:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2fb4:	4620      	mov	r0, r4
    2fb6:	b005      	add	sp, #20
    2fb8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2fba:	4669      	mov	r1, sp
    2fbc:	f7ff ffc4 	bl	2f48 <region_init>
	return region_allocate_and_init(index,
    2fc0:	e7f8      	b.n	2fb4 <mpu_configure_region+0x3c>
    2fc2:	bf00      	nop
    2fc4:	00009c10 	.word	0x00009c10

00002fc8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fcc:	4689      	mov	r9, r1
    2fce:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2fd0:	4606      	mov	r6, r0
    2fd2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2fd6:	4d52      	ldr	r5, [pc, #328]	; (3120 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2fd8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2fda:	45c8      	cmp	r8, r9
    2fdc:	da23      	bge.n	3026 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2fde:	6877      	ldr	r7, [r6, #4]
    2fe0:	2f00      	cmp	r7, #0
    2fe2:	d042      	beq.n	306a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2fe4:	2f1f      	cmp	r7, #31
    2fe6:	d917      	bls.n	3018 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2fe8:	06fb      	lsls	r3, r7, #27
    2fea:	d115      	bne.n	3018 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2fec:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2ff0:	f01a 0f1f 	tst.w	sl, #31
    2ff4:	d110      	bne.n	3018 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ff6:	4650      	mov	r0, sl
    2ff8:	f003 fbb8 	bl	676c <arm_cmse_mpu_region_get>
    2ffc:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2ffe:	eb07 000a 	add.w	r0, r7, sl
    3002:	3801      	subs	r0, #1
    3004:	f003 fbb2 	bl	676c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3008:	4583      	cmp	fp, r0
    300a:	d010      	beq.n	302e <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    300c:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    3010:	465a      	mov	r2, fp
    3012:	2145      	movs	r1, #69	; 0x45
    3014:	4843      	ldr	r0, [pc, #268]	; (3124 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    3016:	e002      	b.n	301e <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3018:	4642      	mov	r2, r8
    301a:	2145      	movs	r1, #69	; 0x45
    301c:	4842      	ldr	r0, [pc, #264]	; (3128 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    301e:	f003 f858 	bl	60d2 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    3022:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3026:	4620      	mov	r0, r4
    3028:	b005      	add	sp, #20
    302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    302e:	f11b 0f16 	cmn.w	fp, #22
    3032:	d0ed      	beq.n	3010 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    3034:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    3036:	455b      	cmp	r3, fp
    3038:	dbea      	blt.n	3010 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    303a:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    303e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    3040:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3044:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3046:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    304a:	e9d6 3200 	ldrd	r3, r2, [r6]
    304e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    3050:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3052:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3056:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    305a:	d11c      	bne.n	3096 <mpu_configure_regions_and_partition.constprop.0+0xce>
    305c:	4557      	cmp	r7, sl
    305e:	d108      	bne.n	3072 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    3060:	4631      	mov	r1, r6
    3062:	fa5f f08b 	uxtb.w	r0, fp
    3066:	f7ff ff87 	bl	2f78 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    306a:	f108 0801 	add.w	r8, r8, #1
    306e:	360c      	adds	r6, #12
    3070:	e7b3      	b.n	2fda <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    3072:	4631      	mov	r1, r6
	MPU->RNR = index;
    3074:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3078:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    307a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    307e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3082:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3084:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    3086:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3088:	f7ff ff76 	bl	2f78 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    308c:	f110 0f16 	cmn.w	r0, #22
    3090:	d0c7      	beq.n	3022 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    3092:	1c44      	adds	r4, r0, #1
    3094:	e7e9      	b.n	306a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    3096:	3b01      	subs	r3, #1
    3098:	4557      	cmp	r7, sl
    309a:	b2e0      	uxtb	r0, r4
    309c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    30a0:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    30a4:	d106      	bne.n	30b4 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30a6:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    30a8:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30aa:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    30ae:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30b0:	612b      	str	r3, [r5, #16]
			reg_index =
    30b2:	e7e9      	b.n	3088 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30b4:	6929      	ldr	r1, [r5, #16]
    30b6:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    30ba:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    30bc:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    30be:	4631      	mov	r1, r6
    30c0:	f7ff ff5a 	bl	2f78 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    30c4:	f110 0f16 	cmn.w	r0, #22
    30c8:	d0ab      	beq.n	3022 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    30ca:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    30ce:	68ea      	ldr	r2, [r5, #12]
    30d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    30d4:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    30d6:	f362 0304 	bfi	r3, r2, #0, #5
    30da:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    30de:	692b      	ldr	r3, [r5, #16]
    30e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    30e4:	085b      	lsrs	r3, r3, #1
    30e6:	f363 1247 	bfi	r2, r3, #5, #3
    30ea:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    30ee:	e9d6 3200 	ldrd	r3, r2, [r6]
    30f2:	4413      	add	r3, r2
    30f4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    30f6:	f023 031f 	bic.w	r3, r3, #31
    30fa:	443b      	add	r3, r7
			reg_index++;
    30fc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    30fe:	eba3 0a0a 	sub.w	sl, r3, sl
    3102:	b2e0      	uxtb	r0, r4
    3104:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    3108:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    310a:	9303      	str	r3, [sp, #12]
    310c:	d903      	bls.n	3116 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    310e:	4602      	mov	r2, r0
    3110:	2145      	movs	r1, #69	; 0x45
    3112:	4806      	ldr	r0, [pc, #24]	; (312c <mpu_configure_regions_and_partition.constprop.0+0x164>)
    3114:	e783      	b.n	301e <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    3116:	4669      	mov	r1, sp
    3118:	f7ff ff16 	bl	2f48 <region_init>
    311c:	e7b9      	b.n	3092 <mpu_configure_regions_and_partition.constprop.0+0xca>
    311e:	bf00      	nop
    3120:	e000ed90 	.word	0xe000ed90
    3124:	00009c63 	.word	0x00009c63
    3128:	00009c3b 	.word	0x00009c3b
    312c:	00009c10 	.word	0x00009c10

00003130 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3130:	2205      	movs	r2, #5
    3132:	4b03      	ldr	r3, [pc, #12]	; (3140 <arm_core_mpu_enable+0x10>)
    3134:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3136:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    313a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    313e:	4770      	bx	lr
    3140:	e000ed90 	.word	0xe000ed90

00003144 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3144:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3148:	2200      	movs	r2, #0
    314a:	4b01      	ldr	r3, [pc, #4]	; (3150 <arm_core_mpu_disable+0xc>)
    314c:	605a      	str	r2, [r3, #4]
}
    314e:	4770      	bx	lr
    3150:	e000ed90 	.word	0xe000ed90

00003154 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3154:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3156:	4c03      	ldr	r4, [pc, #12]	; (3164 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3158:	7822      	ldrb	r2, [r4, #0]
    315a:	f7ff ff35 	bl	2fc8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    315e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3160:	bd10      	pop	{r4, pc}
    3162:	bf00      	nop
    3164:	2000fe10 	.word	0x2000fe10

00003168 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3168:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    316a:	4c0e      	ldr	r4, [pc, #56]	; (31a4 <z_arm_mpu_init+0x3c>)
    316c:	6825      	ldr	r5, [r4, #0]
    316e:	2d10      	cmp	r5, #16
    3170:	d814      	bhi.n	319c <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3172:	f7ff ffe7 	bl	3144 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3176:	2000      	movs	r0, #0
	MPU->MAIR0 =
    3178:	4b0b      	ldr	r3, [pc, #44]	; (31a8 <z_arm_mpu_init+0x40>)
    317a:	4a0c      	ldr	r2, [pc, #48]	; (31ac <z_arm_mpu_init+0x44>)
    317c:	631a      	str	r2, [r3, #48]	; 0x30
    317e:	4285      	cmp	r5, r0
    3180:	d105      	bne.n	318e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3182:	4b0b      	ldr	r3, [pc, #44]	; (31b0 <z_arm_mpu_init+0x48>)
    3184:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3186:	f7ff ffd3 	bl	3130 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    318a:	2000      	movs	r0, #0
}
    318c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    318e:	6861      	ldr	r1, [r4, #4]
    3190:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3194:	f7ff fed8 	bl	2f48 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3198:	3001      	adds	r0, #1
    319a:	e7f0      	b.n	317e <z_arm_mpu_init+0x16>
		return -1;
    319c:	f04f 30ff 	mov.w	r0, #4294967295
    31a0:	e7f4      	b.n	318c <z_arm_mpu_init+0x24>
    31a2:	bf00      	nop
    31a4:	00008d38 	.word	0x00008d38
    31a8:	e000ed90 	.word	0xe000ed90
    31ac:	0044ffaa 	.word	0x0044ffaa
    31b0:	2000fe10 	.word	0x2000fe10

000031b4 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    31b4:	b570      	push	{r4, r5, r6, lr}
    31b6:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    31b8:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    31ba:	480d      	ldr	r0, [pc, #52]	; (31f0 <onoff_stop+0x3c>)
{
    31bc:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    31be:	1a23      	subs	r3, r4, r0
    31c0:	109a      	asrs	r2, r3, #2
    31c2:	4b0c      	ldr	r3, [pc, #48]	; (31f4 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    31c4:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    31c6:	4353      	muls	r3, r2
    31c8:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    31ca:	435d      	muls	r5, r3
    31cc:	f105 0340 	add.w	r3, r5, #64	; 0x40
    31d0:	4418      	add	r0, r3
    31d2:	f003 fb2b 	bl	682c <set_off_state>
	if (err < 0) {
    31d6:	1e01      	subs	r1, r0, #0
    31d8:	db04      	blt.n	31e4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    31da:	4b07      	ldr	r3, [pc, #28]	; (31f8 <onoff_stop+0x44>)
    31dc:	442b      	add	r3, r5
    31de:	685b      	ldr	r3, [r3, #4]
    31e0:	4798      	blx	r3
	return 0;
    31e2:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    31e4:	4620      	mov	r0, r4
    31e6:	4633      	mov	r3, r6
}
    31e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    31ec:	4718      	bx	r3
    31ee:	bf00      	nop
    31f0:	2000dfdc 	.word	0x2000dfdc
    31f4:	b6db6db7 	.word	0xb6db6db7
    31f8:	00008d78 	.word	0x00008d78

000031fc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    31fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3200:	4c0f      	ldr	r4, [pc, #60]	; (3240 <onoff_start+0x44>)
    3202:	4d10      	ldr	r5, [pc, #64]	; (3244 <onoff_start+0x48>)
    3204:	1b03      	subs	r3, r0, r4
    3206:	109b      	asrs	r3, r3, #2
    3208:	435d      	muls	r5, r3
    320a:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    320c:	250c      	movs	r5, #12
    320e:	435d      	muls	r5, r3
{
    3210:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    3212:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    3216:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    3218:	4420      	add	r0, r4
    321a:	2140      	movs	r1, #64	; 0x40
    321c:	f003 fb1f 	bl	685e <set_starting_state>
	if (err < 0) {
    3220:	1e01      	subs	r1, r0, #0
    3222:	db08      	blt.n	3236 <onoff_start+0x3a>
	subdata->cb = cb;
    3224:	4b08      	ldr	r3, [pc, #32]	; (3248 <onoff_start+0x4c>)
    3226:	442c      	add	r4, r5
	subdata->user_data = user_data;
    3228:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    322c:	4b07      	ldr	r3, [pc, #28]	; (324c <onoff_start+0x50>)
    322e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3234:	4718      	bx	r3
		notify(mgr, err);
    3236:	4638      	mov	r0, r7
    3238:	4633      	mov	r3, r6
}
    323a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    323e:	4718      	bx	r3
    3240:	2000dfdc 	.word	0x2000dfdc
    3244:	b6db6db7 	.word	0xb6db6db7
    3248:	000068c7 	.word	0x000068c7
    324c:	00008d78 	.word	0x00008d78

00003250 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3250:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3252:	2200      	movs	r2, #0
    3254:	2101      	movs	r1, #1
{
    3256:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3258:	2005      	movs	r0, #5
    325a:	f7ff fb83 	bl	2964 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    325e:	2005      	movs	r0, #5
    3260:	f7ff fb62 	bl	2928 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3264:	480f      	ldr	r0, [pc, #60]	; (32a4 <clk_init+0x54>)
    3266:	f001 fc2d 	bl	4ac4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    326a:	4b0f      	ldr	r3, [pc, #60]	; (32a8 <clk_init+0x58>)
    326c:	4298      	cmp	r0, r3
    326e:	d115      	bne.n	329c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3270:	f005 fb11 	bl	8896 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3274:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3276:	490d      	ldr	r1, [pc, #52]	; (32ac <clk_init+0x5c>)
    3278:	4630      	mov	r0, r6
    327a:	f002 fecd 	bl	6018 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    327e:	2800      	cmp	r0, #0
    3280:	db0b      	blt.n	329a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3282:	2501      	movs	r5, #1
    3284:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    3286:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3288:	4908      	ldr	r1, [pc, #32]	; (32ac <clk_init+0x5c>)
    328a:	f104 001c 	add.w	r0, r4, #28
    328e:	f002 fec3 	bl	6018 <onoff_manager_init>
		if (err < 0) {
    3292:	2800      	cmp	r0, #0
    3294:	db01      	blt.n	329a <clk_init+0x4a>
	}

	return 0;
    3296:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3298:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    329a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    329c:	f06f 0004 	mvn.w	r0, #4
    32a0:	e7fb      	b.n	329a <clk_init+0x4a>
    32a2:	bf00      	nop
    32a4:	000032e5 	.word	0x000032e5
    32a8:	0bad0000 	.word	0x0bad0000
    32ac:	00008d90 	.word	0x00008d90

000032b0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    32b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    32b2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    32b4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    32b6:	434b      	muls	r3, r1
    32b8:	4808      	ldr	r0, [pc, #32]	; (32dc <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    32ba:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    32bc:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    32be:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    32c0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    32c4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    32c6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    32c8:	f003 fae7 	bl	689a <set_on_state>
	if (callback) {
    32cc:	b12d      	cbz	r5, 32da <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    32ce:	4632      	mov	r2, r6
    32d0:	462b      	mov	r3, r5
}
    32d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    32d6:	4802      	ldr	r0, [pc, #8]	; (32e0 <clkstarted_handle.constprop.0+0x30>)
    32d8:	4718      	bx	r3
}
    32da:	bd70      	pop	{r4, r5, r6, pc}
    32dc:	2000dfdc 	.word	0x2000dfdc
    32e0:	00008948 	.word	0x00008948

000032e4 <clock_event_handler>:
	switch (event) {
    32e4:	b110      	cbz	r0, 32ec <clock_event_handler+0x8>
    32e6:	2801      	cmp	r0, #1
    32e8:	d004      	beq.n	32f4 <clock_event_handler+0x10>
    32ea:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    32ec:	4b03      	ldr	r3, [pc, #12]	; (32fc <clock_event_handler+0x18>)
    32ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    32f0:	075b      	lsls	r3, r3, #29
    32f2:	d101      	bne.n	32f8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    32f4:	f7ff bfdc 	b.w	32b0 <clkstarted_handle.constprop.0>
}
    32f8:	4770      	bx	lr
    32fa:	bf00      	nop
    32fc:	2000dfdc 	.word	0x2000dfdc

00003300 <generic_hfclk_start>:
{
    3300:	b508      	push	{r3, lr}
	__asm__ volatile(
    3302:	f04f 0320 	mov.w	r3, #32
    3306:	f3ef 8111 	mrs	r1, BASEPRI
    330a:	f383 8812 	msr	BASEPRI_MAX, r3
    330e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3312:	4a12      	ldr	r2, [pc, #72]	; (335c <generic_hfclk_start+0x5c>)
    3314:	6813      	ldr	r3, [r2, #0]
    3316:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    331a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    331e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3320:	d00c      	beq.n	333c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3322:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3326:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    332a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    332e:	f013 0301 	ands.w	r3, r3, #1
    3332:	d003      	beq.n	333c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3334:	480a      	ldr	r0, [pc, #40]	; (3360 <generic_hfclk_start+0x60>)
    3336:	f003 fab0 	bl	689a <set_on_state>
			already_started = true;
    333a:	2301      	movs	r3, #1
	__asm__ volatile(
    333c:	f381 8811 	msr	BASEPRI, r1
    3340:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3344:	b123      	cbz	r3, 3350 <generic_hfclk_start+0x50>
}
    3346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    334a:	2000      	movs	r0, #0
    334c:	f7ff bfb0 	b.w	32b0 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3350:	2001      	movs	r0, #1
}
    3352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3356:	f001 bbc5 	b.w	4ae4 <nrfx_clock_start>
    335a:	bf00      	nop
    335c:	2000e02c 	.word	0x2000e02c
    3360:	2000e01c 	.word	0x2000e01c

00003364 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3364:	4b07      	ldr	r3, [pc, #28]	; (3384 <generic_hfclk_stop+0x20>)
    3366:	e8d3 2fef 	ldaex	r2, [r3]
    336a:	f022 0102 	bic.w	r1, r2, #2
    336e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3372:	2800      	cmp	r0, #0
    3374:	d1f7      	bne.n	3366 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3376:	07d3      	lsls	r3, r2, #31
    3378:	d402      	bmi.n	3380 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    337a:	2001      	movs	r0, #1
    337c:	f001 bbe4 	b.w	4b48 <nrfx_clock_stop>
}
    3380:	4770      	bx	lr
    3382:	bf00      	nop
    3384:	2000e02c 	.word	0x2000e02c

00003388 <z_nrf_clock_control_lf_on>:
{
    3388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    338c:	2201      	movs	r2, #1
    338e:	4606      	mov	r6, r0
    3390:	4936      	ldr	r1, [pc, #216]	; (346c <z_nrf_clock_control_lf_on+0xe4>)
    3392:	e8d1 3fef 	ldaex	r3, [r1]
    3396:	e8c1 2fe0 	stlex	r0, r2, [r1]
    339a:	2800      	cmp	r0, #0
    339c:	d1f9      	bne.n	3392 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    339e:	b933      	cbnz	r3, 33ae <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    33a0:	4933      	ldr	r1, [pc, #204]	; (3470 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    33a2:	4834      	ldr	r0, [pc, #208]	; (3474 <z_nrf_clock_control_lf_on+0xec>)
    33a4:	604b      	str	r3, [r1, #4]
    33a6:	60cb      	str	r3, [r1, #12]
    33a8:	608a      	str	r2, [r1, #8]
    33aa:	f002 fe48 	bl	603e <onoff_request>
	switch (start_mode) {
    33ae:	1e73      	subs	r3, r6, #1
    33b0:	2b01      	cmp	r3, #1
    33b2:	d832      	bhi.n	341a <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    33b4:	2e01      	cmp	r6, #1
    33b6:	d107      	bne.n	33c8 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    33b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    33c0:	f003 0303 	and.w	r3, r3, #3
    33c4:	2b02      	cmp	r3, #2
    33c6:	d028      	beq.n	341a <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    33c8:	f005 fa84 	bl	88d4 <k_is_in_isr>
    33cc:	4604      	mov	r4, r0
    33ce:	b918      	cbnz	r0, 33d8 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    33d0:	4b29      	ldr	r3, [pc, #164]	; (3478 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d141      	bne.n	345c <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    33d8:	f04f 0320 	mov.w	r3, #32
    33dc:	f3ef 8511 	mrs	r5, BASEPRI
    33e0:	f383 8812 	msr	BASEPRI_MAX, r3
    33e4:	f3bf 8f6f 	isb	sy
    33e8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    33ea:	4f24      	ldr	r7, [pc, #144]	; (347c <z_nrf_clock_control_lf_on+0xf4>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33ec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3480 <z_nrf_clock_control_lf_on+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33f0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3484 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    33f4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    33f8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    33fc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3400:	03d2      	lsls	r2, r2, #15
    3402:	d50c      	bpl.n	341e <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3404:	f003 0303 	and.w	r3, r3, #3
    3408:	2b02      	cmp	r3, #2
    340a:	d001      	beq.n	3410 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    340c:	2e01      	cmp	r6, #1
    340e:	d106      	bne.n	341e <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    3410:	b1f4      	cbz	r4, 3450 <z_nrf_clock_control_lf_on+0xc8>
	__asm__ volatile(
    3412:	f385 8811 	msr	BASEPRI, r5
    3416:	f3bf 8f6f 	isb	sy
}
    341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    341e:	4628      	mov	r0, r5
    3420:	f7ff fa4a 	bl	28b8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3424:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3428:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    342c:	b2db      	uxtb	r3, r3
    342e:	2b01      	cmp	r3, #1
    3430:	d1e0      	bne.n	33f4 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3432:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3434:	2900      	cmp	r1, #0
    3436:	d0dd      	beq.n	33f4 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3438:	2100      	movs	r1, #0
    343a:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    343c:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    343e:	2102      	movs	r1, #2
    3440:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    3444:	2220      	movs	r2, #32
    3446:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    344a:	f8c9 3000 	str.w	r3, [r9]
}
    344e:	e7d1      	b.n	33f4 <z_nrf_clock_control_lf_on+0x6c>
    p_reg->INTENSET = mask;
    3450:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3454:	2202      	movs	r2, #2
    3456:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    345a:	e7de      	b.n	341a <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    345c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3460:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3462:	4605      	mov	r5, r0
    3464:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    3468:	e7bf      	b.n	33ea <z_nrf_clock_control_lf_on+0x62>
    346a:	bf00      	nop
    346c:	2000e030 	.word	0x2000e030
    3470:	2000dfcc 	.word	0x2000dfcc
    3474:	2000dff8 	.word	0x2000dff8
    3478:	2000fe51 	.word	0x2000fe51
    347c:	50005104 	.word	0x50005104
    3480:	e000e100 	.word	0xe000e100
    3484:	50005008 	.word	0x50005008

00003488 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3488:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    348a:	6840      	ldr	r0, [r0, #4]
    348c:	f001 051f 	and.w	r5, r1, #31
    3490:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3492:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3496:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    349a:	b085      	sub	sp, #20
    349c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    34a0:	d104      	bne.n	34ac <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    34a2:	4628      	mov	r0, r5
    34a4:	f001 fe12 	bl	50cc <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    34a8:	2000      	movs	r0, #0
    34aa:	e02c      	b.n	3506 <gpio_nrfx_pin_interrupt_configure+0x7e>
	if (mode == GPIO_INT_MODE_LEVEL) {
    34ac:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    34b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    34b4:	d129      	bne.n	350a <gpio_nrfx_pin_interrupt_configure+0x82>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    34b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    34ba:	bf0c      	ite	eq
    34bc:	2304      	moveq	r3, #4
    34be:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    34c0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    34c4:	6883      	ldr	r3, [r0, #8]
    34c6:	fa23 f101 	lsr.w	r1, r3, r1
    34ca:	07c9      	lsls	r1, r1, #31
    34cc:	d429      	bmi.n	3522 <gpio_nrfx_pin_interrupt_configure+0x9a>
    34ce:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    34d2:	d126      	bne.n	3522 <gpio_nrfx_pin_interrupt_configure+0x9a>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    34d4:	4a1b      	ldr	r2, [pc, #108]	; (3544 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    34d6:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    34da:	3380      	adds	r3, #128	; 0x80
    34dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    34e0:	07db      	lsls	r3, r3, #31
    34e2:	d41e      	bmi.n	3522 <gpio_nrfx_pin_interrupt_configure+0x9a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    34e4:	f10d 0407 	add.w	r4, sp, #7
    34e8:	4621      	mov	r1, r4
    34ea:	4628      	mov	r0, r5
    34ec:	f001 fd5c 	bl	4fa8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    34f0:	4b15      	ldr	r3, [pc, #84]	; (3548 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    34f2:	4298      	cmp	r0, r3
    34f4:	d114      	bne.n	3520 <gpio_nrfx_pin_interrupt_configure+0x98>
			err = nrfx_gpiote_channel_alloc(&ch);
    34f6:	4620      	mov	r0, r4
    34f8:	f001 fda0 	bl	503c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    34fc:	4b13      	ldr	r3, [pc, #76]	; (354c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    34fe:	4298      	cmp	r0, r3
    3500:	d00e      	beq.n	3520 <gpio_nrfx_pin_interrupt_configure+0x98>
				return -ENOMEM;
    3502:	f06f 000b 	mvn.w	r0, #11
}
    3506:	b005      	add	sp, #20
    3508:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    350a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    350e:	d005      	beq.n	351c <gpio_nrfx_pin_interrupt_configure+0x94>
    3510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3514:	bf0c      	ite	eq
    3516:	2302      	moveq	r3, #2
    3518:	2301      	movne	r3, #1
    351a:	e7d1      	b.n	34c0 <gpio_nrfx_pin_interrupt_configure+0x38>
    351c:	2303      	movs	r3, #3
    351e:	e7cf      	b.n	34c0 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3520:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3522:	2300      	movs	r3, #0
    3524:	4628      	mov	r0, r5
    3526:	4619      	mov	r1, r3
    3528:	aa02      	add	r2, sp, #8
    352a:	f001 fbfd 	bl	4d28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    352e:	4b07      	ldr	r3, [pc, #28]	; (354c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3530:	4298      	cmp	r0, r3
    3532:	d104      	bne.n	353e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3534:	2101      	movs	r1, #1
    3536:	4628      	mov	r0, r5
    3538:	f001 fd86 	bl	5048 <nrfx_gpiote_trigger_enable>
    353c:	e7b4      	b.n	34a8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    353e:	f06f 0004 	mvn.w	r0, #4
    3542:	e7e0      	b.n	3506 <gpio_nrfx_pin_interrupt_configure+0x7e>
    3544:	50842500 	.word	0x50842500
    3548:	0bad0004 	.word	0x0bad0004
    354c:	0bad0000 	.word	0x0bad0000

00003550 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3550:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3552:	f001 fd63 	bl	501c <nrfx_gpiote_is_init>
    3556:	4604      	mov	r4, r0
    3558:	b968      	cbnz	r0, 3576 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    355a:	f001 fd37 	bl	4fcc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    355e:	4b08      	ldr	r3, [pc, #32]	; (3580 <gpio_nrfx_init+0x30>)
    3560:	4298      	cmp	r0, r3
    3562:	d10a      	bne.n	357a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3564:	4621      	mov	r1, r4
    3566:	4807      	ldr	r0, [pc, #28]	; (3584 <gpio_nrfx_init+0x34>)
    3568:	f001 fd18 	bl	4f9c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    356c:	4622      	mov	r2, r4
    356e:	2105      	movs	r1, #5
    3570:	200d      	movs	r0, #13
    3572:	f7ff f9f7 	bl	2964 <z_arm_irq_priority_set>
		return 0;
    3576:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3578:	bd10      	pop	{r4, pc}
		return -EIO;
    357a:	f06f 0004 	mvn.w	r0, #4
    357e:	e7fb      	b.n	3578 <gpio_nrfx_init+0x28>
    3580:	0bad0000 	.word	0x0bad0000
    3584:	00003589 	.word	0x00003589

00003588 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3588:	0943      	lsrs	r3, r0, #5
{
    358a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    358c:	d117      	bne.n	35be <nrfx_gpio_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    358e:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <nrfx_gpio_handler+0x38>)
    3590:	6859      	ldr	r1, [r3, #4]
    3592:	b1a1      	cbz	r1, 35be <nrfx_gpio_handler+0x36>
    3594:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
    3596:	2501      	movs	r5, #1
    3598:	2c00      	cmp	r4, #0
    359a:	bf38      	it	cc
    359c:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    359e:	4e09      	ldr	r6, [pc, #36]	; (35c4 <nrfx_gpio_handler+0x3c>)
    35a0:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    35a2:	688a      	ldr	r2, [r1, #8]
    35a4:	402a      	ands	r2, r5
    35a6:	d002      	beq.n	35ae <nrfx_gpio_handler+0x26>
			cb->handler(port, cb, cb->pin_mask & pins);
    35a8:	4630      	mov	r0, r6
    35aa:	684b      	ldr	r3, [r1, #4]
    35ac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    35ae:	b134      	cbz	r4, 35be <nrfx_gpio_handler+0x36>
	return node->next;
    35b0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    35b2:	4621      	mov	r1, r4
    35b4:	2b00      	cmp	r3, #0
    35b6:	bf38      	it	cc
    35b8:	2300      	movcc	r3, #0
    35ba:	461c      	mov	r4, r3
    35bc:	e7f1      	b.n	35a2 <nrfx_gpio_handler+0x1a>
}
    35be:	bd70      	pop	{r4, r5, r6, pc}
    35c0:	2000e034 	.word	0x2000e034
    35c4:	00008960 	.word	0x00008960

000035c8 <gpio_nrfx_pin_configure>:
{
    35c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    35cc:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    35ce:	f001 051f 	and.w	r5, r1, #31
    35d2:	7b3b      	ldrb	r3, [r7, #12]
{
    35d4:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    35d6:	4614      	mov	r4, r2
{
    35d8:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    35da:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    35de:	b9ca      	cbnz	r2, 3614 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    35e0:	a902      	add	r1, sp, #8
    35e2:	4628      	mov	r0, r5
    35e4:	f001 fce0 	bl	4fa8 <nrfx_gpiote_channel_get>
    35e8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    35ea:	4628      	mov	r0, r5
    35ec:	f001 fd90 	bl	5110 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    35f0:	4b47      	ldr	r3, [pc, #284]	; (3710 <gpio_nrfx_pin_configure+0x148>)
    35f2:	4298      	cmp	r0, r3
    35f4:	d004      	beq.n	3600 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    35f6:	f06f 0004 	mvn.w	r0, #4
}
    35fa:	b005      	add	sp, #20
    35fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3600:	4284      	cmp	r4, r0
    3602:	d105      	bne.n	3610 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3604:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3608:	f001 fd12 	bl	5030 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    360c:	42a0      	cmp	r0, r4
    360e:	d1f2      	bne.n	35f6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3610:	2000      	movs	r0, #0
    3612:	e7f2      	b.n	35fa <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3614:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3618:	f10d 0103 	add.w	r1, sp, #3
    361c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    361e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3622:	f001 fcc1 	bl	4fa8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3626:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3628:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    362a:	4649      	mov	r1, r9
    362c:	4628      	mov	r0, r5
    362e:	aa02      	add	r2, sp, #8
    3630:	f001 fb7a 	bl	4d28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3634:	4b36      	ldr	r3, [pc, #216]	; (3710 <gpio_nrfx_pin_configure+0x148>)
    3636:	4298      	cmp	r0, r3
    3638:	d002      	beq.n	3640 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    363a:	f06f 0015 	mvn.w	r0, #21
    363e:	e7dc      	b.n	35fa <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3640:	4580      	cmp	r8, r0
    3642:	d103      	bne.n	364c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3644:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3648:	f001 fcf2 	bl	5030 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    364c:	05a3      	lsls	r3, r4, #22
    364e:	d54c      	bpl.n	36ea <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3650:	4b30      	ldr	r3, [pc, #192]	; (3714 <gpio_nrfx_pin_configure+0x14c>)
    3652:	4a31      	ldr	r2, [pc, #196]	; (3718 <gpio_nrfx_pin_configure+0x150>)
    3654:	4023      	ands	r3, r4
    3656:	4293      	cmp	r3, r2
    3658:	d039      	beq.n	36ce <gpio_nrfx_pin_configure+0x106>
    365a:	d80c      	bhi.n	3676 <gpio_nrfx_pin_configure+0xae>
    365c:	2b06      	cmp	r3, #6
    365e:	d014      	beq.n	368a <gpio_nrfx_pin_configure+0xc2>
    3660:	d804      	bhi.n	366c <gpio_nrfx_pin_configure+0xa4>
    3662:	b193      	cbz	r3, 368a <gpio_nrfx_pin_configure+0xc2>
    3664:	2b02      	cmp	r3, #2
    3666:	d1e8      	bne.n	363a <gpio_nrfx_pin_configure+0x72>
    3668:	2304      	movs	r3, #4
    366a:	e00e      	b.n	368a <gpio_nrfx_pin_configure+0xc2>
    366c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3670:	d1e3      	bne.n	363a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3672:	2301      	movs	r3, #1
    3674:	e009      	b.n	368a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3676:	4a29      	ldr	r2, [pc, #164]	; (371c <gpio_nrfx_pin_configure+0x154>)
    3678:	4293      	cmp	r3, r2
    367a:	d02a      	beq.n	36d2 <gpio_nrfx_pin_configure+0x10a>
    367c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3680:	d029      	beq.n	36d6 <gpio_nrfx_pin_configure+0x10e>
    3682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3686:	d1d8      	bne.n	363a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3688:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    368a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    368e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3692:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3696:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3698:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    369c:	bf4c      	ite	mi
    369e:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    36a0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    36a4:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    36a6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    36aa:	d516      	bpl.n	36da <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    36ac:	2101      	movs	r1, #1
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    36b4:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    36b6:	2200      	movs	r2, #0
    36b8:	4628      	mov	r0, r5
    36ba:	a901      	add	r1, sp, #4
    36bc:	f001 fbda 	bl	4e74 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    36c0:	4b13      	ldr	r3, [pc, #76]	; (3710 <gpio_nrfx_pin_configure+0x148>)
    36c2:	4298      	cmp	r0, r3
    36c4:	bf14      	ite	ne
    36c6:	f06f 0015 	mvnne.w	r0, #21
    36ca:	2000      	moveq	r0, #0
    36cc:	e795      	b.n	35fa <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    36ce:	2307      	movs	r3, #7
    36d0:	e7db      	b.n	368a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    36d2:	2305      	movs	r3, #5
    36d4:	e7d9      	b.n	368a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    36d6:	2303      	movs	r3, #3
    36d8:	e7d7      	b.n	368a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    36da:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    36dc:	bf41      	itttt	mi
    36de:	2101      	movmi	r1, #1
    36e0:	687b      	ldrmi	r3, [r7, #4]
    36e2:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    36e6:	60de      	strmi	r6, [r3, #12]
}
    36e8:	e7e5      	b.n	36b6 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
    36ea:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    36ec:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    36f0:	bf4c      	ite	mi
    36f2:	2403      	movmi	r4, #3
    36f4:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    36f8:	461a      	mov	r2, r3
    36fa:	4628      	mov	r0, r5
    36fc:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    36fe:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3702:	f001 fb11 	bl	4d28 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3706:	4b02      	ldr	r3, [pc, #8]	; (3710 <gpio_nrfx_pin_configure+0x148>)
    3708:	4298      	cmp	r0, r3
    370a:	d081      	beq.n	3610 <gpio_nrfx_pin_configure+0x48>
    370c:	e795      	b.n	363a <gpio_nrfx_pin_configure+0x72>
    370e:	bf00      	nop
    3710:	0bad0000 	.word	0x0bad0000
    3714:	00f00006 	.word	0x00f00006
    3718:	00100006 	.word	0x00100006
    371c:	00400002 	.word	0x00400002

00003720 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3720:	4b02      	ldr	r3, [pc, #8]	; (372c <flash_nrf_pages_layout+0xc>)
    3722:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3724:	2301      	movs	r3, #1
    3726:	6013      	str	r3, [r2, #0]
}
    3728:	4770      	bx	lr
    372a:	bf00      	nop
    372c:	2000e040 	.word	0x2000e040

00003730 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3730:	4800      	ldr	r0, [pc, #0]	; (3734 <flash_nrf_get_parameters+0x4>)
    3732:	4770      	bx	lr
    3734:	00008de8 	.word	0x00008de8

00003738 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3738:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    373a:	f005 f8bd 	bl	88b8 <nrfx_nvmc_flash_page_count_get>
    373e:	4c03      	ldr	r4, [pc, #12]	; (374c <nrf_flash_init+0x14>)
    3740:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3742:	f005 f8b6 	bl	88b2 <nrfx_nvmc_flash_page_size_get>
    3746:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3748:	2000      	movs	r0, #0
    374a:	bd10      	pop	{r4, pc}
    374c:	2000e040 	.word	0x2000e040

00003750 <flash_nrf_erase>:
{
    3750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3752:	460e      	mov	r6, r1
    3754:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3756:	f005 f8ac 	bl	88b2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    375a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    375c:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    375e:	4630      	mov	r0, r6
    3760:	f003 f939 	bl	69d6 <is_regular_addr_valid>
    3764:	4637      	mov	r7, r6
    3766:	b1f8      	cbz	r0, 37a8 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3768:	fbb6 f3f5 	udiv	r3, r6, r5
    376c:	fb05 6313 	mls	r3, r5, r3, r6
    3770:	b923      	cbnz	r3, 377c <flash_nrf_erase+0x2c>
    3772:	fbb4 f0f5 	udiv	r0, r4, r5
    3776:	fb05 4010 	mls	r0, r5, r0, r4
    377a:	b140      	cbz	r0, 378e <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    377c:	4623      	mov	r3, r4
    377e:	4632      	mov	r2, r6
    3780:	2145      	movs	r1, #69	; 0x45
    3782:	480c      	ldr	r0, [pc, #48]	; (37b4 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3784:	f002 fca5 	bl	60d2 <z_log_minimal_printk>
    3788:	f06f 0015 	mvn.w	r0, #21
    378c:	e00b      	b.n	37a6 <flash_nrf_erase+0x56>
		if (!n_pages) {
    378e:	42a5      	cmp	r5, r4
    3790:	d809      	bhi.n	37a6 <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3792:	f005 f88e 	bl	88b2 <nrfx_nvmc_flash_page_size_get>
    3796:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3798:	4638      	mov	r0, r7
    379a:	f001 fd8d 	bl	52b8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    379e:	1b64      	subs	r4, r4, r5
    37a0:	442f      	add	r7, r5
    37a2:	d1f9      	bne.n	3798 <flash_nrf_erase+0x48>
	return ret;
    37a4:	4620      	mov	r0, r4
}
    37a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    37a8:	4623      	mov	r3, r4
    37aa:	4632      	mov	r2, r6
    37ac:	2145      	movs	r1, #69	; 0x45
    37ae:	4802      	ldr	r0, [pc, #8]	; (37b8 <flash_nrf_erase+0x68>)
    37b0:	e7e8      	b.n	3784 <flash_nrf_erase+0x34>
    37b2:	bf00      	nop
    37b4:	00009cba 	.word	0x00009cba
    37b8:	00009cde 	.word	0x00009cde

000037bc <flash_nrf_read>:
{
    37bc:	b570      	push	{r4, r5, r6, lr}
    37be:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    37c0:	4619      	mov	r1, r3
    37c2:	4628      	mov	r0, r5
{
    37c4:	4616      	mov	r6, r2
    37c6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    37c8:	f003 f905 	bl	69d6 <is_regular_addr_valid>
    37cc:	b940      	cbnz	r0, 37e0 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    37ce:	4809      	ldr	r0, [pc, #36]	; (37f4 <flash_nrf_read+0x38>)
    37d0:	4623      	mov	r3, r4
    37d2:	462a      	mov	r2, r5
    37d4:	2145      	movs	r1, #69	; 0x45
    37d6:	f002 fc7c 	bl	60d2 <z_log_minimal_printk>
    37da:	f06f 0015 	mvn.w	r0, #21
}
    37de:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    37e0:	b134      	cbz	r4, 37f0 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    37e2:	4622      	mov	r2, r4
    37e4:	4629      	mov	r1, r5
    37e6:	4630      	mov	r0, r6
    37e8:	f003 f803 	bl	67f2 <memcpy>
	return 0;
    37ec:	2000      	movs	r0, #0
    37ee:	e7f6      	b.n	37de <flash_nrf_read+0x22>
		return 0;
    37f0:	4620      	mov	r0, r4
    37f2:	e7f4      	b.n	37de <flash_nrf_read+0x22>
    37f4:	00009cde 	.word	0x00009cde

000037f8 <flash_nrf_write>:
{
    37f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37fa:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    37fc:	4619      	mov	r1, r3
    37fe:	4630      	mov	r0, r6
{
    3800:	4617      	mov	r7, r2
    3802:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3804:	f003 f8e7 	bl	69d6 <is_regular_addr_valid>
    3808:	b940      	cbnz	r0, 381c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    380a:	4623      	mov	r3, r4
    380c:	4632      	mov	r2, r6
    380e:	2145      	movs	r1, #69	; 0x45
    3810:	4812      	ldr	r0, [pc, #72]	; (385c <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3812:	f002 fc5e 	bl	60d2 <z_log_minimal_printk>
		return -EINVAL;
    3816:	f06f 0015 	mvn.w	r0, #21
}
    381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    381c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3820:	f015 0503 	ands.w	r5, r5, #3
    3824:	d004      	beq.n	3830 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3826:	4623      	mov	r3, r4
    3828:	4632      	mov	r2, r6
    382a:	2145      	movs	r1, #69	; 0x45
    382c:	480c      	ldr	r0, [pc, #48]	; (3860 <flash_nrf_write+0x68>)
    382e:	e7f0      	b.n	3812 <flash_nrf_write+0x1a>
	if (!len) {
    3830:	b18c      	cbz	r4, 3856 <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3832:	192b      	adds	r3, r5, r4
    3834:	2b03      	cmp	r3, #3
    3836:	eba6 0005 	sub.w	r0, r6, r5
    383a:	d806      	bhi.n	384a <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    383c:	4a09      	ldr	r2, [pc, #36]	; (3864 <flash_nrf_write+0x6c>)
    383e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3842:	07db      	lsls	r3, r3, #31
    3844:	d5fb      	bpl.n	383e <flash_nrf_write+0x46>
	return ret;
    3846:	2000      	movs	r0, #0
    3848:	e7e7      	b.n	381a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    384a:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    384c:	6819      	ldr	r1, [r3, #0]
    384e:	f001 fd51 	bl	52f4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    3852:	3d04      	subs	r5, #4
}
    3854:	e7ed      	b.n	3832 <flash_nrf_write+0x3a>
		return 0;
    3856:	4620      	mov	r0, r4
    3858:	e7df      	b.n	381a <flash_nrf_write+0x22>
    385a:	bf00      	nop
    385c:	00009cde 	.word	0x00009cde
    3860:	00009d00 	.word	0x00009d00
    3864:	50039000 	.word	0x50039000

00003868 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    386a:	794b      	ldrb	r3, [r1, #5]
    386c:	2b01      	cmp	r3, #1
    386e:	d026      	beq.n	38be <uarte_nrfx_configure+0x56>
    3870:	2b03      	cmp	r3, #3
    3872:	d121      	bne.n	38b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3874:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3876:	798b      	ldrb	r3, [r1, #6]
    3878:	2b03      	cmp	r3, #3
    387a:	d11d      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    387c:	79cc      	ldrb	r4, [r1, #7]
    387e:	b10c      	cbz	r4, 3884 <uarte_nrfx_configure+0x1c>
    3880:	2c01      	cmp	r4, #1
    3882:	d119      	bne.n	38b8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3884:	790a      	ldrb	r2, [r1, #4]
    3886:	b112      	cbz	r2, 388e <uarte_nrfx_configure+0x26>
    3888:	2a02      	cmp	r2, #2
    388a:	d115      	bne.n	38b8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    388c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    388e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3890:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3892:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3896:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3898:	d065      	beq.n	3966 <uarte_nrfx_configure+0xfe>
    389a:	d82d      	bhi.n	38f8 <uarte_nrfx_configure+0x90>
    389c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    38a0:	d064      	beq.n	396c <uarte_nrfx_configure+0x104>
    38a2:	d816      	bhi.n	38d2 <uarte_nrfx_configure+0x6a>
    38a4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    38a8:	d062      	beq.n	3970 <uarte_nrfx_configure+0x108>
    38aa:	d80a      	bhi.n	38c2 <uarte_nrfx_configure+0x5a>
    38ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    38b0:	d061      	beq.n	3976 <uarte_nrfx_configure+0x10e>
    38b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    38b6:	d061      	beq.n	397c <uarte_nrfx_configure+0x114>
    38b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    38bc:	e052      	b.n	3964 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    38be:	2600      	movs	r6, #0
    38c0:	e7d9      	b.n	3876 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    38c2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    38c6:	d05c      	beq.n	3982 <uarte_nrfx_configure+0x11a>
    38c8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    38cc:	d1f4      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    38ce:	4b37      	ldr	r3, [pc, #220]	; (39ac <uarte_nrfx_configure+0x144>)
    38d0:	e03c      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    38d6:	d057      	beq.n	3988 <uarte_nrfx_configure+0x120>
    38d8:	d807      	bhi.n	38ea <uarte_nrfx_configure+0x82>
    38da:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    38de:	d055      	beq.n	398c <uarte_nrfx_configure+0x124>
    38e0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    38e4:	d1e8      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    38e6:	4b32      	ldr	r3, [pc, #200]	; (39b0 <uarte_nrfx_configure+0x148>)
    38e8:	e030      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38ea:	f647 2712 	movw	r7, #31250	; 0x7a12
    38ee:	42bb      	cmp	r3, r7
    38f0:	d1e2      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    38f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    38f6:	e029      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38f8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    38fc:	d048      	beq.n	3990 <uarte_nrfx_configure+0x128>
    38fe:	d813      	bhi.n	3928 <uarte_nrfx_configure+0xc0>
    3900:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3904:	d047      	beq.n	3996 <uarte_nrfx_configure+0x12e>
    3906:	d809      	bhi.n	391c <uarte_nrfx_configure+0xb4>
    3908:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    390c:	42bb      	cmp	r3, r7
    390e:	d044      	beq.n	399a <uarte_nrfx_configure+0x132>
    3910:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3914:	d1d0      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3916:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    391a:	e017      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    391c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3920:	d1ca      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3922:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3926:	e011      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3928:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    392c:	d038      	beq.n	39a0 <uarte_nrfx_configure+0x138>
    392e:	d808      	bhi.n	3942 <uarte_nrfx_configure+0xda>
    3930:	4f20      	ldr	r7, [pc, #128]	; (39b4 <uarte_nrfx_configure+0x14c>)
    3932:	42bb      	cmp	r3, r7
    3934:	d037      	beq.n	39a6 <uarte_nrfx_configure+0x13e>
    3936:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    393a:	d1bd      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    393c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3940:	e004      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3942:	4f1d      	ldr	r7, [pc, #116]	; (39b8 <uarte_nrfx_configure+0x150>)
    3944:	42bb      	cmp	r3, r7
    3946:	d1b7      	bne.n	38b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    394c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3950:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    3952:	4334      	orrs	r4, r6
    3954:	4322      	orrs	r2, r4
    3956:	3304      	adds	r3, #4
    3958:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    395a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    395e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3962:	2000      	movs	r0, #0
}
    3964:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3966:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    396a:	e7ef      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    396c:	4b13      	ldr	r3, [pc, #76]	; (39bc <uarte_nrfx_configure+0x154>)
    396e:	e7ed      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3970:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3974:	e7ea      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3976:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    397a:	e7e7      	b.n	394c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    397c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3980:	e7e4      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3982:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3986:	e7e1      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3988:	4b0d      	ldr	r3, [pc, #52]	; (39c0 <uarte_nrfx_configure+0x158>)
    398a:	e7df      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    398c:	4b0d      	ldr	r3, [pc, #52]	; (39c4 <uarte_nrfx_configure+0x15c>)
    398e:	e7dd      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3990:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3994:	e7da      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3996:	4b0c      	ldr	r3, [pc, #48]	; (39c8 <uarte_nrfx_configure+0x160>)
    3998:	e7d8      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    399a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    399e:	e7d5      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    39a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    39a4:	e7d2      	b.n	394c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    39a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    39aa:	e7cf      	b.n	394c <uarte_nrfx_configure+0xe4>
    39ac:	0013b000 	.word	0x0013b000
    39b0:	004ea000 	.word	0x004ea000
    39b4:	0003d090 	.word	0x0003d090
    39b8:	000f4240 	.word	0x000f4240
    39bc:	00275000 	.word	0x00275000
    39c0:	0075c000 	.word	0x0075c000
    39c4:	003af000 	.word	0x003af000
    39c8:	013a9000 	.word	0x013a9000

000039cc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    39cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ce:	4605      	mov	r5, r0
    39d0:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    39d2:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    39d4:	f004 ff7e 	bl	88d4 <k_is_in_isr>
    39d8:	b910      	cbnz	r0, 39e0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    39da:	4b1e      	ldr	r3, [pc, #120]	; (3a54 <uarte_nrfx_poll_out+0x88>)
	int key;

	if (isr_mode) {
    39dc:	781b      	ldrb	r3, [r3, #0]
    39de:	b9a3      	cbnz	r3, 3a0a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    39e0:	f04f 0320 	mov.w	r3, #32
    39e4:	f3ef 8411 	mrs	r4, BASEPRI
    39e8:	f383 8812 	msr	BASEPRI_MAX, r3
    39ec:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    39f0:	4628      	mov	r0, r5
    39f2:	f003 f8d5 	bl	6ba0 <is_tx_ready>
    39f6:	bb00      	cbnz	r0, 3a3a <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    39f8:	f384 8811 	msr	BASEPRI, r4
    39fc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3a00:	e7ee      	b.n	39e0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3a02:	f384 8811 	msr	BASEPRI, r4
    3a06:	f3bf 8f6f 	isb	sy
{
    3a0a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3a0c:	4628      	mov	r0, r5
    3a0e:	f003 f8c7 	bl	6ba0 <is_tx_ready>
    3a12:	b928      	cbnz	r0, 3a20 <uarte_nrfx_poll_out+0x54>
    3a14:	2001      	movs	r0, #1
    3a16:	f004 ff3c 	bl	8892 <nrfx_busy_wait>
    3a1a:	3c01      	subs	r4, #1
    3a1c:	d1f6      	bne.n	3a0c <uarte_nrfx_poll_out+0x40>
    3a1e:	e7f4      	b.n	3a0a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    3a20:	f04f 0320 	mov.w	r3, #32
    3a24:	f3ef 8411 	mrs	r4, BASEPRI
    3a28:	f383 8812 	msr	BASEPRI_MAX, r3
    3a2c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3a30:	4628      	mov	r0, r5
    3a32:	f003 f8b5 	bl	6ba0 <is_tx_ready>
    3a36:	2800      	cmp	r0, #0
    3a38:	d0e3      	beq.n	3a02 <uarte_nrfx_poll_out+0x36>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3a3a:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    3a3c:	2201      	movs	r2, #1
    3a3e:	4628      	mov	r0, r5
	data->char_out = c;
    3a40:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    3a44:	f003 f93f 	bl	6cc6 <tx_start>
	__asm__ volatile(
    3a48:	f384 8811 	msr	BASEPRI, r4
    3a4c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a52:	bf00      	nop
    3a54:	2000fe51 	.word	0x2000fe51

00003a58 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3a5c:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3a5e:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3a60:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    3a62:	683c      	ldr	r4, [r7, #0]
    3a64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3a68:	6028      	str	r0, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3a6a:	6843      	ldr	r3, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a6c:	68de      	ldr	r6, [r3, #12]
    3a6e:	1c71      	adds	r1, r6, #1
    3a70:	d00b      	beq.n	3a8a <uarte_instance_init.isra.0+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a72:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    3a74:	f8df c13c 	ldr.w	ip, [pc, #316]	; 3bb4 <uarte_instance_init.isra.0+0x15c>
    *p_pin = pin_number & 0x1F;
    3a78:	f006 021f 	and.w	r2, r6, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a7c:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    3a7e:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3a82:	2103      	movs	r1, #3
    3a84:	3280      	adds	r2, #128	; 0x80
    3a86:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a8a:	6919      	ldr	r1, [r3, #16]
    3a8c:	1c4a      	adds	r2, r1, #1
    3a8e:	d00d      	beq.n	3aac <uarte_instance_init.isra.0+0x54>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3a90:	7f1a      	ldrb	r2, [r3, #28]
    3a92:	f8df c120 	ldr.w	ip, [pc, #288]	; 3bb4 <uarte_instance_init.isra.0+0x15c>
    3a96:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a98:	bf14      	ite	ne
    3a9a:	f04f 0e0c 	movne.w	lr, #12
    3a9e:	f04f 0e00 	moveq.w	lr, #0
    *p_pin = pin_number & 0x1F;
    3aa2:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    3aa6:	3280      	adds	r2, #128	; 0x80
    3aa8:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3aac:	f8d3 c014 	ldr.w	ip, [r3, #20]
    3ab0:	f1bc 3fff 	cmp.w	ip, #4294967295
    3ab4:	d00e      	beq.n	3ad4 <uarte_instance_init.isra.0+0x7c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3ab6:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
    3aba:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 3bb4 <uarte_instance_init.isra.0+0x15c>
    *p_pin = pin_number & 0x1F;
    3abe:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3ac2:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
    3ac6:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3aca:	f04f 0e03 	mov.w	lr, #3
    3ace:	3280      	adds	r2, #128	; 0x80
    3ad0:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3ad4:	f8d3 e018 	ldr.w	lr, [r3, #24]
    3ad8:	f1be 3fff 	cmp.w	lr, #4294967295
    3adc:	d00d      	beq.n	3afa <uarte_instance_init.isra.0+0xa2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3ade:	7f5a      	ldrb	r2, [r3, #29]
    3ae0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 3bb4 <uarte_instance_init.isra.0+0x15c>
    3ae4:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3ae6:	bf14      	ite	ne
    3ae8:	f04f 090c 	movne.w	r9, #12
    3aec:	f04f 0900 	moveq.w	r9, #0
    *p_pin = pin_number & 0x1F;
    3af0:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
    3af4:	3280      	adds	r2, #128	; 0x80
    3af6:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3afa:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    3afc:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3b00:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3b04:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.RTS = pselrts;
    3b06:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    3b0a:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    3b0c:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    3b10:	f7ff feaa 	bl	3868 <uarte_nrfx_configure>
	if (err) {
    3b14:	4606      	mov	r6, r0
    3b16:	b978      	cbnz	r0, 3b38 <uarte_instance_init.isra.0+0xe0>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3b18:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3b1a:	0799      	lsls	r1, r3, #30
    3b1c:	d51c      	bpl.n	3b58 <uarte_instance_init.isra.0+0x100>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3b1e:	f105 0016 	add.w	r0, r5, #22
    3b22:	f001 f887 	bl	4c34 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3b26:	4b20      	ldr	r3, [pc, #128]	; (3ba8 <uarte_instance_init.isra.0+0x150>)
    3b28:	4298      	cmp	r0, r3
    3b2a:	d008      	beq.n	3b3e <uarte_instance_init.isra.0+0xe6>
		LOG_ERR("Failed to allocate PPI Channel");
    3b2c:	2145      	movs	r1, #69	; 0x45
    3b2e:	481f      	ldr	r0, [pc, #124]	; (3bac <uarte_instance_init.isra.0+0x154>)
    3b30:	f002 facf 	bl	60d2 <z_log_minimal_printk>
		return -EIO;
    3b34:	f06f 0604 	mvn.w	r6, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3b38:	4630      	mov	r0, r6
    3b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3b3e:	7dab      	ldrb	r3, [r5, #22]
    3b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3b44:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3b48:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3b4c:	2301      	movs	r3, #1
    3b4e:	7daa      	ldrb	r2, [r5, #22]
    3b50:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3b52:	4a17      	ldr	r2, [pc, #92]	; (3bb0 <uarte_instance_init.isra.0+0x158>)
    3b54:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3b58:	2308      	movs	r3, #8
    3b5a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3b5e:	7a3b      	ldrb	r3, [r7, #8]
    3b60:	b95b      	cbnz	r3, 3b7a <uarte_instance_init.isra.0+0x122>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b62:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3b66:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3b6a:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3b6e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3b72:	2301      	movs	r3, #1
    3b74:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b78:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3b7a:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3b7c:	3514      	adds	r5, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3b7e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3b80:	bf5c      	itt	pl
    3b82:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3b86:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3b8a:	06db      	lsls	r3, r3, #27
    3b8c:	bf44      	itt	mi
    3b8e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3b92:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3b96:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b98:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3b9c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ba0:	2301      	movs	r3, #1
    3ba2:	60a3      	str	r3, [r4, #8]
    3ba4:	60e3      	str	r3, [r4, #12]
	return 0;
    3ba6:	e7c7      	b.n	3b38 <uarte_instance_init.isra.0+0xe0>
    3ba8:	0bad0000 	.word	0x0bad0000
    3bac:	00009d2d 	.word	0x00009d2d
    3bb0:	50017000 	.word	0x50017000
    3bb4:	50842500 	.word	0x50842500

00003bb8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bb8:	4919      	ldr	r1, [pc, #100]	; (3c20 <sys_clock_timeout_handler+0x68>)
{
    3bba:	b570      	push	{r4, r5, r6, lr}
    3bbc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3bbe:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bc2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3bc4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3bc8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bcc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3bce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3bd2:	f04f 0500 	mov.w	r5, #0
    3bd6:	d20a      	bcs.n	3bee <sys_clock_timeout_handler+0x36>
		return true;
    3bd8:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3bda:	4b12      	ldr	r3, [pc, #72]	; (3c24 <sys_clock_timeout_handler+0x6c>)
    3bdc:	6819      	ldr	r1, [r3, #0]
    3bde:	060a      	lsls	r2, r1, #24
    3be0:	0a0b      	lsrs	r3, r1, #8
    3be2:	1992      	adds	r2, r2, r6
    3be4:	4910      	ldr	r1, [pc, #64]	; (3c28 <sys_clock_timeout_handler+0x70>)
    3be6:	f143 0300 	adc.w	r3, r3, #0
    3bea:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3bee:	f001 fcdb 	bl	55a8 <sys_clock_announce>
    return p_reg->CC[ch];
    3bf2:	00a3      	lsls	r3, r4, #2
    3bf4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3bf8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    3bfc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3c00:	42b2      	cmp	r2, r6
    3c02:	d10b      	bne.n	3c1c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3c04:	b91d      	cbnz	r5, 3c0e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3c06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3c0a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c0e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    3c12:	4b06      	ldr	r3, [pc, #24]	; (3c2c <sys_clock_timeout_handler+0x74>)
    3c14:	fa00 f404 	lsl.w	r4, r0, r4
    3c18:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	bf00      	nop
    3c20:	2000c688 	.word	0x2000c688
    3c24:	2000e050 	.word	0x2000e050
    3c28:	2000c670 	.word	0x2000c670
    3c2c:	50015000 	.word	0x50015000

00003c30 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3c30:	2301      	movs	r3, #1
    3c32:	4083      	lsls	r3, r0
{
    3c34:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3c36:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c38:	4a0d      	ldr	r2, [pc, #52]	; (3c70 <compare_int_lock+0x40>)
    3c3a:	e8d2 1fef 	ldaex	r1, [r2]
    3c3e:	ea01 0c04 	and.w	ip, r1, r4
    3c42:	e8c2 cfee 	stlex	lr, ip, [r2]
    3c46:	f1be 0f00 	cmp.w	lr, #0
    3c4a:	d1f6      	bne.n	3c3a <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3c50:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3c54:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    3c58:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3c5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c60:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    3c64:	420b      	tst	r3, r1
}
    3c66:	bf14      	ite	ne
    3c68:	2001      	movne	r0, #1
    3c6a:	2000      	moveq	r0, #0
    3c6c:	bd10      	pop	{r4, pc}
    3c6e:	bf00      	nop
    3c70:	2000e04c 	.word	0x2000e04c

00003c74 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    3c74:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c76:	4a0e      	ldr	r2, [pc, #56]	; (3cb0 <compare_int_unlock.part.0+0x3c>)
    3c78:	4083      	lsls	r3, r0
    3c7a:	e8d2 1fef 	ldaex	r1, [r2]
    3c7e:	4319      	orrs	r1, r3
    3c80:	e8c2 1fec 	stlex	ip, r1, [r2]
    3c84:	f1bc 0f00 	cmp.w	ip, #0
    3c88:	d1f7      	bne.n	3c7a <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3c8e:	4a09      	ldr	r2, [pc, #36]	; (3cb4 <compare_int_unlock.part.0+0x40>)
    3c90:	4083      	lsls	r3, r0
    3c92:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c96:	4b08      	ldr	r3, [pc, #32]	; (3cb8 <compare_int_unlock.part.0+0x44>)
    3c98:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c9c:	fa23 f000 	lsr.w	r0, r3, r0
    3ca0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ca2:	bf42      	ittt	mi
    3ca4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3ca8:	4b04      	ldrmi	r3, [pc, #16]	; (3cbc <compare_int_unlock.part.0+0x48>)
    3caa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3cae:	4770      	bx	lr
    3cb0:	2000e04c 	.word	0x2000e04c
    3cb4:	50015000 	.word	0x50015000
    3cb8:	2000e048 	.word	0x2000e048
    3cbc:	e000e100 	.word	0xe000e100

00003cc0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3cc0:	4b0d      	ldr	r3, [pc, #52]	; (3cf8 <z_nrf_rtc_timer_read+0x38>)
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	0a19      	lsrs	r1, r3, #8
    3cc6:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3cc8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3ccc:	4b0b      	ldr	r3, [pc, #44]	; (3cfc <z_nrf_rtc_timer_read+0x3c>)
    3cce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3cd2:	18c0      	adds	r0, r0, r3
    3cd4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3cdc:	d20a      	bcs.n	3cf4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3cde:	4b08      	ldr	r3, [pc, #32]	; (3d00 <z_nrf_rtc_timer_read+0x40>)
    3ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ce4:	4299      	cmp	r1, r3
    3ce6:	bf08      	it	eq
    3ce8:	4290      	cmpeq	r0, r2
    3cea:	d203      	bcs.n	3cf4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3cec:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3cf0:	f141 0100 	adc.w	r1, r1, #0
}
    3cf4:	4770      	bx	lr
    3cf6:	bf00      	nop
    3cf8:	2000e050 	.word	0x2000e050
    3cfc:	50015000 	.word	0x50015000
    3d00:	2000c670 	.word	0x2000c670

00003d04 <compare_set>:
{
    3d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d08:	4616      	mov	r6, r2
    3d0a:	461f      	mov	r7, r3
    3d0c:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3d0e:	f7ff ff8f 	bl	3c30 <compare_int_lock>
    3d12:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3d14:	f7ff ffd4 	bl	3cc0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3d18:	42b9      	cmp	r1, r7
    3d1a:	bf08      	it	eq
    3d1c:	42b0      	cmpeq	r0, r6
    3d1e:	d27b      	bcs.n	3e18 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
    3d20:	2300      	movs	r3, #0
    3d22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3d26:	ebb6 0800 	subs.w	r8, r6, r0
    3d2a:	eb67 0901 	sbc.w	r9, r7, r1
    3d2e:	454b      	cmp	r3, r9
    3d30:	bf08      	it	eq
    3d32:	4542      	cmpeq	r2, r8
    3d34:	d37d      	bcc.n	3e32 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    3d36:	4b40      	ldr	r3, [pc, #256]	; (3e38 <compare_set+0x134>)
    3d38:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3d3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3d40:	429f      	cmp	r7, r3
    3d42:	bf08      	it	eq
    3d44:	4296      	cmpeq	r6, r2
    3d46:	d051      	beq.n	3dec <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d48:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    3d4c:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3d50:	4614      	mov	r4, r2
    3d52:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3d56:	f105 0850 	add.w	r8, r5, #80	; 0x50
    3d5a:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    3d5e:	ea4f 0888 	mov.w	r8, r8, lsl #2
    3d62:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d66:	fa1f f888 	uxth.w	r8, r8
    3d6a:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    3d6e:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d72:	4b32      	ldr	r3, [pc, #200]	; (3e3c <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d74:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d78:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
    3d7c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3d80:	eba0 000a 	sub.w	r0, r0, sl
    3d84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d88:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3d8c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3d8e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3d92:	d105      	bne.n	3da0 <compare_set+0x9c>
    3d94:	9201      	str	r2, [sp, #4]
    3d96:	2013      	movs	r0, #19
    3d98:	f004 fda2 	bl	88e0 <z_impl_k_busy_wait>
    3d9c:	4b27      	ldr	r3, [pc, #156]	; (3e3c <compare_set+0x138>)
    3d9e:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3da0:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3da4:	eba4 000c 	sub.w	r0, r4, ip
    3da8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3dac:	2100      	movs	r1, #0
			cc_val = now + 2;
    3dae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3db2:	bf88      	it	hi
    3db4:	4664      	movhi	r4, ip
    3db6:	f8c8 1000 	str.w	r1, [r8]
    3dba:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3dbe:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    3dc2:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    3dc6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3dca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3dce:	4582      	cmp	sl, r0
    3dd0:	d006      	beq.n	3de0 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
    3dd2:	1a20      	subs	r0, r4, r0
    3dd4:	3802      	subs	r0, #2
    3dd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3dda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3dde:	d819      	bhi.n	3e14 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
    3de0:	1aa4      	subs	r4, r4, r2
    3de2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3de6:	1932      	adds	r2, r6, r4
    3de8:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3dec:	4c12      	ldr	r4, [pc, #72]	; (3e38 <compare_set+0x134>)
    3dee:	0129      	lsls	r1, r5, #4
    3df0:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3df4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
    3dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
    3dfc:	5062      	str	r2, [r4, r1]
	return ret;
    3dfe:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
    3e00:	6043      	str	r3, [r0, #4]
	if (key) {
    3e02:	9b00      	ldr	r3, [sp, #0]
    3e04:	b113      	cbz	r3, 3e0c <compare_set+0x108>
    3e06:	4628      	mov	r0, r5
    3e08:	f7ff ff34 	bl	3c74 <compare_int_unlock.part.0>
}
    3e0c:	4620      	mov	r0, r4
    3e0e:	b003      	add	sp, #12
    3e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e14:	4620      	mov	r0, r4
    3e16:	e7b1      	b.n	3d7c <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
    3e18:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e1a:	4a09      	ldr	r2, [pc, #36]	; (3e40 <compare_set+0x13c>)
    3e1c:	40ab      	lsls	r3, r5
    3e1e:	e8d2 1fef 	ldaex	r1, [r2]
    3e22:	4319      	orrs	r1, r3
    3e24:	e8c2 1fe0 	stlex	r0, r1, [r2]
    3e28:	2800      	cmp	r0, #0
    3e2a:	d1f8      	bne.n	3e1e <compare_set+0x11a>
    3e2c:	4632      	mov	r2, r6
    3e2e:	463b      	mov	r3, r7
    3e30:	e7dc      	b.n	3dec <compare_set+0xe8>
			return -EINVAL;
    3e32:	f06f 0415 	mvn.w	r4, #21
    3e36:	e7e4      	b.n	3e02 <compare_set+0xfe>
    3e38:	2000c678 	.word	0x2000c678
    3e3c:	50015000 	.word	0x50015000
    3e40:	2000e048 	.word	0x2000e048

00003e44 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    3e46:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e48:	f04f 30ff 	mov.w	r0, #4294967295
    3e4c:	f04f 31ff 	mov.w	r1, #4294967295
    3e50:	4d16      	ldr	r5, [pc, #88]	; (3eac <sys_clock_driver_init+0x68>)
    3e52:	4b17      	ldr	r3, [pc, #92]	; (3eb0 <sys_clock_driver_init+0x6c>)
    3e54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3e58:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e60:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3e66:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3e6a:	4b12      	ldr	r3, [pc, #72]	; (3eb4 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3e6c:	2101      	movs	r1, #1
    3e6e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3e72:	2015      	movs	r0, #21
    3e74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3e78:	4622      	mov	r2, r4
    3e7a:	f7fe fd73 	bl	2964 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3e7e:	2015      	movs	r0, #21
    3e80:	f7fe fd52 	bl	2928 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3e84:	2301      	movs	r3, #1
    3e86:	4a0c      	ldr	r2, [pc, #48]	; (3eb8 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3e88:	4620      	mov	r0, r4
    3e8a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    3e8c:	4a0b      	ldr	r2, [pc, #44]	; (3ebc <sys_clock_driver_init+0x78>)
    3e8e:	602b      	str	r3, [r5, #0]
    3e90:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3e92:	4b0b      	ldr	r3, [pc, #44]	; (3ec0 <sys_clock_driver_init+0x7c>)
    3e94:	4a0b      	ldr	r2, [pc, #44]	; (3ec4 <sys_clock_driver_init+0x80>)
    3e96:	9300      	str	r3, [sp, #0]
    3e98:	9401      	str	r4, [sp, #4]
    3e9a:	2300      	movs	r3, #0
    3e9c:	f7ff ff32 	bl	3d04 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3ea0:	4630      	mov	r0, r6
    3ea2:	f7ff fa71 	bl	3388 <z_nrf_clock_control_lf_on>

	return 0;
}
    3ea6:	4620      	mov	r0, r4
    3ea8:	b002      	add	sp, #8
    3eaa:	bd70      	pop	{r4, r5, r6, pc}
    3eac:	50015000 	.word	0x50015000
    3eb0:	2000c678 	.word	0x2000c678
    3eb4:	e000e100 	.word	0xe000e100
    3eb8:	50015008 	.word	0x50015008
    3ebc:	2000e04c 	.word	0x2000e04c
    3ec0:	00003bb9 	.word	0x00003bb9
    3ec4:	007fffff 	.word	0x007fffff

00003ec8 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    3ec8:	4b33      	ldr	r3, [pc, #204]	; (3f98 <rtc_nrf_isr+0xd0>)
{
    3eca:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    3ece:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3ed2:	079a      	lsls	r2, r3, #30
    3ed4:	d509      	bpl.n	3eea <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ed6:	4b31      	ldr	r3, [pc, #196]	; (3f9c <rtc_nrf_isr+0xd4>)
    3ed8:	681a      	ldr	r2, [r3, #0]
    3eda:	b132      	cbz	r2, 3eea <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3edc:	2200      	movs	r2, #0
    3ede:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3ee0:	4a2f      	ldr	r2, [pc, #188]	; (3fa0 <rtc_nrf_isr+0xd8>)
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	6813      	ldr	r3, [r2, #0]
    3ee6:	3301      	adds	r3, #1
    3ee8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3eea:	f04f 0320 	mov.w	r3, #32
    3eee:	f3ef 8211 	mrs	r2, BASEPRI
    3ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ef6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3efa:	4b27      	ldr	r3, [pc, #156]	; (3f98 <rtc_nrf_isr+0xd0>)
    3efc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3f00:	03db      	lsls	r3, r3, #15
    3f02:	d50e      	bpl.n	3f22 <rtc_nrf_isr+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f04:	4b27      	ldr	r3, [pc, #156]	; (3fa4 <rtc_nrf_isr+0xdc>)
    3f06:	e8d3 1fef 	ldaex	r1, [r3]
    3f0a:	f021 0001 	bic.w	r0, r1, #1
    3f0e:	e8c3 0fe4 	stlex	r4, r0, [r3]
    3f12:	2c00      	cmp	r4, #0
    3f14:	d1f7      	bne.n	3f06 <rtc_nrf_isr+0x3e>
    3f16:	4b24      	ldr	r3, [pc, #144]	; (3fa8 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f18:	2900      	cmp	r1, #0
    3f1a:	d136      	bne.n	3f8a <rtc_nrf_isr+0xc2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f1c:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3f1e:	2900      	cmp	r1, #0
    3f20:	d133      	bne.n	3f8a <rtc_nrf_isr+0xc2>
{
    3f22:	2300      	movs	r3, #0
	__asm__ volatile(
    3f24:	f382 8811 	msr	BASEPRI, r2
    3f28:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3f2c:	b353      	cbz	r3, 3f84 <rtc_nrf_isr+0xbc>
		curr_time = z_nrf_rtc_timer_read();
    3f2e:	f7ff fec7 	bl	3cc0 <z_nrf_rtc_timer_read>
    3f32:	4604      	mov	r4, r0
	__asm__ volatile(
    3f34:	f04f 0320 	mov.w	r3, #32
    3f38:	f3ef 8011 	mrs	r0, BASEPRI
    3f3c:	f383 8812 	msr	BASEPRI_MAX, r3
    3f40:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3f44:	4b19      	ldr	r3, [pc, #100]	; (3fac <rtc_nrf_isr+0xe4>)
    3f46:	2200      	movs	r2, #0
    3f48:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3f4c:	4549      	cmp	r1, r9
    3f4e:	bf08      	it	eq
    3f50:	4544      	cmpeq	r4, r8
    3f52:	d31f      	bcc.n	3f94 <rtc_nrf_isr+0xcc>
			user_context = cc_data[chan].user_context;
    3f54:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f58:	f04f 34ff 	mov.w	r4, #4294967295
    3f5c:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
    3f60:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    3f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f66:	e9c3 4502 	strd	r4, r5, [r3, #8]
    3f6a:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <rtc_nrf_isr+0xd0>)
    3f6c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    3f70:	f380 8811 	msr	BASEPRI, r0
    3f74:	f3bf 8f6f 	isb	sy
		if (handler) {
    3f78:	b121      	cbz	r1, 3f84 <rtc_nrf_isr+0xbc>
			handler(chan, expire_time, user_context);
    3f7a:	4642      	mov	r2, r8
    3f7c:	464b      	mov	r3, r9
    3f7e:	2000      	movs	r0, #0
    3f80:	9600      	str	r6, [sp, #0]
    3f82:	4788      	blx	r1
}
    3f84:	b002      	add	sp, #8
    3f86:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f8a:	2100      	movs	r1, #0
    3f8c:	6019      	str	r1, [r3, #0]
    3f8e:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f90:	2301      	movs	r3, #1
}
    3f92:	e7c7      	b.n	3f24 <rtc_nrf_isr+0x5c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3f94:	4611      	mov	r1, r2
    3f96:	e7eb      	b.n	3f70 <rtc_nrf_isr+0xa8>
    3f98:	50015000 	.word	0x50015000
    3f9c:	50015104 	.word	0x50015104
    3fa0:	2000e050 	.word	0x2000e050
    3fa4:	2000e048 	.word	0x2000e048
    3fa8:	50015140 	.word	0x50015140
    3fac:	2000c678 	.word	0x2000c678

00003fb0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3fb0:	4b14      	ldr	r3, [pc, #80]	; (4004 <sys_clock_set_timeout+0x54>)
{
    3fb2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3fb4:	f1b0 3fff 	cmp.w	r0, #4294967295
    3fb8:	bf08      	it	eq
    3fba:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3fbc:	1e44      	subs	r4, r0, #1
    3fbe:	2c00      	cmp	r4, #0
    3fc0:	dd1d      	ble.n	3ffe <sys_clock_set_timeout+0x4e>
    3fc2:	429c      	cmp	r4, r3
    3fc4:	bfa8      	it	ge
    3fc6:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3fc8:	f7ff fe7a 	bl	3cc0 <z_nrf_rtc_timer_read>
    3fcc:	4b0e      	ldr	r3, [pc, #56]	; (4008 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3fce:	490f      	ldr	r1, [pc, #60]	; (400c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fd4:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3fd6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fda:	bf28      	it	cs
    3fdc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3fde:	3001      	adds	r0, #1
    3fe0:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3fe2:	4808      	ldr	r0, [pc, #32]	; (4004 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3fe4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3fe6:	4284      	cmp	r4, r0
    3fe8:	bf28      	it	cs
    3fea:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3fec:	2000      	movs	r0, #0
    3fee:	1912      	adds	r2, r2, r4
    3ff0:	9001      	str	r0, [sp, #4]
    3ff2:	f143 0300 	adc.w	r3, r3, #0
    3ff6:	f7ff fe85 	bl	3d04 <compare_set>
}
    3ffa:	b002      	add	sp, #8
    3ffc:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3ffe:	2400      	movs	r4, #0
    4000:	e7e2      	b.n	3fc8 <sys_clock_set_timeout+0x18>
    4002:	bf00      	nop
    4004:	007fffff 	.word	0x007fffff
    4008:	2000c688 	.word	0x2000c688
    400c:	00003bb9 	.word	0x00003bb9

00004010 <sys_clock_elapsed>:
{
    4010:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4012:	f7ff fe55 	bl	3cc0 <z_nrf_rtc_timer_read>
    4016:	4b02      	ldr	r3, [pc, #8]	; (4020 <sys_clock_elapsed+0x10>)
    4018:	681b      	ldr	r3, [r3, #0]
}
    401a:	1ac0      	subs	r0, r0, r3
    401c:	bd08      	pop	{r3, pc}
    401e:	bf00      	nop
    4020:	2000c688 	.word	0x2000c688

00004024 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4024:	4803      	ldr	r0, [pc, #12]	; (4034 <k_sys_fatal_error_handler+0x10>)
    4026:	2145      	movs	r1, #69	; 0x45
{
    4028:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    402a:	f002 f852 	bl	60d2 <z_log_minimal_printk>
		sys_arch_reboot(0);
    402e:	2000      	movs	r0, #0
    4030:	f7fe ff36 	bl	2ea0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4034:	00009d6f 	.word	0x00009d6f

00004038 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4038:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    403a:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    403c:	4a04      	ldr	r2, [pc, #16]	; (4050 <boot_write_magic+0x18>)
    403e:	2310      	movs	r3, #16
    4040:	3910      	subs	r1, #16
    4042:	f002 f870 	bl	6126 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    4046:	3800      	subs	r0, #0
    4048:	bf18      	it	ne
    404a:	2001      	movne	r0, #1
    404c:	bd08      	pop	{r3, pc}
    404e:	bf00      	nop
    4050:	00008e7c 	.word	0x00008e7c

00004054 <boot_read_swap_state>:
{
    4054:	b530      	push	{r4, r5, lr}
    4056:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4058:	6881      	ldr	r1, [r0, #8]
{
    405a:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    405c:	2310      	movs	r3, #16
    405e:	aa02      	add	r2, sp, #8
    4060:	3910      	subs	r1, #16
{
    4062:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    4064:	f002 f843 	bl	60ee <flash_area_read>
    if (rc < 0) {
    4068:	2800      	cmp	r0, #0
    406a:	db11      	blt.n	4090 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    406c:	2210      	movs	r2, #16
    406e:	4628      	mov	r0, r5
    4070:	a902      	add	r1, sp, #8
    4072:	f002 fec4 	bl	6dfe <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    4076:	b168      	cbz	r0, 4094 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    4078:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    407a:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    407c:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    407e:	2301      	movs	r3, #1
    4080:	4628      	mov	r0, r5
    4082:	f10d 0207 	add.w	r2, sp, #7
    4086:	3928      	subs	r1, #40	; 0x28
    4088:	f002 f831 	bl	60ee <flash_area_read>
    if (rc < 0) {
    408c:	2800      	cmp	r0, #0
    408e:	da0b      	bge.n	40a8 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    4090:	2001      	movs	r0, #1
    4092:	e02a      	b.n	40ea <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    4094:	2210      	movs	r2, #16
    4096:	4916      	ldr	r1, [pc, #88]	; (40f0 <boot_read_swap_state+0x9c>)
    4098:	a802      	add	r0, sp, #8
    409a:	f002 fb83 	bl	67a4 <memcmp>
    409e:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    40a0:	bf14      	ite	ne
    40a2:	2302      	movne	r3, #2
    40a4:	2301      	moveq	r3, #1
    40a6:	e7e8      	b.n	407a <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    40a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    40ac:	4628      	mov	r0, r5
    40ae:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    40b2:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    40b4:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    40b6:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    40b8:	2201      	movs	r2, #1
    40ba:	f10d 0107 	add.w	r1, sp, #7
    40be:	f002 fe9e 	bl	6dfe <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    40c2:	b910      	cbnz	r0, 40ca <boot_read_swap_state+0x76>
    40c4:	7863      	ldrb	r3, [r4, #1]
    40c6:	2b04      	cmp	r3, #4
    40c8:	d903      	bls.n	40d2 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    40ca:	2301      	movs	r3, #1
    40cc:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    40ce:	2300      	movs	r3, #0
    40d0:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    40d2:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    40d4:	4628      	mov	r0, r5
    40d6:	3a20      	subs	r2, #32
    40d8:	1ca1      	adds	r1, r4, #2
    40da:	f002 feb8 	bl	6e4e <boot_read_flag>
    if (rc) {
    40de:	2800      	cmp	r0, #0
    40e0:	d1d6      	bne.n	4090 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    40e2:	4628      	mov	r0, r5
    40e4:	1ce1      	adds	r1, r4, #3
    40e6:	f002 ff0d 	bl	6f04 <boot_read_image_ok>
}
    40ea:	b007      	add	sp, #28
    40ec:	bd30      	pop	{r4, r5, pc}
    40ee:	bf00      	nop
    40f0:	00008e7c 	.word	0x00008e7c

000040f4 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    40f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    40f8:	b085      	sub	sp, #20
    40fa:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    40fc:	4669      	mov	r1, sp
    40fe:	2002      	movs	r0, #2
    4100:	f002 ff04 	bl	6f0c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    4104:	4604      	mov	r4, r0
    4106:	b118      	cbz	r0, 4110 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    4108:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    410a:	b005      	add	sp, #20
    410c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4110:	2006      	movs	r0, #6
    4112:	a902      	add	r1, sp, #8
    4114:	f002 fefa 	bl	6f0c <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    4118:	2801      	cmp	r0, #1
    411a:	d138      	bne.n	418e <boot_swap_type_multi+0x9a>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    411c:	462a      	mov	r2, r5
    411e:	2149      	movs	r1, #73	; 0x49
    4120:	4828      	ldr	r0, [pc, #160]	; (41c4 <boot_swap_type_multi+0xd0>)
    4122:	f001 ffd6 	bl	60d2 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4126:	4b28      	ldr	r3, [pc, #160]	; (41c8 <boot_swap_type_multi+0xd4>)
        secondary_slot.image_num = 0;
    4128:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    412c:	9302      	str	r3, [sp, #8]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    412e:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    4130:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    4134:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    4138:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    413c:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    4140:	f89d 9002 	ldrb.w	r9, [sp, #2]
    4144:	4c21      	ldr	r4, [pc, #132]	; (41cc <boot_swap_type_multi+0xd8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    4146:	4629      	mov	r1, r5
    4148:	7820      	ldrb	r0, [r4, #0]
    414a:	f002 fe6c 	bl	6e26 <boot_magic_compatible_check>
    414e:	b318      	cbz	r0, 4198 <boot_swap_type_multi+0xa4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    4150:	4631      	mov	r1, r6
    4152:	7860      	ldrb	r0, [r4, #1]
    4154:	f002 fe67 	bl	6e26 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    4158:	b1f0      	cbz	r0, 4198 <boot_swap_type_multi+0xa4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    415a:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    415c:	2b04      	cmp	r3, #4
    415e:	d001      	beq.n	4164 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    4160:	42bb      	cmp	r3, r7
    4162:	d119      	bne.n	4198 <boot_swap_type_multi+0xa4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    4164:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    4166:	2b04      	cmp	r3, #4
    4168:	d001      	beq.n	416e <boot_swap_type_multi+0x7a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    416a:	4543      	cmp	r3, r8
    416c:	d114      	bne.n	4198 <boot_swap_type_multi+0xa4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    416e:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    4170:	2b04      	cmp	r3, #4
    4172:	d10f      	bne.n	4194 <boot_swap_type_multi+0xa0>
            BOOT_LOG_INF("Swap type: %s",
    4174:	7963      	ldrb	r3, [r4, #5]
    4176:	2b02      	cmp	r3, #2
    4178:	d119      	bne.n	41ae <boot_swap_type_multi+0xba>
    417a:	4a15      	ldr	r2, [pc, #84]	; (41d0 <boot_swap_type_multi+0xdc>)
    417c:	4815      	ldr	r0, [pc, #84]	; (41d4 <boot_swap_type_multi+0xe0>)
    417e:	2149      	movs	r1, #73	; 0x49
    4180:	f001 ffa7 	bl	60d2 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    4184:	7960      	ldrb	r0, [r4, #5]
    4186:	1e83      	subs	r3, r0, #2
    4188:	2b02      	cmp	r3, #2
    418a:	d9be      	bls.n	410a <boot_swap_type_multi+0x16>
    418c:	e7bc      	b.n	4108 <boot_swap_type_multi+0x14>
    } else if (rc) {
    418e:	2800      	cmp	r0, #0
    4190:	d0cd      	beq.n	412e <boot_swap_type_multi+0x3a>
    4192:	e7b9      	b.n	4108 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4194:	454b      	cmp	r3, r9
    4196:	d0ed      	beq.n	4174 <boot_swap_type_multi+0x80>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    4198:	3201      	adds	r2, #1
    419a:	2a03      	cmp	r2, #3
    419c:	f104 0406 	add.w	r4, r4, #6
    41a0:	d1d1      	bne.n	4146 <boot_swap_type_multi+0x52>
    BOOT_LOG_INF("Swap type: none");
    41a2:	480d      	ldr	r0, [pc, #52]	; (41d8 <boot_swap_type_multi+0xe4>)
    41a4:	2149      	movs	r1, #73	; 0x49
    41a6:	f001 ff94 	bl	60d2 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    41aa:	2001      	movs	r0, #1
    41ac:	e7ad      	b.n	410a <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    41ae:	2b03      	cmp	r3, #3
    41b0:	d005      	beq.n	41be <boot_swap_type_multi+0xca>
    41b2:	4a0a      	ldr	r2, [pc, #40]	; (41dc <boot_swap_type_multi+0xe8>)
    41b4:	490a      	ldr	r1, [pc, #40]	; (41e0 <boot_swap_type_multi+0xec>)
    41b6:	2b04      	cmp	r3, #4
    41b8:	bf18      	it	ne
    41ba:	460a      	movne	r2, r1
    41bc:	e7de      	b.n	417c <boot_swap_type_multi+0x88>
    41be:	4a09      	ldr	r2, [pc, #36]	; (41e4 <boot_swap_type_multi+0xf0>)
    41c0:	e7dc      	b.n	417c <boot_swap_type_multi+0x88>
    41c2:	bf00      	nop
    41c4:	00009db4 	.word	0x00009db4
    41c8:	03030103 	.word	0x03030103
    41cc:	00009e27 	.word	0x00009e27
    41d0:	00009d98 	.word	0x00009d98
    41d4:	00009dff 	.word	0x00009dff
    41d8:	00009e12 	.word	0x00009e12
    41dc:	00009d91 	.word	0x00009d91
    41e0:	00009da2 	.word	0x00009da2
    41e4:	00009d9d 	.word	0x00009d9d

000041e8 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    41e8:	6801      	ldr	r1, [r0, #0]
    41ea:	4a0e      	ldr	r2, [pc, #56]	; (4224 <verify_header+0x3c>)
{
    41ec:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    41ee:	4291      	cmp	r1, r2
    41f0:	d115      	bne.n	421e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    41f2:	69c1      	ldr	r1, [r0, #28]
    41f4:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    41f8:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    41fc:	4291      	cmp	r1, r2
    41fe:	d10e      	bne.n	421e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    4200:	6882      	ldr	r2, [r0, #8]
    4202:	2a01      	cmp	r2, #1
    4204:	d80b      	bhi.n	421e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    4206:	68c2      	ldr	r2, [r0, #12]
    4208:	b112      	cbz	r2, 4210 <verify_header+0x28>
    420a:	6901      	ldr	r1, [r0, #16]
    420c:	428a      	cmp	r2, r1
    420e:	d006      	beq.n	421e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    4210:	6958      	ldr	r0, [r3, #20]
    4212:	b128      	cbz	r0, 4220 <verify_header+0x38>
    4214:	699b      	ldr	r3, [r3, #24]
    4216:	1a1b      	subs	r3, r3, r0
    4218:	4258      	negs	r0, r3
    421a:	4158      	adcs	r0, r3
    421c:	4770      	bx	lr
        return( 1 );
    421e:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    4220:	4770      	bx	lr
    4222:	bf00      	nop
    4224:	ff00aa55 	.word	0xff00aa55

00004228 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    4228:	4b0d      	ldr	r3, [pc, #52]	; (4260 <verify_chain+0x38>)
{
    422a:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    422c:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    422e:	b1a6      	cbz	r6, 425a <verify_chain+0x32>
    4230:	4630      	mov	r0, r6
    4232:	f7ff ffd9 	bl	41e8 <verify_header>
    4236:	4604      	mov	r4, r0
    4238:	b978      	cbnz	r0, 425a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    423a:	68f3      	ldr	r3, [r6, #12]
    423c:	b96b      	cbnz	r3, 425a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    423e:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    4240:	b90d      	cbnz	r5, 4246 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    4242:	4620      	mov	r0, r4
    4244:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    4246:	4628      	mov	r0, r5
    4248:	f7ff ffce 	bl	41e8 <verify_header>
    424c:	b928      	cbnz	r0, 425a <verify_chain+0x32>
        if( cur->prev != prv )
    424e:	68eb      	ldr	r3, [r5, #12]
    4250:	42b3      	cmp	r3, r6
    4252:	d102      	bne.n	425a <verify_chain+0x32>
        cur = cur->next;
    4254:	462e      	mov	r6, r5
    4256:	692d      	ldr	r5, [r5, #16]
    4258:	e7f2      	b.n	4240 <verify_chain+0x18>
        return( 1 );
    425a:	2401      	movs	r4, #1
    425c:	e7f1      	b.n	4242 <verify_chain+0x1a>
    425e:	bf00      	nop
    4260:	2000e054 	.word	0x2000e054

00004264 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    4264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    4268:	4d40      	ldr	r5, [pc, #256]	; (436c <buffer_alloc_calloc+0x108>)
    426a:	682c      	ldr	r4, [r5, #0]
    426c:	b1d4      	cbz	r4, 42a4 <buffer_alloc_calloc+0x40>
    426e:	68ac      	ldr	r4, [r5, #8]
    4270:	b1c4      	cbz	r4, 42a4 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    4272:	2800      	cmp	r0, #0
    4274:	d04d      	beq.n	4312 <buffer_alloc_calloc+0xae>
    4276:	2900      	cmp	r1, #0
    4278:	d04b      	beq.n	4312 <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    427a:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    427e:	fbb6 f0f0 	udiv	r0, r6, r0
    4282:	4288      	cmp	r0, r1
    4284:	d145      	bne.n	4312 <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4286:	1d30      	adds	r0, r6, #4
    4288:	d843      	bhi.n	4312 <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    428a:	07b1      	lsls	r1, r6, #30
    428c:	d00d      	beq.n	42aa <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    428e:	f026 0703 	bic.w	r7, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4292:	3704      	adds	r7, #4
    memory_header *new, *cur = heap.first_free;
    4294:	68ec      	ldr	r4, [r5, #12]
    4296:	e003      	b.n	42a0 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    4298:	6863      	ldr	r3, [r4, #4]
    429a:	42bb      	cmp	r3, r7
    429c:	d23b      	bcs.n	4316 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    429e:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    42a0:	2c00      	cmp	r4, #0
    42a2:	d1f9      	bne.n	4298 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    42a4:	4620      	mov	r0, r4
    42a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42aa:	4637      	mov	r7, r6
    42ac:	e7f2      	b.n	4294 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    42ae:	60e8      	str	r0, [r5, #12]
    42b0:	e044      	b.n	433c <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    42b2:	f107 0c20 	add.w	ip, r7, #32
    42b6:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    42ba:	3920      	subs	r1, #32
    42bc:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    42be:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    42c0:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 4374 <buffer_alloc_calloc+0x110>
    new->prev = cur;
    42c4:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    42c8:	6921      	ldr	r1, [r4, #16]
    42ca:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    42cc:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    42d0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 4378 <buffer_alloc_calloc+0x114>
    42d4:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    42d8:	b101      	cbz	r1, 42dc <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    42da:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    42dc:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    42e0:	b1aa      	cbz	r2, 430e <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    42e2:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    42e4:	699a      	ldr	r2, [r3, #24]
    42e6:	b102      	cbz	r2, 42ea <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    42e8:	6153      	str	r3, [r2, #20]
    cur->next = new;
    42ea:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    42ec:	2300      	movs	r3, #0
    cur->alloc = 1;
    42ee:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    42f2:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    42f6:	692b      	ldr	r3, [r5, #16]
    cur->size = len;
    42f8:	e9c4 7901 	strd	r7, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    42fc:	07db      	lsls	r3, r3, #31
    42fe:	d52d      	bpl.n	435c <buffer_alloc_calloc+0xf8>
    4300:	f7ff ff92 	bl	4228 <verify_chain>
    4304:	b350      	cbz	r0, 435c <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    4306:	4b1a      	ldr	r3, [pc, #104]	; (4370 <buffer_alloc_calloc+0x10c>)
    4308:	4648      	mov	r0, r9
    430a:	681b      	ldr	r3, [r3, #0]
    430c:	e025      	b.n	435a <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    430e:	60eb      	str	r3, [r5, #12]
    4310:	e7e8      	b.n	42e4 <buffer_alloc_calloc+0x80>
        return( NULL );
    4312:	2400      	movs	r4, #0
    4314:	e7c6      	b.n	42a4 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    4316:	68a3      	ldr	r3, [r4, #8]
    4318:	b11b      	cbz	r3, 4322 <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    431a:	4b15      	ldr	r3, [pc, #84]	; (4370 <buffer_alloc_calloc+0x10c>)
    431c:	2001      	movs	r0, #1
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    4322:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    4326:	6861      	ldr	r1, [r4, #4]
    4328:	f104 0820 	add.w	r8, r4, #32
    432c:	1bc9      	subs	r1, r1, r7
    432e:	2923      	cmp	r1, #35	; 0x23
    4330:	d8bf      	bhi.n	42b2 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    4332:	2301      	movs	r3, #1
    4334:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    4336:	2a00      	cmp	r2, #0
    4338:	d0b9      	beq.n	42ae <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    433a:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    433c:	69a3      	ldr	r3, [r4, #24]
    433e:	b103      	cbz	r3, 4342 <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    4340:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    4342:	2300      	movs	r3, #0
        cur->next_free = NULL;
    4344:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4348:	692b      	ldr	r3, [r5, #16]
    434a:	07da      	lsls	r2, r3, #31
    434c:	d506      	bpl.n	435c <buffer_alloc_calloc+0xf8>
    434e:	f7ff ff6b 	bl	4228 <verify_chain>
    4352:	b118      	cbz	r0, 435c <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    4354:	2001      	movs	r0, #1
    4356:	4b06      	ldr	r3, [pc, #24]	; (4370 <buffer_alloc_calloc+0x10c>)
    4358:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    435a:	4798      	blx	r3
    memset( ret, 0, original_len );
    435c:	4632      	mov	r2, r6
    435e:	2100      	movs	r1, #0
    4360:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    4362:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    4364:	f002 fa50 	bl	6808 <memset>
    return( ret );
    4368:	e79c      	b.n	42a4 <buffer_alloc_calloc+0x40>
    436a:	bf00      	nop
    436c:	2000e054 	.word	0x2000e054
    4370:	2000c584 	.word	0x2000c584
    4374:	ff00aa55 	.word	0xff00aa55
    4378:	ee119966 	.word	0xee119966

0000437c <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    4380:	4605      	mov	r5, r0
    4382:	2800      	cmp	r0, #0
    4384:	d07c      	beq.n	4480 <buffer_alloc_free+0x104>
    4386:	4e3f      	ldr	r6, [pc, #252]	; (4484 <buffer_alloc_free+0x108>)
    4388:	6833      	ldr	r3, [r6, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d078      	beq.n	4480 <buffer_alloc_free+0x104>
    438e:	68b2      	ldr	r2, [r6, #8]
    4390:	2a00      	cmp	r2, #0
    4392:	d075      	beq.n	4480 <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    4394:	4283      	cmp	r3, r0
    4396:	d803      	bhi.n	43a0 <buffer_alloc_free+0x24>
    4398:	6872      	ldr	r2, [r6, #4]
    439a:	4413      	add	r3, r2
    439c:	4298      	cmp	r0, r3
    439e:	d303      	bcc.n	43a8 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    43a0:	4b39      	ldr	r3, [pc, #228]	; (4488 <buffer_alloc_free+0x10c>)
    43a2:	2001      	movs	r0, #1
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    43a8:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    43ac:	4620      	mov	r0, r4
    43ae:	f7ff ff1b 	bl	41e8 <verify_header>
    43b2:	b118      	cbz	r0, 43bc <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    43b4:	4b34      	ldr	r3, [pc, #208]	; (4488 <buffer_alloc_free+0x10c>)
    43b6:	2001      	movs	r0, #1
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	4798      	blx	r3

    if( hdr->alloc != 1 )
    43bc:	f855 3c18 	ldr.w	r3, [r5, #-24]
    43c0:	2b01      	cmp	r3, #1
    43c2:	d003      	beq.n	43cc <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    43c4:	4b30      	ldr	r3, [pc, #192]	; (4488 <buffer_alloc_free+0x10c>)
    43c6:	2001      	movs	r0, #1
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	4798      	blx	r3
    }

    hdr->alloc = 0;
    43cc:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    43ce:	f855 7c14 	ldr.w	r7, [r5, #-20]
    hdr->alloc = 0;
    43d2:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    43d6:	b1af      	cbz	r7, 4404 <buffer_alloc_free+0x88>
    43d8:	68ba      	ldr	r2, [r7, #8]
    43da:	b992      	cbnz	r2, 4402 <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    43dc:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    43e0:	f103 0220 	add.w	r2, r3, #32
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	4413      	add	r3, r2
    43e8:	607b      	str	r3, [r7, #4]
        hdr->prev->next = hdr->next;
    43ea:	f855 3c10 	ldr.w	r3, [r5, #-16]
    43ee:	613b      	str	r3, [r7, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    43f0:	b103      	cbz	r3, 43f4 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    43f2:	60df      	str	r7, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    43f4:	4620      	mov	r0, r4
    43f6:	2220      	movs	r2, #32
    43f8:	2100      	movs	r1, #0
    43fa:	f002 fa05 	bl	6808 <memset>
    43fe:	4623      	mov	r3, r4
    4400:	463c      	mov	r4, r7
    memory_header *hdr, *old = NULL;
    4402:	461f      	mov	r7, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    4404:	6920      	ldr	r0, [r4, #16]
    4406:	2800      	cmp	r0, #0
    4408:	d032      	beq.n	4470 <buffer_alloc_free+0xf4>
    440a:	6883      	ldr	r3, [r0, #8]
    440c:	2b00      	cmp	r3, #0
    440e:	d12f      	bne.n	4470 <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    4410:	6863      	ldr	r3, [r4, #4]
    4412:	6842      	ldr	r2, [r0, #4]
    4414:	3320      	adds	r3, #32
    4416:	4413      	add	r3, r2
    4418:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    441a:	6903      	ldr	r3, [r0, #16]
    441c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    4420:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4422:	b9da      	cbnz	r2, 445c <buffer_alloc_free+0xe0>
    4424:	bb01      	cbnz	r1, 4468 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    4426:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    4428:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    442a:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    442c:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    442e:	b1ea      	cbz	r2, 446c <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    4430:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    4432:	69a2      	ldr	r2, [r4, #24]
    4434:	b102      	cbz	r2, 4438 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    4436:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    4438:	b103      	cbz	r3, 443c <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    443a:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    443c:	2220      	movs	r2, #32
    443e:	2100      	movs	r1, #0
    4440:	f002 f9e2 	bl	6808 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    4444:	6933      	ldr	r3, [r6, #16]
    4446:	079b      	lsls	r3, r3, #30
    4448:	d51a      	bpl.n	4480 <buffer_alloc_free+0x104>
    444a:	f7ff feed 	bl	4228 <verify_chain>
    444e:	b1b8      	cbz	r0, 4480 <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
}
    4450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    4454:	4b0c      	ldr	r3, [pc, #48]	; (4488 <buffer_alloc_free+0x10c>)
    4456:	2001      	movs	r0, #1
    4458:	681b      	ldr	r3, [r3, #0]
    445a:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    445c:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    445e:	69a1      	ldr	r1, [r4, #24]
    4460:	2900      	cmp	r1, #0
    4462:	d0e0      	beq.n	4426 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    4464:	614a      	str	r2, [r1, #20]
    4466:	e7de      	b.n	4426 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    4468:	60f1      	str	r1, [r6, #12]
    446a:	e7f8      	b.n	445e <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    446c:	60f4      	str	r4, [r6, #12]
    446e:	e7e0      	b.n	4432 <buffer_alloc_free+0xb6>
    if( old == NULL )
    4470:	2f00      	cmp	r7, #0
    4472:	d1e7      	bne.n	4444 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    4474:	68f3      	ldr	r3, [r6, #12]
    4476:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    4478:	b103      	cbz	r3, 447c <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    447a:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    447c:	60f4      	str	r4, [r6, #12]
    447e:	e7e1      	b.n	4444 <buffer_alloc_free+0xc8>
}
    4480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4484:	2000e054 	.word	0x2000e054
    4488:	2000c584 	.word	0x2000c584

0000448c <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    448c:	b538      	push	{r3, r4, r5, lr}
    448e:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4490:	2214      	movs	r2, #20
    4492:	2100      	movs	r1, #0
{
    4494:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4496:	4812      	ldr	r0, [pc, #72]	; (44e0 <mbedtls_memory_buffer_alloc_init+0x54>)
    4498:	f002 f9b6 	bl	6808 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    449c:	4911      	ldr	r1, [pc, #68]	; (44e4 <mbedtls_memory_buffer_alloc_init+0x58>)
    449e:	4812      	ldr	r0, [pc, #72]	; (44e8 <mbedtls_memory_buffer_alloc_init+0x5c>)
    44a0:	f000 f832 	bl	4508 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    44a4:	2d23      	cmp	r5, #35	; 0x23
    44a6:	d91a      	bls.n	44de <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    44a8:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    44ac:	bf1f      	itttt	ne
    44ae:	3d04      	subne	r5, #4
    44b0:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    44b2:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    44b6:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    44b8:	462a      	mov	r2, r5
    44ba:	2100      	movs	r1, #0
    44bc:	4620      	mov	r0, r4
    44be:	f002 f9a3 	bl	6808 <memset>

    heap.buf = buf;
    44c2:	4b07      	ldr	r3, [pc, #28]	; (44e0 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    44c4:	4a09      	ldr	r2, [pc, #36]	; (44ec <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    44c6:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    44ca:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    44cc:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    44ce:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    44d2:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    44d4:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    44d8:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    44da:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    44dc:	60dc      	str	r4, [r3, #12]
}
    44de:	bd38      	pop	{r3, r4, r5, pc}
    44e0:	2000e054 	.word	0x2000e054
    44e4:	0000437d 	.word	0x0000437d
    44e8:	00004265 	.word	0x00004265
    44ec:	ff00aa55 	.word	0xff00aa55

000044f0 <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    44f0:	4b01      	ldr	r3, [pc, #4]	; (44f8 <mbedtls_calloc+0x8>)
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	4718      	bx	r3
    44f6:	bf00      	nop
    44f8:	2000c580 	.word	0x2000c580

000044fc <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    44fc:	4b01      	ldr	r3, [pc, #4]	; (4504 <mbedtls_free+0x8>)
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	4718      	bx	r3
    4502:	bf00      	nop
    4504:	2000c588 	.word	0x2000c588

00004508 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    4508:	4b02      	ldr	r3, [pc, #8]	; (4514 <mbedtls_platform_set_calloc_free+0xc>)
    450a:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    450c:	4b02      	ldr	r3, [pc, #8]	; (4518 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    450e:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    4510:	6019      	str	r1, [r3, #0]
}
    4512:	4770      	bx	lr
    4514:	2000c580 	.word	0x2000c580
    4518:	2000c588 	.word	0x2000c588

0000451c <rsa_check_context.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    451e:	f100 0608 	add.w	r6, r0, #8
    4522:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4524:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4526:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4528:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    452a:	f003 f9ac 	bl	7886 <mbedtls_mpi_size>
    452e:	4287      	cmp	r7, r0
    4530:	d116      	bne.n	4560 <rsa_check_context.isra.0+0x44>
    4532:	6863      	ldr	r3, [r4, #4]
    4534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4538:	d812      	bhi.n	4560 <rsa_check_context.isra.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    453a:	2100      	movs	r1, #0
    453c:	4630      	mov	r0, r6
    453e:	f003 fb02 	bl	7b46 <mbedtls_mpi_cmp_int>
    4542:	2800      	cmp	r0, #0
    4544:	dd0c      	ble.n	4560 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    4546:	2100      	movs	r1, #0
    4548:	4630      	mov	r0, r6
    454a:	f003 f96f 	bl	782c <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    454e:	b138      	cbz	r0, 4560 <rsa_check_context.isra.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    4550:	b945      	cbnz	r5, 4564 <rsa_check_context.isra.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    4552:	2100      	movs	r1, #0
    4554:	f104 0014 	add.w	r0, r4, #20
    4558:	f003 faf5 	bl	7b46 <mbedtls_mpi_cmp_int>
    455c:	2800      	cmp	r0, #0
    455e:	dc1e      	bgt.n	459e <rsa_check_context.isra.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4560:	481b      	ldr	r0, [pc, #108]	; (45d0 <rsa_check_context.isra.0+0xb4>)
    4562:	e01e      	b.n	45a2 <rsa_check_context.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    4564:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    4568:	2100      	movs	r1, #0
    456a:	4630      	mov	r0, r6
    456c:	f003 faeb 	bl	7b46 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4570:	2800      	cmp	r0, #0
    4572:	ddf5      	ble.n	4560 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4574:	2100      	movs	r1, #0
    4576:	4630      	mov	r0, r6
    4578:	f003 f958 	bl	782c <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    457c:	2800      	cmp	r0, #0
    457e:	d0ef      	beq.n	4560 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4580:	f104 0638 	add.w	r6, r4, #56	; 0x38
    4584:	2100      	movs	r1, #0
    4586:	4630      	mov	r0, r6
    4588:	f003 fadd 	bl	7b46 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    458c:	2800      	cmp	r0, #0
    458e:	dde7      	ble.n	4560 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    4590:	2100      	movs	r1, #0
    4592:	4630      	mov	r0, r6
    4594:	f003 f94a 	bl	782c <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4598:	2800      	cmp	r0, #0
    459a:	d1da      	bne.n	4552 <rsa_check_context.isra.0+0x36>
    459c:	e7e0      	b.n	4560 <rsa_check_context.isra.0+0x44>
    if( is_priv &&
    459e:	b90d      	cbnz	r5, 45a4 <rsa_check_context.isra.0+0x88>
    }
#endif

    return( 0 );
    45a0:	2000      	movs	r0, #0
}
    45a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    45a4:	2100      	movs	r1, #0
    45a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    45aa:	f003 facc 	bl	7b46 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    45ae:	2800      	cmp	r0, #0
    45b0:	ddd6      	ble.n	4560 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    45b2:	2100      	movs	r1, #0
    45b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    45b8:	f003 fac5 	bl	7b46 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    45bc:	2800      	cmp	r0, #0
    45be:	ddcf      	ble.n	4560 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    45c0:	2100      	movs	r1, #0
    45c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    45c6:	f003 fabe 	bl	7b46 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    45ca:	2800      	cmp	r0, #0
    45cc:	dce8      	bgt.n	45a0 <rsa_check_context.isra.0+0x84>
    45ce:	e7c7      	b.n	4560 <rsa_check_context.isra.0+0x44>
    45d0:	ffffbf80 	.word	0xffffbf80

000045d4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    45d4:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    45d6:	2100      	movs	r1, #0
{
    45d8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    45da:	f7ff ff9f 	bl	451c <rsa_check_context.isra.0>
    45de:	4605      	mov	r5, r0
    45e0:	b9b8      	cbnz	r0, 4612 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    45e2:	f104 0608 	add.w	r6, r4, #8
    45e6:	4630      	mov	r0, r6
    45e8:	f003 f931 	bl	784e <mbedtls_mpi_bitlen>
    45ec:	287f      	cmp	r0, #127	; 0x7f
    45ee:	d910      	bls.n	4612 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    45f0:	3414      	adds	r4, #20
    45f2:	4629      	mov	r1, r5
    45f4:	4620      	mov	r0, r4
    45f6:	f003 f919 	bl	782c <mbedtls_mpi_get_bit>
    45fa:	b150      	cbz	r0, 4612 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    45fc:	4620      	mov	r0, r4
    45fe:	f003 f926 	bl	784e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4602:	2801      	cmp	r0, #1
    4604:	d905      	bls.n	4612 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    4606:	4631      	mov	r1, r6
    4608:	4620      	mov	r0, r4
    460a:	f003 fa59 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    460e:	2800      	cmp	r0, #0
    4610:	db00      	blt.n	4614 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    4612:	4d01      	ldr	r5, [pc, #4]	; (4618 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    4614:	4628      	mov	r0, r5
    4616:	bd70      	pop	{r4, r5, r6, pc}
    4618:	ffffbe00 	.word	0xffffbe00

0000461c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    461c:	b5f0      	push	{r4, r5, r6, r7, lr}
    461e:	460c      	mov	r4, r1
    4620:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4622:	2100      	movs	r1, #0
{
    4624:	4605      	mov	r5, r0
    4626:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    4628:	f7ff ff78 	bl	451c <rsa_check_context.isra.0>
    462c:	bb80      	cbnz	r0, 4690 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    462e:	a803      	add	r0, sp, #12
    4630:	f003 f829 	bl	7686 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    4634:	4621      	mov	r1, r4
    4636:	686a      	ldr	r2, [r5, #4]
    4638:	a803      	add	r0, sp, #12
    463a:	f003 f92a 	bl	7892 <mbedtls_mpi_read_binary>
    463e:	4604      	mov	r4, r0
    4640:	b9d0      	cbnz	r0, 4678 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    4642:	f105 0408 	add.w	r4, r5, #8
    4646:	4621      	mov	r1, r4
    4648:	a803      	add	r0, sp, #12
    464a:	f003 fa39 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
    464e:	2800      	cmp	r0, #0
    4650:	da1b      	bge.n	468a <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    4652:	f105 0368 	add.w	r3, r5, #104	; 0x68
    4656:	a903      	add	r1, sp, #12
    4658:	9300      	str	r3, [sp, #0]
    465a:	4608      	mov	r0, r1
    465c:	4623      	mov	r3, r4
    465e:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
    4662:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    4664:	f003 fd94 	bl	8190 <mbedtls_mpi_exp_mod>
    4668:	4604      	mov	r4, r0
    466a:	b928      	cbnz	r0, 4678 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    466c:	463a      	mov	r2, r7
    466e:	4631      	mov	r1, r6
    4670:	a803      	add	r0, sp, #12
    4672:	f003 f92f 	bl	78d4 <mbedtls_mpi_write_binary>
    4676:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    4678:	a803      	add	r0, sp, #12
    467a:	f003 f80a 	bl	7692 <mbedtls_mpi_free>

    if( ret != 0 )
    467e:	b10c      	cbz	r4, 4684 <mbedtls_rsa_public+0x68>
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    4680:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );

    return( 0 );
}
    4684:	4620      	mov	r0, r4
    4686:	b007      	add	sp, #28
    4688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    468a:	f06f 0403 	mvn.w	r4, #3
    468e:	e7f3      	b.n	4678 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4690:	4c00      	ldr	r4, [pc, #0]	; (4694 <mbedtls_rsa_public+0x78>)
    4692:	e7f7      	b.n	4684 <mbedtls_rsa_public+0x68>
    4694:	ffffbf80 	.word	0xffffbf80

00004698 <mbedtls_sha256_starts>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
#else
    SHA256_VALIDATE_RET( is224 == 0 );
#endif

    ctx->total[0] = 0;
    4698:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    469a:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    469e:	b9c1      	cbnz	r1, 46d2 <mbedtls_sha256_starts+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    46a0:	4a19      	ldr	r2, [pc, #100]	; (4708 <mbedtls_sha256_starts+0x70>)
    46a2:	4b1a      	ldr	r3, [pc, #104]	; (470c <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    46a4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 4734 <mbedtls_sha256_starts+0x9c>
        ctx->state[1] = 0xBB67AE85;
    46a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    46ac:	4b18      	ldr	r3, [pc, #96]	; (4710 <mbedtls_sha256_starts+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    46ae:	4a19      	ldr	r2, [pc, #100]	; (4714 <mbedtls_sha256_starts+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    46b0:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    46b4:	4b18      	ldr	r3, [pc, #96]	; (4718 <mbedtls_sha256_starts+0x80>)
    46b6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    46ba:	4b18      	ldr	r3, [pc, #96]	; (471c <mbedtls_sha256_starts+0x84>)
    46bc:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    46be:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    46c2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    46c6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    46ca:	6243      	str	r3, [r0, #36]	; 0x24
#endif
    }

    ctx->is224 = is224;
    46cc:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    46ce:	2000      	movs	r0, #0
    46d0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    46d2:	4b13      	ldr	r3, [pc, #76]	; (4720 <mbedtls_sha256_starts+0x88>)
    46d4:	4a13      	ldr	r2, [pc, #76]	; (4724 <mbedtls_sha256_starts+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    46d6:	f8df c060 	ldr.w	ip, [pc, #96]	; 4738 <mbedtls_sha256_starts+0xa0>
        ctx->state[1] = 0x367CD507;
    46da:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    46de:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    46e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    46e6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    46ea:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    46ec:	4b0e      	ldr	r3, [pc, #56]	; (4728 <mbedtls_sha256_starts+0x90>)
    46ee:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    46f2:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    46f6:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    46fa:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    46fe:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4700:	4b0a      	ldr	r3, [pc, #40]	; (472c <mbedtls_sha256_starts+0x94>)
    4702:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4704:	4b0a      	ldr	r3, [pc, #40]	; (4730 <mbedtls_sha256_starts+0x98>)
    4706:	e7e0      	b.n	46ca <mbedtls_sha256_starts+0x32>
    4708:	6a09e667 	.word	0x6a09e667
    470c:	bb67ae85 	.word	0xbb67ae85
    4710:	a54ff53a 	.word	0xa54ff53a
    4714:	510e527f 	.word	0x510e527f
    4718:	9b05688c 	.word	0x9b05688c
    471c:	1f83d9ab 	.word	0x1f83d9ab
    4720:	367cd507 	.word	0x367cd507
    4724:	c1059ed8 	.word	0xc1059ed8
    4728:	ffc00b31 	.word	0xffc00b31
    472c:	64f98fa7 	.word	0x64f98fa7
    4730:	befa4fa4 	.word	0xbefa4fa4
    4734:	3c6ef372 	.word	0x3c6ef372
    4738:	f70e5939 	.word	0xf70e5939

0000473c <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4740:	b0d1      	sub	sp, #324	; 0x144
    4742:	ab48      	add	r3, sp, #288	; 0x120
    4744:	9301      	str	r3, [sp, #4]
    4746:	f100 0608 	add.w	r6, r0, #8
    474a:	f100 0328 	add.w	r3, r0, #40	; 0x28
    474e:	9304      	str	r3, [sp, #16]
    4750:	4633      	mov	r3, r6
    4752:	9a01      	ldr	r2, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    4754:	f853 0b04 	ldr.w	r0, [r3], #4
    4758:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    475c:	9804      	ldr	r0, [sp, #16]
    475e:	4283      	cmp	r3, r0
    4760:	d1f8      	bne.n	4754 <mbedtls_internal_sha256_process+0x18>
    4762:	e9dd 4748 	ldrd	r4, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    4766:	f04f 0900 	mov.w	r9, #0
    476a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    476c:	ad4c      	add	r5, sp, #304	; 0x130
    476e:	9302      	str	r3, [sp, #8]
    4770:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    4774:	9303      	str	r3, [sp, #12]
    4776:	4b47      	ldr	r3, [pc, #284]	; (4894 <mbedtls_internal_sha256_process+0x158>)
    4778:	aa06      	add	r2, sp, #24
    477a:	9305      	str	r3, [sp, #20]
    477c:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    4780:	f1b9 0f0f 	cmp.w	r9, #15
    4784:	d86e      	bhi.n	4864 <mbedtls_internal_sha256_process+0x128>
            GET_UINT32_BE( local.W[i], data, 4 * i );
    4786:	784b      	ldrb	r3, [r1, #1]
    4788:	f891 b000 	ldrb.w	fp, [r1]
    478c:	041b      	lsls	r3, r3, #16
    478e:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
    4792:	f891 b003 	ldrb.w	fp, [r1, #3]
    4796:	f891 a002 	ldrb.w	sl, [r1, #2]
    479a:	ea43 030b 	orr.w	r3, r3, fp
    479e:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    47a2:	ea4f 2bf5 	mov.w	fp, r5, ror #11
    47a6:	ea8b 1bb5 	eor.w	fp, fp, r5, ror #6
    47aa:	ea8b 6075 	eor.w	r0, fp, r5, ror #25
    47ae:	ea8c 0b08 	eor.w	fp, ip, r8
    47b2:	ea0b 0b05 	and.w	fp, fp, r5
    47b6:	ea8b 0b0c 	eor.w	fp, fp, ip
    47ba:	4483      	add	fp, r0
    47bc:	9805      	ldr	r0, [sp, #20]
    47be:	6093      	str	r3, [r2, #8]
    47c0:	f850 ab04 	ldr.w	sl, [r0], #4
    for( i = 0; i < 64; i++ )
    47c4:	f109 0901 	add.w	r9, r9, #1
    47c8:	44d3      	add	fp, sl
    47ca:	9005      	str	r0, [sp, #20]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    47cc:	9802      	ldr	r0, [sp, #8]
    47ce:	445b      	add	r3, fp
    47d0:	4403      	add	r3, r0
    47d2:	ea4f 3a74 	mov.w	sl, r4, ror #13
    47d6:	ea44 0007 	orr.w	r0, r4, r7
    47da:	ea04 0b07 	and.w	fp, r4, r7
    47de:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    47e2:	ea00 000e 	and.w	r0, r0, lr
    47e6:	9302      	str	r3, [sp, #8]
    47e8:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
    47ec:	ea40 000b 	orr.w	r0, r0, fp
    47f0:	eb00 0b0a 	add.w	fp, r0, sl
    47f4:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
    47f8:	4403      	add	r3, r0
    47fa:	469a      	mov	sl, r3
    47fc:	4603      	mov	r3, r0
    for( i = 0; i < 64; i++ )
    47fe:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
    4802:	e9cd ce02 	strd	ip, lr, [sp, #8]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4806:	445b      	add	r3, fp
    for( i = 0; i < 64; i++ )
    4808:	f102 0204 	add.w	r2, r2, #4
    480c:	f101 0104 	add.w	r1, r1, #4
    4810:	d121      	bne.n	4856 <mbedtls_internal_sha256_process+0x11a>
    4812:	e9cd 584d 	strd	r5, r8, [sp, #308]	; 0x134
    4816:	e9cd 3448 	strd	r3, r4, [sp, #288]	; 0x120
    481a:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
    481e:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
    4822:	974a      	str	r7, [sp, #296]	; 0x128
    4824:	f8cd b01c 	str.w	fp, [sp, #28]
    4828:	f8cd e12c 	str.w	lr, [sp, #300]	; 0x12c
    482c:	9306      	str	r3, [sp, #24]
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    482e:	9901      	ldr	r1, [sp, #4]
    4830:	6833      	ldr	r3, [r6, #0]
    4832:	f851 2b04 	ldr.w	r2, [r1], #4
    4836:	4413      	add	r3, r2
    4838:	f846 3b04 	str.w	r3, [r6], #4
    for( i = 0; i < 8; i++ )
    483c:	9b04      	ldr	r3, [sp, #16]
        ctx->state[i] += local.A[i];
    483e:	9101      	str	r1, [sp, #4]
    for( i = 0; i < 8; i++ )
    4840:	42b3      	cmp	r3, r6
    4842:	d1f4      	bne.n	482e <mbedtls_internal_sha256_process+0xf2>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    4844:	a806      	add	r0, sp, #24
    4846:	f44f 7194 	mov.w	r1, #296	; 0x128
    484a:	f000 ff65 	bl	5718 <mbedtls_platform_zeroize>

    return( 0 );
}
    484e:	2000      	movs	r0, #0
    4850:	b051      	add	sp, #324	; 0x144
    4852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4856:	46be      	mov	lr, r7
    4858:	46c4      	mov	ip, r8
    485a:	4627      	mov	r7, r4
    485c:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    485e:	461c      	mov	r4, r3
    4860:	4655      	mov	r5, sl
    4862:	e78d      	b.n	4780 <mbedtls_internal_sha256_process+0x44>
            R( i );
    4864:	6813      	ldr	r3, [r2, #0]
    4866:	f852 bc34 	ldr.w	fp, [r2, #-52]
    486a:	ea4f 4af3 	mov.w	sl, r3, ror #19
    486e:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    4872:	f852 0c38 	ldr.w	r0, [r2, #-56]
    4876:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    487a:	f852 3c14 	ldr.w	r3, [r2, #-20]
    487e:	4403      	add	r3, r0
    4880:	ea4f 40bb 	mov.w	r0, fp, ror #18
    4884:	ea80 10fb 	eor.w	r0, r0, fp, ror #7
    4888:	449a      	add	sl, r3
    488a:	ea80 03db 	eor.w	r3, r0, fp, lsr #3
    488e:	4453      	add	r3, sl
    4890:	e787      	b.n	47a2 <mbedtls_internal_sha256_process+0x66>
    4892:	bf00      	nop
    4894:	00008e8c 	.word	0x00008e8c

00004898 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4898:	4a06      	ldr	r2, [pc, #24]	; (48b4 <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    489a:	4b07      	ldr	r3, [pc, #28]	; (48b8 <nrf91_errata_14+0x20>)
    489c:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    489e:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    48a0:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    48a4:	2b09      	cmp	r3, #9
    48a6:	d103      	bne.n	48b0 <nrf91_errata_14+0x18>
            {
                switch(var2)
    48a8:	1e43      	subs	r3, r0, #1
    48aa:	4258      	negs	r0, r3
    48ac:	4158      	adcs	r0, r3
    48ae:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    48b0:	2000      	movs	r0, #0
    #endif
}
    48b2:	4770      	bx	lr
    48b4:	00ff0134 	.word	0x00ff0134
    48b8:	00ff0130 	.word	0x00ff0130

000048bc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    48bc:	b508      	push	{r3, lr}
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    48be:	4a55      	ldr	r2, [pc, #340]	; (4a14 <SystemInit+0x158>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    48c0:	4b55      	ldr	r3, [pc, #340]	; (4a18 <SystemInit+0x15c>)
    48c2:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    48c4:	6812      	ldr	r2, [r2, #0]
    48c6:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    48ca:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    48cc:	bf01      	itttt	eq
    48ce:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    48d2:	2200      	moveq	r2, #0
    48d4:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    48d8:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    48dc:	f7ff ffdc 	bl	4898 <nrf91_errata_14>
    48e0:	b130      	cbz	r0, 48f0 <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    48e2:	2301      	movs	r3, #1
    48e4:	4a4d      	ldr	r2, [pc, #308]	; (4a1c <SystemInit+0x160>)
    48e6:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    48e8:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    48ec:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    48f0:	4b49      	ldr	r3, [pc, #292]	; (4a18 <SystemInit+0x15c>)
    48f2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    48f4:	3304      	adds	r3, #4
    48f6:	681b      	ldr	r3, [r3, #0]
    48f8:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    48fc:	2a09      	cmp	r2, #9
    48fe:	d105      	bne.n	490c <SystemInit+0x50>
            {
                switch(var2)
    4900:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4902:	bf1e      	ittt	ne
    4904:	2201      	movne	r2, #1
    4906:	4b46      	ldrne	r3, [pc, #280]	; (4a20 <SystemInit+0x164>)
    4908:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    490c:	f7ff ffc4 	bl	4898 <nrf91_errata_14>
    4910:	b110      	cbz	r0, 4918 <SystemInit+0x5c>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4912:	220e      	movs	r2, #14
    4914:	4b43      	ldr	r3, [pc, #268]	; (4a24 <SystemInit+0x168>)
    4916:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4918:	4b3f      	ldr	r3, [pc, #252]	; (4a18 <SystemInit+0x15c>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    491a:	4a3e      	ldr	r2, [pc, #248]	; (4a14 <SystemInit+0x158>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    491c:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    491e:	6812      	ldr	r2, [r2, #0]
    4920:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    4924:	2b09      	cmp	r3, #9
    4926:	d104      	bne.n	4932 <SystemInit+0x76>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4928:	2200      	movs	r2, #0
    492a:	4b3f      	ldr	r3, [pc, #252]	; (4a28 <SystemInit+0x16c>)
    492c:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    492e:	2201      	movs	r2, #1
    4930:	605a      	str	r2, [r3, #4]
{
    4932:	2200      	movs	r2, #0
    4934:	00d3      	lsls	r3, r2, #3
    4936:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    493a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    493e:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4942:	3101      	adds	r1, #1
    4944:	d008      	beq.n	4958 <SystemInit+0x9c>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4946:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    494a:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    494c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4950:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4954:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4956:	d1ed      	bne.n	4934 <SystemInit+0x78>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    4958:	4b34      	ldr	r3, [pc, #208]	; (4a2c <SystemInit+0x170>)
    495a:	69db      	ldr	r3, [r3, #28]
    495c:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    4960:	07d9      	lsls	r1, r3, #31
    4962:	d545      	bpl.n	49f0 <SystemInit+0x134>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4964:	4b32      	ldr	r3, [pc, #200]	; (4a30 <SystemInit+0x174>)
    4966:	4619      	mov	r1, r3
    4968:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    496c:	2a01      	cmp	r2, #1
    496e:	d1fb      	bne.n	4968 <SystemInit+0xac>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    4970:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4974:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    4978:	2b01      	cmp	r3, #1
    497a:	d1fb      	bne.n	4974 <SystemInit+0xb8>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    497c:	4b2b      	ldr	r3, [pc, #172]	; (4a2c <SystemInit+0x170>)
    497e:	69da      	ldr	r2, [r3, #28]
    4980:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    4984:	07d2      	lsls	r2, r2, #31
    4986:	d50a      	bpl.n	499e <SystemInit+0xe2>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    4988:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    498a:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    498e:	61da      	str	r2, [r3, #28]
    4990:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4994:	4a26      	ldr	r2, [pc, #152]	; (4a30 <SystemInit+0x174>)
    4996:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    499a:	2b01      	cmp	r3, #1
    499c:	d1fb      	bne.n	4996 <SystemInit+0xda>
        uint32_t val = *word;
    499e:	4b25      	ldr	r3, [pc, #148]	; (4a34 <SystemInit+0x178>)
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    49a6:	3301      	adds	r3, #1
    49a8:	d10d      	bne.n	49c6 <SystemInit+0x10a>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    49aa:	4a20      	ldr	r2, [pc, #128]	; (4a2c <SystemInit+0x170>)
    49ac:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    49ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    49b2:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    49b6:	6213      	str	r3, [r2, #32]
    49b8:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    49bc:	4a1c      	ldr	r2, [pc, #112]	; (4a30 <SystemInit+0x174>)
    49be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    49c2:	2b01      	cmp	r3, #1
    49c4:	d1fb      	bne.n	49be <SystemInit+0x102>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    49c6:	2200      	movs	r2, #0
    49c8:	4b19      	ldr	r3, [pc, #100]	; (4a30 <SystemInit+0x174>)
    49ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    49ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    49d2:	2a01      	cmp	r2, #1
    49d4:	d1fb      	bne.n	49ce <SystemInit+0x112>
    49d6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    49da:	4917      	ldr	r1, [pc, #92]	; (4a38 <SystemInit+0x17c>)
    49dc:	4b17      	ldr	r3, [pc, #92]	; (4a3c <SystemInit+0x180>)
    49de:	68ca      	ldr	r2, [r1, #12]
    49e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    49e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    49e6:	60cb      	str	r3, [r1, #12]
    49e8:	f3bf 8f4f 	dsb	sy
    __NOP();
    49ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    49ee:	e7fd      	b.n	49ec <SystemInit+0x130>
        uint32_t val = *word;
    49f0:	4b10      	ldr	r3, [pc, #64]	; (4a34 <SystemInit+0x178>)
    49f2:	681b      	ldr	r3, [r3, #0]
    49f4:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    49f8:	3301      	adds	r3, #1
    49fa:	d0b3      	beq.n	4964 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    49fc:	4a0e      	ldr	r2, [pc, #56]	; (4a38 <SystemInit+0x17c>)
    49fe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4a02:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    4a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    4a0a:	4b0d      	ldr	r3, [pc, #52]	; (4a40 <SystemInit+0x184>)
    4a0c:	4a0d      	ldr	r2, [pc, #52]	; (4a44 <SystemInit+0x188>)
    4a0e:	601a      	str	r2, [r3, #0]
}
    4a10:	bd08      	pop	{r3, pc}
    4a12:	bf00      	nop
    4a14:	00ff0134 	.word	0x00ff0134
    4a18:	00ff0130 	.word	0x00ff0130
    4a1c:	50004a38 	.word	0x50004a38
    4a20:	50004000 	.word	0x50004000
    4a24:	5003aee4 	.word	0x5003aee4
    4a28:	5000470c 	.word	0x5000470c
    4a2c:	00ff8000 	.word	0x00ff8000
    4a30:	50039000 	.word	0x50039000
    4a34:	00ff8020 	.word	0x00ff8020
    4a38:	e000ed00 	.word	0xe000ed00
    4a3c:	05fa0004 	.word	0x05fa0004
    4a40:	2000c58c 	.word	0x2000c58c
    4a44:	03d09000 	.word	0x03d09000

00004a48 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4a48:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4a4a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4a4c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4a4e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    4a52:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4a54:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4a58:	d010      	beq.n	4a7c <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4a5a:	fa05 f204 	lsl.w	r2, r5, r4
    4a5e:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4a62:	e8d0 6fef 	ldaex	r6, [r0]
    4a66:	429e      	cmp	r6, r3
    4a68:	d104      	bne.n	4a74 <nrfx_flag32_alloc+0x2c>
    4a6a:	e8c0 2fec 	stlex	ip, r2, [r0]
    4a6e:	f1bc 0f00 	cmp.w	ip, #0
    4a72:	d1f6      	bne.n	4a62 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4a74:	d1ea      	bne.n	4a4c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4a76:	4802      	ldr	r0, [pc, #8]	; (4a80 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    4a78:	700c      	strb	r4, [r1, #0]
}
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4a7c:	4801      	ldr	r0, [pc, #4]	; (4a84 <nrfx_flag32_alloc+0x3c>)
    4a7e:	e7fc      	b.n	4a7a <nrfx_flag32_alloc+0x32>
    4a80:	0bad0000 	.word	0x0bad0000
    4a84:	0bad0002 	.word	0x0bad0002

00004a88 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4a88:	6803      	ldr	r3, [r0, #0]
{
    4a8a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4a8c:	40cb      	lsrs	r3, r1
    4a8e:	07db      	lsls	r3, r3, #31
    4a90:	d411      	bmi.n	4ab6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4a92:	2301      	movs	r3, #1
    4a94:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4a98:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4a9a:	ea41 0203 	orr.w	r2, r1, r3
    4a9e:	e8d0 4fef 	ldaex	r4, [r0]
    4aa2:	429c      	cmp	r4, r3
    4aa4:	d104      	bne.n	4ab0 <nrfx_flag32_free+0x28>
    4aa6:	e8c0 2fec 	stlex	ip, r2, [r0]
    4aaa:	f1bc 0f00 	cmp.w	ip, #0
    4aae:	d1f6      	bne.n	4a9e <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4ab0:	d1f2      	bne.n	4a98 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4ab2:	4802      	ldr	r0, [pc, #8]	; (4abc <nrfx_flag32_free+0x34>)
}
    4ab4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4ab6:	4802      	ldr	r0, [pc, #8]	; (4ac0 <nrfx_flag32_free+0x38>)
    4ab8:	e7fc      	b.n	4ab4 <nrfx_flag32_free+0x2c>
    4aba:	bf00      	nop
    4abc:	0bad0000 	.word	0x0bad0000
    4ac0:	0bad0004 	.word	0x0bad0004

00004ac4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4ac4:	4b04      	ldr	r3, [pc, #16]	; (4ad8 <nrfx_clock_init+0x14>)
    4ac6:	791a      	ldrb	r2, [r3, #4]
    4ac8:	b922      	cbnz	r2, 4ad4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4aca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4acc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4ace:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4ad0:	4802      	ldr	r0, [pc, #8]	; (4adc <nrfx_clock_init+0x18>)
    4ad2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4ad4:	4802      	ldr	r0, [pc, #8]	; (4ae0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4ad6:	4770      	bx	lr
    4ad8:	2000e068 	.word	0x2000e068
    4adc:	0bad0000 	.word	0x0bad0000
    4ae0:	0bad000c 	.word	0x0bad000c

00004ae4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4ae4:	b110      	cbz	r0, 4aec <nrfx_clock_start+0x8>
    4ae6:	2801      	cmp	r0, #1
    4ae8:	d020      	beq.n	4b2c <nrfx_clock_start+0x48>
    4aea:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4aec:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4af0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4af4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4af8:	03c9      	lsls	r1, r1, #15
    4afa:	d511      	bpl.n	4b20 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4afc:	f003 0303 	and.w	r3, r3, #3
    4b00:	2b02      	cmp	r3, #2
    4b02:	d10d      	bne.n	4b20 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b04:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b08:	2200      	movs	r2, #0
    4b0a:	4b0d      	ldr	r3, [pc, #52]	; (4b40 <nrfx_clock_start+0x5c>)
    4b0c:	601a      	str	r2, [r3, #0]
    4b0e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4b10:	2202      	movs	r2, #2
    4b12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b1a:	2201      	movs	r2, #1
    4b1c:	609a      	str	r2, [r3, #8]
}
    4b1e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b24:	2201      	movs	r2, #1
    4b26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4b2a:	e7ed      	b.n	4b08 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b2c:	2200      	movs	r2, #0
    4b2e:	4b05      	ldr	r3, [pc, #20]	; (4b44 <nrfx_clock_start+0x60>)
    4b30:	601a      	str	r2, [r3, #0]
    4b32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4b34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b38:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b3c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4b3e:	4770      	bx	lr
    4b40:	50005104 	.word	0x50005104
    4b44:	50005100 	.word	0x50005100

00004b48 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4b48:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4b4a:	b110      	cbz	r0, 4b52 <nrfx_clock_stop+0xa>
    4b4c:	2801      	cmp	r0, #1
    4b4e:	d018      	beq.n	4b82 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4b50:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    4b52:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b56:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b58:	2101      	movs	r1, #1
    4b5a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b5e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    4b60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b64:	4a15      	ldr	r2, [pc, #84]	; (4bbc <nrfx_clock_stop+0x74>)
    4b66:	6010      	str	r0, [r2, #0]
    4b68:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b6a:	4a15      	ldr	r2, [pc, #84]	; (4bc0 <nrfx_clock_stop+0x78>)
    4b6c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b6e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    4b72:	03db      	lsls	r3, r3, #15
    4b74:	d5ec      	bpl.n	4b50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4b76:	2001      	movs	r0, #1
    4b78:	f003 fe8b 	bl	8892 <nrfx_busy_wait>
    4b7c:	3d01      	subs	r5, #1
    4b7e:	d1f6      	bne.n	4b6e <nrfx_clock_stop+0x26>
    4b80:	e7e6      	b.n	4b50 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    4b82:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b86:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b88:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b8c:	4b0d      	ldr	r3, [pc, #52]	; (4bc4 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    4b8e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b92:	601a      	str	r2, [r3, #0]
    4b94:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b96:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <nrfx_clock_stop+0x80>)
    4b98:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b9a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b9e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4ba2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4ba6:	03d2      	lsls	r2, r2, #15
    4ba8:	d5d2      	bpl.n	4b50 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4baa:	2b00      	cmp	r3, #0
    4bac:	d0d0      	beq.n	4b50 <nrfx_clock_stop+0x8>
    4bae:	2001      	movs	r0, #1
    4bb0:	f003 fe6f 	bl	8892 <nrfx_busy_wait>
    4bb4:	3d01      	subs	r5, #1
    4bb6:	d1f0      	bne.n	4b9a <nrfx_clock_stop+0x52>
    4bb8:	e7ca      	b.n	4b50 <nrfx_clock_stop+0x8>
    4bba:	bf00      	nop
    4bbc:	50005104 	.word	0x50005104
    4bc0:	5000500c 	.word	0x5000500c
    4bc4:	50005100 	.word	0x50005100
    4bc8:	50005004 	.word	0x50005004

00004bcc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4bcc:	4b16      	ldr	r3, [pc, #88]	; (4c28 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4bce:	b510      	push	{r4, lr}
    4bd0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4bd2:	b152      	cbz	r2, 4bea <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bd4:	2000      	movs	r0, #0
    4bd6:	6018      	str	r0, [r3, #0]
    4bd8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4bda:	2201      	movs	r2, #1
    4bdc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4be0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4be4:	4b11      	ldr	r3, [pc, #68]	; (4c2c <nrfx_power_clock_irq_handler+0x60>)
    4be6:	681b      	ldr	r3, [r3, #0]
    4be8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4bea:	4b11      	ldr	r3, [pc, #68]	; (4c30 <nrfx_power_clock_irq_handler+0x64>)
    4bec:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4bee:	b18a      	cbz	r2, 4c14 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bf0:	2200      	movs	r2, #0
    4bf2:	601a      	str	r2, [r3, #0]
    4bf4:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4bf6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bfa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4bfe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4c02:	f002 0203 	and.w	r2, r2, #3
    4c06:	2a01      	cmp	r2, #1
    4c08:	f04f 0102 	mov.w	r1, #2
    4c0c:	d103      	bne.n	4c16 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c0e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c12:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4c14:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4c16:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4c1a:	4b04      	ldr	r3, [pc, #16]	; (4c2c <nrfx_power_clock_irq_handler+0x60>)
    4c1c:	2001      	movs	r0, #1
}
    4c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4c22:	681b      	ldr	r3, [r3, #0]
    4c24:	4718      	bx	r3
    4c26:	bf00      	nop
    4c28:	50005100 	.word	0x50005100
    4c2c:	2000e068 	.word	0x2000e068
    4c30:	50005104 	.word	0x50005104

00004c34 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4c34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4c36:	4801      	ldr	r0, [pc, #4]	; (4c3c <nrfx_dppi_channel_alloc+0x8>)
    4c38:	f7ff bf06 	b.w	4a48 <nrfx_flag32_alloc>
    4c3c:	2000c590 	.word	0x2000c590

00004c40 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4c40:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c42:	4c0d      	ldr	r4, [pc, #52]	; (4c78 <call_handler+0x38>)
    4c44:	f100 0308 	add.w	r3, r0, #8
    4c48:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4c4c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c4e:	05da      	lsls	r2, r3, #23
{
    4c50:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c52:	d507      	bpl.n	4c64 <call_handler+0x24>
    4c54:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4c58:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4c5c:	6852      	ldr	r2, [r2, #4]
    4c5e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4c62:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4c64:	68a3      	ldr	r3, [r4, #8]
    4c66:	b12b      	cbz	r3, 4c74 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4c68:	4631      	mov	r1, r6
    4c6a:	4628      	mov	r0, r5
    4c6c:	68e2      	ldr	r2, [r4, #12]
    }
}
    4c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4c72:	4718      	bx	r3
}
    4c74:	bd70      	pop	{r4, r5, r6, pc}
    4c76:	bf00      	nop
    4c78:	2000c594 	.word	0x2000c594

00004c7c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c7c:	4b12      	ldr	r3, [pc, #72]	; (4cc8 <release_handler+0x4c>)
    4c7e:	3008      	adds	r0, #8
    4c80:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
    4c84:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c86:	05d1      	lsls	r1, r2, #23
    4c88:	d51b      	bpl.n	4cc2 <release_handler+0x46>
    4c8a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4c8e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    4c92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4c96:	2000      	movs	r0, #0
    4c98:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4c9c:	f834 2b02 	ldrh.w	r2, [r4], #2
    4ca0:	f412 7f80 	tst.w	r2, #256	; 0x100
    4ca4:	d003      	beq.n	4cae <release_handler+0x32>
    4ca6:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4caa:	4291      	cmp	r1, r2
    4cac:	d009      	beq.n	4cc2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4cae:	3001      	adds	r0, #1
    4cb0:	2820      	cmp	r0, #32
    4cb2:	d1f3      	bne.n	4c9c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4cb4:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4cb6:	4805      	ldr	r0, [pc, #20]	; (4ccc <release_handler+0x50>)
}
    4cb8:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    4cba:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4cbe:	f7ff bee3 	b.w	4a88 <nrfx_flag32_free>
}
    4cc2:	bc10      	pop	{r4}
    4cc4:	4770      	bx	lr
    4cc6:	bf00      	nop
    4cc8:	2000c594 	.word	0x2000c594
    4ccc:	2000c5e8 	.word	0x2000c5e8

00004cd0 <pin_handler_trigger_uninit>:
{
    4cd0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4cd2:	4c0c      	ldr	r4, [pc, #48]	; (4d04 <pin_handler_trigger_uninit+0x34>)
    4cd4:	f100 0508 	add.w	r5, r0, #8
    4cd8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    4cdc:	069a      	lsls	r2, r3, #26
    4cde:	d50a      	bpl.n	4cf6 <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4ce0:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4ce2:	0b5b      	lsrs	r3, r3, #13
    4ce4:	009b      	lsls	r3, r3, #2
    4ce6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4cea:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4cee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4cf2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    4cf6:	f7ff ffc1 	bl	4c7c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4cfa:	2300      	movs	r3, #0
    4cfc:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4d00:	bd38      	pop	{r3, r4, r5, pc}
    4d02:	bf00      	nop
    4d04:	2000c594 	.word	0x2000c594

00004d08 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4d08:	f000 021f 	and.w	r2, r0, #31
    4d0c:	4805      	ldr	r0, [pc, #20]	; (4d24 <nrf_gpio_cfg_sense_set+0x1c>)
    4d0e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d12:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    4d16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4d1e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    4d22:	4770      	bx	lr
    4d24:	50842500 	.word	0x50842500

00004d28 <nrfx_gpiote_input_configure>:
{
    4d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d2a:	4604      	mov	r4, r0
    if (p_input_config)
    4d2c:	b1f9      	cbz	r1, 4d6e <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d2e:	4f4c      	ldr	r7, [pc, #304]	; (4e60 <nrfx_gpiote_input_configure+0x138>)
    4d30:	f100 0c08 	add.w	ip, r0, #8
    4d34:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
    4d38:	f000 0522 	and.w	r5, r0, #34	; 0x22
    4d3c:	2d22      	cmp	r5, #34	; 0x22
    4d3e:	d102      	bne.n	4d46 <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
    4d40:	4848      	ldr	r0, [pc, #288]	; (4e64 <nrfx_gpiote_input_configure+0x13c>)
}
    4d42:	b003      	add	sp, #12
    4d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d46:	4d48      	ldr	r5, [pc, #288]	; (4e68 <nrfx_gpiote_input_configure+0x140>)
    *p_pin = pin_number & 0x1F;
    4d48:	f004 061f 	and.w	r6, r4, #31
    4d4c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d50:	f8d6 5200 	ldr.w	r5, [r6, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d54:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4d56:	f025 050f 	bic.w	r5, r5, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4d5a:	f020 0002 	bic.w	r0, r0, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d5e:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4d62:	f040 0001 	orr.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf;
    4d66:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    4d6a:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    if (p_trigger_config)
    4d6e:	b192      	cbz	r2, 4d96 <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d70:	483b      	ldr	r0, [pc, #236]	; (4e60 <nrfx_gpiote_input_configure+0x138>)
    4d72:	f104 0608 	add.w	r6, r4, #8
    4d76:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4d7a:	7815      	ldrb	r5, [r2, #0]
        if (pin_is_output(pin))
    4d7c:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4d7e:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    4d80:	d50c      	bpl.n	4d9c <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
    4d82:	2a00      	cmp	r2, #0
    4d84:	d1dc      	bne.n	4d40 <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4d86:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    4d8a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4d8e:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
    4d92:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (p_handler_config)
    4d96:	bbd3      	cbnz	r3, 4e0e <nrfx_gpiote_input_configure+0xe6>
    return NRFX_SUCCESS;
    4d98:	4834      	ldr	r0, [pc, #208]	; (4e6c <nrfx_gpiote_input_configure+0x144>)
    4d9a:	e7d2      	b.n	4d42 <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4d9c:	f021 0120 	bic.w	r1, r1, #32
    4da0:	04c9      	lsls	r1, r1, #19
    4da2:	0cc9      	lsrs	r1, r1, #19
    4da4:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    4da8:	2a00      	cmp	r2, #0
    4daa:	d0ec      	beq.n	4d86 <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
    4dac:	2d03      	cmp	r5, #3
    4dae:	d8c7      	bhi.n	4d40 <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4db0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4db4:	4662      	mov	r2, ip
    4db6:	0092      	lsls	r2, r2, #2
    4db8:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4dbc:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4dc0:	b925      	cbnz	r5, 4dcc <nrfx_gpiote_input_configure+0xa4>
    p_reg->CONFIG[idx] = 0;
    4dc2:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4dc6:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
#endif
}
    4dca:	e7dc      	b.n	4d86 <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4dcc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dd0:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4dd4:	f027 0703 	bic.w	r7, r7, #3
    4dd8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4ddc:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4de0:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4de4:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    4de8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    4dec:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4df0:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4df4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4df8:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    4dfc:	ea47 070e 	orr.w	r7, r7, lr
    4e00:	f041 0120 	orr.w	r1, r1, #32
    4e04:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    4e08:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    4e0c:	e7bb      	b.n	4d86 <nrfx_gpiote_input_configure+0x5e>
    release_handler(pin);
    4e0e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4e10:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
    4e14:	f7ff ff32 	bl	4c7c <release_handler>
    if (!handler)
    4e18:	2e00      	cmp	r6, #0
    4e1a:	d0bd      	beq.n	4d98 <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4e1c:	4d10      	ldr	r5, [pc, #64]	; (4e60 <nrfx_gpiote_input_configure+0x138>)
    4e1e:	682b      	ldr	r3, [r5, #0]
    4e20:	429e      	cmp	r6, r3
    4e22:	d104      	bne.n	4e2e <nrfx_gpiote_input_configure+0x106>
    4e24:	686b      	ldr	r3, [r5, #4]
    4e26:	429f      	cmp	r7, r3
    4e28:	d101      	bne.n	4e2e <nrfx_gpiote_input_configure+0x106>
    4e2a:	2200      	movs	r2, #0
    4e2c:	e009      	b.n	4e42 <nrfx_gpiote_input_configure+0x11a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4e2e:	4810      	ldr	r0, [pc, #64]	; (4e70 <nrfx_gpiote_input_configure+0x148>)
    4e30:	f10d 0107 	add.w	r1, sp, #7
    4e34:	f7ff fe08 	bl	4a48 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4e38:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <nrfx_gpiote_input_configure+0x144>)
    4e3a:	4298      	cmp	r0, r3
    4e3c:	d181      	bne.n	4d42 <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
    4e3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4e42:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4e46:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4e48:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4e4a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4e4e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4e52:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4e5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4e5e:	e79b      	b.n	4d98 <nrfx_gpiote_input_configure+0x70>
    4e60:	2000c594 	.word	0x2000c594
    4e64:	0bad0004 	.word	0x0bad0004
    4e68:	50842500 	.word	0x50842500
    4e6c:	0bad0000 	.word	0x0bad0000
    4e70:	2000c5e8 	.word	0x2000c5e8

00004e74 <nrfx_gpiote_output_configure>:
{
    4e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
    4e78:	2900      	cmp	r1, #0
    4e7a:	d044      	beq.n	4f06 <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e7c:	4e43      	ldr	r6, [pc, #268]	; (4f8c <nrfx_gpiote_output_configure+0x118>)
    4e7e:	f100 0c08 	add.w	ip, r0, #8
    4e82:	f836 501c 	ldrh.w	r5, [r6, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4e86:	07ab      	lsls	r3, r5, #30
    4e88:	d404      	bmi.n	4e94 <nrfx_gpiote_output_configure+0x20>
    4e8a:	06af      	lsls	r7, r5, #26
    4e8c:	d502      	bpl.n	4e94 <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4e8e:	4840      	ldr	r0, [pc, #256]	; (4f90 <nrfx_gpiote_output_configure+0x11c>)
}
    4e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4e94:	f015 0f1c 	tst.w	r5, #28
    4e98:	d002      	beq.n	4ea0 <nrfx_gpiote_output_configure+0x2c>
    4e9a:	784b      	ldrb	r3, [r1, #1]
    4e9c:	2b01      	cmp	r3, #1
    4e9e:	d0f6      	beq.n	4e8e <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ea0:	4b3c      	ldr	r3, [pc, #240]	; (4f94 <nrfx_gpiote_output_configure+0x120>)
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4ea2:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
    4ea6:	f000 071f 	and.w	r7, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4eaa:	bf14      	ite	ne
    4eac:	2402      	movne	r4, #2
    4eae:	2400      	moveq	r4, #0
    4eb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4eb4:	1c8b      	adds	r3, r1, #2
    4eb6:	bf14      	ite	ne
    4eb8:	f04f 090c 	movne.w	r9, #12
    4ebc:	f04f 0900 	moveq.w	r9, #0
    4ec0:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ec4:	f8d7 8200 	ldr.w	r8, [r7, #512]	; 0x200
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4ec8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    4ecc:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
    4ed0:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4ed4:	f1be 0f00 	cmp.w	lr, #0
    4ed8:	d003      	beq.n	4ee2 <nrfx_gpiote_output_configure+0x6e>
    4eda:	f891 e001 	ldrb.w	lr, [r1, #1]
    4ede:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4ee2:	b10b      	cbz	r3, 4ee8 <nrfx_gpiote_output_configure+0x74>
    4ee4:	788c      	ldrb	r4, [r1, #2]
    4ee6:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4ee8:	7809      	ldrb	r1, [r1, #0]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4eea:	f045 0503 	orr.w	r5, r5, #3
    4eee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4ef2:	ea43 0308 	orr.w	r3, r3, r8
    4ef6:	ea43 030e 	orr.w	r3, r3, lr
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4efa:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    4efe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    4f02:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
    if (p_task_config)
    4f06:	b90a      	cbnz	r2, 4f0c <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
    4f08:	4823      	ldr	r0, [pc, #140]	; (4f98 <nrfx_gpiote_output_configure+0x124>)
    4f0a:	e7c1      	b.n	4e90 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f0c:	4d1f      	ldr	r5, [pc, #124]	; (4f8c <nrfx_gpiote_output_configure+0x118>)
    4f0e:	f100 0608 	add.w	r6, r0, #8
    4f12:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
    4f16:	07a3      	lsls	r3, r4, #30
    4f18:	d5b9      	bpl.n	4e8e <nrfx_gpiote_output_configure+0x1a>
    p_reg->CONFIG[idx] = 0;
    4f1a:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
    4f1c:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4f1e:	f024 0420 	bic.w	r4, r4, #32
    4f22:	00b9      	lsls	r1, r7, #2
    4f24:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4f28:	04e4      	lsls	r4, r4, #19
    4f2a:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4f2e:	0ce4      	lsrs	r4, r4, #19
    4f30:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4f34:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4f38:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4f3c:	f892 c001 	ldrb.w	ip, [r2, #1]
    4f40:	f1bc 0f00 	cmp.w	ip, #0
    4f44:	d0e0      	beq.n	4f08 <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4f46:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4f4a:	7892      	ldrb	r2, [r2, #2]
    4f4c:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4f50:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4f54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f58:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4f5c:	0203      	lsls	r3, r0, #8
    4f5e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4f62:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f66:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4f6a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4f6e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f70:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4f72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4f76:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4f7a:	4313      	orrs	r3, r2
    4f7c:	f044 0420 	orr.w	r4, r4, #32
    4f80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4f84:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    4f88:	e7be      	b.n	4f08 <nrfx_gpiote_output_configure+0x94>
    4f8a:	bf00      	nop
    4f8c:	2000c594 	.word	0x2000c594
    4f90:	0bad0004 	.word	0x0bad0004
    4f94:	50842500 	.word	0x50842500
    4f98:	0bad0000 	.word	0x0bad0000

00004f9c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4f9c:	4b01      	ldr	r3, [pc, #4]	; (4fa4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4f9e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4fa2:	4770      	bx	lr
    4fa4:	2000c594 	.word	0x2000c594

00004fa8 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4fa8:	4b05      	ldr	r3, [pc, #20]	; (4fc0 <nrfx_gpiote_channel_get+0x18>)
    4faa:	3008      	adds	r0, #8
    4fac:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    4fb0:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4fb2:	bf43      	ittte	mi
    4fb4:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    4fb6:	4803      	ldrmi	r0, [pc, #12]	; (4fc4 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4fb8:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    4fba:	4803      	ldrpl	r0, [pc, #12]	; (4fc8 <nrfx_gpiote_channel_get+0x20>)
}
    4fbc:	4770      	bx	lr
    4fbe:	bf00      	nop
    4fc0:	2000c594 	.word	0x2000c594
    4fc4:	0bad0000 	.word	0x0bad0000
    4fc8:	0bad0004 	.word	0x0bad0004

00004fcc <nrfx_gpiote_init>:
{
    4fcc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4fce:	4c0e      	ldr	r4, [pc, #56]	; (5008 <nrfx_gpiote_init+0x3c>)
    4fd0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4fd4:	b9b5      	cbnz	r5, 5004 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4fd6:	2240      	movs	r2, #64	; 0x40
    4fd8:	4629      	mov	r1, r5
    4fda:	f104 0010 	add.w	r0, r4, #16
    4fde:	f001 fc13 	bl	6808 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4fe2:	200d      	movs	r0, #13
    4fe4:	f7fd fca0 	bl	2928 <arch_irq_enable>
    p_reg->INTENSET = mask;
    4fe8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fec:	4b07      	ldr	r3, [pc, #28]	; (500c <nrfx_gpiote_init+0x40>)
    return err_code;
    4fee:	4808      	ldr	r0, [pc, #32]	; (5010 <nrfx_gpiote_init+0x44>)
    4ff0:	601d      	str	r5, [r3, #0]
    4ff2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4ff4:	4b07      	ldr	r3, [pc, #28]	; (5014 <nrfx_gpiote_init+0x48>)
    4ff6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4ffa:	2301      	movs	r3, #1
    4ffc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5000:	6563      	str	r3, [r4, #84]	; 0x54
}
    5002:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5004:	4804      	ldr	r0, [pc, #16]	; (5018 <nrfx_gpiote_init+0x4c>)
    5006:	e7fc      	b.n	5002 <nrfx_gpiote_init+0x36>
    5008:	2000c594 	.word	0x2000c594
    500c:	5000d17c 	.word	0x5000d17c
    5010:	0bad0000 	.word	0x0bad0000
    5014:	5000d000 	.word	0x5000d000
    5018:	0bad0005 	.word	0x0bad0005

0000501c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    501c:	4b03      	ldr	r3, [pc, #12]	; (502c <nrfx_gpiote_is_init+0x10>)
    501e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    5022:	3800      	subs	r0, #0
    5024:	bf18      	it	ne
    5026:	2001      	movne	r0, #1
    5028:	4770      	bx	lr
    502a:	bf00      	nop
    502c:	2000c594 	.word	0x2000c594

00005030 <nrfx_gpiote_channel_free>:
{
    5030:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5032:	4801      	ldr	r0, [pc, #4]	; (5038 <nrfx_gpiote_channel_free+0x8>)
    5034:	f7ff bd28 	b.w	4a88 <nrfx_flag32_free>
    5038:	2000c5e4 	.word	0x2000c5e4

0000503c <nrfx_gpiote_channel_alloc>:
{
    503c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    503e:	4801      	ldr	r0, [pc, #4]	; (5044 <nrfx_gpiote_channel_alloc+0x8>)
    5040:	f7ff bd02 	b.w	4a48 <nrfx_flag32_alloc>
    5044:	2000c5e4 	.word	0x2000c5e4

00005048 <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5048:	4b1d      	ldr	r3, [pc, #116]	; (50c0 <nrfx_gpiote_trigger_enable+0x78>)
    504a:	f100 0208 	add.w	r2, r0, #8
    504e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    5052:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5054:	069a      	lsls	r2, r3, #26
    5056:	d51d      	bpl.n	5094 <nrfx_gpiote_trigger_enable+0x4c>
    5058:	f013 0402 	ands.w	r4, r3, #2
    505c:	d11a      	bne.n	5094 <nrfx_gpiote_trigger_enable+0x4c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    505e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5060:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5062:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    5066:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    506a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    506e:	6004      	str	r4, [r0, #0]
    5070:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    5074:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5076:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    507a:	f040 0001 	orr.w	r0, r0, #1
    507e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5082:	b129      	cbz	r1, 5090 <nrfx_gpiote_trigger_enable+0x48>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5084:	2201      	movs	r2, #1
    5086:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    508a:	4a0e      	ldr	r2, [pc, #56]	; (50c4 <nrfx_gpiote_trigger_enable+0x7c>)
    508c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5090:	bc10      	pop	{r4}
    5092:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5094:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5098:	2b04      	cmp	r3, #4
    509a:	d00c      	beq.n	50b6 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    509c:	2b05      	cmp	r3, #5
    509e:	d00c      	beq.n	50ba <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    50a0:	4b09      	ldr	r3, [pc, #36]	; (50c8 <nrfx_gpiote_trigger_enable+0x80>)
    50a2:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    50a4:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    50a8:	40d9      	lsrs	r1, r3
    50aa:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    50ae:	3102      	adds	r1, #2
}
    50b0:	bc10      	pop	{r4}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    50b2:	f7ff be29 	b.w	4d08 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    50b6:	2103      	movs	r1, #3
    50b8:	e7fa      	b.n	50b0 <nrfx_gpiote_trigger_enable+0x68>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    50ba:	2102      	movs	r1, #2
    50bc:	e7f8      	b.n	50b0 <nrfx_gpiote_trigger_enable+0x68>
    50be:	bf00      	nop
    50c0:	2000c594 	.word	0x2000c594
    50c4:	5000d000 	.word	0x5000d000
    50c8:	50842500 	.word	0x50842500

000050cc <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    50cc:	4b0e      	ldr	r3, [pc, #56]	; (5108 <nrfx_gpiote_trigger_disable+0x3c>)
    50ce:	f100 0208 	add.w	r2, r0, #8
    50d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    50d6:	0699      	lsls	r1, r3, #26
    50d8:	d513      	bpl.n	5102 <nrfx_gpiote_trigger_disable+0x36>
    50da:	079a      	lsls	r2, r3, #30
    50dc:	d411      	bmi.n	5102 <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    50de:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    50e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    50e2:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    50e4:	4909      	ldr	r1, [pc, #36]	; (510c <nrfx_gpiote_trigger_disable+0x40>)
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    50ec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    50f0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    50f4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    50f8:	f022 0203 	bic.w	r2, r2, #3
    50fc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5100:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5102:	2100      	movs	r1, #0
    5104:	f7ff be00 	b.w	4d08 <nrf_gpio_cfg_sense_set>
    5108:	2000c594 	.word	0x2000c594
    510c:	5000d000 	.word	0x5000d000

00005110 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5110:	4b0c      	ldr	r3, [pc, #48]	; (5144 <nrfx_gpiote_pin_uninit+0x34>)
    5112:	f100 0208 	add.w	r2, r0, #8
    5116:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
    511a:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    511c:	07db      	lsls	r3, r3, #31
{
    511e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5120:	d50d      	bpl.n	513e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    5122:	f7ff ffd3 	bl	50cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5126:	4620      	mov	r0, r4
    5128:	f7ff fdd2 	bl	4cd0 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    512c:	2202      	movs	r2, #2
    512e:	4b06      	ldr	r3, [pc, #24]	; (5148 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    5130:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    5134:	3480      	adds	r4, #128	; 0x80
    5136:	4805      	ldr	r0, [pc, #20]	; (514c <nrfx_gpiote_pin_uninit+0x3c>)
    5138:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    513c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    513e:	4804      	ldr	r0, [pc, #16]	; (5150 <nrfx_gpiote_pin_uninit+0x40>)
    5140:	e7fc      	b.n	513c <nrfx_gpiote_pin_uninit+0x2c>
    5142:	bf00      	nop
    5144:	2000c594 	.word	0x2000c594
    5148:	50842500 	.word	0x50842500
    514c:	0bad0000 	.word	0x0bad0000
    5150:	0bad0004 	.word	0x0bad0004

00005154 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    5158:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    515a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    515c:	4634      	mov	r4, r6
{
    515e:	4b4b      	ldr	r3, [pc, #300]	; (528c <nrfx_gpiote_irq_handler+0x138>)
    return p_reg->INTENSET & mask;
    5160:	484b      	ldr	r0, [pc, #300]	; (5290 <nrfx_gpiote_irq_handler+0x13c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5162:	494c      	ldr	r1, [pc, #304]	; (5294 <nrfx_gpiote_irq_handler+0x140>)
{
    5164:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5166:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5168:	b135      	cbz	r5, 5178 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    516a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    516e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5170:	bf1e      	ittt	ne
    5172:	601c      	strne	r4, [r3, #0]
    5174:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5176:	4316      	orrne	r6, r2
        }
        mask <<= 1;
    5178:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    517a:	428b      	cmp	r3, r1
        mask <<= 1;
    517c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5180:	d1f1      	bne.n	5166 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5182:	4f45      	ldr	r7, [pc, #276]	; (5298 <nrfx_gpiote_irq_handler+0x144>)
    5184:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5186:	b183      	cbz	r3, 51aa <nrfx_gpiote_irq_handler+0x56>
        *p_masks = gpio_regs[i]->LATCH;
    5188:	4d44      	ldr	r5, [pc, #272]	; (529c <nrfx_gpiote_irq_handler+0x148>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    518a:	f10d 080c 	add.w	r8, sp, #12
    518e:	6a2b      	ldr	r3, [r5, #32]
    5190:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    5192:	622b      	str	r3, [r5, #32]
    5194:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    5198:	9803      	ldr	r0, [sp, #12]
    519a:	b940      	cbnz	r0, 51ae <nrfx_gpiote_irq_handler+0x5a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    519c:	6038      	str	r0, [r7, #0]
    519e:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
    51a0:	6a2b      	ldr	r3, [r5, #32]
    51a2:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    51a4:	622b      	str	r3, [r5, #32]
        if (latch[port_idx])
    51a6:	2b00      	cmp	r3, #0
    51a8:	d1f4      	bne.n	5194 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
    51aa:	2401      	movs	r4, #1
    51ac:	e069      	b.n	5282 <nrfx_gpiote_irq_handler+0x12e>
                uint32_t pin = NRF_CTZ(latch[i]);
    51ae:	fa90 faa0 	rbit	sl, r0
    51b2:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    51b6:	4a3a      	ldr	r2, [pc, #232]	; (52a0 <nrfx_gpiote_irq_handler+0x14c>)
    51b8:	f10a 0308 	add.w	r3, sl, #8
    51bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    51c0:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    51c4:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    51c8:	fa09 f403 	lsl.w	r4, r9, r3
    51cc:	f818 300c 	ldrb.w	r3, [r8, ip]
    51d0:	f3c1 0282 	ubfx	r2, r1, #2, #3
    51d4:	ea23 0304 	bic.w	r3, r3, r4
    51d8:	f808 300c 	strb.w	r3, [r8, ip]
    51dc:	eb05 038a 	add.w	r3, r5, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    51e0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    51e4:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    51e6:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    51e8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    51ec:	d518      	bpl.n	5220 <nrfx_gpiote_irq_handler+0xcc>
        call_handler(pin, trigger);
    51ee:	4611      	mov	r1, r2
    51f0:	4650      	mov	r0, sl
    51f2:	9301      	str	r3, [sp, #4]
    51f4:	f7ff fd24 	bl	4c40 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    51f8:	9b01      	ldr	r3, [sp, #4]
    51fa:	b2e4      	uxtb	r4, r4
    51fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5200:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5204:	429c      	cmp	r4, r3
    5206:	d107      	bne.n	5218 <nrfx_gpiote_irq_handler+0xc4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5208:	2100      	movs	r1, #0
    520a:	4650      	mov	r0, sl
    520c:	f7ff fd7c 	bl	4d08 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5210:	4621      	mov	r1, r4
    5212:	4650      	mov	r0, sl
    5214:	f7ff fd78 	bl	4d08 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    5218:	fa09 f00a 	lsl.w	r0, r9, sl
    521c:	6228      	str	r0, [r5, #32]
}
    521e:	e7bb      	b.n	5198 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5220:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5222:	bf0c      	ite	eq
    5224:	2103      	moveq	r1, #3
    5226:	2102      	movne	r1, #2
    5228:	4650      	mov	r0, sl
    522a:	9201      	str	r2, [sp, #4]
    522c:	f7ff fd6c 	bl	4d08 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5230:	9a01      	ldr	r2, [sp, #4]
    5232:	2a03      	cmp	r2, #3
    5234:	d004      	beq.n	5240 <nrfx_gpiote_irq_handler+0xec>
    5236:	2c02      	cmp	r4, #2
    5238:	d107      	bne.n	524a <nrfx_gpiote_irq_handler+0xf6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    523a:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    523e:	d1eb      	bne.n	5218 <nrfx_gpiote_irq_handler+0xc4>
            call_handler(pin, trigger);
    5240:	4659      	mov	r1, fp
    5242:	4650      	mov	r0, sl
    5244:	f7ff fcfc 	bl	4c40 <call_handler>
    5248:	e7e6      	b.n	5218 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    524a:	2c03      	cmp	r4, #3
    524c:	d1e4      	bne.n	5218 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    524e:	f1bb 0f02 	cmp.w	fp, #2
    5252:	e7f4      	b.n	523e <nrfx_gpiote_irq_handler+0xea>
        uint32_t ch = NRF_CTZ(mask);
    5254:	fa96 f3a6 	rbit	r3, r6
    5258:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    525c:	fa04 f203 	lsl.w	r2, r4, r3
    5260:	009b      	lsls	r3, r3, #2
    5262:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5266:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    526a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    526e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5272:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5276:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    527a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    527e:	f7ff fcdf 	bl	4c40 <call_handler>
    while (mask)
    5282:	2e00      	cmp	r6, #0
    5284:	d1e6      	bne.n	5254 <nrfx_gpiote_irq_handler+0x100>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5286:	b005      	add	sp, #20
    5288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    528c:	5000d100 	.word	0x5000d100
    5290:	5000d000 	.word	0x5000d000
    5294:	5000d120 	.word	0x5000d120
    5298:	5000d17c 	.word	0x5000d17c
    529c:	50842500 	.word	0x50842500
    52a0:	2000c594 	.word	0x2000c594

000052a4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    52a4:	2200      	movs	r2, #0
    52a6:	4b03      	ldr	r3, [pc, #12]	; (52b4 <nvmc_readonly_mode_set+0x10>)
    52a8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    52ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	50039000 	.word	0x50039000

000052b8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    52b8:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    52ba:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    52be:	b983      	cbnz	r3, 52e2 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    52c0:	2202      	movs	r2, #2
    52c2:	4b09      	ldr	r3, [pc, #36]	; (52e8 <nrfx_nvmc_page_erase+0x30>)
    52c4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    52c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    52cc:	f04f 32ff 	mov.w	r2, #4294967295
    52d0:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    52d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    52d6:	07d2      	lsls	r2, r2, #31
    52d8:	d5fb      	bpl.n	52d2 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    52da:	f7ff ffe3 	bl	52a4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    52de:	4803      	ldr	r0, [pc, #12]	; (52ec <nrfx_nvmc_page_erase+0x34>)
}
    52e0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    52e2:	4803      	ldr	r0, [pc, #12]	; (52f0 <nrfx_nvmc_page_erase+0x38>)
    52e4:	e7fc      	b.n	52e0 <nrfx_nvmc_page_erase+0x28>
    52e6:	bf00      	nop
    52e8:	50039000 	.word	0x50039000
    52ec:	0bad0000 	.word	0x0bad0000
    52f0:	0bad000a 	.word	0x0bad000a

000052f4 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    52f4:	2201      	movs	r2, #1
    52f6:	4b07      	ldr	r3, [pc, #28]	; (5314 <nrfx_nvmc_word_write+0x20>)
    52f8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    52fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    5300:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    5304:	07d2      	lsls	r2, r2, #31
    5306:	d5fb      	bpl.n	5300 <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    5308:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    530a:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    530e:	f7ff bfc9 	b.w	52a4 <nvmc_readonly_mode_set>
    5312:	bf00      	nop
    5314:	50039000 	.word	0x50039000

00005318 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5318:	4b0e      	ldr	r3, [pc, #56]	; (5354 <z_sys_init_run_level+0x3c>)
{
    531a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    531c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5320:	3001      	adds	r0, #1
    5322:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5326:	42a6      	cmp	r6, r4
    5328:	d800      	bhi.n	532c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    532a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    532c:	e9d4 3500 	ldrd	r3, r5, [r4]
    5330:	4628      	mov	r0, r5
    5332:	4798      	blx	r3
		if (dev != NULL) {
    5334:	b165      	cbz	r5, 5350 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    5336:	68eb      	ldr	r3, [r5, #12]
    5338:	b130      	cbz	r0, 5348 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    533a:	2800      	cmp	r0, #0
    533c:	bfb8      	it	lt
    533e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5340:	28ff      	cmp	r0, #255	; 0xff
    5342:	bfa8      	it	ge
    5344:	20ff      	movge	r0, #255	; 0xff
    5346:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5348:	785a      	ldrb	r2, [r3, #1]
    534a:	f042 0201 	orr.w	r2, r2, #1
    534e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5350:	3408      	adds	r4, #8
    5352:	e7e8      	b.n	5326 <z_sys_init_run_level+0xe>
    5354:	00008f8c 	.word	0x00008f8c

00005358 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5358:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    535a:	4605      	mov	r5, r0
    535c:	b910      	cbnz	r0, 5364 <z_impl_device_get_binding+0xc>
		return NULL;
    535e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5360:	4620      	mov	r0, r4
    5362:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5364:	7803      	ldrb	r3, [r0, #0]
    5366:	2b00      	cmp	r3, #0
    5368:	d0f9      	beq.n	535e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    536a:	4a0f      	ldr	r2, [pc, #60]	; (53a8 <z_impl_device_get_binding+0x50>)
    536c:	4c0f      	ldr	r4, [pc, #60]	; (53ac <z_impl_device_get_binding+0x54>)
    536e:	4616      	mov	r6, r2
    5370:	4294      	cmp	r4, r2
    5372:	d108      	bne.n	5386 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5374:	4c0d      	ldr	r4, [pc, #52]	; (53ac <z_impl_device_get_binding+0x54>)
    5376:	42b4      	cmp	r4, r6
    5378:	d0f1      	beq.n	535e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    537a:	4620      	mov	r0, r4
    537c:	f003 faa0 	bl	88c0 <z_device_ready>
    5380:	b950      	cbnz	r0, 5398 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    5382:	3418      	adds	r4, #24
    5384:	e7f7      	b.n	5376 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    5386:	4620      	mov	r0, r4
    5388:	f003 fa9a 	bl	88c0 <z_device_ready>
    538c:	b110      	cbz	r0, 5394 <z_impl_device_get_binding+0x3c>
    538e:	6823      	ldr	r3, [r4, #0]
    5390:	42ab      	cmp	r3, r5
    5392:	d0e5      	beq.n	5360 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5394:	3418      	adds	r4, #24
    5396:	e7eb      	b.n	5370 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5398:	4628      	mov	r0, r5
    539a:	6821      	ldr	r1, [r4, #0]
    539c:	f001 f9f6 	bl	678c <strcmp>
    53a0:	2800      	cmp	r0, #0
    53a2:	d1ee      	bne.n	5382 <z_impl_device_get_binding+0x2a>
    53a4:	e7dc      	b.n	5360 <z_impl_device_get_binding+0x8>
    53a6:	bf00      	nop
    53a8:	000089c0 	.word	0x000089c0
    53ac:	00008948 	.word	0x00008948

000053b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    53b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    53b2:	4604      	mov	r4, r0
    53b4:	460d      	mov	r5, r1
	__asm__ volatile(
    53b6:	f04f 0320 	mov.w	r3, #32
    53ba:	f3ef 8611 	mrs	r6, BASEPRI
    53be:	f383 8812 	msr	BASEPRI_MAX, r3
    53c2:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    53c6:	2200      	movs	r2, #0
    53c8:	2804      	cmp	r0, #4
    53ca:	bf96      	itet	ls
    53cc:	4b11      	ldrls	r3, [pc, #68]	; (5414 <z_fatal_error+0x64>)
    53ce:	4b12      	ldrhi	r3, [pc, #72]	; (5418 <z_fatal_error+0x68>)
	return 0;
    53d0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    53d4:	9200      	str	r2, [sp, #0]
    53d6:	2145      	movs	r1, #69	; 0x45
    53d8:	4602      	mov	r2, r0
    53da:	4810      	ldr	r0, [pc, #64]	; (541c <z_fatal_error+0x6c>)
    53dc:	f000 fe79 	bl	60d2 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    53e0:	b13d      	cbz	r5, 53f2 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    53e2:	69eb      	ldr	r3, [r5, #28]
    53e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    53e8:	b11b      	cbz	r3, 53f2 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    53ea:	2145      	movs	r1, #69	; 0x45
    53ec:	480c      	ldr	r0, [pc, #48]	; (5420 <z_fatal_error+0x70>)
    53ee:	f000 fe70 	bl	60d2 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    53f2:	2200      	movs	r2, #0
    53f4:	4b0b      	ldr	r3, [pc, #44]	; (5424 <z_fatal_error+0x74>)
    53f6:	2145      	movs	r1, #69	; 0x45
    53f8:	480b      	ldr	r0, [pc, #44]	; (5428 <z_fatal_error+0x78>)
    53fa:	f000 fe6a 	bl	60d2 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    53fe:	4629      	mov	r1, r5
    5400:	4620      	mov	r0, r4
    5402:	f7fe fe0f 	bl	4024 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5406:	f386 8811 	msr	BASEPRI, r6
    540a:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    540e:	b002      	add	sp, #8
    5410:	bd70      	pop	{r4, r5, r6, pc}
    5412:	bf00      	nop
    5414:	00008fa0 	.word	0x00008fa0
    5418:	00009e39 	.word	0x00009e39
    541c:	00009e47 	.word	0x00009e47
    5420:	00009e74 	.word	0x00009e74
    5424:	00009e9a 	.word	0x00009e9a
    5428:	00009ea2 	.word	0x00009ea2

0000542c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    542c:	2201      	movs	r2, #1
{
    542e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5430:	4b08      	ldr	r3, [pc, #32]	; (5454 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5432:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5434:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5436:	f7ff ff6f 	bl	5318 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    543a:	f003 fa55 	bl	88e8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    543e:	2003      	movs	r0, #3
    5440:	f7ff ff6a 	bl	5318 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5444:	f7fa fffc 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5448:	4a03      	ldr	r2, [pc, #12]	; (5458 <bg_thread_main+0x2c>)
    544a:	7b13      	ldrb	r3, [r2, #12]
    544c:	f023 0301 	bic.w	r3, r3, #1
    5450:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5452:	bd08      	pop	{r3, pc}
    5454:	2000fe51 	.word	0x2000fe51
    5458:	2000c690 	.word	0x2000c690

0000545c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    545c:	4802      	ldr	r0, [pc, #8]	; (5468 <z_bss_zero+0xc>)
    545e:	4a03      	ldr	r2, [pc, #12]	; (546c <z_bss_zero+0x10>)
    5460:	2100      	movs	r1, #0
    5462:	1a12      	subs	r2, r2, r0
    5464:	f001 b9d0 	b.w	6808 <memset>
    5468:	2000c670 	.word	0x2000c670
    546c:	2000fe54 	.word	0x2000fe54

00005470 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5470:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    5472:	4b19      	ldr	r3, [pc, #100]	; (54d8 <z_cstart+0x68>)
	uint32_t msp =
    5474:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5478:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    547c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5480:	2500      	movs	r5, #0
    5482:	23e0      	movs	r3, #224	; 0xe0
    5484:	4c15      	ldr	r4, [pc, #84]	; (54dc <z_cstart+0x6c>)
    5486:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    548a:	77e5      	strb	r5, [r4, #31]
    548c:	7625      	strb	r5, [r4, #24]
    548e:	7665      	strb	r5, [r4, #25]
    5490:	76a5      	strb	r5, [r4, #26]
    5492:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5496:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5498:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    549c:	6263      	str	r3, [r4, #36]	; 0x24
    549e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    54a2:	f7fd fcab 	bl	2dfc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    54a6:	f7fd f9f3 	bl	2890 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    54aa:	f04f 33ff 	mov.w	r3, #4294967295
    54ae:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    54b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    54b2:	f7fd fe59 	bl	3168 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    54b6:	f7fd fd3b 	bl	2f30 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    54ba:	f003 fa00 	bl	88be <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    54be:	4628      	mov	r0, r5
    54c0:	f7ff ff2a 	bl	5318 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    54c4:	2001      	movs	r0, #1
    54c6:	f7ff ff27 	bl	5318 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    54ca:	462b      	mov	r3, r5
    54cc:	462a      	mov	r2, r5
    54ce:	4629      	mov	r1, r5
    54d0:	4803      	ldr	r0, [pc, #12]	; (54e0 <z_cstart+0x70>)
    54d2:	f7fd fa8d 	bl	29f0 <z_arm_switch_to_main_no_multithreading>
    54d6:	bf00      	nop
    54d8:	20012658 	.word	0x20012658
    54dc:	e000ed00 	.word	0xe000ed00
    54e0:	0000542d 	.word	0x0000542d

000054e4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    54e4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    54e6:	4806      	ldr	r0, [pc, #24]	; (5500 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    54e8:	4a06      	ldr	r2, [pc, #24]	; (5504 <z_data_copy+0x20>)
    54ea:	4907      	ldr	r1, [pc, #28]	; (5508 <z_data_copy+0x24>)
    54ec:	1a12      	subs	r2, r2, r0
    54ee:	f001 f980 	bl	67f2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    54f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    54f6:	4a05      	ldr	r2, [pc, #20]	; (550c <z_data_copy+0x28>)
    54f8:	4905      	ldr	r1, [pc, #20]	; (5510 <z_data_copy+0x2c>)
    54fa:	4806      	ldr	r0, [pc, #24]	; (5514 <z_data_copy+0x30>)
    54fc:	f001 b979 	b.w	67f2 <memcpy>
    5500:	2000c500 	.word	0x2000c500
    5504:	2000c66c 	.word	0x2000c66c
    5508:	00009f24 	.word	0x00009f24
    550c:	00000000 	.word	0x00000000
    5510:	00009f0c 	.word	0x00009f0c
    5514:	2000c500 	.word	0x2000c500

00005518 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5518:	4b03      	ldr	r3, [pc, #12]	; (5528 <elapsed+0x10>)
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	b90b      	cbnz	r3, 5522 <elapsed+0xa>
    551e:	f7fe bd77 	b.w	4010 <sys_clock_elapsed>
}
    5522:	2000      	movs	r0, #0
    5524:	4770      	bx	lr
    5526:	bf00      	nop
    5528:	2000e070 	.word	0x2000e070

0000552c <remove_timeout>:
{
    552c:	b530      	push	{r4, r5, lr}
    552e:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5530:	b168      	cbz	r0, 554e <remove_timeout+0x22>
    5532:	4a0a      	ldr	r2, [pc, #40]	; (555c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5534:	6852      	ldr	r2, [r2, #4]
    5536:	4290      	cmp	r0, r2
    5538:	d009      	beq.n	554e <remove_timeout+0x22>
	if (next(t) != NULL) {
    553a:	b143      	cbz	r3, 554e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    553c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5540:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5544:	1912      	adds	r2, r2, r4
    5546:	eb45 0101 	adc.w	r1, r5, r1
    554a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    554e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5550:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5552:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5554:	2300      	movs	r3, #0
	node->prev = NULL;
    5556:	e9c0 3300 	strd	r3, r3, [r0]
}
    555a:	bd30      	pop	{r4, r5, pc}
    555c:	2000c5f0 	.word	0x2000c5f0

00005560 <next_timeout>:

static int32_t next_timeout(void)
{
    5560:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5562:	4b10      	ldr	r3, [pc, #64]	; (55a4 <next_timeout+0x44>)
    5564:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5566:	429c      	cmp	r4, r3
    5568:	bf08      	it	eq
    556a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    556c:	f7ff ffd4 	bl	5518 <elapsed>
    5570:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5572:	b18c      	cbz	r4, 5598 <next_timeout+0x38>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5574:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5578:	1b40      	subs	r0, r0, r5
    557a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    557e:	2801      	cmp	r0, #1
    5580:	f171 0300 	sbcs.w	r3, r1, #0
    5584:	db0b      	blt.n	559e <next_timeout+0x3e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5586:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    558a:	2300      	movs	r3, #0
    558c:	4282      	cmp	r2, r0
    558e:	eb73 0401 	sbcs.w	r4, r3, r1
    5592:	da00      	bge.n	5596 <next_timeout+0x36>
    5594:	4610      	mov	r0, r2
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5596:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5598:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    559c:	e7fb      	b.n	5596 <next_timeout+0x36>
    559e:	2000      	movs	r0, #0
	return ret;
    55a0:	e7f9      	b.n	5596 <next_timeout+0x36>
    55a2:	bf00      	nop
    55a4:	2000c5f0 	.word	0x2000c5f0

000055a8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    55a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    55ac:	f04f 0320 	mov.w	r3, #32
    55b0:	f3ef 8411 	mrs	r4, BASEPRI
    55b4:	f383 8812 	msr	BASEPRI_MAX, r3
    55b8:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    55bc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 566c <sys_clock_announce+0xc4>
    55c0:	4d29      	ldr	r5, [pc, #164]	; (5668 <sys_clock_announce+0xc0>)
    55c2:	4651      	mov	r1, sl
	return list->head == list;
    55c4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 5670 <sys_clock_announce+0xc8>
    55c8:	6028      	str	r0, [r5, #0]
    55ca:	f8d5 c000 	ldr.w	ip, [r5]
    55ce:	f8db 0000 	ldr.w	r0, [fp]
    55d2:	4662      	mov	r2, ip
    55d4:	e9da 8900 	ldrd	r8, r9, [sl]
    55d8:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55da:	4558      	cmp	r0, fp
    55dc:	e9cd 2300 	strd	r2, r3, [sp]
    55e0:	d00d      	beq.n	55fe <sys_clock_announce+0x56>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    55e2:	b160      	cbz	r0, 55fe <sys_clock_announce+0x56>
    55e4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    55e8:	45b4      	cmp	ip, r6
    55ea:	41bb      	sbcs	r3, r7
    55ec:	da1d      	bge.n	562a <sys_clock_announce+0x82>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    55ee:	9b00      	ldr	r3, [sp, #0]
    55f0:	ebb6 0c03 	subs.w	ip, r6, r3
    55f4:	9b01      	ldr	r3, [sp, #4]
    55f6:	eb67 0603 	sbc.w	r6, r7, r3
    55fa:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    55fe:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    5600:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    5602:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    5604:	eb13 0208 	adds.w	r2, r3, r8
    5608:	9b01      	ldr	r3, [sp, #4]
    560a:	eb43 0309 	adc.w	r3, r3, r9
    560e:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
    5612:	f7ff ffa5 	bl	5560 <next_timeout>
    5616:	4631      	mov	r1, r6
    5618:	f7fe fcca 	bl	3fb0 <sys_clock_set_timeout>
	__asm__ volatile(
    561c:	f384 8811 	msr	BASEPRI, r4
    5620:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5624:	b003      	add	sp, #12
    5626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    562a:	2200      	movs	r2, #0
    562c:	2300      	movs	r3, #0
		curr_tick += dt;
    562e:	eb18 0806 	adds.w	r8, r8, r6
    5632:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    5636:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    563a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    563e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    5642:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    5644:	f7ff ff72 	bl	552c <remove_timeout>
    5648:	f384 8811 	msr	BASEPRI, r4
    564c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5650:	6883      	ldr	r3, [r0, #8]
    5652:	4798      	blx	r3
	__asm__ volatile(
    5654:	f04f 0320 	mov.w	r3, #32
    5658:	f3ef 8411 	mrs	r4, BASEPRI
    565c:	f383 8812 	msr	BASEPRI_MAX, r3
    5660:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    5664:	4901      	ldr	r1, [pc, #4]	; (566c <sys_clock_announce+0xc4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5666:	e7b0      	b.n	55ca <sys_clock_announce+0x22>
    5668:	2000e070 	.word	0x2000e070
    566c:	2000c710 	.word	0x2000c710
    5670:	2000c5f0 	.word	0x2000c5f0

00005674 <nrf_cc3xx_platform_init_no_rng>:
    5674:	b510      	push	{r4, lr}
    5676:	4c0a      	ldr	r4, [pc, #40]	; (56a0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5678:	6823      	ldr	r3, [r4, #0]
    567a:	b11b      	cbz	r3, 5684 <nrf_cc3xx_platform_init_no_rng+0x10>
    567c:	2301      	movs	r3, #1
    567e:	2000      	movs	r0, #0
    5680:	6023      	str	r3, [r4, #0]
    5682:	bd10      	pop	{r4, pc}
    5684:	f000 f852 	bl	572c <CC_LibInitNoRng>
    5688:	2800      	cmp	r0, #0
    568a:	d0f7      	beq.n	567c <nrf_cc3xx_platform_init_no_rng+0x8>
    568c:	3801      	subs	r0, #1
    568e:	2806      	cmp	r0, #6
    5690:	d803      	bhi.n	569a <nrf_cc3xx_platform_init_no_rng+0x26>
    5692:	4b04      	ldr	r3, [pc, #16]	; (56a4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5694:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5698:	bd10      	pop	{r4, pc}
    569a:	4803      	ldr	r0, [pc, #12]	; (56a8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    569c:	bd10      	pop	{r4, pc}
    569e:	bf00      	nop
    56a0:	2000e074 	.word	0x2000e074
    56a4:	00008fb4 	.word	0x00008fb4
    56a8:	ffff8ffe 	.word	0xffff8ffe

000056ac <nrf_cc3xx_platform_abort>:
    56ac:	f3bf 8f4f 	dsb	sy
    56b0:	4905      	ldr	r1, [pc, #20]	; (56c8 <nrf_cc3xx_platform_abort+0x1c>)
    56b2:	4b06      	ldr	r3, [pc, #24]	; (56cc <nrf_cc3xx_platform_abort+0x20>)
    56b4:	68ca      	ldr	r2, [r1, #12]
    56b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    56ba:	4313      	orrs	r3, r2
    56bc:	60cb      	str	r3, [r1, #12]
    56be:	f3bf 8f4f 	dsb	sy
    56c2:	bf00      	nop
    56c4:	e7fd      	b.n	56c2 <nrf_cc3xx_platform_abort+0x16>
    56c6:	bf00      	nop
    56c8:	e000ed00 	.word	0xe000ed00
    56cc:	05fa0004 	.word	0x05fa0004

000056d0 <CC_PalAbort>:
    56d0:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    56d4:	2100      	movs	r1, #0
    56d6:	b430      	push	{r4, r5}
    56d8:	4a06      	ldr	r2, [pc, #24]	; (56f4 <CC_PalAbort+0x24>)
    56da:	4d07      	ldr	r5, [pc, #28]	; (56f8 <CC_PalAbort+0x28>)
    56dc:	4c07      	ldr	r4, [pc, #28]	; (56fc <CC_PalAbort+0x2c>)
    56de:	602b      	str	r3, [r5, #0]
    56e0:	6013      	str	r3, [r2, #0]
    56e2:	6023      	str	r3, [r4, #0]
    56e4:	4a06      	ldr	r2, [pc, #24]	; (5700 <CC_PalAbort+0x30>)
    56e6:	4c07      	ldr	r4, [pc, #28]	; (5704 <CC_PalAbort+0x34>)
    56e8:	60eb      	str	r3, [r5, #12]
    56ea:	6863      	ldr	r3, [r4, #4]
    56ec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    56f0:	bc30      	pop	{r4, r5}
    56f2:	4718      	bx	r3
    56f4:	50841404 	.word	0x50841404
    56f8:	50841400 	.word	0x50841400
    56fc:	50841408 	.word	0x50841408
    5700:	50840000 	.word	0x50840000
    5704:	2000c5f8 	.word	0x2000c5f8

00005708 <nrf_cc3xx_platform_set_abort>:
    5708:	4b02      	ldr	r3, [pc, #8]	; (5714 <nrf_cc3xx_platform_set_abort+0xc>)
    570a:	e9d0 1200 	ldrd	r1, r2, [r0]
    570e:	e9c3 1200 	strd	r1, r2, [r3]
    5712:	4770      	bx	lr
    5714:	2000c5f8 	.word	0x2000c5f8

00005718 <mbedtls_platform_zeroize>:
    5718:	b138      	cbz	r0, 572a <mbedtls_platform_zeroize+0x12>
    571a:	b131      	cbz	r1, 572a <mbedtls_platform_zeroize+0x12>
    571c:	2200      	movs	r2, #0
    571e:	4401      	add	r1, r0
    5720:	4603      	mov	r3, r0
    5722:	3001      	adds	r0, #1
    5724:	4288      	cmp	r0, r1
    5726:	701a      	strb	r2, [r3, #0]
    5728:	d1fa      	bne.n	5720 <mbedtls_platform_zeroize+0x8>
    572a:	4770      	bx	lr

0000572c <CC_LibInitNoRng>:
    572c:	b510      	push	{r4, lr}
    572e:	f000 f833 	bl	5798 <CC_HalInit>
    5732:	b120      	cbz	r0, 573e <CC_LibInitNoRng+0x12>
    5734:	2403      	movs	r4, #3
    5736:	f000 f867 	bl	5808 <CC_PalTerminate>
    573a:	4620      	mov	r0, r4
    573c:	bd10      	pop	{r4, pc}
    573e:	f000 f835 	bl	57ac <CC_PalInit>
    5742:	b990      	cbnz	r0, 576a <CC_LibInitNoRng+0x3e>
    5744:	f000 f8b0 	bl	58a8 <CC_PalPowerSaveModeSelect>
    5748:	b990      	cbnz	r0, 5770 <CC_LibInitNoRng+0x44>
    574a:	4b0f      	ldr	r3, [pc, #60]	; (5788 <CC_LibInitNoRng+0x5c>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	0e1b      	lsrs	r3, r3, #24
    5750:	2bf0      	cmp	r3, #240	; 0xf0
    5752:	d108      	bne.n	5766 <CC_LibInitNoRng+0x3a>
    5754:	4a0d      	ldr	r2, [pc, #52]	; (578c <CC_LibInitNoRng+0x60>)
    5756:	4b0e      	ldr	r3, [pc, #56]	; (5790 <CC_LibInitNoRng+0x64>)
    5758:	6812      	ldr	r2, [r2, #0]
    575a:	429a      	cmp	r2, r3
    575c:	d00a      	beq.n	5774 <CC_LibInitNoRng+0x48>
    575e:	2407      	movs	r4, #7
    5760:	f000 f81c 	bl	579c <CC_HalTerminate>
    5764:	e7e7      	b.n	5736 <CC_LibInitNoRng+0xa>
    5766:	2406      	movs	r4, #6
    5768:	e7fa      	b.n	5760 <CC_LibInitNoRng+0x34>
    576a:	2404      	movs	r4, #4
    576c:	4620      	mov	r0, r4
    576e:	bd10      	pop	{r4, pc}
    5770:	2400      	movs	r4, #0
    5772:	e7f5      	b.n	5760 <CC_LibInitNoRng+0x34>
    5774:	2001      	movs	r0, #1
    5776:	f000 f897 	bl	58a8 <CC_PalPowerSaveModeSelect>
    577a:	4604      	mov	r4, r0
    577c:	2800      	cmp	r0, #0
    577e:	d1f7      	bne.n	5770 <CC_LibInitNoRng+0x44>
    5780:	4b04      	ldr	r3, [pc, #16]	; (5794 <CC_LibInitNoRng+0x68>)
    5782:	6018      	str	r0, [r3, #0]
    5784:	e7d9      	b.n	573a <CC_LibInitNoRng+0xe>
    5786:	bf00      	nop
    5788:	50841928 	.word	0x50841928
    578c:	50841a24 	.word	0x50841a24
    5790:	20e00000 	.word	0x20e00000
    5794:	50841a0c 	.word	0x50841a0c

00005798 <CC_HalInit>:
    5798:	2000      	movs	r0, #0
    579a:	4770      	bx	lr

0000579c <CC_HalTerminate>:
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr

000057a0 <CC_HalMaskInterrupt>:
    57a0:	4b01      	ldr	r3, [pc, #4]	; (57a8 <CC_HalMaskInterrupt+0x8>)
    57a2:	6018      	str	r0, [r3, #0]
    57a4:	4770      	bx	lr
    57a6:	bf00      	nop
    57a8:	50841a04 	.word	0x50841a04

000057ac <CC_PalInit>:
    57ac:	b510      	push	{r4, lr}
    57ae:	4811      	ldr	r0, [pc, #68]	; (57f4 <CC_PalInit+0x48>)
    57b0:	f000 f848 	bl	5844 <CC_PalMutexCreate>
    57b4:	b100      	cbz	r0, 57b8 <CC_PalInit+0xc>
    57b6:	bd10      	pop	{r4, pc}
    57b8:	480f      	ldr	r0, [pc, #60]	; (57f8 <CC_PalInit+0x4c>)
    57ba:	f000 f843 	bl	5844 <CC_PalMutexCreate>
    57be:	2800      	cmp	r0, #0
    57c0:	d1f9      	bne.n	57b6 <CC_PalInit+0xa>
    57c2:	4c0e      	ldr	r4, [pc, #56]	; (57fc <CC_PalInit+0x50>)
    57c4:	4620      	mov	r0, r4
    57c6:	f000 f83d 	bl	5844 <CC_PalMutexCreate>
    57ca:	2800      	cmp	r0, #0
    57cc:	d1f3      	bne.n	57b6 <CC_PalInit+0xa>
    57ce:	4b0c      	ldr	r3, [pc, #48]	; (5800 <CC_PalInit+0x54>)
    57d0:	480c      	ldr	r0, [pc, #48]	; (5804 <CC_PalInit+0x58>)
    57d2:	601c      	str	r4, [r3, #0]
    57d4:	f000 f836 	bl	5844 <CC_PalMutexCreate>
    57d8:	4601      	mov	r1, r0
    57da:	2800      	cmp	r0, #0
    57dc:	d1eb      	bne.n	57b6 <CC_PalInit+0xa>
    57de:	f000 f82d 	bl	583c <CC_PalDmaInit>
    57e2:	4604      	mov	r4, r0
    57e4:	b108      	cbz	r0, 57ea <CC_PalInit+0x3e>
    57e6:	4620      	mov	r0, r4
    57e8:	bd10      	pop	{r4, pc}
    57ea:	f000 f83f 	bl	586c <CC_PalPowerSaveModeInit>
    57ee:	4620      	mov	r0, r4
    57f0:	e7fa      	b.n	57e8 <CC_PalInit+0x3c>
    57f2:	bf00      	nop
    57f4:	2000c60c 	.word	0x2000c60c
    57f8:	2000c600 	.word	0x2000c600
    57fc:	2000c608 	.word	0x2000c608
    5800:	2000c610 	.word	0x2000c610
    5804:	2000c604 	.word	0x2000c604

00005808 <CC_PalTerminate>:
    5808:	b508      	push	{r3, lr}
    580a:	4808      	ldr	r0, [pc, #32]	; (582c <CC_PalTerminate+0x24>)
    580c:	f000 f824 	bl	5858 <CC_PalMutexDestroy>
    5810:	4807      	ldr	r0, [pc, #28]	; (5830 <CC_PalTerminate+0x28>)
    5812:	f000 f821 	bl	5858 <CC_PalMutexDestroy>
    5816:	4807      	ldr	r0, [pc, #28]	; (5834 <CC_PalTerminate+0x2c>)
    5818:	f000 f81e 	bl	5858 <CC_PalMutexDestroy>
    581c:	4806      	ldr	r0, [pc, #24]	; (5838 <CC_PalTerminate+0x30>)
    581e:	f000 f81b 	bl	5858 <CC_PalMutexDestroy>
    5822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5826:	f000 b80b 	b.w	5840 <CC_PalDmaTerminate>
    582a:	bf00      	nop
    582c:	2000c60c 	.word	0x2000c60c
    5830:	2000c600 	.word	0x2000c600
    5834:	2000c608 	.word	0x2000c608
    5838:	2000c604 	.word	0x2000c604

0000583c <CC_PalDmaInit>:
    583c:	2000      	movs	r0, #0
    583e:	4770      	bx	lr

00005840 <CC_PalDmaTerminate>:
    5840:	4770      	bx	lr
    5842:	bf00      	nop

00005844 <CC_PalMutexCreate>:
    5844:	b508      	push	{r3, lr}
    5846:	4b03      	ldr	r3, [pc, #12]	; (5854 <CC_PalMutexCreate+0x10>)
    5848:	6802      	ldr	r2, [r0, #0]
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	6810      	ldr	r0, [r2, #0]
    584e:	4798      	blx	r3
    5850:	2000      	movs	r0, #0
    5852:	bd08      	pop	{r3, pc}
    5854:	2000c61c 	.word	0x2000c61c

00005858 <CC_PalMutexDestroy>:
    5858:	b508      	push	{r3, lr}
    585a:	4b03      	ldr	r3, [pc, #12]	; (5868 <CC_PalMutexDestroy+0x10>)
    585c:	6802      	ldr	r2, [r0, #0]
    585e:	685b      	ldr	r3, [r3, #4]
    5860:	6810      	ldr	r0, [r2, #0]
    5862:	4798      	blx	r3
    5864:	2000      	movs	r0, #0
    5866:	bd08      	pop	{r3, pc}
    5868:	2000c61c 	.word	0x2000c61c

0000586c <CC_PalPowerSaveModeInit>:
    586c:	b570      	push	{r4, r5, r6, lr}
    586e:	4c09      	ldr	r4, [pc, #36]	; (5894 <CC_PalPowerSaveModeInit+0x28>)
    5870:	4d09      	ldr	r5, [pc, #36]	; (5898 <CC_PalPowerSaveModeInit+0x2c>)
    5872:	6920      	ldr	r0, [r4, #16]
    5874:	68ab      	ldr	r3, [r5, #8]
    5876:	4798      	blx	r3
    5878:	b118      	cbz	r0, 5882 <CC_PalPowerSaveModeInit+0x16>
    587a:	4b08      	ldr	r3, [pc, #32]	; (589c <CC_PalPowerSaveModeInit+0x30>)
    587c:	4808      	ldr	r0, [pc, #32]	; (58a0 <CC_PalPowerSaveModeInit+0x34>)
    587e:	685b      	ldr	r3, [r3, #4]
    5880:	4798      	blx	r3
    5882:	2100      	movs	r1, #0
    5884:	4a07      	ldr	r2, [pc, #28]	; (58a4 <CC_PalPowerSaveModeInit+0x38>)
    5886:	68eb      	ldr	r3, [r5, #12]
    5888:	6011      	str	r1, [r2, #0]
    588a:	6920      	ldr	r0, [r4, #16]
    588c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5890:	4718      	bx	r3
    5892:	bf00      	nop
    5894:	2000c62c 	.word	0x2000c62c
    5898:	2000c61c 	.word	0x2000c61c
    589c:	2000c5f8 	.word	0x2000c5f8
    58a0:	00008fd0 	.word	0x00008fd0
    58a4:	2000e078 	.word	0x2000e078

000058a8 <CC_PalPowerSaveModeSelect>:
    58a8:	b570      	push	{r4, r5, r6, lr}
    58aa:	4d1a      	ldr	r5, [pc, #104]	; (5914 <CC_PalPowerSaveModeSelect+0x6c>)
    58ac:	4e1a      	ldr	r6, [pc, #104]	; (5918 <CC_PalPowerSaveModeSelect+0x70>)
    58ae:	4604      	mov	r4, r0
    58b0:	68b2      	ldr	r2, [r6, #8]
    58b2:	6928      	ldr	r0, [r5, #16]
    58b4:	4790      	blx	r2
    58b6:	b9f0      	cbnz	r0, 58f6 <CC_PalPowerSaveModeSelect+0x4e>
    58b8:	b15c      	cbz	r4, 58d2 <CC_PalPowerSaveModeSelect+0x2a>
    58ba:	4c18      	ldr	r4, [pc, #96]	; (591c <CC_PalPowerSaveModeSelect+0x74>)
    58bc:	6823      	ldr	r3, [r4, #0]
    58be:	b1ab      	cbz	r3, 58ec <CC_PalPowerSaveModeSelect+0x44>
    58c0:	2b01      	cmp	r3, #1
    58c2:	d01a      	beq.n	58fa <CC_PalPowerSaveModeSelect+0x52>
    58c4:	3b01      	subs	r3, #1
    58c6:	6023      	str	r3, [r4, #0]
    58c8:	6928      	ldr	r0, [r5, #16]
    58ca:	68f3      	ldr	r3, [r6, #12]
    58cc:	4798      	blx	r3
    58ce:	2000      	movs	r0, #0
    58d0:	bd70      	pop	{r4, r5, r6, pc}
    58d2:	4c12      	ldr	r4, [pc, #72]	; (591c <CC_PalPowerSaveModeSelect+0x74>)
    58d4:	6821      	ldr	r1, [r4, #0]
    58d6:	b939      	cbnz	r1, 58e8 <CC_PalPowerSaveModeSelect+0x40>
    58d8:	2001      	movs	r0, #1
    58da:	4b11      	ldr	r3, [pc, #68]	; (5920 <CC_PalPowerSaveModeSelect+0x78>)
    58dc:	4a11      	ldr	r2, [pc, #68]	; (5924 <CC_PalPowerSaveModeSelect+0x7c>)
    58de:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    58e2:	6813      	ldr	r3, [r2, #0]
    58e4:	2b00      	cmp	r3, #0
    58e6:	d1fc      	bne.n	58e2 <CC_PalPowerSaveModeSelect+0x3a>
    58e8:	3101      	adds	r1, #1
    58ea:	6021      	str	r1, [r4, #0]
    58ec:	68f3      	ldr	r3, [r6, #12]
    58ee:	6928      	ldr	r0, [r5, #16]
    58f0:	4798      	blx	r3
    58f2:	2000      	movs	r0, #0
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	480c      	ldr	r0, [pc, #48]	; (5928 <CC_PalPowerSaveModeSelect+0x80>)
    58f8:	bd70      	pop	{r4, r5, r6, pc}
    58fa:	4a0a      	ldr	r2, [pc, #40]	; (5924 <CC_PalPowerSaveModeSelect+0x7c>)
    58fc:	6813      	ldr	r3, [r2, #0]
    58fe:	2b00      	cmp	r3, #0
    5900:	d1fc      	bne.n	58fc <CC_PalPowerSaveModeSelect+0x54>
    5902:	4a07      	ldr	r2, [pc, #28]	; (5920 <CC_PalPowerSaveModeSelect+0x78>)
    5904:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5908:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    590c:	f7ff ff48 	bl	57a0 <CC_HalMaskInterrupt>
    5910:	6823      	ldr	r3, [r4, #0]
    5912:	e7d7      	b.n	58c4 <CC_PalPowerSaveModeSelect+0x1c>
    5914:	2000c62c 	.word	0x2000c62c
    5918:	2000c61c 	.word	0x2000c61c
    591c:	2000e078 	.word	0x2000e078
    5920:	50840000 	.word	0x50840000
    5924:	50841910 	.word	0x50841910
    5928:	ffff8fe9 	.word	0xffff8fe9

0000592c <mutex_free>:
    592c:	b510      	push	{r4, lr}
    592e:	4604      	mov	r4, r0
    5930:	b130      	cbz	r0, 5940 <mutex_free+0x14>
    5932:	6863      	ldr	r3, [r4, #4]
    5934:	06db      	lsls	r3, r3, #27
    5936:	d502      	bpl.n	593e <mutex_free+0x12>
    5938:	2300      	movs	r3, #0
    593a:	6023      	str	r3, [r4, #0]
    593c:	6063      	str	r3, [r4, #4]
    593e:	bd10      	pop	{r4, pc}
    5940:	4b02      	ldr	r3, [pc, #8]	; (594c <mutex_free+0x20>)
    5942:	4803      	ldr	r0, [pc, #12]	; (5950 <mutex_free+0x24>)
    5944:	685b      	ldr	r3, [r3, #4]
    5946:	4798      	blx	r3
    5948:	e7f3      	b.n	5932 <mutex_free+0x6>
    594a:	bf00      	nop
    594c:	2000c5f8 	.word	0x2000c5f8
    5950:	00008ff0 	.word	0x00008ff0

00005954 <mutex_unlock>:
    5954:	b168      	cbz	r0, 5972 <mutex_unlock+0x1e>
    5956:	6843      	ldr	r3, [r0, #4]
    5958:	b13b      	cbz	r3, 596a <mutex_unlock+0x16>
    595a:	06db      	lsls	r3, r3, #27
    595c:	d507      	bpl.n	596e <mutex_unlock+0x1a>
    595e:	f3bf 8f5f 	dmb	sy
    5962:	2300      	movs	r3, #0
    5964:	6003      	str	r3, [r0, #0]
    5966:	4618      	mov	r0, r3
    5968:	4770      	bx	lr
    596a:	4803      	ldr	r0, [pc, #12]	; (5978 <mutex_unlock+0x24>)
    596c:	4770      	bx	lr
    596e:	4803      	ldr	r0, [pc, #12]	; (597c <mutex_unlock+0x28>)
    5970:	4770      	bx	lr
    5972:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5976:	4770      	bx	lr
    5978:	ffff8fea 	.word	0xffff8fea
    597c:	ffff8fe9 	.word	0xffff8fe9

00005980 <mutex_init>:
    5980:	b510      	push	{r4, lr}
    5982:	4604      	mov	r4, r0
    5984:	b120      	cbz	r0, 5990 <mutex_init+0x10>
    5986:	2200      	movs	r2, #0
    5988:	2311      	movs	r3, #17
    598a:	6022      	str	r2, [r4, #0]
    598c:	6063      	str	r3, [r4, #4]
    598e:	bd10      	pop	{r4, pc}
    5990:	4801      	ldr	r0, [pc, #4]	; (5998 <mutex_init+0x18>)
    5992:	f7ff fe9d 	bl	56d0 <CC_PalAbort>
    5996:	e7f6      	b.n	5986 <mutex_init+0x6>
    5998:	00009018 	.word	0x00009018

0000599c <mutex_lock>:
    599c:	b1a0      	cbz	r0, 59c8 <mutex_lock+0x2c>
    599e:	6843      	ldr	r3, [r0, #4]
    59a0:	b183      	cbz	r3, 59c4 <mutex_lock+0x28>
    59a2:	06db      	lsls	r3, r3, #27
    59a4:	d50c      	bpl.n	59c0 <mutex_lock+0x24>
    59a6:	2201      	movs	r2, #1
    59a8:	e8d0 3fef 	ldaex	r3, [r0]
    59ac:	e8c0 2fe1 	stlex	r1, r2, [r0]
    59b0:	2900      	cmp	r1, #0
    59b2:	d1f9      	bne.n	59a8 <mutex_lock+0xc>
    59b4:	2b01      	cmp	r3, #1
    59b6:	d0f7      	beq.n	59a8 <mutex_lock+0xc>
    59b8:	f3bf 8f5f 	dmb	sy
    59bc:	2000      	movs	r0, #0
    59be:	4770      	bx	lr
    59c0:	4803      	ldr	r0, [pc, #12]	; (59d0 <mutex_lock+0x34>)
    59c2:	4770      	bx	lr
    59c4:	4803      	ldr	r0, [pc, #12]	; (59d4 <mutex_lock+0x38>)
    59c6:	4770      	bx	lr
    59c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    59cc:	4770      	bx	lr
    59ce:	bf00      	nop
    59d0:	ffff8fe9 	.word	0xffff8fe9
    59d4:	ffff8fea 	.word	0xffff8fea

000059d8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    59d8:	4770      	bx	lr

000059da <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    59da:	b129      	cbz	r1, 59e8 <flash_area_id_from_multi_image_slot+0xe>
    59dc:	2901      	cmp	r1, #1
    59de:	bf14      	ite	ne
    59e0:	f06f 0015 	mvnne.w	r0, #21
    59e4:	2006      	moveq	r0, #6
    59e6:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    59e8:	2002      	movs	r0, #2
}
    59ea:	4770      	bx	lr

000059ec <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    59ec:	2000      	movs	r0, #0
    59ee:	4770      	bx	lr

000059f0 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    59f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    59f4:	460e      	mov	r6, r1
    59f6:	4617      	mov	r7, r2
    59f8:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    59fa:	4604      	mov	r4, r0
    59fc:	b928      	cbnz	r0, 5a0a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    59fe:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5a02:	4640      	mov	r0, r8
    5a04:	b003      	add	sp, #12
    5a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5a0a:	2900      	cmp	r1, #0
    5a0c:	d0f7      	beq.n	59fe <bootutil_tlv_iter_begin+0xe>
    5a0e:	2a00      	cmp	r2, #0
    5a10:	d0f5      	beq.n	59fe <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5a12:	68cb      	ldr	r3, [r1, #12]
    5a14:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5a16:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5a18:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5a1a:	2304      	movs	r3, #4
    5a1c:	4629      	mov	r1, r5
    5a1e:	eb0d 0203 	add.w	r2, sp, r3
    5a22:	f000 fb64 	bl	60ee <flash_area_read>
    5a26:	4680      	mov	r8, r0
    5a28:	2800      	cmp	r0, #0
    5a2a:	d1e8      	bne.n	59fe <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a2c:	f646 1208 	movw	r2, #26888	; 0x6908
    5a30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5a34:	8973      	ldrh	r3, [r6, #10]
    5a36:	4291      	cmp	r1, r2
    5a38:	d123      	bne.n	5a82 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5a3a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5a3e:	4299      	cmp	r1, r3
    5a40:	d1dd      	bne.n	59fe <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5a42:	2304      	movs	r3, #4
    5a44:	4638      	mov	r0, r7
    5a46:	eb0d 0203 	add.w	r2, sp, r3
    5a4a:	4429      	add	r1, r5
    5a4c:	f000 fb4f 	bl	60ee <flash_area_read>
    5a50:	2800      	cmp	r0, #0
    5a52:	d1d4      	bne.n	59fe <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5a54:	f646 1307 	movw	r3, #26887	; 0x6907
    5a58:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5a5c:	429a      	cmp	r2, r3
    5a5e:	d1ce      	bne.n	59fe <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5a60:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5a64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    5a68:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5a6a:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    5a6c:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5a70:	442b      	add	r3, r5
    5a72:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    5a74:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5a76:	4413      	add	r3, r2
    it->type = type;
    5a78:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5a7c:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5a7e:	6125      	str	r5, [r4, #16]
    return 0;
    5a80:	e7bf      	b.n	5a02 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5a82:	2b00      	cmp	r3, #0
    5a84:	d0e6      	beq.n	5a54 <bootutil_tlv_iter_begin+0x64>
    5a86:	e7ba      	b.n	59fe <bootutil_tlv_iter_begin+0xe>

00005a88 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5a8c:	460f      	mov	r7, r1
    5a8e:	4690      	mov	r8, r2
    5a90:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5a92:	4604      	mov	r4, r0
    5a94:	b920      	cbnz	r0, 5aa0 <bootutil_tlv_iter_next+0x18>
        return -1;
    5a96:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5a9a:	b003      	add	sp, #12
    5a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5aa0:	6803      	ldr	r3, [r0, #0]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d0f7      	beq.n	5a96 <bootutil_tlv_iter_next+0xe>
    5aa6:	6843      	ldr	r3, [r0, #4]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d0f4      	beq.n	5a96 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5aac:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5ab0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5ab4:	429a      	cmp	r2, r3
    5ab6:	d216      	bcs.n	5ae6 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5ab8:	6823      	ldr	r3, [r4, #0]
    5aba:	895b      	ldrh	r3, [r3, #10]
    5abc:	b123      	cbz	r3, 5ac8 <bootutil_tlv_iter_next+0x40>
    5abe:	68e3      	ldr	r3, [r4, #12]
    5ac0:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5ac2:	bf04      	itt	eq
    5ac4:	3304      	addeq	r3, #4
    5ac6:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5ac8:	2304      	movs	r3, #4
    5aca:	6921      	ldr	r1, [r4, #16]
    5acc:	6860      	ldr	r0, [r4, #4]
    5ace:	eb0d 0203 	add.w	r2, sp, r3
    5ad2:	f000 fb0c 	bl	60ee <flash_area_read>
        if (rc) {
    5ad6:	2800      	cmp	r0, #0
    5ad8:	d1dd      	bne.n	5a96 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5ada:	7aa3      	ldrb	r3, [r4, #10]
    5adc:	6925      	ldr	r5, [r4, #16]
    5ade:	b123      	cbz	r3, 5aea <bootutil_tlv_iter_next+0x62>
    5ae0:	68e3      	ldr	r3, [r4, #12]
    5ae2:	42ab      	cmp	r3, r5
    5ae4:	d801      	bhi.n	5aea <bootutil_tlv_iter_next+0x62>
            return 1;
    5ae6:	2001      	movs	r0, #1
    5ae8:	e7d7      	b.n	5a9a <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5aea:	8921      	ldrh	r1, [r4, #8]
    5aec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5af0:	4549      	cmp	r1, r9
    5af2:	f103 0204 	add.w	r2, r3, #4
    5af6:	d003      	beq.n	5b00 <bootutil_tlv_iter_next+0x78>
    5af8:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5afc:	458c      	cmp	ip, r1
    5afe:	d10b      	bne.n	5b18 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5b00:	b116      	cbz	r6, 5b08 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5b02:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5b06:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5b08:	3504      	adds	r5, #4
    5b0a:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5b0c:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5b10:	6923      	ldr	r3, [r4, #16]
    5b12:	4413      	add	r3, r2
    5b14:	6123      	str	r3, [r4, #16]
            return 0;
    5b16:	e7c0      	b.n	5a9a <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5b18:	4415      	add	r5, r2
    5b1a:	6125      	str	r5, [r4, #16]
    5b1c:	e7c8      	b.n	5ab0 <bootutil_tlv_iter_next+0x28>

00005b1e <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    5b1e:	f000 be41 	b.w	67a4 <memcmp>

00005b22 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5b22:	f44f 7340 	mov.w	r3, #768	; 0x300
    5b26:	4358      	muls	r0, r3
}
    5b28:	3030      	adds	r0, #48	; 0x30
    5b2a:	4770      	bx	lr

00005b2c <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5b2c:	780b      	ldrb	r3, [r1, #0]
    5b2e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    5b32:	2b02      	cmp	r3, #2
}
    5b34:	bf14      	ite	ne
    5b36:	f04f 30ff 	movne.w	r0, #4294967295
    5b3a:	f44f 7040 	moveq.w	r0, #768	; 0x300
    5b3e:	4770      	bx	lr

00005b40 <boot_status_off>:
{
    5b40:	b510      	push	{r4, lr}
    5b42:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5b44:	f000 fb51 	bl	61ea <flash_area_align>
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5b48:	b2c3      	uxtb	r3, r0
}
    5b4a:	f44f 7040 	mov.w	r0, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    5b4e:	68a2      	ldr	r2, [r4, #8]
    5b50:	3a30      	subs	r2, #48	; 0x30
}
    5b52:	fb00 2013 	mls	r0, r0, r3, r2
    5b56:	bd10      	pop	{r4, pc}

00005b58 <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5b58:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5b5a:	2201      	movs	r2, #1
    5b5c:	3920      	subs	r1, #32
    5b5e:	f001 b9c2 	b.w	6ee6 <boot_write_trailer_flag>

00005b62 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5b62:	b513      	push	{r0, r1, r4, lr}
    5b64:	4604      	mov	r4, r0
    5b66:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5b68:	f001 f95a 	bl	6e20 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5b6c:	2304      	movs	r3, #4
    5b6e:	f1a0 0108 	sub.w	r1, r0, #8
    5b72:	eb0d 0203 	add.w	r2, sp, r3
    5b76:	4620      	mov	r0, r4
    5b78:	f001 f986 	bl	6e88 <boot_write_trailer>
}
    5b7c:	b002      	add	sp, #8
    5b7e:	bd10      	pop	{r4, pc}

00005b80 <boot_read_image_size>:
{
    5b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b82:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5b84:	2000      	movs	r0, #0
{
    5b86:	460c      	mov	r4, r1
    5b88:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5b8a:	f7ff ff26 	bl	59da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5b8e:	4669      	mov	r1, sp
    5b90:	b2c0      	uxtb	r0, r0
    5b92:	f7fc f8f3 	bl	1d7c <flash_area_open>
    if (rc != 0) {
    5b96:	b130      	cbz	r0, 5ba6 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    5b98:	2501      	movs	r5, #1
    flash_area_close(fap);
    5b9a:	9800      	ldr	r0, [sp, #0]
    5b9c:	f000 faa6 	bl	60ec <flash_area_close>
}
    5ba0:	4628      	mov	r0, r5
    5ba2:	b003      	add	sp, #12
    5ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5ba6:	212c      	movs	r1, #44	; 0x2c
    5ba8:	fb01 5404 	mla	r4, r1, r4, r5
    5bac:	8921      	ldrh	r1, [r4, #8]
    5bae:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5bb0:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5bb2:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5bb4:	2304      	movs	r3, #4
    5bb6:	4631      	mov	r1, r6
    5bb8:	eb0d 0203 	add.w	r2, sp, r3
    5bbc:	f000 fa97 	bl	60ee <flash_area_read>
    5bc0:	4605      	mov	r5, r0
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d1e8      	bne.n	5b98 <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5bc6:	f646 1308 	movw	r3, #26888	; 0x6908
    5bca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5bce:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5bd0:	429a      	cmp	r2, r3
    5bd2:	d11a      	bne.n	5c0a <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5bd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5bd8:	429c      	cmp	r4, r3
    5bda:	d001      	beq.n	5be0 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    5bdc:	2503      	movs	r5, #3
    5bde:	e7dc      	b.n	5b9a <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5be0:	2304      	movs	r3, #4
    5be2:	9800      	ldr	r0, [sp, #0]
    5be4:	eb0d 0203 	add.w	r2, sp, r3
    5be8:	19a1      	adds	r1, r4, r6
    5bea:	f000 fa80 	bl	60ee <flash_area_read>
    5bee:	2800      	cmp	r0, #0
    5bf0:	d1d2      	bne.n	5b98 <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5bf2:	f646 1307 	movw	r3, #26887	; 0x6907
    5bf6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5bfa:	429a      	cmp	r2, r3
    5bfc:	d1ee      	bne.n	5bdc <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5bfe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5c02:	4421      	add	r1, r4
    5c04:	4431      	add	r1, r6
    5c06:	6039      	str	r1, [r7, #0]
    rc = 0;
    5c08:	e7c7      	b.n	5b9a <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    5c0a:	2c00      	cmp	r4, #0
    5c0c:	d0f1      	beq.n	5bf2 <boot_read_image_size+0x72>
    5c0e:	e7e5      	b.n	5bdc <boot_read_image_size+0x5c>

00005c10 <boot_read_image_headers>:
{
    5c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5c12:	4613      	mov	r3, r2
{
    5c14:	460f      	mov	r7, r1
    5c16:	4616      	mov	r6, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5c18:	2100      	movs	r1, #0
    5c1a:	4602      	mov	r2, r0
{
    5c1c:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5c1e:	f7fb f947 	bl	eb0 <boot_read_image_header>
        if (rc != 0) {
    5c22:	4604      	mov	r4, r0
    5c24:	b950      	cbnz	r0, 5c3c <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5c26:	4633      	mov	r3, r6
    5c28:	2101      	movs	r1, #1
    5c2a:	4628      	mov	r0, r5
    5c2c:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    5c30:	f7fb f93e 	bl	eb0 <boot_read_image_header>
        if (rc != 0) {
    5c34:	b110      	cbz	r0, 5c3c <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    5c36:	2f00      	cmp	r7, #0
    5c38:	bf18      	it	ne
    5c3a:	4604      	movne	r4, r0
}
    5c3c:	4620      	mov	r0, r4
    5c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005c40 <boot_read_sectors>:
{
    5c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5c42:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5c46:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5c48:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5c4a:	a901      	add	r1, sp, #4
    5c4c:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5c4e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5c50:	f7fc f8b2 	bl	1db8 <flash_area_get_sectors>
    if (rc != 0) {
    5c54:	b958      	cbnz	r0, 5c6e <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    5c56:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5c58:	2006      	movs	r0, #6
    5c5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5c5c:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5c5e:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5c60:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5c62:	f7fc f8a9 	bl	1db8 <flash_area_get_sectors>
    if (rc != 0) {
    5c66:	4605      	mov	r5, r0
    5c68:	b128      	cbz	r0, 5c76 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    5c6a:	2509      	movs	r5, #9
    5c6c:	e000      	b.n	5c70 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    5c6e:	2501      	movs	r5, #1
}
    5c70:	4628      	mov	r0, r5
    5c72:	b003      	add	sp, #12
    5c74:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5c76:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5c78:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5c7a:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5c7c:	f000 fab5 	bl	61ea <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5c80:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5c82:	e7f5      	b.n	5c70 <boot_read_sectors+0x30>

00005c84 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5c84:	2301      	movs	r3, #1
    5c86:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5c88:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5c8c:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5c8e:	2300      	movs	r3, #0
    bs->source = 0;
    5c90:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5c94:	4770      	bx	lr

00005c96 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5c96:	7943      	ldrb	r3, [r0, #5]
    5c98:	2b01      	cmp	r3, #1
    5c9a:	d107      	bne.n	5cac <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5c9c:	6803      	ldr	r3, [r0, #0]
    5c9e:	2b01      	cmp	r3, #1
    5ca0:	d104      	bne.n	5cac <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5ca2:	7900      	ldrb	r0, [r0, #4]
    5ca4:	1e43      	subs	r3, r0, #1
    5ca6:	4258      	negs	r0, r3
    5ca8:	4158      	adcs	r0, r3
    5caa:	4770      	bx	lr
    5cac:	2000      	movs	r0, #0
}
    5cae:	4770      	bx	lr

00005cb0 <boot_write_status>:
{
    5cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5cb2:	4606      	mov	r6, r0
    5cb4:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5cb6:	2002      	movs	r0, #2
    5cb8:	a901      	add	r1, sp, #4
    5cba:	f7fc f85f 	bl	1d7c <flash_area_open>
    if (rc != 0) {
    5cbe:	bb38      	cbnz	r0, 5d10 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5cc0:	9801      	ldr	r0, [sp, #4]
    5cc2:	f7ff ff3d 	bl	5b40 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5cc6:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5cc8:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5cca:	4628      	mov	r0, r5
    5ccc:	f000 f8e5 	bl	5e9a <boot_status_internal_off>
    off = boot_status_off(fap) +
    5cd0:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5cd2:	9801      	ldr	r0, [sp, #4]
    5cd4:	f000 fa89 	bl	61ea <flash_area_align>
    5cd8:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5cda:	9801      	ldr	r0, [sp, #4]
    5cdc:	f000 fa8e 	bl	61fc <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5ce0:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5ce2:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5ce4:	eb0d 0002 	add.w	r0, sp, r2
    5ce8:	f000 fd8e 	bl	6808 <memset>
    buf[0] = bs->state;
    5cec:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5cee:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5cf0:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5cf4:	9801      	ldr	r0, [sp, #4]
    5cf6:	b2f3      	uxtb	r3, r6
    5cf8:	aa02      	add	r2, sp, #8
    5cfa:	f000 fa14 	bl	6126 <flash_area_write>
    if (rc != 0) {
    5cfe:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5d00:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5d02:	bf18      	it	ne
    5d04:	2401      	movne	r4, #1
    flash_area_close(fap);
    5d06:	f000 f9f1 	bl	60ec <flash_area_close>
}
    5d0a:	4620      	mov	r0, r4
    5d0c:	b004      	add	sp, #16
    5d0e:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5d10:	2401      	movs	r4, #1
    5d12:	e7fa      	b.n	5d0a <boot_write_status+0x5a>

00005d14 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5d14:	f000 ba3a 	b.w	618c <flash_area_erase>

00005d18 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d1c:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5d1e:	2100      	movs	r1, #0
{
    5d20:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5d22:	4608      	mov	r0, r1
    5d24:	f7ff fe59 	bl	59da <flash_area_id_from_multi_image_slot>
    5d28:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5d2a:	2101      	movs	r1, #1
    5d2c:	2000      	movs	r0, #0
    5d2e:	f7ff fe54 	bl	59da <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5d32:	7833      	ldrb	r3, [r6, #0]
    5d34:	429c      	cmp	r4, r3
    5d36:	d021      	beq.n	5d7c <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5d38:	4298      	cmp	r0, r3
    5d3a:	d121      	bne.n	5d80 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5d3c:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    5d3e:	232c      	movs	r3, #44	; 0x2c
    5d40:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5d44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5d46:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5d48:	f7ff feeb 	bl	5b22 <boot_trailer_sz>
    total_sz = 0;
    5d4c:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5d50:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5d52:	3d01      	subs	r5, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5d56:	4630      	mov	r0, r6
    5d58:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5d5c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5d60:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	464a      	mov	r2, r9
    5d68:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5d6a:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5d6c:	f7ff ffd2 	bl	5d14 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5d70:	45b8      	cmp	r8, r7
        sector--;
    5d72:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    5d76:	d3ed      	bcc.n	5d54 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5d7c:	2400      	movs	r4, #0
    5d7e:	e7de      	b.n	5d3e <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5d80:	2001      	movs	r0, #1
    5d82:	e7f9      	b.n	5d78 <swap_erase_trailer_sectors+0x60>

00005d84 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d86:	4615      	mov	r5, r2
    5d88:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5d8a:	2006      	movs	r0, #6
    5d8c:	4669      	mov	r1, sp
    5d8e:	f001 f8bd 	bl	6f0c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5d92:	79e9      	ldrb	r1, [r5, #7]
    5d94:	2901      	cmp	r1, #1
    5d96:	d003      	beq.n	5da0 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5d98:	2200      	movs	r2, #0
    5d9a:	4620      	mov	r0, r4
    5d9c:	f001 f8ca 	bl	6f34 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5da0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5da4:	2b01      	cmp	r3, #1
    5da6:	d102      	bne.n	5dae <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5da8:	4620      	mov	r0, r4
    5daa:	f001 f8a6 	bl	6efa <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5dae:	68a9      	ldr	r1, [r5, #8]
    5db0:	4620      	mov	r0, r4
    5db2:	f7ff fed6 	bl	5b62 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5db6:	4620      	mov	r0, r4
    5db8:	f7fe f93e 	bl	4038 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5dbc:	2000      	movs	r0, #0
    5dbe:	b003      	add	sp, #12
    5dc0:	bd30      	pop	{r4, r5, pc}

00005dc2 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5dc4:	460d      	mov	r5, r1
    5dc6:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5dc8:	f7fb f95e 	bl	1088 <swap_status_source>
    5dcc:	4604      	mov	r4, r0
    5dce:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5dd0:	b350      	cbz	r0, 5e28 <swap_read_status+0x66>
    5dd2:	2802      	cmp	r0, #2
    5dd4:	d12d      	bne.n	5e32 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5dd6:	a901      	add	r1, sp, #4
    5dd8:	f7fb ffd0 	bl	1d7c <flash_area_open>
    if (rc != 0) {
    5ddc:	bb58      	cbnz	r0, 5e36 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5dde:	462a      	mov	r2, r5
    5de0:	4631      	mov	r1, r6
    5de2:	9801      	ldr	r0, [sp, #4]
    5de4:	f7fb f8b2 	bl	f4c <swap_read_status_bytes>
    if (rc == 0) {
    5de8:	4604      	mov	r4, r0
    5dea:	b9d0      	cbnz	r0, 5e22 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    5dec:	9801      	ldr	r0, [sp, #4]
    5dee:	f001 f817 	bl	6e20 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5df2:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5df4:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5df6:	f10d 0203 	add.w	r2, sp, #3
    5dfa:	9801      	ldr	r0, [sp, #4]
    5dfc:	f000 f977 	bl	60ee <flash_area_read>
        if (rc != 0) {
    5e00:	4604      	mov	r4, r0
    5e02:	b9a0      	cbnz	r0, 5e2e <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5e04:	2201      	movs	r2, #1
    5e06:	9801      	ldr	r0, [sp, #4]
    5e08:	f10d 0103 	add.w	r1, sp, #3
    5e0c:	f001 f819 	bl	6e42 <bootutil_buffer_is_erased>
    5e10:	b110      	cbz	r0, 5e18 <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5e12:	2301      	movs	r3, #1
    5e14:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5e18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e1c:	f003 030f 	and.w	r3, r3, #15
    5e20:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5e22:	9801      	ldr	r0, [sp, #4]
    5e24:	f000 f962 	bl	60ec <flash_area_close>

    return rc;
}
    5e28:	4620      	mov	r0, r4
    5e2a:	b002      	add	sp, #8
    5e2c:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5e2e:	2401      	movs	r4, #1
    5e30:	e7f7      	b.n	5e22 <swap_read_status+0x60>
    switch (bs->source) {
    5e32:	2407      	movs	r4, #7
    5e34:	e7f8      	b.n	5e28 <swap_read_status+0x66>
        return BOOT_EFLASH;
    5e36:	2401      	movs	r4, #1
    5e38:	e7f6      	b.n	5e28 <swap_read_status+0x66>

00005e3a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5e3a:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5e3c:	2002      	movs	r0, #2
    5e3e:	a901      	add	r1, sp, #4
    5e40:	f7fb ff9c 	bl	1d7c <flash_area_open>
            &fap);
    if (rc != 0) {
    5e44:	b948      	cbnz	r0, 5e5a <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5e46:	9801      	ldr	r0, [sp, #4]
    5e48:	f7ff fe86 	bl	5b58 <boot_write_copy_done>
    5e4c:	4604      	mov	r4, r0
    flash_area_close(fap);
    5e4e:	9801      	ldr	r0, [sp, #4]
    5e50:	f000 f94c 	bl	60ec <flash_area_close>
    return rc;
}
    5e54:	4620      	mov	r0, r4
    5e56:	b002      	add	sp, #8
    5e58:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5e5a:	2401      	movs	r4, #1
    5e5c:	e7fa      	b.n	5e54 <swap_set_copy_done+0x1a>

00005e5e <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5e5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5e60:	2002      	movs	r0, #2
    5e62:	a901      	add	r1, sp, #4
    5e64:	f7fb ff8a 	bl	1d7c <flash_area_open>
            &fap);
    if (rc != 0) {
    5e68:	b9a8      	cbnz	r0, 5e96 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5e6a:	9801      	ldr	r0, [sp, #4]
    5e6c:	a902      	add	r1, sp, #8
    5e6e:	f7fe f8f1 	bl	4054 <boot_read_swap_state>
    if (rc != 0) {
    5e72:	4604      	mov	r4, r0
    5e74:	b968      	cbnz	r0, 5e92 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5e76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5e7a:	2b03      	cmp	r3, #3
    5e7c:	d103      	bne.n	5e86 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5e7e:	9801      	ldr	r0, [sp, #4]
    5e80:	f001 f83b 	bl	6efa <boot_write_image_ok>
    5e84:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5e86:	9801      	ldr	r0, [sp, #4]
    5e88:	f000 f930 	bl	60ec <flash_area_close>
    return rc;
}
    5e8c:	4620      	mov	r0, r4
    5e8e:	b004      	add	sp, #16
    5e90:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5e92:	2401      	movs	r4, #1
    5e94:	e7f7      	b.n	5e86 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5e96:	2401      	movs	r4, #1
    5e98:	e7f8      	b.n	5e8c <swap_set_image_ok+0x2e>

00005e9a <boot_status_internal_off>:
{
    5e9a:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5e9c:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5e9e:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5ea0:	2b01      	cmp	r3, #1
    5ea2:	bf0a      	itet	eq
    5ea4:	2201      	moveq	r2, #1
    5ea6:	2202      	movne	r2, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5ea8:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5eaa:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5eae:	f104 34ff 	add.w	r4, r4, #4294967295
    5eb2:	fb02 f204 	mul.w	r2, r2, r4
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5eb6:	7903      	ldrb	r3, [r0, #4]
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5eb8:	bf18      	it	ne
    5eba:	020d      	lslne	r5, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5ebc:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5ebe:	fb01 2103 	mla	r1, r1, r3, r2
}
    5ec2:	1948      	adds	r0, r1, r5
    5ec4:	bd30      	pop	{r4, r5, pc}

00005ec6 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    5ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
    5eca:	f89d 4018 	ldrb.w	r4, [sp, #24]
    5ece:	4605      	mov	r5, r0
    5ed0:	2c00      	cmp	r4, #0
    5ed2:	bf14      	ite	ne
    5ed4:	2402      	movne	r4, #2
    5ed6:	2400      	moveq	r4, #0
	uint16_t crc = initial_value;
    5ed8:	4618      	mov	r0, r3

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    5eda:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
    5ede:	2300      	movs	r3, #0
    5ee0:	1867      	adds	r7, r4, r1
    5ee2:	429f      	cmp	r7, r3
    5ee4:	d81a      	bhi.n	5f1c <crc16+0x56>
			}
		}
	}

	return crc;
}
    5ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5eea:	4620      	mov	r0, r4
			crc = (crc << 1U);
    5eec:	0044      	lsls	r4, r0, #1
			if (i < len) {
    5eee:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    5ef0:	b2a4      	uxth	r4, r4
			if (i < len) {
    5ef2:	d208      	bcs.n	5f06 <crc16+0x40>
				crc |= !!(src[i] & (0x80U >> b));
    5ef4:	f895 8000 	ldrb.w	r8, [r5]
    5ef8:	fa2c fe06 	lsr.w	lr, ip, r6
    5efc:	ea18 0f0e 	tst.w	r8, lr
    5f00:	bf18      	it	ne
    5f02:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    5f06:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    5f08:	f106 0601 	add.w	r6, r6, #1
				crc = crc ^ polynomial;
    5f0c:	bf48      	it	mi
    5f0e:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    5f10:	2e08      	cmp	r6, #8
    5f12:	d1ea      	bne.n	5eea <crc16+0x24>
	for (i = 0; i < len + padding; i++) {
    5f14:	4620      	mov	r0, r4
    5f16:	3301      	adds	r3, #1
    5f18:	3501      	adds	r5, #1
    5f1a:	e7e2      	b.n	5ee2 <crc16+0x1c>
		for (b = 0; b < 8; b++) {
    5f1c:	2600      	movs	r6, #0
    5f1e:	e7e5      	b.n	5eec <crc16+0x26>

00005f20 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5f20:	4603      	mov	r3, r0
    5f22:	b158      	cbz	r0, 5f3c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5f24:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5f26:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5f2a:	2a01      	cmp	r2, #1
    5f2c:	d003      	beq.n	5f36 <sys_notify_validate+0x16>
    5f2e:	2a03      	cmp	r2, #3
    5f30:	d104      	bne.n	5f3c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5f32:	6802      	ldr	r2, [r0, #0]
    5f34:	b112      	cbz	r2, 5f3c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5f36:	2000      	movs	r0, #0
    5f38:	6098      	str	r0, [r3, #8]
    5f3a:	4770      	bx	lr
		return -EINVAL;
    5f3c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5f40:	4770      	bx	lr

00005f42 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5f42:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5f44:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5f46:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5f4a:	2a03      	cmp	r2, #3
    5f4c:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5f50:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5f52:	bf14      	ite	ne
    5f54:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5f56:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5f58:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5f5a:	4770      	bx	lr

00005f5c <arch_printk_char_out>:
}
    5f5c:	2000      	movs	r0, #0
    5f5e:	4770      	bx	lr

00005f60 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    5f60:	b40f      	push	{r0, r1, r2, r3}
    5f62:	b507      	push	{r0, r1, r2, lr}
    5f64:	a904      	add	r1, sp, #16
    5f66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5f6a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5f6c:	f7fb fba8 	bl	16c0 <vprintk>
	}
	va_end(ap);
}
    5f70:	b003      	add	sp, #12
    5f72:	f85d eb04 	ldr.w	lr, [sp], #4
    5f76:	b004      	add	sp, #16
    5f78:	4770      	bx	lr

00005f7a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5f7a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5f7c:	f013 0307 	ands.w	r3, r3, #7
    5f80:	d105      	bne.n	5f8e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5f82:	6803      	ldr	r3, [r0, #0]
    5f84:	2b00      	cmp	r3, #0
		evt = EVT_START;
    5f86:	bf0c      	ite	eq
    5f88:	2000      	moveq	r0, #0
    5f8a:	2003      	movne	r0, #3
    5f8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5f8e:	2b02      	cmp	r3, #2
    5f90:	d105      	bne.n	5f9e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5f92:	8b43      	ldrh	r3, [r0, #26]
    5f94:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    5f96:	bf14      	ite	ne
    5f98:	2000      	movne	r0, #0
    5f9a:	2004      	moveq	r0, #4
    5f9c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5f9e:	2b01      	cmp	r3, #1
    5fa0:	d105      	bne.n	5fae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5fa2:	6803      	ldr	r3, [r0, #0]
    5fa4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    5fa6:	bf0c      	ite	eq
    5fa8:	2000      	moveq	r0, #0
    5faa:	2005      	movne	r0, #5
    5fac:	4770      	bx	lr
	int evt = EVT_NOP;
    5fae:	2000      	movs	r0, #0
}
    5fb0:	4770      	bx	lr

00005fb2 <notify_one>:
{
    5fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb6:	460d      	mov	r5, r1
    5fb8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5fba:	4619      	mov	r1, r3
    5fbc:	1d28      	adds	r0, r5, #4
{
    5fbe:	4690      	mov	r8, r2
    5fc0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5fc2:	f7ff ffbe 	bl	5f42 <sys_notify_finalize>
	if (cb) {
    5fc6:	4604      	mov	r4, r0
    5fc8:	b138      	cbz	r0, 5fda <notify_one+0x28>
		cb(mgr, cli, state, res);
    5fca:	4633      	mov	r3, r6
    5fcc:	4642      	mov	r2, r8
    5fce:	4629      	mov	r1, r5
    5fd0:	4638      	mov	r0, r7
    5fd2:	46a4      	mov	ip, r4
}
    5fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5fd8:	4760      	bx	ip
}
    5fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005fde <transition_complete>:
{
    5fde:	b410      	push	{r4}
    5fe0:	f04f 0420 	mov.w	r4, #32
    5fe4:	f3ef 8211 	mrs	r2, BASEPRI
    5fe8:	f384 8812 	msr	BASEPRI_MAX, r4
    5fec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5ff0:	6141      	str	r1, [r0, #20]
}
    5ff2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5ff4:	2101      	movs	r1, #1
    5ff6:	f7fb bb71 	b.w	16dc <process_event>

00005ffa <validate_args>:
{
    5ffa:	b510      	push	{r4, lr}
    5ffc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5ffe:	b140      	cbz	r0, 6012 <validate_args+0x18>
    6000:	b139      	cbz	r1, 6012 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6002:	1d08      	adds	r0, r1, #4
    6004:	f7ff ff8c 	bl	5f20 <sys_notify_validate>
	if ((rv == 0)
    6008:	b928      	cbnz	r0, 6016 <validate_args+0x1c>
	    && ((cli->notify.flags
    600a:	68a3      	ldr	r3, [r4, #8]
    600c:	f033 0303 	bics.w	r3, r3, #3
    6010:	d001      	beq.n	6016 <validate_args+0x1c>
		rv = -EINVAL;
    6012:	f06f 0015 	mvn.w	r0, #21
}
    6016:	bd10      	pop	{r4, pc}

00006018 <onoff_manager_init>:
{
    6018:	b538      	push	{r3, r4, r5, lr}
    601a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    601c:	4605      	mov	r5, r0
    601e:	b158      	cbz	r0, 6038 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6020:	b151      	cbz	r1, 6038 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6022:	680b      	ldr	r3, [r1, #0]
    6024:	b143      	cbz	r3, 6038 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6026:	684b      	ldr	r3, [r1, #4]
    6028:	b133      	cbz	r3, 6038 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    602a:	221c      	movs	r2, #28
    602c:	2100      	movs	r1, #0
    602e:	f000 fbeb 	bl	6808 <memset>
	return 0;
    6032:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6034:	612c      	str	r4, [r5, #16]
}
    6036:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6038:	f06f 0015 	mvn.w	r0, #21
    603c:	e7fb      	b.n	6036 <onoff_manager_init+0x1e>

0000603e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    603e:	b570      	push	{r4, r5, r6, lr}
    6040:	4604      	mov	r4, r0
    6042:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6044:	f7ff ffd9 	bl	5ffa <validate_args>

	if (rv < 0) {
    6048:	1e05      	subs	r5, r0, #0
    604a:	db31      	blt.n	60b0 <onoff_request+0x72>
    604c:	f04f 0320 	mov.w	r3, #32
    6050:	f3ef 8111 	mrs	r1, BASEPRI
    6054:	f383 8812 	msr	BASEPRI_MAX, r3
    6058:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    605c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6060:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6062:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    6064:	42ab      	cmp	r3, r5
    6066:	f000 0207 	and.w	r2, r0, #7
    606a:	d02e      	beq.n	60ca <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    606c:	2a02      	cmp	r2, #2
    606e:	d10e      	bne.n	608e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6070:	3301      	adds	r3, #1
    6072:	8363      	strh	r3, [r4, #26]
	rv = state;
    6074:	4615      	mov	r5, r2
		notify = true;
    6076:	2301      	movs	r3, #1
	__asm__ volatile(
    6078:	f381 8811 	msr	BASEPRI, r1
    607c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6080:	b1b3      	cbz	r3, 60b0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    6082:	2300      	movs	r3, #0
    6084:	4631      	mov	r1, r6
    6086:	4620      	mov	r0, r4
    6088:	f7ff ff93 	bl	5fb2 <notify_one>
    608c:	e010      	b.n	60b0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    608e:	0783      	lsls	r3, r0, #30
    6090:	d001      	beq.n	6096 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    6092:	2a06      	cmp	r2, #6
    6094:	d10e      	bne.n	60b4 <onoff_request+0x76>
	parent->next = child;
    6096:	2300      	movs	r3, #0
    6098:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    609a:	6863      	ldr	r3, [r4, #4]
    609c:	b993      	cbnz	r3, 60c4 <onoff_request+0x86>
	list->head = node;
    609e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    60a2:	4615      	mov	r5, r2
    60a4:	b962      	cbnz	r2, 60c0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    60a6:	460a      	mov	r2, r1
    60a8:	4620      	mov	r0, r4
    60aa:	2102      	movs	r1, #2
    60ac:	f7fb fb16 	bl	16dc <process_event>
		}
	}

	return rv;
}
    60b0:	4628      	mov	r0, r5
    60b2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    60b4:	2a05      	cmp	r2, #5
    60b6:	bf0c      	ite	eq
    60b8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    60bc:	f06f 0504 	mvnne.w	r5, #4
    60c0:	2300      	movs	r3, #0
    60c2:	e7d9      	b.n	6078 <onoff_request+0x3a>
	parent->next = child;
    60c4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    60c6:	6066      	str	r6, [r4, #4]
}
    60c8:	e7eb      	b.n	60a2 <onoff_request+0x64>
		rv = -EAGAIN;
    60ca:	f06f 050a 	mvn.w	r5, #10
    60ce:	e7f7      	b.n	60c0 <onoff_request+0x82>

000060d0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    60d0:	4770      	bx	lr

000060d2 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    60d2:	b40f      	push	{r0, r1, r2, r3}
    60d4:	b507      	push	{r0, r1, r2, lr}
    60d6:	a904      	add	r1, sp, #16
    60d8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    60dc:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    60de:	f7fb faef 	bl	16c0 <vprintk>
	va_end(ap);
}
    60e2:	b003      	add	sp, #12
    60e4:	f85d eb04 	ldr.w	lr, [sp], #4
    60e8:	b004      	add	sp, #16
    60ea:	4770      	bx	lr

000060ec <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    60ec:	4770      	bx	lr

000060ee <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    60ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    60f2:	1e0c      	subs	r4, r1, #0
    60f4:	4605      	mov	r5, r0
    60f6:	4617      	mov	r7, r2
    60f8:	461e      	mov	r6, r3
    60fa:	db10      	blt.n	611e <flash_area_read+0x30>
    60fc:	6882      	ldr	r2, [r0, #8]
    60fe:	18e3      	adds	r3, r4, r3
    6100:	4293      	cmp	r3, r2
    6102:	d80c      	bhi.n	611e <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6104:	68c0      	ldr	r0, [r0, #12]
    6106:	f7ff f927 	bl	5358 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    610a:	6869      	ldr	r1, [r5, #4]
    610c:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    610e:	6883      	ldr	r3, [r0, #8]
    6110:	463a      	mov	r2, r7
    6112:	681c      	ldr	r4, [r3, #0]
    6114:	4633      	mov	r3, r6
    6116:	46a4      	mov	ip, r4
}
    6118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    611c:	4760      	bx	ip
    611e:	f06f 0015 	mvn.w	r0, #21
    6122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006126 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6126:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    612a:	f1b1 0900 	subs.w	r9, r1, #0
    612e:	4680      	mov	r8, r0
    6130:	4617      	mov	r7, r2
    6132:	461e      	mov	r6, r3
    6134:	db27      	blt.n	6186 <flash_area_write+0x60>
    6136:	6882      	ldr	r2, [r0, #8]
    6138:	444b      	add	r3, r9
    613a:	4293      	cmp	r3, r2
    613c:	d823      	bhi.n	6186 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    613e:	68c0      	ldr	r0, [r0, #12]
    6140:	f7ff f90a 	bl	5358 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6144:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6148:	4605      	mov	r5, r0
    614a:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    614c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    6150:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6154:	b96b      	cbnz	r3, 6172 <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    6156:	4633      	mov	r3, r6
    6158:	f8d8 4004 	ldr.w	r4, [r8, #4]
    615c:	463a      	mov	r2, r7
    615e:	4649      	mov	r1, r9
    6160:	4628      	mov	r0, r5
    6162:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    6164:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    6168:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    616a:	b943      	cbnz	r3, 617e <flash_area_write+0x58>

	return rc;
}
    616c:	4620      	mov	r0, r4
    616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    6172:	2100      	movs	r1, #0
    6174:	4798      	blx	r3
		if (rc) {
    6176:	4604      	mov	r4, r0
    6178:	2800      	cmp	r0, #0
    617a:	d0ec      	beq.n	6156 <flash_area_write+0x30>
    617c:	e7f6      	b.n	616c <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    617e:	2101      	movs	r1, #1
    6180:	4628      	mov	r0, r5
    6182:	4798      	blx	r3
    6184:	e7f2      	b.n	616c <flash_area_write+0x46>
		return -EINVAL;
    6186:	f06f 0415 	mvn.w	r4, #21
    618a:	e7ef      	b.n	616c <flash_area_write+0x46>

0000618c <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6190:	1e0c      	subs	r4, r1, #0
    6192:	4605      	mov	r5, r0
    6194:	4617      	mov	r7, r2
    6196:	db25      	blt.n	61e4 <flash_area_erase+0x58>
    6198:	18a3      	adds	r3, r4, r2
    619a:	6882      	ldr	r2, [r0, #8]
    619c:	4293      	cmp	r3, r2
    619e:	d821      	bhi.n	61e4 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    61a0:	68c0      	ldr	r0, [r0, #12]
    61a2:	f7ff f8d9 	bl	5358 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    61a6:	686d      	ldr	r5, [r5, #4]
    61a8:	4606      	mov	r6, r0
    61aa:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    61ac:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    61b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    61b4:	b963      	cbnz	r3, 61d0 <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    61b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    61ba:	463a      	mov	r2, r7
    61bc:	4629      	mov	r1, r5
    61be:	4630      	mov	r0, r6
    61c0:	4798      	blx	r3

	if (api->write_protection != NULL) {
    61c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    61c6:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    61c8:	b943      	cbnz	r3, 61dc <flash_area_erase+0x50>

	return rc;
}
    61ca:	4620      	mov	r0, r4
    61cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    61d0:	2100      	movs	r1, #0
    61d2:	4798      	blx	r3
		if (rc) {
    61d4:	4604      	mov	r4, r0
    61d6:	2800      	cmp	r0, #0
    61d8:	d0ed      	beq.n	61b6 <flash_area_erase+0x2a>
    61da:	e7f6      	b.n	61ca <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    61dc:	2101      	movs	r1, #1
    61de:	4630      	mov	r0, r6
    61e0:	4798      	blx	r3
    61e2:	e7f2      	b.n	61ca <flash_area_erase+0x3e>
		return -EINVAL;
    61e4:	f06f 0415 	mvn.w	r4, #21
    61e8:	e7ef      	b.n	61ca <flash_area_erase+0x3e>

000061ea <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    61ea:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    61ec:	68c0      	ldr	r0, [r0, #12]
    61ee:	f7ff f8b3 	bl	5358 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    61f2:	6883      	ldr	r3, [r0, #8]
    61f4:	691b      	ldr	r3, [r3, #16]
    61f6:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    61f8:	6800      	ldr	r0, [r0, #0]
    61fa:	bd08      	pop	{r3, pc}

000061fc <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    61fc:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    61fe:	68c0      	ldr	r0, [r0, #12]
    6200:	f7ff f8aa 	bl	5358 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6204:	6883      	ldr	r3, [r0, #8]
    6206:	691b      	ldr	r3, [r3, #16]
    6208:	4798      	blx	r3

	return param->erase_value;
}
    620a:	7900      	ldrb	r0, [r0, #4]
    620c:	bd08      	pop	{r3, pc}

0000620e <get_sectors_cb>:
{
    620e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6210:	6802      	ldr	r2, [r0, #0]
    6212:	684c      	ldr	r4, [r1, #4]
    6214:	42a2      	cmp	r2, r4
    6216:	d316      	bcc.n	6246 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6218:	688b      	ldr	r3, [r1, #8]
    621a:	4423      	add	r3, r4
    621c:	429a      	cmp	r2, r3
    621e:	d206      	bcs.n	622e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    6220:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    6224:	42ab      	cmp	r3, r5
    6226:	d304      	bcc.n	6232 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    6228:	f06f 030b 	mvn.w	r3, #11
    622c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    622e:	2000      	movs	r0, #0
    6230:	e00a      	b.n	6248 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6232:	68cd      	ldr	r5, [r1, #12]
    6234:	1b12      	subs	r2, r2, r4
    6236:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    623a:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    623c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    6240:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    6242:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    6244:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    6246:	2001      	movs	r0, #1
}
    6248:	bd70      	pop	{r4, r5, r6, pc}

0000624a <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    624a:	2000      	movs	r0, #0
{
    624c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    624e:	f7fb fd63 	bl	1d18 <sys_reboot>

00006252 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    6252:	4770      	bx	lr

00006254 <console_write>:
{
    6254:	b570      	push	{r4, r5, r6, lr}
    6256:	4606      	mov	r6, r0
    6258:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    625a:	2400      	movs	r4, #0
    625c:	42ac      	cmp	r4, r5
    625e:	db00      	blt.n	6262 <console_write+0xe>
}
    6260:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    6262:	5d30      	ldrb	r0, [r6, r4]
    6264:	f7fb fe3c 	bl	1ee0 <console_out>
    6268:	3001      	adds	r0, #1
    626a:	d0f9      	beq.n	6260 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    626c:	3401      	adds	r4, #1
    626e:	e7f5      	b.n	625c <console_write+0x8>

00006270 <u32toa>:
{
    6270:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    6272:	2301      	movs	r3, #1
        d *= 10;
    6274:	240a      	movs	r4, #10
    while (val / d >= 10) {
    6276:	fbb1 f2f3 	udiv	r2, r1, r3
    627a:	2a09      	cmp	r2, #9
    627c:	d806      	bhi.n	628c <u32toa+0x1c>
    dst = tgt;
    627e:	4602      	mov	r2, r0
    int n = 0;
    6280:	2500      	movs	r5, #0
        d /= 10;
    6282:	260a      	movs	r6, #10
    while (d) {
    6284:	b923      	cbnz	r3, 6290 <u32toa+0x20>
    *dst = '\0';
    6286:	7013      	strb	r3, [r2, #0]
}
    6288:	1a10      	subs	r0, r2, r0
    628a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    628c:	4363      	muls	r3, r4
    628e:	e7f2      	b.n	6276 <u32toa+0x6>
        dgt = val / d;
    6290:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    6294:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    6298:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    629c:	b91d      	cbnz	r5, 62a6 <u32toa+0x36>
    629e:	4299      	cmp	r1, r3
    62a0:	d201      	bcs.n	62a6 <u32toa+0x36>
    62a2:	2b09      	cmp	r3, #9
    62a4:	d803      	bhi.n	62ae <u32toa+0x3e>
            *dst++ = dgt + '0';
    62a6:	3430      	adds	r4, #48	; 0x30
    62a8:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    62ac:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    62ae:	4663      	mov	r3, ip
    62b0:	4639      	mov	r1, r7
    62b2:	e7e7      	b.n	6284 <u32toa+0x14>

000062b4 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    62b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62b6:	4604      	mov	r4, r0
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    62b8:	6880      	ldr	r0, [r0, #8]
{
    62ba:	460d      	mov	r5, r1
    62bc:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    62be:	b1a0      	cbz	r0, 62ea <value_extract+0x36>
    62c0:	6823      	ldr	r3, [r4, #0]
    62c2:	68e1      	ldr	r1, [r4, #12]
    62c4:	428b      	cmp	r3, r1
    62c6:	d21d      	bcs.n	6304 <value_extract+0x50>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    62c8:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    62ca:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    62cc:	3301      	adds	r3, #1

	memset(result, 0, result_len);
    62ce:	2100      	movs	r1, #0
    62d0:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    62d2:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    62d6:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    62d8:	f000 fa96 	bl	6808 <memset>
	if (additional <= VALUE_IN_HEADER) {
    62dc:	2e17      	cmp	r6, #23
    62de:	d805      	bhi.n	62ec <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    62e0:	702e      	strb	r6, [r5, #0]

		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
    62e2:	2001      	movs	r0, #1
	(state->elem_count)--;
    62e4:	68a3      	ldr	r3, [r4, #8]
    62e6:	3b01      	subs	r3, #1
    62e8:	60a3      	str	r3, [r4, #8]
}
    62ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (24 <= additional && additional <= 27) {
    62ec:	3e18      	subs	r6, #24
    62ee:	b2f3      	uxtb	r3, r6
    62f0:	2b03      	cmp	r3, #3
    62f2:	6822      	ldr	r2, [r4, #0]
    62f4:	d808      	bhi.n	6308 <value_extract+0x54>
		return 1 << (additional - 24);
    62f6:	2301      	movs	r3, #1
    62f8:	fa03 f606 	lsl.w	r6, r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    62fc:	42b7      	cmp	r7, r6
    62fe:	d204      	bcs.n	630a <value_extract+0x56>
		FAIL_AND_DECR_IF((state->payload + len)
    6300:	3a01      	subs	r2, #1
    6302:	6022      	str	r2, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    6304:	2000      	movs	r0, #0
    6306:	e7f0      	b.n	62ea <value_extract+0x36>
	return 0;
    6308:	2600      	movs	r6, #0
		FAIL_AND_DECR_IF((state->payload + len)
    630a:	68e1      	ldr	r1, [r4, #12]
    630c:	1993      	adds	r3, r2, r6
    630e:	4299      	cmp	r1, r3
    6310:	d3f6      	bcc.n	6300 <value_extract+0x4c>
    6312:	1e72      	subs	r2, r6, #1
    6314:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    6316:	1c51      	adds	r1, r2, #1
    6318:	6823      	ldr	r3, [r4, #0]
    631a:	d102      	bne.n	6322 <value_extract+0x6e>
		(state->payload) += len;
    631c:	441e      	add	r6, r3
    631e:	6026      	str	r6, [r4, #0]
    6320:	e7df      	b.n	62e2 <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    6322:	5c9b      	ldrb	r3, [r3, r2]
    6324:	3a01      	subs	r2, #1
    6326:	f805 3f01 	strb.w	r3, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    632a:	e7f4      	b.n	6316 <value_extract+0x62>

0000632c <uint32_decode>:
}


static bool uint32_decode(cbor_state_t *state, uint32_t *result)
{
	if (!value_extract(state, result, 4)) {
    632c:	2204      	movs	r2, #4
    632e:	f7ff bfc1 	b.w	62b4 <value_extract>

00006332 <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    6332:	b538      	push	{r3, r4, r5, lr}
    6334:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    6336:	6803      	ldr	r3, [r0, #0]
    6338:	68c1      	ldr	r1, [r0, #12]
{
    633a:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    633c:	428b      	cmp	r3, r1
    633e:	d301      	bcc.n	6344 <strx_start_decode+0x12>

	if (result->len > (state->payload_end - state->payload)) {
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)result->len,
		(uint32_t)(state->payload_end - state->payload));
		FAIL_RESTORE();
    6340:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    6342:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    6344:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    6346:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    634a:	d1f9      	bne.n	6340 <strx_start_decode+0xe>
	if (!uint32_decode(state, &result->len)) {
    634c:	1d29      	adds	r1, r5, #4
    634e:	f7ff ffed 	bl	632c <uint32_decode>
    6352:	2800      	cmp	r0, #0
    6354:	d0f4      	beq.n	6340 <strx_start_decode+0xe>
	if (result->len > (state->payload_end - state->payload)) {
    6356:	6822      	ldr	r2, [r4, #0]
    6358:	68e3      	ldr	r3, [r4, #12]
    635a:	6869      	ldr	r1, [r5, #4]
    635c:	1a9b      	subs	r3, r3, r2
    635e:	4299      	cmp	r1, r3
    6360:	d905      	bls.n	636e <strx_start_decode+0x3c>
		FAIL_RESTORE();
    6362:	6863      	ldr	r3, [r4, #4]
    6364:	6023      	str	r3, [r4, #0]
    6366:	68a3      	ldr	r3, [r4, #8]
    6368:	3301      	adds	r3, #1
    636a:	60a3      	str	r3, [r4, #8]
    636c:	e7e8      	b.n	6340 <strx_start_decode+0xe>
	result->value = state->payload;
    636e:	602a      	str	r2, [r5, #0]
	return true;
    6370:	e7e7      	b.n	6342 <strx_start_decode+0x10>

00006372 <list_map_start_decode>:


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
	FAIL_IF(state->payload >= state->payload_end);
    6372:	6803      	ldr	r3, [r0, #0]
    6374:	68c2      	ldr	r2, [r0, #12]
{
    6376:	b513      	push	{r0, r1, r4, lr}
	FAIL_IF(state->payload >= state->payload_end);
    6378:	4293      	cmp	r3, r2
{
    637a:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    637c:	d302      	bcc.n	6384 <list_map_start_decode+0x12>
    637e:	2000      	movs	r0, #0
	if (!new_backup(state, new_elem_count)) {
		FAIL_RESTORE();
	}

	return true;
}
    6380:	b002      	add	sp, #8
    6382:	bd10      	pop	{r4, pc}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    6384:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    6386:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    638a:	d1f8      	bne.n	637e <list_map_start_decode+0xc>
	if (!uint32_decode(state, &new_elem_count)) {
    638c:	a901      	add	r1, sp, #4
    638e:	f7ff ffcd 	bl	632c <uint32_decode>
    6392:	2800      	cmp	r0, #0
    6394:	d0f3      	beq.n	637e <list_map_start_decode+0xc>
	if (!new_backup(state, new_elem_count)) {
    6396:	4620      	mov	r0, r4
    6398:	9901      	ldr	r1, [sp, #4]
    639a:	f000 f960 	bl	665e <new_backup>
    639e:	2800      	cmp	r0, #0
    63a0:	d1ee      	bne.n	6380 <list_map_start_decode+0xe>
		FAIL_RESTORE();
    63a2:	6863      	ldr	r3, [r4, #4]
    63a4:	6023      	str	r3, [r4, #0]
    63a6:	68a3      	ldr	r3, [r4, #8]
    63a8:	3301      	adds	r3, #1
    63aa:	60a3      	str	r3, [r4, #8]
    63ac:	e7e8      	b.n	6380 <list_map_start_decode+0xe>

000063ae <intx32_decode>:
	FAIL_IF(state->payload >= state->payload_end);
    63ae:	6803      	ldr	r3, [r0, #0]
    63b0:	68c2      	ldr	r2, [r0, #12]
{
    63b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	FAIL_IF(state->payload >= state->payload_end);
    63b4:	4293      	cmp	r3, r2
{
    63b6:	4604      	mov	r4, r0
    63b8:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    63ba:	d212      	bcs.n	63e2 <intx32_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    63bc:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    63be:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    63c0:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    63c4:	d80d      	bhi.n	63e2 <intx32_decode+0x34>
	if (!value_extract(state, &uint_result, 4)) {
    63c6:	2204      	movs	r2, #4
    63c8:	eb0d 0102 	add.w	r1, sp, r2
    63cc:	f7ff ff72 	bl	62b4 <value_extract>
    63d0:	b168      	cbz	r0, 63ee <intx32_decode+0x40>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    63d2:	9b01      	ldr	r3, [sp, #4]
    63d4:	2b00      	cmp	r3, #0
    63d6:	da06      	bge.n	63e6 <intx32_decode+0x38>
		FAIL_RESTORE();
    63d8:	6863      	ldr	r3, [r4, #4]
    63da:	6023      	str	r3, [r4, #0]
    63dc:	68a3      	ldr	r3, [r4, #8]
    63de:	3301      	adds	r3, #1
    63e0:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    63e2:	2000      	movs	r0, #0
    63e4:	e003      	b.n	63ee <intx32_decode+0x40>
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    63e6:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    63e8:	bf08      	it	eq
    63ea:	43db      	mvneq	r3, r3
	*result = int_result;
    63ec:	602b      	str	r3, [r5, #0]
}
    63ee:	b002      	add	sp, #8
    63f0:	bd70      	pop	{r4, r5, r6, pc}

000063f2 <strx_decode>:
{
    63f2:	b538      	push	{r3, r4, r5, lr}
    63f4:	4604      	mov	r4, r0
    63f6:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    63f8:	f7ff ff9b 	bl	6332 <strx_start_decode>
    63fc:	b118      	cbz	r0, 6406 <strx_decode+0x14>
	(state->payload) += result->len;
    63fe:	6823      	ldr	r3, [r4, #0]
    6400:	686a      	ldr	r2, [r5, #4]
    6402:	4413      	add	r3, r2
    6404:	6023      	str	r3, [r4, #0]
}
    6406:	bd38      	pop	{r3, r4, r5, pc}

00006408 <strx_expect>:
{
    6408:	b573      	push	{r0, r1, r4, r5, r6, lr}
    640a:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    640c:	4669      	mov	r1, sp
{
    640e:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    6410:	f7ff ffef 	bl	63f2 <strx_decode>
    6414:	4605      	mov	r5, r0
    6416:	b148      	cbz	r0, 642c <strx_expect+0x24>
	if ((tmp_result.len != result->len)
    6418:	9a01      	ldr	r2, [sp, #4]
    641a:	6873      	ldr	r3, [r6, #4]
    641c:	429a      	cmp	r2, r3
    641e:	d008      	beq.n	6432 <strx_expect+0x2a>
		FAIL_RESTORE();
    6420:	2500      	movs	r5, #0
    6422:	6863      	ldr	r3, [r4, #4]
    6424:	6023      	str	r3, [r4, #0]
    6426:	68a3      	ldr	r3, [r4, #8]
    6428:	3301      	adds	r3, #1
    642a:	60a3      	str	r3, [r4, #8]
}
    642c:	4628      	mov	r0, r5
    642e:	b002      	add	sp, #8
    6430:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    6432:	9900      	ldr	r1, [sp, #0]
    6434:	6830      	ldr	r0, [r6, #0]
    6436:	f000 f9b5 	bl	67a4 <memcmp>
    643a:	2800      	cmp	r0, #0
    643c:	d0f6      	beq.n	642c <strx_expect+0x24>
    643e:	e7ef      	b.n	6420 <strx_expect+0x18>

00006440 <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    6440:	2202      	movs	r2, #2
    6442:	f7ff bfd6 	b.w	63f2 <strx_decode>

00006446 <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    6446:	2203      	movs	r2, #3
    6448:	f7ff bfde 	b.w	6408 <strx_expect>

0000644c <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    644c:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    644e:	2105      	movs	r1, #5
{
    6450:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    6452:	f7ff ff8e 	bl	6372 <list_map_start_decode>

	if (ret) {
    6456:	b110      	cbz	r0, 645e <map_start_decode+0x12>
		state->elem_count *= 2;
    6458:	68a3      	ldr	r3, [r4, #8]
    645a:	005b      	lsls	r3, r3, #1
    645c:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    645e:	bd10      	pop	{r4, pc}

00006460 <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    6460:	2200      	movs	r2, #0
    6462:	2107      	movs	r1, #7
    6464:	f000 b911 	b.w	668a <restore_backup>

00006468 <map_end_decode>:
    6468:	f7ff bffa 	b.w	6460 <list_map_end_decode>

0000646c <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    646c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6470:	4682      	mov	sl, r0
    6472:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    6476:	4688      	mov	r8, r1
    6478:	4616      	mov	r6, r2
    647a:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    647c:	2400      	movs	r4, #0
    647e:	4544      	cmp	r4, r8
    6480:	d102      	bne.n	6488 <multi_decode+0x1c>
			return true;
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
	return true;
    6482:	2001      	movs	r0, #1
	*num_decode = max_decode;
    6484:	6034      	str	r4, [r6, #0]
	return true;
    6486:	e012      	b.n	64ae <multi_decode+0x42>
		uint8_t const *payload_bak = state->payload;
    6488:	682a      	ldr	r2, [r5, #0]
		if (!decoder(state,
    648a:	4639      	mov	r1, r7
    648c:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    648e:	9201      	str	r2, [sp, #4]
		uint32_t elem_count_bak = state->elem_count;
    6490:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    6494:	47d8      	blx	fp
    6496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6498:	9a01      	ldr	r2, [sp, #4]
    649a:	441f      	add	r7, r3
    649c:	b950      	cbnz	r0, 64b4 <multi_decode+0x48>
			if (i < min_decode) {
    649e:	4554      	cmp	r4, sl
    64a0:	bf34      	ite	cc
    64a2:	2000      	movcc	r0, #0
    64a4:	2001      	movcs	r0, #1
			*num_decode = i;
    64a6:	6034      	str	r4, [r6, #0]
			state->payload = payload_bak;
    64a8:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    64aa:	f8c5 9008 	str.w	r9, [r5, #8]
}
    64ae:	b003      	add	sp, #12
    64b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    64b4:	3401      	adds	r4, #1
    64b6:	e7e2      	b.n	647e <multi_decode+0x12>

000064b8 <get_result_len>:
static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    64b8:	2200      	movs	r2, #0
{
    64ba:	b510      	push	{r4, lr}
    64bc:	4603      	mov	r3, r0
    64be:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    64c0:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    64c4:	b914      	cbnz	r4, 64cc <get_result_len+0x14>
	for (i = 0; i < max_result_len; i++) {
    64c6:	3201      	adds	r2, #1
    64c8:	4291      	cmp	r1, r2
    64ca:	d1f9      	bne.n	64c0 <get_result_len+0x8>
			break;
		}
	}
	max_result_len -= i;
    64cc:	1a89      	subs	r1, r1, r2

	/* According to specification result length can be encoded on 1, 2, 4
	 * or 8 bytes.
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;
    64ce:	2001      	movs	r0, #1
	max_result_len -= i;
    64d0:	2204      	movs	r2, #4

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    64d2:	4281      	cmp	r1, r0
    64d4:	d904      	bls.n	64e0 <get_result_len+0x28>
	for (size_t i = 0; i <= 3; i++) {
    64d6:	3a01      	subs	r2, #1
			max_result_len = encode_byte_cnt;
			break;
		}

		encode_byte_cnt *= 2;
    64d8:	ea4f 0040 	mov.w	r0, r0, lsl #1
	for (size_t i = 0; i <= 3; i++) {
    64dc:	d1f9      	bne.n	64d2 <get_result_len+0x1a>
    64de:	4608      	mov	r0, r1
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    64e0:	2801      	cmp	r0, #1
    64e2:	d104      	bne.n	64ee <get_result_len+0x36>
    64e4:	7818      	ldrb	r0, [r3, #0]
    64e6:	2817      	cmp	r0, #23
    64e8:	bf94      	ite	ls
    64ea:	2000      	movls	r0, #0
    64ec:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
}
    64ee:	bd10      	pop	{r4, pc}

000064f0 <get_additional>:
	switch(len) {
    64f0:	2808      	cmp	r0, #8
    64f2:	d80f      	bhi.n	6514 <get_additional+0x24>
    64f4:	e8df f000 	tbb	[pc, r0]
    64f8:	08080506 	.word	0x08080506
    64fc:	0a0a0a0a 	.word	0x0a0a0a0a
    6500:	0c          	.byte	0x0c
    6501:	00          	.byte	0x00
		case 4: return 26;
    6502:	2118      	movs	r1, #24
}
    6504:	4608      	mov	r0, r1
    6506:	4770      	bx	lr
		case 2: return 25;
    6508:	2119      	movs	r1, #25
    650a:	e7fb      	b.n	6504 <get_additional+0x14>
		case 4: return 26;
    650c:	211a      	movs	r1, #26
    650e:	e7f9      	b.n	6504 <get_additional+0x14>
		case 8: return 27;
    6510:	211b      	movs	r1, #27
    6512:	e7f7      	b.n	6504 <get_additional+0x14>
	return 0;
    6514:	2100      	movs	r1, #0
    6516:	e7f5      	b.n	6504 <get_additional+0x14>

00006518 <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    6518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    651c:	4604      	mov	r4, r0
    651e:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    6520:	4610      	mov	r0, r2
    6522:	4619      	mov	r1, r3
{
    6524:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    6526:	f7ff ffc7 	bl	64b8 <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    652a:	6822      	ldr	r2, [r4, #0]
    652c:	68e1      	ldr	r1, [r4, #12]
    652e:	1c43      	adds	r3, r0, #1
    6530:	4413      	add	r3, r2
    6532:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    6534:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    6536:	d31d      	bcc.n	6574 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    6538:	f102 0801 	add.w	r8, r2, #1
    653c:	4541      	cmp	r1, r8
    653e:	d319      	bcc.n	6574 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    6540:	7831      	ldrb	r1, [r6, #0]
    6542:	f7ff ffd5 	bl	64f0 <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6546:	f000 001f 	and.w	r0, r0, #31
    654a:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    654e:	f8c4 8000 	str.w	r8, [r4]
    6552:	1970      	adds	r0, r6, r5
    6554:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    6556:	42b0      	cmp	r0, r6
    6558:	d105      	bne.n	6566 <value_encode+0x4e>
	return true;
    655a:	2001      	movs	r0, #1
	state->elem_count++;
    655c:	68a3      	ldr	r3, [r4, #8]
    655e:	3301      	adds	r3, #1
    6560:	60a3      	str	r3, [r4, #8]
				get_result_len(input, max_result_len));
}
    6562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    6566:	6823      	ldr	r3, [r4, #0]
    6568:	1c5a      	adds	r2, r3, #1
    656a:	6022      	str	r2, [r4, #0]
    656c:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    6570:	701a      	strb	r2, [r3, #0]
	for (; result_len > 0; result_len--) {
    6572:	e7f0      	b.n	6556 <value_encode+0x3e>
		FAIL();
    6574:	2000      	movs	r0, #0
    6576:	e7f4      	b.n	6562 <value_encode+0x4a>

00006578 <uint32_encode>:
}


static bool uint32_encode(cbor_state_t *state, const uint32_t *input,
		cbor_major_type_t major_type)
{
    6578:	b410      	push	{r4}
    657a:	460c      	mov	r4, r1
	if (!value_encode(state, major_type, input, 4)) {
    657c:	2304      	movs	r3, #4
{
    657e:	4611      	mov	r1, r2
	if (!value_encode(state, major_type, input, 4)) {
    6580:	4622      	mov	r2, r4
		FAIL();
	}
	return true;
}
    6582:	bc10      	pop	{r4}
	if (!value_encode(state, major_type, input, 4)) {
    6584:	f7ff bfc8 	b.w	6518 <value_encode>

00006588 <strx_start_encode>:
}


static bool strx_start_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    6588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    658a:	460d      	mov	r5, r1
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    658c:	f855 3b04 	ldr.w	r3, [r5], #4
{
    6590:	4604      	mov	r4, r0
    6592:	460e      	mov	r6, r1
    6594:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6596:	b15b      	cbz	r3, 65b0 <strx_start_encode+0x28>
    6598:	2104      	movs	r1, #4
    659a:	4628      	mov	r0, r5
    659c:	f7ff ff8c 	bl	64b8 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    65a0:	6872      	ldr	r2, [r6, #4]
    65a2:	6823      	ldr	r3, [r4, #0]
    65a4:	4413      	add	r3, r2
    65a6:	3301      	adds	r3, #1
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    65a8:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    65aa:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    65ac:	429a      	cmp	r2, r3
    65ae:	d306      	bcc.n	65be <strx_start_encode+0x36>
			> (size_t)state->payload_end)) {
		FAIL();
	}
	if (!uint32_encode(state, &input->len, major_type)) {
    65b0:	463a      	mov	r2, r7
    65b2:	4629      	mov	r1, r5
    65b4:	4620      	mov	r0, r4
		FAIL();
	}

	return true;
}
    65b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (!uint32_encode(state, &input->len, major_type)) {
    65ba:	f7ff bfdd 	b.w	6578 <uint32_encode>
}
    65be:	2000      	movs	r0, #0
    65c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000065c2 <uintx32_put>:
{
    65c2:	b507      	push	{r0, r1, r2, lr}
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    65c4:	2200      	movs	r2, #0
{
    65c6:	9101      	str	r1, [sp, #4]
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    65c8:	a901      	add	r1, sp, #4
    65ca:	f7ff ffd5 	bl	6578 <uint32_encode>
}
    65ce:	b003      	add	sp, #12
    65d0:	f85d fb04 	ldr.w	pc, [sp], #4

000065d4 <tstrx_encode>:
	return strx_encode(state, input, CBOR_MAJOR_TYPE_BSTR);
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
    65d4:	b570      	push	{r4, r5, r6, lr}
	if (!strx_start_encode(state, input, major_type)) {
    65d6:	2203      	movs	r2, #3
{
    65d8:	4604      	mov	r4, r0
    65da:	460e      	mov	r6, r1
	if (!strx_start_encode(state, input, major_type)) {
    65dc:	f7ff ffd4 	bl	6588 <strx_start_encode>
    65e0:	4605      	mov	r5, r0
    65e2:	b170      	cbz	r0, 6602 <tstrx_encode+0x2e>
	if (input->len > (state->payload_end - state->payload)) {
    65e4:	6820      	ldr	r0, [r4, #0]
    65e6:	68e3      	ldr	r3, [r4, #12]
    65e8:	6872      	ldr	r2, [r6, #4]
    65ea:	1a1b      	subs	r3, r3, r0
    65ec:	429a      	cmp	r2, r3
    65ee:	d80a      	bhi.n	6606 <tstrx_encode+0x32>
	if (state->payload_mut != input->value) {
    65f0:	6831      	ldr	r1, [r6, #0]
    65f2:	4288      	cmp	r0, r1
    65f4:	d001      	beq.n	65fa <tstrx_encode+0x26>
		memmove(state->payload_mut, input->value, input->len);
    65f6:	f000 f8e5 	bl	67c4 <memmove>
	state->payload += input->len;
    65fa:	6823      	ldr	r3, [r4, #0]
    65fc:	6872      	ldr	r2, [r6, #4]
    65fe:	4413      	add	r3, r2
    6600:	6023      	str	r3, [r4, #0]
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
}
    6602:	4628      	mov	r0, r5
    6604:	bd70      	pop	{r4, r5, r6, pc}
		FAIL();
    6606:	2500      	movs	r5, #0
    6608:	e7fb      	b.n	6602 <tstrx_encode+0x2e>

0000660a <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    660a:	6803      	ldr	r3, [r0, #0]
    660c:	68c1      	ldr	r1, [r0, #12]
    660e:	1c5a      	adds	r2, r3, #1
    6610:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6612:	bf9f      	itttt	ls
    6614:	6002      	strls	r2, [r0, #0]
    6616:	229f      	movls	r2, #159	; 0x9f
#else
	if (!encode_header_byte(state, major_type, 31)) {
		FAIL();
	}
#endif
	return true;
    6618:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    661a:	701a      	strbls	r2, [r3, #0]
		FAIL();
    661c:	bf88      	it	hi
    661e:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    6620:	4770      	bx	lr

00006622 <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    6622:	6803      	ldr	r3, [r0, #0]
    6624:	68c1      	ldr	r1, [r0, #12]
    6626:	1c5a      	adds	r2, r3, #1
    6628:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    662a:	bf9f      	itttt	ls
    662c:	6002      	strls	r2, [r0, #0]
    662e:	22bf      	movls	r2, #191	; 0xbf
	return true;
    6630:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6632:	701a      	strbls	r2, [r3, #0]
		FAIL();
    6634:	bf88      	it	hi
    6636:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    6638:	4770      	bx	lr

0000663a <list_map_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    663a:	6803      	ldr	r3, [r0, #0]
    663c:	68c1      	ldr	r1, [r0, #12]
    663e:	1c5a      	adds	r2, r3, #1
    6640:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    6642:	bf9f      	itttt	ls
    6644:	6002      	strls	r2, [r0, #0]
    6646:	22ff      	movls	r2, #255	; 0xff
#else
	if (!encode_header_byte(state, CBOR_MAJOR_TYPE_PRIM, 31)) {
		FAIL();
	}
#endif
	return true;
    6648:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    664a:	701a      	strbls	r2, [r3, #0]
		FAIL();
    664c:	bf88      	it	hi
    664e:	2000      	movhi	r0, #0
}
    6650:	4770      	bx	lr

00006652 <list_end_encode>:


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
    6652:	2204      	movs	r2, #4
    6654:	f7ff bff1 	b.w	663a <list_map_end_encode>

00006658 <map_end_encode>:
}


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
    6658:	2205      	movs	r2, #5
    665a:	f7ff bfee 	b.w	663a <list_map_end_encode>

0000665e <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    665e:	6902      	ldr	r2, [r0, #16]
{
    6660:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    6662:	6853      	ldr	r3, [r2, #4]
{
    6664:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    6666:	6891      	ldr	r1, [r2, #8]
    6668:	3301      	adds	r3, #1
    666a:	428b      	cmp	r3, r1
{
    666c:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    666e:	d20a      	bcs.n	6686 <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    6670:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    6672:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    6674:	2214      	movs	r2, #20
    6676:	4621      	mov	r1, r4
    6678:	fb02 0003 	mla	r0, r2, r3, r0
    667c:	f000 f8b9 	bl	67f2 <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;

	return true;
    6680:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    6682:	60a5      	str	r5, [r4, #8]
}
    6684:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    6686:	2000      	movs	r0, #0
    6688:	e7fc      	b.n	6684 <new_backup+0x26>

0000668a <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    668e:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    6690:	6902      	ldr	r2, [r0, #16]
{
    6692:	4604      	mov	r4, r0
	if (state->backups->current_backup == 0) {
    6694:	6853      	ldr	r3, [r2, #4]
{
    6696:	460d      	mov	r5, r1
	if (state->backups->current_backup == 0) {
    6698:	b913      	cbnz	r3, 66a0 <restore_backup+0x16>
		FAIL();
    669a:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    66a0:	07e9      	lsls	r1, r5, #31
	const uint8_t *payload = state->payload;
    66a2:	6807      	ldr	r7, [r0, #0]
	const uint32_t elem_count = state->elem_count;
    66a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (flags & FLAG_RESTORE) {
    66a8:	d505      	bpl.n	66b6 <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    66aa:	6811      	ldr	r1, [r2, #0]
    66ac:	2214      	movs	r2, #20
    66ae:	fb02 1103 	mla	r1, r2, r3, r1
    66b2:	f000 f89e 	bl	67f2 <memcpy>
	if (flags & FLAG_DISCARD) {
    66b6:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    66b8:	bf41      	itttt	mi
    66ba:	6922      	ldrmi	r2, [r4, #16]
    66bc:	6853      	ldrmi	r3, [r2, #4]
    66be:	f103 33ff 	addmi.w	r3, r3, #4294967295
    66c2:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    66c4:	45b0      	cmp	r8, r6
    66c6:	d8e8      	bhi.n	669a <restore_backup+0x10>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    66c8:	076b      	lsls	r3, r5, #29
	return true;
    66ca:	f04f 0001 	mov.w	r0, #1
		state->payload = payload;
    66ce:	bf48      	it	mi
    66d0:	6027      	strmi	r7, [r4, #0]
    66d2:	e7e3      	b.n	669c <restore_backup+0x12>

000066d4 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    66d4:	6881      	ldr	r1, [r0, #8]
    66d6:	f7ff bfc2 	b.w	665e <new_backup>

000066da <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    66da:	2101      	movs	r1, #1
    66dc:	6882      	ldr	r2, [r0, #8]
    66de:	f7ff bfd4 	b.w	668a <restore_backup>

000066e2 <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    66e2:	2102      	movs	r1, #2
    66e4:	6882      	ldr	r2, [r0, #8]
    66e6:	f7ff bfd0 	b.w	668a <restore_backup>

000066ea <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    66ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.payload = payload,
		.payload_end = payload + payload_len,
		.elem_count = elem_count,
	};

	cbor_state_t state_backups[num_backups + 1];
    66ee:	2414      	movs	r4, #20
{
    66f0:	4605      	mov	r5, r0
    66f2:	460e      	mov	r6, r1
    66f4:	4698      	mov	r8, r3
	cbor_state_t state = {
    66f6:	2300      	movs	r3, #0
{
    66f8:	b088      	sub	sp, #32
    66fa:	af00      	add	r7, sp, #0
    66fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
	cbor_state_t state = {
    66fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
	cbor_state_t state_backups[num_backups + 1];
    6700:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    6704:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    6706:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    6708:	19a9      	adds	r1, r5, r6
	cbor_state_t state = {
    670a:	61b9      	str	r1, [r7, #24]
	cbor_state_t state_backups[num_backups + 1];
    670c:	f024 0407 	bic.w	r4, r4, #7
    6710:	1c41      	adds	r1, r0, #1

	cbor_state_backups_t backups = {
    6712:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    6716:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    671a:	ebad 0d04 	sub.w	sp, sp, r4
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;

	bool result = func(&state, struct_ptr);
    671e:	4611      	mov	r1, r2
    6720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6722:	f107 000c 	add.w	r0, r7, #12
	cbor_state_backups_t backups = {
    6726:	f8c7 d000 	str.w	sp, [r7]
	state.backups = &backups;
    672a:	61ff      	str	r7, [r7, #28]
	bool result = func(&state, struct_ptr);
    672c:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    672e:	b150      	cbz	r0, 6746 <entry_function+0x5c>
    6730:	f1b8 0f00 	cmp.w	r8, #0
    6734:	d007      	beq.n	6746 <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    6736:	68fb      	ldr	r3, [r7, #12]
    6738:	1b5d      	subs	r5, r3, r5
    673a:	42b5      	cmp	r5, r6
    673c:	bf94      	ite	ls
    673e:	f8c8 5000 	strls.w	r5, [r8]
    6742:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    6746:	3720      	adds	r7, #32
    6748:	46bd      	mov	sp, r7
    674a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000674e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    674e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6750:	6800      	ldr	r0, [r0, #0]
    6752:	f7fc b8bb 	b.w	28cc <z_arm_fatal_error>

00006756 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6756:	2100      	movs	r1, #0
    6758:	2001      	movs	r0, #1
    675a:	f7fc b8b7 	b.w	28cc <z_arm_fatal_error>

0000675e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    675e:	b508      	push	{r3, lr}
	handler();
    6760:	f7fc f916 	bl	2990 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6768:	f7fc b974 	b.w	2a54 <z_arm_exc_exit>

0000676c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    676c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    6770:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6774:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    6776:	bf08      	it	eq
    6778:	f06f 0015 	mvneq.w	r0, #21
    677c:	4770      	bx	lr

0000677e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    677e:	4603      	mov	r3, r0
	size_t n = 0;
    6780:	2000      	movs	r0, #0

	while (*s != '\0') {
    6782:	5c1a      	ldrb	r2, [r3, r0]
    6784:	b902      	cbnz	r2, 6788 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6786:	4770      	bx	lr
		n++;
    6788:	3001      	adds	r0, #1
    678a:	e7fa      	b.n	6782 <strlen+0x4>

0000678c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    678c:	1e43      	subs	r3, r0, #1
    678e:	3901      	subs	r1, #1
    6790:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6798:	4282      	cmp	r2, r0
    679a:	d101      	bne.n	67a0 <strcmp+0x14>
    679c:	2a00      	cmp	r2, #0
    679e:	d1f7      	bne.n	6790 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    67a0:	1a10      	subs	r0, r2, r0
    67a2:	4770      	bx	lr

000067a4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    67a4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    67a6:	b15a      	cbz	r2, 67c0 <memcmp+0x1c>
    67a8:	3901      	subs	r1, #1
    67aa:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    67ac:	f810 2b01 	ldrb.w	r2, [r0], #1
    67b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    67b4:	42a0      	cmp	r0, r4
    67b6:	d001      	beq.n	67bc <memcmp+0x18>
    67b8:	429a      	cmp	r2, r3
    67ba:	d0f7      	beq.n	67ac <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    67bc:	1ad0      	subs	r0, r2, r3
}
    67be:	bd10      	pop	{r4, pc}
		return 0;
    67c0:	4610      	mov	r0, r2
    67c2:	e7fc      	b.n	67be <memcmp+0x1a>

000067c4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    67c4:	1a43      	subs	r3, r0, r1
    67c6:	4293      	cmp	r3, r2
{
    67c8:	b510      	push	{r4, lr}
    67ca:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    67ce:	d308      	bcc.n	67e2 <memmove+0x1e>
	char *dest = d;
    67d0:	4602      	mov	r2, r0
    67d2:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    67d4:	429a      	cmp	r2, r3
    67d6:	d00b      	beq.n	67f0 <memmove+0x2c>
			*dest = *src;
    67d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    67dc:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    67e0:	e7f8      	b.n	67d4 <memmove+0x10>
    67e2:	440a      	add	r2, r1
			dest[n] = src[n];
    67e4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    67e8:	428a      	cmp	r2, r1
			dest[n] = src[n];
    67ea:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    67ee:	d1f9      	bne.n	67e4 <memmove+0x20>
		}
	}

	return d;
}
    67f0:	bd10      	pop	{r4, pc}

000067f2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    67f2:	b510      	push	{r4, lr}
    67f4:	1e43      	subs	r3, r0, #1
    67f6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    67f8:	4291      	cmp	r1, r2
    67fa:	d100      	bne.n	67fe <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    67fc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    67fe:	f811 4b01 	ldrb.w	r4, [r1], #1
    6802:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6806:	e7f7      	b.n	67f8 <memcpy+0x6>

00006808 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    6808:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    680a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    680c:	4402      	add	r2, r0
    680e:	4293      	cmp	r3, r2
    6810:	d100      	bne.n	6814 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6812:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6814:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6818:	e7f9      	b.n	680e <memset+0x6>

0000681a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    681a:	b2cb      	uxtb	r3, r1
    681c:	210c      	movs	r1, #12
    681e:	6902      	ldr	r2, [r0, #16]
    6820:	fb03 2101 	mla	r1, r3, r1, r2
    6824:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    6826:	f000 0007 	and.w	r0, r0, #7
    682a:	4770      	bx	lr

0000682c <set_off_state>:
	__asm__ volatile(
    682c:	f04f 0320 	mov.w	r3, #32
    6830:	f3ef 8211 	mrs	r2, BASEPRI
    6834:	f383 8812 	msr	BASEPRI_MAX, r3
    6838:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    683c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    683e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6842:	d001      	beq.n	6848 <set_off_state+0x1c>
    6844:	428b      	cmp	r3, r1
    6846:	d107      	bne.n	6858 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6848:	2301      	movs	r3, #1
    684a:	6003      	str	r3, [r0, #0]
	int err = 0;
    684c:	2000      	movs	r0, #0
	__asm__ volatile(
    684e:	f382 8811 	msr	BASEPRI, r2
    6852:	f3bf 8f6f 	isb	sy
}
    6856:	4770      	bx	lr
		err = -EPERM;
    6858:	f04f 30ff 	mov.w	r0, #4294967295
    685c:	e7f7      	b.n	684e <set_off_state+0x22>

0000685e <set_starting_state>:
{
    685e:	b510      	push	{r4, lr}
	__asm__ volatile(
    6860:	f04f 0320 	mov.w	r3, #32
    6864:	f3ef 8211 	mrs	r2, BASEPRI
    6868:	f383 8812 	msr	BASEPRI_MAX, r3
    686c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6870:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6872:	f003 0407 	and.w	r4, r3, #7
    6876:	2c01      	cmp	r4, #1
    6878:	d106      	bne.n	6888 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    687a:	6001      	str	r1, [r0, #0]
	int err = 0;
    687c:	2000      	movs	r0, #0
	__asm__ volatile(
    687e:	f382 8811 	msr	BASEPRI, r2
    6882:	f3bf 8f6f 	isb	sy
}
    6886:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    688c:	428b      	cmp	r3, r1
		err = -EALREADY;
    688e:	bf14      	ite	ne
    6890:	f04f 30ff 	movne.w	r0, #4294967295
    6894:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    6898:	e7f1      	b.n	687e <set_starting_state+0x20>

0000689a <set_on_state>:
	__asm__ volatile(
    689a:	f04f 0320 	mov.w	r3, #32
    689e:	f3ef 8211 	mrs	r2, BASEPRI
    68a2:	f383 8812 	msr	BASEPRI_MAX, r3
    68a6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    68aa:	6803      	ldr	r3, [r0, #0]
    68ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    68b0:	f043 0302 	orr.w	r3, r3, #2
    68b4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    68b6:	f382 8811 	msr	BASEPRI, r2
    68ba:	f3bf 8f6f 	isb	sy
}
    68be:	4770      	bx	lr

000068c0 <api_blocking_start>:
}
    68c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    68c4:	4770      	bx	lr

000068c6 <onoff_started_callback>:
{
    68c6:	b410      	push	{r4}
	notify(mgr, 0);
    68c8:	241c      	movs	r4, #28
	return &data->mgr[type];
    68ca:	6900      	ldr	r0, [r0, #16]
    68cc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    68ce:	fb03 0004 	mla	r0, r3, r4, r0
    68d2:	2100      	movs	r1, #0
}
    68d4:	bc10      	pop	{r4}
	notify(mgr, 0);
    68d6:	4710      	bx	r2

000068d8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    68d8:	2000      	movs	r0, #0
    68da:	f7fe b903 	b.w	4ae4 <nrfx_clock_start>

000068de <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    68de:	2000      	movs	r0, #0
    68e0:	f7fe b932 	b.w	4b48 <nrfx_clock_stop>

000068e4 <api_stop>:
{
    68e4:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    68e6:	240c      	movs	r4, #12
    68e8:	b2c9      	uxtb	r1, r1
    68ea:	434c      	muls	r4, r1
{
    68ec:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    68ee:	6900      	ldr	r0, [r0, #16]
    68f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
    68f4:	2180      	movs	r1, #128	; 0x80
    68f6:	4418      	add	r0, r3
    68f8:	f7ff ff98 	bl	682c <set_off_state>
	if (err < 0) {
    68fc:	2800      	cmp	r0, #0
    68fe:	db04      	blt.n	690a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    6900:	6869      	ldr	r1, [r5, #4]
    6902:	440c      	add	r4, r1
    6904:	6863      	ldr	r3, [r4, #4]
    6906:	4798      	blx	r3
	return 0;
    6908:	2000      	movs	r0, #0
}
    690a:	bd38      	pop	{r3, r4, r5, pc}

0000690c <api_start>:
{
    690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    6910:	240c      	movs	r4, #12
    6912:	b2c9      	uxtb	r1, r1
    6914:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6916:	6905      	ldr	r5, [r0, #16]
{
    6918:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    691a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    691e:	2180      	movs	r1, #128	; 0x80
    6920:	4428      	add	r0, r5
{
    6922:	4690      	mov	r8, r2
    6924:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    6926:	f7ff ff9a 	bl	685e <set_starting_state>
	if (err < 0) {
    692a:	2800      	cmp	r0, #0
    692c:	db06      	blt.n	693c <api_start+0x30>
	subdata->cb = cb;
    692e:	4425      	add	r5, r4
	subdata->user_data = user_data;
    6930:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6934:	6873      	ldr	r3, [r6, #4]
    6936:	591b      	ldr	r3, [r3, r4]
    6938:	4798      	blx	r3
	return 0;
    693a:	2000      	movs	r0, #0
}
    693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006940 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6940:	6843      	ldr	r3, [r0, #4]
}
    6942:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6944:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6946:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6948:	600b      	str	r3, [r1, #0]
}
    694a:	4770      	bx	lr

0000694c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    694c:	6843      	ldr	r3, [r0, #4]
    694e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6950:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6952:	4042      	eors	r2, r0
    6954:	400a      	ands	r2, r1
    6956:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6958:	605a      	str	r2, [r3, #4]
}
    695a:	2000      	movs	r0, #0
    695c:	4770      	bx	lr

0000695e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    695e:	6843      	ldr	r3, [r0, #4]
}
    6960:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6962:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6964:	6099      	str	r1, [r3, #8]
}
    6966:	4770      	bx	lr

00006968 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6968:	6843      	ldr	r3, [r0, #4]
}
    696a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    696c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    696e:	60d9      	str	r1, [r3, #12]
}
    6970:	4770      	bx	lr

00006972 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6972:	6843      	ldr	r3, [r0, #4]
}
    6974:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6976:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6978:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    697a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    697c:	6053      	str	r3, [r2, #4]
}
    697e:	4770      	bx	lr

00006980 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6980:	6903      	ldr	r3, [r0, #16]
{
    6982:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    6984:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6986:	b158      	cbz	r0, 69a0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6988:	2400      	movs	r4, #0
    698a:	4281      	cmp	r1, r0
    698c:	d113      	bne.n	69b6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    698e:	6808      	ldr	r0, [r1, #0]
    6990:	b95c      	cbnz	r4, 69aa <gpio_nrfx_manage_callback+0x2a>
    6992:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    6994:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6996:	42a1      	cmp	r1, r4
    6998:	d100      	bne.n	699c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    699a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    699c:	2000      	movs	r0, #0
    699e:	6008      	str	r0, [r1, #0]
	if (set) {
    69a0:	b972      	cbnz	r2, 69c0 <gpio_nrfx_manage_callback+0x40>
	return 0;
    69a2:	2000      	movs	r0, #0
}
    69a4:	bd30      	pop	{r4, r5, pc}
    69a6:	4628      	mov	r0, r5
    69a8:	e7ef      	b.n	698a <gpio_nrfx_manage_callback+0xa>
    69aa:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    69ac:	6898      	ldr	r0, [r3, #8]
    69ae:	4281      	cmp	r1, r0
	list->tail = node;
    69b0:	bf08      	it	eq
    69b2:	609c      	streq	r4, [r3, #8]
}
    69b4:	e7f2      	b.n	699c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    69b6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    69b8:	4604      	mov	r4, r0
    69ba:	2d00      	cmp	r5, #0
    69bc:	d1f3      	bne.n	69a6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    69be:	b13a      	cbz	r2, 69d0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    69c0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    69c2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    69c4:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    69c6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    69c8:	2800      	cmp	r0, #0
    69ca:	d1ea      	bne.n	69a2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    69cc:	6099      	str	r1, [r3, #8]
}
    69ce:	e7e9      	b.n	69a4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    69d0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    69d4:	e7e6      	b.n	69a4 <gpio_nrfx_manage_callback+0x24>

000069d6 <is_regular_addr_valid>:
{
    69d6:	b538      	push	{r3, r4, r5, lr}
    69d8:	4604      	mov	r4, r0
    69da:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    69dc:	f001 ff66 	bl	88ac <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    69e0:	4284      	cmp	r4, r0
    69e2:	d209      	bcs.n	69f8 <is_regular_addr_valid+0x22>
    69e4:	2c00      	cmp	r4, #0
    69e6:	db07      	blt.n	69f8 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    69e8:	42a8      	cmp	r0, r5
    69ea:	d305      	bcc.n	69f8 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    69ec:	442c      	add	r4, r5
	    len > flash_size ||
    69ee:	4284      	cmp	r4, r0
    69f0:	bf8c      	ite	hi
    69f2:	2000      	movhi	r0, #0
    69f4:	2001      	movls	r0, #1
}
    69f6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    69f8:	2000      	movs	r0, #0
    69fa:	e7fc      	b.n	69f6 <is_regular_addr_valid+0x20>

000069fc <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    69fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6a00:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    6a02:	2500      	movs	r5, #0
	const struct flash_driver_api *api = dev->api;
    6a04:	6883      	ldr	r3, [r0, #8]
{
    6a06:	460e      	mov	r6, r1
    6a08:	4617      	mov	r7, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    6a0a:	4669      	mov	r1, sp
    6a0c:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    6a0e:	6025      	str	r5, [r4, #0]
	info->index = 0U;
    6a10:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    6a12:	aa01      	add	r2, sp, #4
    6a14:	4798      	blx	r3

	while (layout_size--) {
    6a16:	e9dd 1c00 	ldrd	r1, ip, [sp]
    6a1a:	4628      	mov	r0, r5
		info->size = layout->pages_size;
    6a1c:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
    6a20:	4560      	cmp	r0, ip
    6a22:	d104      	bne.n	6a2e <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    6a24:	f06f 0015 	mvn.w	r0, #21
}
    6a28:	b003      	add	sp, #12
    6a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    6a2e:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
    6a32:	68a2      	ldr	r2, [r4, #8]
    6a34:	f8d4 9000 	ldr.w	r9, [r4]
    6a38:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
    6a3a:	b97e      	cbnz	r6, 6a5c <flash_get_page_info+0x60>
			index_jmp = index - info->index;
    6a3c:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    6a3e:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
    6a42:	3001      	adds	r0, #1
    6a44:	4543      	cmp	r3, r8
    6a46:	bf28      	it	cs
    6a48:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    6a4a:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
    6a4e:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
    6a50:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    6a52:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
    6a54:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    6a56:	d9e3      	bls.n	6a20 <flash_get_page_info+0x24>
			return 0;
    6a58:	2000      	movs	r0, #0
    6a5a:	e7e5      	b.n	6a28 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
    6a5c:	eba6 0309 	sub.w	r3, r6, r9
    6a60:	fbb3 f3f5 	udiv	r3, r3, r5
    6a64:	e7eb      	b.n	6a3e <flash_get_page_info+0x42>

00006a66 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    6a66:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    6a68:	2200      	movs	r2, #0
    6a6a:	f7ff bfc7 	b.w	69fc <flash_get_page_info>

00006a6e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    6a72:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    6a74:	6883      	ldr	r3, [r0, #8]
{
    6a76:	b086      	sub	sp, #24
    6a78:	4688      	mov	r8, r1
    6a7a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6a7c:	695b      	ldr	r3, [r3, #20]
    6a7e:	aa02      	add	r2, sp, #8
    6a80:	a901      	add	r1, sp, #4
    6a82:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    6a84:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    6a86:	4625      	mov	r5, r4
    6a88:	9b02      	ldr	r3, [sp, #8]
    6a8a:	42ab      	cmp	r3, r5
    6a8c:	d802      	bhi.n	6a94 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6a8e:	b006      	add	sp, #24
    6a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    6a94:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6a96:	9f01      	ldr	r7, [sp, #4]
    6a98:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6aa0:	683a      	ldr	r2, [r7, #0]
    6aa2:	eb0a 0306 	add.w	r3, sl, r6
    6aa6:	42b2      	cmp	r2, r6
    6aa8:	d802      	bhi.n	6ab0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6aaa:	469a      	mov	sl, r3
    6aac:	3501      	adds	r5, #1
    6aae:	e7eb      	b.n	6a88 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6ab0:	4649      	mov	r1, r9
    6ab2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6ab4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6ab6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6ab8:	47c0      	blx	r8
    6aba:	2800      	cmp	r0, #0
    6abc:	d0e7      	beq.n	6a8e <flash_page_foreach+0x20>
			off += page_info.size;
    6abe:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6ac0:	3601      	adds	r6, #1
			off += page_info.size;
    6ac2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6ac4:	e7ec      	b.n	6aa0 <flash_page_foreach+0x32>

00006ac6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6ac6:	6843      	ldr	r3, [r0, #4]
{
    6ac8:	b410      	push	{r4}
	return config->uarte_regs;
    6aca:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6acc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6ad0:	05d1      	lsls	r1, r2, #23
    6ad2:	d518      	bpl.n	6b06 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ad4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6ad8:	b1aa      	cbz	r2, 6b06 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6ada:	f04f 0120 	mov.w	r1, #32
    6ade:	f3ef 8211 	mrs	r2, BASEPRI
    6ae2:	f381 8812 	msr	BASEPRI_MAX, r1
    6ae6:	f3bf 8f6f 	isb	sy
    6aea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6aee:	b131      	cbz	r1, 6afe <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6af0:	2100      	movs	r1, #0
    6af2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6af6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6afa:	2101      	movs	r1, #1
    6afc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6afe:	f382 8811 	msr	BASEPRI, r2
    6b02:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6b06:	6842      	ldr	r2, [r0, #4]
    6b08:	6852      	ldr	r2, [r2, #4]
    6b0a:	06d2      	lsls	r2, r2, #27
    6b0c:	d51a      	bpl.n	6b44 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    6b0e:	f04f 0220 	mov.w	r2, #32
    6b12:	f3ef 8111 	mrs	r1, BASEPRI
    6b16:	f382 8812 	msr	BASEPRI_MAX, r2
    6b1a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b1e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6b22:	b112      	cbz	r2, 6b2a <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6b24:	2200      	movs	r2, #0
    6b26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6b2a:	6902      	ldr	r2, [r0, #16]
    6b2c:	68d2      	ldr	r2, [r2, #12]
    6b2e:	b10a      	cbz	r2, 6b34 <uarte_nrfx_isr_int+0x6e>
    6b30:	6912      	ldr	r2, [r2, #16]
    6b32:	b91a      	cbnz	r2, 6b3c <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    6b34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6b38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    6b3c:	f381 8811 	msr	BASEPRI, r1
    6b40:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6b44:	6902      	ldr	r2, [r0, #16]
    6b46:	68d2      	ldr	r2, [r2, #12]
    6b48:	b15a      	cbz	r2, 6b62 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b4a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6b4e:	b151      	cbz	r1, 6b66 <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
    6b50:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    6b52:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6b54:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6b56:	b134      	cbz	r4, 6b66 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    6b58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6b5c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6b60:	7391      	strb	r1, [r2, #14]
}
    6b62:	bc10      	pop	{r4}
    6b64:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b66:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6b6a:	b121      	cbz	r1, 6b76 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b6c:	2100      	movs	r1, #0
    6b6e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6b72:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6b76:	6813      	ldr	r3, [r2, #0]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d0f2      	beq.n	6b62 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b7c:	6851      	ldr	r1, [r2, #4]
}
    6b7e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b80:	4718      	bx	r3

00006b82 <uarte_nrfx_config_get>:
{
    6b82:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6b84:	6902      	ldr	r2, [r0, #16]
    6b86:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6b8a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6b8e:	2000      	movs	r0, #0
    6b90:	4770      	bx	lr

00006b92 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6b92:	6843      	ldr	r3, [r0, #4]
    6b94:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6b96:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6b9a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6b9e:	4770      	bx	lr

00006ba0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6ba0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6ba2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ba4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6ba8:	b940      	cbnz	r0, 6bbc <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6baa:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6bac:	0792      	lsls	r2, r2, #30
    6bae:	d406      	bmi.n	6bbe <is_tx_ready+0x1e>
    6bb0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6bb4:	3800      	subs	r0, #0
    6bb6:	bf18      	it	ne
    6bb8:	2001      	movne	r0, #1
    6bba:	4770      	bx	lr
    6bbc:	2001      	movs	r0, #1
}
    6bbe:	4770      	bx	lr

00006bc0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6bc0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6bc2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6bc4:	681b      	ldr	r3, [r3, #0]
    6bc6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6bca:	b148      	cbz	r0, 6be0 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bcc:	2000      	movs	r0, #0
	*c = data->rx_data;
    6bce:	7d52      	ldrb	r2, [r2, #21]
    6bd0:	700a      	strb	r2, [r1, #0]
    6bd2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6bd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bda:	2201      	movs	r2, #1
    6bdc:	601a      	str	r2, [r3, #0]
	return 0;
    6bde:	4770      	bx	lr
		return -1;
    6be0:	f04f 30ff 	mov.w	r0, #4294967295
}
    6be4:	4770      	bx	lr

00006be6 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6be6:	2a00      	cmp	r2, #0
{
    6be8:	b510      	push	{r4, lr}
    6bea:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6bec:	dd0f      	ble.n	6c0e <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    6bee:	6843      	ldr	r3, [r0, #4]
    6bf0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bf2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6bf6:	b148      	cbz	r0, 6c0c <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bf8:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6bfa:	6922      	ldr	r2, [r4, #16]
    6bfc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6c00:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c04:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    6c06:	7d52      	ldrb	r2, [r2, #21]
    6c08:	700a      	strb	r2, [r1, #0]
    6c0a:	6018      	str	r0, [r3, #0]
}
    6c0c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    6c0e:	2000      	movs	r0, #0
    6c10:	e7fc      	b.n	6c0c <uarte_nrfx_fifo_read+0x26>

00006c12 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    6c12:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6c14:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    6c16:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    6c18:	f04f 0020 	mov.w	r0, #32
    6c1c:	f3ef 8311 	mrs	r3, BASEPRI
    6c20:	f380 8812 	msr	BASEPRI_MAX, r0
    6c24:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    6c28:	2000      	movs	r0, #0
    6c2a:	68c9      	ldr	r1, [r1, #12]
    6c2c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    6c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6c32:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    6c36:	f383 8811 	msr	BASEPRI, r3
    6c3a:	f3bf 8f6f 	isb	sy
}
    6c3e:	4770      	bx	lr

00006c40 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    6c40:	2201      	movs	r2, #1
    6c42:	6903      	ldr	r3, [r0, #16]
    6c44:	68db      	ldr	r3, [r3, #12]
    6c46:	739a      	strb	r2, [r3, #14]
}
    6c48:	4770      	bx	lr

00006c4a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    6c4a:	6903      	ldr	r3, [r0, #16]
    6c4c:	68db      	ldr	r3, [r3, #12]
    6c4e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6c50:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6c54:	b962      	cbnz	r2, 6c70 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    6c56:	6842      	ldr	r2, [r0, #4]
    6c58:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c5a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6c5e:	b140      	cbz	r0, 6c72 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6c60:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    6c64:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    6c68:	d003      	beq.n	6c72 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6c6a:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    6c6c:	6119      	str	r1, [r3, #16]
    6c6e:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6c70:	2000      	movs	r0, #0
}
    6c72:	4770      	bx	lr

00006c74 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    6c74:	6843      	ldr	r3, [r0, #4]
    6c76:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c78:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6c7c:	3800      	subs	r0, #0
    6c7e:	bf18      	it	ne
    6c80:	2001      	movne	r0, #1
    6c82:	4770      	bx	lr

00006c84 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6c84:	2210      	movs	r2, #16
	return config->uarte_regs;
    6c86:	6843      	ldr	r3, [r0, #4]
    6c88:	681b      	ldr	r3, [r3, #0]
    6c8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6c8e:	4770      	bx	lr

00006c90 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6c90:	2210      	movs	r2, #16
	return config->uarte_regs;
    6c92:	6843      	ldr	r3, [r0, #4]
    6c94:	681b      	ldr	r3, [r3, #0]
    6c96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6c9a:	4770      	bx	lr

00006c9c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6ca0:	6843      	ldr	r3, [r0, #4]
    6ca2:	681b      	ldr	r3, [r3, #0]
    6ca4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6ca8:	4770      	bx	lr

00006caa <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    6caa:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6cae:	6843      	ldr	r3, [r0, #4]
    6cb0:	681b      	ldr	r3, [r3, #0]
    6cb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6cb6:	4770      	bx	lr

00006cb8 <uarte_nrfx_irq_update>:
}
    6cb8:	2001      	movs	r0, #1
    6cba:	4770      	bx	lr

00006cbc <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6cbc:	6903      	ldr	r3, [r0, #16]
    6cbe:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6cc0:	e9c3 1200 	strd	r1, r2, [r3]
}
    6cc4:	4770      	bx	lr

00006cc6 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6cc6:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    6cc8:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6cca:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6cce:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6cd2:	2200      	movs	r2, #0
    6cd4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6cd8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6cdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    6ce0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ce4:	6842      	ldr	r2, [r0, #4]
    6ce6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6ce8:	bf41      	itttt	mi
    6cea:	2208      	movmi	r2, #8
    6cec:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6cf0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    6cf4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6cf8:	2201      	movs	r2, #1
    6cfa:	609a      	str	r2, [r3, #8]
}
    6cfc:	4770      	bx	lr

00006cfe <uarte_nrfx_fifo_fill>:
{
    6cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6d00:	6906      	ldr	r6, [r0, #16]
{
    6d02:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    6d04:	68f3      	ldr	r3, [r6, #12]
    6d06:	899c      	ldrh	r4, [r3, #12]
    6d08:	3310      	adds	r3, #16
    6d0a:	4294      	cmp	r4, r2
    6d0c:	bfa8      	it	ge
    6d0e:	4614      	movge	r4, r2
    6d10:	2201      	movs	r2, #1
    6d12:	e8d3 0fef 	ldaex	r0, [r3]
    6d16:	2800      	cmp	r0, #0
    6d18:	d103      	bne.n	6d22 <uarte_nrfx_fifo_fill+0x24>
    6d1a:	e8c3 2fe7 	stlex	r7, r2, [r3]
    6d1e:	2f00      	cmp	r7, #0
    6d20:	d1f7      	bne.n	6d12 <uarte_nrfx_fifo_fill+0x14>
    6d22:	bf0c      	ite	eq
    6d24:	4613      	moveq	r3, r2
    6d26:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6d28:	d01d      	beq.n	6d66 <uarte_nrfx_fifo_fill+0x68>
		return 0;
    6d2a:	461c      	mov	r4, r3
}
    6d2c:	4620      	mov	r0, r4
    6d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    6d30:	68f2      	ldr	r2, [r6, #12]
    6d32:	5cc8      	ldrb	r0, [r1, r3]
    6d34:	6892      	ldr	r2, [r2, #8]
    6d36:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    6d38:	3301      	adds	r3, #1
    6d3a:	42a3      	cmp	r3, r4
    6d3c:	dbf8      	blt.n	6d30 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
    6d3e:	f04f 0320 	mov.w	r3, #32
    6d42:	f3ef 8711 	mrs	r7, BASEPRI
    6d46:	f383 8812 	msr	BASEPRI_MAX, r3
    6d4a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6d4e:	4628      	mov	r0, r5
    6d50:	f7ff ff26 	bl	6ba0 <is_tx_ready>
    6d54:	68f3      	ldr	r3, [r6, #12]
    6d56:	b940      	cbnz	r0, 6d6a <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    6d58:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6d5a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6d5c:	f387 8811 	msr	BASEPRI, r7
    6d60:	f3bf 8f6f 	isb	sy
	return len;
    6d64:	e7e2      	b.n	6d2c <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
    6d66:	2300      	movs	r3, #0
    6d68:	e7e7      	b.n	6d3a <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
    6d6a:	4622      	mov	r2, r4
    6d6c:	4628      	mov	r0, r5
    6d6e:	6899      	ldr	r1, [r3, #8]
    6d70:	f7ff ffa9 	bl	6cc6 <tx_start>
    6d74:	e7f2      	b.n	6d5c <uarte_nrfx_fifo_fill+0x5e>

00006d76 <uarte_nrfx_irq_is_pending>:
{
    6d76:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6d78:	6843      	ldr	r3, [r0, #4]
{
    6d7a:	4604      	mov	r4, r0
	return config->uarte_regs;
    6d7c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6d7e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6d82:	025b      	lsls	r3, r3, #9
    6d84:	d405      	bmi.n	6d92 <uarte_nrfx_irq_is_pending+0x1c>
    6d86:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    6d8a:	f010 0010 	ands.w	r0, r0, #16
    6d8e:	d106      	bne.n	6d9e <uarte_nrfx_irq_is_pending+0x28>
}
    6d90:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6d92:	f7ff ff5a 	bl	6c4a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6d96:	2800      	cmp	r0, #0
    6d98:	d0f5      	beq.n	6d86 <uarte_nrfx_irq_is_pending+0x10>
		||
    6d9a:	2001      	movs	r0, #1
    6d9c:	e7f8      	b.n	6d90 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    6d9e:	4620      	mov	r0, r4
    6da0:	f7ff ff68 	bl	6c74 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6da4:	3800      	subs	r0, #0
    6da6:	bf18      	it	ne
    6da8:	2001      	movne	r0, #1
    6daa:	e7f1      	b.n	6d90 <uarte_nrfx_irq_is_pending+0x1a>

00006dac <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6dac:	b510      	push	{r4, lr}
    6dae:	4604      	mov	r4, r0
    6db0:	2200      	movs	r2, #0
    6db2:	2101      	movs	r1, #1
    6db4:	2008      	movs	r0, #8
    6db6:	f7fb fdd5 	bl	2964 <z_arm_irq_priority_set>
    6dba:	2008      	movs	r0, #8
    6dbc:	f7fb fdb4 	bl	2928 <arch_irq_enable>
    6dc0:	4620      	mov	r0, r4
    6dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dc6:	f7fc be47 	b.w	3a58 <uarte_instance_init.isra.0>

00006dca <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6dca:	b510      	push	{r4, lr}
    6dcc:	4604      	mov	r4, r0
    6dce:	2200      	movs	r2, #0
    6dd0:	2101      	movs	r1, #1
    6dd2:	2009      	movs	r0, #9
    6dd4:	f7fb fdc6 	bl	2964 <z_arm_irq_priority_set>
    6dd8:	2009      	movs	r0, #9
    6dda:	f7fb fda5 	bl	2928 <arch_irq_enable>
    6dde:	4620      	mov	r0, r4
    6de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6de4:	f7fc be38 	b.w	3a58 <uarte_instance_init.isra.0>

00006de8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6de8:	f7fe bc44 	b.w	5674 <nrf_cc3xx_platform_init_no_rng>

00006dec <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6dec:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6dee:	f7fb f817 	bl	1e20 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6df2:	f7ff fa2e 	bl	6252 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6dfa:	f7fe bc3b 	b.w	5674 <nrf_cc3xx_platform_init_no_rng>

00006dfe <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    6dfe:	b538      	push	{r3, r4, r5, lr}
    6e00:	460c      	mov	r4, r1
    6e02:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    6e04:	f7ff f9fa 	bl	61fc <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6e08:	4621      	mov	r1, r4
    6e0a:	4425      	add	r5, r4
    6e0c:	42a9      	cmp	r1, r5
    6e0e:	d101      	bne.n	6e14 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    6e10:	2001      	movs	r0, #1
}
    6e12:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    6e14:	f811 3b01 	ldrb.w	r3, [r1], #1
    6e18:	4298      	cmp	r0, r3
    6e1a:	d0f7      	beq.n	6e0c <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    6e1c:	2000      	movs	r0, #0
    6e1e:	e7f8      	b.n	6e12 <bootutil_buffer_is_erased.part.0+0x14>

00006e20 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6e20:	6880      	ldr	r0, [r0, #8]
}
    6e22:	3828      	subs	r0, #40	; 0x28
    6e24:	4770      	bx	lr

00006e26 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6e26:	2804      	cmp	r0, #4
    6e28:	d009      	beq.n	6e3e <boot_magic_compatible_check+0x18>
    6e2a:	2805      	cmp	r0, #5
    6e2c:	d103      	bne.n	6e36 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6e2e:	1e48      	subs	r0, r1, #1
    6e30:	bf18      	it	ne
    6e32:	2001      	movne	r0, #1
    6e34:	4770      	bx	lr
        return tbl_val == val;
    6e36:	1a43      	subs	r3, r0, r1
    6e38:	4258      	negs	r0, r3
    6e3a:	4158      	adcs	r0, r3
    6e3c:	4770      	bx	lr
    switch (tbl_val) {
    6e3e:	2001      	movs	r0, #1
}
    6e40:	4770      	bx	lr

00006e42 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6e42:	b111      	cbz	r1, 6e4a <bootutil_buffer_is_erased+0x8>
    6e44:	b10a      	cbz	r2, 6e4a <bootutil_buffer_is_erased+0x8>
    6e46:	f7ff bfda 	b.w	6dfe <bootutil_buffer_is_erased.part.0>
}
    6e4a:	2000      	movs	r0, #0
    6e4c:	4770      	bx	lr

00006e4e <boot_read_flag>:
{
    6e4e:	b538      	push	{r3, r4, r5, lr}
    6e50:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6e52:	2301      	movs	r3, #1
{
    6e54:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6e56:	4622      	mov	r2, r4
{
    6e58:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6e5a:	f7ff f948 	bl	60ee <flash_area_read>
    if (rc < 0) {
    6e5e:	2800      	cmp	r0, #0
    6e60:	db10      	blt.n	6e84 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6e62:	2201      	movs	r2, #1
    6e64:	4621      	mov	r1, r4
    6e66:	4628      	mov	r0, r5
    6e68:	f7ff ffeb 	bl	6e42 <bootutil_buffer_is_erased>
    6e6c:	b118      	cbz	r0, 6e76 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    6e6e:	2303      	movs	r3, #3
    return 0;
    6e70:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    6e72:	7023      	strb	r3, [r4, #0]
}
    6e74:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    6e76:	7823      	ldrb	r3, [r4, #0]
    6e78:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    6e7a:	bf0c      	ite	eq
    6e7c:	2301      	moveq	r3, #1
    6e7e:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    6e80:	7023      	strb	r3, [r4, #0]
    6e82:	e7f7      	b.n	6e74 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6e84:	2001      	movs	r0, #1
    6e86:	e7f5      	b.n	6e74 <boot_read_flag+0x26>

00006e88 <boot_write_trailer>:
{
    6e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6e8c:	461d      	mov	r5, r3
    6e8e:	4606      	mov	r6, r0
    6e90:	460f      	mov	r7, r1
    6e92:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6e94:	f7ff f9a9 	bl	61ea <flash_area_align>
    6e98:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
    6e9a:	fa55 f480 	uxtab	r4, r5, r0
    6e9e:	3c01      	subs	r4, #1
    6ea0:	425b      	negs	r3, r3
    6ea2:	401c      	ands	r4, r3
    6ea4:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    6ea6:	2c08      	cmp	r4, #8
    6ea8:	d81a      	bhi.n	6ee0 <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
    6eaa:	4630      	mov	r0, r6
    6eac:	f7ff f9a6 	bl	61fc <flash_area_erased_val>
    6eb0:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6eb2:	462a      	mov	r2, r5
    6eb4:	4641      	mov	r1, r8
    6eb6:	4668      	mov	r0, sp
    6eb8:	f7ff fc9b 	bl	67f2 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6ebc:	4649      	mov	r1, r9
    6ebe:	1b62      	subs	r2, r4, r5
    6ec0:	eb0d 0005 	add.w	r0, sp, r5
    6ec4:	f7ff fca0 	bl	6808 <memset>
    rc = flash_area_write(fap, off, buf, align);
    6ec8:	4623      	mov	r3, r4
    6eca:	466a      	mov	r2, sp
    6ecc:	4639      	mov	r1, r7
    6ece:	4630      	mov	r0, r6
    6ed0:	f7ff f929 	bl	6126 <flash_area_write>
    if (rc != 0) {
    6ed4:	3800      	subs	r0, #0
    6ed6:	bf18      	it	ne
    6ed8:	2001      	movne	r0, #1
}
    6eda:	b003      	add	sp, #12
    6edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6ee0:	f04f 30ff 	mov.w	r0, #4294967295
    6ee4:	e7f9      	b.n	6eda <boot_write_trailer+0x52>

00006ee6 <boot_write_trailer_flag>:
{
    6ee6:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6ee8:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6eea:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6eee:	aa01      	add	r2, sp, #4
    6ef0:	f7ff ffca 	bl	6e88 <boot_write_trailer>
}
    6ef4:	b003      	add	sp, #12
    6ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00006efa <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6efa:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6efc:	2201      	movs	r2, #1
    6efe:	3918      	subs	r1, #24
    6f00:	f7ff bff1 	b.w	6ee6 <boot_write_trailer_flag>

00006f04 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6f04:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6f06:	3a18      	subs	r2, #24
    6f08:	f7ff bfa1 	b.w	6e4e <boot_read_flag>

00006f0c <boot_read_swap_state_by_id>:
{
    6f0c:	b513      	push	{r0, r1, r4, lr}
    6f0e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6f10:	b2c0      	uxtb	r0, r0
    6f12:	a901      	add	r1, sp, #4
    6f14:	f7fa ff32 	bl	1d7c <flash_area_open>
    if (rc != 0) {
    6f18:	b950      	cbnz	r0, 6f30 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6f1a:	4621      	mov	r1, r4
    6f1c:	9801      	ldr	r0, [sp, #4]
    6f1e:	f7fd f899 	bl	4054 <boot_read_swap_state>
    6f22:	4604      	mov	r4, r0
    flash_area_close(fap);
    6f24:	9801      	ldr	r0, [sp, #4]
    6f26:	f7ff f8e1 	bl	60ec <flash_area_close>
}
    6f2a:	4620      	mov	r0, r4
    6f2c:	b002      	add	sp, #8
    6f2e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6f30:	2401      	movs	r4, #1
    6f32:	e7fa      	b.n	6f2a <boot_read_swap_state_by_id+0x1e>

00006f34 <boot_write_swap_info>:
{
    6f34:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6f36:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6f3a:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6f3e:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6f40:	2301      	movs	r3, #1
    6f42:	f10d 0207 	add.w	r2, sp, #7
    6f46:	3928      	subs	r1, #40	; 0x28
    6f48:	f7ff ff9e 	bl	6e88 <boot_write_trailer>
}
    6f4c:	b003      	add	sp, #12
    6f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00006f52 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6f52:	2000      	movs	r0, #0
    6f54:	4770      	bx	lr

00006f56 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6f56:	6803      	ldr	r3, [r0, #0]
{
    6f58:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6f5a:	1acd      	subs	r5, r1, r3
    6f5c:	2d00      	cmp	r5, #0
    6f5e:	dd0d      	ble.n	6f7c <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6f60:	f993 6000 	ldrsb.w	r6, [r3]
    6f64:	781c      	ldrb	r4, [r3, #0]
    6f66:	2e00      	cmp	r6, #0
    6f68:	db0b      	blt.n	6f82 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    6f6a:	1c5c      	adds	r4, r3, #1
    6f6c:	6004      	str	r4, [r0, #0]
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6f72:	6803      	ldr	r3, [r0, #0]
    6f74:	1ac9      	subs	r1, r1, r3
    6f76:	6813      	ldr	r3, [r2, #0]
    6f78:	428b      	cmp	r3, r1
    6f7a:	d932      	bls.n	6fe2 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6f7c:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    6f80:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6f82:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6f86:	3c01      	subs	r4, #1
    6f88:	2c03      	cmp	r4, #3
    6f8a:	d827      	bhi.n	6fdc <mbedtls_asn1_get_len+0x86>
    6f8c:	e8df f004 	tbb	[pc, r4]
    6f90:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
    6f94:	2d01      	cmp	r5, #1
    6f96:	d0f1      	beq.n	6f7c <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6f98:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6f9a:	3302      	adds	r3, #2
            *len = (*p)[1];
    6f9c:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6f9e:	6003      	str	r3, [r0, #0]
            break;
    6fa0:	e7e7      	b.n	6f72 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6fa2:	2d02      	cmp	r5, #2
    6fa4:	ddea      	ble.n	6f7c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6fa6:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6faa:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6fac:	ba64      	rev16	r4, r4
    6fae:	b2a4      	uxth	r4, r4
    6fb0:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6fb2:	e7f4      	b.n	6f9e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6fb4:	2d03      	cmp	r5, #3
    6fb6:	dde1      	ble.n	6f7c <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6fb8:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6fba:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6fbc:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6fbe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6fc2:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    6fc4:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6fc6:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6fc8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6fca:	e7e8      	b.n	6f9e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    6fcc:	2d04      	cmp	r5, #4
    6fce:	ddd5      	ble.n	6f7c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6fd0:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    6fd4:	3305      	adds	r3, #5
    6fd6:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6fd8:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6fda:	e7e0      	b.n	6f9e <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    6fdc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6fe0:	e7ce      	b.n	6f80 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    6fe2:	2000      	movs	r0, #0
    6fe4:	e7cc      	b.n	6f80 <mbedtls_asn1_get_len+0x2a>

00006fe6 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6fe6:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6fe8:	6804      	ldr	r4, [r0, #0]
    6fea:	1b0e      	subs	r6, r1, r4
    6fec:	2e00      	cmp	r6, #0
    6fee:	dd07      	ble.n	7000 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6ff0:	7826      	ldrb	r6, [r4, #0]
    6ff2:	429e      	cmp	r6, r3
    6ff4:	d108      	bne.n	7008 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6ff6:	3401      	adds	r4, #1
    6ff8:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6ffa:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6ffc:	f7ff bfab 	b.w	6f56 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7000:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    7004:	bc70      	pop	{r4, r5, r6}
    7006:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7008:	f06f 0061 	mvn.w	r0, #97	; 0x61
    700c:	e7fa      	b.n	7004 <mbedtls_asn1_get_tag+0x1e>

0000700e <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    700e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7010:	2302      	movs	r3, #2
{
    7012:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7014:	aa01      	add	r2, sp, #4
{
    7016:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    7018:	f7ff ffe5 	bl	6fe6 <mbedtls_asn1_get_tag>
    701c:	b940      	cbnz	r0, 7030 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    701e:	9a01      	ldr	r2, [sp, #4]
    7020:	4628      	mov	r0, r5
    7022:	6821      	ldr	r1, [r4, #0]
    7024:	f000 fc35 	bl	7892 <mbedtls_mpi_read_binary>

    *p += len;
    7028:	6823      	ldr	r3, [r4, #0]
    702a:	9a01      	ldr	r2, [sp, #4]
    702c:	4413      	add	r3, r2
    702e:	6023      	str	r3, [r4, #0]

    return( ret );
}
    7030:	b003      	add	sp, #12
    7032:	bd30      	pop	{r4, r5, pc}

00007034 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    7034:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    7036:	2400      	movs	r4, #0
    const mbedtls_mpi_uint mask = -assign;
    7038:	425f      	negs	r7, r3
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    703a:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    703c:	4284      	cmp	r4, r0
    703e:	d100      	bne.n	7042 <mpi_safe_cond_assign+0xe>
}
    7040:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    7042:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    7046:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    704a:	401d      	ands	r5, r3
    704c:	403e      	ands	r6, r7
    704e:	4335      	orrs	r5, r6
    7050:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
    for( i = 0; i < n; i++ )
    7054:	3401      	adds	r4, #1
    7056:	e7f1      	b.n	703c <mpi_safe_cond_assign+0x8>

00007058 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    7058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    705c:	4684      	mov	ip, r0
    705e:	460d      	mov	r5, r1
    7060:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    7062:	f04f 0e00 	mov.w	lr, #0
    for( ; i >= 16; i -= 16 )
    7066:	f1bc 0f0f 	cmp.w	ip, #15
    706a:	f105 0540 	add.w	r5, r5, #64	; 0x40
    706e:	f104 0440 	add.w	r4, r4, #64	; 0x40
    7072:	f200 80b8 	bhi.w	71e6 <mpi_mul_hlp+0x18e>
    7076:	f06f 050f 	mvn.w	r5, #15
    707a:	0904      	lsrs	r4, r0, #4
    707c:	fb05 0004 	mla	r0, r5, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    7080:	2807      	cmp	r0, #7
    7082:	ea4f 1c84 	mov.w	ip, r4, lsl #6
    7086:	eb01 1584 	add.w	r5, r1, r4, lsl #6
    708a:	eb02 1484 	add.w	r4, r2, r4, lsl #6
    708e:	f240 809b 	bls.w	71c8 <mpi_mul_hlp+0x170>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    7092:	f851 600c 	ldr.w	r6, [r1, ip]
    7096:	f852 100c 	ldr.w	r1, [r2, ip]
    709a:	fba3 6706 	umull	r6, r7, r3, r6
    709e:	eb1e 0e06 	adds.w	lr, lr, r6
    70a2:	bf2c      	ite	cs
    70a4:	f04f 0801 	movcs.w	r8, #1
    70a8:	f04f 0800 	movcc.w	r8, #0
    70ac:	eb1e 0101 	adds.w	r1, lr, r1
    70b0:	f842 100c 	str.w	r1, [r2, ip]
    70b4:	bf2c      	ite	cs
    70b6:	2201      	movcs	r2, #1
    70b8:	2200      	movcc	r2, #0
    70ba:	686e      	ldr	r6, [r5, #4]
    70bc:	44b8      	add	r8, r7
    70be:	fba3 6706 	umull	r6, r7, r3, r6
    70c2:	4442      	add	r2, r8
    70c4:	1992      	adds	r2, r2, r6
    70c6:	bf2c      	ite	cs
    70c8:	2101      	movcs	r1, #1
    70ca:	2100      	movcc	r1, #0
    70cc:	eb01 0c07 	add.w	ip, r1, r7
    70d0:	6861      	ldr	r1, [r4, #4]
    for( ; i >= 8; i -= 8 )
    70d2:	3808      	subs	r0, #8
    70d4:	1852      	adds	r2, r2, r1
        MULADDC_CORE   MULADDC_CORE
    70d6:	bf2c      	ite	cs
    70d8:	2101      	movcs	r1, #1
    70da:	2100      	movcc	r1, #0
    70dc:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    70de:	68ae      	ldr	r6, [r5, #8]
        MULADDC_CORE   MULADDC_CORE
    70e0:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    70e2:	fba3 6706 	umull	r6, r7, r3, r6
    70e6:	1989      	adds	r1, r1, r6
    70e8:	bf2c      	ite	cs
    70ea:	2201      	movcs	r2, #1
    70ec:	2200      	movcc	r2, #0
    70ee:	eb02 0c07 	add.w	ip, r2, r7
    70f2:	68a2      	ldr	r2, [r4, #8]

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
    70f4:	3520      	adds	r5, #32
    70f6:	1889      	adds	r1, r1, r2
        MULADDC_CORE   MULADDC_CORE
    70f8:	bf2c      	ite	cs
    70fa:	2201      	movcs	r2, #1
    70fc:	2200      	movcc	r2, #0
    70fe:	60a1      	str	r1, [r4, #8]
    7100:	f855 6c14 	ldr.w	r6, [r5, #-20]
    7104:	4462      	add	r2, ip
    7106:	fba3 6706 	umull	r6, r7, r3, r6
    710a:	1992      	adds	r2, r2, r6
    710c:	bf2c      	ite	cs
    710e:	2101      	movcs	r1, #1
    7110:	2100      	movcc	r1, #0
    7112:	eb01 0c07 	add.w	ip, r1, r7
    7116:	68e1      	ldr	r1, [r4, #12]
        MULADDC_CORE   MULADDC_CORE
    7118:	3420      	adds	r4, #32
    711a:	1852      	adds	r2, r2, r1
        MULADDC_CORE   MULADDC_CORE
    711c:	bf2c      	ite	cs
    711e:	2101      	movcs	r1, #1
    7120:	2100      	movcc	r1, #0
    7122:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    7126:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    712a:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    712c:	fba3 6706 	umull	r6, r7, r3, r6
    7130:	1989      	adds	r1, r1, r6
    7132:	bf2c      	ite	cs
    7134:	2201      	movcs	r2, #1
    7136:	2200      	movcc	r2, #0
    7138:	eb02 0c07 	add.w	ip, r2, r7
    713c:	f854 2c10 	ldr.w	r2, [r4, #-16]
    7140:	1889      	adds	r1, r1, r2
    7142:	bf2c      	ite	cs
    7144:	2201      	movcs	r2, #1
    7146:	2200      	movcc	r2, #0
    7148:	f844 1c10 	str.w	r1, [r4, #-16]
    714c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    7150:	4462      	add	r2, ip
    7152:	fba3 6706 	umull	r6, r7, r3, r6
    7156:	1992      	adds	r2, r2, r6
    7158:	bf2c      	ite	cs
    715a:	2101      	movcs	r1, #1
    715c:	2100      	movcc	r1, #0
    715e:	eb01 0c07 	add.w	ip, r1, r7
    7162:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    7166:	1852      	adds	r2, r2, r1
    7168:	bf2c      	ite	cs
    716a:	2101      	movcs	r1, #1
    716c:	2100      	movcc	r1, #0
    716e:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    7172:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    7176:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    7178:	fba3 6706 	umull	r6, r7, r3, r6
    717c:	1989      	adds	r1, r1, r6
    717e:	bf2c      	ite	cs
    7180:	2201      	movcs	r2, #1
    7182:	2200      	movcc	r2, #0
    7184:	eb02 0c07 	add.w	ip, r2, r7
    7188:	f854 2c08 	ldr.w	r2, [r4, #-8]
    718c:	1889      	adds	r1, r1, r2
    718e:	bf2c      	ite	cs
    7190:	2201      	movcs	r2, #1
    7192:	2200      	movcc	r2, #0
    7194:	f844 1c08 	str.w	r1, [r4, #-8]
    7198:	f855 6c04 	ldr.w	r6, [r5, #-4]
    719c:	4462      	add	r2, ip
    719e:	fba3 6706 	umull	r6, r7, r3, r6
    71a2:	1992      	adds	r2, r2, r6
    71a4:	bf2c      	ite	cs
    71a6:	f04f 0e01 	movcs.w	lr, #1
    71aa:	f04f 0e00 	movcc.w	lr, #0
    71ae:	f854 6c04 	ldr.w	r6, [r4, #-4]
    71b2:	eb0e 0107 	add.w	r1, lr, r7
    71b6:	1992      	adds	r2, r2, r6
    71b8:	bf2c      	ite	cs
    71ba:	f04f 0e01 	movcs.w	lr, #1
    71be:	f04f 0e00 	movcc.w	lr, #0
    71c2:	f844 2c04 	str.w	r2, [r4, #-4]
    71c6:	448e      	add	lr, r1
    71c8:	4621      	mov	r1, r4
    71ca:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    71ce:	eb05 0080 	add.w	r0, r5, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    71d2:	4285      	cmp	r5, r0
    71d4:	f040 8199 	bne.w	750a <mpi_mul_hlp+0x4b2>
    71d8:	4464      	add	r4, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    71da:	f1be 0f00 	cmp.w	lr, #0
    71de:	f040 81aa 	bne.w	7536 <mpi_mul_hlp+0x4de>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    71e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
    71e6:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
    71ea:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    71ee:	fba3 6706 	umull	r6, r7, r3, r6
    71f2:	eb1e 0e06 	adds.w	lr, lr, r6
    71f6:	bf2c      	ite	cs
    71f8:	f04f 0801 	movcs.w	r8, #1
    71fc:	f04f 0800 	movcc.w	r8, #0
    7200:	eb08 0907 	add.w	r9, r8, r7
    7204:	f854 7c40 	ldr.w	r7, [r4, #-64]
    7208:	eb17 070e 	adds.w	r7, r7, lr
    720c:	bf2c      	ite	cs
    720e:	f04f 0801 	movcs.w	r8, #1
    7212:	f04f 0800 	movcc.w	r8, #0
    7216:	f844 7c40 	str.w	r7, [r4, #-64]
    721a:	f855 6c3c 	ldr.w	r6, [r5, #-60]
    721e:	44c8      	add	r8, r9
    7220:	fba3 6706 	umull	r6, r7, r3, r6
    7224:	eb18 0806 	adds.w	r8, r8, r6
    7228:	bf2c      	ite	cs
    722a:	f04f 0e01 	movcs.w	lr, #1
    722e:	f04f 0e00 	movcc.w	lr, #0
    7232:	f854 6c3c 	ldr.w	r6, [r4, #-60]
    7236:	eb0e 0907 	add.w	r9, lr, r7
    723a:	eb16 0608 	adds.w	r6, r6, r8
    723e:	bf2c      	ite	cs
    7240:	f04f 0e01 	movcs.w	lr, #1
    7244:	f04f 0e00 	movcc.w	lr, #0
    7248:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    724c:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
    7250:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    7252:	fba3 6706 	umull	r6, r7, r3, r6
    7256:	eb1e 0e06 	adds.w	lr, lr, r6
    725a:	bf2c      	ite	cs
    725c:	f04f 0801 	movcs.w	r8, #1
    7260:	f04f 0800 	movcc.w	r8, #0
    7264:	eb08 0907 	add.w	r9, r8, r7
    7268:	f854 7c38 	ldr.w	r7, [r4, #-56]
    726c:	eb17 070e 	adds.w	r7, r7, lr
    7270:	bf2c      	ite	cs
    7272:	f04f 0801 	movcs.w	r8, #1
    7276:	f04f 0800 	movcc.w	r8, #0
    727a:	f844 7c38 	str.w	r7, [r4, #-56]
    727e:	f855 6c34 	ldr.w	r6, [r5, #-52]
    7282:	44c8      	add	r8, r9
    7284:	fba3 6706 	umull	r6, r7, r3, r6
    7288:	eb18 0806 	adds.w	r8, r8, r6
    728c:	bf2c      	ite	cs
    728e:	f04f 0e01 	movcs.w	lr, #1
    7292:	f04f 0e00 	movcc.w	lr, #0
    7296:	f854 6c34 	ldr.w	r6, [r4, #-52]
    729a:	eb0e 0907 	add.w	r9, lr, r7
    729e:	eb16 0608 	adds.w	r6, r6, r8
    72a2:	bf2c      	ite	cs
    72a4:	f04f 0e01 	movcs.w	lr, #1
    72a8:	f04f 0e00 	movcc.w	lr, #0
    72ac:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    72b0:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
    72b4:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    72b6:	fba3 6706 	umull	r6, r7, r3, r6
    72ba:	eb1e 0e06 	adds.w	lr, lr, r6
    72be:	bf2c      	ite	cs
    72c0:	f04f 0801 	movcs.w	r8, #1
    72c4:	f04f 0800 	movcc.w	r8, #0
    72c8:	eb08 0907 	add.w	r9, r8, r7
    72cc:	f854 7c30 	ldr.w	r7, [r4, #-48]
    72d0:	eb17 070e 	adds.w	r7, r7, lr
    72d4:	bf2c      	ite	cs
    72d6:	f04f 0801 	movcs.w	r8, #1
    72da:	f04f 0800 	movcc.w	r8, #0
    72de:	f844 7c30 	str.w	r7, [r4, #-48]
    72e2:	f855 6c2c 	ldr.w	r6, [r5, #-44]
    72e6:	44c8      	add	r8, r9
    72e8:	fba3 6706 	umull	r6, r7, r3, r6
    72ec:	eb18 0806 	adds.w	r8, r8, r6
    72f0:	bf2c      	ite	cs
    72f2:	f04f 0e01 	movcs.w	lr, #1
    72f6:	f04f 0e00 	movcc.w	lr, #0
    72fa:	f854 6c2c 	ldr.w	r6, [r4, #-44]
    72fe:	eb0e 0907 	add.w	r9, lr, r7
    7302:	eb16 0608 	adds.w	r6, r6, r8
    7306:	bf2c      	ite	cs
    7308:	f04f 0e01 	movcs.w	lr, #1
    730c:	f04f 0e00 	movcc.w	lr, #0
    7310:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    7314:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
    7318:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    731a:	fba3 6706 	umull	r6, r7, r3, r6
    731e:	eb1e 0e06 	adds.w	lr, lr, r6
    7322:	bf2c      	ite	cs
    7324:	f04f 0801 	movcs.w	r8, #1
    7328:	f04f 0800 	movcc.w	r8, #0
    732c:	eb08 0907 	add.w	r9, r8, r7
    7330:	f854 7c28 	ldr.w	r7, [r4, #-40]
    7334:	eb17 070e 	adds.w	r7, r7, lr
    7338:	bf2c      	ite	cs
    733a:	f04f 0801 	movcs.w	r8, #1
    733e:	f04f 0800 	movcc.w	r8, #0
    7342:	f844 7c28 	str.w	r7, [r4, #-40]
    7346:	f855 6c24 	ldr.w	r6, [r5, #-36]
    734a:	44c8      	add	r8, r9
    734c:	fba3 6706 	umull	r6, r7, r3, r6
    7350:	eb18 0806 	adds.w	r8, r8, r6
    7354:	bf2c      	ite	cs
    7356:	f04f 0e01 	movcs.w	lr, #1
    735a:	f04f 0e00 	movcc.w	lr, #0
    735e:	f854 6c24 	ldr.w	r6, [r4, #-36]
    7362:	eb0e 0907 	add.w	r9, lr, r7
    7366:	eb16 0608 	adds.w	r6, r6, r8
    736a:	bf2c      	ite	cs
    736c:	f04f 0e01 	movcs.w	lr, #1
    7370:	f04f 0e00 	movcc.w	lr, #0
    7374:	f844 6c24 	str.w	r6, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    7378:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
    737c:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    737e:	fba3 6706 	umull	r6, r7, r3, r6
    7382:	eb1e 0e06 	adds.w	lr, lr, r6
    7386:	bf2c      	ite	cs
    7388:	f04f 0801 	movcs.w	r8, #1
    738c:	f04f 0800 	movcc.w	r8, #0
    7390:	eb08 0907 	add.w	r9, r8, r7
    7394:	f854 7c20 	ldr.w	r7, [r4, #-32]
    7398:	eb17 070e 	adds.w	r7, r7, lr
    739c:	bf2c      	ite	cs
    739e:	f04f 0801 	movcs.w	r8, #1
    73a2:	f04f 0800 	movcc.w	r8, #0
    73a6:	f844 7c20 	str.w	r7, [r4, #-32]
    73aa:	f855 6c1c 	ldr.w	r6, [r5, #-28]
    73ae:	44c8      	add	r8, r9
    73b0:	fba3 6706 	umull	r6, r7, r3, r6
    73b4:	eb18 0806 	adds.w	r8, r8, r6
    73b8:	bf2c      	ite	cs
    73ba:	f04f 0e01 	movcs.w	lr, #1
    73be:	f04f 0e00 	movcc.w	lr, #0
    73c2:	f854 6c1c 	ldr.w	r6, [r4, #-28]
    73c6:	eb0e 0907 	add.w	r9, lr, r7
    73ca:	eb16 0608 	adds.w	r6, r6, r8
    73ce:	bf2c      	ite	cs
    73d0:	f04f 0e01 	movcs.w	lr, #1
    73d4:	f04f 0e00 	movcc.w	lr, #0
    73d8:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    73dc:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    73e0:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    73e2:	fba3 6706 	umull	r6, r7, r3, r6
    73e6:	eb1e 0e06 	adds.w	lr, lr, r6
    73ea:	bf2c      	ite	cs
    73ec:	f04f 0801 	movcs.w	r8, #1
    73f0:	f04f 0800 	movcc.w	r8, #0
    73f4:	eb08 0907 	add.w	r9, r8, r7
    73f8:	f854 7c18 	ldr.w	r7, [r4, #-24]
    73fc:	eb17 070e 	adds.w	r7, r7, lr
    7400:	bf2c      	ite	cs
    7402:	f04f 0801 	movcs.w	r8, #1
    7406:	f04f 0800 	movcc.w	r8, #0
    740a:	f844 7c18 	str.w	r7, [r4, #-24]
    740e:	f855 6c14 	ldr.w	r6, [r5, #-20]
    7412:	44c8      	add	r8, r9
    7414:	fba3 6706 	umull	r6, r7, r3, r6
    7418:	eb18 0806 	adds.w	r8, r8, r6
    741c:	bf2c      	ite	cs
    741e:	f04f 0e01 	movcs.w	lr, #1
    7422:	f04f 0e00 	movcc.w	lr, #0
    7426:	f854 6c14 	ldr.w	r6, [r4, #-20]
    742a:	eb0e 0907 	add.w	r9, lr, r7
    742e:	eb16 0608 	adds.w	r6, r6, r8
    7432:	bf2c      	ite	cs
    7434:	f04f 0e01 	movcs.w	lr, #1
    7438:	f04f 0e00 	movcc.w	lr, #0
    743c:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    7440:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    7444:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    7446:	fba3 6706 	umull	r6, r7, r3, r6
    744a:	eb1e 0e06 	adds.w	lr, lr, r6
    744e:	bf2c      	ite	cs
    7450:	f04f 0801 	movcs.w	r8, #1
    7454:	f04f 0800 	movcc.w	r8, #0
    7458:	eb08 0907 	add.w	r9, r8, r7
    745c:	f854 7c10 	ldr.w	r7, [r4, #-16]
    7460:	eb17 070e 	adds.w	r7, r7, lr
    7464:	bf2c      	ite	cs
    7466:	f04f 0801 	movcs.w	r8, #1
    746a:	f04f 0800 	movcc.w	r8, #0
    746e:	f844 7c10 	str.w	r7, [r4, #-16]
    7472:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    7476:	44c8      	add	r8, r9
    7478:	fba3 6706 	umull	r6, r7, r3, r6
    747c:	eb18 0806 	adds.w	r8, r8, r6
    7480:	bf2c      	ite	cs
    7482:	f04f 0e01 	movcs.w	lr, #1
    7486:	f04f 0e00 	movcc.w	lr, #0
    748a:	f854 6c0c 	ldr.w	r6, [r4, #-12]
    748e:	eb0e 0907 	add.w	r9, lr, r7
    7492:	eb16 0608 	adds.w	r6, r6, r8
    7496:	bf2c      	ite	cs
    7498:	f04f 0e01 	movcs.w	lr, #1
    749c:	f04f 0e00 	movcc.w	lr, #0
    74a0:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    74a4:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    74a8:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    74aa:	fba3 6706 	umull	r6, r7, r3, r6
    74ae:	eb1e 0e06 	adds.w	lr, lr, r6
    74b2:	bf2c      	ite	cs
    74b4:	f04f 0801 	movcs.w	r8, #1
    74b8:	f04f 0800 	movcc.w	r8, #0
    74bc:	eb08 0907 	add.w	r9, r8, r7
    74c0:	f854 7c08 	ldr.w	r7, [r4, #-8]
    74c4:	eb17 070e 	adds.w	r7, r7, lr
    74c8:	bf2c      	ite	cs
    74ca:	f04f 0801 	movcs.w	r8, #1
    74ce:	f04f 0800 	movcc.w	r8, #0
    74d2:	f844 7c08 	str.w	r7, [r4, #-8]
    74d6:	f855 6c04 	ldr.w	r6, [r5, #-4]
    74da:	44c8      	add	r8, r9
    74dc:	fba3 6706 	umull	r6, r7, r3, r6
    74e0:	eb18 0806 	adds.w	r8, r8, r6
    74e4:	bf2c      	ite	cs
    74e6:	f04f 0e01 	movcs.w	lr, #1
    74ea:	f04f 0e00 	movcc.w	lr, #0
    74ee:	f854 6c04 	ldr.w	r6, [r4, #-4]
    74f2:	4477      	add	r7, lr
    74f4:	eb16 0608 	adds.w	r6, r6, r8
    74f8:	bf2c      	ite	cs
    74fa:	f04f 0e01 	movcs.w	lr, #1
    74fe:	f04f 0e00 	movcc.w	lr, #0
    7502:	f844 6c04 	str.w	r6, [r4, #-4]
    7506:	44be      	add	lr, r7
    for( ; i >= 16; i -= 16 )
    7508:	e5ad      	b.n	7066 <mpi_mul_hlp+0xe>
        MULADDC_CORE
    750a:	f855 6b04 	ldr.w	r6, [r5], #4
    750e:	680a      	ldr	r2, [r1, #0]
    7510:	fba3 7806 	umull	r7, r8, r3, r6
    7514:	eb1e 0e07 	adds.w	lr, lr, r7
    7518:	bf2c      	ite	cs
    751a:	2601      	movcs	r6, #1
    751c:	2600      	movcc	r6, #0
    751e:	eb12 020e 	adds.w	r2, r2, lr
    7522:	bf2c      	ite	cs
    7524:	f04f 0e01 	movcs.w	lr, #1
    7528:	f04f 0e00 	movcc.w	lr, #0
    752c:	4446      	add	r6, r8
    752e:	44b6      	add	lr, r6
    7530:	f841 2b04 	str.w	r2, [r1], #4
    for( ; i > 0; i-- )
    7534:	e64d      	b.n	71d2 <mpi_mul_hlp+0x17a>
        *d += c; c = ( *d < c ); d++;
    7536:	6823      	ldr	r3, [r4, #0]
    7538:	eb13 030e 	adds.w	r3, r3, lr
    753c:	bf2c      	ite	cs
    753e:	f04f 0e01 	movcs.w	lr, #1
    7542:	f04f 0e00 	movcc.w	lr, #0
    7546:	f844 3b04 	str.w	r3, [r4], #4
    754a:	e646      	b.n	71da <mpi_mul_hlp+0x182>

0000754c <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    754c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    754e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7552:	3901      	subs	r1, #1
    7554:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7558:	4281      	cmp	r1, r0
    755a:	d201      	bcs.n	7560 <mpi_bigendian_to_host.part.0+0x14>
}
    755c:	b002      	add	sp, #8
    755e:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    7560:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    7562:	2500      	movs	r5, #0
    7564:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7566:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7568:	eb0d 0203 	add.w	r2, sp, r3
    756c:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    756e:	f812 6b01 	ldrb.w	r6, [r2], #1
    7572:	3b01      	subs	r3, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7574:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7578:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    757c:	d1f7      	bne.n	756e <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    757e:	680a      	ldr	r2, [r1, #0]
    7580:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7582:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7584:	f814 6b01 	ldrb.w	r6, [r4], #1
    7588:	3a01      	subs	r2, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    758a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    758e:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7592:	d1f7      	bne.n	7584 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7594:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    7598:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    759c:	e7dc      	b.n	7558 <mpi_bigendian_to_host.part.0+0xc>

0000759e <mpi_montmul.isra.0>:
 *                      Its initial content is unused and
 *                      its final content is indeterminate.
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    759e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75a2:	468a      	mov	sl, r1
    75a4:	4617      	mov	r7, r2
    75a6:	b085      	sub	sp, #20
    75a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    75aa:	9000      	str	r0, [sp, #0]
                         const mbedtls_mpi *T )
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    75ac:	6862      	ldr	r2, [r4, #4]
    75ae:	68a0      	ldr	r0, [r4, #8]
    75b0:	2100      	movs	r1, #0
    75b2:	0092      	lsls	r2, r2, #2
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    75b4:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    75b6:	f7ff f927 	bl	6808 <memset>

    d = T->p;
    n = N->n;
    75ba:	f8d7 9004 	ldr.w	r9, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    75be:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    75c2:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    75c4:	454b      	cmp	r3, r9
    75c6:	bf28      	it	cs
    75c8:	464b      	movcs	r3, r9
    d = T->p;
    75ca:	46b0      	mov	r8, r6

    for( i = 0; i < n; i++ )
    75cc:	2500      	movs	r5, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    75ce:	f109 0401 	add.w	r4, r9, #1
    m = ( B->n < n ) ? B->n : n;
    75d2:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    75d4:	00a4      	lsls	r4, r4, #2
    for( i = 0; i < n; i++ )
    75d6:	9b00      	ldr	r3, [sp, #0]
    75d8:	45a9      	cmp	r9, r5
    75da:	6818      	ldr	r0, [r3, #0]
    75dc:	d120      	bne.n	7620 <mpi_montmul.isra.0+0x82>
    75de:	3c04      	subs	r4, #4
    75e0:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    75e4:	4622      	mov	r2, r4
    75e6:	4641      	mov	r1, r8
    75e8:	f7ff f903 	bl	67f2 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    75ec:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    75f0:	f8d7 c008 	ldr.w	ip, [r7, #8]
    d[n] += 1;
    75f4:	3301      	adds	r3, #1
    75f6:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mbedtls_mpi_uint c = 0, t, z;
    75fa:	2300      	movs	r3, #0
    for( i = 0; i < n; i++ )
    75fc:	461a      	mov	r2, r3
    75fe:	4295      	cmp	r5, r2
    7600:	d12c      	bne.n	765c <mpi_montmul.isra.0+0xbe>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7602:	f856 2014 	ldr.w	r2, [r6, r4, lsl #1]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7606:	4628      	mov	r0, r5
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7608:	1ad3      	subs	r3, r2, r3
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    760a:	4642      	mov	r2, r8
    760c:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    760e:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7612:	6809      	ldr	r1, [r1, #0]
    7614:	b2db      	uxtb	r3, r3
}
    7616:	b005      	add	sp, #20
    7618:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    761c:	f7ff bd0a 	b.w	7034 <mpi_safe_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7620:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    7624:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    7628:	680b      	ldr	r3, [r1, #0]
    762a:	f8d8 0000 	ldr.w	r0, [r8]
    762e:	9a03      	ldr	r2, [sp, #12]
    7630:	fb03 030b 	mla	r3, r3, fp, r0
    7634:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    7636:	9801      	ldr	r0, [sp, #4]
    7638:	4642      	mov	r2, r8
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    763a:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    763c:	465b      	mov	r3, fp
    763e:	f7ff fd0b 	bl	7058 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    7642:	4642      	mov	r2, r8
    7644:	9b02      	ldr	r3, [sp, #8]
    7646:	4648      	mov	r0, r9
    7648:	68b9      	ldr	r1, [r7, #8]
    764a:	f7ff fd05 	bl	7058 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    764e:	2300      	movs	r3, #0
    7650:	f848 bb04 	str.w	fp, [r8], #4
    7654:	f848 3004 	str.w	r3, [r8, r4]
    for( i = 0; i < n; i++ )
    7658:	3501      	adds	r5, #1
    765a:	e7bc      	b.n	75d6 <mpi_montmul.isra.0+0x38>
        z = ( l[i] <  c );    t = l[i] - c;
    765c:	f858 7022 	ldr.w	r7, [r8, r2, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7660:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    7664:	1af9      	subs	r1, r7, r3
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7666:	4281      	cmp	r1, r0
    7668:	bf2c      	ite	cs
    766a:	f04f 0e00 	movcs.w	lr, #0
    766e:	f04f 0e01 	movcc.w	lr, #1
    7672:	1a09      	subs	r1, r1, r0
    7674:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
    7678:	429f      	cmp	r7, r3
    767a:	bf2c      	ite	cs
    767c:	4673      	movcs	r3, lr
    767e:	f10e 0301 	addcc.w	r3, lr, #1
    for( i = 0; i < n; i++ )
    7682:	3201      	adds	r2, #1
    7684:	e7bb      	b.n	75fe <mpi_montmul.isra.0+0x60>

00007686 <mbedtls_mpi_init>:
    X->n = 0;
    7686:	2300      	movs	r3, #0
    7688:	2201      	movs	r2, #1
    X->p = NULL;
    768a:	6083      	str	r3, [r0, #8]
    X->n = 0;
    768c:	e9c0 2300 	strd	r2, r3, [r0]
}
    7690:	4770      	bx	lr

00007692 <mbedtls_mpi_free>:
{
    7692:	b510      	push	{r4, lr}
    if( X == NULL )
    7694:	4604      	mov	r4, r0
    7696:	b168      	cbz	r0, 76b4 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    7698:	6880      	ldr	r0, [r0, #8]
    769a:	b130      	cbz	r0, 76aa <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    769c:	6861      	ldr	r1, [r4, #4]
    769e:	0089      	lsls	r1, r1, #2
    76a0:	f7fe f83a 	bl	5718 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    76a4:	68a0      	ldr	r0, [r4, #8]
    76a6:	f7fc ff29 	bl	44fc <mbedtls_free>
    X->n = 0;
    76aa:	2300      	movs	r3, #0
    76ac:	2201      	movs	r2, #1
    76ae:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    76b2:	60a3      	str	r3, [r4, #8]
}
    76b4:	bd10      	pop	{r4, pc}

000076b6 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    76b6:	f242 7310 	movw	r3, #10000	; 0x2710
    76ba:	4299      	cmp	r1, r3
{
    76bc:	b570      	push	{r4, r5, r6, lr}
    76be:	4604      	mov	r4, r0
    76c0:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    76c2:	d902      	bls.n	76ca <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    76c4:	f06f 000f 	mvn.w	r0, #15
}
    76c8:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    76ca:	6843      	ldr	r3, [r0, #4]
    76cc:	428b      	cmp	r3, r1
    76ce:	d216      	bcs.n	76fe <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    76d0:	2104      	movs	r1, #4
    76d2:	4628      	mov	r0, r5
    76d4:	f7fc ff0c 	bl	44f0 <mbedtls_calloc>
    76d8:	4606      	mov	r6, r0
    76da:	2800      	cmp	r0, #0
    76dc:	d0f2      	beq.n	76c4 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    76de:	68a1      	ldr	r1, [r4, #8]
    76e0:	b159      	cbz	r1, 76fa <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    76e2:	6862      	ldr	r2, [r4, #4]
    76e4:	0092      	lsls	r2, r2, #2
    76e6:	f7ff f884 	bl	67f2 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    76ea:	6861      	ldr	r1, [r4, #4]
    76ec:	68a0      	ldr	r0, [r4, #8]
    76ee:	0089      	lsls	r1, r1, #2
    76f0:	f7fe f812 	bl	5718 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    76f4:	68a0      	ldr	r0, [r4, #8]
    76f6:	f7fc ff01 	bl	44fc <mbedtls_free>
        X->p = p;
    76fa:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    76fe:	2000      	movs	r0, #0
    7700:	e7e2      	b.n	76c8 <mbedtls_mpi_grow+0x12>

00007702 <mbedtls_mpi_resize_clear>:
{
    7702:	b538      	push	{r3, r4, r5, lr}
    7704:	4604      	mov	r4, r0
    if( limbs == 0 )
    7706:	460d      	mov	r5, r1
    7708:	b919      	cbnz	r1, 7712 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    770a:	f7ff ffc2 	bl	7692 <mbedtls_mpi_free>
}
    770e:	2000      	movs	r0, #0
    7710:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    7712:	6842      	ldr	r2, [r0, #4]
    7714:	428a      	cmp	r2, r1
    7716:	d107      	bne.n	7728 <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    7718:	2100      	movs	r1, #0
    771a:	6880      	ldr	r0, [r0, #8]
    771c:	0092      	lsls	r2, r2, #2
    771e:	f7ff f873 	bl	6808 <memset>
        X->s = 1;
    7722:	2301      	movs	r3, #1
    7724:	6023      	str	r3, [r4, #0]
        return( 0 );
    7726:	e7f2      	b.n	770e <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    7728:	f7ff ffb3 	bl	7692 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    772c:	4629      	mov	r1, r5
    772e:	4620      	mov	r0, r4
}
    7730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    7734:	f7ff bfbf 	b.w	76b6 <mbedtls_mpi_grow>

00007738 <mbedtls_mpi_copy>:
    if( X == Y )
    7738:	4288      	cmp	r0, r1
{
    773a:	b570      	push	{r4, r5, r6, lr}
    773c:	4605      	mov	r5, r0
    773e:	460e      	mov	r6, r1
    if( X == Y )
    7740:	d00a      	beq.n	7758 <mbedtls_mpi_copy+0x20>
    if( Y->n == 0 )
    7742:	684c      	ldr	r4, [r1, #4]
    7744:	6840      	ldr	r0, [r0, #4]
    7746:	b96c      	cbnz	r4, 7764 <mbedtls_mpi_copy+0x2c>
        if( X->n != 0 )
    7748:	b1c8      	cbz	r0, 777e <mbedtls_mpi_copy+0x46>
            X->s = 1;
    774a:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    774c:	0082      	lsls	r2, r0, #2
    774e:	4621      	mov	r1, r4
    7750:	68a8      	ldr	r0, [r5, #8]
            X->s = 1;
    7752:	602b      	str	r3, [r5, #0]
            memset( X->p, 0, X->n * ciL );
    7754:	f7ff f858 	bl	6808 <memset>
        return( 0 );
    7758:	2000      	movs	r0, #0
    775a:	e010      	b.n	777e <mbedtls_mpi_copy+0x46>
        if( Y->p[i] != 0 )
    775c:	68b3      	ldr	r3, [r6, #8]
    775e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7762:	b913      	cbnz	r3, 776a <mbedtls_mpi_copy+0x32>
    for( i = Y->n - 1; i > 0; i-- )
    7764:	3c01      	subs	r4, #1
    7766:	2c00      	cmp	r4, #0
    7768:	d1f8      	bne.n	775c <mbedtls_mpi_copy+0x24>
    X->s = Y->s;
    776a:	6833      	ldr	r3, [r6, #0]
    i++;
    776c:	3401      	adds	r4, #1
    if( X->n < i )
    776e:	4284      	cmp	r4, r0
    X->s = Y->s;
    7770:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    7772:	d905      	bls.n	7780 <mbedtls_mpi_copy+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    7774:	4621      	mov	r1, r4
    7776:	4628      	mov	r0, r5
    7778:	f7ff ff9d 	bl	76b6 <mbedtls_mpi_grow>
    777c:	b140      	cbz	r0, 7790 <mbedtls_mpi_copy+0x58>
}
    777e:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7780:	1b02      	subs	r2, r0, r4
    7782:	68a8      	ldr	r0, [r5, #8]
    7784:	2100      	movs	r1, #0
    7786:	0092      	lsls	r2, r2, #2
    7788:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    778c:	f7ff f83c 	bl	6808 <memset>
    memcpy( X->p, Y->p, i * ciL );
    7790:	68b1      	ldr	r1, [r6, #8]
    7792:	68a8      	ldr	r0, [r5, #8]
    7794:	00a2      	lsls	r2, r4, #2
    7796:	f7ff f82c 	bl	67f2 <memcpy>
    779a:	e7dd      	b.n	7758 <mbedtls_mpi_copy+0x20>

0000779c <mbedtls_mpi_safe_cond_assign>:
{
    779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    779e:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    77a0:	6849      	ldr	r1, [r1, #4]
{
    77a2:	4605      	mov	r5, r0
    77a4:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    77a6:	f7ff ff86 	bl	76b6 <mbedtls_mpi_grow>
    77aa:	4607      	mov	r7, r0
    77ac:	b9c0      	cbnz	r0, 77e0 <mbedtls_mpi_safe_cond_assign+0x44>
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    77ae:	4263      	negs	r3, r4
    77b0:	431c      	orrs	r4, r3
    unsigned ua = a + 1;
    77b2:	682b      	ldr	r3, [r5, #0]
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    77b4:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    unsigned ua = a + 1;
    77b8:	1c5a      	adds	r2, r3, #1
    unsigned ub = b + 1;
    77ba:	6833      	ldr	r3, [r6, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    77bc:	68a9      	ldr	r1, [r5, #8]
    unsigned ub = b + 1;
    77be:	3301      	adds	r3, #1
    unsigned ur = ( ua & ~mask ) | ( ub & mask );
    77c0:	4053      	eors	r3, r2
    77c2:	ea03 0344 	and.w	r3, r3, r4, lsl #1
    77c6:	4053      	eors	r3, r2
    return( (int) ur - 1 );
    77c8:	3b01      	subs	r3, #1
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
    77ca:	602b      	str	r3, [r5, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    77cc:	68b2      	ldr	r2, [r6, #8]
    77ce:	4623      	mov	r3, r4
    77d0:	6870      	ldr	r0, [r6, #4]
    77d2:	f7ff fc2f 	bl	7034 <mpi_safe_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    77d6:	6871      	ldr	r1, [r6, #4]
        X->p[i] &= ~limb_mask;
    77d8:	3c01      	subs	r4, #1
    for( i = Y->n; i < X->n; i++ )
    77da:	686b      	ldr	r3, [r5, #4]
    77dc:	428b      	cmp	r3, r1
    77de:	d801      	bhi.n	77e4 <mbedtls_mpi_safe_cond_assign+0x48>
}
    77e0:	4638      	mov	r0, r7
    77e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] &= ~limb_mask;
    77e4:	68aa      	ldr	r2, [r5, #8]
    77e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    77ea:	4023      	ands	r3, r4
    77ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    77f0:	3101      	adds	r1, #1
    77f2:	e7f2      	b.n	77da <mbedtls_mpi_safe_cond_assign+0x3e>

000077f4 <mbedtls_mpi_lset>:
{
    77f4:	b570      	push	{r4, r5, r6, lr}
    77f6:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    77f8:	2101      	movs	r1, #1
{
    77fa:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    77fc:	f7ff ff5b 	bl	76b6 <mbedtls_mpi_grow>
    7800:	4605      	mov	r5, r0
    7802:	b988      	cbnz	r0, 7828 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    7804:	6862      	ldr	r2, [r4, #4]
    7806:	4601      	mov	r1, r0
    7808:	0092      	lsls	r2, r2, #2
    780a:	68a0      	ldr	r0, [r4, #8]
    780c:	f7fe fffc 	bl	6808 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    7810:	68a3      	ldr	r3, [r4, #8]
    7812:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    7816:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    7818:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    781c:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    781e:	bfb4      	ite	lt
    7820:	f04f 33ff 	movlt.w	r3, #4294967295
    7824:	2301      	movge	r3, #1
    7826:	6023      	str	r3, [r4, #0]
}
    7828:	4628      	mov	r0, r5
    782a:	bd70      	pop	{r4, r5, r6, pc}

0000782c <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    782c:	6843      	ldr	r3, [r0, #4]
    782e:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    7832:	bf3f      	itttt	cc
    7834:	6883      	ldrcc	r3, [r0, #8]
    7836:	094a      	lsrcc	r2, r1, #5
    7838:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    783c:	f001 011f 	andcc.w	r1, r1, #31
    7840:	bf3a      	itte	cc
    7842:	fa20 f101 	lsrcc.w	r1, r0, r1
    7846:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    784a:	2000      	movcs	r0, #0
}
    784c:	4770      	bx	lr

0000784e <mbedtls_mpi_bitlen>:
{
    784e:	4602      	mov	r2, r0
    if( X->n == 0 )
    7850:	6840      	ldr	r0, [r0, #4]
    7852:	b188      	cbz	r0, 7878 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    7854:	6892      	ldr	r2, [r2, #8]
    7856:	1e43      	subs	r3, r0, #1
    7858:	b97b      	cbnz	r3, 787a <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    785a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    785e:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    7860:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    7864:	4211      	tst	r1, r2
    7866:	d104      	bne.n	7872 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    7868:	3001      	adds	r0, #1
    786a:	2820      	cmp	r0, #32
        mask >>= 1;
    786c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    7870:	d1f8      	bne.n	7864 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    7872:	3301      	adds	r3, #1
    7874:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    7878:	4770      	bx	lr
        if( X->p[i] != 0 )
    787a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    787e:	2900      	cmp	r1, #0
    7880:	d1eb      	bne.n	785a <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    7882:	3b01      	subs	r3, #1
    7884:	e7e8      	b.n	7858 <mbedtls_mpi_bitlen+0xa>

00007886 <mbedtls_mpi_size>:
{
    7886:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    7888:	f7ff ffe1 	bl	784e <mbedtls_mpi_bitlen>
    788c:	3007      	adds	r0, #7
}
    788e:	08c0      	lsrs	r0, r0, #3
    7890:	bd08      	pop	{r3, pc}

00007892 <mbedtls_mpi_read_binary>:
{
    7892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    7896:	f012 0403 	ands.w	r4, r2, #3
    789a:	bf18      	it	ne
    789c:	2401      	movne	r4, #1
    789e:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    78a2:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    78a4:	4621      	mov	r1, r4
{
    78a6:	4607      	mov	r7, r0
    78a8:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    78aa:	f7ff ff2a 	bl	7702 <mbedtls_mpi_resize_clear>
    78ae:	4606      	mov	r6, r0
    78b0:	b968      	cbnz	r0, 78ce <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    78b2:	b165      	cbz	r5, 78ce <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    78b4:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    78b6:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    78ba:	462a      	mov	r2, r5
    78bc:	4641      	mov	r1, r8
    78be:	4418      	add	r0, r3
    78c0:	f7fe ff97 	bl	67f2 <memcpy>
    if( limbs == 0 )
    78c4:	b11c      	cbz	r4, 78ce <mbedtls_mpi_read_binary+0x3c>
    78c6:	4621      	mov	r1, r4
    78c8:	68b8      	ldr	r0, [r7, #8]
    78ca:	f7ff fe3f 	bl	754c <mpi_bigendian_to_host.part.0>
}
    78ce:	4630      	mov	r0, r6
    78d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000078d4 <mbedtls_mpi_write_binary>:
{
    78d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78d6:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    78d8:	6863      	ldr	r3, [r4, #4]
{
    78da:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    78dc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    78e0:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    78e4:	d91c      	bls.n	7920 <mbedtls_mpi_write_binary+0x4c>
        p = buf + buflen - stored_bytes;
    78e6:	1b52      	subs	r2, r2, r5
    78e8:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    78ea:	2100      	movs	r1, #0
    78ec:	f7fe ff8c 	bl	6808 <memset>
        p = buf + buflen - stored_bytes;
    78f0:	4630      	mov	r0, r6
    78f2:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    78f4:	2300      	movs	r3, #0
    78f6:	1881      	adds	r1, r0, r2
    78f8:	429a      	cmp	r2, r3
    78fa:	d113      	bne.n	7924 <mbedtls_mpi_write_binary+0x50>
    return( 0 );
    78fc:	2000      	movs	r0, #0
}
    78fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    7900:	68a7      	ldr	r7, [r4, #8]
    7902:	f003 0103 	and.w	r1, r3, #3
    7906:	f023 0c03 	bic.w	ip, r3, #3
    790a:	00ce      	lsls	r6, r1, #3
    790c:	f857 100c 	ldr.w	r1, [r7, ip]
    7910:	40f1      	lsrs	r1, r6
    7912:	f011 0fff 	tst.w	r1, #255	; 0xff
    7916:	d111      	bne.n	793c <mbedtls_mpi_write_binary+0x68>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7918:	3301      	adds	r3, #1
    791a:	42ab      	cmp	r3, r5
    791c:	d1f0      	bne.n	7900 <mbedtls_mpi_write_binary+0x2c>
    791e:	e7e9      	b.n	78f4 <mbedtls_mpi_write_binary+0x20>
    7920:	4613      	mov	r3, r2
    7922:	e7fa      	b.n	791a <mbedtls_mpi_write_binary+0x46>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    7924:	68a7      	ldr	r7, [r4, #8]
    7926:	f003 0003 	and.w	r0, r3, #3
    792a:	f023 0603 	bic.w	r6, r3, #3
    792e:	00c5      	lsls	r5, r0, #3
    7930:	59b8      	ldr	r0, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
    7932:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    7934:	40e8      	lsrs	r0, r5
    7936:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    793a:	e7dd      	b.n	78f8 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    793c:	f06f 0007 	mvn.w	r0, #7
    7940:	e7dd      	b.n	78fe <mbedtls_mpi_write_binary+0x2a>

00007942 <mbedtls_mpi_shift_l>:
{
    7942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7944:	4604      	mov	r4, r0
    7946:	460e      	mov	r6, r1
    v0 = count / (biL    );
    7948:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
    794a:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    794e:	f7ff ff7e 	bl	784e <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    7952:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    7954:	4430      	add	r0, r6
    if( X->n * biL < i )
    7956:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    795a:	d805      	bhi.n	7968 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    795c:	2e1f      	cmp	r6, #31
    795e:	d80f      	bhi.n	7980 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    7960:	2f00      	cmp	r7, #0
    7962:	d13a      	bne.n	79da <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    7964:	2000      	movs	r0, #0
    7966:	e00a      	b.n	797e <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    7968:	f010 011f 	ands.w	r1, r0, #31
    796c:	bf18      	it	ne
    796e:	2101      	movne	r1, #1
    7970:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    7974:	4620      	mov	r0, r4
    7976:	f7ff fe9e 	bl	76b6 <mbedtls_mpi_grow>
    797a:	2800      	cmp	r0, #0
    797c:	d0ee      	beq.n	795c <mbedtls_mpi_shift_l+0x1a>
}
    797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    7980:	f06f 0003 	mvn.w	r0, #3
    7984:	6863      	ldr	r3, [r4, #4]
    7986:	4368      	muls	r0, r5
    7988:	4619      	mov	r1, r3
    798a:	009a      	lsls	r2, r3, #2
    798c:	42a9      	cmp	r1, r5
    798e:	f1a2 0204 	sub.w	r2, r2, #4
    7992:	d80a      	bhi.n	79aa <mbedtls_mpi_shift_l+0x68>
    7994:	42ab      	cmp	r3, r5
    7996:	bf28      	it	cs
    7998:	462b      	movcs	r3, r5
            X->p[i - 1] = 0;
    799a:	2200      	movs	r2, #0
    799c:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    799e:	3b04      	subs	r3, #4
    79a0:	1d19      	adds	r1, r3, #4
    79a2:	d0dd      	beq.n	7960 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    79a4:	68a1      	ldr	r1, [r4, #8]
    79a6:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    79a8:	e7f9      	b.n	799e <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = X->p[i - v0 - 1];
    79aa:	68a6      	ldr	r6, [r4, #8]
        for( i = X->n; i > v0; i-- )
    79ac:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    79ae:	eb06 0c02 	add.w	ip, r6, r2
    79b2:	f85c c000 	ldr.w	ip, [ip, r0]
    79b6:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    79ba:	e7e7      	b.n	798c <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    79bc:	68a0      	ldr	r0, [r4, #8]
    79be:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
    79c2:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    79c6:	4313      	orrs	r3, r2
    79c8:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
    79cc:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    79d0:	3501      	adds	r5, #1
    79d2:	6863      	ldr	r3, [r4, #4]
    79d4:	42ab      	cmp	r3, r5
    79d6:	d8f1      	bhi.n	79bc <mbedtls_mpi_shift_l+0x7a>
    79d8:	e7c4      	b.n	7964 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    79da:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    79dc:	f1c7 0620 	rsb	r6, r7, #32
    79e0:	e7f7      	b.n	79d2 <mbedtls_mpi_shift_l+0x90>

000079e2 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    79e2:	6843      	ldr	r3, [r0, #4]
{
    79e4:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    79e6:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    79e8:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    79ea:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    79ee:	d301      	bcc.n	79f4 <mbedtls_mpi_shift_r+0x12>
    79f0:	d104      	bne.n	79fc <mbedtls_mpi_shift_r+0x1a>
    79f2:	b36a      	cbz	r2, 7a50 <mbedtls_mpi_shift_r+0x6e>
}
    79f4:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    79f6:	2100      	movs	r1, #0
    79f8:	f7ff befc 	b.w	77f4 <mbedtls_mpi_lset>
    if( v0 > 0 )
    79fc:	291f      	cmp	r1, #31
    79fe:	d829      	bhi.n	7a54 <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    7a00:	b9aa      	cbnz	r2, 7a2e <mbedtls_mpi_shift_r+0x4c>
}
    7a02:	bcf0      	pop	{r4, r5, r6, r7}
    7a04:	2000      	movs	r0, #0
    7a06:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    7a08:	6885      	ldr	r5, [r0, #8]
    7a0a:	586e      	ldr	r6, [r5, r1]
    7a0c:	3104      	adds	r1, #4
    7a0e:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    7a12:	3301      	adds	r3, #1
    7a14:	6845      	ldr	r5, [r0, #4]
    7a16:	1b2d      	subs	r5, r5, r4
    7a18:	429d      	cmp	r5, r3
    7a1a:	d8f5      	bhi.n	7a08 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    7a1c:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    7a1e:	6841      	ldr	r1, [r0, #4]
    7a20:	4299      	cmp	r1, r3
    7a22:	d9ed      	bls.n	7a00 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    7a24:	6881      	ldr	r1, [r0, #8]
    7a26:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    7a2a:	3301      	adds	r3, #1
    7a2c:	e7f7      	b.n	7a1e <mbedtls_mpi_shift_r+0x3c>
    mbedtls_mpi_uint r0 = 0, r1;
    7a2e:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    7a30:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    7a32:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    7a36:	3b01      	subs	r3, #1
    7a38:	d3e3      	bcc.n	7a02 <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    7a3a:	6886      	ldr	r6, [r0, #8]
    7a3c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    7a40:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    7a44:	4321      	orrs	r1, r4
    7a46:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    7a4a:	fa05 f407 	lsl.w	r4, r5, r7
    7a4e:	e7f2      	b.n	7a36 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    7a50:	291f      	cmp	r1, #31
    7a52:	d9d6      	bls.n	7a02 <mbedtls_mpi_shift_r+0x20>
{
    7a54:	2300      	movs	r3, #0
    7a56:	00a1      	lsls	r1, r4, #2
    7a58:	e7dc      	b.n	7a14 <mbedtls_mpi_shift_r+0x32>

00007a5a <mbedtls_mpi_cmp_abs>:
{
    7a5a:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7a5c:	6843      	ldr	r3, [r0, #4]
    7a5e:	b92b      	cbnz	r3, 7a6c <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    7a60:	684a      	ldr	r2, [r1, #4]
    7a62:	b962      	cbnz	r2, 7a7e <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    7a64:	1e18      	subs	r0, r3, #0
    7a66:	bf18      	it	ne
    7a68:	2001      	movne	r0, #1
    7a6a:	e028      	b.n	7abe <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    7a6c:	6882      	ldr	r2, [r0, #8]
    7a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7a72:	f852 2c04 	ldr.w	r2, [r2, #-4]
    7a76:	2a00      	cmp	r2, #0
    7a78:	d1f2      	bne.n	7a60 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    7a7a:	3b01      	subs	r3, #1
    7a7c:	e7ef      	b.n	7a5e <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    7a7e:	688c      	ldr	r4, [r1, #8]
    7a80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    7a84:	f855 5c04 	ldr.w	r5, [r5, #-4]
    7a88:	b985      	cbnz	r5, 7aac <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
    7a8a:	3a01      	subs	r2, #1
    7a8c:	e7e9      	b.n	7a62 <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    7a8e:	6882      	ldr	r2, [r0, #8]
    7a90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7a94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    7a98:	4291      	cmp	r1, r2
    7a9a:	d805      	bhi.n	7aa8 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7a9c:	f103 33ff 	add.w	r3, r3, #4294967295
    7aa0:	d20a      	bcs.n	7ab8 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    7aa2:	f04f 30ff 	mov.w	r0, #4294967295
    7aa6:	e00a      	b.n	7abe <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    7aa8:	2001      	movs	r0, #1
    7aaa:	e008      	b.n	7abe <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    7aac:	b10b      	cbz	r3, 7ab2 <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
    7aae:	4293      	cmp	r3, r2
    7ab0:	d8fa      	bhi.n	7aa8 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
    7ab2:	4293      	cmp	r3, r2
    7ab4:	d3f5      	bcc.n	7aa2 <mbedtls_mpi_cmp_abs+0x48>
    7ab6:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    7ab8:	1c5a      	adds	r2, r3, #1
    7aba:	d1e8      	bne.n	7a8e <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
    7abc:	2000      	movs	r0, #0
}
    7abe:	bd30      	pop	{r4, r5, pc}

00007ac0 <mbedtls_mpi_cmp_mpi>:
{
    7ac0:	4602      	mov	r2, r0
    7ac2:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7ac4:	6843      	ldr	r3, [r0, #4]
    7ac6:	b923      	cbnz	r3, 7ad2 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    7ac8:	6848      	ldr	r0, [r1, #4]
    7aca:	b958      	cbnz	r0, 7ae4 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    7acc:	2b00      	cmp	r3, #0
    7ace:	d138      	bne.n	7b42 <mbedtls_mpi_cmp_mpi+0x82>
    7ad0:	e031      	b.n	7b36 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
    7ad2:	6890      	ldr	r0, [r2, #8]
    7ad4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7ad8:	f850 0c04 	ldr.w	r0, [r0, #-4]
    7adc:	2800      	cmp	r0, #0
    7ade:	d1f3      	bne.n	7ac8 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    7ae0:	3b01      	subs	r3, #1
    7ae2:	e7f0      	b.n	7ac6 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    7ae4:	688c      	ldr	r4, [r1, #8]
    7ae6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7aea:	f855 5c04 	ldr.w	r5, [r5, #-4]
    7aee:	bb25      	cbnz	r5, 7b3a <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
    7af0:	3801      	subs	r0, #1
    7af2:	e7ea      	b.n	7aca <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    7af4:	4283      	cmp	r3, r0
    7af6:	6809      	ldr	r1, [r1, #0]
    7af8:	d201      	bcs.n	7afe <mbedtls_mpi_cmp_mpi+0x3e>
    7afa:	4248      	negs	r0, r1
    7afc:	e022      	b.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7afe:	6810      	ldr	r0, [r2, #0]
    7b00:	2800      	cmp	r0, #0
    7b02:	dd03      	ble.n	7b0c <mbedtls_mpi_cmp_mpi+0x4c>
    7b04:	2900      	cmp	r1, #0
    7b06:	da13      	bge.n	7b30 <mbedtls_mpi_cmp_mpi+0x70>
    7b08:	2001      	movs	r0, #1
    7b0a:	e01b      	b.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    7b0c:	2900      	cmp	r1, #0
    7b0e:	dd0f      	ble.n	7b30 <mbedtls_mpi_cmp_mpi+0x70>
    7b10:	b170      	cbz	r0, 7b30 <mbedtls_mpi_cmp_mpi+0x70>
    7b12:	f04f 30ff 	mov.w	r0, #4294967295
    7b16:	e015      	b.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    7b18:	6891      	ldr	r1, [r2, #8]
    7b1a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    7b1e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    7b22:	428d      	cmp	r5, r1
    7b24:	d80e      	bhi.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    7b26:	f103 33ff 	add.w	r3, r3, #4294967295
    7b2a:	d202      	bcs.n	7b32 <mbedtls_mpi_cmp_mpi+0x72>
    7b2c:	4240      	negs	r0, r0
    7b2e:	e009      	b.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
    7b30:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    7b32:	1c59      	adds	r1, r3, #1
    7b34:	d1f0      	bne.n	7b18 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    7b36:	2000      	movs	r0, #0
    7b38:	e004      	b.n	7b44 <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d0da      	beq.n	7af4 <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
    7b3e:	4283      	cmp	r3, r0
    7b40:	d9d8      	bls.n	7af4 <mbedtls_mpi_cmp_mpi+0x34>
    7b42:	6810      	ldr	r0, [r2, #0]
}
    7b44:	bd30      	pop	{r4, r5, pc}

00007b46 <mbedtls_mpi_cmp_int>:
{
    7b46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    7b48:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    7b4c:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    7b50:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    7b52:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    7b54:	bfb4      	ite	lt
    7b56:	f04f 33ff 	movlt.w	r3, #4294967295
    7b5a:	2301      	movge	r3, #1
    7b5c:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    7b5e:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    7b60:	a901      	add	r1, sp, #4
    Y.n = 1;
    7b62:	9302      	str	r3, [sp, #8]
    Y.p = p;
    7b64:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    7b68:	f7ff ffaa 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
}
    7b6c:	b005      	add	sp, #20
    7b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00007b72 <mbedtls_mpi_add_abs>:
    if( X == B )
    7b72:	4290      	cmp	r0, r2
{
    7b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b78:	4607      	mov	r7, r0
    7b7a:	460d      	mov	r5, r1
    7b7c:	4616      	mov	r6, r2
    if( X == B )
    7b7e:	d002      	beq.n	7b86 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    7b80:	4288      	cmp	r0, r1
    7b82:	d129      	bne.n	7bd8 <mbedtls_mpi_add_abs+0x66>
{
    7b84:	4635      	mov	r5, r6
    X->s = 1;
    7b86:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    7b88:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
    7b8a:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    7b8c:	bb66      	cbnz	r6, 7be8 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7b8e:	4631      	mov	r1, r6
    7b90:	4638      	mov	r0, r7
    7b92:	f7ff fd90 	bl	76b6 <mbedtls_mpi_grow>
    7b96:	4604      	mov	r4, r0
    7b98:	bb18      	cbnz	r0, 7be2 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    7b9a:	68a9      	ldr	r1, [r5, #8]
    7b9c:	4605      	mov	r5, r0
    7b9e:	68bb      	ldr	r3, [r7, #8]
    for( i = 0; i < j; i++, o++, p++ )
    7ba0:	4286      	cmp	r6, r0
    7ba2:	d12a      	bne.n	7bfa <mbedtls_mpi_add_abs+0x88>
    7ba4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
    7ba8:	b1dd      	cbz	r5, 7be2 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7baa:	687a      	ldr	r2, [r7, #4]
    7bac:	f106 0801 	add.w	r8, r6, #1
    7bb0:	42b2      	cmp	r2, r6
    7bb2:	d808      	bhi.n	7bc6 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7bb4:	4641      	mov	r1, r8
    7bb6:	4638      	mov	r0, r7
    7bb8:	f7ff fd7d 	bl	76b6 <mbedtls_mpi_grow>
    7bbc:	2800      	cmp	r0, #0
    7bbe:	d12f      	bne.n	7c20 <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
    7bc0:	68bb      	ldr	r3, [r7, #8]
    7bc2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    7bc6:	681a      	ldr	r2, [r3, #0]
    7bc8:	4646      	mov	r6, r8
    7bca:	1955      	adds	r5, r2, r5
    7bcc:	f843 5b04 	str.w	r5, [r3], #4
    7bd0:	bf2c      	ite	cs
    7bd2:	2501      	movcs	r5, #1
    7bd4:	2500      	movcc	r5, #0
    7bd6:	e7e7      	b.n	7ba8 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7bd8:	f7ff fdae 	bl	7738 <mbedtls_mpi_copy>
    7bdc:	4604      	mov	r4, r0
    7bde:	2800      	cmp	r0, #0
    7be0:	d0d0      	beq.n	7b84 <mbedtls_mpi_add_abs+0x12>
}
    7be2:	4620      	mov	r0, r4
    7be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    7be8:	68ab      	ldr	r3, [r5, #8]
    7bea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7bee:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7bf2:	2b00      	cmp	r3, #0
    7bf4:	d1cb      	bne.n	7b8e <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    7bf6:	3e01      	subs	r6, #1
    7bf8:	e7c8      	b.n	7b8c <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    7bfa:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    7bfe:	eb12 0c05 	adds.w	ip, r2, r5
    7c02:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    7c06:	bf2c      	ite	cs
    7c08:	2501      	movcs	r5, #1
    7c0a:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
    7c0c:	eb1c 0202 	adds.w	r2, ip, r2
    7c10:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    7c14:	bf2c      	ite	cs
    7c16:	2201      	movcs	r2, #1
    7c18:	2200      	movcc	r2, #0
    for( i = 0; i < j; i++, o++, p++ )
    7c1a:	3001      	adds	r0, #1
        *p += tmp; c += ( *p < tmp );
    7c1c:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
    7c1e:	e7bf      	b.n	7ba0 <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7c20:	4604      	mov	r4, r0
    return( ret );
    7c22:	e7de      	b.n	7be2 <mbedtls_mpi_add_abs+0x70>

00007c24 <mbedtls_mpi_sub_abs>:
{
    7c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c28:	4605      	mov	r5, r0
    7c2a:	460e      	mov	r6, r1
    7c2c:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    7c2e:	6854      	ldr	r4, [r2, #4]
    7c30:	b93c      	cbnz	r4, 7c42 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    7c32:	6871      	ldr	r1, [r6, #4]
    7c34:	42a1      	cmp	r1, r4
    7c36:	d20e      	bcs.n	7c56 <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    7c38:	f06f 0709 	mvn.w	r7, #9
}
    7c3c:	4638      	mov	r0, r7
    7c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    7c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7c46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7c4a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d1ef      	bne.n	7c32 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    7c52:	3c01      	subs	r4, #1
    7c54:	e7ec      	b.n	7c30 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    7c56:	4628      	mov	r0, r5
    7c58:	f7ff fd2d 	bl	76b6 <mbedtls_mpi_grow>
    7c5c:	4607      	mov	r7, r0
    7c5e:	2800      	cmp	r0, #0
    7c60:	d1ec      	bne.n	7c3c <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    7c62:	6872      	ldr	r2, [r6, #4]
    7c64:	42a2      	cmp	r2, r4
    7c66:	d909      	bls.n	7c7c <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    7c68:	68b1      	ldr	r1, [r6, #8]
    7c6a:	68a8      	ldr	r0, [r5, #8]
    7c6c:	1b12      	subs	r2, r2, r4
    7c6e:	0092      	lsls	r2, r2, #2
    7c70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7c74:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7c78:	f7fe fdbb 	bl	67f2 <memcpy>
    if( X->n > A->n )
    7c7c:	686a      	ldr	r2, [r5, #4]
    7c7e:	6870      	ldr	r0, [r6, #4]
    7c80:	4282      	cmp	r2, r0
    7c82:	d907      	bls.n	7c94 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    7c84:	68ab      	ldr	r3, [r5, #8]
    7c86:	1a12      	subs	r2, r2, r0
    7c88:	2100      	movs	r1, #0
    7c8a:	0092      	lsls	r2, r2, #2
    7c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c90:	f7fe fdba 	bl	6808 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    7c94:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    7c96:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    7c98:	68a9      	ldr	r1, [r5, #8]
    7c9a:	f8d6 e008 	ldr.w	lr, [r6, #8]
    7c9e:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    7ca2:	42a3      	cmp	r3, r4
    7ca4:	d110      	bne.n	7cc8 <mbedtls_mpi_sub_abs+0xa4>
    if( carry != 0 )
    7ca6:	b162      	cbz	r2, 7cc2 <mbedtls_mpi_sub_abs+0x9e>
            --X->p[n];
    7ca8:	f04f 32ff 	mov.w	r2, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    7cac:	686b      	ldr	r3, [r5, #4]
    7cae:	42a3      	cmp	r3, r4
    7cb0:	d924      	bls.n	7cfc <mbedtls_mpi_sub_abs+0xd8>
    7cb2:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    7cb6:	b1eb      	cbz	r3, 7cf4 <mbedtls_mpi_sub_abs+0xd0>
        --X->p[n];
    7cb8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    7cbc:	3b01      	subs	r3, #1
    7cbe:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    7cc2:	2301      	movs	r3, #1
    7cc4:	602b      	str	r3, [r5, #0]
    return( ret );
    7cc6:	e7b9      	b.n	7c3c <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    7cc8:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7ccc:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    7cd0:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    7cd4:	42b0      	cmp	r0, r6
    7cd6:	bf2c      	ite	cs
    7cd8:	f04f 0900 	movcs.w	r9, #0
    7cdc:	f04f 0901 	movcc.w	r9, #1
    7ce0:	1b80      	subs	r0, r0, r6
    7ce2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    7ce6:	4594      	cmp	ip, r2
    7ce8:	bf2c      	ite	cs
    7cea:	464a      	movcs	r2, r9
    7cec:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    7cf0:	3301      	adds	r3, #1
    7cf2:	e7d6      	b.n	7ca2 <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    7cf4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    7cf8:	3401      	adds	r4, #1
    7cfa:	e7d7      	b.n	7cac <mbedtls_mpi_sub_abs+0x88>
        if( n == X->n )
    7cfc:	d1dc      	bne.n	7cb8 <mbedtls_mpi_sub_abs+0x94>
    7cfe:	e79b      	b.n	7c38 <mbedtls_mpi_sub_abs+0x14>

00007d00 <mbedtls_mpi_add_mpi>:
{
    7d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    7d02:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    7d04:	6813      	ldr	r3, [r2, #0]
{
    7d06:	4604      	mov	r4, r0
    if( A->s * B->s < 0 )
    7d08:	436b      	muls	r3, r5
{
    7d0a:	460f      	mov	r7, r1
    7d0c:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    7d0e:	d516      	bpl.n	7d3e <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    7d10:	4611      	mov	r1, r2
    7d12:	4638      	mov	r0, r7
    7d14:	f7ff fea1 	bl	7a5a <mbedtls_mpi_cmp_abs>
    7d18:	2800      	cmp	r0, #0
    7d1a:	db06      	blt.n	7d2a <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7d1c:	4632      	mov	r2, r6
    7d1e:	4639      	mov	r1, r7
    7d20:	4620      	mov	r0, r4
    7d22:	f7ff ff7f 	bl	7c24 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7d26:	b140      	cbz	r0, 7d3a <mbedtls_mpi_add_mpi+0x3a>
}
    7d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7d2a:	463a      	mov	r2, r7
    7d2c:	4631      	mov	r1, r6
    7d2e:	4620      	mov	r0, r4
    7d30:	f7ff ff78 	bl	7c24 <mbedtls_mpi_sub_abs>
    7d34:	2800      	cmp	r0, #0
    7d36:	d1f7      	bne.n	7d28 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    7d38:	426d      	negs	r5, r5
        X->s = s;
    7d3a:	6025      	str	r5, [r4, #0]
    return( ret );
    7d3c:	e7f4      	b.n	7d28 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7d3e:	f7ff ff18 	bl	7b72 <mbedtls_mpi_add_abs>
    7d42:	e7f0      	b.n	7d26 <mbedtls_mpi_add_mpi+0x26>

00007d44 <mbedtls_mpi_sub_mpi>:
{
    7d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    7d46:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    7d48:	6813      	ldr	r3, [r2, #0]
{
    7d4a:	4604      	mov	r4, r0
    if( A->s * B->s > 0 )
    7d4c:	436b      	muls	r3, r5
    7d4e:	2b00      	cmp	r3, #0
{
    7d50:	460f      	mov	r7, r1
    7d52:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    7d54:	dd16      	ble.n	7d84 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    7d56:	4611      	mov	r1, r2
    7d58:	4638      	mov	r0, r7
    7d5a:	f7ff fe7e 	bl	7a5a <mbedtls_mpi_cmp_abs>
    7d5e:	2800      	cmp	r0, #0
    7d60:	db06      	blt.n	7d70 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7d62:	4632      	mov	r2, r6
    7d64:	4639      	mov	r1, r7
    7d66:	4620      	mov	r0, r4
    7d68:	f7ff ff5c 	bl	7c24 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7d6c:	b140      	cbz	r0, 7d80 <mbedtls_mpi_sub_mpi+0x3c>
}
    7d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7d70:	463a      	mov	r2, r7
    7d72:	4631      	mov	r1, r6
    7d74:	4620      	mov	r0, r4
    7d76:	f7ff ff55 	bl	7c24 <mbedtls_mpi_sub_abs>
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d1f7      	bne.n	7d6e <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    7d7e:	426d      	negs	r5, r5
        X->s = s;
    7d80:	6025      	str	r5, [r4, #0]
    return( ret );
    7d82:	e7f4      	b.n	7d6e <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7d84:	f7ff fef5 	bl	7b72 <mbedtls_mpi_add_abs>
    7d88:	e7f0      	b.n	7d6c <mbedtls_mpi_sub_mpi+0x28>

00007d8a <mbedtls_mpi_mul_int>:
{
    7d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d8e:	4605      	mov	r5, r0
    7d90:	460f      	mov	r7, r1
    7d92:	4690      	mov	r8, r2
    size_t n = A->n;
    7d94:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    7d96:	b146      	cbz	r6, 7daa <mbedtls_mpi_mul_int+0x20>
    7d98:	68bb      	ldr	r3, [r7, #8]
    7d9a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7d9e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7da2:	b143      	cbz	r3, 7db6 <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    7da4:	f1b8 0f00 	cmp.w	r8, #0
    7da8:	d107      	bne.n	7dba <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    7daa:	4628      	mov	r0, r5
}
    7dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    7db0:	2100      	movs	r1, #0
    7db2:	f7ff bd1f 	b.w	77f4 <mbedtls_mpi_lset>
        --n;
    7db6:	3e01      	subs	r6, #1
    7db8:	e7ed      	b.n	7d96 <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    7dba:	4628      	mov	r0, r5
    7dbc:	1c71      	adds	r1, r6, #1
    7dbe:	f7ff fc7a 	bl	76b6 <mbedtls_mpi_grow>
    7dc2:	4604      	mov	r4, r0
    7dc4:	b960      	cbnz	r0, 7de0 <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7dc6:	4639      	mov	r1, r7
    7dc8:	4628      	mov	r0, r5
    7dca:	f7ff fcb5 	bl	7738 <mbedtls_mpi_copy>
    7dce:	4604      	mov	r4, r0
    7dd0:	b930      	cbnz	r0, 7de0 <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    7dd2:	4630      	mov	r0, r6
    7dd4:	68aa      	ldr	r2, [r5, #8]
    7dd6:	68b9      	ldr	r1, [r7, #8]
    7dd8:	f108 33ff 	add.w	r3, r8, #4294967295
    7ddc:	f7ff f93c 	bl	7058 <mpi_mul_hlp>
}
    7de0:	4620      	mov	r0, r4
    7de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007de6 <mbedtls_mpi_div_mpi>:
{
    7de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dea:	b09b      	sub	sp, #108	; 0x6c
    7dec:	4689      	mov	r9, r1
    7dee:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7df0:	2100      	movs	r1, #0
    7df2:	4618      	mov	r0, r3
{
    7df4:	4617      	mov	r7, r2
    7df6:	9302      	str	r3, [sp, #8]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7df8:	f7ff fea5 	bl	7b46 <mbedtls_mpi_cmp_int>
    7dfc:	2800      	cmp	r0, #0
    7dfe:	f000 8192 	beq.w	8126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    7e02:	2303      	movs	r3, #3
    X->n = 0;
    7e04:	2400      	movs	r4, #0
    7e06:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    7e08:	9315      	str	r3, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7e0a:	4638      	mov	r0, r7
    T2.p = TP2;
    7e0c:	ab17      	add	r3, sp, #92	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7e0e:	9902      	ldr	r1, [sp, #8]
    X->n = 0;
    7e10:	e9cd 5408 	strd	r5, r4, [sp, #32]
    X->s = 1;
    7e14:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    X->p = NULL;
    7e18:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    X->n = 0;
    7e1c:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
    X->s = 1;
    7e20:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
    X->p = NULL;
    7e24:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    T2.s = 1;
    7e28:	9514      	str	r5, [sp, #80]	; 0x50
    T2.p = TP2;
    7e2a:	9316      	str	r3, [sp, #88]	; 0x58
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7e2c:	f7ff fe15 	bl	7a5a <mbedtls_mpi_cmp_abs>
    7e30:	42a0      	cmp	r0, r4
    7e32:	da29      	bge.n	7e88 <mbedtls_mpi_div_mpi+0xa2>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7e34:	9b00      	ldr	r3, [sp, #0]
    7e36:	b93b      	cbnz	r3, 7e48 <mbedtls_mpi_div_mpi+0x62>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7e38:	f1b9 0f00 	cmp.w	r9, #0
    7e3c:	d11c      	bne.n	7e78 <mbedtls_mpi_div_mpi+0x92>
        return( 0 );
    7e3e:	2400      	movs	r4, #0
}
    7e40:	4620      	mov	r0, r4
    7e42:	b01b      	add	sp, #108	; 0x6c
    7e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7e48:	4621      	mov	r1, r4
    7e4a:	9800      	ldr	r0, [sp, #0]
    7e4c:	f7ff fcd2 	bl	77f4 <mbedtls_mpi_lset>
    7e50:	4604      	mov	r4, r0
    7e52:	2800      	cmp	r0, #0
    7e54:	d0f0      	beq.n	7e38 <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    7e56:	a808      	add	r0, sp, #32
    7e58:	f7ff fc1b 	bl	7692 <mbedtls_mpi_free>
    7e5c:	a80b      	add	r0, sp, #44	; 0x2c
    7e5e:	f7ff fc18 	bl	7692 <mbedtls_mpi_free>
    7e62:	a80e      	add	r0, sp, #56	; 0x38
    7e64:	f7ff fc15 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    7e68:	a811      	add	r0, sp, #68	; 0x44
    7e6a:	f7ff fc12 	bl	7692 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    7e6e:	210c      	movs	r1, #12
    7e70:	a817      	add	r0, sp, #92	; 0x5c
    7e72:	f7fd fc51 	bl	5718 <mbedtls_platform_zeroize>
    return( ret );
    7e76:	e7e3      	b.n	7e40 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7e78:	4639      	mov	r1, r7
    7e7a:	4648      	mov	r0, r9
    7e7c:	f7ff fc5c 	bl	7738 <mbedtls_mpi_copy>
    7e80:	4604      	mov	r4, r0
    7e82:	2800      	cmp	r0, #0
    7e84:	d1e7      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    7e86:	e7da      	b.n	7e3e <mbedtls_mpi_div_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7e88:	4639      	mov	r1, r7
    7e8a:	a808      	add	r0, sp, #32
    7e8c:	f7ff fc54 	bl	7738 <mbedtls_mpi_copy>
    7e90:	4604      	mov	r4, r0
    7e92:	2800      	cmp	r0, #0
    7e94:	d1df      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7e96:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    7e9a:	4640      	mov	r0, r8
    7e9c:	9902      	ldr	r1, [sp, #8]
    7e9e:	f7ff fc4b 	bl	7738 <mbedtls_mpi_copy>
    7ea2:	4604      	mov	r4, r0
    7ea4:	2800      	cmp	r0, #0
    7ea6:	d1d6      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7ea8:	6879      	ldr	r1, [r7, #4]
    7eaa:	a80e      	add	r0, sp, #56	; 0x38
    7eac:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7eae:	950b      	str	r5, [sp, #44]	; 0x2c
    7eb0:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7eb2:	f7ff fc00 	bl	76b6 <mbedtls_mpi_grow>
    7eb6:	4604      	mov	r4, r0
    7eb8:	2800      	cmp	r0, #0
    7eba:	d1cc      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7ebc:	4601      	mov	r1, r0
    7ebe:	a80e      	add	r0, sp, #56	; 0x38
    7ec0:	f7ff fc98 	bl	77f4 <mbedtls_mpi_lset>
    7ec4:	4604      	mov	r4, r0
    7ec6:	2800      	cmp	r0, #0
    7ec8:	d1c5      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    7eca:	6879      	ldr	r1, [r7, #4]
    7ecc:	a811      	add	r0, sp, #68	; 0x44
    7ece:	3102      	adds	r1, #2
    7ed0:	f7ff fbf1 	bl	76b6 <mbedtls_mpi_grow>
    7ed4:	4604      	mov	r4, r0
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d1bd      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7eda:	4640      	mov	r0, r8
    7edc:	f7ff fcb7 	bl	784e <mbedtls_mpi_bitlen>
    7ee0:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7ee4:	281f      	cmp	r0, #31
    7ee6:	d06b      	beq.n	7fc0 <mbedtls_mpi_div_mpi+0x1da>
        k = biL - 1 - k;
    7ee8:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7eec:	4651      	mov	r1, sl
    7eee:	a808      	add	r0, sp, #32
    7ef0:	f7ff fd27 	bl	7942 <mbedtls_mpi_shift_l>
    7ef4:	4604      	mov	r4, r0
    7ef6:	2800      	cmp	r0, #0
    7ef8:	d1ad      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7efa:	4651      	mov	r1, sl
    7efc:	4640      	mov	r0, r8
    7efe:	f7ff fd20 	bl	7942 <mbedtls_mpi_shift_l>
    7f02:	4604      	mov	r4, r0
    7f04:	2800      	cmp	r0, #0
    7f06:	d1a6      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    n = X.n - 1;
    7f08:	9e09      	ldr	r6, [sp, #36]	; 0x24
    t = Y.n - 1;
    7f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7f0c:	4640      	mov	r0, r8
    7f0e:	1b73      	subs	r3, r6, r5
    7f10:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    7f14:	4659      	mov	r1, fp
    7f16:	9301      	str	r3, [sp, #4]
    7f18:	f7ff fd13 	bl	7942 <mbedtls_mpi_shift_l>
    7f1c:	4604      	mov	r4, r0
    7f1e:	2800      	cmp	r0, #0
    7f20:	d199      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
        Z.p[n - t]++;
    7f22:	9b01      	ldr	r3, [sp, #4]
    7f24:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7f26:	4641      	mov	r1, r8
    7f28:	a808      	add	r0, sp, #32
    7f2a:	9301      	str	r3, [sp, #4]
    7f2c:	f7ff fdc8 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
    7f30:	2800      	cmp	r0, #0
    7f32:	9b01      	ldr	r3, [sp, #4]
    7f34:	da46      	bge.n	7fc4 <mbedtls_mpi_div_mpi+0x1de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7f36:	4659      	mov	r1, fp
    7f38:	4640      	mov	r0, r8
    7f3a:	f7ff fd52 	bl	79e2 <mbedtls_mpi_shift_r>
    7f3e:	4604      	mov	r4, r0
    7f40:	2800      	cmp	r0, #0
    7f42:	d188      	bne.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    t = Y.n - 1;
    7f44:	1e6b      	subs	r3, r5, #1
    7f46:	9301      	str	r3, [sp, #4]
        if( X.p[i] >= Y.p[t] )
    7f48:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    7f4a:	f106 3bff 	add.w	fp, r6, #4294967295
        if( X.p[i] >= Y.p[t] )
    7f4e:	9303      	str	r3, [sp, #12]
    7f50:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7f54:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7f58:	3b02      	subs	r3, #2
    7f5a:	3e01      	subs	r6, #1
    7f5c:	009b      	lsls	r3, r3, #2
    7f5e:	1b75      	subs	r5, r6, r5
    7f60:	9307      	str	r3, [sp, #28]
    7f62:	00ad      	lsls	r5, r5, #2
    for( i = n; i > t ; i-- )
    7f64:	9b01      	ldr	r3, [sp, #4]
    7f66:	459b      	cmp	fp, r3
    7f68:	d83b      	bhi.n	7fe2 <mbedtls_mpi_div_mpi+0x1fc>
    if( Q != NULL )
    7f6a:	9b00      	ldr	r3, [sp, #0]
    7f6c:	b153      	cbz	r3, 7f84 <mbedtls_mpi_div_mpi+0x19e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7f6e:	4618      	mov	r0, r3
    7f70:	a90e      	add	r1, sp, #56	; 0x38
    7f72:	f7ff fbe1 	bl	7738 <mbedtls_mpi_copy>
    7f76:	bb08      	cbnz	r0, 7fbc <mbedtls_mpi_div_mpi+0x1d6>
        Q->s = A->s * B->s;
    7f78:	9b02      	ldr	r3, [sp, #8]
    7f7a:	683a      	ldr	r2, [r7, #0]
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	4353      	muls	r3, r2
    7f80:	9a00      	ldr	r2, [sp, #0]
    7f82:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    7f84:	f1b9 0f00 	cmp.w	r9, #0
    7f88:	f43f af65 	beq.w	7e56 <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7f8c:	4651      	mov	r1, sl
    7f8e:	a808      	add	r0, sp, #32
    7f90:	f7ff fd27 	bl	79e2 <mbedtls_mpi_shift_r>
    7f94:	b990      	cbnz	r0, 7fbc <mbedtls_mpi_div_mpi+0x1d6>
        X.s = A->s;
    7f96:	683b      	ldr	r3, [r7, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7f98:	a908      	add	r1, sp, #32
    7f9a:	4648      	mov	r0, r9
        X.s = A->s;
    7f9c:	9308      	str	r3, [sp, #32]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7f9e:	f7ff fbcb 	bl	7738 <mbedtls_mpi_copy>
    7fa2:	4601      	mov	r1, r0
    7fa4:	2800      	cmp	r0, #0
    7fa6:	f040 80bc 	bne.w	8122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7faa:	4648      	mov	r0, r9
    7fac:	f7ff fdcb 	bl	7b46 <mbedtls_mpi_cmp_int>
    7fb0:	2800      	cmp	r0, #0
    7fb2:	f47f af50 	bne.w	7e56 <mbedtls_mpi_div_mpi+0x70>
            R->s = 1;
    7fb6:	2301      	movs	r3, #1
    7fb8:	f8c9 3000 	str.w	r3, [r9]
    7fbc:	4604      	mov	r4, r0
    7fbe:	e74a      	b.n	7e56 <mbedtls_mpi_div_mpi+0x70>
    else k = 0;
    7fc0:	46a2      	mov	sl, r4
    7fc2:	e7a1      	b.n	7f08 <mbedtls_mpi_div_mpi+0x122>
        Z.p[n - t]++;
    7fc4:	9910      	ldr	r1, [sp, #64]	; 0x40
    7fc6:	9301      	str	r3, [sp, #4]
    7fc8:	58ca      	ldr	r2, [r1, r3]
    7fca:	3201      	adds	r2, #1
    7fcc:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7fce:	a908      	add	r1, sp, #32
    7fd0:	4642      	mov	r2, r8
    7fd2:	4608      	mov	r0, r1
    7fd4:	f7ff feb6 	bl	7d44 <mbedtls_mpi_sub_mpi>
    7fd8:	9b01      	ldr	r3, [sp, #4]
    7fda:	4604      	mov	r4, r0
    7fdc:	2800      	cmp	r0, #0
    7fde:	d0a2      	beq.n	7f26 <mbedtls_mpi_div_mpi+0x140>
    7fe0:	e739      	b.n	7e56 <mbedtls_mpi_div_mpi+0x70>
        if( X.p[i] >= Y.p[t] )
    7fe2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7fe4:	ea4f 038b 	mov.w	r3, fp, lsl #2
    7fe8:	9304      	str	r3, [sp, #16]
    7fea:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    7fee:	9a03      	ldr	r2, [sp, #12]
    7ff0:	9306      	str	r3, [sp, #24]
    7ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ff4:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
    7ff8:	589a      	ldr	r2, [r3, r2]
    7ffa:	9b04      	ldr	r3, [sp, #16]
    7ffc:	4291      	cmp	r1, r2
    7ffe:	f1a3 0304 	sub.w	r3, r3, #4
    8002:	9305      	str	r3, [sp, #20]
    8004:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8006:	eb03 0805 	add.w	r8, r3, r5
    800a:	d372      	bcc.n	80f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
            Z.p[i - t - 1] = ~0;
    800c:	f04f 32ff 	mov.w	r2, #4294967295
    8010:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    8012:	f1bb 0f01 	cmp.w	fp, #1
    8016:	bf0e      	itee	eq
    8018:	2300      	moveq	r3, #0
    801a:	9b06      	ldrne	r3, [sp, #24]
    801c:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    8020:	9317      	str	r3, [sp, #92]	; 0x5c
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    8022:	9b05      	ldr	r3, [sp, #20]
    8024:	58f3      	ldr	r3, [r6, r3]
    8026:	9318      	str	r3, [sp, #96]	; 0x60
        T2.p[2] = X.p[i];
    8028:	9b04      	ldr	r3, [sp, #16]
    802a:	58f3      	ldr	r3, [r6, r3]
    802c:	9319      	str	r3, [sp, #100]	; 0x64
        Z.p[i - t - 1]++;
    802e:	f8d8 3000 	ldr.w	r3, [r8]
    8032:	3301      	adds	r3, #1
    8034:	f8c8 3000 	str.w	r3, [r8]
            Z.p[i - t - 1]--;
    8038:	9a10      	ldr	r2, [sp, #64]	; 0x40
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    803a:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    803c:	5953      	ldr	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    803e:	a811      	add	r0, sp, #68	; 0x44
            Z.p[i - t - 1]--;
    8040:	3b01      	subs	r3, #1
    8042:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    8044:	f7ff fbd6 	bl	77f4 <mbedtls_mpi_lset>
    8048:	2800      	cmp	r0, #0
    804a:	d1b7      	bne.n	7fbc <mbedtls_mpi_div_mpi+0x1d6>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    804c:	9b01      	ldr	r3, [sp, #4]
    804e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8050:	2b00      	cmp	r3, #0
    8052:	d064      	beq.n	811e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    8054:	9b07      	ldr	r3, [sp, #28]
    8056:	58d1      	ldr	r1, [r2, r3]
    8058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    805a:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    805c:	9903      	ldr	r1, [sp, #12]
    805e:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    8060:	a911      	add	r1, sp, #68	; 0x44
            T1.p[1] = Y.p[t];
    8062:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    8064:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8066:	4608      	mov	r0, r1
    8068:	595a      	ldr	r2, [r3, r5]
    806a:	f7ff fe8e 	bl	7d8a <mbedtls_mpi_mul_int>
    806e:	2800      	cmp	r0, #0
    8070:	d1a4      	bne.n	7fbc <mbedtls_mpi_div_mpi+0x1d6>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    8072:	a914      	add	r1, sp, #80	; 0x50
    8074:	a811      	add	r0, sp, #68	; 0x44
    8076:	f7ff fd23 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
    807a:	2800      	cmp	r0, #0
    807c:	dcdc      	bgt.n	8038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    807e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8080:	a90b      	add	r1, sp, #44	; 0x2c
    8082:	595a      	ldr	r2, [r3, r5]
    8084:	a811      	add	r0, sp, #68	; 0x44
    8086:	f7ff fe80 	bl	7d8a <mbedtls_mpi_mul_int>
    808a:	2800      	cmp	r0, #0
    808c:	d196      	bne.n	7fbc <mbedtls_mpi_div_mpi+0x1d6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    808e:	00ee      	lsls	r6, r5, #3
    8090:	4631      	mov	r1, r6
    8092:	a811      	add	r0, sp, #68	; 0x44
    8094:	f7ff fc55 	bl	7942 <mbedtls_mpi_shift_l>
    8098:	2800      	cmp	r0, #0
    809a:	d18f      	bne.n	7fbc <mbedtls_mpi_div_mpi+0x1d6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    809c:	a908      	add	r1, sp, #32
    809e:	4608      	mov	r0, r1
    80a0:	aa11      	add	r2, sp, #68	; 0x44
    80a2:	f7ff fe4f 	bl	7d44 <mbedtls_mpi_sub_mpi>
    80a6:	4601      	mov	r1, r0
    80a8:	2800      	cmp	r0, #0
    80aa:	d13a      	bne.n	8122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    80ac:	a808      	add	r0, sp, #32
    80ae:	f7ff fd4a 	bl	7b46 <mbedtls_mpi_cmp_int>
    80b2:	2800      	cmp	r0, #0
    80b4:	da19      	bge.n	80ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    80b6:	a90b      	add	r1, sp, #44	; 0x2c
    80b8:	a811      	add	r0, sp, #68	; 0x44
    80ba:	f7ff fb3d 	bl	7738 <mbedtls_mpi_copy>
    80be:	2800      	cmp	r0, #0
    80c0:	f47f af7c 	bne.w	7fbc <mbedtls_mpi_div_mpi+0x1d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    80c4:	4631      	mov	r1, r6
    80c6:	a811      	add	r0, sp, #68	; 0x44
    80c8:	f7ff fc3b 	bl	7942 <mbedtls_mpi_shift_l>
    80cc:	2800      	cmp	r0, #0
    80ce:	f47f af75 	bne.w	7fbc <mbedtls_mpi_div_mpi+0x1d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    80d2:	a908      	add	r1, sp, #32
    80d4:	4608      	mov	r0, r1
    80d6:	aa11      	add	r2, sp, #68	; 0x44
    80d8:	f7ff fe12 	bl	7d00 <mbedtls_mpi_add_mpi>
    80dc:	2800      	cmp	r0, #0
    80de:	f47f af6d 	bne.w	7fbc <mbedtls_mpi_div_mpi+0x1d6>
            Z.p[i - t - 1]--;
    80e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    80e4:	5953      	ldr	r3, [r2, r5]
    80e6:	3b01      	subs	r3, #1
    80e8:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    80ea:	f10b 3bff 	add.w	fp, fp, #4294967295
    80ee:	3d04      	subs	r5, #4
    80f0:	e738      	b.n	7f64 <mbedtls_mpi_div_mpi+0x17e>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    80f2:	9b05      	ldr	r3, [sp, #20]
    80f4:	58f0      	ldr	r0, [r6, r3]
    if( 0 == d || u1 >= d )
    80f6:	b17a      	cbz	r2, 8118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
    quotient = dividend / d;
    80f8:	2300      	movs	r3, #0
    80fa:	f7f8 f823 	bl	144 <__aeabi_uldivmod>
    80fe:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
    8100:	2100      	movs	r1, #0
    quotient = dividend / d;
    8102:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
    8104:	f04f 30ff 	mov.w	r0, #4294967295
    8108:	4299      	cmp	r1, r3
    810a:	bf08      	it	eq
    810c:	4290      	cmpeq	r0, r2
    810e:	d200      	bcs.n	8112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
    8110:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    8112:	f8c8 2000 	str.w	r2, [r8]
    8116:	e77c      	b.n	8012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
        return ( ~0 );
    8118:	f04f 32ff 	mov.w	r2, #4294967295
    811c:	e7f9      	b.n	8112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    811e:	9901      	ldr	r1, [sp, #4]
    8120:	e79a      	b.n	8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    8122:	460c      	mov	r4, r1
    8124:	e697      	b.n	7e56 <mbedtls_mpi_div_mpi+0x70>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    8126:	f06f 040b 	mvn.w	r4, #11
    812a:	e689      	b.n	7e40 <mbedtls_mpi_div_mpi+0x5a>

0000812c <mbedtls_mpi_mod_mpi>:
{
    812c:	b570      	push	{r4, r5, r6, lr}
    812e:	4604      	mov	r4, r0
    8130:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    8132:	4610      	mov	r0, r2
    8134:	2100      	movs	r1, #0
{
    8136:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    8138:	f7ff fd05 	bl	7b46 <mbedtls_mpi_cmp_int>
    813c:	2800      	cmp	r0, #0
    813e:	db24      	blt.n	818a <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    8140:	462a      	mov	r2, r5
    8142:	4633      	mov	r3, r6
    8144:	4621      	mov	r1, r4
    8146:	2000      	movs	r0, #0
    8148:	f7ff fe4d 	bl	7de6 <mbedtls_mpi_div_mpi>
    814c:	4605      	mov	r5, r0
    814e:	b138      	cbz	r0, 8160 <mbedtls_mpi_mod_mpi+0x34>
}
    8150:	4628      	mov	r0, r5
    8152:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    8154:	4632      	mov	r2, r6
    8156:	4621      	mov	r1, r4
    8158:	4620      	mov	r0, r4
    815a:	f7ff fdd1 	bl	7d00 <mbedtls_mpi_add_mpi>
    815e:	b990      	cbnz	r0, 8186 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    8160:	2100      	movs	r1, #0
    8162:	4620      	mov	r0, r4
    8164:	f7ff fcef 	bl	7b46 <mbedtls_mpi_cmp_int>
    8168:	2800      	cmp	r0, #0
    816a:	dbf3      	blt.n	8154 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    816c:	4631      	mov	r1, r6
    816e:	4620      	mov	r0, r4
    8170:	f7ff fca6 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
    8174:	2800      	cmp	r0, #0
    8176:	dbeb      	blt.n	8150 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    8178:	4632      	mov	r2, r6
    817a:	4621      	mov	r1, r4
    817c:	4620      	mov	r0, r4
    817e:	f7ff fde1 	bl	7d44 <mbedtls_mpi_sub_mpi>
    8182:	2800      	cmp	r0, #0
    8184:	d0f2      	beq.n	816c <mbedtls_mpi_mod_mpi+0x40>
    8186:	4605      	mov	r5, r0
    8188:	e7e2      	b.n	8150 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    818a:	f06f 0509 	mvn.w	r5, #9
    818e:	e7df      	b.n	8150 <mbedtls_mpi_mod_mpi+0x24>

00008190 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    8190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8194:	4683      	mov	fp, r0
    8196:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    819a:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    819c:	4618      	mov	r0, r3
    819e:	2100      	movs	r1, #0
{
    81a0:	461d      	mov	r5, r3
    81a2:	9204      	str	r2, [sp, #16]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    81a4:	f7ff fccf 	bl	7b46 <mbedtls_mpi_cmp_int>
    81a8:	2800      	cmp	r0, #0
    81aa:	f340 8220 	ble.w	85ee <mbedtls_mpi_exp_mod+0x45e>
    81ae:	68ab      	ldr	r3, [r5, #8]
    81b0:	681c      	ldr	r4, [r3, #0]
    81b2:	f014 0301 	ands.w	r3, r4, #1
    81b6:	9307      	str	r3, [sp, #28]
    81b8:	f000 8219 	beq.w	85ee <mbedtls_mpi_exp_mod+0x45e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    81bc:	2100      	movs	r1, #0
    81be:	9804      	ldr	r0, [sp, #16]
    81c0:	f7ff fcc1 	bl	7b46 <mbedtls_mpi_cmp_int>
    81c4:	2800      	cmp	r0, #0
    81c6:	f2c0 8212 	blt.w	85ee <mbedtls_mpi_exp_mod+0x45e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    81ca:	9804      	ldr	r0, [sp, #16]
    81cc:	f7ff fb3f 	bl	784e <mbedtls_mpi_bitlen>
    81d0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    81d4:	f200 820b 	bhi.w	85ee <mbedtls_mpi_exp_mod+0x45e>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    81d8:	4628      	mov	r0, r5
    81da:	f7ff fb38 	bl	784e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    81de:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    81e2:	f200 8204 	bhi.w	85ee <mbedtls_mpi_exp_mod+0x45e>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    81e6:	2103      	movs	r1, #3
    81e8:	1ca6      	adds	r6, r4, #2
    81ea:	0076      	lsls	r6, r6, #1
    81ec:	f006 0608 	and.w	r6, r6, #8
    81f0:	4426      	add	r6, r4
        x *= ( 2 - ( m0 * x ) );
    81f2:	fb06 f304 	mul.w	r3, r6, r4
    for( i = biL; i >= 8; i /= 2 )
    81f6:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    81f8:	f1c3 0302 	rsb	r3, r3, #2
    81fc:	fb03 f606 	mul.w	r6, r3, r6
    for( i = biL; i >= 8; i /= 2 )
    8200:	d1f7      	bne.n	81f2 <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    8202:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    8204:	f44f 7240 	mov.w	r2, #768	; 0x300
    8208:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    820a:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    820e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    8212:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    8216:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    821a:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    821e:	9116      	str	r1, [sp, #88]	; 0x58
    8220:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    8222:	f7fe faf1 	bl	6808 <memset>

    i = mbedtls_mpi_bitlen( E );
    8226:	9804      	ldr	r0, [sp, #16]
    8228:	f7ff fb11 	bl	784e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    822c:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    8230:	f080 80f9 	bcs.w	8426 <mbedtls_mpi_exp_mod+0x296>
    8234:	28ef      	cmp	r0, #239	; 0xef
    8236:	f200 80f8 	bhi.w	842a <mbedtls_mpi_exp_mod+0x29a>
    823a:	284f      	cmp	r0, #79	; 0x4f
    823c:	f200 80f7 	bhi.w	842e <mbedtls_mpi_exp_mod+0x29e>
    8240:	2817      	cmp	r0, #23
    8242:	9b07      	ldr	r3, [sp, #28]
    8244:	bf88      	it	hi
    8246:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    8248:	6869      	ldr	r1, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    824a:	4658      	mov	r0, fp
    j = N->n + 1;
    824c:	f101 0801 	add.w	r8, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8250:	4641      	mov	r1, r8
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8252:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    8254:	f7ff fa2f 	bl	76b6 <mbedtls_mpi_grow>
    8258:	4604      	mov	r4, r0
    825a:	2800      	cmp	r0, #0
    825c:	f040 80bf 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    8260:	4641      	mov	r1, r8
    8262:	a81d      	add	r0, sp, #116	; 0x74
    8264:	f7ff fa27 	bl	76b6 <mbedtls_mpi_grow>
    8268:	4604      	mov	r4, r0
    826a:	2800      	cmp	r0, #0
    826c:	f040 80b7 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    8270:	ea4f 0148 	mov.w	r1, r8, lsl #1
    8274:	a80e      	add	r0, sp, #56	; 0x38
    8276:	f7ff fa1e 	bl	76b6 <mbedtls_mpi_grow>
    827a:	4604      	mov	r4, r0
    827c:	2800      	cmp	r0, #0
    827e:	f040 80ae 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    8282:	683b      	ldr	r3, [r7, #0]
    8284:	9306      	str	r3, [sp, #24]
    if( neg )
    8286:	3301      	adds	r3, #1
    8288:	d10a      	bne.n	82a0 <mbedtls_mpi_exp_mod+0x110>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    828a:	4639      	mov	r1, r7
    828c:	a814      	add	r0, sp, #80	; 0x50
    828e:	f7ff fa53 	bl	7738 <mbedtls_mpi_copy>
    8292:	4604      	mov	r4, r0
    8294:	2800      	cmp	r0, #0
    8296:	f040 80a2 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>
        Apos.s = 1;
    829a:	2301      	movs	r3, #1
        A = &Apos;
    829c:	af14      	add	r7, sp, #80	; 0x50
        Apos.s = 1;
    829e:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    82a0:	9be4      	ldr	r3, [sp, #912]	; 0x390
    82a2:	b11b      	cbz	r3, 82ac <mbedtls_mpi_exp_mod+0x11c>
    82a4:	689b      	ldr	r3, [r3, #8]
    82a6:	2b00      	cmp	r3, #0
    82a8:	f040 80c3 	bne.w	8432 <mbedtls_mpi_exp_mod+0x2a2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    82ac:	2101      	movs	r1, #1
    82ae:	a80b      	add	r0, sp, #44	; 0x2c
    82b0:	f7ff faa0 	bl	77f4 <mbedtls_mpi_lset>
    82b4:	4604      	mov	r4, r0
    82b6:	2800      	cmp	r0, #0
    82b8:	f040 8091 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    82bc:	6869      	ldr	r1, [r5, #4]
    82be:	a80b      	add	r0, sp, #44	; 0x2c
    82c0:	0189      	lsls	r1, r1, #6
    82c2:	f7ff fb3e 	bl	7942 <mbedtls_mpi_shift_l>
    82c6:	4604      	mov	r4, r0
    82c8:	2800      	cmp	r0, #0
    82ca:	f040 8088 	bne.w	83de <mbedtls_mpi_exp_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    82ce:	a90b      	add	r1, sp, #44	; 0x2c
    82d0:	462a      	mov	r2, r5
    82d2:	4608      	mov	r0, r1
    82d4:	f7ff ff2a 	bl	812c <mbedtls_mpi_mod_mpi>
    82d8:	4604      	mov	r4, r0
    82da:	2800      	cmp	r0, #0
    82dc:	d17f      	bne.n	83de <mbedtls_mpi_exp_mod+0x24e>

        if( _RR != NULL )
    82de:	9be4      	ldr	r3, [sp, #912]	; 0x390
    82e0:	b123      	cbz	r3, 82ec <mbedtls_mpi_exp_mod+0x15c>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    82e2:	220c      	movs	r2, #12
    82e4:	4618      	mov	r0, r3
    82e6:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    82e8:	f7fe fa83 	bl	67f2 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    82ec:	4629      	mov	r1, r5
    82ee:	4638      	mov	r0, r7
    82f0:	f7ff fbe6 	bl	7ac0 <mbedtls_mpi_cmp_mpi>
    82f4:	2800      	cmp	r0, #0
    82f6:	f2c0 80a0 	blt.w	843a <mbedtls_mpi_exp_mod+0x2aa>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    82fa:	462a      	mov	r2, r5
    82fc:	4639      	mov	r1, r7
    82fe:	a81d      	add	r0, sp, #116	; 0x74
    8300:	f7ff ff14 	bl	812c <mbedtls_mpi_mod_mpi>
    8304:	4604      	mov	r4, r0
    8306:	2800      	cmp	r0, #0
    8308:	d169      	bne.n	83de <mbedtls_mpi_exp_mod+0x24e>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    830a:	6869      	ldr	r1, [r5, #4]
    830c:	a81d      	add	r0, sp, #116	; 0x74
    830e:	3101      	adds	r1, #1
    8310:	f7ff f9d1 	bl	76b6 <mbedtls_mpi_grow>
    8314:	4604      	mov	r4, r0
    8316:	2800      	cmp	r0, #0
    8318:	d161      	bne.n	83de <mbedtls_mpi_exp_mod+0x24e>
    *mm = ~x + 1;
    831a:	4276      	negs	r6, r6
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    831c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    8320:	4633      	mov	r3, r6
    8322:	462a      	mov	r2, r5
    8324:	a90b      	add	r1, sp, #44	; 0x2c
    8326:	a81f      	add	r0, sp, #124	; 0x7c
    8328:	f8cd 8000 	str.w	r8, [sp]
    832c:	f7ff f937 	bl	759e <mpi_montmul.isra.0>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    8330:	4658      	mov	r0, fp
    8332:	a90b      	add	r1, sp, #44	; 0x2c
    8334:	f7ff fa00 	bl	7738 <mbedtls_mpi_copy>
    8338:	4604      	mov	r4, r0
    833a:	2800      	cmp	r0, #0
    833c:	d14f      	bne.n	83de <mbedtls_mpi_exp_mod+0x24e>
    mbedtls_mpi_uint z = 1;
    833e:	2701      	movs	r7, #1
    8340:	ab0a      	add	r3, sp, #40	; 0x28
    8342:	f10b 0908 	add.w	r9, fp, #8
    U.p = &z;
    8346:	9319      	str	r3, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    8348:	462a      	mov	r2, r5
    834a:	4633      	mov	r3, r6
    834c:	4648      	mov	r0, r9
    834e:	f8cd 8000 	str.w	r8, [sp]
    8352:	a917      	add	r1, sp, #92	; 0x5c
    U.n = U.s = (int) z;
    8354:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    8358:	970a      	str	r7, [sp, #40]	; 0x28
    mpi_montmul( A, &U, N, mm, T );
    835a:	f7ff f920 	bl	759e <mpi_montmul.isra.0>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    835e:	9b02      	ldr	r3, [sp, #8]
    8360:	42bb      	cmp	r3, r7
    8362:	d16f      	bne.n	8444 <mbedtls_mpi_exp_mod+0x2b4>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    8364:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    8368:	4657      	mov	r7, sl
    wbits   = 0;
    836a:	46d0      	mov	r8, sl
    nblimbs = E->n;
    836c:	9b04      	ldr	r3, [sp, #16]
    bufsize = 0;
    836e:	f8cd a014 	str.w	sl, [sp, #20]
    nblimbs = E->n;
    8372:	685b      	ldr	r3, [r3, #4]
    8374:	9303      	str	r3, [sp, #12]

    while( 1 )
    {
        if( bufsize == 0 )
    8376:	9b05      	ldr	r3, [sp, #20]
    8378:	2b00      	cmp	r3, #0
    837a:	f040 80bb 	bne.w	84f4 <mbedtls_mpi_exp_mod+0x364>
        {
            if( nblimbs == 0 )
    837e:	9b03      	ldr	r3, [sp, #12]
    8380:	2b00      	cmp	r3, #0
    8382:	f040 80b2 	bne.w	84ea <mbedtls_mpi_exp_mod+0x35a>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    8386:	2301      	movs	r3, #1
    8388:	9a02      	ldr	r2, [sp, #8]
    838a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    838e:	4093      	lsls	r3, r2
    8390:	9305      	str	r3, [sp, #20]
    for( i = 0; i < nbits; i++ )
    8392:	9b03      	ldr	r3, [sp, #12]
    8394:	42bb      	cmp	r3, r7
    8396:	f040 8107 	bne.w	85a8 <mbedtls_mpi_exp_mod+0x418>
    mbedtls_mpi_uint z = 1;
    839a:	2301      	movs	r3, #1
    839c:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    839e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    83a2:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    83a4:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    83a6:	4633      	mov	r3, r6
    83a8:	462a      	mov	r2, r5
    83aa:	4648      	mov	r0, r9
    83ac:	f8cd a000 	str.w	sl, [sp]
    83b0:	a917      	add	r1, sp, #92	; 0x5c
    83b2:	f7ff f8f4 	bl	759e <mpi_montmul.isra.0>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    83b6:	9b06      	ldr	r3, [sp, #24]
    83b8:	3301      	adds	r3, #1
    83ba:	d110      	bne.n	83de <mbedtls_mpi_exp_mod+0x24e>
    83bc:	9b04      	ldr	r3, [sp, #16]
    83be:	685b      	ldr	r3, [r3, #4]
    83c0:	b16b      	cbz	r3, 83de <mbedtls_mpi_exp_mod+0x24e>
    83c2:	9b04      	ldr	r3, [sp, #16]
    83c4:	689b      	ldr	r3, [r3, #8]
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	07db      	lsls	r3, r3, #31
    83ca:	d508      	bpl.n	83de <mbedtls_mpi_exp_mod+0x24e>
    {
        X->s = -1;
    83cc:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    83ce:	465a      	mov	r2, fp
    83d0:	4629      	mov	r1, r5
    83d2:	4658      	mov	r0, fp
        X->s = -1;
    83d4:	f8cb 3000 	str.w	r3, [fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    83d8:	f7ff fc92 	bl	7d00 <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    83dc:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    83de:	9b02      	ldr	r3, [sp, #8]
        mbedtls_mpi_free( &W[i] );
    83e0:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    83e2:	1e5d      	subs	r5, r3, #1
    83e4:	2301      	movs	r3, #1
    83e6:	9a02      	ldr	r2, [sp, #8]
    83e8:	fa03 f505 	lsl.w	r5, r3, r5
    83ec:	fa03 f602 	lsl.w	r6, r3, r2
    83f0:	42ae      	cmp	r6, r5
    83f2:	f200 80f5 	bhi.w	85e0 <mbedtls_mpi_exp_mod+0x450>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    83f6:	a81d      	add	r0, sp, #116	; 0x74
    83f8:	f7ff f94b 	bl	7692 <mbedtls_mpi_free>
    83fc:	a80e      	add	r0, sp, #56	; 0x38
    83fe:	f7ff f948 	bl	7692 <mbedtls_mpi_free>
    8402:	a814      	add	r0, sp, #80	; 0x50
    8404:	f7ff f945 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    8408:	a811      	add	r0, sp, #68	; 0x44
    840a:	f7ff f942 	bl	7692 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    840e:	9be4      	ldr	r3, [sp, #912]	; 0x390
    8410:	b10b      	cbz	r3, 8416 <mbedtls_mpi_exp_mod+0x286>
    8412:	689b      	ldr	r3, [r3, #8]
    8414:	b913      	cbnz	r3, 841c <mbedtls_mpi_exp_mod+0x28c>
        mbedtls_mpi_free( &RR );
    8416:	a80b      	add	r0, sp, #44	; 0x2c
    8418:	f7ff f93b 	bl	7692 <mbedtls_mpi_free>

    return( ret );
}
    841c:	4620      	mov	r0, r4
    841e:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    8422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    8426:	2306      	movs	r3, #6
    8428:	e70e      	b.n	8248 <mbedtls_mpi_exp_mod+0xb8>
    842a:	2305      	movs	r3, #5
    842c:	e70c      	b.n	8248 <mbedtls_mpi_exp_mod+0xb8>
    842e:	2304      	movs	r3, #4
    8430:	e70a      	b.n	8248 <mbedtls_mpi_exp_mod+0xb8>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    8432:	220c      	movs	r2, #12
    8434:	99e4      	ldr	r1, [sp, #912]	; 0x390
    8436:	a80b      	add	r0, sp, #44	; 0x2c
    8438:	e756      	b.n	82e8 <mbedtls_mpi_exp_mod+0x158>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    843a:	4639      	mov	r1, r7
    843c:	a81d      	add	r0, sp, #116	; 0x74
    843e:	f7ff f97b 	bl	7738 <mbedtls_mpi_copy>
    8442:	e767      	b.n	8314 <mbedtls_mpi_exp_mod+0x184>
    8444:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8446:	6869      	ldr	r1, [r5, #4]
    8448:	f103 3aff 	add.w	sl, r3, #4294967295
    844c:	fa07 f30a 	lsl.w	r3, r7, sl
    8450:	270c      	movs	r7, #12
    8452:	9305      	str	r3, [sp, #20]
    8454:	fa07 f70a 	lsl.w	r7, r7, sl
    8458:	ab1a      	add	r3, sp, #104	; 0x68
    845a:	441f      	add	r7, r3
    845c:	4638      	mov	r0, r7
    845e:	3101      	adds	r1, #1
    8460:	f7ff f929 	bl	76b6 <mbedtls_mpi_grow>
    8464:	2800      	cmp	r0, #0
    8466:	d1b9      	bne.n	83dc <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    8468:	4638      	mov	r0, r7
    846a:	a91d      	add	r1, sp, #116	; 0x74
    846c:	f7ff f964 	bl	7738 <mbedtls_mpi_copy>
    8470:	2800      	cmp	r0, #0
    8472:	d1b3      	bne.n	83dc <mbedtls_mpi_exp_mod+0x24c>
        for( i = 0; i < wsize - 1; i++ )
    8474:	9403      	str	r4, [sp, #12]
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    8476:	f107 0008 	add.w	r0, r7, #8
    847a:	4633      	mov	r3, r6
    847c:	462a      	mov	r2, r5
    847e:	4639      	mov	r1, r7
    8480:	f8cd 8000 	str.w	r8, [sp]
    8484:	9008      	str	r0, [sp, #32]
    8486:	f7ff f88a 	bl	759e <mpi_montmul.isra.0>
        for( i = 0; i < wsize - 1; i++ )
    848a:	9b03      	ldr	r3, [sp, #12]
    848c:	9808      	ldr	r0, [sp, #32]
    848e:	3301      	adds	r3, #1
    8490:	4553      	cmp	r3, sl
    8492:	9303      	str	r3, [sp, #12]
    8494:	d3f1      	bcc.n	847a <mbedtls_mpi_exp_mod+0x2ea>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8496:	9b05      	ldr	r3, [sp, #20]
    8498:	9a02      	ldr	r2, [sp, #8]
    849a:	f103 0801 	add.w	r8, r3, #1
    849e:	2301      	movs	r3, #1
    84a0:	4093      	lsls	r3, r2
    84a2:	9303      	str	r3, [sp, #12]
    84a4:	9b03      	ldr	r3, [sp, #12]
    84a6:	4543      	cmp	r3, r8
    84a8:	f67f af5c 	bls.w	8364 <mbedtls_mpi_exp_mod+0x1d4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    84ac:	6869      	ldr	r1, [r5, #4]
    84ae:	f107 0a0c 	add.w	sl, r7, #12
    84b2:	4650      	mov	r0, sl
    84b4:	3101      	adds	r1, #1
    84b6:	f7ff f8fe 	bl	76b6 <mbedtls_mpi_grow>
    84ba:	2800      	cmp	r0, #0
    84bc:	d18e      	bne.n	83dc <mbedtls_mpi_exp_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    84be:	4639      	mov	r1, r7
    84c0:	4650      	mov	r0, sl
    84c2:	f7ff f939 	bl	7738 <mbedtls_mpi_copy>
    84c6:	2800      	cmp	r0, #0
    84c8:	d188      	bne.n	83dc <mbedtls_mpi_exp_mod+0x24c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    84ca:	ab0e      	add	r3, sp, #56	; 0x38
    84cc:	9300      	str	r3, [sp, #0]
    84ce:	f107 0014 	add.w	r0, r7, #20
    84d2:	4633      	mov	r3, r6
    84d4:	462a      	mov	r2, r5
    84d6:	a91d      	add	r1, sp, #116	; 0x74
    84d8:	f7ff f861 	bl	759e <mpi_montmul.isra.0>
        for( i = j + 1; i < ( one << wsize ); i++ )
    84dc:	4657      	mov	r7, sl
    84de:	f108 0801 	add.w	r8, r8, #1
    84e2:	e7df      	b.n	84a4 <mbedtls_mpi_exp_mod+0x314>
        state = 2;
    84e4:	f04f 0a02 	mov.w	sl, #2
    84e8:	e745      	b.n	8376 <mbedtls_mpi_exp_mod+0x1e6>
            nblimbs--;
    84ea:	9b03      	ldr	r3, [sp, #12]
    84ec:	3b01      	subs	r3, #1
    84ee:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    84f0:	2320      	movs	r3, #32
    84f2:	9305      	str	r3, [sp, #20]
        bufsize--;
    84f4:	9b05      	ldr	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    84f6:	9a03      	ldr	r2, [sp, #12]
        bufsize--;
    84f8:	3b01      	subs	r3, #1
    84fa:	9305      	str	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    84fc:	9b04      	ldr	r3, [sp, #16]
    84fe:	689b      	ldr	r3, [r3, #8]
    8500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8504:	9a05      	ldr	r2, [sp, #20]
    8506:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    8508:	f013 0301 	ands.w	r3, r3, #1
    850c:	d10f      	bne.n	852e <mbedtls_mpi_exp_mod+0x39e>
    850e:	f1ba 0f00 	cmp.w	sl, #0
    8512:	f43f af30 	beq.w	8376 <mbedtls_mpi_exp_mod+0x1e6>
        if( ei == 0 && state == 1 )
    8516:	f1ba 0f01 	cmp.w	sl, #1
    851a:	d108      	bne.n	852e <mbedtls_mpi_exp_mod+0x39e>
            mpi_montmul( X, X, N, mm, &T );
    851c:	ab0e      	add	r3, sp, #56	; 0x38
    851e:	9300      	str	r3, [sp, #0]
    8520:	462a      	mov	r2, r5
    8522:	4633      	mov	r3, r6
    8524:	4659      	mov	r1, fp
    8526:	4648      	mov	r0, r9
    8528:	f7ff f839 	bl	759e <mpi_montmul.isra.0>
            continue;
    852c:	e723      	b.n	8376 <mbedtls_mpi_exp_mod+0x1e6>
        wbits |= ( ei << ( wsize - nbits ) );
    852e:	9a02      	ldr	r2, [sp, #8]
        nbits++;
    8530:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
    8532:	1bd2      	subs	r2, r2, r7
    8534:	4093      	lsls	r3, r2
    8536:	ea48 0803 	orr.w	r8, r8, r3
        if( nbits == wsize )
    853a:	9b02      	ldr	r3, [sp, #8]
    853c:	42bb      	cmp	r3, r7
    853e:	d1d1      	bne.n	84e4 <mbedtls_mpi_exp_mod+0x354>
            for( i = 0; i < wsize; i++ )
    8540:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    8544:	ab0e      	add	r3, sp, #56	; 0x38
    8546:	9300      	str	r3, [sp, #0]
    8548:	462a      	mov	r2, r5
    854a:	4633      	mov	r3, r6
    854c:	4659      	mov	r1, fp
    854e:	4648      	mov	r0, r9
            for( i = 0; i < wsize; i++ )
    8550:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    8554:	f7ff f823 	bl	759e <mpi_montmul.isra.0>
            for( i = 0; i < wsize; i++ )
    8558:	4557      	cmp	r7, sl
    855a:	d8f3      	bhi.n	8544 <mbedtls_mpi_exp_mod+0x3b4>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    855c:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    855e:	f04f 0a00 	mov.w	sl, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    8562:	40bb      	lsls	r3, r7
    8564:	9308      	str	r3, [sp, #32]
    for( size_t i = 0; i < T_size; i++ )
    8566:	a91a      	add	r1, sp, #104	; 0x68
    const size_t diff = x ^ y;
    8568:	ea88 030a 	eor.w	r3, r8, sl
    const size_t diff_msb = ( diff | (size_t) -diff );
    856c:	425a      	negs	r2, r3
    856e:	431a      	orrs	r2, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8570:	43d2      	mvns	r2, r2
    8572:	a811      	add	r0, sp, #68	; 0x44
    8574:	0fd2      	lsrs	r2, r2, #31
    8576:	9109      	str	r1, [sp, #36]	; 0x24
    8578:	f7ff f910 	bl	779c <mbedtls_mpi_safe_cond_assign>
    857c:	4607      	mov	r7, r0
    857e:	bb68      	cbnz	r0, 85dc <mbedtls_mpi_exp_mod+0x44c>
    for( size_t i = 0; i < T_size; i++ )
    8580:	9b08      	ldr	r3, [sp, #32]
    8582:	9909      	ldr	r1, [sp, #36]	; 0x24
    8584:	f10a 0a01 	add.w	sl, sl, #1
    8588:	4553      	cmp	r3, sl
    858a:	f101 010c 	add.w	r1, r1, #12
    858e:	d1eb      	bne.n	8568 <mbedtls_mpi_exp_mod+0x3d8>
            mpi_montmul( X, &WW, N, mm, &T );
    8590:	ab0e      	add	r3, sp, #56	; 0x38
    8592:	9300      	str	r3, [sp, #0]
    8594:	462a      	mov	r2, r5
    8596:	4633      	mov	r3, r6
    8598:	4648      	mov	r0, r9
    859a:	a911      	add	r1, sp, #68	; 0x44
    859c:	f7fe ffff 	bl	759e <mpi_montmul.isra.0>
            nbits = 0;
    85a0:	46b8      	mov	r8, r7
            state--;
    85a2:	f8dd a01c 	ldr.w	sl, [sp, #28]
    85a6:	e6e6      	b.n	8376 <mbedtls_mpi_exp_mod+0x1e6>
        mpi_montmul( X, X, N, mm, &T );
    85a8:	4633      	mov	r3, r6
    85aa:	462a      	mov	r2, r5
    85ac:	4659      	mov	r1, fp
    85ae:	4648      	mov	r0, r9
    85b0:	f8cd a000 	str.w	sl, [sp]
    85b4:	f7fe fff3 	bl	759e <mpi_montmul.isra.0>
        if( ( wbits & ( one << wsize ) ) != 0 )
    85b8:	9b05      	ldr	r3, [sp, #20]
        wbits <<= 1;
    85ba:	ea4f 0848 	mov.w	r8, r8, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    85be:	ea13 0f08 	tst.w	r3, r8
    85c2:	d007      	beq.n	85d4 <mbedtls_mpi_exp_mod+0x444>
            mpi_montmul( X, &W[1], N, mm, &T );
    85c4:	4633      	mov	r3, r6
    85c6:	462a      	mov	r2, r5
    85c8:	4648      	mov	r0, r9
    85ca:	f8cd a000 	str.w	sl, [sp]
    85ce:	a91d      	add	r1, sp, #116	; 0x74
    85d0:	f7fe ffe5 	bl	759e <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    85d4:	9b03      	ldr	r3, [sp, #12]
    85d6:	3301      	adds	r3, #1
    85d8:	9303      	str	r3, [sp, #12]
    85da:	e6da      	b.n	8392 <mbedtls_mpi_exp_mod+0x202>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    85dc:	4604      	mov	r4, r0
    85de:	e6fe      	b.n	83de <mbedtls_mpi_exp_mod+0x24e>
        mbedtls_mpi_free( &W[i] );
    85e0:	ab1a      	add	r3, sp, #104	; 0x68
    85e2:	fb07 3005 	mla	r0, r7, r5, r3
    85e6:	f7ff f854 	bl	7692 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    85ea:	3501      	adds	r5, #1
    85ec:	e700      	b.n	83f0 <mbedtls_mpi_exp_mod+0x260>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    85ee:	f06f 0403 	mvn.w	r4, #3
    85f2:	e713      	b.n	841c <mbedtls_mpi_exp_mod+0x28c>

000085f4 <platform_calloc_uninit>:
}
    85f4:	2000      	movs	r0, #0
    85f6:	4770      	bx	lr

000085f8 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    85f8:	4770      	bx	lr

000085fa <platform_free_uninit>:
    85fa:	4770      	bx	lr

000085fc <mbedtls_rsa_import>:
{
    85fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8600:	4605      	mov	r5, r0
    8602:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    8606:	4691      	mov	r9, r2
    8608:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    860a:	460c      	mov	r4, r1
    860c:	b979      	cbnz	r1, 862e <mbedtls_rsa_import+0x32>
    860e:	f1b9 0f00 	cmp.w	r9, #0
    8612:	d115      	bne.n	8640 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8614:	f1b8 0f00 	cmp.w	r8, #0
    8618:	d11a      	bne.n	8650 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    861a:	bb0f      	cbnz	r7, 8660 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    861c:	bb46      	cbnz	r6, 8670 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    861e:	b37c      	cbz	r4, 8680 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    8620:	f105 0008 	add.w	r0, r5, #8
    8624:	f7ff f92f 	bl	7886 <mbedtls_mpi_size>
    8628:	6068      	str	r0, [r5, #4]
    return( 0 );
    862a:	2000      	movs	r0, #0
    862c:	e006      	b.n	863c <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    862e:	3008      	adds	r0, #8
    8630:	f7ff f882 	bl	7738 <mbedtls_mpi_copy>
    8634:	2800      	cmp	r0, #0
    8636:	d0ea      	beq.n	860e <mbedtls_rsa_import+0x12>
    8638:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    863c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8640:	4649      	mov	r1, r9
    8642:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    8646:	f7ff f877 	bl	7738 <mbedtls_mpi_copy>
    864a:	2800      	cmp	r0, #0
    864c:	d0e2      	beq.n	8614 <mbedtls_rsa_import+0x18>
    864e:	e7f3      	b.n	8638 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8650:	4641      	mov	r1, r8
    8652:	f105 0038 	add.w	r0, r5, #56	; 0x38
    8656:	f7ff f86f 	bl	7738 <mbedtls_mpi_copy>
    865a:	2800      	cmp	r0, #0
    865c:	d0dd      	beq.n	861a <mbedtls_rsa_import+0x1e>
    865e:	e7eb      	b.n	8638 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8660:	4639      	mov	r1, r7
    8662:	f105 0020 	add.w	r0, r5, #32
    8666:	f7ff f867 	bl	7738 <mbedtls_mpi_copy>
    866a:	2800      	cmp	r0, #0
    866c:	d0d6      	beq.n	861c <mbedtls_rsa_import+0x20>
    866e:	e7e3      	b.n	8638 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    8670:	4631      	mov	r1, r6
    8672:	f105 0014 	add.w	r0, r5, #20
    8676:	f7ff f85f 	bl	7738 <mbedtls_mpi_copy>
    867a:	2800      	cmp	r0, #0
    867c:	d0cf      	beq.n	861e <mbedtls_rsa_import+0x22>
    867e:	e7db      	b.n	8638 <mbedtls_rsa_import+0x3c>
    return( 0 );
    8680:	4620      	mov	r0, r4
    8682:	e7db      	b.n	863c <mbedtls_rsa_import+0x40>

00008684 <mbedtls_rsa_init>:
{
    8684:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8686:	22ac      	movs	r2, #172	; 0xac
    8688:	2100      	movs	r1, #0
{
    868a:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    868c:	f7fe f8bc 	bl	6808 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    8690:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    8692:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    8696:	bd10      	pop	{r4, pc}

00008698 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    8698:	b510      	push	{r4, lr}
    if( ctx == NULL )
    869a:	4604      	mov	r4, r0
    869c:	b3a0      	cbz	r0, 8708 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    869e:	308c      	adds	r0, #140	; 0x8c
    86a0:	f7fe fff7 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    86a4:	f104 0098 	add.w	r0, r4, #152	; 0x98
    86a8:	f7fe fff3 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    86ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
    86b0:	f7fe ffef 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    86b4:	f104 0020 	add.w	r0, r4, #32
    86b8:	f7fe ffeb 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    86bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
    86c0:	f7fe ffe7 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    86c4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    86c8:	f7fe ffe3 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    86cc:	f104 0014 	add.w	r0, r4, #20
    86d0:	f7fe ffdf 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    86d4:	f104 0008 	add.w	r0, r4, #8
    86d8:	f7fe ffdb 	bl	7692 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    86dc:	f104 0080 	add.w	r0, r4, #128	; 0x80
    86e0:	f7fe ffd7 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    86e4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    86e8:	f7fe ffd3 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    86ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    86f0:	f7fe ffcf 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    86f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    86f8:	f7fe ffcb 	bl	7692 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    86fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    8700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    8704:	f7fe bfc5 	b.w	7692 <mbedtls_mpi_free>
}
    8708:	bd10      	pop	{r4, pc}

0000870a <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    870a:	226c      	movs	r2, #108	; 0x6c
    870c:	2100      	movs	r1, #0
    870e:	f7fe b87b 	b.w	6808 <memset>

00008712 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8716:	4605      	mov	r5, r0
    8718:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    871a:	4614      	mov	r4, r2
    871c:	b912      	cbnz	r2, 8724 <mbedtls_sha256_update+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    871e:	2000      	movs	r0, #0
}
    8720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    8724:	6803      	ldr	r3, [r0, #0]
    8726:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    872a:	18d3      	adds	r3, r2, r3
    872c:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    872e:	bf22      	ittt	cs
    8730:	6843      	ldrcs	r3, [r0, #4]
    8732:	3301      	addcs	r3, #1
    8734:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    8736:	b1a7      	cbz	r7, 8762 <mbedtls_sha256_update+0x50>
    fill = 64 - left;
    8738:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    873c:	454a      	cmp	r2, r9
    873e:	d310      	bcc.n	8762 <mbedtls_sha256_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8740:	f100 0828 	add.w	r8, r0, #40	; 0x28
    8744:	464a      	mov	r2, r9
    8746:	eb08 0007 	add.w	r0, r8, r7
    874a:	f7fe f852 	bl	67f2 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    874e:	4641      	mov	r1, r8
    8750:	4628      	mov	r0, r5
    8752:	f7fb fff3 	bl	473c <mbedtls_internal_sha256_process>
    8756:	2800      	cmp	r0, #0
    8758:	d1e2      	bne.n	8720 <mbedtls_sha256_update+0xe>
        ilen  -= fill;
    875a:	443c      	add	r4, r7
        left = 0;
    875c:	4607      	mov	r7, r0
        input += fill;
    875e:	444e      	add	r6, r9
        ilen  -= fill;
    8760:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    8762:	4426      	add	r6, r4
    8764:	e005      	b.n	8772 <mbedtls_sha256_update+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8766:	4628      	mov	r0, r5
    8768:	f7fb ffe8 	bl	473c <mbedtls_internal_sha256_process>
    876c:	2800      	cmp	r0, #0
    876e:	d1d7      	bne.n	8720 <mbedtls_sha256_update+0xe>
        ilen  -= 64;
    8770:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    8772:	2c3f      	cmp	r4, #63	; 0x3f
    8774:	eba6 0104 	sub.w	r1, r6, r4
    8778:	d8f5      	bhi.n	8766 <mbedtls_sha256_update+0x54>
    if( ilen > 0 )
    877a:	2c00      	cmp	r4, #0
    877c:	d0cf      	beq.n	871e <mbedtls_sha256_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    877e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8782:	4622      	mov	r2, r4
    8784:	4438      	add	r0, r7
    8786:	f7fe f834 	bl	67f2 <memcpy>
    878a:	e7c8      	b.n	871e <mbedtls_sha256_update+0xc>

0000878c <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    878c:	b570      	push	{r4, r5, r6, lr}
    878e:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    8790:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    8792:	6803      	ldr	r3, [r0, #0]
    8794:	f100 0628 	add.w	r6, r0, #40	; 0x28
    8798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    879c:	1c5a      	adds	r2, r3, #1

    if( used <= 56 )
    879e:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    87a0:	4403      	add	r3, r0
{
    87a2:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    87a4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
    87a8:	eb06 0002 	add.w	r0, r6, r2
    87ac:	d861      	bhi.n	8872 <mbedtls_sha256_finish+0xe6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    87ae:	2100      	movs	r1, #0
    87b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    87b4:	f7fe f828 	bl	6808 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    87b8:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    87bc:	0f5a      	lsrs	r2, r3, #29
    87be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    87c2:	00db      	lsls	r3, r3, #3
    87c4:	ba12      	rev	r2, r2
    87c6:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    87c8:	4631      	mov	r1, r6
    87ca:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    87cc:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    87ce:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    87d0:	f7fb ffb4 	bl	473c <mbedtls_internal_sha256_process>
    87d4:	2800      	cmp	r0, #0
    87d6:	d14b      	bne.n	8870 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    87d8:	7ae3      	ldrb	r3, [r4, #11]
    87da:	702b      	strb	r3, [r5, #0]
    87dc:	8963      	ldrh	r3, [r4, #10]
    87de:	706b      	strb	r3, [r5, #1]
    87e0:	68a3      	ldr	r3, [r4, #8]
    87e2:	0a1b      	lsrs	r3, r3, #8
    87e4:	70ab      	strb	r3, [r5, #2]
    87e6:	68a3      	ldr	r3, [r4, #8]
    87e8:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    87ea:	7be3      	ldrb	r3, [r4, #15]
    87ec:	712b      	strb	r3, [r5, #4]
    87ee:	89e3      	ldrh	r3, [r4, #14]
    87f0:	716b      	strb	r3, [r5, #5]
    87f2:	68e3      	ldr	r3, [r4, #12]
    87f4:	0a1b      	lsrs	r3, r3, #8
    87f6:	71ab      	strb	r3, [r5, #6]
    87f8:	68e3      	ldr	r3, [r4, #12]
    87fa:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    87fc:	7ce3      	ldrb	r3, [r4, #19]
    87fe:	722b      	strb	r3, [r5, #8]
    8800:	8a63      	ldrh	r3, [r4, #18]
    8802:	726b      	strb	r3, [r5, #9]
    8804:	6923      	ldr	r3, [r4, #16]
    8806:	0a1b      	lsrs	r3, r3, #8
    8808:	72ab      	strb	r3, [r5, #10]
    880a:	6923      	ldr	r3, [r4, #16]
    880c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    880e:	7de3      	ldrb	r3, [r4, #23]
    8810:	732b      	strb	r3, [r5, #12]
    8812:	8ae3      	ldrh	r3, [r4, #22]
    8814:	736b      	strb	r3, [r5, #13]
    8816:	6963      	ldr	r3, [r4, #20]
    8818:	0a1b      	lsrs	r3, r3, #8
    881a:	73ab      	strb	r3, [r5, #14]
    881c:	6963      	ldr	r3, [r4, #20]
    881e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    8820:	7ee3      	ldrb	r3, [r4, #27]
    8822:	742b      	strb	r3, [r5, #16]
    8824:	8b63      	ldrh	r3, [r4, #26]
    8826:	746b      	strb	r3, [r5, #17]
    8828:	69a3      	ldr	r3, [r4, #24]
    882a:	0a1b      	lsrs	r3, r3, #8
    882c:	74ab      	strb	r3, [r5, #18]
    882e:	69a3      	ldr	r3, [r4, #24]
    8830:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    8832:	7fe3      	ldrb	r3, [r4, #31]
    8834:	752b      	strb	r3, [r5, #20]
    8836:	8be3      	ldrh	r3, [r4, #30]
    8838:	756b      	strb	r3, [r5, #21]
    883a:	69e3      	ldr	r3, [r4, #28]
    883c:	0a1b      	lsrs	r3, r3, #8
    883e:	75ab      	strb	r3, [r5, #22]
    8840:	69e3      	ldr	r3, [r4, #28]
    8842:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    8844:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    8848:	762b      	strb	r3, [r5, #24]
    884a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    884c:	766b      	strb	r3, [r5, #25]
    884e:	6a23      	ldr	r3, [r4, #32]
    8850:	0a1b      	lsrs	r3, r3, #8
    8852:	76ab      	strb	r3, [r5, #26]
    8854:	6a23      	ldr	r3, [r4, #32]
    8856:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    8858:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    885a:	b94b      	cbnz	r3, 8870 <mbedtls_sha256_finish+0xe4>
#endif
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    885c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    8860:	772b      	strb	r3, [r5, #28]
    8862:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8864:	776b      	strb	r3, [r5, #29]
    8866:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8868:	0a1b      	lsrs	r3, r3, #8
    886a:	77ab      	strb	r3, [r5, #30]
    886c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    886e:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    8870:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    8872:	2100      	movs	r1, #0
    8874:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    8878:	f7fd ffc6 	bl	6808 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    887c:	4631      	mov	r1, r6
    887e:	4620      	mov	r0, r4
    8880:	f7fb ff5c 	bl	473c <mbedtls_internal_sha256_process>
    8884:	2800      	cmp	r0, #0
    8886:	d1f3      	bne.n	8870 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    8888:	4601      	mov	r1, r0
    888a:	2238      	movs	r2, #56	; 0x38
    888c:	4630      	mov	r0, r6
    888e:	e791      	b.n	87b4 <mbedtls_sha256_finish+0x28>

00008890 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8890:	4700      	bx	r0

00008892 <nrfx_busy_wait>:
    8892:	f000 b825 	b.w	88e0 <z_impl_k_busy_wait>

00008896 <nrfx_clock_enable>:
{
    8896:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8898:	2005      	movs	r0, #5
    889a:	f7fa f855 	bl	2948 <arch_irq_is_enabled>
    889e:	b920      	cbnz	r0, 88aa <nrfx_clock_enable+0x14>
}
    88a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    88a4:	2005      	movs	r0, #5
    88a6:	f7fa b83f 	b.w	2928 <arch_irq_enable>
    88aa:	bd08      	pop	{r3, pc}

000088ac <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    88ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    88b0:	4770      	bx	lr

000088b2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    88b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    88b6:	4770      	bx	lr

000088b8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    88b8:	f44f 7080 	mov.w	r0, #256	; 0x100
    88bc:	4770      	bx	lr

000088be <z_device_state_init>:
}
    88be:	4770      	bx	lr

000088c0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    88c0:	b138      	cbz	r0, 88d2 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    88c2:	68c3      	ldr	r3, [r0, #12]
    88c4:	8818      	ldrh	r0, [r3, #0]
    88c6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    88ca:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    88ce:	4258      	negs	r0, r3
    88d0:	4158      	adcs	r0, r3
}
    88d2:	4770      	bx	lr

000088d4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    88d4:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    88d8:	3800      	subs	r0, #0
    88da:	bf18      	it	ne
    88dc:	2001      	movne	r0, #1
    88de:	4770      	bx	lr

000088e0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    88e0:	b108      	cbz	r0, 88e6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    88e2:	f7f9 ba41 	b.w	1d68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    88e6:	4770      	bx	lr

000088e8 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    88e8:	4770      	bx	lr
	...

000088ec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    88ec:	f7fb bfe6 	b.w	48bc <SystemInit>
