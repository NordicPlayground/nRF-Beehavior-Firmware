
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	58 26 01 20 c9 2d 00 00 03 65 00 00 9d 2d 00 00     X&. .-...e...-..
  10:	9d 2d 00 00 9d 2d 00 00 9d 2d 00 00 9d 2d 00 00     .-...-...-...-..
	...
  2c:	6d 29 00 00 9d 2d 00 00 00 00 00 00 9d 2d 00 00     m)...-.......-..
  3c:	9d 2d 00 00                                         .-..

00000040 <_irq_vector_table>:
  40:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  50:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  60:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  70:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  80:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  90:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  a0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  b0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  c0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  d0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  e0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
  f0:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
 100:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
 110:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
 120:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
 130:	c9 29 00 00 c9 29 00 00 c9 29 00 00 c9 29 00 00     .)...)...)...)..
 140:	c9 29 00 00                                         .)..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__data_size+0x4>
     146:	b94a      	cbnz	r2, 15c <__data_size+0x4>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b980 	b.w	45c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     178:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	460f      	mov	r7, r1
     180:	2b00      	cmp	r3, #0
     182:	d147      	bne.n	214 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x14>
     184:	428a      	cmp	r2, r1
     186:	4694      	mov	ip, r2
     188:	d95f      	bls.n	24a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x4a>
     18a:	fab2 f382 	clz	r3, r2
     18e:	b143      	cbz	r3, 1a2 <__udivmoddi4+0x2e>
     190:	f1c3 0120 	rsb	r1, r3, #32
     194:	409f      	lsls	r7, r3
     196:	fa02 fc03 	lsl.w	ip, r2, r3
     19a:	409c      	lsls	r4, r3
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	430f      	orrs	r7, r1
     1a2:	ea4f 451c 	mov.w	r5, ip, lsr #16
     1a6:	fa1f fe8c 	uxth.w	lr, ip
     1aa:	0c22      	lsrs	r2, r4, #16
     1ac:	fbb7 f1f5 	udiv	r1, r7, r5
     1b0:	fb05 7711 	mls	r7, r5, r1, r7
     1b4:	fb01 f00e 	mul.w	r0, r1, lr
     1b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
     1bc:	4290      	cmp	r0, r2
     1be:	d908      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c0:	eb1c 0202 	adds.w	r2, ip, r2
     1c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
     1c8:	d202      	bcs.n	1d0 <__udivmoddi4+0x5c>
     1ca:	4290      	cmp	r0, r2
     1cc:	f200 8134 	bhi.w	438 <CONFIG_FLASH_SIZE+0x38>
     1d0:	4639      	mov	r1, r7
     1d2:	1a12      	subs	r2, r2, r0
     1d4:	b2a4      	uxth	r4, r4
     1d6:	fbb2 f0f5 	udiv	r0, r2, r5
     1da:	fb05 2210 	mls	r2, r5, r0, r2
     1de:	fb00 fe0e 	mul.w	lr, r0, lr
     1e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     1e6:	45a6      	cmp	lr, r4
     1e8:	d908      	bls.n	1fc <__udivmoddi4+0x88>
     1ea:	eb1c 0404 	adds.w	r4, ip, r4
     1ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     1f2:	d202      	bcs.n	1fa <__udivmoddi4+0x86>
     1f4:	45a6      	cmp	lr, r4
     1f6:	f200 8119 	bhi.w	42c <CONFIG_FLASH_SIZE+0x2c>
     1fa:	4610      	mov	r0, r2
     1fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     200:	eba4 040e 	sub.w	r4, r4, lr
     204:	2100      	movs	r1, #0
     206:	b11e      	cbz	r6, 210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>
     208:	40dc      	lsrs	r4, r3
     20a:	2300      	movs	r3, #0
     20c:	e9c6 4300 	strd	r4, r3, [r6]
     210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     214:	428b      	cmp	r3, r1
     216:	d908      	bls.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     218:	2e00      	cmp	r6, #0
     21a:	f000 80fb 	beq.w	414 <CONFIG_FLASH_SIZE+0x14>
     21e:	2100      	movs	r1, #0
     220:	e9c6 0500 	strd	r0, r5, [r6]
     224:	4608      	mov	r0, r1
     226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     22a:	fab3 f183 	clz	r1, r3
     22e:	2900      	cmp	r1, #0
     230:	d14b      	bne.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     232:	42ab      	cmp	r3, r5
     234:	f0c0 80f1 	bcc.w	41a <CONFIG_FLASH_SIZE+0x1a>
     238:	4282      	cmp	r2, r0
     23a:	f240 80ee 	bls.w	41a <CONFIG_FLASH_SIZE+0x1a>
     23e:	4608      	mov	r0, r1
     240:	2e00      	cmp	r6, #0
     242:	d0e5      	beq.n	210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>
     244:	e9c6 4700 	strd	r4, r7, [r6]
     248:	e7e2      	b.n	210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>
     24a:	b902      	cbnz	r2, 24e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x4e>
     24c:	deff      	udf	#255	; 0xff
     24e:	fab2 f382 	clz	r3, r2
     252:	2b00      	cmp	r3, #0
     254:	f040 809d 	bne.w	392 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x92>
     258:	1a8d      	subs	r5, r1, r2
     25a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     25e:	b297      	uxth	r7, r2
     260:	2101      	movs	r1, #1
     262:	fbb5 f2fe 	udiv	r2, r5, lr
     266:	fb0e 5012 	mls	r0, lr, r2, r5
     26a:	0c25      	lsrs	r5, r4, #16
     26c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     270:	fb07 f002 	mul.w	r0, r7, r2
     274:	42a8      	cmp	r0, r5
     276:	d90f      	bls.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     278:	eb1c 0505 	adds.w	r5, ip, r5
     27c:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
     280:	bf2c      	ite	cs
     282:	f04f 0901 	movcs.w	r9, #1
     286:	f04f 0900 	movcc.w	r9, #0
     28a:	42a8      	cmp	r0, r5
     28c:	d903      	bls.n	296 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16>
     28e:	f1b9 0f00 	cmp.w	r9, #0
     292:	f000 80ce 	beq.w	432 <CONFIG_FLASH_SIZE+0x32>
     296:	4642      	mov	r2, r8
     298:	1a2d      	subs	r5, r5, r0
     29a:	b2a4      	uxth	r4, r4
     29c:	fbb5 f0fe 	udiv	r0, r5, lr
     2a0:	fb0e 5510 	mls	r5, lr, r0, r5
     2a4:	fb00 f707 	mul.w	r7, r0, r7
     2a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2ac:	42a7      	cmp	r7, r4
     2ae:	d908      	bls.n	2c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x42>
     2b0:	eb1c 0404 	adds.w	r4, ip, r4
     2b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     2b8:	d202      	bcs.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     2ba:	42a7      	cmp	r7, r4
     2bc:	f200 80b3 	bhi.w	426 <CONFIG_FLASH_SIZE+0x26>
     2c0:	4628      	mov	r0, r5
     2c2:	1be4      	subs	r4, r4, r7
     2c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     2c8:	e79d      	b.n	206 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x6>
     2ca:	f1c1 0720 	rsb	r7, r1, #32
     2ce:	408b      	lsls	r3, r1
     2d0:	fa05 f401 	lsl.w	r4, r5, r1
     2d4:	fa22 fc07 	lsr.w	ip, r2, r7
     2d8:	40fd      	lsrs	r5, r7
     2da:	408a      	lsls	r2, r1
     2dc:	ea4c 0c03 	orr.w	ip, ip, r3
     2e0:	fa20 f307 	lsr.w	r3, r0, r7
     2e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
     2e8:	431c      	orrs	r4, r3
     2ea:	fa1f fe8c 	uxth.w	lr, ip
     2ee:	fa00 f301 	lsl.w	r3, r0, r1
     2f2:	0c20      	lsrs	r0, r4, #16
     2f4:	fbb5 f8f9 	udiv	r8, r5, r9
     2f8:	fb09 5518 	mls	r5, r9, r8, r5
     2fc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     300:	fb08 f00e 	mul.w	r0, r8, lr
     304:	42a8      	cmp	r0, r5
     306:	d90f      	bls.n	328 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x28>
     308:	eb1c 0505 	adds.w	r5, ip, r5
     30c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     310:	bf2c      	ite	cs
     312:	f04f 0b01 	movcs.w	fp, #1
     316:	f04f 0b00 	movcc.w	fp, #0
     31a:	42a8      	cmp	r0, r5
     31c:	d903      	bls.n	326 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x26>
     31e:	f1bb 0f00 	cmp.w	fp, #0
     322:	f000 808c 	beq.w	43e <CONFIG_FLASH_SIZE+0x3e>
     326:	46d0      	mov	r8, sl
     328:	1a2d      	subs	r5, r5, r0
     32a:	b2a4      	uxth	r4, r4
     32c:	fbb5 f0f9 	udiv	r0, r5, r9
     330:	fb09 5510 	mls	r5, r9, r0, r5
     334:	fb00 fe0e 	mul.w	lr, r0, lr
     338:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     33c:	45ae      	cmp	lr, r5
     33e:	d907      	bls.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     340:	eb1c 0505 	adds.w	r5, ip, r5
     344:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     348:	d201      	bcs.n	34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     34a:	45ae      	cmp	lr, r5
     34c:	d87e      	bhi.n	44c <CONFIG_FLASH_SIZE+0x4c>
     34e:	4620      	mov	r0, r4
     350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     354:	eba5 050e 	sub.w	r5, r5, lr
     358:	fba0 9802 	umull	r9, r8, r0, r2
     35c:	4545      	cmp	r5, r8
     35e:	464c      	mov	r4, r9
     360:	46c6      	mov	lr, r8
     362:	d302      	bcc.n	36a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6a>
     364:	d106      	bne.n	374 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x74>
     366:	454b      	cmp	r3, r9
     368:	d204      	bcs.n	374 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x74>
     36a:	3801      	subs	r0, #1
     36c:	ebb9 0402 	subs.w	r4, r9, r2
     370:	eb68 0e0c 	sbc.w	lr, r8, ip
     374:	2e00      	cmp	r6, #0
     376:	d06f      	beq.n	458 <CONFIG_FLASH_SIZE+0x58>
     378:	1b1a      	subs	r2, r3, r4
     37a:	eb65 050e 	sbc.w	r5, r5, lr
     37e:	fa22 f301 	lsr.w	r3, r2, r1
     382:	fa05 f707 	lsl.w	r7, r5, r7
     386:	40cd      	lsrs	r5, r1
     388:	2100      	movs	r1, #0
     38a:	431f      	orrs	r7, r3
     38c:	e9c6 7500 	strd	r7, r5, [r6]
     390:	e73e      	b.n	210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>
     392:	fa02 fc03 	lsl.w	ip, r2, r3
     396:	f1c3 0020 	rsb	r0, r3, #32
     39a:	fa01 f203 	lsl.w	r2, r1, r3
     39e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     3a2:	40c1      	lsrs	r1, r0
     3a4:	fa24 f500 	lsr.w	r5, r4, r0
     3a8:	fa1f f78c 	uxth.w	r7, ip
     3ac:	409c      	lsls	r4, r3
     3ae:	4315      	orrs	r5, r2
     3b0:	fbb1 f0fe 	udiv	r0, r1, lr
     3b4:	0c2a      	lsrs	r2, r5, #16
     3b6:	fb0e 1110 	mls	r1, lr, r0, r1
     3ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
     3be:	fb00 f107 	mul.w	r1, r0, r7
     3c2:	4291      	cmp	r1, r2
     3c4:	d90e      	bls.n	3e4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe4>
     3c6:	eb1c 0202 	adds.w	r2, ip, r2
     3ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     3ce:	bf2c      	ite	cs
     3d0:	f04f 0901 	movcs.w	r9, #1
     3d4:	f04f 0900 	movcc.w	r9, #0
     3d8:	4291      	cmp	r1, r2
     3da:	d902      	bls.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	f1b9 0f00 	cmp.w	r9, #0
     3e0:	d031      	beq.n	446 <CONFIG_FLASH_SIZE+0x46>
     3e2:	4640      	mov	r0, r8
     3e4:	1a52      	subs	r2, r2, r1
     3e6:	b2ad      	uxth	r5, r5
     3e8:	fbb2 f1fe 	udiv	r1, r2, lr
     3ec:	fb0e 2211 	mls	r2, lr, r1, r2
     3f0:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
     3f4:	fb01 f207 	mul.w	r2, r1, r7
     3f8:	42aa      	cmp	r2, r5
     3fa:	d907      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     3fc:	eb1c 0505 	adds.w	r5, ip, r5
     400:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     404:	d201      	bcs.n	40a <CONFIG_FLASH_SIZE+0xa>
     406:	42aa      	cmp	r2, r5
     408:	d823      	bhi.n	452 <CONFIG_FLASH_SIZE+0x52>
     40a:	4641      	mov	r1, r8
     40c:	1aad      	subs	r5, r5, r2
     40e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     412:	e726      	b.n	262 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x62>
     414:	4631      	mov	r1, r6
     416:	4630      	mov	r0, r6
     418:	e6fa      	b.n	210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>
     41a:	1a84      	subs	r4, r0, r2
     41c:	eb65 0303 	sbc.w	r3, r5, r3
     420:	2001      	movs	r0, #1
     422:	461f      	mov	r7, r3
     424:	e70c      	b.n	240 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x40>
     426:	4464      	add	r4, ip
     428:	3802      	subs	r0, #2
     42a:	e74a      	b.n	2c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x42>
     42c:	4464      	add	r4, ip
     42e:	3802      	subs	r0, #2
     430:	e6e4      	b.n	1fc <__udivmoddi4+0x88>
     432:	3a02      	subs	r2, #2
     434:	4465      	add	r5, ip
     436:	e72f      	b.n	298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     438:	3902      	subs	r1, #2
     43a:	4462      	add	r2, ip
     43c:	e6c9      	b.n	1d2 <__udivmoddi4+0x5e>
     43e:	f1a8 0802 	sub.w	r8, r8, #2
     442:	4465      	add	r5, ip
     444:	e770      	b.n	328 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x28>
     446:	3802      	subs	r0, #2
     448:	4462      	add	r2, ip
     44a:	e7cb      	b.n	3e4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe4>
     44c:	3802      	subs	r0, #2
     44e:	4465      	add	r5, ip
     450:	e77e      	b.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     452:	3902      	subs	r1, #2
     454:	4465      	add	r5, ip
     456:	e7d9      	b.n	40c <CONFIG_FLASH_SIZE+0xc>
     458:	4631      	mov	r1, r6
     45a:	e6d9      	b.n	210 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x10>

0000045c <__aeabi_idiv0>:
     45c:	4770      	bx	lr
     45e:	bf00      	nop

00000460 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     462:	4b3f      	ldr	r3, [pc, #252]	; (560 <FIH_LABEL_FIH_CALL_END_524+0x64>)
     464:	4a3f      	ldr	r2, [pc, #252]	; (564 <FIH_LABEL_FIH_CALL_END_524+0x68>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     466:	4840      	ldr	r0, [pc, #256]	; (568 <FIH_LABEL_FIH_CALL_END_524+0x6c>)
     468:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     46c:	2149      	movs	r1, #73	; 0x49
     46e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     472:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     476:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     47a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     47e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     482:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     486:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     48a:	f005 fd2b 	bl	5ee4 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     48e:	f000 f8af 	bl	5f0 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     492:	4836      	ldr	r0, [pc, #216]	; (56c <FIH_LABEL_FIH_CALL_END_524+0x70>)
     494:	f000 f87e 	bl	594 <flash_device_get_binding>
     498:	b928      	cbnz	r0, 4a6 <main+0x46>
        BOOT_LOG_ERR("Flash device %s not found",
     49a:	2145      	movs	r1, #69	; 0x45
     49c:	4a33      	ldr	r2, [pc, #204]	; (56c <FIH_LABEL_FIH_CALL_END_524+0x70>)
     49e:	4834      	ldr	r0, [pc, #208]	; (570 <FIH_LABEL_FIH_CALL_END_524+0x74>)
     4a0:	f005 fd20 	bl	5ee4 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     4a4:	e7fe      	b.n	4a4 <main+0x44>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4a6:	4833      	ldr	r0, [pc, #204]	; (574 <FIH_LABEL_FIH_CALL_END_524+0x78>)
     4a8:	f004 fe92 	bl	51d0 <z_impl_device_get_binding>
     4ac:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     4ae:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     4b0:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     4b2:	6813      	ldr	r3, [r2, #0]
     4b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     4b8:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     4ba:	680b      	ldr	r3, [r1, #0]
     4bc:	f44f 7288 	mov.w	r2, #272	; 0x110
     4c0:	211a      	movs	r1, #26
     4c2:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     4c4:	68a3      	ldr	r3, [r4, #8]
     4c6:	4620      	mov	r0, r4
     4c8:	685b      	ldr	r3, [r3, #4]
     4ca:	a901      	add	r1, sp, #4
     4cc:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     4ce:	b990      	cbnz	r0, 4f6 <FIH_LABEL_FIH_CALL_START_511>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     4d0:	9b01      	ldr	r3, [sp, #4]
     4d2:	015a      	lsls	r2, r3, #5
     4d4:	d40f      	bmi.n	4f6 <FIH_LABEL_FIH_CALL_START_511>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     4de:	b10b      	cbz	r3, 4e4 <main+0x84>
     4e0:	07db      	lsls	r3, r3, #31
     4e2:	d508      	bpl.n	4f6 <FIH_LABEL_FIH_CALL_START_511>
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     4e4:	2149      	movs	r1, #73	; 0x49
     4e6:	4824      	ldr	r0, [pc, #144]	; (578 <FIH_LABEL_FIH_CALL_END_524+0x7c>)
     4e8:	f005 fcfc 	bl	5ee4 <z_log_minimal_printk>
        rc = boot_console_init();
     4ec:	f001 fd38 	bl	1f60 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4f0:	4822      	ldr	r0, [pc, #136]	; (57c <FIH_LABEL_FIH_CALL_END_524+0x80>)
     4f2:	f002 f89b 	bl	262c <boot_serial_start>

000004f6 <FIH_LABEL_FIH_CALL_START_511>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4f6:	a801      	add	r0, sp, #4
     4f8:	f000 fcd8 	bl	eac <boot_go>

000004fc <FIH_LABEL_FIH_CALL_END_524>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4fc:	4b20      	ldr	r3, [pc, #128]	; (580 <FIH_LABEL_FIH_CALL_END_524+0x84>)
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	4283      	cmp	r3, r0
     502:	d004      	beq.n	50e <FIH_LABEL_FIH_CALL_END_524+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     504:	2145      	movs	r1, #69	; 0x45
     506:	481f      	ldr	r0, [pc, #124]	; (584 <FIH_LABEL_FIH_CALL_END_524+0x88>)
     508:	f005 fcec 	bl	5ee4 <z_log_minimal_printk>
        FIH_PANIC;
     50c:	e7fe      	b.n	50c <FIH_LABEL_FIH_CALL_END_524+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     50e:	9a03      	ldr	r2, [sp, #12]
     510:	2149      	movs	r1, #73	; 0x49
     512:	481d      	ldr	r0, [pc, #116]	; (588 <FIH_LABEL_FIH_CALL_END_524+0x8c>)
     514:	f005 fce6 	bl	5ee4 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     518:	2149      	movs	r1, #73	; 0x49
     51a:	481c      	ldr	r0, [pc, #112]	; (58c <FIH_LABEL_FIH_CALL_END_524+0x90>)
     51c:	f005 fce2 	bl	5ee4 <z_log_minimal_printk>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     520:	4669      	mov	r1, sp
     522:	f89d 0008 	ldrb.w	r0, [sp, #8]
     526:	f000 f841 	bl	5ac <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     52a:	9b00      	ldr	r3, [sp, #0]
     52c:	9c03      	ldr	r4, [sp, #12]
     52e:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     530:	9b01      	ldr	r3, [sp, #4]
     532:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     534:	f000 ff62 	bl	13fc <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     538:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     53a:	f04f 0220 	mov.w	r2, #32
     53e:	f3ef 8311 	mrs	r3, BASEPRI
     542:	f382 8812 	msr	BASEPRI_MAX, r2
     546:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     54a:	5963      	ldr	r3, [r4, r5]
     54c:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     550:	6873      	ldr	r3, [r6, #4]
     552:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     554:	2145      	movs	r1, #69	; 0x45
     556:	480e      	ldr	r0, [pc, #56]	; (590 <FIH_LABEL_FIH_CALL_END_524+0x94>)
     558:	f005 fcc4 	bl	5ee4 <z_log_minimal_printk>
    while (1)
     55c:	e7fe      	b.n	55c <FIH_LABEL_FIH_CALL_END_524+0x60>
     55e:	bf00      	nop
     560:	50018000 	.word	0x50018000
     564:	6e524635 	.word	0x6e524635
     568:	00008d07 	.word	0x00008d07
     56c:	00008d20 	.word	0x00008d20
     570:	00008d33 	.word	0x00008d33
     574:	00008d52 	.word	0x00008d52
     578:	00008d59 	.word	0x00008d59
     57c:	00008938 	.word	0x00008938
     580:	2000c71c 	.word	0x2000c71c
     584:	00008d7d 	.word	0x00008d7d
     588:	00008da0 	.word	0x00008da0
     58c:	00008dcf 	.word	0x00008dcf
     590:	00008df4 	.word	0x00008df4

00000594 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     594:	b510      	push	{r4, lr}
    if (!flash_dev) {
     596:	4c04      	ldr	r4, [pc, #16]	; (5a8 <flash_device_get_binding+0x14>)
     598:	6823      	ldr	r3, [r4, #0]
     59a:	b913      	cbnz	r3, 5a2 <flash_device_get_binding+0xe>
     59c:	f004 fe18 	bl	51d0 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     5a0:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     5a2:	6820      	ldr	r0, [r4, #0]
     5a4:	bd10      	pop	{r4, pc}
     5a6:	bf00      	nop
     5a8:	2000c718 	.word	0x2000c718

000005ac <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     5ac:	4602      	mov	r2, r0
{
     5ae:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     5b0:	b138      	cbz	r0, 5c2 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     5b2:	4805      	ldr	r0, [pc, #20]	; (5c8 <flash_device_base+0x1c>)
     5b4:	2300      	movs	r3, #0
     5b6:	2145      	movs	r1, #69	; 0x45
     5b8:	f005 fc94 	bl	5ee4 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     5bc:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     5c0:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     5c2:	6008      	str	r0, [r1, #0]
    return 0;
     5c4:	e7fc      	b.n	5c0 <flash_device_base+0x14>
     5c6:	bf00      	nop
     5c8:	00008e17 	.word	0x00008e17

000005cc <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     5cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5ce:	4a07      	ldr	r2, [pc, #28]	; (5ec <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x10>)
{
     5d0:	4603      	mov	r3, r0
     5d2:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5d4:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     5d6:	4619      	mov	r1, r3
     5d8:	aa01      	add	r2, sp, #4
     5da:	f006 f916 	bl	680a <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     5de:	b918      	cbnz	r0, 5e8 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0xc>
        return rc;
    }

    sector->fs_off = page.start_offset;
     5e0:	9b01      	ldr	r3, [sp, #4]
     5e2:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     5e4:	9b02      	ldr	r3, [sp, #8]
     5e6:	6063      	str	r3, [r4, #4]

    return rc;
}
     5e8:	b004      	add	sp, #16
     5ea:	bd10      	pop	{r4, pc}
     5ec:	2000c718 	.word	0x2000c718

000005f0 <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5f4:	4801      	ldr	r0, [pc, #4]	; (5fc <os_heap_init+0xc>)
     5f6:	f003 bf05 	b.w	4404 <mbedtls_memory_buffer_alloc_init>
     5fa:	bf00      	nop
     5fc:	2000e08e 	.word	0x2000e08e

00000600 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     604:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 7f4 <FIH_LABEL_FIH_CALL_END_645+0x2e>
{
     608:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     60a:	a838      	add	r0, sp, #224	; 0xe0
     60c:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     610:	4617      	mov	r7, r2
     612:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     614:	f8da 6000 	ldr.w	r6, [sl]
     618:	f007 fe62 	bl	82e0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     61c:	2100      	movs	r1, #0
     61e:	a838      	add	r0, sp, #224	; 0xe0
     620:	f003 fff6 	bl	4610 <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     624:	b13c      	cbz	r4, 636 <bootutil_img_validate+0x36>
     626:	f1b8 0f00 	cmp.w	r8, #0
     62a:	dd04      	ble.n	636 <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     62c:	4642      	mov	r2, r8
     62e:	4621      	mov	r1, r4
     630:	a838      	add	r0, sp, #224	; 0xe0
     632:	f007 fe59 	bl	82e8 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     636:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     63a:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     63c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     640:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     642:	68fb      	ldr	r3, [r7, #12]
     644:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     646:	45c8      	cmp	r8, r9
     648:	d84b      	bhi.n	6e2 <FIH_LABEL_FIH_CALL_END_311+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     64a:	a90d      	add	r1, sp, #52	; 0x34
     64c:	a838      	add	r0, sp, #224	; 0xe0
     64e:	f007 fe88 	bl	8362 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     652:	9b86      	ldr	r3, [sp, #536]	; 0x218
     654:	b123      	cbz	r3, 660 <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     656:	2220      	movs	r2, #32
     658:	4618      	mov	r0, r3
     65a:	a90d      	add	r1, sp, #52	; 0x34
     65c:	f005 ff9d 	bl	659a <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     660:	2300      	movs	r3, #0
     662:	462a      	mov	r2, r5
     664:	9300      	str	r3, [sp, #0]
     666:	4639      	mov	r1, r7
     668:	f64f 73ff 	movw	r3, #65535	; 0xffff
     66c:	a807      	add	r0, sp, #28
     66e:	f005 f8e7 	bl	5840 <bootutil_tlv_iter_begin>
    if (rc) {
     672:	4604      	mov	r4, r0
     674:	2800      	cmp	r0, #0
     676:	f040 80b6 	bne.w	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
    int sha256_valid = 0;
     67a:	4680      	mov	r8, r0
    int key_id = -1;
     67c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     680:	f8df 9174 	ldr.w	r9, [pc, #372]	; 7f8 <FIH_LABEL_FIH_CALL_END_645+0x32>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     684:	f10d 0316 	add.w	r3, sp, #22
     688:	aa05      	add	r2, sp, #20
     68a:	a906      	add	r1, sp, #24
     68c:	a807      	add	r0, sp, #28
     68e:	f005 f923 	bl	58d8 <bootutil_tlv_iter_next>
        if (rc < 0) {
     692:	1e04      	subs	r4, r0, #0
     694:	f2c0 80a7 	blt.w	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
        } else if (rc > 0) {
     698:	f040 8098 	bne.w	7cc <FIH_LABEL_FIH_CALL_END_645+0x6>
        if (type == IMAGE_TLV_SHA256) {
     69c:	f8bd b016 	ldrh.w	fp, [sp, #22]
     6a0:	f1bb 0f10 	cmp.w	fp, #16
     6a4:	d134      	bne.n	710 <FIH_LABEL_FIH_CALL_END_311+0x3e>
            if (len != sizeof(hash)) {
     6a6:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     6aa:	f1b8 0f20 	cmp.w	r8, #32
     6ae:	f040 8098 	bne.w	7e2 <FIH_LABEL_FIH_CALL_END_645+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6b2:	4643      	mov	r3, r8
     6b4:	4628      	mov	r0, r5
     6b6:	9906      	ldr	r1, [sp, #24]
     6b8:	aa38      	add	r2, sp, #224	; 0xe0
     6ba:	f005 fc21 	bl	5f00 <flash_area_read>
            if (rc) {
     6be:	4604      	mov	r4, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	f040 8090 	bne.w	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>

000006c6 <FIH_LABEL_FIH_CALL_START_292>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6c6:	4642      	mov	r2, r8
     6c8:	a938      	add	r1, sp, #224	; 0xe0
     6ca:	a80d      	add	r0, sp, #52	; 0x34
     6cc:	f005 f94f 	bl	596e <boot_fih_memequal>
     6d0:	4604      	mov	r4, r0

000006d2 <FIH_LABEL_FIH_CALL_END_311>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     6d2:	4b4a      	ldr	r3, [pc, #296]	; (7fc <FIH_LABEL_FIH_CALL_END_645+0x36>)
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	4283      	cmp	r3, r0
     6d8:	f040 8085 	bne.w	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
            sha256_valid = 1;
     6dc:	f04f 0801 	mov.w	r8, #1
     6e0:	e7d0      	b.n	684 <bootutil_img_validate+0x84>
        blk_sz = size - off;
     6e2:	f8dd b20c 	ldr.w	fp, [sp, #524]	; 0x20c
     6e6:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     6ea:	459b      	cmp	fp, r3
     6ec:	bf28      	it	cs
     6ee:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6f0:	4649      	mov	r1, r9
     6f2:	465b      	mov	r3, fp
     6f4:	4628      	mov	r0, r5
     6f6:	9a82      	ldr	r2, [sp, #520]	; 0x208
     6f8:	f005 fc02 	bl	5f00 <flash_area_read>
        if (rc) {
     6fc:	4604      	mov	r4, r0
     6fe:	2800      	cmp	r0, #0
     700:	d171      	bne.n	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     702:	465a      	mov	r2, fp
     704:	9982      	ldr	r1, [sp, #520]	; 0x208
     706:	a838      	add	r0, sp, #224	; 0xe0
     708:	f007 fdee 	bl	82e8 <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     70c:	44d9      	add	r9, fp
     70e:	e79a      	b.n	646 <bootutil_img_validate+0x46>
        } else if (type == IMAGE_TLV_KEYHASH) {
     710:	f1bb 0f01 	cmp.w	fp, #1
     714:	d136      	bne.n	784 <FIH_LABEL_FIH_CALL_END_311+0xb2>
            if (len > 32) {
     716:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     71a:	2b20      	cmp	r3, #32
     71c:	d861      	bhi.n	7e2 <FIH_LABEL_FIH_CALL_END_645+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     71e:	4628      	mov	r0, r5
     720:	9906      	ldr	r1, [sp, #24]
     722:	aa38      	add	r2, sp, #224	; 0xe0
     724:	f005 fbec 	bl	5f00 <flash_area_read>
            if (rc) {
     728:	4604      	mov	r4, r0
     72a:	2800      	cmp	r0, #0
     72c:	d15b      	bne.n	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
            key_id = bootutil_find_key(buf, len);
     72e:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     732:	f1bb 0f20 	cmp.w	fp, #32
     736:	d903      	bls.n	740 <FIH_LABEL_FIH_CALL_END_311+0x6e>
        return -1;
     738:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            key_id = bootutil_find_key(buf, len);
     73c:	4627      	mov	r7, r4
     73e:	e7a1      	b.n	684 <bootutil_img_validate+0x84>
    for (i = 0; i < bootutil_key_cnt; i++) {
     740:	f8d9 3000 	ldr.w	r3, [r9]
     744:	4f2e      	ldr	r7, [pc, #184]	; (800 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN>)
     746:	9303      	str	r3, [sp, #12]
     748:	9b03      	ldr	r3, [sp, #12]
     74a:	429c      	cmp	r4, r3
     74c:	daf4      	bge.n	738 <FIH_LABEL_FIH_CALL_END_311+0x66>
    mbedtls_sha256_init(ctx);
     74e:	a81d      	add	r0, sp, #116	; 0x74
     750:	f007 fdc6 	bl	82e0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     754:	2100      	movs	r1, #0
     756:	a81d      	add	r0, sp, #116	; 0x74
     758:	f003 ff5a 	bl	4610 <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     75c:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     75e:	a81d      	add	r0, sp, #116	; 0x74
     760:	6812      	ldr	r2, [r2, #0]
     762:	f857 1b08 	ldr.w	r1, [r7], #8
     766:	f007 fdbf 	bl	82e8 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     76a:	a915      	add	r1, sp, #84	; 0x54
     76c:	a81d      	add	r0, sp, #116	; 0x74
     76e:	f007 fdf8 	bl	8362 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     772:	465a      	mov	r2, fp
     774:	a938      	add	r1, sp, #224	; 0xe0
     776:	a815      	add	r0, sp, #84	; 0x54
     778:	f005 fee6 	bl	6548 <memcmp>
     77c:	2800      	cmp	r0, #0
     77e:	d0dd      	beq.n	73c <FIH_LABEL_FIH_CALL_END_311+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     780:	3401      	adds	r4, #1
     782:	e7e1      	b.n	748 <FIH_LABEL_FIH_CALL_END_311+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     784:	f1bb 0f20 	cmp.w	fp, #32
     788:	f47f af7c 	bne.w	684 <bootutil_img_validate+0x84>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     78c:	1c7b      	adds	r3, r7, #1
     78e:	f43f af79 	beq.w	684 <bootutil_img_validate+0x84>
     792:	f8d9 3000 	ldr.w	r3, [r9]
     796:	42bb      	cmp	r3, r7
     798:	dd15      	ble.n	7c6 <FIH_LABEL_FIH_CALL_END_645>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     79a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     7a2:	d11e      	bne.n	7e2 <FIH_LABEL_FIH_CALL_END_645+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7a4:	4628      	mov	r0, r5
     7a6:	9906      	ldr	r1, [sp, #24]
     7a8:	aa38      	add	r2, sp, #224	; 0xe0
     7aa:	f005 fba9 	bl	5f00 <flash_area_read>
            if (rc) {
     7ae:	4604      	mov	r4, r0
     7b0:	b9c8      	cbnz	r0, 7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>

000007b2 <FIH_LABEL_FIH_CALL_START_623>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     7b2:	b2ff      	uxtb	r7, r7
     7b4:	4659      	mov	r1, fp
     7b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7ba:	9700      	str	r7, [sp, #0]
     7bc:	aa38      	add	r2, sp, #224	; 0xe0
     7be:	a80d      	add	r0, sp, #52	; 0x34
     7c0:	f000 f820 	bl	804 <bootutil_verify_sig>
     7c4:	4606      	mov	r6, r0

000007c6 <FIH_LABEL_FIH_CALL_END_645>:
                key_id = -1;
     7c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     7ca:	e75b      	b.n	684 <bootutil_img_validate+0x84>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     7cc:	f1b8 0f00 	cmp.w	r8, #0
     7d0:	d00d      	beq.n	7ee <FIH_LABEL_FIH_CALL_END_645+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <FIH_LABEL_FIH_CALL_END_645+0x36>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	42b3      	cmp	r3, r6
     7d8:	d001      	beq.n	7de <FIH_LABEL_FIH_CALL_END_645+0x18>
        return FIH_FAILURE;
     7da:	f8da 6000 	ldr.w	r6, [sl]
                rc = -1;
     7de:	4634      	mov	r4, r6
     7e0:	e001      	b.n	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
     7e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     7e6:	4620      	mov	r0, r4
     7e8:	b079      	add	sp, #484	; 0x1e4
     7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ee:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     7f0:	e7f9      	b.n	7e6 <FIH_LABEL_FIH_CALL_END_645+0x20>
     7f2:	bf00      	nop
     7f4:	2000c500 	.word	0x2000c500
     7f8:	00008940 	.word	0x00008940
     7fc:	2000c71c 	.word	0x2000c71c
     800:	00008944 	.word	0x00008944

00000804 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     808:	4698      	mov	r8, r3
     80a:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    mbedtls_rsa_context ctx;
    int rc;
    fih_int fih_rc = FIH_FAILURE;
     80e:	4b6b      	ldr	r3, [pc, #428]	; (9bc <FIH_LABEL_FIH_CALL_END_675+0x4>)
{
     810:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     812:	a827      	add	r0, sp, #156	; 0x9c
{
     814:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
     818:	468a      	mov	sl, r1
     81a:	4691      	mov	r9, r2
    fih_int fih_rc = FIH_FAILURE;
     81c:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx);
     81e:	f007 fd1c 	bl	825a <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     822:	4b67      	ldr	r3, [pc, #412]	; (9c0 <FIH_LABEL_FIH_CALL_END_675+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     824:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     826:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     82a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     82e:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     830:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     832:	6819      	ldr	r1, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     834:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     836:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     838:	2330      	movs	r3, #48	; 0x30
     83a:	4621      	mov	r1, r4
     83c:	f006 faa3 	bl	6d86 <mbedtls_asn1_get_tag>
     840:	bb68      	cbnz	r0, 89e <bootutil_verify_sig+0x9a>
    if (*p + len != end) {
     842:	9b02      	ldr	r3, [sp, #8]
     844:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     846:	4413      	add	r3, r2
     848:	429c      	cmp	r4, r3
     84a:	d128      	bne.n	89e <bootutil_verify_sig+0x9a>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     84c:	4621      	mov	r1, r4
     84e:	aa29      	add	r2, sp, #164	; 0xa4
     850:	a802      	add	r0, sp, #8
     852:	f006 faac 	bl	6dae <mbedtls_asn1_get_mpi>
     856:	bb10      	cbnz	r0, 89e <bootutil_verify_sig+0x9a>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     858:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     85c:	465a      	mov	r2, fp
     85e:	4621      	mov	r1, r4
     860:	a802      	add	r0, sp, #8
     862:	f006 faa4 	bl	6dae <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     866:	4606      	mov	r6, r0
     868:	b9c8      	cbnz	r0, 89e <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     86a:	a829      	add	r0, sp, #164	; 0xa4
     86c:	f006 fdff 	bl	746e <mbedtls_mpi_size>
    if (*p != end) {
     870:	9b02      	ldr	r3, [sp, #8]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     872:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     874:	429c      	cmp	r4, r3
     876:	d112      	bne.n	89e <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     878:	4633      	mov	r3, r6
     87a:	4632      	mov	r2, r6
     87c:	e9cd 6b00 	strd	r6, fp, [sp]
     880:	a929      	add	r1, sp, #164	; 0xa4
     882:	a827      	add	r0, sp, #156	; 0x9c
     884:	f007 fca5 	bl	81d2 <mbedtls_rsa_import>
    if (rc != 0) {
     888:	b948      	cbnz	r0, 89e <bootutil_verify_sig+0x9a>
    rc = mbedtls_rsa_check_pubkey(ctx);
     88a:	a827      	add	r0, sp, #156	; 0x9c
     88c:	f003 fe5e 	bl	454c <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     890:	b928      	cbnz	r0, 89e <bootutil_verify_sig+0x9a>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     892:	a829      	add	r0, sp, #164	; 0xa4
     894:	f006 fdeb 	bl	746e <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     898:	4580      	cmp	r8, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     89a:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     89c:	d00a      	beq.n	8b4 <FIH_LABEL_FIH_CALL_START_229>
        mbedtls_rsa_free(&ctx);
     89e:	a827      	add	r0, sp, #156	; 0x9c
     8a0:	f007 fce5 	bl	826e <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     8a4:	a827      	add	r0, sp, #156	; 0x9c
     8a6:	f007 fce2 	bl	826e <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     8aa:	4628      	mov	r0, r5
     8ac:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008b4 <FIH_LABEL_FIH_CALL_START_229>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     8b4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     8b8:	d002      	beq.n	8c0 <FIH_LABEL_FIH_CALL_END_290+0x2>
     8ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

000008be <FIH_LABEL_FIH_CALL_END_290>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     8be:	e7f1      	b.n	8a4 <bootutil_verify_sig+0xa0>
    if (hlen != PSS_HLEN) {
     8c0:	f1ba 0f20 	cmp.w	sl, #32
     8c4:	d1f9      	bne.n	8ba <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     8c6:	4649      	mov	r1, r9
     8c8:	aa8a      	add	r2, sp, #552	; 0x228
     8ca:	a827      	add	r0, sp, #156	; 0x9c
     8cc:	f003 fe62 	bl	4594 <mbedtls_rsa_public>
     8d0:	4604      	mov	r4, r0
     8d2:	2800      	cmp	r0, #0
     8d4:	d1f1      	bne.n	8ba <FIH_LABEL_FIH_CALL_START_229+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     8d6:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     8da:	2bbc      	cmp	r3, #188	; 0xbc
     8dc:	d1ed      	bne.n	8ba <FIH_LABEL_FIH_CALL_START_229+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8de:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     8e2:	26df      	movs	r6, #223	; 0xdf
     8e4:	4645      	mov	r5, r8
    uint8_t counter[4] = { 0, 0, 0, 0 };
     8e6:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     8e8:	a80c      	add	r0, sp, #48	; 0x30
     8ea:	f007 fcf9 	bl	82e0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8ee:	2100      	movs	r1, #0
     8f0:	a80c      	add	r0, sp, #48	; 0x30
     8f2:	f003 fe8d 	bl	4610 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     8f6:	2220      	movs	r2, #32
     8f8:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8fc:	a80c      	add	r0, sp, #48	; 0x30
     8fe:	f007 fcf3 	bl	82e8 <mbedtls_sha256_update>
     902:	2204      	movs	r2, #4
     904:	a903      	add	r1, sp, #12
     906:	a80c      	add	r0, sp, #48	; 0x30
     908:	f007 fcee 	bl	82e8 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     90c:	a904      	add	r1, sp, #16
     90e:	a80c      	add	r0, sp, #48	; 0x30
     910:	f007 fd27 	bl	8362 <mbedtls_sha256_finish>
        if (bytes > count)
     914:	2e1f      	cmp	r6, #31
     916:	bfd4      	ite	le
     918:	46b1      	movle	r9, r6
     91a:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     91e:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     922:	4640      	mov	r0, r8
        counter[3]++;
     924:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     926:	464a      	mov	r2, r9
     928:	a904      	add	r1, sp, #16
        count -= bytes;
     92a:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     92e:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     932:	f005 fe32 	bl	659a <memcpy>
    while (count > 0) {
     936:	2e00      	cmp	r6, #0
        mask += bytes;
     938:	44c8      	add	r8, r9
    while (count > 0) {
     93a:	dcd5      	bgt.n	8e8 <FIH_LABEL_FIH_CALL_END_290+0x2a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     93c:	4628      	mov	r0, r5
     93e:	462a      	mov	r2, r5
     940:	23df      	movs	r3, #223	; 0xdf
     942:	ae8a      	add	r6, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     944:	7811      	ldrb	r1, [r2, #0]
     946:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     94a:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     94c:	ea81 010c 	eor.w	r1, r1, ip
     950:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     954:	d1f6      	bne.n	944 <FIH_LABEL_FIH_CALL_END_290+0x86>
    db_mask[0] &= 0x7F;
     956:	782b      	ldrb	r3, [r5, #0]
     958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     95c:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     95e:	f810 6b01 	ldrb.w	r6, [r0], #1
     962:	2e00      	cmp	r6, #0
     964:	d1a9      	bne.n	8ba <FIH_LABEL_FIH_CALL_START_229+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     966:	3401      	adds	r4, #1
     968:	2cbe      	cmp	r4, #190	; 0xbe
     96a:	d1f8      	bne.n	95e <FIH_LABEL_FIH_CALL_END_290+0xa0>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     96c:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     970:	2b01      	cmp	r3, #1
     972:	d1a2      	bne.n	8ba <FIH_LABEL_FIH_CALL_START_229+0x6>
    mbedtls_sha256_init(ctx);
     974:	a80c      	add	r0, sp, #48	; 0x30
     976:	f007 fcb3 	bl	82e0 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     97a:	4631      	mov	r1, r6
     97c:	a80c      	add	r0, sp, #48	; 0x30
     97e:	f003 fe47 	bl	4610 <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     982:	2208      	movs	r2, #8
     984:	490f      	ldr	r1, [pc, #60]	; (9c4 <FIH_LABEL_FIH_CALL_END_675+0xc>)
     986:	a80c      	add	r0, sp, #48	; 0x30
     988:	f007 fcae 	bl	82e8 <mbedtls_sha256_update>
     98c:	4639      	mov	r1, r7
     98e:	2220      	movs	r2, #32
     990:	a80c      	add	r0, sp, #48	; 0x30
     992:	f007 fca9 	bl	82e8 <mbedtls_sha256_update>
     996:	2220      	movs	r2, #32
     998:	f20d 2107 	addw	r1, sp, #519	; 0x207
     99c:	a80c      	add	r0, sp, #48	; 0x30
     99e:	f007 fca3 	bl	82e8 <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     9a2:	a904      	add	r1, sp, #16
     9a4:	a80c      	add	r0, sp, #48	; 0x30
     9a6:	f007 fcdc 	bl	8362 <mbedtls_sha256_finish>

000009aa <FIH_LABEL_FIH_CALL_START_654>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     9aa:	2220      	movs	r2, #32
     9ac:	f20d 3107 	addw	r1, sp, #775	; 0x307
     9b0:	a804      	add	r0, sp, #16
     9b2:	f004 ffdc 	bl	596e <boot_fih_memequal>
     9b6:	4605      	mov	r5, r0

000009b8 <FIH_LABEL_FIH_CALL_END_675>:
    if (rc) {
     9b8:	e781      	b.n	8be <FIH_LABEL_FIH_CALL_END_290>
     9ba:	bf00      	nop
     9bc:	2000c500 	.word	0x2000c500
     9c0:	00008944 	.word	0x00008944
     9c4:	00008e3d 	.word	0x00008e3d

000009c8 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     9cc:	2302      	movs	r3, #2
{
     9ce:	b086      	sub	sp, #24
     9d0:	460d      	mov	r5, r1
     9d2:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9d4:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9d6:	f8df 8068 	ldr.w	r8, [pc, #104]	; a40 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     9da:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     9de:	f817 0b01 	ldrb.w	r0, [r7], #1
     9e2:	a901      	add	r1, sp, #4
     9e4:	f001 f9be 	bl	1d64 <flash_area_open>
        if (rc != 0) {
     9e8:	4604      	mov	r4, r0
     9ea:	b9a0      	cbnz	r0, a16 <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     9ec:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9ee:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     9f0:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9f2:	aa02      	add	r2, sp, #8
     9f4:	3910      	subs	r1, #16
     9f6:	f005 fa83 	bl	5f00 <flash_area_read>
     9fa:	4604      	mov	r4, r0
        flash_area_close(*fap);
     9fc:	9801      	ldr	r0, [sp, #4]
     9fe:	f005 fa7e 	bl	5efe <flash_area_close>
        if (rc != 0) {
     a02:	b944      	cbnz	r4, a16 <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     a04:	2210      	movs	r2, #16
     a06:	4641      	mov	r1, r8
     a08:	a802      	add	r0, sp, #8
     a0a:	f005 fd9d 	bl	6548 <memcmp>
     a0e:	b140      	cbz	r0, a22 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     a10:	b12e      	cbz	r6, a1e <boot_read_swap_size+0x56>
    return -1;
     a12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     a16:	4620      	mov	r0, r4
     a18:	b006      	add	sp, #24
     a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a1e:	2601      	movs	r6, #1
     a20:	e7dd      	b.n	9de <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     a22:	9801      	ldr	r0, [sp, #4]
     a24:	f006 f8cc 	bl	6bc0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     a28:	2304      	movs	r3, #4
     a2a:	f1a0 0108 	sub.w	r1, r0, #8
     a2e:	462a      	mov	r2, r5
     a30:	9801      	ldr	r0, [sp, #4]
     a32:	f005 fa65 	bl	5f00 <flash_area_read>
     a36:	4604      	mov	r4, r0
        flash_area_close(fap);
     a38:	9801      	ldr	r0, [sp, #4]
     a3a:	f005 fa60 	bl	5efe <flash_area_close>
     a3e:	e7ea      	b.n	a16 <boot_read_swap_size+0x4e>
     a40:	00008b48 	.word	0x00008b48

00000a44 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     a48:	4b38      	ldr	r3, [pc, #224]	; (b2c <FIH_LABEL_FIH_CALL_END_294+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     a4a:	b088      	sub	sp, #32
     a4c:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a4e:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     a50:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     a52:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a54:	f004 fee9 	bl	582a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a58:	a906      	add	r1, sp, #24
     a5a:	b2c0      	uxtb	r0, r0
     a5c:	f001 f982 	bl	1d64 <flash_area_open>
    if (rc != 0) {
     a60:	2800      	cmp	r0, #0
     a62:	d157      	bne.n	b14 <FIH_LABEL_FIH_CALL_END_294+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a64:	4629      	mov	r1, r5
     a66:	f004 fee0 	bl	582a <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a6a:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a6c:	a907      	add	r1, sp, #28
     a6e:	b2c0      	uxtb	r0, r0
     a70:	fb04 6405 	mla	r4, r4, r5, r6
     a74:	f001 f976 	bl	1d64 <flash_area_open>
    if (rc != 0) {
     a78:	2800      	cmp	r0, #0
     a7a:	d036      	beq.n	aea <FIH_LABEL_FIH_CALL_END_294+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a7c:	f04f 082c 	mov.w	r8, #44	; 0x2c
     a80:	fb08 f805 	mul.w	r8, r8, r5
     a84:	eb06 0708 	add.w	r7, r6, r8
     a88:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a8a:	f011 0110 	ands.w	r1, r1, #16
     a8e:	d137      	bne.n	b00 <FIH_LABEL_FIH_CALL_END_294+0x54>

00000a90 <FIH_LABEL_FIH_CALL_START_238>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a90:	f44f 7380 	mov.w	r3, #256	; 0x100
     a94:	9301      	str	r3, [sp, #4]
     a96:	4b26      	ldr	r3, [pc, #152]	; (b30 <FIH_LABEL_FIH_CALL_END_294+0x84>)
     a98:	4622      	mov	r2, r4
     a9a:	9300      	str	r3, [sp, #0]
     a9c:	4608      	mov	r0, r1
     a9e:	e9cd 1103 	strd	r1, r1, [sp, #12]
     aa2:	9b06      	ldr	r3, [sp, #24]
     aa4:	9102      	str	r1, [sp, #8]
     aa6:	f7ff fdab 	bl	600 <bootutil_img_validate>
     aaa:	4604      	mov	r4, r0

00000aac <FIH_LABEL_FIH_CALL_END_294>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     aac:	4b21      	ldr	r3, [pc, #132]	; (b34 <FIH_LABEL_FIH_CALL_END_294+0x88>)
     aae:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ab2:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     ab4:	429a      	cmp	r2, r3
     ab6:	d10c      	bne.n	ad2 <FIH_LABEL_FIH_CALL_END_294+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     ab8:	893a      	ldrh	r2, [r7, #8]
     aba:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     abc:	43d1      	mvns	r1, r2
     abe:	428b      	cmp	r3, r1
     ac0:	d807      	bhi.n	ad2 <FIH_LABEL_FIH_CALL_END_294+0x26>
        *dest = a + b;
     ac2:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     ac4:	6882      	ldr	r2, [r0, #8]
     ac6:	4293      	cmp	r3, r2
     ac8:	d203      	bcs.n	ad2 <FIH_LABEL_FIH_CALL_END_294+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     aca:	4b1b      	ldr	r3, [pc, #108]	; (b38 <FIH_LABEL_FIH_CALL_END_294+0x8c>)
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	42a3      	cmp	r3, r4
     ad0:	d01d      	beq.n	b0e <FIH_LABEL_FIH_CALL_END_294+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     ad2:	b345      	cbz	r5, b26 <FIH_LABEL_FIH_CALL_END_294+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     ad4:	6882      	ldr	r2, [r0, #8]
     ad6:	2100      	movs	r1, #0
     ad8:	f005 fa4a 	bl	5f70 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     adc:	4a17      	ldr	r2, [pc, #92]	; (b3c <FIH_LABEL_FIH_CALL_END_294+0x90>)
     ade:	2145      	movs	r1, #69	; 0x45
     ae0:	4817      	ldr	r0, [pc, #92]	; (b40 <FIH_LABEL_FIH_CALL_END_294+0x94>)
     ae2:	f005 f9ff 	bl	5ee4 <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     ae6:	2401      	movs	r4, #1
     ae8:	e011      	b.n	b0e <FIH_LABEL_FIH_CALL_END_294+0x62>
    erased_val = flash_area_erased_val(fap);
     aea:	9807      	ldr	r0, [sp, #28]
     aec:	f005 fa60 	bl	5fb0 <flash_area_erased_val>
     af0:	4607      	mov	r7, r0
    flash_area_close(fap);
     af2:	9807      	ldr	r0, [sp, #28]
     af4:	f005 fa03 	bl	5efe <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     af8:	1e63      	subs	r3, r4, #1
     afa:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     afc:	4293      	cmp	r3, r2
     afe:	d10d      	bne.n	b1c <FIH_LABEL_FIH_CALL_END_294+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     b00:	2d00      	cmp	r5, #0
     b02:	d0f0      	beq.n	ae6 <FIH_LABEL_FIH_CALL_END_294+0x3a>
            swap_erase_trailer_sectors(state, fap);
     b04:	4630      	mov	r0, r6
     b06:	9906      	ldr	r1, [sp, #24]
     b08:	f005 f827 	bl	5b5a <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     b0c:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     b0e:	9806      	ldr	r0, [sp, #24]
     b10:	f005 f9f5 	bl	5efe <flash_area_close>

    FIH_RET(fih_rc);
}
     b14:	4620      	mov	r0, r4
     b16:	b008      	add	sp, #32
     b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     b1c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     b20:	42b9      	cmp	r1, r7
     b22:	d0eb      	beq.n	afc <FIH_LABEL_FIH_CALL_END_294+0x50>
     b24:	e7aa      	b.n	a7c <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     b26:	4a07      	ldr	r2, [pc, #28]	; (b44 <FIH_LABEL_FIH_CALL_END_294+0x98>)
     b28:	e7d9      	b.n	ade <FIH_LABEL_FIH_CALL_END_294+0x32>
     b2a:	bf00      	nop
     b2c:	2000c500 	.word	0x2000c500
     b30:	2000f88e 	.word	0x2000f88e
     b34:	96f3b83d 	.word	0x96f3b83d
     b38:	2000c71c 	.word	0x2000c71c
     b3c:	00008e45 	.word	0x00008e45
     b40:	00008e57 	.word	0x00008e57
     b44:	00008e4f 	.word	0x00008e4f

00000b48 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     b48:	b573      	push	{r0, r1, r4, r5, r6, lr}
     b4a:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     b4c:	2100      	movs	r1, #0
{
     b4e:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     b50:	4628      	mov	r0, r5
    size = copy_size = 0;
     b52:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     b56:	f004 ffbf 	bl	5ad8 <boot_status_is_reset>
     b5a:	b330      	cbz	r0, baa <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b5c:	4e16      	ldr	r6, [pc, #88]	; (bb8 <boot_swap_image+0x70>)
     b5e:	6823      	ldr	r3, [r4, #0]
     b60:	42b3      	cmp	r3, r6
     b62:	d103      	bne.n	b6c <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b64:	4620      	mov	r0, r4
     b66:	aa01      	add	r2, sp, #4
     b68:	f004 ff4a 	bl	5a00 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b6e:	42b3      	cmp	r3, r6
     b70:	d104      	bne.n	b7c <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b72:	466a      	mov	r2, sp
     b74:	2101      	movs	r1, #1
     b76:	4620      	mov	r0, r4
     b78:	f004 ff42 	bl	5a00 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b7c:	e9dd 3200 	ldrd	r3, r2, [sp]
     b80:	4293      	cmp	r3, r2
            copy_size = size;
     b82:	bf88      	it	hi
     b84:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b86:	9b01      	ldr	r3, [sp, #4]
     b88:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b8a:	9a01      	ldr	r2, [sp, #4]
     b8c:	4629      	mov	r1, r5
     b8e:	4620      	mov	r0, r4
     b90:	f000 fb3a 	bl	1208 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b94:	4b09      	ldr	r3, [pc, #36]	; (bbc <boot_swap_image+0x74>)
     b96:	681a      	ldr	r2, [r3, #0]
     b98:	2a00      	cmp	r2, #0
     b9a:	dd03      	ble.n	ba4 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b9c:	2157      	movs	r1, #87	; 0x57
     b9e:	4808      	ldr	r0, [pc, #32]	; (bc0 <boot_swap_image+0x78>)
     ba0:	f005 f9a0 	bl	5ee4 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     ba4:	2000      	movs	r0, #0
     ba6:	b002      	add	sp, #8
     ba8:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     baa:	f105 0108 	add.w	r1, r5, #8
     bae:	f7ff ff0b 	bl	9c8 <boot_read_swap_size>
        copy_size = bs->swap_size;
     bb2:	68ab      	ldr	r3, [r5, #8]
     bb4:	9301      	str	r3, [sp, #4]
     bb6:	e7e8      	b.n	b8a <boot_swap_image+0x42>
     bb8:	96f3b83d 	.word	0x96f3b83d
     bbc:	2000db80 	.word	0x2000db80
     bc0:	00008e7f 	.word	0x00008e7f

00000bc4 <boot_copy_region>:
{
     bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bc8:	4688      	mov	r8, r1
     bca:	4691      	mov	r9, r2
     bcc:	469a      	mov	sl, r3
    bytes_copied = 0;
     bce:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bd0:	f8df b068 	ldr.w	fp, [pc, #104]	; c3c <boot_copy_region+0x78>
     bd4:	4c1a      	ldr	r4, [pc, #104]	; (c40 <boot_copy_region+0x7c>)
     bd6:	4d1b      	ldr	r5, [pc, #108]	; (c44 <boot_copy_region+0x80>)
    while (bytes_copied < sz) {
     bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bda:	429e      	cmp	r6, r3
     bdc:	d301      	bcc.n	be2 <boot_copy_region+0x1e>
    return 0;
     bde:	2000      	movs	r0, #0
     be0:	e00f      	b.n	c02 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     be4:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     be6:	1b9f      	subs	r7, r3, r6
     be8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     bec:	bf28      	it	cs
     bee:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bf2:	4a12      	ldr	r2, [pc, #72]	; (c3c <boot_copy_region+0x78>)
     bf4:	463b      	mov	r3, r7
     bf6:	eb06 010a 	add.w	r1, r6, sl
     bfa:	f005 f981 	bl	5f00 <flash_area_read>
        if (rc != 0) {
     bfe:	b110      	cbz	r0, c06 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     c00:	2001      	movs	r0, #1
}
     c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     c06:	990a      	ldr	r1, [sp, #40]	; 0x28
     c08:	463b      	mov	r3, r7
     c0a:	465a      	mov	r2, fp
     c0c:	4648      	mov	r0, r9
     c0e:	1871      	adds	r1, r6, r1
     c10:	f005 f992 	bl	5f38 <flash_area_write>
        if (rc != 0) {
     c14:	2800      	cmp	r0, #0
     c16:	d1f3      	bne.n	c00 <boot_copy_region+0x3c>
     c18:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     c1c:	443e      	add	r6, r7
     c1e:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     c22:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     c26:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     c2a:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     c2e:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     c32:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     c36:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     c3a:	e7cd      	b.n	bd8 <boot_copy_region+0x14>
     c3c:	2000c780 	.word	0x2000c780
     c40:	50018000 	.word	0x50018000
     c44:	6e524635 	.word	0x6e524635

00000c48 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c4c:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c4e:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     c50:	4b8e      	ldr	r3, [pc, #568]	; (e8c <FIH_LABEL_FIH_CALL_END_2418+0x48>)
{
     c52:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     c54:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c56:	4b8e      	ldr	r3, [pc, #568]	; (e90 <FIH_LABEL_FIH_CALL_END_2418+0x4c>)
{
     c58:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c5a:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c5c:	4b8d      	ldr	r3, [pc, #564]	; (e94 <FIH_LABEL_FIH_CALL_END_2418+0x50>)
     c5e:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c60:	4608      	mov	r0, r1
     c62:	f004 fde2 	bl	582a <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c66:	f104 0120 	add.w	r1, r4, #32
     c6a:	b2c0      	uxtb	r0, r0
     c6c:	f001 f87a 	bl	1d64 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c70:	2101      	movs	r1, #1
     c72:	2000      	movs	r0, #0
     c74:	f004 fdd9 	bl	582a <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c78:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c7c:	b2c0      	uxtb	r0, r0
     c7e:	f001 f871 	bl	1d64 <flash_area_open>
     c82:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c84:	4620      	mov	r0, r4
     c86:	f004 fefc 	bl	5a82 <boot_read_sectors>
    if (rc != 0) {
     c8a:	4680      	mov	r8, r0
     c8c:	b968      	cbnz	r0, caa <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     c8e:	2200      	movs	r2, #0
     c90:	4620      	mov	r0, r4
     c92:	4611      	mov	r1, r2
     c94:	f004 fe9c 	bl	59d0 <boot_read_image_headers>
    if (rc != 0) {
     c98:	4680      	mov	r8, r0
     c9a:	b308      	cbz	r0, ce0 <context_boot_go+0x98>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c9c:	2200      	movs	r2, #0
     c9e:	2157      	movs	r1, #87	; 0x57
     ca0:	487d      	ldr	r0, [pc, #500]	; (e98 <FIH_LABEL_FIH_CALL_END_2418+0x54>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     ca2:	f005 f91f 	bl	5ee4 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ca6:	2301      	movs	r3, #1
     ca8:	e092      	b.n	dd0 <FIH_LABEL_FIH_CALL_END_2205+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     caa:	f44f 7280 	mov.w	r2, #256	; 0x100
     cae:	2157      	movs	r1, #87	; 0x57
     cb0:	487a      	ldr	r0, [pc, #488]	; (e9c <FIH_LABEL_FIH_CALL_END_2418+0x58>)
     cb2:	f005 f917 	bl	5ee4 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cb6:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     cb8:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     cbe:	d1e6      	bne.n	c8e <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     cc0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     cc4:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     cc6:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     cca:	f200 8084 	bhi.w	dd6 <FIH_LABEL_FIH_CALL_END_2205+0x14>
     cce:	2b01      	cmp	r3, #1
     cd0:	f200 8088 	bhi.w	de4 <FIH_LABEL_FIH_CALL_END_2205+0x22>
     cd4:	f000 809f 	beq.w	e16 <FIH_LABEL_FIH_CALL_END_2205+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cd8:	23ff      	movs	r3, #255	; 0xff
     cda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cde:	e09a      	b.n	e16 <FIH_LABEL_FIH_CALL_END_2205+0x54>
    if (boot_slots_compatible(state)) {
     ce0:	4620      	mov	r0, r4
     ce2:	f000 f9a7 	bl	1034 <boot_slots_compatible>
     ce6:	2800      	cmp	r0, #0
     ce8:	d0dd      	beq.n	ca6 <context_boot_go+0x5e>
        boot_status_reset(bs);
     cea:	4668      	mov	r0, sp
     cec:	f004 feeb 	bl	5ac6 <boot_status_reset>
        rc = swap_read_status(state, bs);
     cf0:	4669      	mov	r1, sp
     cf2:	4620      	mov	r0, r4
     cf4:	f004 ff86 	bl	5c04 <swap_read_status>
        if (rc != 0) {
     cf8:	b118      	cbz	r0, d02 <context_boot_go+0xba>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     cfa:	4642      	mov	r2, r8
     cfc:	2157      	movs	r1, #87	; 0x57
     cfe:	4868      	ldr	r0, [pc, #416]	; (ea0 <FIH_LABEL_FIH_CALL_END_2418+0x5c>)
     d00:	e7cf      	b.n	ca2 <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     d02:	4668      	mov	r0, sp
     d04:	f004 fee8 	bl	5ad8 <boot_status_is_reset>
     d08:	f080 0101 	eor.w	r1, r0, #1
     d0c:	466a      	mov	r2, sp
     d0e:	4620      	mov	r0, r4
     d10:	b2c9      	uxtb	r1, r1
     d12:	f004 fe5d 	bl	59d0 <boot_read_image_headers>
        if (rc != 0) {
     d16:	4602      	mov	r2, r0
     d18:	2800      	cmp	r0, #0
     d1a:	d1bf      	bne.n	c9c <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     d1c:	4668      	mov	r0, sp
     d1e:	f004 fedb 	bl	5ad8 <boot_status_is_reset>
     d22:	4680      	mov	r8, r0
     d24:	bb60      	cbnz	r0, d80 <context_boot_go+0x138>
    rc = boot_swap_image(state, bs);
     d26:	4669      	mov	r1, sp
     d28:	4620      	mov	r0, r4
     d2a:	f7ff ff0d 	bl	b48 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d32:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     d36:	3b03      	subs	r3, #3
     d38:	2b01      	cmp	r3, #1
     d3a:	d806      	bhi.n	d4a <context_boot_go+0x102>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d3c:	4640      	mov	r0, r8
     d3e:	f004 ffaf 	bl	5ca0 <swap_set_image_ok>
        if (rc != 0) {
     d42:	b110      	cbz	r0, d4a <context_boot_go+0x102>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d44:	23ff      	movs	r3, #255	; 0xff
     d46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     d4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d4e:	3b02      	subs	r3, #2
     d50:	2b02      	cmp	r3, #2
     d52:	d80b      	bhi.n	d6c <context_boot_go+0x124>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d54:	2000      	movs	r0, #0
     d56:	f004 ff91 	bl	5c7c <swap_set_copy_done>
        if (rc != 0) {
     d5a:	b138      	cbz	r0, d6c <context_boot_go+0x124>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d5c:	23ff      	movs	r3, #255	; 0xff
     d5e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     d62:	2145      	movs	r1, #69	; 0x45
     d64:	484f      	ldr	r0, [pc, #316]	; (ea4 <FIH_LABEL_FIH_CALL_END_2418+0x60>)
     d66:	f005 f8bd 	bl	5ee4 <z_log_minimal_printk>
        while (1) {}
     d6a:	e7fe      	b.n	d6a <context_boot_go+0x122>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d6c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d70:	2bff      	cmp	r3, #255	; 0xff
     d72:	d0f6      	beq.n	d62 <context_boot_go+0x11a>
            rc = boot_read_image_headers(state, false, bs);
     d74:	466a      	mov	r2, sp
     d76:	2100      	movs	r1, #0
     d78:	4620      	mov	r0, r4
     d7a:	f004 fe29 	bl	59d0 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d7e:	e792      	b.n	ca6 <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d80:	f89d 9007 	ldrb.w	r9, [sp, #7]
     d84:	f1b9 0f01 	cmp.w	r9, #1
     d88:	d117      	bne.n	dba <FIH_LABEL_FIH_CALL_START_2185>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d8a:	4610      	mov	r0, r2
     d8c:	f003 f968 	bl	4060 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d90:	1e83      	subs	r3, r0, #2
     d92:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d94:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d96:	d80d      	bhi.n	db4 <FIH_LABEL_FIH_CALL_END_2120+0x14>

00000d98 <FIH_LABEL_FIH_CALL_START_2096>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d98:	4649      	mov	r1, r9
     d9a:	4620      	mov	r0, r4
     d9c:	f7ff fe52 	bl	a44 <boot_validate_slot.isra.0>

00000da0 <FIH_LABEL_FIH_CALL_END_2120>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     da0:	4b41      	ldr	r3, [pc, #260]	; (ea8 <FIH_LABEL_FIH_CALL_END_2418+0x64>)
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	4298      	cmp	r0, r3
     da6:	d005      	beq.n	db4 <FIH_LABEL_FIH_CALL_END_2120+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     da8:	2801      	cmp	r0, #1
     daa:	bf0c      	ite	eq
     dac:	f04f 0801 	moveq.w	r8, #1
     db0:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     db4:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     db8:	e782      	b.n	cc0 <context_boot_go+0x78>

00000dba <FIH_LABEL_FIH_CALL_START_2185>:
                FIH_CALL(boot_validate_slot, fih_rc,
     dba:	2101      	movs	r1, #1
     dbc:	4620      	mov	r0, r4
     dbe:	f7ff fe41 	bl	a44 <boot_validate_slot.isra.0>

00000dc2 <FIH_LABEL_FIH_CALL_END_2205>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     dc2:	4b39      	ldr	r3, [pc, #228]	; (ea8 <FIH_LABEL_FIH_CALL_END_2418+0x64>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     dc8:	bf14      	ite	ne
     dca:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     dcc:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     dd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     dd4:	e774      	b.n	cc0 <context_boot_go+0x78>
        switch (BOOT_SWAP_TYPE(state)) {
     dd6:	2b05      	cmp	r3, #5
     dd8:	f47f af7e 	bne.w	cd8 <context_boot_go+0x90>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     ddc:	2000      	movs	r0, #0
     dde:	f004 ff5f 	bl	5ca0 <swap_set_image_ok>
     de2:	e013      	b.n	e0c <FIH_LABEL_FIH_CALL_END_2205+0x4a>
        rc = boot_swap_image(state, bs);
     de4:	4669      	mov	r1, sp
     de6:	4620      	mov	r0, r4
     de8:	f7ff feae 	bl	b48 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     dec:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     df0:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     df2:	1eda      	subs	r2, r3, #3
     df4:	2a01      	cmp	r2, #1
     df6:	d80c      	bhi.n	e12 <FIH_LABEL_FIH_CALL_END_2205+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     df8:	2000      	movs	r0, #0
     dfa:	f004 ff51 	bl	5ca0 <swap_set_image_ok>
        if (rc != 0) {
     dfe:	4605      	mov	r5, r0
     e00:	2800      	cmp	r0, #0
     e02:	f47f af69 	bne.w	cd8 <context_boot_go+0x90>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     e06:	2000      	movs	r0, #0
     e08:	f004 ff38 	bl	5c7c <swap_set_copy_done>
            if (rc != 0) {
     e0c:	4605      	mov	r5, r0
     e0e:	b110      	cbz	r0, e16 <FIH_LABEL_FIH_CALL_END_2205+0x54>
     e10:	e762      	b.n	cd8 <context_boot_go+0x90>
    if (BOOT_IS_UPGRADE(swap_type)) {
     e12:	2b02      	cmp	r3, #2
     e14:	d0f7      	beq.n	e06 <FIH_LABEL_FIH_CALL_END_2205+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     e16:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     e1a:	2bff      	cmp	r3, #255	; 0xff
     e1c:	d104      	bne.n	e28 <FIH_LABEL_FIH_CALL_END_2205+0x66>
            BOOT_LOG_ERR("panic!");
     e1e:	2145      	movs	r1, #69	; 0x45
     e20:	4820      	ldr	r0, [pc, #128]	; (ea4 <FIH_LABEL_FIH_CALL_END_2418+0x60>)
     e22:	f005 f85f 	bl	5ee4 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     e26:	e7fe      	b.n	e26 <FIH_LABEL_FIH_CALL_END_2205+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     e28:	2b01      	cmp	r3, #1
     e2a:	d006      	beq.n	e3a <FIH_LABEL_FIH_CALL_START_2402>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     e2c:	466a      	mov	r2, sp
     e2e:	2100      	movs	r1, #0
     e30:	4620      	mov	r0, r4
     e32:	f004 fdcd 	bl	59d0 <boot_read_image_headers>
            if (rc != 0) {
     e36:	4605      	mov	r5, r0
     e38:	b9d0      	cbnz	r0, e70 <FIH_LABEL_FIH_CALL_END_2418+0x2c>

00000e3a <FIH_LABEL_FIH_CALL_START_2402>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     e3a:	2100      	movs	r1, #0
     e3c:	4620      	mov	r0, r4
     e3e:	f7ff fe01 	bl	a44 <boot_validate_slot.isra.0>
     e42:	4606      	mov	r6, r0

00000e44 <FIH_LABEL_FIH_CALL_END_2418>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     e44:	f8df 8060 	ldr.w	r8, [pc, #96]	; ea8 <FIH_LABEL_FIH_CALL_END_2418+0x64>
     e48:	f8d8 3000 	ldr.w	r3, [r8]
     e4c:	4298      	cmp	r0, r3
     e4e:	d10f      	bne.n	e70 <FIH_LABEL_FIH_CALL_END_2418+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     e50:	2210      	movs	r2, #16
     e52:	2100      	movs	r1, #0
     e54:	4668      	mov	r0, sp
     e56:	f005 fbab 	bl	65b0 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     e5a:	6a20      	ldr	r0, [r4, #32]
     e5c:	f004 fcee 	bl	583c <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     e60:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     e62:	7138      	strb	r0, [r7, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     e64:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     e66:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e6a:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e6c:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e6e:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e72:	f005 f844 	bl	5efe <flash_area_close>
     e76:	6a20      	ldr	r0, [r4, #32]
     e78:	f005 f841 	bl	5efe <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     e7c:	2d00      	cmp	r5, #0
     e7e:	bf14      	ite	ne
     e80:	4628      	movne	r0, r5
     e82:	4630      	moveq	r0, r6
     e84:	b005      	add	sp, #20
     e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e8a:	bf00      	nop
     e8c:	2000c500 	.word	0x2000c500
     e90:	2000cb80 	.word	0x2000cb80
     e94:	2000d380 	.word	0x2000d380
     e98:	00008ef0 	.word	0x00008ef0
     e9c:	00008eae 	.word	0x00008eae
     ea0:	00008f1c 	.word	0x00008f1c
     ea4:	00008f46 	.word	0x00008f46
     ea8:	2000c71c 	.word	0x2000c71c

00000eac <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     eac:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     eae:	4d06      	ldr	r5, [pc, #24]	; (ec8 <FIH_LABEL_FIH_CALL_END_3100+0x4>)
{
     eb0:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     eb2:	2260      	movs	r2, #96	; 0x60
     eb4:	2100      	movs	r1, #0
     eb6:	4628      	mov	r0, r5
     eb8:	f005 fb7a 	bl	65b0 <memset>

00000ebc <FIH_LABEL_FIH_CALL_START_3085>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     ebc:	4621      	mov	r1, r4
     ebe:	4628      	mov	r0, r5
     ec0:	f7ff fec2 	bl	c48 <context_boot_go>

00000ec4 <FIH_LABEL_FIH_CALL_END_3100>:
}
     ec4:	bd38      	pop	{r3, r4, r5, pc}
     ec6:	bf00      	nop
     ec8:	2000c720 	.word	0x2000c720

00000ecc <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ece:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     ed0:	461c      	mov	r4, r3
     ed2:	b333      	cbz	r3, f22 <boot_read_image_header+0x56>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     ed4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ed6:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     ed8:	7963      	ldrb	r3, [r4, #5]
     eda:	2b01      	cmp	r3, #1
     edc:	d115      	bne.n	f0a <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     ede:	bb01      	cbnz	r1, f22 <boot_read_image_header+0x56>
     ee0:	4b1f      	ldr	r3, [pc, #124]	; (f60 <boot_read_image_header+0x94>)
     ee2:	6822      	ldr	r2, [r4, #0]
     ee4:	681b      	ldr	r3, [r3, #0]
    off = 0;
     ee6:	429a      	cmp	r2, r3
     ee8:	bf98      	it	ls
     eea:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     eec:	2000      	movs	r0, #0
     eee:	f004 fc9c 	bl	582a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ef2:	a901      	add	r1, sp, #4
     ef4:	b2c0      	uxtb	r0, r0
     ef6:	f000 ff35 	bl	1d64 <flash_area_open>
    if (rc != 0) {
     efa:	b1f0      	cbz	r0, f3a <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     efc:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     efe:	9801      	ldr	r0, [sp, #4]
     f00:	f004 fffd 	bl	5efe <flash_area_close>
    return rc;
}
     f04:	4628      	mov	r0, r5
     f06:	b002      	add	sp, #8
     f08:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     f0a:	2b02      	cmp	r3, #2
     f0c:	d109      	bne.n	f22 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     f0e:	6823      	ldr	r3, [r4, #0]
     f10:	2b01      	cmp	r3, #1
     f12:	d908      	bls.n	f26 <boot_read_image_header+0x5a>
     f14:	4a12      	ldr	r2, [pc, #72]	; (f60 <boot_read_image_header+0x94>)
     f16:	6812      	ldr	r2, [r2, #0]
     f18:	4293      	cmp	r3, r2
     f1a:	d802      	bhi.n	f22 <boot_read_image_header+0x56>
                if (slot == 0) {
     f1c:	fab1 f181 	clz	r1, r1
     f20:	0949      	lsrs	r1, r1, #5
    off = 0;
     f22:	2500      	movs	r5, #0
     f24:	e7e2      	b.n	eec <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     f26:	d1fc      	bne.n	f22 <boot_read_image_header+0x56>
                if (slot == 0) {
     f28:	2900      	cmp	r1, #0
     f2a:	d0df      	beq.n	eec <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     f2c:	2901      	cmp	r1, #1
     f2e:	d1f8      	bne.n	f22 <boot_read_image_header+0x56>
     f30:	7921      	ldrb	r1, [r4, #4]
     f32:	3902      	subs	r1, #2
     f34:	bf18      	it	ne
     f36:	2101      	movne	r1, #1
     f38:	e7f3      	b.n	f22 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     f3a:	4629      	mov	r1, r5
     f3c:	2320      	movs	r3, #32
     f3e:	4632      	mov	r2, r6
     f40:	9801      	ldr	r0, [sp, #4]
     f42:	f004 ffdd 	bl	5f00 <flash_area_read>
    if (rc != 0) {
     f46:	4605      	mov	r5, r0
     f48:	2800      	cmp	r0, #0
     f4a:	d1d7      	bne.n	efc <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     f4c:	2c00      	cmp	r4, #0
     f4e:	d0d6      	beq.n	efe <boot_read_image_header+0x32>
     f50:	6835      	ldr	r5, [r6, #0]
     f52:	4804      	ldr	r0, [pc, #16]	; (f64 <boot_read_image_header+0x98>)
     f54:	1a2d      	subs	r5, r5, r0
     f56:	bf18      	it	ne
     f58:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     f5c:	e7cf      	b.n	efe <boot_read_image_header+0x32>
     f5e:	bf00      	nop
     f60:	2000c504 	.word	0x2000c504
     f64:	96f3b83d 	.word	0x96f3b83d

00000f68 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f6c:	4607      	mov	r7, r0
     f6e:	460c      	mov	r4, r1
     f70:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f72:	4601      	mov	r1, r0
     f74:	2000      	movs	r0, #0
{
     f76:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f78:	f004 fd00 	bl	597c <boot_status_entries>
    if (max_entries < 0) {
     f7c:	1e05      	subs	r5, r0, #0
     f7e:	db52      	blt.n	1026 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x26>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f80:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f82:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f84:	f004 fd04 	bl	5990 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f88:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f8c:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f90:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
     f9c:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     fa0:	b99d      	cbnz	r5, fca <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     fa2:	f1ba 0f01 	cmp.w	sl, #1
     fa6:	dd03      	ble.n	fb0 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     fa8:	2145      	movs	r1, #69	; 0x45
     faa:	4821      	ldr	r0, [pc, #132]	; (1030 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x30>)
     fac:	f004 ff9a 	bl	5ee4 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     fb0:	1c63      	adds	r3, r4, #1
     fb2:	d006      	beq.n	fc2 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     fb4:	2cff      	cmp	r4, #255	; 0xff
     fb6:	dc2a      	bgt.n	100e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     fb8:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fbc:	3401      	adds	r4, #1
     fbe:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     fc0:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     fc2:	4628      	mov	r0, r5
     fc4:	b005      	add	sp, #20
     fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     fca:	1e6b      	subs	r3, r5, #1
     fcc:	9300      	str	r3, [sp, #0]
     fce:	4641      	mov	r1, r8
     fd0:	2301      	movs	r3, #1
     fd2:	4638      	mov	r0, r7
     fd4:	f10d 020f 	add.w	r2, sp, #15
     fd8:	f004 ff92 	bl	5f00 <flash_area_read>
        if (rc < 0) {
     fdc:	1e03      	subs	r3, r0, #0
     fde:	9301      	str	r3, [sp, #4]
     fe0:	db23      	blt.n	102a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     fe2:	2201      	movs	r2, #1
     fe4:	4638      	mov	r0, r7
     fe6:	f10d 010f 	add.w	r1, sp, #15
     fea:	f005 fdfa 	bl	6be2 <bootutil_buffer_is_erased>
     fee:	9b01      	ldr	r3, [sp, #4]
     ff0:	b140      	cbz	r0, 1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
            if (rc != last_rc) {
     ff2:	455b      	cmp	r3, fp
     ff4:	d001      	beq.n	ffa <swap_read_status_bytes+0x92>
                erased_sections++;
     ff6:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     ffa:	469b      	mov	fp, r3
     ffc:	9d00      	ldr	r5, [sp, #0]
     ffe:	eba8 0809 	sub.w	r8, r8, r9
    1002:	e7cd      	b.n	fa0 <swap_read_status_bytes+0x38>
    1004:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    1008:	bf08      	it	eq
    100a:	462c      	moveq	r4, r5
    100c:	e7f5      	b.n	ffa <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
    100e:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1010:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
    1014:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1016:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    1018:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    101c:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    101e:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1020:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    1022:	7134      	strb	r4, [r6, #4]
    1024:	e7cd      	b.n	fc2 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
    1026:	2507      	movs	r5, #7
    1028:	e7cb      	b.n	fc2 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
    102a:	2501      	movs	r5, #1
    102c:	e7c9      	b.n	fc2 <swap_read_status_bytes+0x5a>
    102e:	bf00      	nop
    1030:	00008f52 	.word	0x00008f52

00001034 <boot_slots_compatible>:
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
    1034:	6a81      	ldr	r1, [r0, #40]	; 0x28
    1036:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
    1038:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
    103a:	428a      	cmp	r2, r1
    103c:	d008      	beq.n	1050 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    103e:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    1040:	428b      	cmp	r3, r1
    1042:	d005      	beq.n	1050 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
    1044:	2157      	movs	r1, #87	; 0x57
    1046:	4814      	ldr	r0, [pc, #80]	; (1098 <boot_slots_compatible+0x64>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1048:	f004 ff4c 	bl	5ee4 <z_log_minimal_printk>
            return 0;
    104c:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    104e:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    1050:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1054:	d91c      	bls.n	1090 <boot_slots_compatible+0x5c>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    1056:	2157      	movs	r1, #87	; 0x57
    1058:	4810      	ldr	r0, [pc, #64]	; (109c <boot_slots_compatible+0x68>)
    105a:	e7f5      	b.n	1048 <boot_slots_compatible+0x14>
    105c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    105e:	6d05      	ldr	r5, [r0, #80]	; 0x50
    1060:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    1064:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    1068:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    106a:	686d      	ldr	r5, [r5, #4]
    106c:	42ac      	cmp	r4, r5
    106e:	d002      	beq.n	1076 <boot_slots_compatible+0x42>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1070:	2157      	movs	r1, #87	; 0x57
    1072:	480b      	ldr	r0, [pc, #44]	; (10a0 <boot_slots_compatible+0x6c>)
    1074:	e7e8      	b.n	1048 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    1076:	3301      	adds	r3, #1
    1078:	429a      	cmp	r2, r3
    107a:	d1ef      	bne.n	105c <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    107c:	4291      	cmp	r1, r2
    107e:	d905      	bls.n	108c <boot_slots_compatible+0x58>
    1080:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1082:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    1086:	6853      	ldr	r3, [r2, #4]
    1088:	42a3      	cmp	r3, r4
    108a:	d1f1      	bne.n	1070 <boot_slots_compatible+0x3c>
    return 1;
    108c:	2001      	movs	r0, #1
    108e:	e7de      	b.n	104e <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1090:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1092:	461c      	mov	r4, r3
    1094:	e7f0      	b.n	1078 <boot_slots_compatible+0x44>
    1096:	bf00      	nop
    1098:	00008f75 	.word	0x00008f75
    109c:	00008fad 	.word	0x00008fad
    10a0:	00008fdc 	.word	0x00008fdc

000010a4 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    10a4:	b500      	push	{lr}
    10a6:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    10a8:	2002      	movs	r0, #2
    10aa:	a904      	add	r1, sp, #16
    10ac:	f005 fdfe 	bl	6cac <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10b0:	f89d 2010 	ldrb.w	r2, [sp, #16]
    10b4:	2a01      	cmp	r2, #1
    10b6:	d041      	beq.n	113c <swap_status_source+0x98>
    10b8:	4b25      	ldr	r3, [pc, #148]	; (1150 <swap_status_source+0xac>)
    10ba:	4926      	ldr	r1, [pc, #152]	; (1154 <swap_status_source+0xb0>)
    10bc:	2a03      	cmp	r2, #3
    10be:	bf18      	it	ne
    10c0:	460b      	movne	r3, r1
    10c2:	f89d 2013 	ldrb.w	r2, [sp, #19]
    10c6:	2149      	movs	r1, #73	; 0x49
    10c8:	9202      	str	r2, [sp, #8]
    10ca:	f89d 2012 	ldrb.w	r2, [sp, #18]
    10ce:	4822      	ldr	r0, [pc, #136]	; (1158 <swap_status_source+0xb4>)
    10d0:	9201      	str	r2, [sp, #4]
    10d2:	f89d 2011 	ldrb.w	r2, [sp, #17]
    10d6:	9200      	str	r2, [sp, #0]
    10d8:	4a20      	ldr	r2, [pc, #128]	; (115c <swap_status_source+0xb8>)
    10da:	f004 ff03 	bl	5ee4 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10de:	2006      	movs	r0, #6
    10e0:	a906      	add	r1, sp, #24
    10e2:	f005 fde3 	bl	6cac <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10e6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    10ea:	2a01      	cmp	r2, #1
    10ec:	d028      	beq.n	1140 <swap_status_source+0x9c>
    10ee:	4b18      	ldr	r3, [pc, #96]	; (1150 <swap_status_source+0xac>)
    10f0:	4918      	ldr	r1, [pc, #96]	; (1154 <swap_status_source+0xb0>)
    10f2:	2a03      	cmp	r2, #3
    10f4:	bf18      	it	ne
    10f6:	460b      	movne	r3, r1
    10f8:	f89d 201b 	ldrb.w	r2, [sp, #27]
    10fc:	2149      	movs	r1, #73	; 0x49
    10fe:	9202      	str	r2, [sp, #8]
    1100:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1104:	4814      	ldr	r0, [pc, #80]	; (1158 <swap_status_source+0xb4>)
    1106:	9201      	str	r2, [sp, #4]
    1108:	f89d 2019 	ldrb.w	r2, [sp, #25]
    110c:	9200      	str	r2, [sp, #0]
    110e:	4a14      	ldr	r2, [pc, #80]	; (1160 <swap_status_source+0xbc>)
    1110:	f004 fee8 	bl	5ee4 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1114:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1118:	2b01      	cmp	r3, #1
    111a:	d113      	bne.n	1144 <swap_status_source+0xa0>
    111c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    1120:	2b03      	cmp	r3, #3
    1122:	d10f      	bne.n	1144 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1124:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1128:	2b01      	cmp	r3, #1
    112a:	d00b      	beq.n	1144 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    112c:	480d      	ldr	r0, [pc, #52]	; (1164 <swap_status_source+0xc0>)
    112e:	2149      	movs	r1, #73	; 0x49
    1130:	f004 fed8 	bl	5ee4 <z_log_minimal_printk>
        return source;
    1134:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    1136:	b009      	add	sp, #36	; 0x24
    1138:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    113c:	4b0a      	ldr	r3, [pc, #40]	; (1168 <swap_status_source+0xc4>)
    113e:	e7c0      	b.n	10c2 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1140:	4b09      	ldr	r3, [pc, #36]	; (1168 <swap_status_source+0xc4>)
    1142:	e7d9      	b.n	10f8 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    1144:	4809      	ldr	r0, [pc, #36]	; (116c <swap_status_source+0xc8>)
    1146:	2149      	movs	r1, #73	; 0x49
    1148:	f004 fecc 	bl	5ee4 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    114c:	2000      	movs	r0, #0
    114e:	e7f2      	b.n	1136 <swap_status_source+0x92>
    1150:	0000900d 	.word	0x0000900d
    1154:	00009013 	.word	0x00009013
    1158:	00009025 	.word	0x00009025
    115c:	00009017 	.word	0x00009017
    1160:	00009066 	.word	0x00009066
    1164:	00009076 	.word	0x00009076
    1168:	00009008 	.word	0x00009008
    116c:	00009095 	.word	0x00009095

00001170 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1170:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1172:	684b      	ldr	r3, [r1, #4]
{
    1174:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1176:	4a1e      	ldr	r2, [pc, #120]	; (11f0 <fixup_revert+0x80>)
    1178:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    117c:	4293      	cmp	r3, r2
{
    117e:	4606      	mov	r6, r0
    1180:	460d      	mov	r5, r1
    1182:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1184:	d12f      	bne.n	11e6 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1186:	680b      	ldr	r3, [r1, #0]
    1188:	2b01      	cmp	r3, #1
    118a:	d12c      	bne.n	11e6 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    118c:	4620      	mov	r0, r4
    118e:	a904      	add	r1, sp, #16
    1190:	f002 ff16 	bl	3fc0 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1194:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1198:	2a01      	cmp	r2, #1
    119a:	d026      	beq.n	11ea <fixup_revert+0x7a>
    119c:	4b15      	ldr	r3, [pc, #84]	; (11f4 <fixup_revert+0x84>)
    119e:	4916      	ldr	r1, [pc, #88]	; (11f8 <fixup_revert+0x88>)
    11a0:	2a03      	cmp	r2, #3
    11a2:	bf18      	it	ne
    11a4:	460b      	movne	r3, r1
    11a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    11aa:	2149      	movs	r1, #73	; 0x49
    11ac:	9202      	str	r2, [sp, #8]
    11ae:	f89d 2012 	ldrb.w	r2, [sp, #18]
    11b2:	4812      	ldr	r0, [pc, #72]	; (11fc <fixup_revert+0x8c>)
    11b4:	9201      	str	r2, [sp, #4]
    11b6:	f89d 2011 	ldrb.w	r2, [sp, #17]
    11ba:	9200      	str	r2, [sp, #0]
    11bc:	4a10      	ldr	r2, [pc, #64]	; (1200 <fixup_revert+0x90>)
    11be:	f004 fe91 	bl	5ee4 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    11c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    11c6:	2b03      	cmp	r3, #3
    11c8:	d10d      	bne.n	11e6 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11ca:	4621      	mov	r1, r4
    11cc:	4630      	mov	r0, r6
    11ce:	f004 fcc4 	bl	5b5a <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    11d2:	4620      	mov	r0, r4
    11d4:	f005 fd61 	bl	6c9a <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    11d8:	4620      	mov	r0, r4
    11da:	68a9      	ldr	r1, [r5, #8]
    11dc:	f004 fbe9 	bl	59b2 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    11e0:	4620      	mov	r0, r4
    11e2:	f002 fedf 	bl	3fa4 <boot_write_magic>
        assert(rc == 0);
    }
}
    11e6:	b006      	add	sp, #24
    11e8:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    11ea:	4b06      	ldr	r3, [pc, #24]	; (1204 <fixup_revert+0x94>)
    11ec:	e7db      	b.n	11a6 <fixup_revert+0x36>
    11ee:	bf00      	nop
    11f0:	04000100 	.word	0x04000100
    11f4:	0000900d 	.word	0x0000900d
    11f8:	00009013 	.word	0x00009013
    11fc:	00009025 	.word	0x00009025
    1200:	00009066 	.word	0x00009066
    1204:	00009008 	.word	0x00009008

00001208 <swap_run>:
    1208:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    120a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    120e:	460c      	mov	r4, r1
    1210:	685e      	ldr	r6, [r3, #4]
    1212:	4605      	mov	r5, r0
    1214:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    1216:	2300      	movs	r3, #0
{
    1218:	b089      	sub	sp, #36	; 0x24
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    121a:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    121c:	429a      	cmp	r2, r3
    121e:	4608      	mov	r0, r1
    1220:	f101 0101 	add.w	r1, r1, #1
    1224:	d8f9      	bhi.n	121a <swap_run+0x12>
    1226:	4b72      	ldr	r3, [pc, #456]	; (13f0 <swap_run+0x1e8>)
    1228:	6018      	str	r0, [r3, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    122a:	4620      	mov	r0, r4
    122c:	f004 fc54 	bl	5ad8 <boot_status_is_reset>
    1230:	b1b8      	cbz	r0, 1262 <swap_run+0x5a>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1232:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    1234:	f004 fb9d 	bl	5972 <boot_trailer_sz>
        sz = 0;
    1238:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    123a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    123c:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    123e:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1240:	4290      	cmp	r0, r2
    1242:	d901      	bls.n	1248 <swap_run+0x40>
                break;
            }
            first_trailer_idx--;
    1244:	3b01      	subs	r3, #1
            sz += sector_sz;
    1246:	e7fa      	b.n	123e <swap_run+0x36>
        }

        if (g_last_idx >= first_trailer_idx) {
    1248:	4a69      	ldr	r2, [pc, #420]	; (13f0 <swap_run+0x1e8>)
    124a:	6812      	ldr	r2, [r2, #0]
    124c:	429a      	cmp	r2, r3
    124e:	d308      	bcc.n	1262 <swap_run+0x5a>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1250:	2157      	movs	r1, #87	; 0x57
    1252:	4868      	ldr	r0, [pc, #416]	; (13f4 <swap_run+0x1ec>)
    1254:	f004 fe46 	bl	5ee4 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1258:	2301      	movs	r3, #1
    125a:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    125c:	b009      	add	sp, #36	; 0x24
    125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1262:	a906      	add	r1, sp, #24
    1264:	2002      	movs	r0, #2
    1266:	f000 fd7d 	bl	1d64 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    126a:	a907      	add	r1, sp, #28
    126c:	2006      	movs	r0, #6
    126e:	f000 fd79 	bl	1d64 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1272:	4621      	mov	r1, r4
    1274:	4628      	mov	r0, r5
    1276:	9a07      	ldr	r2, [sp, #28]
    1278:	f7ff ff7a 	bl	1170 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    127c:	7963      	ldrb	r3, [r4, #5]
    127e:	2b01      	cmp	r3, #1
    1280:	d108      	bne.n	1294 <swap_run+0x8c>
        idx = g_last_idx;
    1282:	4b5b      	ldr	r3, [pc, #364]	; (13f0 <swap_run+0x1e8>)
    BOOT_STATUS_ASSERT(rc == 0);
    1284:	f8df b170 	ldr.w	fp, [pc, #368]	; 13f8 <swap_run+0x1f0>
        idx = g_last_idx;
    1288:	681f      	ldr	r7, [r3, #0]
            if (idx <= (g_last_idx - bs->idx + 1)) {
    128a:	4b59      	ldr	r3, [pc, #356]	; (13f0 <swap_run+0x1e8>)
    128c:	681b      	ldr	r3, [r3, #0]
        while (idx > 0) {
    128e:	b9a7      	cbnz	r7, 12ba <swap_run+0xb2>
        bs->idx = BOOT_STATUS_IDX_0;
    1290:	2301      	movs	r3, #1
    1292:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1294:	f04f 0302 	mov.w	r3, #2
    idx = 1;
    1298:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    129a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 13f8 <swap_run+0x1f0>
    bs->op = BOOT_STATUS_OP_SWAP;
    129e:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    12a0:	4b53      	ldr	r3, [pc, #332]	; (13f0 <swap_run+0x1e8>)
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12a2:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= g_last_idx) {
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	429f      	cmp	r7, r3
    12aa:	d94a      	bls.n	1342 <swap_run+0x13a>
    flash_area_close(fap_pri);
    12ac:	4648      	mov	r0, r9
    12ae:	f004 fe26 	bl	5efe <flash_area_close>
    flash_area_close(fap_sec);
    12b2:	9807      	ldr	r0, [sp, #28]
    12b4:	f004 fe23 	bl	5efe <flash_area_close>
    12b8:	e7d0      	b.n	125c <swap_run+0x54>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    12ba:	6822      	ldr	r2, [r4, #0]
    12bc:	3301      	adds	r3, #1
    12be:	1a9b      	subs	r3, r3, r2
    12c0:	429f      	cmp	r7, r3
    12c2:	d83c      	bhi.n	133e <swap_run+0x136>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    12c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    12c6:	2a01      	cmp	r2, #1
	return fs->fs_off;
    12c8:	6819      	ldr	r1, [r3, #0]
    12ca:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    12ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    12d2:	f853 3c08 	ldr.w	r3, [r3, #-8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    12da:	eba0 0901 	sub.w	r9, r0, r1
    12de:	eba3 0a01 	sub.w	sl, r3, r1
    if (bs->idx == BOOT_STATUS_IDX_0) {
    12e2:	d112      	bne.n	130a <swap_run+0x102>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12e4:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12e6:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12e8:	2a02      	cmp	r2, #2
    12ea:	d00a      	beq.n	1302 <swap_run+0xfa>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12ec:	4641      	mov	r1, r8
    12ee:	4628      	mov	r0, r5
    12f0:	9303      	str	r3, [sp, #12]
    12f2:	f004 fc32 	bl	5b5a <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12f6:	4622      	mov	r2, r4
    12f8:	4641      	mov	r1, r8
    12fa:	4628      	mov	r0, r5
    12fc:	f004 fc63 	bl	5bc6 <swap_status_init>
    1300:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1302:	4619      	mov	r1, r3
    1304:	4628      	mov	r0, r5
    1306:	f004 fc28 	bl	5b5a <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    130a:	4632      	mov	r2, r6
    130c:	4649      	mov	r1, r9
    130e:	4640      	mov	r0, r8
    1310:	f004 fc21 	bl	5b56 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1314:	4653      	mov	r3, sl
    1316:	4642      	mov	r2, r8
    1318:	4641      	mov	r1, r8
    131a:	4628      	mov	r0, r5
    131c:	e9cd 9600 	strd	r9, r6, [sp]
    1320:	f7ff fc50 	bl	bc4 <boot_copy_region>
    rc = boot_write_status(state, bs);
    1324:	4621      	mov	r1, r4
    1326:	4628      	mov	r0, r5
    1328:	f004 fbe3 	bl	5af2 <boot_write_status>
    bs->idx++;
    132c:	6823      	ldr	r3, [r4, #0]
    132e:	3301      	adds	r3, #1
    1330:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    1332:	b120      	cbz	r0, 133e <swap_run+0x136>
    1334:	f8db 3000 	ldr.w	r3, [fp]
    1338:	3301      	adds	r3, #1
    133a:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    133e:	3f01      	subs	r7, #1
    1340:	e7a3      	b.n	128a <swap_run+0x82>
        if (idx >= bs->idx) {
    1342:	6823      	ldr	r3, [r4, #0]
    1344:	429f      	cmp	r7, r3
    1346:	d351      	bcc.n	13ec <swap_run+0x1e4>
    1348:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    134a:	00fb      	lsls	r3, r7, #3
    134c:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    1350:	3b08      	subs	r3, #8
    1352:	9104      	str	r1, [sp, #16]
    1354:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1356:	f8dd a01c 	ldr.w	sl, [sp, #28]
    135a:	9103      	str	r1, [sp, #12]
    135c:	6d29      	ldr	r1, [r5, #80]	; 0x50
    135e:	58c8      	ldr	r0, [r1, r3]
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    1366:	7921      	ldrb	r1, [r4, #4]
    1368:	2901      	cmp	r1, #1
    136a:	d13d      	bne.n	13e8 <swap_run+0x1e0>
    136c:	58d1      	ldr	r1, [r2, r3]
    136e:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1370:	4632      	mov	r2, r6
    1372:	1ac9      	subs	r1, r1, r3
    1374:	4648      	mov	r0, r9
    1376:	9105      	str	r1, [sp, #20]
    1378:	f004 fbed 	bl	5b56 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    137c:	9905      	ldr	r1, [sp, #20]
    137e:	465b      	mov	r3, fp
    1380:	464a      	mov	r2, r9
    1382:	9100      	str	r1, [sp, #0]
    1384:	4628      	mov	r0, r5
    1386:	4651      	mov	r1, sl
    1388:	9601      	str	r6, [sp, #4]
    138a:	f7ff fc1b 	bl	bc4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    138e:	4621      	mov	r1, r4
    1390:	4628      	mov	r0, r5
    1392:	f004 fbae 	bl	5af2 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1396:	f04f 0302 	mov.w	r3, #2
    139a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    139c:	b120      	cbz	r0, 13a8 <swap_run+0x1a0>
    139e:	f8d8 3000 	ldr.w	r3, [r8]
    13a2:	3301      	adds	r3, #1
    13a4:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    13a8:	4632      	mov	r2, r6
    13aa:	4659      	mov	r1, fp
    13ac:	4650      	mov	r0, sl
    13ae:	f004 fbd2 	bl	5b56 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    13b2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    13b6:	4649      	mov	r1, r9
    13b8:	1a9b      	subs	r3, r3, r2
    13ba:	4628      	mov	r0, r5
    13bc:	4652      	mov	r2, sl
    13be:	e9cd b600 	strd	fp, r6, [sp]
    13c2:	f7ff fbff 	bl	bc4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    13c6:	4621      	mov	r1, r4
    13c8:	4628      	mov	r0, r5
    13ca:	f004 fb92 	bl	5af2 <boot_write_status>
        bs->idx++;
    13ce:	6823      	ldr	r3, [r4, #0]
    13d0:	3301      	adds	r3, #1
    13d2:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    13d4:	f04f 0301 	mov.w	r3, #1
    13d8:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    13da:	b138      	cbz	r0, 13ec <swap_run+0x1e4>
    13dc:	f8d8 3000 	ldr.w	r3, [r8]
    13e0:	3301      	adds	r3, #1
    13e2:	f8c8 3000 	str.w	r3, [r8]
    13e6:	e001      	b.n	13ec <swap_run+0x1e4>
    if (bs->state == BOOT_STATUS_STATE_1) {
    13e8:	2902      	cmp	r1, #2
    13ea:	d0dd      	beq.n	13a8 <swap_run+0x1a0>
        idx++;
    13ec:	3701      	adds	r7, #1
    13ee:	e757      	b.n	12a0 <swap_run+0x98>
    13f0:	2000c504 	.word	0x2000c504
    13f4:	000090ac 	.word	0x000090ac
    13f8:	2000db80 	.word	0x2000db80

000013fc <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    13fc:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13fe:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1404:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1406:	4b1a      	ldr	r3, [pc, #104]	; (1470 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1408:	4629      	mov	r1, r5
    140a:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    140c:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1410:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1418:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    141a:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    141e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1422:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    1426:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    142a:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    142c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1430:	4810      	ldr	r0, [pc, #64]	; (1474 <nrf_cleanup_peripheral+0x78>)
    1432:	f005 f8bd 	bl	65b0 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1436:	2280      	movs	r2, #128	; 0x80
    1438:	4629      	mov	r1, r5
    143a:	480f      	ldr	r0, [pc, #60]	; (1478 <nrf_cleanup_peripheral+0x7c>)
    143c:	f005 f8b8 	bl	65b0 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1440:	4b0e      	ldr	r3, [pc, #56]	; (147c <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1442:	2280      	movs	r2, #128	; 0x80
    1444:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1448:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    144a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    144e:	480c      	ldr	r0, [pc, #48]	; (1480 <nrf_cleanup_peripheral+0x84>)
    1450:	f005 f8ae 	bl	65b0 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1454:	2280      	movs	r2, #128	; 0x80
    1456:	4629      	mov	r1, r5
    1458:	480a      	ldr	r0, [pc, #40]	; (1484 <nrf_cleanup_peripheral+0x88>)
    145a:	f005 f8a9 	bl	65b0 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <nrf_cleanup_peripheral+0x8c>)
    1460:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1464:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1468:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    146c:	bd38      	pop	{r3, r4, r5, pc}
    146e:	bf00      	nop
    1470:	50014000 	.word	0x50014000
    1474:	50008080 	.word	0x50008080
    1478:	50008180 	.word	0x50008180
    147c:	50009000 	.word	0x50009000
    1480:	50009080 	.word	0x50009080
    1484:	50009180 	.word	0x50009180
    1488:	50017000 	.word	0x50017000

0000148c <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1490:	4605      	mov	r5, r0
    1492:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1494:	b910      	cbnz	r0, 149c <base64_encode+0x10>
		*olen = 0;
    1496:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    149c:	2403      	movs	r4, #3
    149e:	fbb0 f4f4 	udiv	r4, r0, r4
    14a2:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    14a6:	42b8      	cmp	r0, r7
    14a8:	bf18      	it	ne
    14aa:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    14ac:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    14b0:	d305      	bcc.n	14be <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    14b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14b6:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    14b8:	f06f 000b 	mvn.w	r0, #11
    14bc:	e7ec      	b.n	1498 <base64_encode+0xc>
	n *= 4;
    14be:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    14c0:	3401      	adds	r4, #1
    14c2:	428c      	cmp	r4, r1
    14c4:	d800      	bhi.n	14c8 <base64_encode+0x3c>
    14c6:	b90d      	cbnz	r5, 14cc <base64_encode+0x40>
		*olen = n + 1;
    14c8:	6014      	str	r4, [r2, #0]
    14ca:	e7f5      	b.n	14b8 <base64_encode+0x2c>
	for (i = 0, p = dst; i < n; i += 3) {
    14cc:	462e      	mov	r6, r5
    14ce:	2400      	movs	r4, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14d0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1588 <base64_encode+0xfc>
	for (i = 0, p = dst; i < n; i += 3) {
    14d4:	42bc      	cmp	r4, r7
    14d6:	4631      	mov	r1, r6
    14d8:	469c      	mov	ip, r3
    14da:	f106 0604 	add.w	r6, r6, #4
    14de:	f103 0303 	add.w	r3, r3, #3
    14e2:	d329      	bcc.n	1538 <base64_encode+0xac>
	if (i < slen) {
    14e4:	4284      	cmp	r4, r0
    14e6:	d222      	bcs.n	152e <base64_encode+0xa2>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14e8:	3401      	adds	r4, #1
    14ea:	4284      	cmp	r4, r0
    14ec:	bf28      	it	cs
    14ee:	2300      	movcs	r3, #0
		C1 = *src++;
    14f0:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14f4:	4f24      	ldr	r7, [pc, #144]	; (1588 <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14f6:	bf38      	it	cc
    14f8:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14fc:	ea4f 0ca6 	mov.w	ip, r6, asr #2
    1500:	f817 c00c 	ldrb.w	ip, [r7, ip]
		if ((i + 1) < slen) {
    1504:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1506:	f881 c000 	strb.w	ip, [r1]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    150a:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = '=';
    150e:	bf2f      	iteee	cs
    1510:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1512:	009b      	lslcc	r3, r3, #2
    1514:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
    1518:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    151a:	0136      	lsls	r6, r6, #4
    151c:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    151e:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1520:	f006 0630 	and.w	r6, r6, #48	; 0x30
    1524:	f81c 6006 	ldrb.w	r6, [ip, r6]
		*p++ = '=';
    1528:	70cb      	strb	r3, [r1, #3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    152a:	704e      	strb	r6, [r1, #1]
		*p++ = '=';
    152c:	3104      	adds	r1, #4
	*p = 0U;
    152e:	2000      	movs	r0, #0
	*olen = p - dst;
    1530:	1b4d      	subs	r5, r1, r5
    1532:	6015      	str	r5, [r2, #0]
	*p = 0U;
    1534:	7008      	strb	r0, [r1, #0]
	return 0;
    1536:	e7af      	b.n	1498 <base64_encode+0xc>
		C1 = *src++;
    1538:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    153c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1540:	ea4f 09ac 	mov.w	r9, ip, asr #2
    1544:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1548:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		C3 = *src++;
    154c:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1550:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1554:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1558:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
    155c:	f819 c00c 	ldrb.w	ip, [r9, ip]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1560:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1562:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1566:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    156a:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
    156e:	f81c 1001 	ldrb.w	r1, [ip, r1]
		*p++ = base64_enc_map[C3 & 0x3F];
    1572:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1576:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    157a:	f81e 1008 	ldrb.w	r1, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    157e:	3403      	adds	r4, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    1580:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1584:	e7a6      	b.n	14d4 <base64_encode+0x48>
    1586:	bf00      	nop
    1588:	00009269 	.word	0x00009269

0000158c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    158c:	468c      	mov	ip, r1
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    158e:	2100      	movs	r1, #0
{
    1590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1594:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    1596:	460d      	mov	r5, r1
    1598:	4608      	mov	r0, r1
{
    159a:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    159c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16b8 <base64_decode+0x12c>
	for (i = n = j = 0U; i < slen; i++) {
    15a0:	42b5      	cmp	r5, r6
    15a2:	d30a      	bcc.n	15ba <base64_decode+0x2e>
    15a4:	462e      	mov	r6, r5
    15a6:	e004      	b.n	15b2 <base64_decode+0x26>
			++i;
    15a8:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    15aa:	42ae      	cmp	r6, r5
			++x;
    15ac:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    15b0:	d105      	bne.n	15be <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    15b2:	bb90      	cbnz	r0, 161a <base64_decode+0x8e>
		*olen = 0;
    15b4:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    15b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    15ba:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    15be:	5d5c      	ldrb	r4, [r3, r5]
    15c0:	2c20      	cmp	r4, #32
    15c2:	d0f1      	beq.n	15a8 <base64_decode+0x1c>
		if (i == slen) {
    15c4:	42ae      	cmp	r6, r5
    15c6:	d0f4      	beq.n	15b2 <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    15c8:	eba6 0905 	sub.w	r9, r6, r5
    15cc:	f1b9 0f01 	cmp.w	r9, #1
    15d0:	d013      	beq.n	15fa <base64_decode+0x6e>
    15d2:	2c0d      	cmp	r4, #13
    15d4:	d111      	bne.n	15fa <base64_decode+0x6e>
    15d6:	eb03 0905 	add.w	r9, r3, r5
    15da:	f899 9001 	ldrb.w	r9, [r9, #1]
    15de:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    15e2:	d018      	beq.n	1616 <base64_decode+0x8a>
		if (x != 0U) {
    15e4:	f1be 0f00 	cmp.w	lr, #0
    15e8:	d104      	bne.n	15f4 <base64_decode+0x68>
		if (src[i] == '=' && ++j > 2) {
    15ea:	2c3d      	cmp	r4, #61	; 0x3d
    15ec:	d107      	bne.n	15fe <base64_decode+0x72>
    15ee:	3101      	adds	r1, #1
    15f0:	2902      	cmp	r1, #2
    15f2:	d907      	bls.n	1604 <base64_decode+0x78>
			return -EINVAL;
    15f4:	f06f 0015 	mvn.w	r0, #21
    15f8:	e7dd      	b.n	15b6 <base64_decode+0x2a>
		if (src[i] == '\n') {
    15fa:	2c0a      	cmp	r4, #10
    15fc:	e7f1      	b.n	15e2 <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    15fe:	f014 0f80 	tst.w	r4, #128	; 0x80
    1602:	d1f7      	bne.n	15f4 <base64_decode+0x68>
    1604:	f818 4004 	ldrb.w	r4, [r8, r4]
    1608:	2c7f      	cmp	r4, #127	; 0x7f
    160a:	d0f3      	beq.n	15f4 <base64_decode+0x68>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    160c:	2c3f      	cmp	r4, #63	; 0x3f
    160e:	d801      	bhi.n	1614 <base64_decode+0x88>
    1610:	2900      	cmp	r1, #0
    1612:	d1ef      	bne.n	15f4 <base64_decode+0x68>
		n++;
    1614:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    1616:	3501      	adds	r5, #1
    1618:	e7c2      	b.n	15a0 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    161a:	f04f 0e06 	mov.w	lr, #6
    161e:	f000 0507 	and.w	r5, r0, #7
    1622:	08c4      	lsrs	r4, r0, #3
    1624:	fb0e f505 	mul.w	r5, lr, r5
    1628:	fb0e f404 	mul.w	r4, lr, r4
    162c:	3507      	adds	r5, #7
	n -= j;
    162e:	1a64      	subs	r4, r4, r1
    1630:	eb04 04d5 	add.w	r4, r4, r5, lsr #3
	if (dst == NULL || dlen < n) {
    1634:	b18f      	cbz	r7, 165a <base64_decode+0xce>
    1636:	4564      	cmp	r4, ip
    1638:	d80f      	bhi.n	165a <base64_decode+0xce>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    163a:	2400      	movs	r4, #0
    163c:	469c      	mov	ip, r3
    163e:	441e      	add	r6, r3
    1640:	2003      	movs	r0, #3
	if (dst == NULL || dlen < n) {
    1642:	463b      	mov	r3, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1644:	4621      	mov	r1, r4
		j -= (base64_dec_map[*src] == 64U);
    1646:	f8df e070 	ldr.w	lr, [pc, #112]	; 16b8 <base64_decode+0x12c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    164a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 16bc <base64_decode+0x130>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    164e:	4566      	cmp	r6, ip
    1650:	d107      	bne.n	1662 <base64_decode+0xd6>
	*olen = p - dst;
    1652:	1bdb      	subs	r3, r3, r7
	return 0;
    1654:	2000      	movs	r0, #0
	*olen = p - dst;
    1656:	6013      	str	r3, [r2, #0]
	return 0;
    1658:	e7ad      	b.n	15b6 <base64_decode+0x2a>
		return -ENOMEM;
    165a:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    165e:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    1660:	e7a9      	b.n	15b6 <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1662:	f81c 9b01 	ldrb.w	r9, [ip], #1
    1666:	f1a9 050a 	sub.w	r5, r9, #10
    166a:	b2ed      	uxtb	r5, r5
    166c:	2d16      	cmp	r5, #22
    166e:	d803      	bhi.n	1678 <base64_decode+0xec>
    1670:	fa28 f505 	lsr.w	r5, r8, r5
    1674:	07ed      	lsls	r5, r5, #31
    1676:	d4ea      	bmi.n	164e <base64_decode+0xc2>
		j -= (base64_dec_map[*src] == 64U);
    1678:	f81e 5009 	ldrb.w	r5, [lr, r9]
		if (++n == 4) {
    167c:	3101      	adds	r1, #1
		j -= (base64_dec_map[*src] == 64U);
    167e:	2d40      	cmp	r5, #64	; 0x40
    1680:	bf08      	it	eq
    1682:	3801      	subeq	r0, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1684:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		if (++n == 4) {
    1688:	2904      	cmp	r1, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    168a:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
		if (++n == 4) {
    168e:	d1de      	bne.n	164e <base64_decode+0xc2>
			if (j > 0) {
    1690:	b178      	cbz	r0, 16b2 <base64_decode+0x126>
				*p++ = (unsigned char)(x >> 16);
    1692:	0c21      	lsrs	r1, r4, #16
			if (j > 1) {
    1694:	2801      	cmp	r0, #1
				*p++ = (unsigned char)(x >> 16);
    1696:	7019      	strb	r1, [r3, #0]
			if (j > 1) {
    1698:	d102      	bne.n	16a0 <base64_decode+0x114>
				*p++ = (unsigned char)(x >> 16);
    169a:	3301      	adds	r3, #1
			n = 0;
    169c:	2100      	movs	r1, #0
    169e:	e7d6      	b.n	164e <base64_decode+0xc2>
			if (j > 2) {
    16a0:	2802      	cmp	r0, #2
				*p++ = (unsigned char)(x >> 8);
    16a2:	ea4f 2114 	mov.w	r1, r4, lsr #8
    16a6:	7059      	strb	r1, [r3, #1]
				*p++ = (unsigned char)(x);
    16a8:	bf16      	itet	ne
    16aa:	709c      	strbne	r4, [r3, #2]
				*p++ = (unsigned char)(x >> 8);
    16ac:	3302      	addeq	r3, #2
				*p++ = (unsigned char)(x);
    16ae:	3303      	addne	r3, #3
    16b0:	e7f4      	b.n	169c <base64_decode+0x110>
			n = 0;
    16b2:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16b4:	e7cb      	b.n	164e <base64_decode+0xc2>
    16b6:	bf00      	nop
    16b8:	000091e9 	.word	0x000091e9
    16bc:	00400009 	.word	0x00400009

000016c0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    16c0:	680b      	ldr	r3, [r1, #0]
    16c2:	3301      	adds	r3, #1
    16c4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    16c6:	4b01      	ldr	r3, [pc, #4]	; (16cc <char_out+0xc>)
    16c8:	681b      	ldr	r3, [r3, #0]
    16ca:	4718      	bx	r3
    16cc:	2000c508 	.word	0x2000c508

000016d0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    16d0:	b507      	push	{r0, r1, r2, lr}
    16d2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    16d4:	2100      	movs	r1, #0
{
    16d6:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    16d8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    16da:	4803      	ldr	r0, [pc, #12]	; (16e8 <vprintk+0x18>)
    16dc:	a901      	add	r1, sp, #4
    16de:	f000 f8e5 	bl	18ac <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    16e2:	b003      	add	sp, #12
    16e4:	f85d fb04 	ldr.w	pc, [sp], #4
    16e8:	000016c1 	.word	0x000016c1

000016ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    16ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16f0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    16f4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    16f6:	f019 0808 	ands.w	r8, r9, #8
{
    16fa:	4693      	mov	fp, r2
	if (processing) {
    16fc:	d00d      	beq.n	171a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    16fe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1700:	bf0c      	ite	eq
    1702:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1706:	f049 0920 	orrne.w	r9, r9, #32
    170a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    170e:	f38b 8811 	msr	BASEPRI, fp
    1712:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    171a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    171e:	2902      	cmp	r1, #2
    1720:	d107      	bne.n	1732 <process_event+0x46>
			evt = process_recheck(mgr);
    1722:	4620      	mov	r0, r4
    1724:	f004 fb32 	bl	5d8c <process_recheck>
		if (evt == EVT_NOP) {
    1728:	2800      	cmp	r0, #0
    172a:	d0f0      	beq.n	170e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    172c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1730:	d14e      	bne.n	17d0 <process_event+0xe4>
			res = mgr->last_res;
    1732:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1734:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1736:	2f00      	cmp	r7, #0
    1738:	da15      	bge.n	1766 <process_event+0x7a>
		*clients = mgr->clients;
    173a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    173c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1740:	e9c4 8800 	strd	r8, r8, [r4]
    1744:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1748:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    174a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    174c:	8b21      	ldrh	r1, [r4, #24]
    174e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1752:	45ca      	cmp	sl, r9
    1754:	d002      	beq.n	175c <process_event+0x70>
		if (do_monitors
    1756:	68a3      	ldr	r3, [r4, #8]
    1758:	2b00      	cmp	r3, #0
    175a:	d15a      	bne.n	1812 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    175c:	b90d      	cbnz	r5, 1762 <process_event+0x76>
		    || (transit != NULL)) {
    175e:	2e00      	cmp	r6, #0
    1760:	d071      	beq.n	1846 <process_event+0x15a>
    1762:	2300      	movs	r3, #0
    1764:	e056      	b.n	1814 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1766:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    176a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    176c:	2a01      	cmp	r2, #1
    176e:	d81e      	bhi.n	17ae <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1770:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1774:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1776:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1778:	b289      	uxth	r1, r1
    177a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    177e:	d10a      	bne.n	1796 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1780:	b13d      	cbz	r5, 1792 <process_event+0xa6>
    1782:	462a      	mov	r2, r5
    1784:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1786:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1788:	3301      	adds	r3, #1
    178a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    178c:	2a00      	cmp	r2, #0
    178e:	d1fa      	bne.n	1786 <process_event+0x9a>
    1790:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1792:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1796:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1798:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    179a:	f004 faf7 	bl	5d8c <process_recheck>
    179e:	4606      	mov	r6, r0
    17a0:	2800      	cmp	r0, #0
    17a2:	d0d3      	beq.n	174c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17a4:	8b23      	ldrh	r3, [r4, #24]
    17a6:	f043 0320 	orr.w	r3, r3, #32
    17aa:	8323      	strh	r3, [r4, #24]
    17ac:	e7cd      	b.n	174a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    17ae:	2b04      	cmp	r3, #4
    17b0:	d10c      	bne.n	17cc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17b2:	f021 0107 	bic.w	r1, r1, #7
    17b6:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    17b8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    17ba:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    17bc:	f004 fae6 	bl	5d8c <process_recheck>
    17c0:	4605      	mov	r5, r0
    17c2:	2800      	cmp	r0, #0
    17c4:	d0c1      	beq.n	174a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17c6:	f041 0120 	orr.w	r1, r1, #32
    17ca:	8321      	strh	r1, [r4, #24]
    17cc:	2500      	movs	r5, #0
    17ce:	e7bc      	b.n	174a <process_event+0x5e>
		} else if (evt == EVT_START) {
    17d0:	2803      	cmp	r0, #3
    17d2:	d109      	bne.n	17e8 <process_event+0xfc>
			transit = mgr->transitions->start;
    17d4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    17da:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17dc:	f043 0306 	orr.w	r3, r3, #6
}
    17e0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    17e2:	8323      	strh	r3, [r4, #24]
		res = 0;
    17e4:	462f      	mov	r7, r5
    17e6:	e7b1      	b.n	174c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    17e8:	2804      	cmp	r0, #4
    17ea:	d106      	bne.n	17fa <process_event+0x10e>
			transit = mgr->transitions->stop;
    17ec:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ee:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    17f2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17f4:	f043 0304 	orr.w	r3, r3, #4
    17f8:	e7f2      	b.n	17e0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    17fa:	2805      	cmp	r0, #5
    17fc:	d106      	bne.n	180c <process_event+0x120>
			transit = mgr->transitions->reset;
    17fe:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1800:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1804:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1806:	f043 0305 	orr.w	r3, r3, #5
    180a:	e7e9      	b.n	17e0 <process_event+0xf4>
    180c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    180e:	462e      	mov	r6, r5
    1810:	e7e8      	b.n	17e4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1812:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1814:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1818:	8321      	strh	r1, [r4, #24]
    181a:	f38b 8811 	msr	BASEPRI, fp
    181e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1822:	b9fb      	cbnz	r3, 1864 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1824:	bb85      	cbnz	r5, 1888 <process_event+0x19c>
			if (transit != NULL) {
    1826:	b116      	cbz	r6, 182e <process_event+0x142>
				transit(mgr, transition_complete);
    1828:	4620      	mov	r0, r4
    182a:	491f      	ldr	r1, [pc, #124]	; (18a8 <process_event+0x1bc>)
    182c:	47b0      	blx	r6
	__asm__ volatile(
    182e:	f04f 0320 	mov.w	r3, #32
    1832:	f3ef 8b11 	mrs	fp, BASEPRI
    1836:	f383 8812 	msr	BASEPRI_MAX, r3
    183a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    183e:	8b23      	ldrh	r3, [r4, #24]
    1840:	f023 0308 	bic.w	r3, r3, #8
    1844:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1846:	8b23      	ldrh	r3, [r4, #24]
    1848:	06da      	lsls	r2, r3, #27
    184a:	d525      	bpl.n	1898 <process_event+0x1ac>
			evt = EVT_COMPLETE;
    184c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    184e:	f023 0310 	bic.w	r3, r3, #16
    1852:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1854:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1858:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    185c:	2900      	cmp	r1, #0
    185e:	f47f af5e 	bne.w	171e <process_event+0x32>
out:
    1862:	e754      	b.n	170e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1864:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1866:	2900      	cmp	r1, #0
    1868:	d0dc      	beq.n	1824 <process_event+0x138>
	return node->next;
    186a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    186e:	463b      	mov	r3, r7
    1870:	4652      	mov	r2, sl
    1872:	4620      	mov	r0, r4
    1874:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1878:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    187a:	f1b9 0f00 	cmp.w	r9, #0
    187e:	d0d1      	beq.n	1824 <process_event+0x138>
    1880:	4649      	mov	r1, r9
    1882:	f8d9 9000 	ldr.w	r9, [r9]
    1886:	e7f2      	b.n	186e <process_event+0x182>
    1888:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    188a:	463b      	mov	r3, r7
    188c:	4652      	mov	r2, sl
    188e:	4620      	mov	r0, r4
    1890:	682d      	ldr	r5, [r5, #0]
    1892:	f004 fa97 	bl	5dc4 <notify_one>
    1896:	e7c5      	b.n	1824 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1898:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    189c:	bf1e      	ittt	ne
    189e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    18a2:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18a4:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    18a6:	e7d5      	b.n	1854 <process_event+0x168>
    18a8:	00005df1 	.word	0x00005df1

000018ac <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    18ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18b0:	468a      	mov	sl, r1
	size_t count = 0;
    18b2:	f04f 0900 	mov.w	r9, #0
{
    18b6:	b08f      	sub	sp, #60	; 0x3c
    18b8:	461e      	mov	r6, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18ba:	1e53      	subs	r3, r2, #1
{
    18bc:	9001      	str	r0, [sp, #4]
	fmt--;
    18be:	9302      	str	r3, [sp, #8]

start:
	while (*++fmt != '%') {
    18c0:	9b02      	ldr	r3, [sp, #8]
    18c2:	7858      	ldrb	r0, [r3, #1]
    18c4:	1c5c      	adds	r4, r3, #1
    18c6:	2825      	cmp	r0, #37	; 0x25
    18c8:	d121      	bne.n	190e <cbvprintf+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    18ca:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    18ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    18d2:	4618      	mov	r0, r3
	min_width = -1;
    18d4:	463d      	mov	r5, r7
	length_mod = 0;
    18d6:	4663      	mov	r3, ip
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    18d8:	240a      	movs	r4, #10
	for (fmt++ ; ; fmt++) {
    18da:	3002      	adds	r0, #2
	padding_mode = 0;
    18dc:	f8cd c00c 	str.w	ip, [sp, #12]
		switch (*fmt) {
    18e0:	7802      	ldrb	r2, [r0, #0]
    18e2:	9002      	str	r0, [sp, #8]
    18e4:	2a39      	cmp	r2, #57	; 0x39
    18e6:	f100 0001 	add.w	r0, r0, #1
    18ea:	d859      	bhi.n	19a0 <cbvprintf+0xf4>
    18ec:	2a1f      	cmp	r2, #31
    18ee:	d818      	bhi.n	1922 <cbvprintf+0x76>
    18f0:	2a00      	cmp	r2, #0
    18f2:	f000 81f3 	beq.w	1cdc <cbvprintf+0x430>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    18f6:	4651      	mov	r1, sl
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	2025      	movs	r0, #37	; 0x25
    18fc:	4798      	blx	r3
			OUTC(*fmt);
    18fe:	9b02      	ldr	r3, [sp, #8]
    1900:	4651      	mov	r1, sl
    1902:	7818      	ldrb	r0, [r3, #0]
    1904:	9b01      	ldr	r3, [sp, #4]
    1906:	4798      	blx	r3
    1908:	f109 0902 	add.w	r9, r9, #2
			goto start;
    190c:	e7d8      	b.n	18c0 <cbvprintf+0x14>
		if (*fmt == '\0') {
    190e:	2800      	cmp	r0, #0
    1910:	f000 81e4 	beq.w	1cdc <cbvprintf+0x430>
		OUTC(*fmt);
    1914:	4651      	mov	r1, sl
    1916:	9b01      	ldr	r3, [sp, #4]
    1918:	4798      	blx	r3
    191a:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    191e:	9402      	str	r4, [sp, #8]
    1920:	e7ce      	b.n	18c0 <cbvprintf+0x14>
		switch (*fmt) {
    1922:	f1a2 0120 	sub.w	r1, r2, #32
    1926:	2919      	cmp	r1, #25
    1928:	d8e5      	bhi.n	18f6 <cbvprintf+0x4a>
    192a:	f20f 0e08 	addw	lr, pc, #8
    192e:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
    1932:	bf00      	nop
    1934:	0000199d 	.word	0x0000199d
    1938:	000018f7 	.word	0x000018f7
    193c:	000018f7 	.word	0x000018f7
    1940:	0000199d 	.word	0x0000199d
    1944:	000018f7 	.word	0x000018f7
    1948:	00001a21 	.word	0x00001a21
    194c:	000018f7 	.word	0x000018f7
    1950:	000018f7 	.word	0x000018f7
    1954:	000018f7 	.word	0x000018f7
    1958:	000018f7 	.word	0x000018f7
    195c:	00001a63 	.word	0x00001a63
    1960:	0000199d 	.word	0x0000199d
    1964:	000018f7 	.word	0x000018f7
    1968:	00001a75 	.word	0x00001a75
    196c:	00001a2f 	.word	0x00001a2f
    1970:	000018f7 	.word	0x000018f7
    1974:	00001a3b 	.word	0x00001a3b
    1978:	00001a57 	.word	0x00001a57
    197c:	00001a57 	.word	0x00001a57
    1980:	00001a57 	.word	0x00001a57
    1984:	00001a57 	.word	0x00001a57
    1988:	00001a57 	.word	0x00001a57
    198c:	00001a57 	.word	0x00001a57
    1990:	00001a57 	.word	0x00001a57
    1994:	00001a57 	.word	0x00001a57
    1998:	00001a57 	.word	0x00001a57
    199c:	4694      	mov	ip, r2
    199e:	e79f      	b.n	18e0 <cbvprintf+0x34>
    19a0:	2a58      	cmp	r2, #88	; 0x58
    19a2:	f000 8117 	beq.w	1bd4 <cbvprintf+0x328>
    19a6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
    19aa:	fa5f fe81 	uxtb.w	lr, r1
    19ae:	f1be 0f17 	cmp.w	lr, #23
    19b2:	d8a0      	bhi.n	18f6 <cbvprintf+0x4a>
    19b4:	2917      	cmp	r1, #23
    19b6:	d89e      	bhi.n	18f6 <cbvprintf+0x4a>
    19b8:	f20f 0e04 	addw	lr, pc, #4
    19bc:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
    19c0:	00001c33 	.word	0x00001c33
    19c4:	00001a9b 	.word	0x00001a9b
    19c8:	000018f7 	.word	0x000018f7
    19cc:	000018f7 	.word	0x000018f7
    19d0:	000018f7 	.word	0x000018f7
    19d4:	00001a7b 	.word	0x00001a7b
    19d8:	00001a9b 	.word	0x00001a9b
    19dc:	000018f7 	.word	0x000018f7
    19e0:	000018f7 	.word	0x000018f7
    19e4:	00001a7b 	.word	0x00001a7b
    19e8:	000018f7 	.word	0x000018f7
    19ec:	000018f7 	.word	0x000018f7
    19f0:	000018f7 	.word	0x000018f7
    19f4:	00001b81 	.word	0x00001b81
    19f8:	000018f7 	.word	0x000018f7
    19fc:	000018f7 	.word	0x000018f7
    1a00:	00001c15 	.word	0x00001c15
    1a04:	000018f7 	.word	0x000018f7
    1a08:	00001a9b 	.word	0x00001a9b
    1a0c:	000018f7 	.word	0x000018f7
    1a10:	000018f7 	.word	0x000018f7
    1a14:	00001b81 	.word	0x00001b81
    1a18:	000018f7 	.word	0x000018f7
    1a1c:	00001a7b 	.word	0x00001a7b
			OUTC('%');
    1a20:	4651      	mov	r1, sl
    1a22:	2025      	movs	r0, #37	; 0x25
    1a24:	9b01      	ldr	r3, [sp, #4]
    1a26:	4798      	blx	r3
    1a28:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1a2c:	e748      	b.n	18c0 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a2e:	9a03      	ldr	r2, [sp, #12]
			precision = 0;
    1a30:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1a32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a36:	9203      	str	r2, [sp, #12]
			continue;
    1a38:	e752      	b.n	18e0 <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a3a:	2d00      	cmp	r5, #0
    1a3c:	da0b      	bge.n	1a56 <cbvprintf+0x1aa>
    1a3e:	2f00      	cmp	r7, #0
    1a40:	da0b      	bge.n	1a5a <cbvprintf+0x1ae>
    1a42:	9903      	ldr	r1, [sp, #12]
    1a44:	2900      	cmp	r1, #0
    1a46:	f000 8141 	beq.w	1ccc <cbvprintf+0x420>
				min_width = 10 * min_width + *fmt - '0';
    1a4a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    1a4e:	fb04 2505 	mla	r5, r4, r5, r2
    1a52:	3d30      	subs	r5, #48	; 0x30
    1a54:	e744      	b.n	18e0 <cbvprintf+0x34>
			if (precision >= 0) {
    1a56:	2f00      	cmp	r7, #0
    1a58:	dbf7      	blt.n	1a4a <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
    1a5a:	fb04 2707 	mla	r7, r4, r7, r2
    1a5e:	3f30      	subs	r7, #48	; 0x30
    1a60:	e73e      	b.n	18e0 <cbvprintf+0x34>
			if (precision >= 0) {
    1a62:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
    1a64:	f856 2b04 	ldr.w	r2, [r6], #4
			if (precision >= 0) {
    1a68:	f280 8132 	bge.w	1cd0 <cbvprintf+0x424>
				if (min_width < 0) {
    1a6c:	2a00      	cmp	r2, #0
    1a6e:	f280 8131 	bge.w	1cd4 <cbvprintf+0x428>
					min_width = -min_width;
    1a72:	4255      	negs	r5, r2
		switch (*fmt) {
    1a74:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1a76:	9203      	str	r2, [sp, #12]
    1a78:	e732      	b.n	18e0 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    1a7a:	2a68      	cmp	r2, #104	; 0x68
    1a7c:	d103      	bne.n	1a86 <cbvprintf+0x1da>
    1a7e:	2b68      	cmp	r3, #104	; 0x68
    1a80:	d106      	bne.n	1a90 <cbvprintf+0x1e4>
				length_mod = 'H';
    1a82:	2348      	movs	r3, #72	; 0x48
    1a84:	e72c      	b.n	18e0 <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1a86:	2a6c      	cmp	r2, #108	; 0x6c
    1a88:	d102      	bne.n	1a90 <cbvprintf+0x1e4>
    1a8a:	2b6c      	cmp	r3, #108	; 0x6c
    1a8c:	f000 8124 	beq.w	1cd8 <cbvprintf+0x42c>
			} else if (length_mod == '\0') {
    1a90:	2b00      	cmp	r3, #0
    1a92:	f47f af30 	bne.w	18f6 <cbvprintf+0x4a>
    1a96:	4613      	mov	r3, r2
		switch (*fmt) {
    1a98:	e722      	b.n	18e0 <cbvprintf+0x34>
			if (length_mod == 'z') {
    1a9a:	2b7a      	cmp	r3, #122	; 0x7a
    1a9c:	d106      	bne.n	1aac <cbvprintf+0x200>
			} else if (*fmt == 'u') {
    1a9e:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    1aa0:	f856 4b04 	ldr.w	r4, [r6], #4
			} else if (*fmt == 'u') {
    1aa4:	d161      	bne.n	1b6a <cbvprintf+0x2be>
				d = va_arg(ap, unsigned int);
    1aa6:	f04f 0800 	mov.w	r8, #0
    1aaa:	e00d      	b.n	1ac8 <cbvprintf+0x21c>
			} else if (length_mod == 'l') {
    1aac:	2b6c      	cmp	r3, #108	; 0x6c
    1aae:	d0f6      	beq.n	1a9e <cbvprintf+0x1f2>
			} else if (length_mod == 'L') {
    1ab0:	2b4c      	cmp	r3, #76	; 0x4c
    1ab2:	d1f4      	bne.n	1a9e <cbvprintf+0x1f2>
					unsigned long long llu =
    1ab4:	3607      	adds	r6, #7
    1ab6:	f026 0307 	bic.w	r3, r6, #7
    1aba:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    1abc:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    1abe:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    1ac2:	d107      	bne.n	1ad4 <cbvprintf+0x228>
					unsigned long long llu =
    1ac4:	e9d3 4800 	ldrd	r4, r8, [r3]
			} else if (special == ' ') {
    1ac8:	f1bc 0f20 	cmp.w	ip, #32
    1acc:	d150      	bne.n	1b70 <cbvprintf+0x2c4>
				prefix = " ";
    1ace:	4b85      	ldr	r3, [pc, #532]	; (1ce4 <cbvprintf+0x438>)
				min_width--;
    1ad0:	3d01      	subs	r5, #1
    1ad2:	e009      	b.n	1ae8 <cbvprintf+0x23c>
					d = (int_value_type) lld;
    1ad4:	4604      	mov	r4, r0
    1ad6:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1ad8:	f1b8 0f00 	cmp.w	r8, #0
    1adc:	daf4      	bge.n	1ac8 <cbvprintf+0x21c>
				d = -d;
    1ade:	4264      	negs	r4, r4
				prefix = "-";
    1ae0:	4b81      	ldr	r3, [pc, #516]	; (1ce8 <cbvprintf+0x43c>)
				d = -d;
    1ae2:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    1ae6:	3d01      	subs	r5, #1
	int i = 0;
    1ae8:	f04f 0b00 	mov.w	fp, #0
	prefix = "";
    1aec:	9300      	str	r3, [sp, #0]
	int i = 0;
    1aee:	ab0d      	add	r3, sp, #52	; 0x34
    1af0:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
    1af2:	4620      	mov	r0, r4
    1af4:	4641      	mov	r1, r8
    1af6:	220a      	movs	r2, #10
    1af8:	2300      	movs	r3, #0
    1afa:	f8cd b010 	str.w	fp, [sp, #16]
    1afe:	f7fe fb21 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1b02:	9b05      	ldr	r3, [sp, #20]
    1b04:	3230      	adds	r2, #48	; 0x30
    1b06:	f803 2901 	strb.w	r2, [r3], #-1
    1b0a:	e9cd 3405 	strd	r3, r4, [sp, #20]
		num /= base;
    1b0e:	4620      	mov	r0, r4
    1b10:	2300      	movs	r3, #0
    1b12:	4641      	mov	r1, r8
    1b14:	220a      	movs	r2, #10
    1b16:	f8cd 801c 	str.w	r8, [sp, #28]
    1b1a:	f7fe fb13 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1b1e:	9b06      	ldr	r3, [sp, #24]
		num /= base;
    1b20:	4604      	mov	r4, r0
	} while (num);
    1b22:	2b0a      	cmp	r3, #10
    1b24:	9b07      	ldr	r3, [sp, #28]
		num /= base;
    1b26:	4688      	mov	r8, r1
	} while (num);
    1b28:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1b2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	} while (num);
    1b30:	d2df      	bcs.n	1af2 <cbvprintf+0x246>
	return -i;
    1b32:	9b04      	ldr	r3, [sp, #16]
    1b34:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b38:	3338      	adds	r3, #56	; 0x38
			data = buf + sizeof(buf) - data_len;
    1b3a:	eb0d 0403 	add.w	r4, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b3e:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1b40:	f1a4 0404 	sub.w	r4, r4, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b44:	da04      	bge.n	1b50 <cbvprintf+0x2a4>
    1b46:	9b03      	ldr	r3, [sp, #12]
    1b48:	f013 0f01 	tst.w	r3, #1
    1b4c:	bf18      	it	ne
    1b4e:	462f      	movne	r7, r5
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1b50:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    1b52:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    1b56:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    1b5a:	bfd4      	ite	le
    1b5c:	eba5 050b 	suble.w	r5, r5, fp
			min_width -= precision;
    1b60:	1bed      	subgt	r5, r5, r7
		if (!(padding_mode & PAD_TAIL)) {
    1b62:	079b      	lsls	r3, r3, #30
    1b64:	d47c      	bmi.n	1c60 <cbvprintf+0x3b4>
    1b66:	462f      	mov	r7, r5
    1b68:	e073      	b.n	1c52 <cbvprintf+0x3a6>
				d = va_arg(ap, int);
    1b6a:	ea4f 78e4 	mov.w	r8, r4, asr #31
    1b6e:	e7b3      	b.n	1ad8 <cbvprintf+0x22c>
			} else if (special == '+') {
    1b70:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    1b74:	bf0a      	itet	eq
    1b76:	4b5d      	ldreq	r3, [pc, #372]	; (1cec <cbvprintf+0x440>)
	prefix = "";
    1b78:	4b5d      	ldrne	r3, [pc, #372]	; (1cf0 <cbvprintf+0x444>)
				min_width--;
    1b7a:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
    1b7e:	e7b3      	b.n	1ae8 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    1b80:	2a70      	cmp	r2, #112	; 0x70
    1b82:	d127      	bne.n	1bd4 <cbvprintf+0x328>
				x = (uintptr_t)va_arg(ap, void *);
    1b84:	f856 1b04 	ldr.w	r1, [r6], #4
    1b88:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1b8a:	2900      	cmp	r1, #0
    1b8c:	d059      	beq.n	1c42 <cbvprintf+0x396>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1b8e:	4859      	ldr	r0, [pc, #356]	; (1cf4 <cbvprintf+0x448>)
    1b90:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    1b92:	3d02      	subs	r5, #2
	int i = 0;
    1b94:	2400      	movs	r4, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1b96:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1b9a:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    1b9e:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    1ba2:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    1ba6:	2a09      	cmp	r2, #9
			c += alpha;
    1ba8:	bf88      	it	hi
    1baa:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    1bac:	3230      	adds	r2, #48	; 0x30
    1bae:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    1bb2:	2910      	cmp	r1, #16
		num /= base;
    1bb4:	ea4f 1211 	mov.w	r2, r1, lsr #4
    1bb8:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    1bbc:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1bc0:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1bc4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
	} while (num);
    1bc8:	d220      	bcs.n	1c0c <cbvprintf+0x360>
	return -i;
    1bca:	f1c4 0b01 	rsb	fp, r4, #1
			data = buf + sizeof(buf) - data_len;
    1bce:	f104 0338 	add.w	r3, r4, #56	; 0x38
    1bd2:	e7b2      	b.n	1b3a <cbvprintf+0x28e>
			} else if (length_mod == 'l') {
    1bd4:	2b6c      	cmp	r3, #108	; 0x6c
    1bd6:	d103      	bne.n	1be0 <cbvprintf+0x334>
				x = va_arg(ap, unsigned int);
    1bd8:	2300      	movs	r3, #0
    1bda:	f856 1b04 	ldr.w	r1, [r6], #4
    1bde:	e008      	b.n	1bf2 <cbvprintf+0x346>
			} else if (length_mod == 'L') {
    1be0:	2b4c      	cmp	r3, #76	; 0x4c
    1be2:	d1f9      	bne.n	1bd8 <cbvprintf+0x32c>
				unsigned long long llx =
    1be4:	3607      	adds	r6, #7
    1be6:	f026 0307 	bic.w	r3, r6, #7
    1bea:	461e      	mov	r6, r3
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    1bf2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1bf6:	d106      	bne.n	1c06 <cbvprintf+0x35a>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bf8:	4c3f      	ldr	r4, [pc, #252]	; (1cf8 <cbvprintf+0x44c>)
    1bfa:	f012 0f20 	tst.w	r2, #32
    1bfe:	483d      	ldr	r0, [pc, #244]	; (1cf4 <cbvprintf+0x448>)
    1c00:	bf08      	it	eq
    1c02:	4620      	moveq	r0, r4
    1c04:	e7c4      	b.n	1b90 <cbvprintf+0x2e4>
	prefix = "";
    1c06:	483a      	ldr	r0, [pc, #232]	; (1cf0 <cbvprintf+0x444>)
    1c08:	9000      	str	r0, [sp, #0]
    1c0a:	e7c3      	b.n	1b94 <cbvprintf+0x2e8>
		buftop[--i] = c + '0';
    1c0c:	4664      	mov	r4, ip
		num /= base;
    1c0e:	4611      	mov	r1, r2
    1c10:	4603      	mov	r3, r0
    1c12:	e7c6      	b.n	1ba2 <cbvprintf+0x2f6>
			data = va_arg(ap, char *);
    1c14:	f856 4b04 	ldr.w	r4, [r6], #4
			data_len = strlen(data);
    1c18:	4620      	mov	r0, r4
    1c1a:	f004 fc82 	bl	6522 <strlen>
			if (precision >= 0 && data_len > precision) {
    1c1e:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    1c20:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1c22:	db02      	blt.n	1c2a <cbvprintf+0x37e>
    1c24:	42b8      	cmp	r0, r7
    1c26:	bfa8      	it	ge
    1c28:	46bb      	movge	fp, r7
    1c2a:	4b31      	ldr	r3, [pc, #196]	; (1cf0 <cbvprintf+0x444>)
    1c2c:	2700      	movs	r7, #0
    1c2e:	9300      	str	r3, [sp, #0]
    1c30:	e78e      	b.n	1b50 <cbvprintf+0x2a4>
			buf[0] = c;
    1c32:	f856 3b04 	ldr.w	r3, [r6], #4
			data_len = 1;
    1c36:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1c3a:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1c3e:	ac08      	add	r4, sp, #32
    1c40:	e7f3      	b.n	1c2a <cbvprintf+0x37e>
					data_len = 5;
    1c42:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1c46:	4c2d      	ldr	r4, [pc, #180]	; (1cfc <cbvprintf+0x450>)
    1c48:	e7ef      	b.n	1c2a <cbvprintf+0x37e>
			while (--min_width >= 0) {
				OUTC(' ');
    1c4a:	4651      	mov	r1, sl
    1c4c:	2020      	movs	r0, #32
    1c4e:	9b01      	ldr	r3, [sp, #4]
    1c50:	4798      	blx	r3
			while (--min_width >= 0) {
    1c52:	3f01      	subs	r7, #1
    1c54:	d5f9      	bpl.n	1c4a <cbvprintf+0x39e>
    1c56:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    1c5a:	3d01      	subs	r5, #1
    1c5c:	4499      	add	r9, r3
    1c5e:	1aed      	subs	r5, r5, r3
    1c60:	9b00      	ldr	r3, [sp, #0]
    1c62:	eba9 0903 	sub.w	r9, r9, r3
    1c66:	e004      	b.n	1c72 <cbvprintf+0x3c6>
    1c68:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1c6a:	4651      	mov	r1, sl
    1c6c:	9b01      	ldr	r3, [sp, #4]
    1c6e:	4798      	blx	r3
    1c70:	9b00      	ldr	r3, [sp, #0]
    1c72:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    1c76:	f813 0b01 	ldrb.w	r0, [r3], #1
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d1f4      	bne.n	1c68 <cbvprintf+0x3bc>
		precision -= data_len;
    1c7e:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    1c80:	f1b9 0901 	subs.w	r9, r9, #1
    1c84:	d512      	bpl.n	1cac <cbvprintf+0x400>
    1c86:	46d9      	mov	r9, fp
    1c88:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
    1c8c:	f1b9 0901 	subs.w	r9, r9, #1
    1c90:	d511      	bpl.n	1cb6 <cbvprintf+0x40a>
    1c92:	f1bb 0f00 	cmp.w	fp, #0
    1c96:	bfa8      	it	ge
    1c98:	44d8      	addge	r8, fp
    1c9a:	462c      	mov	r4, r5
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1c9c:	3c01      	subs	r4, #1
    1c9e:	d510      	bpl.n	1cc2 <cbvprintf+0x416>
    1ca0:	2d00      	cmp	r5, #0
    1ca2:	bfa8      	it	ge
    1ca4:	44a8      	addge	r8, r5
    1ca6:	eb08 0907 	add.w	r9, r8, r7
    1caa:	e609      	b.n	18c0 <cbvprintf+0x14>
			OUTC('0');
    1cac:	4651      	mov	r1, sl
    1cae:	9b01      	ldr	r3, [sp, #4]
    1cb0:	2030      	movs	r0, #48	; 0x30
    1cb2:	4798      	blx	r3
    1cb4:	e7e4      	b.n	1c80 <cbvprintf+0x3d4>
			OUTC(*data++);
    1cb6:	4651      	mov	r1, sl
    1cb8:	f814 0b01 	ldrb.w	r0, [r4], #1
    1cbc:	9b01      	ldr	r3, [sp, #4]
    1cbe:	4798      	blx	r3
    1cc0:	e7e4      	b.n	1c8c <cbvprintf+0x3e0>
			OUTC(' ');
    1cc2:	4651      	mov	r1, sl
    1cc4:	9b01      	ldr	r3, [sp, #4]
    1cc6:	2020      	movs	r0, #32
    1cc8:	4798      	blx	r3
    1cca:	e7e7      	b.n	1c9c <cbvprintf+0x3f0>
				padding_mode = PAD_ZERO;
    1ccc:	2201      	movs	r2, #1
    1cce:	e6d2      	b.n	1a76 <cbvprintf+0x1ca>
				precision = va_arg(ap, int);
    1cd0:	4617      	mov	r7, r2
    1cd2:	e605      	b.n	18e0 <cbvprintf+0x34>
    1cd4:	4615      	mov	r5, r2
    1cd6:	e603      	b.n	18e0 <cbvprintf+0x34>
				length_mod = 'L';
    1cd8:	234c      	movs	r3, #76	; 0x4c
    1cda:	e601      	b.n	18e0 <cbvprintf+0x34>
		}

		goto start;
	}
}
    1cdc:	4648      	mov	r0, r9
    1cde:	b00f      	add	sp, #60	; 0x3c
    1ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ce4:	000097cb 	.word	0x000097cb
    1ce8:	000092a9 	.word	0x000092a9
    1cec:	000092ab 	.word	0x000092ab
    1cf0:	00009b65 	.word	0x00009b65
    1cf4:	000092b0 	.word	0x000092b0
    1cf8:	000092ad 	.word	0x000092ad
    1cfc:	000092b3 	.word	0x000092b3

00001d00 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d00:	b508      	push	{r3, lr}
    1d02:	f04f 0220 	mov.w	r2, #32
    1d06:	f3ef 8311 	mrs	r3, BASEPRI
    1d0a:	f382 8812 	msr	BASEPRI_MAX, r2
    1d0e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d12:	f001 f889 	bl	2e28 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d16:	4803      	ldr	r0, [pc, #12]	; (1d24 <sys_reboot+0x24>)
    1d18:	f004 f82b 	bl	5d72 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d1c:	f000 fd8c 	bl	2838 <arch_cpu_idle>
    1d20:	e7fc      	b.n	1d1c <sys_reboot+0x1c>
    1d22:	bf00      	nop
    1d24:	000092b9 	.word	0x000092b9

00001d28 <nordicsemi_nrf91_init>:
    1d28:	f04f 0220 	mov.w	r2, #32
    1d2c:	f3ef 8311 	mrs	r3, BASEPRI
    1d30:	f382 8812 	msr	BASEPRI_MAX, r2
    1d34:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d38:	2101      	movs	r1, #1
    1d3a:	4a04      	ldr	r2, [pc, #16]	; (1d4c <nordicsemi_nrf91_init+0x24>)
    1d3c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1d40:	f383 8811 	msr	BASEPRI, r3
    1d44:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d48:	2000      	movs	r0, #0
    1d4a:	4770      	bx	lr
    1d4c:	50039000 	.word	0x50039000

00001d50 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d50:	b120      	cbz	r0, 1d5c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1d52:	4b03      	ldr	r3, [pc, #12]	; (1d60 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1d54:	0180      	lsls	r0, r0, #6
    1d56:	f043 0301 	orr.w	r3, r3, #1
    1d5a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop
    1d60:	00008930 	.word	0x00008930

00001d64 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1d64:	4b0c      	ldr	r3, [pc, #48]	; (1d98 <flash_area_open+0x34>)
{
    1d66:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	b173      	cbz	r3, 1d8a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1d6c:	4a0b      	ldr	r2, [pc, #44]	; (1d9c <flash_area_open+0x38>)
    1d6e:	6815      	ldr	r5, [r2, #0]
    1d70:	2200      	movs	r2, #0
    1d72:	42aa      	cmp	r2, r5
    1d74:	db02      	blt.n	1d7c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1d76:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    1d7a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1d7c:	461c      	mov	r4, r3
    1d7e:	f813 6b10 	ldrb.w	r6, [r3], #16
    1d82:	4286      	cmp	r6, r0
    1d84:	d004      	beq.n	1d90 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    1d86:	3201      	adds	r2, #1
    1d88:	e7f3      	b.n	1d72 <flash_area_open+0xe>
		return -EACCES;
    1d8a:	f06f 000c 	mvn.w	r0, #12
    1d8e:	e7f4      	b.n	1d7a <flash_area_open+0x16>
	return 0;
    1d90:	2000      	movs	r0, #0
	*fap = area;
    1d92:	600c      	str	r4, [r1, #0]
	return 0;
    1d94:	e7f1      	b.n	1d7a <flash_area_open+0x16>
    1d96:	bf00      	nop
    1d98:	2000c50c 	.word	0x2000c50c
    1d9c:	000089f0 	.word	0x000089f0

00001da0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	b088      	sub	sp, #32
    1da4:	4605      	mov	r5, r0
    1da6:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1da8:	b2c0      	uxtb	r0, r0
    1daa:	4669      	mov	r1, sp
{
    1dac:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1dae:	f7ff ffd9 	bl	1d64 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1db2:	2800      	cmp	r0, #0
    1db4:	db1f      	blt.n	1df6 <flash_area_get_sectors+0x56>
    1db6:	9b00      	ldr	r3, [sp, #0]
    1db8:	b1eb      	cbz	r3, 1df6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1dba:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
    1dbc:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1dbe:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1dc0:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1dc2:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
    1dc4:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1dc8:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
    1dca:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
    1dcc:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1dd0:	9205      	str	r2, [sp, #20]
    1dd2:	f003 f9fd 	bl	51d0 <z_impl_device_get_binding>
    1dd6:	4605      	mov	r5, r0
	flash_area_close(fa);
    1dd8:	9800      	ldr	r0, [sp, #0]
    1dda:	f004 f890 	bl	5efe <flash_area_close>
	if (flash_dev == NULL) {
    1dde:	b16d      	cbz	r5, 1dfc <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1de0:	4628      	mov	r0, r5
    1de2:	4908      	ldr	r1, [pc, #32]	; (1e04 <flash_area_get_sectors+0x64>)
    1de4:	aa01      	add	r2, sp, #4
    1de6:	f004 fd14 	bl	6812 <flash_page_foreach>
	if (cb_data->status == 0) {
    1dea:	9807      	ldr	r0, [sp, #28]
    1dec:	b908      	cbnz	r0, 1df2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1dee:	9b05      	ldr	r3, [sp, #20]
    1df0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1df2:	b008      	add	sp, #32
    1df4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1df6:	f06f 0015 	mvn.w	r0, #21
    1dfa:	e7fa      	b.n	1df2 <flash_area_get_sectors+0x52>
		return -ENODEV;
    1dfc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e00:	e7f7      	b.n	1df2 <flash_area_get_sectors+0x52>
    1e02:	bf00      	nop
    1e04:	00005fc3 	.word	0x00005fc3

00001e08 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e08:	4801      	ldr	r0, [pc, #4]	; (1e10 <nrf_cc3xx_platform_abort_init+0x8>)
    1e0a:	f003 bba5 	b.w	5558 <nrf_cc3xx_platform_set_abort>
    1e0e:	bf00      	nop
    1e10:	000089f4 	.word	0x000089f4

00001e14 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    1e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    1e16:	4e24      	ldr	r6, [pc, #144]	; (1ea8 <boot_uart_fifo_callback+0x94>)
    1e18:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    1e1a:	6883      	ldr	r3, [r0, #8]
    1e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e1e:	b103      	cbz	r3, 1e22 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    1e20:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    1e22:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    1e24:	6883      	ldr	r3, [r0, #8]
    1e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1e28:	b9a3      	cbnz	r3, 1e54 <boot_uart_fifo_callback+0x40>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    1e2a:	4c20      	ldr	r4, [pc, #128]	; (1eac <boot_uart_fifo_callback+0x98>)
	return list->head;
    1e2c:	4d20      	ldr	r5, [pc, #128]	; (1eb0 <boot_uart_fifo_callback+0x9c>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    1e2e:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    1e30:	6883      	ldr	r3, [r0, #8]
    1e32:	699b      	ldr	r3, [r3, #24]
    1e34:	b18b      	cbz	r3, 1e5a <boot_uart_fifo_callback+0x46>
	return api->fifo_read(dev, rx_data, size);
    1e36:	2201      	movs	r2, #1
    1e38:	f10d 0107 	add.w	r1, sp, #7
    1e3c:	4798      	blx	r3
		if (rx != 1) {
    1e3e:	2801      	cmp	r0, #1
    1e40:	d10b      	bne.n	1e5a <boot_uart_fifo_callback+0x46>
		if (!cmd) {
    1e42:	6823      	ldr	r3, [r4, #0]
    1e44:	b993      	cbnz	r3, 1e6c <boot_uart_fifo_callback+0x58>
    1e46:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    1e48:	b94b      	cbnz	r3, 1e5e <boot_uart_fifo_callback+0x4a>
			sys_snode_t *node;

			node = sys_slist_get(&avail_queue);
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
    1e4a:	2145      	movs	r1, #69	; 0x45
    1e4c:	4819      	ldr	r0, [pc, #100]	; (1eb4 <boot_uart_fifo_callback+0xa0>)
    1e4e:	f004 f849 	bl	5ee4 <z_log_minimal_printk>
					     " incoming data!");
				return;
    1e52:	e002      	b.n	1e5a <boot_uart_fifo_callback+0x46>
	return api->irq_rx_ready(dev);
    1e54:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    1e56:	2800      	cmp	r0, #0
    1e58:	d1e7      	bne.n	1e2a <boot_uart_fifo_callback+0x16>
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
			cmd = NULL;
		}
	}
}
    1e5a:	b003      	add	sp, #12
    1e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e5e:	6869      	ldr	r1, [r5, #4]
	return node->next;
    1e60:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e62:	428b      	cmp	r3, r1
	list->head = node;
    1e64:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1e66:	d100      	bne.n	1e6a <boot_uart_fifo_callback+0x56>
	list->tail = node;
    1e68:	606a      	str	r2, [r5, #4]
			cmd = CONTAINER_OF(node, struct line_input, node);
    1e6a:	6023      	str	r3, [r4, #0]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1e6c:	4a12      	ldr	r2, [pc, #72]	; (1eb8 <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
    1e6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    1e72:	8811      	ldrh	r1, [r2, #0]
    1e74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1e78:	d204      	bcs.n	1e84 <boot_uart_fifo_callback+0x70>
			cmd->line[cur++] = byte;
    1e7a:	6823      	ldr	r3, [r4, #0]
    1e7c:	1c4f      	adds	r7, r1, #1
    1e7e:	440b      	add	r3, r1
    1e80:	8017      	strh	r7, [r2, #0]
    1e82:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    1e84:	280a      	cmp	r0, #10
    1e86:	d1d2      	bne.n	1e2e <boot_uart_fifo_callback+0x1a>
	parent->next = child;
    1e88:	2000      	movs	r0, #0
			cmd->len = cur;
    1e8a:	6823      	ldr	r3, [r4, #0]
    1e8c:	8811      	ldrh	r1, [r2, #0]
    1e8e:	6018      	str	r0, [r3, #0]
    1e90:	6059      	str	r1, [r3, #4]
	return list->tail;
    1e92:	490a      	ldr	r1, [pc, #40]	; (1ebc <boot_uart_fifo_callback+0xa8>)
    1e94:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    1e96:	b925      	cbnz	r5, 1ea2 <boot_uart_fifo_callback+0x8e>
	list->head = node;
    1e98:	e9c1 3300 	strd	r3, r3, [r1]
			cur = 0;
    1e9c:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    1e9e:	6020      	str	r0, [r4, #0]
    1ea0:	e7c4      	b.n	1e2c <boot_uart_fifo_callback+0x18>
	parent->next = child;
    1ea2:	602b      	str	r3, [r5, #0]
	list->tail = node;
    1ea4:	604b      	str	r3, [r1, #4]
}
    1ea6:	e7f9      	b.n	1e9c <boot_uart_fifo_callback+0x88>
    1ea8:	2000dfac 	.word	0x2000dfac
    1eac:	2000db8c 	.word	0x2000db8c
    1eb0:	2000db84 	.word	0x2000db84
    1eb4:	000092e6 	.word	0x000092e6
    1eb8:	2000e08c 	.word	0x2000e08c
    1ebc:	2000dfa4 	.word	0x2000dfa4

00001ec0 <console_out>:
	uart_poll_out(uart_dev, c);
    1ec0:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <console_out+0x14>)
{
    1ec2:	b510      	push	{r4, lr}
    1ec4:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    1ec6:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    1ec8:	6883      	ldr	r3, [r0, #8]
    1eca:	b2e1      	uxtb	r1, r4
    1ecc:	685b      	ldr	r3, [r3, #4]
    1ece:	4798      	blx	r3
}
    1ed0:	4620      	mov	r0, r4
    1ed2:	bd10      	pop	{r4, pc}
    1ed4:	2000dfac 	.word	0x2000dfac

00001ed8 <console_read>:
{
    1ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eda:	4606      	mov	r6, r0
    1edc:	460f      	mov	r7, r1
    1ede:	4615      	mov	r5, r2
	__asm__ volatile(
    1ee0:	f04f 0320 	mov.w	r3, #32
    1ee4:	f3ef 8c11 	mrs	ip, BASEPRI
    1ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    1eec:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    1ef0:	4918      	ldr	r1, [pc, #96]	; (1f54 <console_read+0x7c>)
    1ef2:	680b      	ldr	r3, [r1, #0]
    1ef4:	b143      	cbz	r3, 1f08 <console_read+0x30>
	return list->tail;
    1ef6:	4a18      	ldr	r2, [pc, #96]	; (1f58 <console_read+0x80>)
    1ef8:	6850      	ldr	r0, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    1efa:	4298      	cmp	r0, r3
    1efc:	d004      	beq.n	1f08 <console_read+0x30>
	parent->next = child;
    1efe:	2400      	movs	r4, #0
    1f00:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    1f02:	b990      	cbnz	r0, 1f2a <console_read+0x52>
	list->head = node;
    1f04:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    1f08:	4b14      	ldr	r3, [pc, #80]	; (1f5c <console_read+0x84>)
    1f0a:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET(slist, snode)
    1f0c:	b128      	cbz	r0, 1f1a <console_read+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f0e:	685c      	ldr	r4, [r3, #4]
	return node->next;
    1f10:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f12:	42a0      	cmp	r0, r4
	list->head = node;
    1f14:	601a      	str	r2, [r3, #0]
	list->tail = node;
    1f16:	bf08      	it	eq
    1f18:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
    1f1a:	f38c 8811 	msr	BASEPRI, ip
    1f1e:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    1f22:	6008      	str	r0, [r1, #0]
	if (node == NULL) {
    1f24:	b920      	cbnz	r0, 1f30 <console_read+0x58>
		*newline = 0;
    1f26:	6028      	str	r0, [r5, #0]
}
    1f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    1f2a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    1f2c:	6053      	str	r3, [r2, #4]
}
    1f2e:	e7eb      	b.n	1f08 <console_read+0x30>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    1f30:	6844      	ldr	r4, [r0, #4]
	*line = cmd->line;
    1f32:	f100 0108 	add.w	r1, r0, #8
	if (len > str_size - 1) {
    1f36:	42a7      	cmp	r7, r4
		len = str_size - 1;
    1f38:	bfd8      	it	le
    1f3a:	f107 34ff 	addle.w	r4, r7, #4294967295	; 0xffffffff
	memcpy(str, line, len);
    1f3e:	4622      	mov	r2, r4
    1f40:	4630      	mov	r0, r6
    1f42:	f004 fb2a 	bl	659a <memcpy>
	str[len] = '\0';
    1f46:	2300      	movs	r3, #0
    1f48:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    1f4a:	2301      	movs	r3, #1
    1f4c:	602b      	str	r3, [r5, #0]
	return len + 1;
    1f4e:	18e0      	adds	r0, r4, r3
    1f50:	e7ea      	b.n	1f28 <console_read+0x50>
    1f52:	bf00      	nop
    1f54:	2000db90 	.word	0x2000db90
    1f58:	2000db84 	.word	0x2000db84
    1f5c:	2000dfa4 	.word	0x2000dfa4

00001f60 <boot_console_init>:
{
    1f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    1f62:	2500      	movs	r5, #0
    1f64:	4b1c      	ldr	r3, [pc, #112]	; (1fd8 <boot_console_init+0x78>)
	list->head = node;
    1f66:	4a1d      	ldr	r2, [pc, #116]	; (1fdc <boot_console_init+0x7c>)
	list->tail = NULL;
    1f68:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    1f6c:	4b1c      	ldr	r3, [pc, #112]	; (1fe0 <boot_console_init+0x80>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f6e:	4c1d      	ldr	r4, [pc, #116]	; (1fe4 <boot_console_init+0x84>)
    1f70:	481d      	ldr	r0, [pc, #116]	; (1fe8 <boot_console_init+0x88>)
	parent->next = child;
    1f72:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    1f76:	6013      	str	r3, [r2, #0]
	parent->next = child;
    1f78:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    1f7c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    1f7e:	6051      	str	r1, [r2, #4]
    1f80:	6020      	str	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1f82:	f006 fb00 	bl	8586 <z_device_is_ready>
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
#endif

	if (!device_is_ready(uart_dev)) {
    1f86:	b310      	cbz	r0, 1fce <boot_console_init+0x6e>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    1f88:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1f8a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1f8c:	b123      	cbz	r3, 1f98 <boot_console_init+0x38>
    1f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1f90:	b113      	cbz	r3, 1f98 <boot_console_init+0x38>
		api->irq_callback_set(dev, cb, user_data);
    1f92:	462a      	mov	r2, r5
    1f94:	4915      	ldr	r1, [pc, #84]	; (1fec <boot_console_init+0x8c>)
    1f96:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    1f98:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    1f9a:	6883      	ldr	r3, [r0, #8]
    1f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f9e:	b10b      	cbz	r3, 1fa4 <boot_console_init+0x44>
	return api->irq_rx_ready(dev);
    1fa0:	4798      	blx	r3
    1fa2:	b148      	cbz	r0, 1fb8 <boot_console_init+0x58>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    1fa4:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    1fa6:	6883      	ldr	r3, [r0, #8]
    1fa8:	699b      	ldr	r3, [r3, #24]
    1faa:	b903      	cbnz	r3, 1fae <boot_console_init+0x4e>
    1fac:	e7fe      	b.n	1fac <boot_console_init+0x4c>
	return api->fifo_read(dev, rx_data, size);
    1fae:	2201      	movs	r2, #1
    1fb0:	f10d 0107 	add.w	r1, sp, #7
    1fb4:	4798      	blx	r3
    1fb6:	e7f4      	b.n	1fa2 <boot_console_init+0x42>
			;
		}
	}

	cur = 0;
    1fb8:	2500      	movs	r5, #0
    1fba:	4b0d      	ldr	r3, [pc, #52]	; (1ff0 <boot_console_init+0x90>)

	uart_irq_rx_enable(uart_dev);
    1fbc:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    1fbe:	801d      	strh	r5, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    1fc0:	6883      	ldr	r3, [r0, #8]
    1fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fc4:	b133      	cbz	r3, 1fd4 <boot_console_init+0x74>
		api->irq_rx_enable(dev);
    1fc6:	4798      	blx	r3

	return 0;
    1fc8:	4628      	mov	r0, r5
}
    1fca:	b003      	add	sp, #12
    1fcc:	bd30      	pop	{r4, r5, pc}
		return (-1);
    1fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fd2:	e7fa      	b.n	1fca <boot_console_init+0x6a>
	return 0;
    1fd4:	4618      	mov	r0, r3
	return boot_uart_fifo_init();
    1fd6:	e7f8      	b.n	1fca <boot_console_init+0x6a>
    1fd8:	2000dfa4 	.word	0x2000dfa4
    1fdc:	2000db84 	.word	0x2000db84
    1fe0:	2000db94 	.word	0x2000db94
    1fe4:	2000dfac 	.word	0x2000dfac
    1fe8:	0000865c 	.word	0x0000865c
    1fec:	00001e15 	.word	0x00001e15
    1ff0:	2000e08c 	.word	0x2000e08c

00001ff4 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    1ff4:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    1ff8:	2000      	movs	r0, #0
{
    1ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bs_hdr->nh_op++;
    1ffe:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 20ec <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xec>
{
    2002:	b0d3      	sub	sp, #332	; 0x14c
    bs_hdr->nh_op++;
    2004:	f8d9 1000 	ldr.w	r1, [r9]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2008:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    200c:	4b38      	ldr	r3, [pc, #224]	; (20f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf0>)
    200e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 20f4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf4>
    2012:	681f      	ldr	r7, [r3, #0]
    bs_hdr->nh_op++;
    2014:	780b      	ldrb	r3, [r1, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    2016:	eba7 0708 	sub.w	r7, r7, r8
    bs_hdr->nh_op++;
    201a:	3301      	adds	r3, #1
    201c:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    201e:	ba7b      	rev16	r3, r7
    2020:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2022:	888b      	ldrh	r3, [r1, #4]

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2024:	2208      	movs	r2, #8
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2026:	ba5b      	rev16	r3, r3
    2028:	808b      	strh	r3, [r1, #4]
    bs_hdr->nh_flags = 0;
    202a:	7048      	strb	r0, [r1, #1]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    202c:	f003 fe6d 	bl	5d0a <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    2030:	463a      	mov	r2, r7
    2032:	4641      	mov	r1, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2034:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16_itu_t(crc, data, len);
    2038:	f003 fe67 	bl	5d0a <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    203c:	2502      	movs	r5, #2
    boot_uf->write(pkt_start, sizeof(pkt_start));
    203e:	4e2e      	ldr	r6, [pc, #184]	; (20f8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xf8>)
    crc = htons(crc);
    2040:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2042:	6833      	ldr	r3, [r6, #0]
    2044:	b2bc      	uxth	r4, r7
    crc = htons(crc);
    2046:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    204a:	2102      	movs	r1, #2
    204c:	a803      	add	r0, sp, #12
    204e:	685b      	ldr	r3, [r3, #4]
    2050:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2052:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    2056:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    2058:	f10d 0112 	add.w	r1, sp, #18
    205c:	2202      	movs	r2, #2
    205e:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    2060:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    2064:	f004 fa99 	bl	659a <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2068:	f8d9 1000 	ldr.w	r1, [r9]
    206c:	2208      	movs	r2, #8
    206e:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    2072:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2076:	f004 fa90 	bl	659a <memcpy>
    totlen += sizeof(*bs_hdr);
    207a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    207e:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    2080:	3008      	adds	r0, #8
    2082:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    2084:	463a      	mov	r2, r7
    2086:	4641      	mov	r1, r8
    totlen += sizeof(*bs_hdr);
    2088:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    208c:	4418      	add	r0, r3
    208e:	f004 fa84 	bl	659a <memcpy>
    totlen += len;
    2092:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2096:	ab06      	add	r3, sp, #24
    totlen += len;
    2098:	4420      	add	r0, r4
    209a:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    209c:	462a      	mov	r2, r5
    totlen += len;
    209e:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    20a2:	a904      	add	r1, sp, #16
    20a4:	4418      	add	r0, r3
    20a6:	f004 fa78 	bl	659a <memcpy>
    totlen += sizeof(crc);
    20aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20ae:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    20b0:	442b      	add	r3, r5
    20b2:	b29b      	uxth	r3, r3
    20b4:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    20b8:	9300      	str	r3, [sp, #0]
    20ba:	21ad      	movs	r1, #173	; 0xad
    20bc:	ab06      	add	r3, sp, #24
    20be:	a826      	add	r0, sp, #152	; 0x98
    20c0:	f7ff f9e4 	bl	148c <base64_encode>
    totlen = enc_len;
    20c4:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    20c6:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    20c8:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    20cc:	a826      	add	r0, sp, #152	; 0x98
    20ce:	685b      	ldr	r3, [r3, #4]
    20d0:	b289      	uxth	r1, r1
    20d2:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    20d4:	6833      	ldr	r3, [r6, #0]
    20d6:	4629      	mov	r1, r5
    20d8:	685b      	ldr	r3, [r3, #4]
    20da:	4808      	ldr	r0, [pc, #32]	; (20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>)
    20dc:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    20de:	2149      	movs	r1, #73	; 0x49
    20e0:	4807      	ldr	r0, [pc, #28]	; (2100 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x100>)
    20e2:	f003 feff 	bl	5ee4 <z_log_minimal_printk>
}
    20e6:	b053      	add	sp, #332	; 0x14c
    20e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    20ec:	2000dfb4 	.word	0x2000dfb4
    20f0:	2000c510 	.word	0x2000c510
    20f4:	2000f98e 	.word	0x2000f98e
    20f8:	2000dfb0 	.word	0x2000dfb0
    20fc:	0000933f 	.word	0x0000933f
    2100:	00009342 	.word	0x00009342

00002104 <bs_rc_rsp>:
{
    2104:	b537      	push	{r0, r1, r2, r4, r5, lr}
    map_start_encode(&cbor_state, 10);
    2106:	4c0e      	ldr	r4, [pc, #56]	; (2140 <bs_rc_rsp+0x3c>)
{
    2108:	4605      	mov	r5, r0
    map_start_encode(&cbor_state, 10);
    210a:	210a      	movs	r1, #10
    210c:	4620      	mov	r0, r4
    210e:	f004 f95a 	bl	63c6 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    2112:	466b      	mov	r3, sp
    2114:	4a0b      	ldr	r2, [pc, #44]	; (2144 <bs_rc_rsp+0x40>)
    2116:	e892 0003 	ldmia.w	r2, {r0, r1}
    211a:	e883 0003 	stmia.w	r3, {r0, r1}
    211e:	4619      	mov	r1, r3
    2120:	4620      	mov	r0, r4
    2122:	f004 f941 	bl	63a8 <tstrx_encode>
    uintx32_put(&cbor_state, rc_code);
    2126:	4629      	mov	r1, r5
    2128:	4620      	mov	r0, r4
    212a:	f004 f934 	bl	6396 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    212e:	210a      	movs	r1, #10
    2130:	4620      	mov	r0, r4
    2132:	f004 f963 	bl	63fc <map_end_encode>
    boot_serial_output();
    2136:	f7ff ff5d 	bl	1ff4 <boot_serial_output>
}
    213a:	b003      	add	sp, #12
    213c:	bd30      	pop	{r4, r5, pc}
    213e:	bf00      	nop
    2140:	2000c510 	.word	0x2000c510
    2144:	00008900 	.word	0x00008900

00002148 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    2148:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    214a:	680c      	ldr	r4, [r1, #0]
    214c:	4f16      	ldr	r7, [pc, #88]	; (21a8 <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    214e:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2150:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    2152:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2154:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2158:	9000      	str	r0, [sp, #0]
    215a:	4b14      	ldr	r3, [pc, #80]	; (21ac <boot_serial_in_dec.constprop.0+0x64>)
    215c:	1938      	adds	r0, r7, r4
    215e:	aa03      	add	r2, sp, #12
    2160:	3101      	adds	r1, #1
    2162:	f7ff fa13 	bl	158c <base64_decode>
    if (err) {
    2166:	4604      	mov	r4, r0
    2168:	b9d8      	cbnz	r0, 21a2 <boot_serial_in_dec.constprop.0+0x5a>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    216a:	682b      	ldr	r3, [r5, #0]
    216c:	9a03      	ldr	r2, [sp, #12]
    216e:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    2170:	2b02      	cmp	r3, #2
    *out_off += rc;
    2172:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    2174:	d912      	bls.n	219c <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    2176:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    2178:	3b02      	subs	r3, #2
    217a:	ba76      	rev16	r6, r6
    217c:	b2b6      	uxth	r6, r6
    217e:	429e      	cmp	r6, r3
    2180:	d10c      	bne.n	219c <boot_serial_in_dec.constprop.0+0x54>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    2182:	4632      	mov	r2, r6
    2184:	1cb9      	adds	r1, r7, #2
    2186:	f003 fdc0 	bl	5d0a <crc16_itu_t>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    218a:	b938      	cbnz	r0, 219c <boot_serial_in_dec.constprop.0+0x54>
    218c:	2e02      	cmp	r6, #2
    218e:	d905      	bls.n	219c <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }
    *out_off -= sizeof(crc);
    2190:	682b      	ldr	r3, [r5, #0]
    2192:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    2194:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    2196:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    2198:	70bc      	strb	r4, [r7, #2]

    return 1;
    219a:	2401      	movs	r4, #1
}
    219c:	4620      	mov	r0, r4
    219e:	b005      	add	sp, #20
    21a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    21a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    21a6:	e7f9      	b.n	219c <boot_serial_in_dec.constprop.0+0x54>
    21a8:	2000fa0e 	.word	0x2000fa0e
    21ac:	2000fc11 	.word	0x2000fc11

000021b0 <boot_serial_input>:
{
    21b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    21b4:	2907      	cmp	r1, #7
{
    21b6:	4604      	mov	r4, r0
    21b8:	b0a8      	sub	sp, #160	; 0xa0
    if (len < sizeof(*hdr) ||
    21ba:	f240 80c3 	bls.w	2344 <boot_serial_input+0x194>
    21be:	7802      	ldrb	r2, [r0, #0]
    21c0:	f012 05fd 	ands.w	r5, r2, #253	; 0xfd
    21c4:	f040 80be 	bne.w	2344 <boot_serial_input+0x194>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    21c8:	8843      	ldrh	r3, [r0, #2]
    21ca:	f1a1 0608 	sub.w	r6, r1, #8
    21ce:	ba5b      	rev16	r3, r3
    21d0:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    21d2:	42b3      	cmp	r3, r6
    21d4:	f0c0 80b6 	bcc.w	2344 <boot_serial_input+0x194>
    bs_hdr = hdr;
    21d8:	4ba7      	ldr	r3, [pc, #668]	; (2478 <FIH_LABEL_FIH_CALL_END_949+0x10e>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    21da:	4fa8      	ldr	r7, [pc, #672]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    bs_hdr = hdr;
    21dc:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    21de:	8883      	ldrh	r3, [r0, #4]
    21e0:	ba5b      	rev16	r3, r3
    21e2:	b298      	uxth	r0, r3
    21e4:	80a3      	strh	r3, [r4, #4]
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    21e6:	4ba6      	ldr	r3, [pc, #664]	; (2480 <FIH_LABEL_FIH_CALL_END_949+0x116>)
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    21e8:	2801      	cmp	r0, #1
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    21ea:	603b      	str	r3, [r7, #0]
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    21ec:	f103 0380 	add.w	r3, r3, #128	; 0x80
    21f0:	60fb      	str	r3, [r7, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    21f2:	f040 81f9 	bne.w	25e8 <FIH_LABEL_FIH_CALL_END_949+0x27e>
        switch (hdr->nh_id) {
    21f6:	f894 8007 	ldrb.w	r8, [r4, #7]
    21fa:	f1b8 0f00 	cmp.w	r8, #0
    21fe:	d009      	beq.n	2214 <boot_serial_input+0x64>
    2200:	f1b8 0f01 	cmp.w	r8, #1
    2204:	f000 80b2 	beq.w	236c <FIH_LABEL_FIH_CALL_END_949+0x2>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2208:	2008      	movs	r0, #8
}
    220a:	b028      	add	sp, #160	; 0xa0
    220c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2210:	f7ff bf78 	b.w	2104 <bs_rc_rsp>
    map_start_encode(&cbor_state, 1);
    2214:	4601      	mov	r1, r0
    tstrx_put(&cbor_state, "images");
    2216:	4e9b      	ldr	r6, [pc, #620]	; (2484 <FIH_LABEL_FIH_CALL_END_949+0x11a>)
    map_start_encode(&cbor_state, 1);
    2218:	4638      	mov	r0, r7
    221a:	f004 f8d4 	bl	63c6 <map_start_encode>
    tstrx_put(&cbor_state, "images");
    221e:	e896 0003 	ldmia.w	r6, {r0, r1}
    2222:	ab08      	add	r3, sp, #32
    2224:	e883 0003 	stmia.w	r3, {r0, r1}
    2228:	4619      	mov	r1, r3
    222a:	4638      	mov	r0, r7
    222c:	f004 f8bc 	bl	63a8 <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    2230:	4638      	mov	r0, r7
    2232:	2105      	movs	r1, #5
    2234:	f004 f8bb 	bl	63ae <list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2238:	4644      	mov	r4, r8
            if (hdr.ih_magic == IMAGE_MAGIC)
    223a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 2488 <FIH_LABEL_FIH_CALL_END_949+0x11e>
            tstrx_put(&cbor_state, "slot");
    223e:	f106 0708 	add.w	r7, r6, #8
            tstrx_put(&cbor_state, "version");
    2242:	3610      	adds	r6, #16
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2244:	4621      	mov	r1, r4
    2246:	2000      	movs	r0, #0
    2248:	f003 faef 	bl	582a <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    224c:	a907      	add	r1, sp, #28
    224e:	b2c0      	uxtb	r0, r0
    2250:	f7ff fd88 	bl	1d64 <flash_area_open>
    2254:	4605      	mov	r5, r0
    2256:	2800      	cmp	r0, #0
    2258:	d169      	bne.n	232e <boot_serial_input+0x17e>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    225a:	2320      	movs	r3, #32
    225c:	4601      	mov	r1, r0
    225e:	aa10      	add	r2, sp, #64	; 0x40
    2260:	9807      	ldr	r0, [sp, #28]
    2262:	f003 fe4d 	bl	5f00 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2266:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2268:	4543      	cmp	r3, r8
    226a:	d070      	beq.n	234e <FIH_LABEL_FIH_CALL_START_919>
            fih_int fih_rc = FIH_FAILURE;
    226c:	4b87      	ldr	r3, [pc, #540]	; (248c <FIH_LABEL_FIH_CALL_END_949+0x122>)
    226e:	681d      	ldr	r5, [r3, #0]
            flash_area_close(fap);
    2270:	9807      	ldr	r0, [sp, #28]
    2272:	f003 fe44 	bl	5efe <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2276:	4b86      	ldr	r3, [pc, #536]	; (2490 <FIH_LABEL_FIH_CALL_END_949+0x126>)
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	42ab      	cmp	r3, r5
    227c:	d157      	bne.n	232e <boot_serial_input+0x17e>
            map_start_encode(&cbor_state, 20);
    227e:	2114      	movs	r1, #20
    2280:	487e      	ldr	r0, [pc, #504]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2282:	f004 f8a0 	bl	63c6 <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    2286:	e897 0003 	ldmia.w	r7, {r0, r1}
    228a:	ab0a      	add	r3, sp, #40	; 0x28
    228c:	e883 0003 	stmia.w	r3, {r0, r1}
    2290:	4619      	mov	r1, r3
    2292:	487a      	ldr	r0, [pc, #488]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2294:	f004 f888 	bl	63a8 <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    2298:	4621      	mov	r1, r4
    229a:	4878      	ldr	r0, [pc, #480]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    229c:	f004 f87b 	bl	6396 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    22a0:	e896 0003 	ldmia.w	r6, {r0, r1}
    22a4:	ab0c      	add	r3, sp, #48	; 0x30
    off = u32toa(dst, ver->iv_major);
    22a6:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    22aa:	e883 0003 	stmia.w	r3, {r0, r1}
    22ae:	4619      	mov	r1, r3
    22b0:	4872      	ldr	r0, [pc, #456]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    22b2:	f004 f879 	bl	63a8 <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    22b6:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    22ba:	4648      	mov	r0, r9
    22bc:	f003 feb2 	bl	6024 <u32toa>
    dst[off++] = '.';
    22c0:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    22c4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    22c8:	1c45      	adds	r5, r0, #1
    22ca:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_minor);
    22ce:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    22d2:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    22d6:	eb09 0005 	add.w	r0, r9, r5
    22da:	f003 fea3 	bl	6024 <u32toa>
    22de:	4428      	add	r0, r5
    dst[off++] = '.';
    22e0:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    22e4:	1c45      	adds	r5, r0, #1
    22e6:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_revision);
    22ea:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    22ee:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    22f2:	eb09 0005 	add.w	r0, r9, r5
    22f6:	f003 fe95 	bl	6024 <u32toa>
    22fa:	4405      	add	r5, r0
    dst[off++] = '.';
    22fc:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
    2300:	446b      	add	r3, sp
    2302:	3501      	adds	r5, #1
    off += u32toa(dst + off, ver->iv_build_num);
    2304:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    2306:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    230a:	eb09 0005 	add.w	r0, r9, r5
    230e:	f003 fe89 	bl	6024 <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    2312:	4648      	mov	r0, r9
    2314:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    2318:	f004 f903 	bl	6522 <strlen>
    231c:	a90e      	add	r1, sp, #56	; 0x38
    231e:	900f      	str	r0, [sp, #60]	; 0x3c
    2320:	4856      	ldr	r0, [pc, #344]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2322:	f004 f841 	bl	63a8 <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    2326:	2114      	movs	r1, #20
    2328:	4854      	ldr	r0, [pc, #336]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    232a:	f004 f867 	bl	63fc <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    232e:	b164      	cbz	r4, 234a <boot_serial_input+0x19a>
    list_end_encode(&cbor_state, 5);
    2330:	2105      	movs	r1, #5
    2332:	4852      	ldr	r0, [pc, #328]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2334:	f004 f85f 	bl	63f6 <list_end_encode>
    map_end_encode(&cbor_state, 1);
    2338:	4621      	mov	r1, r4
    233a:	4850      	ldr	r0, [pc, #320]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    233c:	f004 f85e 	bl	63fc <map_end_encode>
    boot_serial_output();
    2340:	f7ff fe58 	bl	1ff4 <boot_serial_output>
}
    2344:	b028      	add	sp, #160	; 0xa0
    2346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    234a:	2401      	movs	r4, #1
    234c:	e77a      	b.n	2244 <boot_serial_input+0x94>

0000234e <FIH_LABEL_FIH_CALL_START_919>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    234e:	2340      	movs	r3, #64	; 0x40
    2350:	9301      	str	r3, [sp, #4]
    2352:	ab18      	add	r3, sp, #96	; 0x60
    2354:	4629      	mov	r1, r5
    2356:	e9cd 5503 	strd	r5, r5, [sp, #12]
    235a:	9502      	str	r5, [sp, #8]
    235c:	9300      	str	r3, [sp, #0]
    235e:	4628      	mov	r0, r5
    2360:	9b07      	ldr	r3, [sp, #28]
    2362:	aa10      	add	r2, sp, #64	; 0x40
    2364:	f7fe f94c 	bl	600 <bootutil_img_validate>
    2368:	4605      	mov	r5, r0

0000236a <FIH_LABEL_FIH_CALL_END_949>:
    236a:	e781      	b.n	2270 <boot_serial_input+0xc0>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    236c:	4631      	mov	r1, r6
    236e:	ab0a      	add	r3, sp, #40	; 0x28
    2370:	aa18      	add	r2, sp, #96	; 0x60
    2372:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    2376:	9508      	str	r5, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2378:	f000 fa4a 	bl	2810 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    237c:	b908      	cbnz	r0, 2382 <FIH_LABEL_FIH_CALL_END_949+0x18>
        rc = MGMT_ERR_EINVAL;
    237e:	2403      	movs	r4, #3
    2380:	e034      	b.n	23ec <FIH_LABEL_FIH_CALL_END_949+0x82>
    if (!result || (len != decoded_len)) {
    2382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2384:	429e      	cmp	r6, r3
    2386:	d1fa      	bne.n	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    long long int data_len = UINT64_MAX;
    2388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (int i = 0; i < upload._Upload_members_count; i++) {
    238c:	462a      	mov	r2, r5
    img_num = 0;
    238e:	4628      	mov	r0, r5
    long long int data_len = UINT64_MAX;
    2390:	46a2      	mov	sl, r4
    long long int off = UINT64_MAX;
    2392:	4626      	mov	r6, r4
    2394:	46a1      	mov	r9, r4
    const uint8_t *img_data = NULL;
    2396:	46a8      	mov	r8, r5
    2398:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    239a:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    239c:	4297      	cmp	r7, r2
    239e:	d155      	bne.n	244c <FIH_LABEL_FIH_CALL_END_949+0xe2>
    if (off == UINT64_MAX || img_data == NULL) {
    23a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    23a4:	bf08      	it	eq
    23a6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    23aa:	d0e8      	beq.n	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    23ac:	f1b8 0f00 	cmp.w	r8, #0
    23b0:	d0e5      	beq.n	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    23b2:	2100      	movs	r1, #0
    23b4:	f003 fa39 	bl	582a <flash_area_id_from_multi_image_slot>
    23b8:	a908      	add	r1, sp, #32
    23ba:	b2c0      	uxtb	r0, r0
    23bc:	f7ff fcd2 	bl	1d64 <flash_area_open>
    if (rc) {
    23c0:	2800      	cmp	r0, #0
    23c2:	d1dc      	bne.n	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    if (off == 0) {
    23c4:	ea56 0309 	orrs.w	r3, r6, r9
    23c8:	4f32      	ldr	r7, [pc, #200]	; (2494 <FIH_LABEL_FIH_CALL_END_949+0x12a>)
    23ca:	d108      	bne.n	23de <FIH_LABEL_FIH_CALL_END_949+0x74>
	return (uint32_t)fa->fa_size;
    23cc:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    23ce:	6038      	str	r0, [r7, #0]
        if (data_len > flash_area_get_size(fap)) {
    23d0:	689b      	ldr	r3, [r3, #8]
    23d2:	42a3      	cmp	r3, r4
    23d4:	eb70 030a 	sbcs.w	r3, r0, sl
    23d8:	dbd1      	blt.n	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
        img_size = data_len;
    23da:	4b2f      	ldr	r3, [pc, #188]	; (2498 <FIH_LABEL_FIH_CALL_END_949+0x12e>)
    23dc:	601c      	str	r4, [r3, #0]
    if (off != curr_off) {
    23de:	2400      	movs	r4, #0
    23e0:	683b      	ldr	r3, [r7, #0]
    23e2:	454c      	cmp	r4, r9
    23e4:	bf08      	it	eq
    23e6:	42b3      	cmpeq	r3, r6
    23e8:	d05c      	beq.n	24a4 <FIH_LABEL_FIH_CALL_END_949+0x13a>
        rc = 0;
    23ea:	2400      	movs	r4, #0
    BOOT_LOG_INF("RX: 0x%x", rc);
    23ec:	4622      	mov	r2, r4
    23ee:	2149      	movs	r1, #73	; 0x49
    23f0:	482a      	ldr	r0, [pc, #168]	; (249c <FIH_LABEL_FIH_CALL_END_949+0x132>)
    23f2:	f003 fd77 	bl	5ee4 <z_log_minimal_printk>
    tstrx_put(&cbor_state, "rc");
    23f6:	4d2a      	ldr	r5, [pc, #168]	; (24a0 <FIH_LABEL_FIH_CALL_END_949+0x136>)
    map_start_encode(&cbor_state, 10);
    23f8:	210a      	movs	r1, #10
    23fa:	4820      	ldr	r0, [pc, #128]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    23fc:	f003 ffe3 	bl	63c6 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    2400:	e895 0003 	ldmia.w	r5, {r0, r1}
    2404:	ab10      	add	r3, sp, #64	; 0x40
    2406:	e883 0003 	stmia.w	r3, {r0, r1}
    240a:	4619      	mov	r1, r3
    240c:	481b      	ldr	r0, [pc, #108]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    240e:	f003 ffcb 	bl	63a8 <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    2412:	4621      	mov	r1, r4
    2414:	4819      	ldr	r0, [pc, #100]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2416:	f003 ffbe 	bl	6396 <uintx32_put>
    if (rc == 0) {
    241a:	b96c      	cbnz	r4, 2438 <FIH_LABEL_FIH_CALL_END_949+0xce>
        tstrx_put(&cbor_state, "off");
    241c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
    2420:	ab0e      	add	r3, sp, #56	; 0x38
    2422:	e883 0003 	stmia.w	r3, {r0, r1}
    2426:	4619      	mov	r1, r3
    2428:	4814      	ldr	r0, [pc, #80]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    242a:	f003 ffbd 	bl	63a8 <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    242e:	4b19      	ldr	r3, [pc, #100]	; (2494 <FIH_LABEL_FIH_CALL_END_949+0x12a>)
    2430:	4812      	ldr	r0, [pc, #72]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    2432:	6819      	ldr	r1, [r3, #0]
    2434:	f003 ffaf 	bl	6396 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    2438:	210a      	movs	r1, #10
    243a:	4810      	ldr	r0, [pc, #64]	; (247c <FIH_LABEL_FIH_CALL_END_949+0x112>)
    243c:	f003 ffde 	bl	63fc <map_end_encode>
    boot_serial_output();
    2440:	f7ff fdd8 	bl	1ff4 <boot_serial_output>
    flash_area_close(fap);
    2444:	9808      	ldr	r0, [sp, #32]
    2446:	f003 fd5a 	bl	5efe <flash_area_close>
}
    244a:	e77b      	b.n	2344 <boot_serial_input+0x194>
        switch(member->_Member_choice) {
    244c:	7a19      	ldrb	r1, [r3, #8]
    244e:	2903      	cmp	r1, #3
    2450:	d804      	bhi.n	245c <FIH_LABEL_FIH_CALL_END_949+0xf2>
    2452:	e8df f001 	tbb	[pc, r1]
    2456:	0602      	.short	0x0602
    2458:	0d09      	.short	0x0d09
                img_num = member->_Member_image;
    245a:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    245c:	3201      	adds	r2, #1
    245e:	330c      	adds	r3, #12
    2460:	e79c      	b.n	239c <FIH_LABEL_FIH_CALL_END_949+0x32>
                slen = member->_Member_data.len;
    2462:	e9d3 8500 	ldrd	r8, r5, [r3]
                break;
    2466:	e7f9      	b.n	245c <FIH_LABEL_FIH_CALL_END_949+0xf2>
                data_len = member->_Member_len;
    2468:	681c      	ldr	r4, [r3, #0]
    246a:	ea4f 7ae4 	mov.w	sl, r4, asr #31
                break;
    246e:	e7f5      	b.n	245c <FIH_LABEL_FIH_CALL_END_949+0xf2>
                off = member->_Member_off;
    2470:	681e      	ldr	r6, [r3, #0]
    2472:	ea4f 79e6 	mov.w	r9, r6, asr #31
                break;
    2476:	e7f1      	b.n	245c <FIH_LABEL_FIH_CALL_END_949+0xf2>
    2478:	2000dfb4 	.word	0x2000dfb4
    247c:	2000c510 	.word	0x2000c510
    2480:	2000f98e 	.word	0x2000f98e
    2484:	00008908 	.word	0x00008908
    2488:	96f3b83d 	.word	0x96f3b83d
    248c:	2000c500 	.word	0x2000c500
    2490:	2000c71c 	.word	0x2000c71c
    2494:	2000dfb8 	.word	0x2000dfb8
    2498:	2000dfc8 	.word	0x2000dfc8
    249c:	00009415 	.word	0x00009415
    24a0:	00008900 	.word	0x00008900
    if (curr_off + img_blen > img_size) {
    24a4:	f8df a164 	ldr.w	sl, [pc, #356]	; 260c <FIH_LABEL_FIH_CALL_END_949+0x2a2>
    24a8:	442b      	add	r3, r5
    24aa:	f8da 2000 	ldr.w	r2, [sl]
    24ae:	4293      	cmp	r3, r2
    24b0:	f63f af65 	bhi.w	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    rem_bytes = img_blen % flash_area_align(fap);
    24b4:	9808      	ldr	r0, [sp, #32]
    24b6:	f003 fd72 	bl	5f9e <flash_area_align>
    24ba:	fbb5 f6f0 	udiv	r6, r5, r0
    24be:	fb06 5010 	mls	r0, r6, r0, r5
    24c2:	b2c6      	uxtb	r6, r0
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    24c4:	6838      	ldr	r0, [r7, #0]
    24c6:	f8da 3000 	ldr.w	r3, [sl]
    24ca:	1942      	adds	r2, r0, r5
    24cc:	429a      	cmp	r2, r3
    24ce:	d202      	bcs.n	24d6 <FIH_LABEL_FIH_CALL_END_949+0x16c>
    24d0:	b10e      	cbz	r6, 24d6 <FIH_LABEL_FIH_CALL_END_949+0x16c>
        img_blen -= rem_bytes;
    24d2:	1bad      	subs	r5, r5, r6
        rem_bytes = 0;
    24d4:	4626      	mov	r6, r4
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    24d6:	a90c      	add	r1, sp, #48	; 0x30
    24d8:	4428      	add	r0, r5
    24da:	f7fe f877 	bl	5cc <flash_area_sector_from_off>
    if (rc) {
    24de:	4604      	mov	r4, r0
    24e0:	b120      	cbz	r0, 24ec <FIH_LABEL_FIH_CALL_END_949+0x182>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    24e2:	2145      	movs	r1, #69	; 0x45
    24e4:	484a      	ldr	r0, [pc, #296]	; (2610 <FIH_LABEL_FIH_CALL_END_949+0x2a6>)
                BOOT_LOG_ERR("Unable to determine flash sector of"
    24e6:	f003 fcfd 	bl	5ee4 <z_log_minimal_printk>
                goto out;
    24ea:	e77f      	b.n	23ec <FIH_LABEL_FIH_CALL_END_949+0x82>
    if (off_last != flash_sector_get_off(&sector)) {
    24ec:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2614 <FIH_LABEL_FIH_CALL_END_949+0x2aa>
	return fs->fs_off;
    24f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    24f2:	f8d9 3000 	ldr.w	r3, [r9]
    24f6:	429a      	cmp	r2, r3
    24f8:	d012      	beq.n	2520 <FIH_LABEL_FIH_CALL_END_949+0x1b6>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    24fa:	2149      	movs	r1, #73	; 0x49
    24fc:	4846      	ldr	r0, [pc, #280]	; (2618 <FIH_LABEL_FIH_CALL_END_949+0x2ae>)
        off_last = flash_sector_get_off(&sector);
    24fe:	f8c9 2000 	str.w	r2, [r9]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", flash_sector_get_off(&sector));
    2502:	f003 fcef 	bl	5ee4 <z_log_minimal_printk>
        rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    2506:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    250a:	9808      	ldr	r0, [sp, #32]
    250c:	f003 fd30 	bl	5f70 <flash_area_erase>
        if (rc) {
    2510:	4604      	mov	r4, r0
    2512:	b128      	cbz	r0, 2520 <FIH_LABEL_FIH_CALL_END_949+0x1b6>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2514:	4622      	mov	r2, r4
    2516:	2145      	movs	r1, #69	; 0x45
    2518:	4840      	ldr	r0, [pc, #256]	; (261c <FIH_LABEL_FIH_CALL_END_949+0x2b2>)
    251a:	f003 fce3 	bl	5ee4 <z_log_minimal_printk>
                    goto out;
    251e:	e765      	b.n	23ec <FIH_LABEL_FIH_CALL_END_949+0x82>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2520:	683a      	ldr	r2, [r7, #0]
    2522:	2149      	movs	r1, #73	; 0x49
    2524:	483e      	ldr	r0, [pc, #248]	; (2620 <FIH_LABEL_FIH_CALL_END_949+0x2b6>)
    2526:	18ab      	adds	r3, r5, r2
    2528:	f003 fcdc 	bl	5ee4 <z_log_minimal_printk>
    if (rem_bytes) {
    252c:	2e00      	cmp	r6, #0
    252e:	d042      	beq.n	25b6 <FIH_LABEL_FIH_CALL_END_949+0x24c>
        if (w_size) {
    2530:	1bac      	subs	r4, r5, r6
    2532:	d02b      	beq.n	258c <FIH_LABEL_FIH_CALL_END_949+0x222>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    2534:	4623      	mov	r3, r4
    2536:	4642      	mov	r2, r8
    2538:	6839      	ldr	r1, [r7, #0]
    253a:	9808      	ldr	r0, [sp, #32]
    253c:	f003 fcfc 	bl	5f38 <flash_area_write>
            if (rc) {
    2540:	2800      	cmp	r0, #0
    2542:	f47f af1c 	bne.w	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
            img_blen -= w_size;
    2546:	4635      	mov	r5, r6
            curr_off += w_size;
    2548:	683b      	ldr	r3, [r7, #0]
            img_data += w_size;
    254a:	44a0      	add	r8, r4
            curr_off += w_size;
    254c:	4423      	add	r3, r4
    254e:	603b      	str	r3, [r7, #0]
            memcpy(wbs_aligned, img_data, rem_bytes);
    2550:	4632      	mov	r2, r6
    2552:	4641      	mov	r1, r8
    2554:	a810      	add	r0, sp, #64	; 0x40
    2556:	f004 f820 	bl	659a <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    255a:	9808      	ldr	r0, [sp, #32]
    255c:	f003 fd28 	bl	5fb0 <flash_area_erased_val>
    2560:	ab10      	add	r3, sp, #64	; 0x40
    2562:	4601      	mov	r1, r0
    2564:	f1c6 0208 	rsb	r2, r6, #8
    2568:	1998      	adds	r0, r3, r6
    256a:	f004 f821 	bl	65b0 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    256e:	9c08      	ldr	r4, [sp, #32]
    2570:	683e      	ldr	r6, [r7, #0]
    2572:	4620      	mov	r0, r4
    2574:	f003 fd13 	bl	5f9e <flash_area_align>
    2578:	4631      	mov	r1, r6
    257a:	4603      	mov	r3, r0
    257c:	4620      	mov	r0, r4
    257e:	aa10      	add	r2, sp, #64	; 0x40
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    2580:	f003 fcda 	bl	5f38 <flash_area_write>
    if (rc == 0) {
    2584:	2800      	cmp	r0, #0
    2586:	f47f aefa 	bne.w	237e <FIH_LABEL_FIH_CALL_END_949+0x14>
    258a:	e001      	b.n	2590 <FIH_LABEL_FIH_CALL_END_949+0x226>
        if (img_blen) {
    258c:	2d00      	cmp	r5, #0
    258e:	d1df      	bne.n	2550 <FIH_LABEL_FIH_CALL_END_949+0x1e6>
        curr_off += img_blen;
    2590:	683b      	ldr	r3, [r7, #0]
    2592:	441d      	add	r5, r3
        if (curr_off == img_size) {
    2594:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    2598:	603d      	str	r5, [r7, #0]
        if (curr_off == img_size) {
    259a:	429d      	cmp	r5, r3
    259c:	f47f af25 	bne.w	23ea <FIH_LABEL_FIH_CALL_END_949+0x80>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    25a0:	9808      	ldr	r0, [sp, #32]
    25a2:	f003 f9f5 	bl	5990 <boot_status_off>
    25a6:	a90c      	add	r1, sp, #48	; 0x30
    25a8:	f7fe f810 	bl	5cc <flash_area_sector_from_off>
            if (rc) {
    25ac:	4604      	mov	r4, r0
    25ae:	b138      	cbz	r0, 25c0 <FIH_LABEL_FIH_CALL_END_949+0x256>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    25b0:	2145      	movs	r1, #69	; 0x45
    25b2:	481c      	ldr	r0, [pc, #112]	; (2624 <FIH_LABEL_FIH_CALL_END_949+0x2ba>)
    25b4:	e797      	b.n	24e6 <FIH_LABEL_FIH_CALL_END_949+0x17c>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    25b6:	462b      	mov	r3, r5
    25b8:	4642      	mov	r2, r8
    25ba:	6839      	ldr	r1, [r7, #0]
    25bc:	9808      	ldr	r0, [sp, #32]
    25be:	e7df      	b.n	2580 <FIH_LABEL_FIH_CALL_END_949+0x216>
    25c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            if (off_last < flash_sector_get_off(&sector)) {
    25c2:	f8d9 3000 	ldr.w	r3, [r9]
    25c6:	429a      	cmp	r2, r3
    25c8:	f67f af0f 	bls.w	23ea <FIH_LABEL_FIH_CALL_END_949+0x80>
                BOOT_LOG_INF("Erasing sector at offset 0x%x",
    25cc:	2149      	movs	r1, #73	; 0x49
    25ce:	4812      	ldr	r0, [pc, #72]	; (2618 <FIH_LABEL_FIH_CALL_END_949+0x2ae>)
    25d0:	f003 fc88 	bl	5ee4 <z_log_minimal_printk>
                rc = flash_area_erase(fap, flash_sector_get_off(&sector),
    25d4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    25d8:	9808      	ldr	r0, [sp, #32]
    25da:	f003 fcc9 	bl	5f70 <flash_area_erase>
                if (rc) {
    25de:	4604      	mov	r4, r0
    25e0:	2800      	cmp	r0, #0
    25e2:	f43f af03 	beq.w	23ec <FIH_LABEL_FIH_CALL_END_949+0x82>
    25e6:	e795      	b.n	2514 <FIH_LABEL_FIH_CALL_END_949+0x1aa>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    25e8:	2800      	cmp	r0, #0
    25ea:	f47f ae0d 	bne.w	2208 <boot_serial_input+0x58>
        switch (hdr->nh_id) {
    25ee:	79e3      	ldrb	r3, [r4, #7]
    25f0:	2b01      	cmp	r3, #1
    25f2:	f43f ae0a 	beq.w	220a <boot_serial_input+0x5a>
    25f6:	2b05      	cmp	r3, #5
    25f8:	f47f ae06 	bne.w	2208 <boot_serial_input+0x58>
    bs_rc_rsp(0);
    25fc:	f7ff fd82 	bl	2104 <bs_rc_rsp>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2600:	4809      	ldr	r0, [pc, #36]	; (2628 <FIH_LABEL_FIH_CALL_END_949+0x2be>)
    2602:	f005 ffd4 	bl	85ae <z_impl_k_busy_wait>
    sys_reboot(SYS_REBOOT_COLD);
    2606:	2001      	movs	r0, #1
    2608:	f7ff fb7a 	bl	1d00 <sys_reboot>
    260c:	2000dfc8 	.word	0x2000dfc8
    2610:	0000934a 	.word	0x0000934a
    2614:	2000c524 	.word	0x2000c524
    2618:	00009375 	.word	0x00009375
    261c:	00009398 	.word	0x00009398
    2620:	000093bb 	.word	0x000093bb
    2624:	000093db 	.word	0x000093db
    2628:	0003d090 	.word	0x0003d090

0000262c <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    262c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int rc;
    int off;
    int dec_off = 0;
    262e:	2400      	movs	r4, #0
{
    2630:	4606      	mov	r6, r0
    int full_line;
    int max_input;

    boot_uf = f;
    2632:	4b23      	ldr	r3, [pc, #140]	; (26c0 <boot_serial_start+0x94>)
    2634:	4d23      	ldr	r5, [pc, #140]	; (26c4 <boot_serial_start+0x98>)

    off = 0;
    while (1) {
        MCUBOOT_CPU_IDLE();
        MCUBOOT_WATCHDOG_FEED();
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2636:	4f24      	ldr	r7, [pc, #144]	; (26c8 <boot_serial_start+0x9c>)
    int dec_off = 0;
    2638:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    263a:	6018      	str	r0, [r3, #0]
    263c:	f000 f8fc 	bl	2838 <arch_cpu_idle>
    2640:	4b22      	ldr	r3, [pc, #136]	; (26cc <boot_serial_start+0xa0>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2642:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2646:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    264a:	aa01      	add	r2, sp, #4
    264c:	f8c3 5604 	str.w	r5, [r3, #1540]	; 0x604
    2650:	3101      	adds	r1, #1
    2652:	f8c3 5608 	str.w	r5, [r3, #1544]	; 0x608
    2656:	1938      	adds	r0, r7, r4
    2658:	f8c3 560c 	str.w	r5, [r3, #1548]	; 0x60c
    265c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
    2660:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    2664:	f8c3 5618 	str.w	r5, [r3, #1560]	; 0x618
    2668:	f8c3 561c 	str.w	r5, [r3, #1564]	; 0x61c
    266c:	6833      	ldr	r3, [r6, #0]
    266e:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    2670:	2800      	cmp	r0, #0
    2672:	9b01      	ldr	r3, [sp, #4]
    2674:	dc01      	bgt.n	267a <boot_serial_start+0x4e>
    2676:	2b00      	cmp	r3, #0
    2678:	d0e0      	beq.n	263c <boot_serial_start+0x10>
            continue;
        }
        off += rc;
    267a:	4404      	add	r4, r0
        if (!full_line) {
    267c:	b92b      	cbnz	r3, 268a <boot_serial_start+0x5e>
            if (off == max_input) {
    267e:	f240 2301 	movw	r3, #513	; 0x201
    2682:	429c      	cmp	r4, r3
    2684:	d1da      	bne.n	263c <boot_serial_start+0x10>

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
        }
        off = 0;
    2686:	2400      	movs	r4, #0
    2688:	e7d8      	b.n	263c <boot_serial_start+0x10>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    268a:	783b      	ldrb	r3, [r7, #0]
    268c:	2b06      	cmp	r3, #6
    268e:	d109      	bne.n	26a4 <boot_serial_start+0x78>
    2690:	787b      	ldrb	r3, [r7, #1]
    2692:	2b09      	cmp	r3, #9
    2694:	d10b      	bne.n	26ae <boot_serial_start+0x82>
            dec_off = 0;
    2696:	2300      	movs	r3, #0
    2698:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    269a:	4669      	mov	r1, sp
    269c:	1ea0      	subs	r0, r4, #2
    269e:	f7ff fd53 	bl	2148 <boot_serial_in_dec.constprop.0>
    26a2:	e004      	b.n	26ae <boot_serial_start+0x82>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    26a4:	2b04      	cmp	r3, #4
    26a6:	d102      	bne.n	26ae <boot_serial_start+0x82>
    26a8:	787b      	ldrb	r3, [r7, #1]
    26aa:	2b14      	cmp	r3, #20
    26ac:	d0f5      	beq.n	269a <boot_serial_start+0x6e>
        if (rc == 1) {
    26ae:	2801      	cmp	r0, #1
    26b0:	d1e9      	bne.n	2686 <boot_serial_start+0x5a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    26b2:	9900      	ldr	r1, [sp, #0]
    26b4:	4806      	ldr	r0, [pc, #24]	; (26d0 <boot_serial_start+0xa4>)
    26b6:	3902      	subs	r1, #2
    26b8:	f7ff fd7a 	bl	21b0 <boot_serial_input>
    26bc:	e7e3      	b.n	2686 <boot_serial_start+0x5a>
    26be:	bf00      	nop
    26c0:	2000dfb0 	.word	0x2000dfb0
    26c4:	6e524635 	.word	0x6e524635
    26c8:	2000fc0f 	.word	0x2000fc0f
    26cc:	50018000 	.word	0x50018000
    26d0:	2000fa10 	.word	0x2000fa10

000026d4 <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    26d4:	b530      	push	{r4, r5, lr}
    26d6:	b085      	sub	sp, #20
    26d8:	4605      	mov	r5, r0
    26da:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    26dc:	f003 fd8e 	bl	61fc <map_start_decode>
    26e0:	b920      	cbnz	r0, 26ec <decode_Upload+0x18>
    26e2:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    26e4:	f004 0001 	and.w	r0, r4, #1
    26e8:	b005      	add	sp, #20
    26ea:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    26ec:	230c      	movs	r3, #12
    26ee:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    26f2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    26f6:	2105      	movs	r1, #5
    26f8:	2001      	movs	r0, #1
    26fa:	4b05      	ldr	r3, [pc, #20]	; (2710 <decode_Upload+0x3c>)
    26fc:	9500      	str	r5, [sp, #0]
    26fe:	f003 fd8d 	bl	621c <multi_decode>
    2702:	4604      	mov	r4, r0
    2704:	4628      	mov	r0, r5
    2706:	f003 fd87 	bl	6218 <map_end_decode>
    270a:	2800      	cmp	r0, #0
    270c:	d0e9      	beq.n	26e2 <decode_Upload+0xe>
    270e:	e7e9      	b.n	26e4 <decode_Upload+0x10>
    2710:	00002715 	.word	0x00002715

00002714 <decode_Member>:
{
    2714:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2716:	4604      	mov	r4, r0
    2718:	460e      	mov	r6, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    271a:	f003 fead 	bl	6478 <union_start_code>
    271e:	4605      	mov	r5, r0
    2720:	b338      	cbz	r0, 2772 <decode_Member+0x5e>
    2722:	4b36      	ldr	r3, [pc, #216]	; (27fc <decode_Member+0xe8>)
    2724:	4669      	mov	r1, sp
    2726:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2728:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    272a:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    272c:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    272e:	f003 fd62 	bl	61f6 <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2732:	b138      	cbz	r0, 2744 <decode_Member+0x30>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2734:	4631      	mov	r1, r6
    2736:	4620      	mov	r0, r4
    2738:	f003 fd11 	bl	615e <intx32_decode>
    273c:	b110      	cbz	r0, 2744 <decode_Member+0x30>
    273e:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    2740:	7233      	strb	r3, [r6, #8]
    2742:	e040      	b.n	27c6 <decode_Member+0xb2>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2744:	4620      	mov	r0, r4
    2746:	f003 fe9a 	bl	647e <union_elem_code>
    274a:	b1a8      	cbz	r0, 2778 <decode_Member+0x64>
    274c:	4b2c      	ldr	r3, [pc, #176]	; (2800 <CONFIG_MAIN_STACK_SIZE>)
    274e:	4669      	mov	r1, sp
    2750:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    2752:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2754:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    2756:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2758:	f003 fd4d 	bl	61f6 <tstrx_expect>
    275c:	b160      	cbz	r0, 2778 <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    275e:	4631      	mov	r1, r6
    2760:	4620      	mov	r0, r4
    2762:	f003 fd45 	bl	61f0 <bstrx_decode>
    2766:	b138      	cbz	r0, 2778 <decode_Member+0x64>
    2768:	2501      	movs	r5, #1
    276a:	7235      	strb	r5, [r6, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    276c:	4620      	mov	r0, r4
    276e:	f003 fe8a 	bl	6486 <union_end_code>
}
    2772:	4628      	mov	r0, r5
    2774:	b002      	add	sp, #8
    2776:	bd70      	pop	{r4, r5, r6, pc}
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    2778:	4620      	mov	r0, r4
    277a:	f003 fe80 	bl	647e <union_elem_code>
    277e:	b178      	cbz	r0, 27a0 <decode_Member+0x8c>
    2780:	4b20      	ldr	r3, [pc, #128]	; (2804 <CONFIG_MAIN_STACK_SIZE+0x4>)
    2782:	4669      	mov	r1, sp
    2784:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    2786:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    2788:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    278a:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    278c:	f003 fd33 	bl	61f6 <tstrx_expect>
    2790:	b130      	cbz	r0, 27a0 <decode_Member+0x8c>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    2792:	4631      	mov	r1, r6
    2794:	4620      	mov	r0, r4
    2796:	f003 fce2 	bl	615e <intx32_decode>
    279a:	b108      	cbz	r0, 27a0 <decode_Member+0x8c>
    279c:	2302      	movs	r3, #2
    279e:	e7cf      	b.n	2740 <decode_Member+0x2c>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27a0:	4620      	mov	r0, r4
    27a2:	f003 fe6c 	bl	647e <union_elem_code>
    27a6:	b180      	cbz	r0, 27ca <decode_Member+0xb6>
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    27a8:	2503      	movs	r5, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27aa:	4b17      	ldr	r3, [pc, #92]	; (2808 <CONFIG_MAIN_STACK_SIZE+0x8>)
    27ac:	4669      	mov	r1, sp
    27ae:	4620      	mov	r0, r4
    27b0:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    27b2:	9501      	str	r5, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    27b4:	f003 fd1f 	bl	61f6 <tstrx_expect>
    27b8:	b138      	cbz	r0, 27ca <decode_Member+0xb6>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    27ba:	4631      	mov	r1, r6
    27bc:	4620      	mov	r0, r4
    27be:	f003 fcce 	bl	615e <intx32_decode>
    27c2:	b110      	cbz	r0, 27ca <decode_Member+0xb6>
    27c4:	7235      	strb	r5, [r6, #8]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    27c6:	2501      	movs	r5, #1
    27c8:	e7d0      	b.n	276c <decode_Member+0x58>
    27ca:	4620      	mov	r0, r4
    27cc:	f003 fe57 	bl	647e <union_elem_code>
    27d0:	b908      	cbnz	r0, 27d6 <decode_Member+0xc2>
    27d2:	2500      	movs	r5, #0
    27d4:	e7ca      	b.n	276c <decode_Member+0x58>
    27d6:	4b0d      	ldr	r3, [pc, #52]	; (280c <CONFIG_MAIN_STACK_SIZE+0xc>)
    27d8:	4669      	mov	r1, sp
    27da:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    27dc:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    27de:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    27e0:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    27e2:	f003 fd08 	bl	61f6 <tstrx_expect>
    27e6:	2800      	cmp	r0, #0
    27e8:	d0f3      	beq.n	27d2 <decode_Member+0xbe>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    27ea:	4631      	mov	r1, r6
    27ec:	4620      	mov	r0, r4
    27ee:	f003 fcff 	bl	61f0 <bstrx_decode>
    27f2:	2800      	cmp	r0, #0
    27f4:	d0ed      	beq.n	27d2 <decode_Member+0xbe>
    27f6:	2304      	movs	r3, #4
    27f8:	e7a2      	b.n	2740 <decode_Member+0x2c>
    27fa:	bf00      	nop
    27fc:	00009070 	.word	0x00009070
    2800:	00009423 	.word	0x00009423
    2804:	00009428 	.word	0x00009428
    2808:	0000933b 	.word	0x0000933b
    280c:	0000942c 	.word	0x0000942c

00002810 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    2810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    2812:	f04f 0c02 	mov.w	ip, #2
    2816:	2401      	movs	r4, #1
    2818:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    281c:	4c02      	ldr	r4, [pc, #8]	; (2828 <cbor_decode_Upload+0x18>)
    281e:	9400      	str	r4, [sp, #0]
    2820:	f003 fe35 	bl	648e <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    2824:	b004      	add	sp, #16
    2826:	bd10      	pop	{r4, pc}
    2828:	000026d5 	.word	0x000026d5

0000282c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    282c:	4901      	ldr	r1, [pc, #4]	; (2834 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    282e:	2210      	movs	r2, #16
	str	r2, [r1]
    2830:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2832:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2834:	e000ed10 	.word	0xe000ed10

00002838 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2838:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    283a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    283c:	f380 8811 	msr	BASEPRI, r0
	isb
    2840:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2844:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2848:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    284a:	b662      	cpsie	i
	isb
    284c:	f3bf 8f6f 	isb	sy

	bx	lr
    2850:	4770      	bx	lr
    2852:	bf00      	nop

00002854 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2854:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2856:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2858:	f381 8811 	msr	BASEPRI, r1

	wfe
    285c:	bf20      	wfe

	msr	BASEPRI, r0
    285e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2862:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2864:	4770      	bx	lr
    2866:	bf00      	nop

00002868 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2868:	b537      	push	{r0, r1, r2, r4, r5, lr}
    286a:	4605      	mov	r5, r0

	if (esf != NULL) {
    286c:	460c      	mov	r4, r1
    286e:	b1c9      	cbz	r1, 28a4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2870:	688b      	ldr	r3, [r1, #8]
    2872:	4810      	ldr	r0, [pc, #64]	; (28b4 <z_arm_fatal_error+0x4c>)
    2874:	9300      	str	r3, [sp, #0]
    2876:	e9d1 2300 	ldrd	r2, r3, [r1]
    287a:	2145      	movs	r1, #69	; 0x45
    287c:	f003 fb32 	bl	5ee4 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2880:	6963      	ldr	r3, [r4, #20]
    2882:	2145      	movs	r1, #69	; 0x45
    2884:	9300      	str	r3, [sp, #0]
    2886:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    288a:	480b      	ldr	r0, [pc, #44]	; (28b8 <z_arm_fatal_error+0x50>)
    288c:	f003 fb2a 	bl	5ee4 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2890:	2145      	movs	r1, #69	; 0x45
    2892:	69e2      	ldr	r2, [r4, #28]
    2894:	4809      	ldr	r0, [pc, #36]	; (28bc <z_arm_fatal_error+0x54>)
    2896:	f003 fb25 	bl	5ee4 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    289a:	2145      	movs	r1, #69	; 0x45
    289c:	69a2      	ldr	r2, [r4, #24]
    289e:	4808      	ldr	r0, [pc, #32]	; (28c0 <z_arm_fatal_error+0x58>)
    28a0:	f003 fb20 	bl	5ee4 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    28a4:	4621      	mov	r1, r4
    28a6:	4628      	mov	r0, r5
}
    28a8:	b003      	add	sp, #12
    28aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    28ae:	f002 bcb9 	b.w	5224 <z_fatal_error>
    28b2:	bf00      	nop
    28b4:	00009430 	.word	0x00009430
    28b8:	00009464 	.word	0x00009464
    28bc:	00009498 	.word	0x00009498
    28c0:	000094ac 	.word	0x000094ac

000028c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    28c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    28c6:	2b00      	cmp	r3, #0
    28c8:	db08      	blt.n	28dc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ca:	2201      	movs	r2, #1
    28cc:	f000 001f 	and.w	r0, r0, #31
    28d0:	fa02 f000 	lsl.w	r0, r2, r0
    28d4:	4a02      	ldr	r2, [pc, #8]	; (28e0 <arch_irq_enable+0x1c>)
    28d6:	095b      	lsrs	r3, r3, #5
    28d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    28dc:	4770      	bx	lr
    28de:	bf00      	nop
    28e0:	e000e100 	.word	0xe000e100

000028e4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    28e4:	4b05      	ldr	r3, [pc, #20]	; (28fc <arch_irq_is_enabled+0x18>)
    28e6:	0942      	lsrs	r2, r0, #5
    28e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    28ec:	2301      	movs	r3, #1
    28ee:	f000 001f 	and.w	r0, r0, #31
    28f2:	fa03 f000 	lsl.w	r0, r3, r0
}
    28f6:	4010      	ands	r0, r2
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	e000e100 	.word	0xe000e100

00002900 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2900:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2902:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    2904:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2908:	bfac      	ite	ge
    290a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    290e:	4b06      	ldrlt	r3, [pc, #24]	; (2928 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2910:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2914:	b2c9      	uxtb	r1, r1
    2916:	bfab      	itete	ge
    2918:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    291c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2920:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2924:	5419      	strblt	r1, [r3, r0]
}
    2926:	4770      	bx	lr
    2928:	e000ed14 	.word	0xe000ed14

0000292c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    292c:	bf30      	wfi
    b z_SysNmiOnReset
    292e:	f7ff bffd 	b.w	292c <z_SysNmiOnReset>
    2932:	bf00      	nop

00002934 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2934:	4a0b      	ldr	r2, [pc, #44]	; (2964 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2936:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2938:	4b0b      	ldr	r3, [pc, #44]	; (2968 <z_arm_prep_c+0x34>)
    293a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    293e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2944:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2948:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    294c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2954:	f002 fcbc 	bl	52d0 <z_bss_zero>
	z_data_copy();
    2958:	f002 fd00 	bl	535c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    295c:	f000 fa28 	bl	2db0 <z_arm_interrupt_init>
	z_cstart();
    2960:	f002 fcc2 	bl	52e8 <z_cstart>
    2964:	00000000 	.word	0x00000000
    2968:	e000ed00 	.word	0xe000ed00

0000296c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    296c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2970:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2972:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2976:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    297a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    297c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2980:	2902      	cmp	r1, #2
    beq _oops
    2982:	d0ff      	beq.n	2984 <_oops>

00002984 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2984:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2986:	f003 fdb4 	bl	64f2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    298a:	bd01      	pop	{r0, pc}

0000298c <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    298c:	4604      	mov	r4, r0
    298e:	4608      	mov	r0, r1
    2990:	4611      	mov	r1, r2
    2992:	461a      	mov	r2, r3
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2994:	2300      	movs	r3, #0
    2996:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    299a:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <loop+0x2>)
    299c:	2520      	movs	r5, #32
    299e:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    29a2:	f386 880b 	msr	PSPLIM, r6
    29a6:	f383 8809 	msr	PSP, r3
    29aa:	b663      	cpsie	if
    29ac:	f04f 0300 	mov.w	r3, #0
    29b0:	f383 8811 	msr	BASEPRI, r3
    29b4:	f3bf 8f6f 	isb	sy
    29b8:	47a0      	blx	r4
    29ba:	f385 8811 	msr	BASEPRI, r5
    29be:	f3bf 8f6f 	isb	sy

000029c2 <loop>:
    29c2:	e7fe      	b.n	29c2 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    29c4:	20012658 	.word	0x20012658

000029c8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    29c8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    29ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    29ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    29d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    29d6:	4904      	ldr	r1, [pc, #16]	; (29e8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    29d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    29da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    29dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    29de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    29e2:	4902      	ldr	r1, [pc, #8]	; (29ec <_isr_wrapper+0x24>)
	bx r1
    29e4:	4708      	bx	r1
    29e6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    29e8:	0000868c 	.word	0x0000868c
	ldr r1, =z_arm_int_exit
    29ec:	000029f1 	.word	0x000029f1

000029f0 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    29f0:	4770      	bx	lr
    29f2:	bf00      	nop

000029f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    29f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    29f6:	4c21      	ldr	r4, [pc, #132]	; (2a7c <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    29f8:	2145      	movs	r1, #69	; 0x45
    29fa:	4821      	ldr	r0, [pc, #132]	; (2a80 <usage_fault.constprop.0+0x8c>)
    29fc:	f003 fa72 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a02:	019d      	lsls	r5, r3, #6
    2a04:	d503      	bpl.n	2a0e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2a06:	2145      	movs	r1, #69	; 0x45
    2a08:	481e      	ldr	r0, [pc, #120]	; (2a84 <usage_fault.constprop.0+0x90>)
    2a0a:	f003 fa6b 	bl	5ee4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a10:	01dc      	lsls	r4, r3, #7
    2a12:	d503      	bpl.n	2a1c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2a14:	2145      	movs	r1, #69	; 0x45
    2a16:	481c      	ldr	r0, [pc, #112]	; (2a88 <usage_fault.constprop.0+0x94>)
    2a18:	f003 fa64 	bl	5ee4 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2a1c:	4d17      	ldr	r5, [pc, #92]	; (2a7c <usage_fault.constprop.0+0x88>)
    2a1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2a20:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2a24:	d004      	beq.n	2a30 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2a26:	2145      	movs	r1, #69	; 0x45
    2a28:	4818      	ldr	r0, [pc, #96]	; (2a8c <usage_fault.constprop.0+0x98>)
    2a2a:	f003 fa5b 	bl	5ee4 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2a2e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2a30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a32:	0318      	lsls	r0, r3, #12
    2a34:	d503      	bpl.n	2a3e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2a36:	2145      	movs	r1, #69	; 0x45
    2a38:	4815      	ldr	r0, [pc, #84]	; (2a90 <usage_fault.constprop.0+0x9c>)
    2a3a:	f003 fa53 	bl	5ee4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2a3e:	4d0f      	ldr	r5, [pc, #60]	; (2a7c <usage_fault.constprop.0+0x88>)
    2a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a42:	0359      	lsls	r1, r3, #13
    2a44:	d503      	bpl.n	2a4e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2a46:	2145      	movs	r1, #69	; 0x45
    2a48:	4812      	ldr	r0, [pc, #72]	; (2a94 <usage_fault.constprop.0+0xa0>)
    2a4a:	f003 fa4b 	bl	5ee4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a50:	039a      	lsls	r2, r3, #14
    2a52:	d503      	bpl.n	2a5c <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2a54:	2145      	movs	r1, #69	; 0x45
    2a56:	4810      	ldr	r0, [pc, #64]	; (2a98 <usage_fault.constprop.0+0xa4>)
    2a58:	f003 fa44 	bl	5ee4 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a5c:	4d07      	ldr	r5, [pc, #28]	; (2a7c <usage_fault.constprop.0+0x88>)
    2a5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2a60:	03db      	lsls	r3, r3, #15
    2a62:	d503      	bpl.n	2a6c <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2a64:	2145      	movs	r1, #69	; 0x45
    2a66:	480d      	ldr	r0, [pc, #52]	; (2a9c <usage_fault.constprop.0+0xa8>)
    2a68:	f003 fa3c 	bl	5ee4 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a6c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2a6e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2a74:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2a78:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2a7a:	bd38      	pop	{r3, r4, r5, pc}
    2a7c:	e000ed00 	.word	0xe000ed00
    2a80:	000094df 	.word	0x000094df
    2a84:	000094fc 	.word	0x000094fc
    2a88:	00009514 	.word	0x00009514
    2a8c:	00009533 	.word	0x00009533
    2a90:	00009562 	.word	0x00009562
    2a94:	00009585 	.word	0x00009585
    2a98:	000095af 	.word	0x000095af
    2a9c:	000095ce 	.word	0x000095ce

00002aa0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2aa0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2aa2:	4c23      	ldr	r4, [pc, #140]	; (2b30 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2aa4:	4606      	mov	r6, r0
    2aa6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2aa8:	4822      	ldr	r0, [pc, #136]	; (2b34 <bus_fault.constprop.0+0x94>)
    2aaa:	2145      	movs	r1, #69	; 0x45
    2aac:	f003 fa1a 	bl	5ee4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ab2:	04d9      	lsls	r1, r3, #19
    2ab4:	d503      	bpl.n	2abe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2ab6:	2145      	movs	r1, #69	; 0x45
    2ab8:	481f      	ldr	r0, [pc, #124]	; (2b38 <bus_fault.constprop.0+0x98>)
    2aba:	f003 fa13 	bl	5ee4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ac0:	051a      	lsls	r2, r3, #20
    2ac2:	d503      	bpl.n	2acc <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2ac4:	2145      	movs	r1, #69	; 0x45
    2ac6:	481d      	ldr	r0, [pc, #116]	; (2b3c <bus_fault.constprop.0+0x9c>)
    2ac8:	f003 fa0c 	bl	5ee4 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2acc:	4c18      	ldr	r4, [pc, #96]	; (2b30 <bus_fault.constprop.0+0x90>)
    2ace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ad0:	059b      	lsls	r3, r3, #22
    2ad2:	d510      	bpl.n	2af6 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2ad4:	481a      	ldr	r0, [pc, #104]	; (2b40 <bus_fault.constprop.0+0xa0>)
    2ad6:	2145      	movs	r1, #69	; 0x45
    2ad8:	f003 fa04 	bl	5ee4 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    2adc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ae0:	0418      	lsls	r0, r3, #16
    2ae2:	d508      	bpl.n	2af6 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2ae4:	2145      	movs	r1, #69	; 0x45
    2ae6:	4817      	ldr	r0, [pc, #92]	; (2b44 <bus_fault.constprop.0+0xa4>)
    2ae8:	f003 f9fc 	bl	5ee4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2aec:	b11e      	cbz	r6, 2af6 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2af4:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2af6:	4c0e      	ldr	r4, [pc, #56]	; (2b30 <bus_fault.constprop.0+0x90>)
    2af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2afa:	0559      	lsls	r1, r3, #21
    2afc:	d503      	bpl.n	2b06 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2afe:	2145      	movs	r1, #69	; 0x45
    2b00:	4811      	ldr	r0, [pc, #68]	; (2b48 <bus_fault.constprop.0+0xa8>)
    2b02:	f003 f9ef 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b08:	05da      	lsls	r2, r3, #23
    2b0a:	d50b      	bpl.n	2b24 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2b0c:	2145      	movs	r1, #69	; 0x45
    2b0e:	480f      	ldr	r0, [pc, #60]	; (2b4c <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b10:	f003 f9e8 	bl	5ee4 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2b14:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b16:	4a06      	ldr	r2, [pc, #24]	; (2b30 <bus_fault.constprop.0+0x90>)
    2b18:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b1a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2b1e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b20:	7028      	strb	r0, [r5, #0]
}
    2b22:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b26:	049b      	lsls	r3, r3, #18
    2b28:	d5f4      	bpl.n	2b14 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2b2a:	2145      	movs	r1, #69	; 0x45
    2b2c:	4808      	ldr	r0, [pc, #32]	; (2b50 <bus_fault.constprop.0+0xb0>)
    2b2e:	e7ef      	b.n	2b10 <bus_fault.constprop.0+0x70>
    2b30:	e000ed00 	.word	0xe000ed00
    2b34:	000095fe 	.word	0x000095fe
    2b38:	00009619 	.word	0x00009619
    2b3c:	0000962f 	.word	0x0000962f
    2b40:	00009647 	.word	0x00009647
    2b44:	00009665 	.word	0x00009665
    2b48:	0000967f 	.word	0x0000967f
    2b4c:	0000969f 	.word	0x0000969f
    2b50:	000096bc 	.word	0x000096bc

00002b54 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2b54:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b56:	4c22      	ldr	r4, [pc, #136]	; (2be0 <mem_manage_fault.constprop.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2b58:	4606      	mov	r6, r0
    2b5a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2b5c:	4821      	ldr	r0, [pc, #132]	; (2be4 <mem_manage_fault.constprop.0+0x90>)
    2b5e:	2145      	movs	r1, #69	; 0x45
    2b60:	f003 f9c0 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b66:	06d8      	lsls	r0, r3, #27
    2b68:	d503      	bpl.n	2b72 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b6a:	2145      	movs	r1, #69	; 0x45
    2b6c:	481e      	ldr	r0, [pc, #120]	; (2be8 <mem_manage_fault.constprop.0+0x94>)
    2b6e:	f003 f9b9 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b74:	0719      	lsls	r1, r3, #28
    2b76:	d503      	bpl.n	2b80 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2b78:	2145      	movs	r1, #69	; 0x45
    2b7a:	481c      	ldr	r0, [pc, #112]	; (2bec <mem_manage_fault.constprop.0+0x98>)
    2b7c:	f003 f9b2 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2b80:	4c17      	ldr	r4, [pc, #92]	; (2be0 <mem_manage_fault.constprop.0+0x8c>)
    2b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b84:	079a      	lsls	r2, r3, #30
    2b86:	d510      	bpl.n	2baa <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2b88:	2145      	movs	r1, #69	; 0x45
    2b8a:	4819      	ldr	r0, [pc, #100]	; (2bf0 <mem_manage_fault.constprop.0+0x9c>)
    2b8c:	f003 f9aa 	bl	5ee4 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    2b90:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b94:	061b      	lsls	r3, r3, #24
    2b96:	d508      	bpl.n	2baa <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2b98:	2145      	movs	r1, #69	; 0x45
    2b9a:	4816      	ldr	r0, [pc, #88]	; (2bf4 <mem_manage_fault.constprop.0+0xa0>)
    2b9c:	f003 f9a2 	bl	5ee4 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2ba0:	b11e      	cbz	r6, 2baa <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2ba8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2baa:	4c0d      	ldr	r4, [pc, #52]	; (2be0 <mem_manage_fault.constprop.0+0x8c>)
    2bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bae:	07d8      	lsls	r0, r3, #31
    2bb0:	d503      	bpl.n	2bba <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2bb2:	2145      	movs	r1, #69	; 0x45
    2bb4:	4810      	ldr	r0, [pc, #64]	; (2bf8 <mem_manage_fault.constprop.0+0xa4>)
    2bb6:	f003 f995 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2bbc:	0699      	lsls	r1, r3, #26
    2bbe:	d503      	bpl.n	2bc8 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    2bc0:	2145      	movs	r1, #69	; 0x45
    2bc2:	480e      	ldr	r0, [pc, #56]	; (2bfc <mem_manage_fault.constprop.0+0xa8>)
    2bc4:	f003 f98e 	bl	5ee4 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2bc8:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2bca:	4b05      	ldr	r3, [pc, #20]	; (2be0 <mem_manage_fault.constprop.0+0x8c>)
    2bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bce:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2bd0:	bf58      	it	pl
    2bd2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bd6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2bda:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2bdc:	7028      	strb	r0, [r5, #0]
}
    2bde:	bd70      	pop	{r4, r5, r6, pc}
    2be0:	e000ed00 	.word	0xe000ed00
    2be4:	000096f0 	.word	0x000096f0
    2be8:	0000970b 	.word	0x0000970b
    2bec:	0000962f 	.word	0x0000962f
    2bf0:	00009743 	.word	0x00009743
    2bf4:	00009760 	.word	0x00009760
    2bf8:	0000977b 	.word	0x0000977b
    2bfc:	000096bc 	.word	0x000096bc

00002c00 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c04:	4b54      	ldr	r3, [pc, #336]	; (2d58 <z_arm_fault+0x158>)
{
    2c06:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c08:	685e      	ldr	r6, [r3, #4]
    2c0a:	2500      	movs	r5, #0
{
    2c0c:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c0e:	f3c6 0408 	ubfx	r4, r6, #0, #9
    2c12:	f385 8811 	msr	BASEPRI, r5
    2c16:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c1a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c1e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c22:	d107      	bne.n	2c34 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c24:	f002 030c 	and.w	r3, r2, #12
    2c28:	2b08      	cmp	r3, #8
    2c2a:	d105      	bne.n	2c38 <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c2c:	2145      	movs	r1, #69	; 0x45
    2c2e:	484b      	ldr	r0, [pc, #300]	; (2d5c <z_arm_fault+0x15c>)
    2c30:	f003 f958 	bl	5ee4 <z_log_minimal_printk>
		return NULL;
    2c34:	462f      	mov	r7, r5
    2c36:	e003      	b.n	2c40 <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c38:	0712      	lsls	r2, r2, #28
    2c3a:	d401      	bmi.n	2c40 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    2c3c:	4607      	mov	r7, r0
			*nested_exc = true;
    2c3e:	2501      	movs	r5, #1
	*recoverable = false;
    2c40:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2c44:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2c46:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    2c4a:	2b09      	cmp	r3, #9
    2c4c:	d872      	bhi.n	2d34 <z_arm_fault+0x134>
    2c4e:	e8df f003 	tbb	[pc, r3]
    2c52:	6605      	.short	0x6605
    2c54:	7171636a 	.word	0x7171636a
    2c58:	6e717171 	.word	0x6e717171
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c5c:	4e3e      	ldr	r6, [pc, #248]	; (2d58 <z_arm_fault+0x158>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2c5e:	2145      	movs	r1, #69	; 0x45
    2c60:	483f      	ldr	r0, [pc, #252]	; (2d60 <z_arm_fault+0x160>)
    2c62:	f003 f93f 	bl	5ee4 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c66:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    2c68:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c6c:	f014 0402 	ands.w	r4, r4, #2
    2c70:	d005      	beq.n	2c7e <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    2c72:	2145      	movs	r1, #69	; 0x45
    2c74:	483b      	ldr	r0, [pc, #236]	; (2d64 <z_arm_fault+0x164>)
	PR_FAULT_INFO(
    2c76:	f003 f935 	bl	5ee4 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2c7a:	2400      	movs	r4, #0
}
    2c7c:	e006      	b.n	2c8c <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2c7e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2c80:	2b00      	cmp	r3, #0
    2c82:	da1d      	bge.n	2cc0 <z_arm_fault+0xc0>
		PR_EXC("  Debug event");
    2c84:	2145      	movs	r1, #69	; 0x45
    2c86:	4838      	ldr	r0, [pc, #224]	; (2d68 <z_arm_fault+0x168>)
    2c88:	f003 f92c 	bl	5ee4 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2c90:	b99b      	cbnz	r3, 2cba <z_arm_fault+0xba>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2c92:	2220      	movs	r2, #32
    2c94:	4639      	mov	r1, r7
    2c96:	a802      	add	r0, sp, #8
    2c98:	f003 fc7f 	bl	659a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c9e:	2d00      	cmp	r5, #0
    2ca0:	d055      	beq.n	2d4e <z_arm_fault+0x14e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2ca6:	b922      	cbnz	r2, 2cb2 <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2ca8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2cac:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2cb0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2cb2:	4620      	mov	r0, r4
    2cb4:	a902      	add	r1, sp, #8
    2cb6:	f7ff fdd7 	bl	2868 <z_arm_fatal_error>
}
    2cba:	b00a      	add	sp, #40	; 0x28
    2cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2cc0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2cc2:	005b      	lsls	r3, r3, #1
    2cc4:	d5e2      	bpl.n	2c8c <z_arm_fault+0x8c>
		PR_EXC("  Fault escalation (see below)");
    2cc6:	2145      	movs	r1, #69	; 0x45
    2cc8:	4828      	ldr	r0, [pc, #160]	; (2d6c <z_arm_fault+0x16c>)
    2cca:	f003 f90b 	bl	5ee4 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2cce:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2cd0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2cd4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2cd8:	429a      	cmp	r2, r3
    2cda:	d009      	beq.n	2cf0 <z_arm_fault+0xf0>
		} else if (SCB_MMFSR != 0) {
    2cdc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2ce0:	b16b      	cbz	r3, 2cfe <z_arm_fault+0xfe>
			reason = mem_manage_fault(esf, 1, recoverable);
    2ce2:	2001      	movs	r0, #1
    2ce4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2ce8:	f7ff ff34 	bl	2b54 <mem_manage_fault.constprop.0>
    2cec:	4604      	mov	r4, r0
		break;
    2cee:	e7cd      	b.n	2c8c <z_arm_fault+0x8c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2cf0:	2145      	movs	r1, #69	; 0x45
    2cf2:	683a      	ldr	r2, [r7, #0]
    2cf4:	481e      	ldr	r0, [pc, #120]	; (2d70 <z_arm_fault+0x170>)
    2cf6:	f003 f8f5 	bl	5ee4 <z_log_minimal_printk>
			reason = esf->basic.r0;
    2cfa:	683c      	ldr	r4, [r7, #0]
    2cfc:	e7c6      	b.n	2c8c <z_arm_fault+0x8c>
		} else if (SCB_BFSR != 0) {
    2cfe:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    2d02:	b12b      	cbz	r3, 2d10 <z_arm_fault+0x110>
			reason = bus_fault(esf, 1, recoverable);
    2d04:	2001      	movs	r0, #1
    2d06:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2d0a:	f7ff fec9 	bl	2aa0 <bus_fault.constprop.0>
    2d0e:	e7ed      	b.n	2cec <z_arm_fault+0xec>
		} else if (SCB_UFSR != 0) {
    2d10:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    2d12:	b29b      	uxth	r3, r3
    2d14:	2b00      	cmp	r3, #0
    2d16:	d0b9      	beq.n	2c8c <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2d18:	f7ff fe6c 	bl	29f4 <usage_fault.constprop.0>
    2d1c:	e7e6      	b.n	2cec <z_arm_fault+0xec>
		reason = mem_manage_fault(esf, 0, recoverable);
    2d1e:	2000      	movs	r0, #0
    2d20:	f10d 0107 	add.w	r1, sp, #7
    2d24:	e7e0      	b.n	2ce8 <z_arm_fault+0xe8>
		reason = bus_fault(esf, 0, recoverable);
    2d26:	2000      	movs	r0, #0
    2d28:	f10d 0107 	add.w	r1, sp, #7
    2d2c:	e7ed      	b.n	2d0a <z_arm_fault+0x10a>
	PR_FAULT_INFO(
    2d2e:	2145      	movs	r1, #69	; 0x45
    2d30:	4810      	ldr	r0, [pc, #64]	; (2d74 <z_arm_fault+0x174>)
    2d32:	e7a0      	b.n	2c76 <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    2d34:	4910      	ldr	r1, [pc, #64]	; (2d78 <z_arm_fault+0x178>)
    2d36:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2d3a:	4a10      	ldr	r2, [pc, #64]	; (2d7c <z_arm_fault+0x17c>)
    2d3c:	4810      	ldr	r0, [pc, #64]	; (2d80 <z_arm_fault+0x180>)
    2d3e:	bf08      	it	eq
    2d40:	460a      	moveq	r2, r1
    2d42:	f1a4 0310 	sub.w	r3, r4, #16
    2d46:	2145      	movs	r1, #69	; 0x45
    2d48:	f003 f8cc 	bl	5ee4 <z_log_minimal_printk>
    2d4c:	e795      	b.n	2c7a <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d4e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2d52:	f023 0301 	bic.w	r3, r3, #1
    2d56:	e7ab      	b.n	2cb0 <z_arm_fault+0xb0>
    2d58:	e000ed00 	.word	0xe000ed00
    2d5c:	000097cd 	.word	0x000097cd
    2d60:	000097fd 	.word	0x000097fd
    2d64:	00009819 	.word	0x00009819
    2d68:	0000983f 	.word	0x0000983f
    2d6c:	00009852 	.word	0x00009852
    2d70:	00009876 	.word	0x00009876
    2d74:	00009897 	.word	0x00009897
    2d78:	0000979f 	.word	0x0000979f
    2d7c:	000097b4 	.word	0x000097b4
    2d80:	000098c0 	.word	0x000098c0

00002d84 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2d84:	4b04      	ldr	r3, [pc, #16]	; (2d98 <z_arm_fault_init+0x14>)
    2d86:	695a      	ldr	r2, [r3, #20]
    2d88:	f042 0210 	orr.w	r2, r2, #16
    2d8c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2d8e:	695a      	ldr	r2, [r3, #20]
    2d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2d94:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2d96:	4770      	bx	lr
    2d98:	e000ed00 	.word	0xe000ed00

00002d9c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2d9c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2da0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2da4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2da6:	4672      	mov	r2, lr
	bl z_arm_fault
    2da8:	f7ff ff2a 	bl	2c00 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2dac:	bd01      	pop	{r0, pc}
    2dae:	bf00      	nop

00002db0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2db0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2db2:	2120      	movs	r1, #32
    2db4:	4803      	ldr	r0, [pc, #12]	; (2dc4 <z_arm_interrupt_init+0x14>)
    2db6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2db8:	3301      	adds	r3, #1
    2dba:	2b41      	cmp	r3, #65	; 0x41
    2dbc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2dc0:	d1f9      	bne.n	2db6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2dc2:	4770      	bx	lr
    2dc4:	e000e100 	.word	0xe000e100

00002dc8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2dc8:	2000      	movs	r0, #0
    msr CONTROL, r0
    2dca:	f380 8814 	msr	CONTROL, r0
    isb
    2dce:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2dd2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2dd4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2dd8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ddc:	f005 fbec 	bl	85b8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2de0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2de2:	490e      	ldr	r1, [pc, #56]	; (2e1c <__start+0x54>)
    str r0, [r1]
    2de4:	6008      	str	r0, [r1, #0]
    dsb
    2de6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2dea:	480d      	ldr	r0, [pc, #52]	; (2e20 <__start+0x58>)
    msr msp, r0
    2dec:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2df0:	f000 f83e 	bl	2e70 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2df4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2df6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2dfa:	480a      	ldr	r0, [pc, #40]	; (2e24 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2e00:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2e02:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2e06:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2e0a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2e0c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2e0e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2e12:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2e16:	f7ff fd8d 	bl	2934 <z_arm_prep_c>
    2e1a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2e1c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2e20:	20012658 	.word	0x20012658
    ldr r0, =z_interrupt_stacks
    2e24:	20012658 	.word	0x20012658

00002e28 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2e28:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e2c:	4905      	ldr	r1, [pc, #20]	; (2e44 <sys_arch_reboot+0x1c>)
    2e2e:	4b06      	ldr	r3, [pc, #24]	; (2e48 <sys_arch_reboot+0x20>)
    2e30:	68ca      	ldr	r2, [r1, #12]
    2e32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e36:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e38:	60cb      	str	r3, [r1, #12]
    2e3a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e3e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e40:	e7fd      	b.n	2e3e <sys_arch_reboot+0x16>
    2e42:	bf00      	nop
    2e44:	e000ed00 	.word	0xe000ed00
    2e48:	05fa0004 	.word	0x05fa0004

00002e4c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2e4c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2e4e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2e50:	4906      	ldr	r1, [pc, #24]	; (2e6c <z_arm_clear_arm_mpu_config+0x20>)
    2e52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    2e56:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2e5a:	4293      	cmp	r3, r2
    2e5c:	d100      	bne.n	2e60 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2e5e:	4770      	bx	lr
  mpu->RNR = rnr;
    2e60:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    2e64:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2e68:	3301      	adds	r3, #1
    2e6a:	e7f6      	b.n	2e5a <z_arm_clear_arm_mpu_config+0xe>
    2e6c:	e000ed00 	.word	0xe000ed00

00002e70 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2e70:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2e72:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2e74:	2400      	movs	r4, #0
    2e76:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2e7a:	f7ff ffe7 	bl	2e4c <z_arm_clear_arm_mpu_config>
    2e7e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e84:	4a0b      	ldr	r2, [pc, #44]	; (2eb4 <z_arm_init_arch_hw_at_boot+0x44>)
    2e86:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2e8a:	3301      	adds	r3, #1
    2e8c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2e8e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2e92:	d1f8      	bne.n	2e86 <z_arm_init_arch_hw_at_boot+0x16>
    2e94:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e9a:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2e9e:	3301      	adds	r3, #1
    2ea0:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2ea2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2ea6:	d1f8      	bne.n	2e9a <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    2ea8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2eaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2eae:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	e000e100 	.word	0xe000e100

00002eb8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2eb8:	2101      	movs	r1, #1
    2eba:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <z_arm_configure_static_mpu_regions+0xc>)
    2ebc:	4a02      	ldr	r2, [pc, #8]	; (2ec8 <z_arm_configure_static_mpu_regions+0x10>)
    2ebe:	4803      	ldr	r0, [pc, #12]	; (2ecc <z_arm_configure_static_mpu_regions+0x14>)
    2ec0:	f000 b91e 	b.w	3100 <arm_core_mpu_configure_static_mpu_regions>
    2ec4:	20040000 	.word	0x20040000
    2ec8:	2000c500 	.word	0x2000c500
    2ecc:	000089fc 	.word	0x000089fc

00002ed0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2ed0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2ed2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2ed4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2ed6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2eda:	f004 031f 	and.w	r3, r4, #31
    2ede:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2ee0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2ee2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2ee4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2ee8:	4905      	ldr	r1, [pc, #20]	; (2f00 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2eea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2eee:	f043 0301 	orr.w	r3, r3, #1
    2ef2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    2ef6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    2efa:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2efe:	bd10      	pop	{r4, pc}
    2f00:	e000ed00 	.word	0xe000ed00

00002f04 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2f04:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2f06:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2f08:	680c      	ldr	r4, [r1, #0]
{
    2f0a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2f0c:	890a      	ldrh	r2, [r1, #8]
    2f0e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    2f10:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f12:	3b01      	subs	r3, #1
    2f14:	f024 041f 	bic.w	r4, r4, #31
    2f18:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2f1a:	f002 021f 	and.w	r2, r2, #31
    2f1e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f22:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2f26:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f28:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2f2a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2f2e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    2f30:	d909      	bls.n	2f46 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f32:	4602      	mov	r2, r0
    2f34:	2145      	movs	r1, #69	; 0x45
    2f36:	4806      	ldr	r0, [pc, #24]	; (2f50 <mpu_configure_region+0x4c>)
    2f38:	f002 ffd4 	bl	5ee4 <z_log_minimal_printk>
    2f3c:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2f40:	4620      	mov	r0, r4
    2f42:	b005      	add	sp, #20
    2f44:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2f46:	4669      	mov	r1, sp
    2f48:	f7ff ffc2 	bl	2ed0 <region_init>
	return region_allocate_and_init(index,
    2f4c:	e7f8      	b.n	2f40 <mpu_configure_region+0x3c>
    2f4e:	bf00      	nop
    2f50:	000098dc 	.word	0x000098dc

00002f54 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f58:	4689      	mov	r9, r1
    2f5a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2f5c:	4606      	mov	r6, r0
    2f5e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2f62:	4d58      	ldr	r5, [pc, #352]	; (30c4 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2f64:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2f66:	45c8      	cmp	r8, r9
    2f68:	da27      	bge.n	2fba <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    2f6a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    2f6e:	f1ba 0f00 	cmp.w	sl, #0
    2f72:	d044      	beq.n	2ffe <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
    2f74:	f1ba 0f1f 	cmp.w	sl, #31
    2f78:	d918      	bls.n	2fac <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    2f7a:	f01a 0f1f 	tst.w	sl, #31
    2f7e:	d115      	bne.n	2fac <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    2f80:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    2f84:	f01b 0f1f 	tst.w	fp, #31
    2f88:	d110      	bne.n	2fac <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2f8a:	4658      	mov	r0, fp
    2f8c:	f003 fac0 	bl	6510 <arm_cmse_mpu_region_get>
    2f90:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2f92:	eb0a 000b 	add.w	r0, sl, fp
    2f96:	3801      	subs	r0, #1
    2f98:	f003 faba 	bl	6510 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2f9c:	4287      	cmp	r7, r0
    2f9e:	d010      	beq.n	2fc2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    2fa0:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2fa4:	463a      	mov	r2, r7
    2fa6:	2145      	movs	r1, #69	; 0x45
    2fa8:	4847      	ldr	r0, [pc, #284]	; (30c8 <mpu_configure_regions_and_partition.constprop.0+0x174>)
    2faa:	e002      	b.n	2fb2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2fac:	4642      	mov	r2, r8
    2fae:	2145      	movs	r1, #69	; 0x45
    2fb0:	4846      	ldr	r0, [pc, #280]	; (30cc <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2fb2:	f002 ff97 	bl	5ee4 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2fb6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2fba:	4620      	mov	r0, r4
    2fbc:	b005      	add	sp, #20
    2fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2fc2:	f117 0f16 	cmn.w	r7, #22
    2fc6:	d0ed      	beq.n	2fa4 <mpu_configure_regions_and_partition.constprop.0+0x50>
    2fc8:	42bc      	cmp	r4, r7
    2fca:	ddeb      	ble.n	2fa4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    2fcc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2fd0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    2fd4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2fd8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2fdc:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2fe0:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2fe4:	e9d6 3200 	ldrd	r3, r2, [r6]
    2fe8:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2fea:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2fec:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    2ff0:	d11d      	bne.n	302e <mpu_configure_regions_and_partition.constprop.0+0xda>
    2ff2:	45d3      	cmp	fp, sl
    2ff4:	d107      	bne.n	3006 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
    2ff6:	4631      	mov	r1, r6
    2ff8:	b2f8      	uxtb	r0, r7
    2ffa:	f7ff ff83 	bl	2f04 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2ffe:	f108 0801 	add.w	r8, r8, #1
    3002:	360c      	adds	r6, #12
    3004:	e7af      	b.n	2f66 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    3006:	4631      	mov	r1, r6
	MPU->RNR = index;
    3008:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    300c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    3010:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3014:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3018:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    301a:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    301e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3020:	f7ff ff70 	bl	2f04 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3024:	f110 0f16 	cmn.w	r0, #22
    3028:	d0c5      	beq.n	2fb6 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    302a:	1c44      	adds	r4, r0, #1
    302c:	e7e7      	b.n	2ffe <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
    302e:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    3030:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    3032:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    3034:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    3038:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    303c:	d108      	bne.n	3050 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    303e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3042:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3044:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    3048:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    304a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    304e:	e7e7      	b.n	3020 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3050:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    3054:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    3058:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    305a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    305e:	4631      	mov	r1, r6
    3060:	f7ff ff50 	bl	2f04 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3064:	f110 0f16 	cmn.w	r0, #22
    3068:	d0a5      	beq.n	2fb6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    306a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    306e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    3072:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    3076:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    307a:	f362 0304 	bfi	r3, r2, #0, #5
    307e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3082:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    3086:	f89d 2008 	ldrb.w	r2, [sp, #8]
    308a:	085b      	lsrs	r3, r3, #1
    308c:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    3090:	e9d6 3100 	ldrd	r3, r1, [r6]
    3094:	440b      	add	r3, r1
    3096:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    3098:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    309c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    309e:	445b      	add	r3, fp
    30a0:	eba3 030a 	sub.w	r3, r3, sl
    30a4:	b2c0      	uxtb	r0, r0
    30a6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    30aa:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    30ac:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    30b0:	9303      	str	r3, [sp, #12]
    30b2:	d903      	bls.n	30bc <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    30b4:	4602      	mov	r2, r0
    30b6:	2145      	movs	r1, #69	; 0x45
    30b8:	4805      	ldr	r0, [pc, #20]	; (30d0 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
    30ba:	e77a      	b.n	2fb2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    30bc:	4669      	mov	r1, sp
    30be:	f7ff ff07 	bl	2ed0 <region_init>
    30c2:	e7b2      	b.n	302a <mpu_configure_regions_and_partition.constprop.0+0xd6>
    30c4:	e000ed00 	.word	0xe000ed00
    30c8:	0000992f 	.word	0x0000992f
    30cc:	00009907 	.word	0x00009907
    30d0:	000098dc 	.word	0x000098dc

000030d4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    30d4:	2205      	movs	r2, #5
    30d6:	4b04      	ldr	r3, [pc, #16]	; (30e8 <arm_core_mpu_enable+0x14>)
    30d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    30dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30e0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    30e4:	4770      	bx	lr
    30e6:	bf00      	nop
    30e8:	e000ed00 	.word	0xe000ed00

000030ec <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    30ec:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    30f0:	2200      	movs	r2, #0
    30f2:	4b02      	ldr	r3, [pc, #8]	; (30fc <arm_core_mpu_disable+0x10>)
    30f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    30f8:	4770      	bx	lr
    30fa:	bf00      	nop
    30fc:	e000ed00 	.word	0xe000ed00

00003100 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3100:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3102:	4c03      	ldr	r4, [pc, #12]	; (3110 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3104:	7822      	ldrb	r2, [r4, #0]
    3106:	f7ff ff25 	bl	2f54 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    310a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    310c:	bd10      	pop	{r4, pc}
    310e:	bf00      	nop
    3110:	2000fe10 	.word	0x2000fe10

00003114 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3114:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3116:	4d0e      	ldr	r5, [pc, #56]	; (3150 <z_arm_mpu_init+0x3c>)
    3118:	682c      	ldr	r4, [r5, #0]
    311a:	2c10      	cmp	r4, #16
    311c:	d815      	bhi.n	314a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    311e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    3120:	f7ff ffe4 	bl	30ec <arm_core_mpu_disable>
	MPU->MAIR0 =
    3124:	4b0b      	ldr	r3, [pc, #44]	; (3154 <z_arm_mpu_init+0x40>)
    3126:	4a0c      	ldr	r2, [pc, #48]	; (3158 <z_arm_mpu_init+0x44>)
    3128:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    312c:	4284      	cmp	r4, r0
    312e:	d105      	bne.n	313c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3130:	4b0a      	ldr	r3, [pc, #40]	; (315c <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3132:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3134:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3136:	f7ff ffcd 	bl	30d4 <arm_core_mpu_enable>
}
    313a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    313c:	6869      	ldr	r1, [r5, #4]
    313e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3142:	f7ff fec5 	bl	2ed0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3146:	3001      	adds	r0, #1
    3148:	e7f0      	b.n	312c <z_arm_mpu_init+0x18>
		return -1;
    314a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    314e:	e7f4      	b.n	313a <z_arm_mpu_init+0x26>
    3150:	00008a08 	.word	0x00008a08
    3154:	e000ed00 	.word	0xe000ed00
    3158:	0044ffaa 	.word	0x0044ffaa
    315c:	2000fe10 	.word	0x2000fe10

00003160 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3160:	4b08      	ldr	r3, [pc, #32]	; (3184 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3162:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3164:	1ac3      	subs	r3, r0, r3
{
    3166:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3168:	4907      	ldr	r1, [pc, #28]	; (3188 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    316a:	109b      	asrs	r3, r3, #2
{
    316c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    316e:	4359      	muls	r1, r3
    3170:	2240      	movs	r2, #64	; 0x40
    3172:	4806      	ldr	r0, [pc, #24]	; (318c <onoff_stop+0x2c>)
    3174:	f003 fa41 	bl	65fa <stop>
	notify(mgr, res);
    3178:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    317a:	4601      	mov	r1, r0
	notify(mgr, res);
    317c:	4620      	mov	r0, r4
}
    317e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3182:	4718      	bx	r3
    3184:	2000dfdc 	.word	0x2000dfdc
    3188:	b6db6db7 	.word	0xb6db6db7
    318c:	00008614 	.word	0x00008614

00003190 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3190:	2340      	movs	r3, #64	; 0x40
{
    3192:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3194:	4c0b      	ldr	r4, [pc, #44]	; (31c4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3196:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    3198:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    319a:	460b      	mov	r3, r1
{
    319c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    319e:	490a      	ldr	r1, [pc, #40]	; (31c8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    31a0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31a2:	4361      	muls	r1, r4
{
    31a4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    31a6:	4a09      	ldr	r2, [pc, #36]	; (31cc <onoff_start+0x3c>)
    31a8:	4809      	ldr	r0, [pc, #36]	; (31d0 <onoff_start+0x40>)
    31aa:	f003 fa53 	bl	6654 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    31ae:	1e01      	subs	r1, r0, #0
    31b0:	da05      	bge.n	31be <onoff_start+0x2e>
		notify(mgr, err);
    31b2:	4630      	mov	r0, r6
    31b4:	462b      	mov	r3, r5
	}
}
    31b6:	b002      	add	sp, #8
    31b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    31bc:	4718      	bx	r3
}
    31be:	b002      	add	sp, #8
    31c0:	bd70      	pop	{r4, r5, r6, pc}
    31c2:	bf00      	nop
    31c4:	2000dfdc 	.word	0x2000dfdc
    31c8:	b6db6db7 	.word	0xb6db6db7
    31cc:	000066c9 	.word	0x000066c9
    31d0:	00008614 	.word	0x00008614

000031d4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    31d4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31d6:	2200      	movs	r2, #0
    31d8:	2101      	movs	r1, #1
{
    31da:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    31dc:	2005      	movs	r0, #5
    31de:	f7ff fb8f 	bl	2900 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    31e2:	2005      	movs	r0, #5
    31e4:	f7ff fb6e 	bl	28c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    31e8:	480f      	ldr	r0, [pc, #60]	; (3228 <clk_init+0x54>)
    31ea:	f001 fc0d 	bl	4a08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    31ee:	4b0f      	ldr	r3, [pc, #60]	; (322c <clk_init+0x58>)
    31f0:	4298      	cmp	r0, r3
    31f2:	d115      	bne.n	3220 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    31f4:	f005 f94a 	bl	848c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    31f8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    31fa:	490d      	ldr	r1, [pc, #52]	; (3230 <clk_init+0x5c>)
    31fc:	4630      	mov	r0, r6
    31fe:	f002 fe14 	bl	5e2a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3202:	2800      	cmp	r0, #0
    3204:	db0b      	blt.n	321e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3206:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    3208:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    320a:	4909      	ldr	r1, [pc, #36]	; (3230 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    320c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    320e:	f104 001c 	add.w	r0, r4, #28
    3212:	f002 fe0a 	bl	5e2a <onoff_manager_init>
		if (err < 0) {
    3216:	2800      	cmp	r0, #0
    3218:	db01      	blt.n	321e <clk_init+0x4a>
	}

	return 0;
    321a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    321c:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    321e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3220:	f06f 0004 	mvn.w	r0, #4
    3224:	e7fb      	b.n	321e <clk_init+0x4a>
    3226:	bf00      	nop
    3228:	00003269 	.word	0x00003269
    322c:	0bad0000 	.word	0x0bad0000
    3230:	00008a60 	.word	0x00008a60

00003234 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3234:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3236:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    3238:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    323a:	434b      	muls	r3, r1
    323c:	4808      	ldr	r0, [pc, #32]	; (3260 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    323e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3240:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3242:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    3244:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3248:	4418      	add	r0, r3
	sub_data->cb = NULL;
    324a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    324c:	f003 f9c2 	bl	65d4 <set_on_state>
	if (callback) {
    3250:	b12d      	cbz	r5, 325e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3252:	4632      	mov	r2, r6
    3254:	462b      	mov	r3, r5
}
    3256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    325a:	4802      	ldr	r0, [pc, #8]	; (3264 <clkstarted_handle.constprop.0+0x30>)
    325c:	4718      	bx	r3
}
    325e:	bd70      	pop	{r4, r5, r6, pc}
    3260:	2000dfdc 	.word	0x2000dfdc
    3264:	00008614 	.word	0x00008614

00003268 <clock_event_handler>:
	switch (event) {
    3268:	b110      	cbz	r0, 3270 <clock_event_handler+0x8>
    326a:	2801      	cmp	r0, #1
    326c:	d004      	beq.n	3278 <clock_event_handler+0x10>
    326e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3270:	4b03      	ldr	r3, [pc, #12]	; (3280 <clock_event_handler+0x18>)
    3272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3274:	075b      	lsls	r3, r3, #29
    3276:	d101      	bne.n	327c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3278:	f7ff bfdc 	b.w	3234 <clkstarted_handle.constprop.0>
}
    327c:	4770      	bx	lr
    327e:	bf00      	nop
    3280:	2000dfdc 	.word	0x2000dfdc

00003284 <generic_hfclk_start>:
{
    3284:	b508      	push	{r3, lr}
	__asm__ volatile(
    3286:	f04f 0320 	mov.w	r3, #32
    328a:	f3ef 8111 	mrs	r1, BASEPRI
    328e:	f383 8812 	msr	BASEPRI_MAX, r3
    3292:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3296:	4a12      	ldr	r2, [pc, #72]	; (32e0 <generic_hfclk_start+0x5c>)
    3298:	6813      	ldr	r3, [r2, #0]
    329a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    329e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    32a2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    32a4:	d00c      	beq.n	32c0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    32a6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    32aa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    32ae:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    32b2:	f013 0301 	ands.w	r3, r3, #1
    32b6:	d003      	beq.n	32c0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    32b8:	480a      	ldr	r0, [pc, #40]	; (32e4 <generic_hfclk_start+0x60>)
    32ba:	f003 f98b 	bl	65d4 <set_on_state>
			already_started = true;
    32be:	2301      	movs	r3, #1
	__asm__ volatile(
    32c0:	f381 8811 	msr	BASEPRI, r1
    32c4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    32c8:	b123      	cbz	r3, 32d4 <generic_hfclk_start+0x50>
}
    32ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    32ce:	2000      	movs	r0, #0
    32d0:	f7ff bfb0 	b.w	3234 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    32d4:	2001      	movs	r0, #1
}
    32d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    32da:	f005 b8e2 	b.w	84a2 <nrfx_clock_start>
    32de:	bf00      	nop
    32e0:	2000e02c 	.word	0x2000e02c
    32e4:	2000e01c 	.word	0x2000e01c

000032e8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    32e8:	4b07      	ldr	r3, [pc, #28]	; (3308 <generic_hfclk_stop+0x20>)
    32ea:	e8d3 2fef 	ldaex	r2, [r3]
    32ee:	f022 0102 	bic.w	r1, r2, #2
    32f2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    32f6:	2800      	cmp	r0, #0
    32f8:	d1f7      	bne.n	32ea <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    32fa:	07d3      	lsls	r3, r2, #31
    32fc:	d402      	bmi.n	3304 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    32fe:	2001      	movs	r0, #1
    3300:	f005 b8ff 	b.w	8502 <nrfx_clock_stop>
}
    3304:	4770      	bx	lr
    3306:	bf00      	nop
    3308:	2000e02c 	.word	0x2000e02c

0000330c <z_nrf_clock_control_lf_on>:
{
    330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3310:	2201      	movs	r2, #1
    3312:	4607      	mov	r7, r0
    3314:	4935      	ldr	r1, [pc, #212]	; (33ec <z_nrf_clock_control_lf_on+0xe0>)
    3316:	e8d1 3fef 	ldaex	r3, [r1]
    331a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    331e:	2800      	cmp	r0, #0
    3320:	d1f9      	bne.n	3316 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    3322:	b933      	cbnz	r3, 3332 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3324:	4932      	ldr	r1, [pc, #200]	; (33f0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    3326:	4833      	ldr	r0, [pc, #204]	; (33f4 <z_nrf_clock_control_lf_on+0xe8>)
    3328:	604b      	str	r3, [r1, #4]
    332a:	60cb      	str	r3, [r1, #12]
    332c:	608a      	str	r2, [r1, #8]
    332e:	f002 fd8f 	bl	5e50 <onoff_request>
	switch (start_mode) {
    3332:	1e7b      	subs	r3, r7, #1
    3334:	2b01      	cmp	r3, #1
    3336:	d831      	bhi.n	339c <z_nrf_clock_control_lf_on+0x90>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3338:	2f01      	cmp	r7, #1
    333a:	d107      	bne.n	334c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    333c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3340:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3344:	f003 0303 	and.w	r3, r3, #3
    3348:	2b02      	cmp	r3, #2
    334a:	d027      	beq.n	339c <z_nrf_clock_control_lf_on+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    334c:	f005 f929 	bl	85a2 <k_is_in_isr>
    3350:	4604      	mov	r4, r0
    3352:	b918      	cbnz	r0, 335c <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    3354:	4b28      	ldr	r3, [pc, #160]	; (33f8 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    3356:	781b      	ldrb	r3, [r3, #0]
    3358:	2b00      	cmp	r3, #0
    335a:	d13f      	bne.n	33dc <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    335c:	f04f 0320 	mov.w	r3, #32
    3360:	f3ef 8611 	mrs	r6, BASEPRI
    3364:	f383 8812 	msr	BASEPRI_MAX, r3
    3368:	f3bf 8f6f 	isb	sy
    336c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    336e:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3372:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3376:	f8df 9084 	ldr.w	r9, [pc, #132]	; 33fc <z_nrf_clock_control_lf_on+0xf0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    337a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    337e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3382:	03d2      	lsls	r2, r2, #15
    3384:	d50c      	bpl.n	33a0 <z_nrf_clock_control_lf_on+0x94>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3386:	f003 0303 	and.w	r3, r3, #3
    338a:	2b02      	cmp	r3, #2
    338c:	d001      	beq.n	3392 <z_nrf_clock_control_lf_on+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    338e:	2f01      	cmp	r7, #1
    3390:	d106      	bne.n	33a0 <z_nrf_clock_control_lf_on+0x94>
	if (isr_mode) {
    3392:	b1ec      	cbz	r4, 33d0 <z_nrf_clock_control_lf_on+0xc4>
	__asm__ volatile(
    3394:	f386 8811 	msr	BASEPRI, r6
    3398:	f3bf 8f6f 	isb	sy
}
    339c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    33a0:	4630      	mov	r0, r6
    33a2:	f7ff fa57 	bl	2854 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    33a6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    33aa:	b2db      	uxtb	r3, r3
    33ac:	2b01      	cmp	r3, #1
    33ae:	d1e4      	bne.n	337a <z_nrf_clock_control_lf_on+0x6e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    33b0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    33b4:	2a00      	cmp	r2, #0
    33b6:	d0e0      	beq.n	337a <z_nrf_clock_control_lf_on+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33b8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    33bc:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    33c0:	2202      	movs	r2, #2
    33c2:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    33c6:	2220      	movs	r2, #32
    33c8:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33cc:	60ab      	str	r3, [r5, #8]
}
    33ce:	e7d4      	b.n	337a <z_nrf_clock_control_lf_on+0x6e>
    p_reg->INTENSET = mask;
    33d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33d4:	2202      	movs	r2, #2
    33d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    33da:	e7df      	b.n	339c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    33dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33e0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    33e2:	4606      	mov	r6, r0
    33e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    33e8:	e7c1      	b.n	336e <z_nrf_clock_control_lf_on+0x62>
    33ea:	bf00      	nop
    33ec:	2000e030 	.word	0x2000e030
    33f0:	2000dfcc 	.word	0x2000dfcc
    33f4:	2000dff8 	.word	0x2000dff8
    33f8:	2000fe51 	.word	0x2000fe51
    33fc:	e000e100 	.word	0xe000e100

00003400 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3400:	b530      	push	{r4, r5, lr}
	return port->config;
    3402:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3404:	f001 051f 	and.w	r5, r1, #31
    3408:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    340a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    340e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3412:	b085      	sub	sp, #20
    3414:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    3418:	d104      	bne.n	3424 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    341a:	4628      	mov	r0, r5
    341c:	f001 fd80 	bl	4f20 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3420:	2000      	movs	r0, #0
    3422:	e02c      	b.n	347e <gpio_nrfx_pin_interrupt_configure+0x7e>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3424:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3428:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    342c:	d129      	bne.n	3482 <gpio_nrfx_pin_interrupt_configure+0x82>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    342e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3432:	bf0c      	ite	eq
    3434:	2304      	moveq	r3, #4
    3436:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3438:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    343c:	6883      	ldr	r3, [r0, #8]
    343e:	fa23 f101 	lsr.w	r1, r3, r1
    3442:	07c9      	lsls	r1, r1, #31
    3444:	d429      	bmi.n	349a <gpio_nrfx_pin_interrupt_configure+0x9a>
    3446:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    344a:	d126      	bne.n	349a <gpio_nrfx_pin_interrupt_configure+0x9a>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    344c:	4a1b      	ldr	r2, [pc, #108]	; (34bc <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    344e:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3452:	3380      	adds	r3, #128	; 0x80
    3454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3458:	07db      	lsls	r3, r3, #31
    345a:	d41e      	bmi.n	349a <gpio_nrfx_pin_interrupt_configure+0x9a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    345c:	f10d 0407 	add.w	r4, sp, #7
    3460:	4621      	mov	r1, r4
    3462:	4628      	mov	r0, r5
    3464:	f001 fcc4 	bl	4df0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3468:	4b15      	ldr	r3, [pc, #84]	; (34c0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    346a:	4298      	cmp	r0, r3
    346c:	d114      	bne.n	3498 <gpio_nrfx_pin_interrupt_configure+0x98>
			err = nrfx_gpiote_channel_alloc(&ch);
    346e:	4620      	mov	r0, r4
    3470:	f001 fd0c 	bl	4e8c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3474:	4b13      	ldr	r3, [pc, #76]	; (34c4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3476:	4298      	cmp	r0, r3
    3478:	d00e      	beq.n	3498 <gpio_nrfx_pin_interrupt_configure+0x98>
				return -ENOMEM;
    347a:	f06f 000b 	mvn.w	r0, #11
}
    347e:	b005      	add	sp, #20
    3480:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3482:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3486:	d005      	beq.n	3494 <gpio_nrfx_pin_interrupt_configure+0x94>
    3488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    348c:	bf0c      	ite	eq
    348e:	2302      	moveq	r3, #2
    3490:	2301      	movne	r3, #1
    3492:	e7d1      	b.n	3438 <gpio_nrfx_pin_interrupt_configure+0x38>
    3494:	2303      	movs	r3, #3
    3496:	e7cf      	b.n	3438 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3498:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    349a:	2300      	movs	r3, #0
    349c:	4628      	mov	r0, r5
    349e:	4619      	mov	r1, r3
    34a0:	aa02      	add	r2, sp, #8
    34a2:	f001 fb7b 	bl	4b9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    34a6:	4b07      	ldr	r3, [pc, #28]	; (34c4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    34a8:	4298      	cmp	r0, r3
    34aa:	d104      	bne.n	34b6 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    34ac:	2101      	movs	r1, #1
    34ae:	4628      	mov	r0, r5
    34b0:	f001 fcf2 	bl	4e98 <nrfx_gpiote_trigger_enable>
    34b4:	e7b4      	b.n	3420 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    34b6:	f06f 0004 	mvn.w	r0, #4
    34ba:	e7e0      	b.n	347e <gpio_nrfx_pin_interrupt_configure+0x7e>
    34bc:	50842500 	.word	0x50842500
    34c0:	0bad0004 	.word	0x0bad0004
    34c4:	0bad0000 	.word	0x0bad0000

000034c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    34c8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    34ca:	f001 fccf 	bl	4e6c <nrfx_gpiote_is_init>
    34ce:	4604      	mov	r4, r0
    34d0:	b968      	cbnz	r0, 34ee <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    34d2:	f001 fca3 	bl	4e1c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    34d6:	4b08      	ldr	r3, [pc, #32]	; (34f8 <gpio_nrfx_init+0x30>)
    34d8:	4298      	cmp	r0, r3
    34da:	d10a      	bne.n	34f2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    34dc:	4621      	mov	r1, r4
    34de:	4807      	ldr	r0, [pc, #28]	; (34fc <gpio_nrfx_init+0x34>)
    34e0:	f001 fc80 	bl	4de4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    34e4:	4622      	mov	r2, r4
    34e6:	2105      	movs	r1, #5
    34e8:	200d      	movs	r0, #13
    34ea:	f7ff fa09 	bl	2900 <z_arm_irq_priority_set>
		return 0;
    34ee:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    34f0:	bd10      	pop	{r4, pc}
		return -EIO;
    34f2:	f06f 0004 	mvn.w	r0, #4
    34f6:	e7fb      	b.n	34f0 <gpio_nrfx_init+0x28>
    34f8:	0bad0000 	.word	0x0bad0000
    34fc:	00003501 	.word	0x00003501

00003500 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3500:	0943      	lsrs	r3, r0, #5
{
    3502:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3504:	d110      	bne.n	3528 <nrfx_gpio_handler+0x28>
	return list->head;
    3506:	4b09      	ldr	r3, [pc, #36]	; (352c <nrfx_gpio_handler+0x2c>)
    3508:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    350a:	b169      	cbz	r1, 3528 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    350c:	2501      	movs	r5, #1
	return node->next;
    350e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3510:	4e07      	ldr	r6, [pc, #28]	; (3530 <nrfx_gpio_handler+0x30>)
    3512:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    3514:	688a      	ldr	r2, [r1, #8]
    3516:	402a      	ands	r2, r5
    3518:	d002      	beq.n	3520 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    351a:	4630      	mov	r0, r6
    351c:	684b      	ldr	r3, [r1, #4]
    351e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3520:	b114      	cbz	r4, 3528 <nrfx_gpio_handler+0x28>
    3522:	4621      	mov	r1, r4
    3524:	6824      	ldr	r4, [r4, #0]
    3526:	e7f5      	b.n	3514 <nrfx_gpio_handler+0x14>
}
    3528:	bd70      	pop	{r4, r5, r6, pc}
    352a:	bf00      	nop
    352c:	2000e034 	.word	0x2000e034
    3530:	0000862c 	.word	0x0000862c

00003534 <gpio_nrfx_pin_configure>:
{
    3534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3538:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    353a:	f001 051f 	and.w	r5, r1, #31
    353e:	7b3b      	ldrb	r3, [r7, #12]
{
    3540:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    3542:	4614      	mov	r4, r2
{
    3544:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3546:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    354a:	b9ca      	cbnz	r2, 3580 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    354c:	a902      	add	r1, sp, #8
    354e:	4628      	mov	r0, r5
    3550:	f001 fc4e 	bl	4df0 <nrfx_gpiote_channel_get>
    3554:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3556:	4628      	mov	r0, r5
    3558:	f001 fd0a 	bl	4f70 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    355c:	4b47      	ldr	r3, [pc, #284]	; (367c <gpio_nrfx_pin_configure+0x148>)
    355e:	4298      	cmp	r0, r3
    3560:	d004      	beq.n	356c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3562:	f06f 0004 	mvn.w	r0, #4
}
    3566:	b005      	add	sp, #20
    3568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    356c:	4284      	cmp	r4, r0
    356e:	d105      	bne.n	357c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3570:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3574:	f001 fc84 	bl	4e80 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3578:	42a0      	cmp	r0, r4
    357a:	d1f2      	bne.n	3562 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    357c:	2000      	movs	r0, #0
    357e:	e7f2      	b.n	3566 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3580:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3584:	f10d 0103 	add.w	r1, sp, #3
    3588:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    358a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    358e:	f001 fc2f 	bl	4df0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3592:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3594:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3596:	4649      	mov	r1, r9
    3598:	4628      	mov	r0, r5
    359a:	aa02      	add	r2, sp, #8
    359c:	f001 fafe 	bl	4b9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35a0:	4b36      	ldr	r3, [pc, #216]	; (367c <gpio_nrfx_pin_configure+0x148>)
    35a2:	4298      	cmp	r0, r3
    35a4:	d002      	beq.n	35ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    35a6:	f06f 0015 	mvn.w	r0, #21
    35aa:	e7dc      	b.n	3566 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    35ac:	4580      	cmp	r8, r0
    35ae:	d103      	bne.n	35b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    35b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    35b4:	f001 fc64 	bl	4e80 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    35b8:	05a3      	lsls	r3, r4, #22
    35ba:	d54c      	bpl.n	3656 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    35bc:	4b30      	ldr	r3, [pc, #192]	; (3680 <gpio_nrfx_pin_configure+0x14c>)
    35be:	4a31      	ldr	r2, [pc, #196]	; (3684 <gpio_nrfx_pin_configure+0x150>)
    35c0:	4023      	ands	r3, r4
    35c2:	4293      	cmp	r3, r2
    35c4:	d039      	beq.n	363a <gpio_nrfx_pin_configure+0x106>
    35c6:	d80c      	bhi.n	35e2 <gpio_nrfx_pin_configure+0xae>
    35c8:	2b06      	cmp	r3, #6
    35ca:	d014      	beq.n	35f6 <gpio_nrfx_pin_configure+0xc2>
    35cc:	d804      	bhi.n	35d8 <gpio_nrfx_pin_configure+0xa4>
    35ce:	b193      	cbz	r3, 35f6 <gpio_nrfx_pin_configure+0xc2>
    35d0:	2b02      	cmp	r3, #2
    35d2:	d1e8      	bne.n	35a6 <gpio_nrfx_pin_configure+0x72>
    35d4:	2304      	movs	r3, #4
    35d6:	e00e      	b.n	35f6 <gpio_nrfx_pin_configure+0xc2>
    35d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    35dc:	d1e3      	bne.n	35a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    35de:	2301      	movs	r3, #1
    35e0:	e009      	b.n	35f6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    35e2:	4a29      	ldr	r2, [pc, #164]	; (3688 <gpio_nrfx_pin_configure+0x154>)
    35e4:	4293      	cmp	r3, r2
    35e6:	d02a      	beq.n	363e <gpio_nrfx_pin_configure+0x10a>
    35e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    35ec:	d029      	beq.n	3642 <gpio_nrfx_pin_configure+0x10e>
    35ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    35f2:	d1d8      	bne.n	35a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    35f4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    35f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    35fa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    35fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3602:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3604:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3608:	bf4c      	ite	mi
    360a:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    360c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3610:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3612:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3616:	d516      	bpl.n	3646 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3618:	2101      	movs	r1, #1
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3620:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3622:	2200      	movs	r2, #0
    3624:	4628      	mov	r0, r5
    3626:	a901      	add	r1, sp, #4
    3628:	f001 fb62 	bl	4cf0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    362c:	4b13      	ldr	r3, [pc, #76]	; (367c <gpio_nrfx_pin_configure+0x148>)
    362e:	4298      	cmp	r0, r3
    3630:	bf14      	ite	ne
    3632:	f06f 0015 	mvnne.w	r0, #21
    3636:	2000      	moveq	r0, #0
    3638:	e795      	b.n	3566 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    363a:	2307      	movs	r3, #7
    363c:	e7db      	b.n	35f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    363e:	2305      	movs	r3, #5
    3640:	e7d9      	b.n	35f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3642:	2303      	movs	r3, #3
    3644:	e7d7      	b.n	35f6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3646:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3648:	bf41      	itttt	mi
    364a:	2101      	movmi	r1, #1
    364c:	687b      	ldrmi	r3, [r7, #4]
    364e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3652:	60de      	strmi	r6, [r3, #12]
}
    3654:	e7e5      	b.n	3622 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
    3656:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3658:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    365c:	bf4c      	ite	mi
    365e:	2403      	movmi	r4, #3
    3660:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3664:	461a      	mov	r2, r3
    3666:	4628      	mov	r0, r5
    3668:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    366a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    366e:	f001 fa95 	bl	4b9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3672:	4b02      	ldr	r3, [pc, #8]	; (367c <gpio_nrfx_pin_configure+0x148>)
    3674:	4298      	cmp	r0, r3
    3676:	d081      	beq.n	357c <gpio_nrfx_pin_configure+0x48>
    3678:	e795      	b.n	35a6 <gpio_nrfx_pin_configure+0x72>
    367a:	bf00      	nop
    367c:	0bad0000 	.word	0x0bad0000
    3680:	00f00006 	.word	0x00f00006
    3684:	00100006 	.word	0x00100006
    3688:	00400002 	.word	0x00400002

0000368c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    368c:	4b02      	ldr	r3, [pc, #8]	; (3698 <flash_nrf_pages_layout+0xc>)
    368e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3690:	2301      	movs	r3, #1
    3692:	6013      	str	r3, [r2, #0]
}
    3694:	4770      	bx	lr
    3696:	bf00      	nop
    3698:	2000e040 	.word	0x2000e040

0000369c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    369c:	4800      	ldr	r0, [pc, #0]	; (36a0 <flash_nrf_get_parameters+0x4>)
    369e:	4770      	bx	lr
    36a0:	00008ab4 	.word	0x00008ab4

000036a4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    36a4:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    36a6:	f004 ff6a 	bl	857e <nrfx_nvmc_flash_page_count_get>
    36aa:	4c03      	ldr	r4, [pc, #12]	; (36b8 <nrf_flash_init+0x14>)
    36ac:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    36ae:	f004 ff63 	bl	8578 <nrfx_nvmc_flash_page_size_get>
    36b2:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    36b4:	2000      	movs	r0, #0
    36b6:	bd10      	pop	{r4, pc}
    36b8:	2000e040 	.word	0x2000e040

000036bc <flash_nrf_erase>:
{
    36bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36be:	460e      	mov	r6, r1
    36c0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36c2:	f004 ff59 	bl	8578 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    36c6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36c8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    36ca:	4630      	mov	r0, r6
    36cc:	f003 f855 	bl	677a <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    36d0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    36d2:	b1f8      	cbz	r0, 3714 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    36d4:	fbb6 f3f5 	udiv	r3, r6, r5
    36d8:	fb05 6313 	mls	r3, r5, r3, r6
    36dc:	b923      	cbnz	r3, 36e8 <flash_nrf_erase+0x2c>
    36de:	fbb4 f0f5 	udiv	r0, r4, r5
    36e2:	fb05 4010 	mls	r0, r5, r0, r4
    36e6:	b140      	cbz	r0, 36fa <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    36e8:	4623      	mov	r3, r4
    36ea:	4632      	mov	r2, r6
    36ec:	2145      	movs	r1, #69	; 0x45
    36ee:	480c      	ldr	r0, [pc, #48]	; (3720 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    36f0:	f002 fbf8 	bl	5ee4 <z_log_minimal_printk>
		return -EINVAL;
    36f4:	f06f 0015 	mvn.w	r0, #21
    36f8:	e00b      	b.n	3712 <flash_nrf_erase+0x56>
		if (!n_pages) {
    36fa:	42a5      	cmp	r5, r4
    36fc:	d809      	bhi.n	3712 <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    36fe:	f004 ff3b 	bl	8578 <nrfx_nvmc_flash_page_size_get>
    3702:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3704:	4638      	mov	r0, r7
    3706:	f001 fd15 	bl	5134 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    370a:	1b64      	subs	r4, r4, r5
    370c:	442f      	add	r7, r5
    370e:	d1f9      	bne.n	3704 <flash_nrf_erase+0x48>
	return ret;
    3710:	4620      	mov	r0, r4
}
    3712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3714:	4623      	mov	r3, r4
    3716:	4632      	mov	r2, r6
    3718:	2145      	movs	r1, #69	; 0x45
    371a:	4802      	ldr	r0, [pc, #8]	; (3724 <flash_nrf_erase+0x68>)
    371c:	e7e8      	b.n	36f0 <flash_nrf_erase+0x34>
    371e:	bf00      	nop
    3720:	00009986 	.word	0x00009986
    3724:	000099aa 	.word	0x000099aa

00003728 <flash_nrf_write>:
{
    3728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    372a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    372c:	4619      	mov	r1, r3
    372e:	4630      	mov	r0, r6
{
    3730:	4617      	mov	r7, r2
    3732:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3734:	f003 f821 	bl	677a <is_regular_addr_valid>
    3738:	b940      	cbnz	r0, 374c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    373a:	4623      	mov	r3, r4
    373c:	4632      	mov	r2, r6
    373e:	2145      	movs	r1, #69	; 0x45
    3740:	4812      	ldr	r0, [pc, #72]	; (378c <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3742:	f002 fbcf 	bl	5ee4 <z_log_minimal_printk>
		return -EINVAL;
    3746:	f06f 0015 	mvn.w	r0, #21
}
    374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    374c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3750:	f015 0503 	ands.w	r5, r5, #3
    3754:	d004      	beq.n	3760 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3756:	4623      	mov	r3, r4
    3758:	4632      	mov	r2, r6
    375a:	2145      	movs	r1, #69	; 0x45
    375c:	480c      	ldr	r0, [pc, #48]	; (3790 <flash_nrf_write+0x68>)
    375e:	e7f0      	b.n	3742 <flash_nrf_write+0x1a>
	if (!len) {
    3760:	b18c      	cbz	r4, 3786 <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3762:	f024 0403 	bic.w	r4, r4, #3
    3766:	42ac      	cmp	r4, r5
    3768:	eb05 0006 	add.w	r0, r5, r6
    376c:	d106      	bne.n	377c <flash_nrf_write+0x54>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    376e:	4a09      	ldr	r2, [pc, #36]	; (3794 <flash_nrf_write+0x6c>)
    3770:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3774:	07db      	lsls	r3, r3, #31
    3776:	d5fb      	bpl.n	3770 <flash_nrf_write+0x48>
	return ret;
    3778:	2000      	movs	r0, #0
    377a:	e7e6      	b.n	374a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    377c:	5979      	ldr	r1, [r7, r5]
    377e:	f001 fcf7 	bl	5170 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    3782:	3504      	adds	r5, #4
}
    3784:	e7ef      	b.n	3766 <flash_nrf_write+0x3e>
		return 0;
    3786:	4620      	mov	r0, r4
    3788:	e7df      	b.n	374a <flash_nrf_write+0x22>
    378a:	bf00      	nop
    378c:	000099aa 	.word	0x000099aa
    3790:	000099cc 	.word	0x000099cc
    3794:	50039000 	.word	0x50039000

00003798 <flash_nrf_read>:
{
    3798:	b570      	push	{r4, r5, r6, lr}
    379a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    379c:	4619      	mov	r1, r3
    379e:	4628      	mov	r0, r5
{
    37a0:	4616      	mov	r6, r2
    37a2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    37a4:	f002 ffe9 	bl	677a <is_regular_addr_valid>
    37a8:	b940      	cbnz	r0, 37bc <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    37aa:	4809      	ldr	r0, [pc, #36]	; (37d0 <flash_nrf_read+0x38>)
    37ac:	4623      	mov	r3, r4
    37ae:	462a      	mov	r2, r5
    37b0:	2145      	movs	r1, #69	; 0x45
    37b2:	f002 fb97 	bl	5ee4 <z_log_minimal_printk>
    37b6:	f06f 0015 	mvn.w	r0, #21
}
    37ba:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    37bc:	b134      	cbz	r4, 37cc <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    37be:	4622      	mov	r2, r4
    37c0:	4629      	mov	r1, r5
    37c2:	4630      	mov	r0, r6
    37c4:	f002 fee9 	bl	659a <memcpy>
	return 0;
    37c8:	2000      	movs	r0, #0
    37ca:	e7f6      	b.n	37ba <flash_nrf_read+0x22>
		return 0;
    37cc:	4620      	mov	r0, r4
    37ce:	e7f4      	b.n	37ba <flash_nrf_read+0x22>
    37d0:	000099aa 	.word	0x000099aa

000037d4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    37d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37d6:	4605      	mov	r5, r0
    37d8:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    37da:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    37dc:	f004 fee1 	bl	85a2 <k_is_in_isr>
    37e0:	b910      	cbnz	r0, 37e8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    37e2:	4b1e      	ldr	r3, [pc, #120]	; (385c <uarte_nrfx_poll_out+0x88>)
	int key;

	if (isr_mode) {
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	b9a3      	cbnz	r3, 3812 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    37e8:	f04f 0320 	mov.w	r3, #32
    37ec:	f3ef 8411 	mrs	r4, BASEPRI
    37f0:	f383 8812 	msr	BASEPRI_MAX, r3
    37f4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    37f8:	6868      	ldr	r0, [r5, #4]
    37fa:	f003 f8fe 	bl	69fa <is_tx_ready.isra.0>
    37fe:	bb00      	cbnz	r0, 3842 <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    3800:	f384 8811 	msr	BASEPRI, r4
    3804:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3808:	e7ee      	b.n	37e8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    380a:	f384 8811 	msr	BASEPRI, r4
    380e:	f3bf 8f6f 	isb	sy
{
    3812:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3814:	6868      	ldr	r0, [r5, #4]
    3816:	f003 f8f0 	bl	69fa <is_tx_ready.isra.0>
    381a:	b928      	cbnz	r0, 3828 <uarte_nrfx_poll_out+0x54>
    381c:	2001      	movs	r0, #1
    381e:	f004 fe33 	bl	8488 <nrfx_busy_wait>
    3822:	3c01      	subs	r4, #1
    3824:	d1f6      	bne.n	3814 <uarte_nrfx_poll_out+0x40>
    3826:	e7f4      	b.n	3812 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    3828:	f04f 0320 	mov.w	r3, #32
    382c:	f3ef 8411 	mrs	r4, BASEPRI
    3830:	f383 8812 	msr	BASEPRI_MAX, r3
    3834:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3838:	6868      	ldr	r0, [r5, #4]
    383a:	f003 f8de 	bl	69fa <is_tx_ready.isra.0>
    383e:	2800      	cmp	r0, #0
    3840:	d0e3      	beq.n	380a <uarte_nrfx_poll_out+0x36>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3842:	4631      	mov	r1, r6
    3844:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    3848:	2201      	movs	r2, #1
    384a:	6868      	ldr	r0, [r5, #4]
    384c:	f003 f8ba 	bl	69c4 <tx_start.isra.0>
	__asm__ volatile(
    3850:	f384 8811 	msr	BASEPRI, r4
    3854:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    385a:	bf00      	nop
    385c:	2000fe51 	.word	0x2000fe51

00003860 <uarte_nrfx_configure>:
{
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    3862:	794b      	ldrb	r3, [r1, #5]
    3864:	2b01      	cmp	r3, #1
    3866:	d026      	beq.n	38b6 <uarte_nrfx_configure+0x56>
    3868:	2b03      	cmp	r3, #3
    386a:	d121      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    386c:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    386e:	798b      	ldrb	r3, [r1, #6]
    3870:	2b03      	cmp	r3, #3
    3872:	d11d      	bne.n	38b0 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    3874:	79cc      	ldrb	r4, [r1, #7]
    3876:	b10c      	cbz	r4, 387c <uarte_nrfx_configure+0x1c>
    3878:	2c01      	cmp	r4, #1
    387a:	d119      	bne.n	38b0 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    387c:	790a      	ldrb	r2, [r1, #4]
    387e:	b112      	cbz	r2, 3886 <uarte_nrfx_configure+0x26>
    3880:	2a02      	cmp	r2, #2
    3882:	d115      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3884:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3886:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3888:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    388a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    388e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3890:	d065      	beq.n	395e <uarte_nrfx_configure+0xfe>
    3892:	d82d      	bhi.n	38f0 <uarte_nrfx_configure+0x90>
    3894:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3898:	d064      	beq.n	3964 <uarte_nrfx_configure+0x104>
    389a:	d816      	bhi.n	38ca <uarte_nrfx_configure+0x6a>
    389c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    38a0:	d062      	beq.n	3968 <uarte_nrfx_configure+0x108>
    38a2:	d80a      	bhi.n	38ba <uarte_nrfx_configure+0x5a>
    38a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    38a8:	d061      	beq.n	396e <uarte_nrfx_configure+0x10e>
    38aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    38ae:	d061      	beq.n	3974 <uarte_nrfx_configure+0x114>
    38b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    38b4:	e052      	b.n	395c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    38b6:	2600      	movs	r6, #0
    38b8:	e7d9      	b.n	386e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    38ba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    38be:	d05c      	beq.n	397a <uarte_nrfx_configure+0x11a>
    38c0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    38c4:	d1f4      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    38c6:	4b37      	ldr	r3, [pc, #220]	; (39a4 <uarte_nrfx_configure+0x144>)
    38c8:	e03c      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38ca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    38ce:	d057      	beq.n	3980 <uarte_nrfx_configure+0x120>
    38d0:	d807      	bhi.n	38e2 <uarte_nrfx_configure+0x82>
    38d2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    38d6:	d055      	beq.n	3984 <uarte_nrfx_configure+0x124>
    38d8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    38dc:	d1e8      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    38de:	4b32      	ldr	r3, [pc, #200]	; (39a8 <uarte_nrfx_configure+0x148>)
    38e0:	e030      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38e2:	f647 2712 	movw	r7, #31250	; 0x7a12
    38e6:	42bb      	cmp	r3, r7
    38e8:	d1e2      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    38ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    38ee:	e029      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38f0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    38f4:	d048      	beq.n	3988 <uarte_nrfx_configure+0x128>
    38f6:	d813      	bhi.n	3920 <uarte_nrfx_configure+0xc0>
    38f8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    38fc:	d047      	beq.n	398e <uarte_nrfx_configure+0x12e>
    38fe:	d809      	bhi.n	3914 <uarte_nrfx_configure+0xb4>
    3900:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3904:	42bb      	cmp	r3, r7
    3906:	d044      	beq.n	3992 <uarte_nrfx_configure+0x132>
    3908:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    390c:	d1d0      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    390e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3912:	e017      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3914:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3918:	d1ca      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    391a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    391e:	e011      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3920:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3924:	d038      	beq.n	3998 <uarte_nrfx_configure+0x138>
    3926:	d808      	bhi.n	393a <uarte_nrfx_configure+0xda>
    3928:	4f20      	ldr	r7, [pc, #128]	; (39ac <uarte_nrfx_configure+0x14c>)
    392a:	42bb      	cmp	r3, r7
    392c:	d037      	beq.n	399e <uarte_nrfx_configure+0x13e>
    392e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3932:	d1bd      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3934:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3938:	e004      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    393a:	4f1d      	ldr	r7, [pc, #116]	; (39b0 <uarte_nrfx_configure+0x150>)
    393c:	42bb      	cmp	r3, r7
    393e:	d1b7      	bne.n	38b0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3944:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    3946:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3948:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    394c:	4322      	orrs	r2, r4
	data->uart_config = *cfg;
    394e:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3950:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3954:	c903      	ldmia	r1, {r0, r1}
    3956:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    395a:	2000      	movs	r0, #0
}
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    395e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3962:	e7ef      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3964:	4b13      	ldr	r3, [pc, #76]	; (39b4 <uarte_nrfx_configure+0x154>)
    3966:	e7ed      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3968:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    396c:	e7ea      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    396e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3972:	e7e7      	b.n	3944 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3974:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3978:	e7e4      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    397a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    397e:	e7e1      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3980:	4b0d      	ldr	r3, [pc, #52]	; (39b8 <uarte_nrfx_configure+0x158>)
    3982:	e7df      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3984:	4b0d      	ldr	r3, [pc, #52]	; (39bc <uarte_nrfx_configure+0x15c>)
    3986:	e7dd      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3988:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    398c:	e7da      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    398e:	4b0c      	ldr	r3, [pc, #48]	; (39c0 <uarte_nrfx_configure+0x160>)
    3990:	e7d8      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3992:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3996:	e7d5      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3998:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    399c:	e7d2      	b.n	3944 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    399e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    39a2:	e7cf      	b.n	3944 <uarte_nrfx_configure+0xe4>
    39a4:	0013b000 	.word	0x0013b000
    39a8:	004ea000 	.word	0x004ea000
    39ac:	0003d090 	.word	0x0003d090
    39b0:	000f4240 	.word	0x000f4240
    39b4:	00275000 	.word	0x00275000
    39b8:	0075c000 	.word	0x0075c000
    39bc:	003af000 	.word	0x003af000
    39c0:	013a9000 	.word	0x013a9000

000039c4 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    39c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    39c8:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = dev->config;
    39ca:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    39cc:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    39ce:	683c      	ldr	r4, [r7, #0]
    39d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    39d4:	6028      	str	r0, [r5, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    39d6:	6843      	ldr	r3, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39d8:	68de      	ldr	r6, [r3, #12]
    39da:	1c71      	adds	r1, r6, #1
    39dc:	d00b      	beq.n	39f6 <uarte_instance_init.constprop.0+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39de:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    39e0:	f8df c134 	ldr.w	ip, [pc, #308]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    *p_pin = pin_number & 0x1F;
    39e4:	f006 021f 	and.w	r2, r6, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    39e8:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    39ea:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
    39ee:	2103      	movs	r1, #3
    39f0:	3280      	adds	r2, #128	; 0x80
    39f2:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    39f6:	6919      	ldr	r1, [r3, #16]
    39f8:	1c4a      	adds	r2, r1, #1
    39fa:	d00f      	beq.n	3a1c <uarte_instance_init.constprop.0+0x58>
			nrf_gpio_cfg_input(cfg->rx_pin,
    39fc:	7f1a      	ldrb	r2, [r3, #28]
    39fe:	f8df e118 	ldr.w	lr, [pc, #280]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    3a02:	2a00      	cmp	r2, #0
    3a04:	bf14      	ite	ne
    3a06:	f04f 0c03 	movne.w	ip, #3
    3a0a:	f04f 0c00 	moveq.w	ip, #0
    *p_pin = pin_number & 0x1F;
    3a0e:	f001 021f 	and.w	r2, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3a16:	3280      	adds	r2, #128	; 0x80
    3a18:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a1c:	f8d3 c014 	ldr.w	ip, [r3, #20]
    3a20:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    3a24:	d00e      	beq.n	3a44 <uarte_instance_init.constprop.0+0x80>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a26:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
    3a2a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    *p_pin = pin_number & 0x1F;
    3a2e:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a32:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
    3a36:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3a3a:	f04f 0e03 	mov.w	lr, #3
    3a3e:	3280      	adds	r2, #128	; 0x80
    3a40:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a44:	f8d3 e018 	ldr.w	lr, [r3, #24]
    3a48:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    3a4c:	d00f      	beq.n	3a6e <uarte_instance_init.constprop.0+0xaa>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3a4e:	7f5a      	ldrb	r2, [r3, #29]
    3a50:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3b18 <uarte_instance_init.constprop.0+0x154>
    3a54:	2a00      	cmp	r2, #0
    3a56:	bf14      	ite	ne
    3a58:	f04f 0803 	movne.w	r8, #3
    3a5c:	f04f 0800 	moveq.w	r8, #0
    *p_pin = pin_number & 0x1F;
    3a60:	f00e 021f 	and.w	r2, lr, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3a64:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3a68:	3280      	adds	r2, #128	; 0x80
    3a6a:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3a6e:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    3a70:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3a74:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
    3a78:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    3a7c:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
    3a7e:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    3a82:	f7ff feed 	bl	3860 <uarte_nrfx_configure>
	if (err) {
    3a86:	4606      	mov	r6, r0
    3a88:	b978      	cbnz	r0, 3aaa <uarte_instance_init.constprop.0+0xe6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3a8a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3a8c:	0799      	lsls	r1, r3, #30
    3a8e:	d51b      	bpl.n	3ac8 <uarte_instance_init.constprop.0+0x104>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3a90:	f105 0016 	add.w	r0, r5, #22
    3a94:	f000 fffc 	bl	4a90 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3a98:	4b20      	ldr	r3, [pc, #128]	; (3b1c <uarte_instance_init.constprop.0+0x158>)
    3a9a:	4298      	cmp	r0, r3
    3a9c:	d008      	beq.n	3ab0 <uarte_instance_init.constprop.0+0xec>
		LOG_ERR("Failed to allocate PPI Channel");
    3a9e:	2145      	movs	r1, #69	; 0x45
    3aa0:	481f      	ldr	r0, [pc, #124]	; (3b20 <uarte_instance_init.constprop.0+0x15c>)
    3aa2:	f002 fa1f 	bl	5ee4 <z_log_minimal_printk>
		return -EIO;
    3aa6:	f06f 0604 	mvn.w	r6, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3aaa:	4630      	mov	r0, r6
    3aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3ab0:	7daa      	ldrb	r2, [r5, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3ab2:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    3ab6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3aba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3abe:	2301      	movs	r3, #1
    3ac0:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3ac2:	4a18      	ldr	r2, [pc, #96]	; (3b24 <uarte_instance_init.constprop.0+0x160>)
    3ac4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3ac8:	2308      	movs	r3, #8
    3aca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3ace:	7a3b      	ldrb	r3, [r7, #8]
    3ad0:	b95b      	cbnz	r3, 3aea <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3ad6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3ada:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3ade:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3ae2:	2301      	movs	r3, #1
    3ae4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ae8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3aea:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3aec:	3514      	adds	r5, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3aee:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3af0:	bf5c      	itt	pl
    3af2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3af6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3afa:	06db      	lsls	r3, r3, #27
    3afc:	bf44      	itt	mi
    3afe:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3b02:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3b06:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b08:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3b0c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b10:	2301      	movs	r3, #1
    3b12:	60a3      	str	r3, [r4, #8]
    3b14:	60e3      	str	r3, [r4, #12]
	return 0;
    3b16:	e7c8      	b.n	3aaa <uarte_instance_init.constprop.0+0xe6>
    3b18:	50842500 	.word	0x50842500
    3b1c:	0bad0000 	.word	0x0bad0000
    3b20:	000099f9 	.word	0x000099f9
    3b24:	50017000 	.word	0x50017000

00003b28 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b28:	2301      	movs	r3, #1
    3b2a:	4083      	lsls	r3, r0
{
    3b2c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b2e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b30:	4a0d      	ldr	r2, [pc, #52]	; (3b68 <compare_int_lock+0x40>)
    3b32:	e8d2 1fef 	ldaex	r1, [r2]
    3b36:	ea01 0c04 	and.w	ip, r1, r4
    3b3a:	e8c2 cfee 	stlex	lr, ip, [r2]
    3b3e:	f1be 0f00 	cmp.w	lr, #0
    3b42:	d1f6      	bne.n	3b32 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b48:	fa02 f000 	lsl.w	r0, r2, r0
    3b4c:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    3b50:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3b54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b58:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b5c:	420b      	tst	r3, r1
}
    3b5e:	bf14      	ite	ne
    3b60:	2001      	movne	r0, #1
    3b62:	2000      	moveq	r0, #0
    3b64:	bd10      	pop	{r4, pc}
    3b66:	bf00      	nop
    3b68:	2000e04c 	.word	0x2000e04c

00003b6c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b6c:	4919      	ldr	r1, [pc, #100]	; (3bd4 <sys_clock_timeout_handler+0x68>)
{
    3b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b70:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3b72:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b76:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3b78:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3b7c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3b80:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3b82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3b86:	d222      	bcs.n	3bce <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3b88:	4b13      	ldr	r3, [pc, #76]	; (3bd8 <sys_clock_timeout_handler+0x6c>)
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	0a1a      	lsrs	r2, r3, #8
    3b8e:	061b      	lsls	r3, r3, #24
    3b90:	195e      	adds	r6, r3, r5
    3b92:	4b12      	ldr	r3, [pc, #72]	; (3bdc <sys_clock_timeout_handler+0x70>)
    3b94:	f142 0700 	adc.w	r7, r2, #0
    3b98:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3b9c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3b9e:	f001 fc39 	bl	5414 <sys_clock_announce>
    return p_reg->CC[ch];
    3ba2:	00a3      	lsls	r3, r4, #2
    3ba4:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3ba8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    3bac:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3bb0:	42aa      	cmp	r2, r5
    3bb2:	d10b      	bne.n	3bcc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3bb4:	b91e      	cbnz	r6, 3bbe <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3bb6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3bba:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bbe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    3bc2:	4b07      	ldr	r3, [pc, #28]	; (3be0 <sys_clock_timeout_handler+0x74>)
    3bc4:	fa00 f404 	lsl.w	r4, r0, r4
    3bc8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3bce:	2600      	movs	r6, #0
    3bd0:	e7e5      	b.n	3b9e <sys_clock_timeout_handler+0x32>
    3bd2:	bf00      	nop
    3bd4:	2000c688 	.word	0x2000c688
    3bd8:	2000e050 	.word	0x2000e050
    3bdc:	2000c670 	.word	0x2000c670
    3be0:	50015000 	.word	0x50015000

00003be4 <compare_int_unlock>:
	if (key) {
    3be4:	b1e1      	cbz	r1, 3c20 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    3be6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3be8:	4a0e      	ldr	r2, [pc, #56]	; (3c24 <compare_int_unlock+0x40>)
    3bea:	4083      	lsls	r3, r0
    3bec:	e8d2 1fef 	ldaex	r1, [r2]
    3bf0:	4319      	orrs	r1, r3
    3bf2:	e8c2 1fec 	stlex	ip, r1, [r2]
    3bf6:	f1bc 0f00 	cmp.w	ip, #0
    3bfa:	d1f7      	bne.n	3bec <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3c00:	4a09      	ldr	r2, [pc, #36]	; (3c28 <compare_int_unlock+0x44>)
    3c02:	4083      	lsls	r3, r0
    3c04:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c08:	4b08      	ldr	r3, [pc, #32]	; (3c2c <compare_int_unlock+0x48>)
    3c0a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3c0e:	fa23 f000 	lsr.w	r0, r3, r0
    3c12:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c14:	bf42      	ittt	mi
    3c16:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3c1a:	4b05      	ldrmi	r3, [pc, #20]	; (3c30 <compare_int_unlock+0x4c>)
    3c1c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	2000e04c 	.word	0x2000e04c
    3c28:	50015000 	.word	0x50015000
    3c2c:	2000e048 	.word	0x2000e048
    3c30:	e000e100 	.word	0xe000e100

00003c34 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3c34:	4b0d      	ldr	r3, [pc, #52]	; (3c6c <z_nrf_rtc_timer_read+0x38>)
    3c36:	6818      	ldr	r0, [r3, #0]
    3c38:	0a01      	lsrs	r1, r0, #8
    3c3a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c3c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3c40:	4b0b      	ldr	r3, [pc, #44]	; (3c70 <z_nrf_rtc_timer_read+0x3c>)
    3c42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c46:	1818      	adds	r0, r3, r0
    3c48:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c50:	d20a      	bcs.n	3c68 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3c52:	4b08      	ldr	r3, [pc, #32]	; (3c74 <z_nrf_rtc_timer_read+0x40>)
    3c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c58:	4290      	cmp	r0, r2
    3c5a:	eb71 0303 	sbcs.w	r3, r1, r3
    3c5e:	d203      	bcs.n	3c68 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3c60:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3c64:	f141 0100 	adc.w	r1, r1, #0
}
    3c68:	4770      	bx	lr
    3c6a:	bf00      	nop
    3c6c:	2000e050 	.word	0x2000e050
    3c70:	50015000 	.word	0x50015000
    3c74:	2000c670 	.word	0x2000c670

00003c78 <compare_set>:
{
    3c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c7c:	b085      	sub	sp, #20
    3c7e:	4616      	mov	r6, r2
    3c80:	4698      	mov	r8, r3
    3c82:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3c84:	f7ff ff50 	bl	3b28 <compare_int_lock>
    3c88:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3c8a:	f7ff ffd3 	bl	3c34 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3c8e:	42b0      	cmp	r0, r6
    3c90:	eb71 0308 	sbcs.w	r3, r1, r8
    3c94:	d276      	bcs.n	3d84 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    3c96:	4b43      	ldr	r3, [pc, #268]	; (3da4 <compare_set+0x12c>)
    3c98:	1a30      	subs	r0, r6, r0
    3c9a:	eb68 0101 	sbc.w	r1, r8, r1
    3c9e:	4298      	cmp	r0, r3
    3ca0:	f171 0300 	sbcs.w	r3, r1, #0
    3ca4:	d27b      	bcs.n	3d9e <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
    3ca6:	4b40      	ldr	r3, [pc, #256]	; (3da8 <compare_set+0x130>)
    3ca8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3cac:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3cb0:	45d8      	cmp	r8, fp
    3cb2:	bf08      	it	eq
    3cb4:	4556      	cmpeq	r6, sl
    3cb6:	d050      	beq.n	3d5a <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    3cbc:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3cc0:	4614      	mov	r4, r2
    3cc2:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3cc6:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3cca:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    3cce:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cd0:	40ab      	lsls	r3, r5
    3cd2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cd6:	b2bf      	uxth	r7, r7
    3cd8:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    3cdc:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3cde:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3ce2:	4b32      	ldr	r3, [pc, #200]	; (3dac <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ce4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    3ce8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3cec:	1a40      	subs	r0, r0, r1
    3cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3cf2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3cf6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3cf8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3cfc:	d107      	bne.n	3d0e <compare_set+0x96>
    3cfe:	e9cd 2102 	strd	r2, r1, [sp, #8]
    3d02:	2013      	movs	r0, #19
    3d04:	f004 fc53 	bl	85ae <z_impl_k_busy_wait>
    3d08:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3d0c:	4b27      	ldr	r3, [pc, #156]	; (3dac <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3d0e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3d12:	eba4 000c 	sub.w	r0, r4, ip
    3d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3d1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d1e:	bf88      	it	hi
    3d20:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d22:	2000      	movs	r0, #0
    3d24:	6038      	str	r0, [r7, #0]
    3d26:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3d28:	9801      	ldr	r0, [sp, #4]
    3d2a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3d2e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3d32:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3d36:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3d3a:	4281      	cmp	r1, r0
    3d3c:	d006      	beq.n	3d4c <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    3d3e:	1a20      	subs	r0, r4, r0
    3d40:	3802      	subs	r0, #2
    3d42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3d46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d4a:	d819      	bhi.n	3d80 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    3d4c:	1aa4      	subs	r4, r4, r2
    3d4e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3d52:	eb14 0a06 	adds.w	sl, r4, r6
    3d56:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    3d5a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    3d5c:	4912      	ldr	r1, [pc, #72]	; (3da8 <compare_set+0x130>)
	cc_data[chan].callback = handler;
    3d5e:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3d60:	012b      	lsls	r3, r5, #4
    3d62:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    3d66:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    3d68:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    3d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d6e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3d70:	4628      	mov	r0, r5
    3d72:	9900      	ldr	r1, [sp, #0]
    3d74:	f7ff ff36 	bl	3be4 <compare_int_unlock>
}
    3d78:	4620      	mov	r0, r4
    3d7a:	b005      	add	sp, #20
    3d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d80:	4620      	mov	r0, r4
    3d82:	e7b1      	b.n	3ce8 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    3d84:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d86:	4a0a      	ldr	r2, [pc, #40]	; (3db0 <compare_set+0x138>)
    3d88:	40ab      	lsls	r3, r5
    3d8a:	e8d2 1fef 	ldaex	r1, [r2]
    3d8e:	4319      	orrs	r1, r3
    3d90:	e8c2 1fe0 	stlex	r0, r1, [r2]
    3d94:	2800      	cmp	r0, #0
    3d96:	d1f8      	bne.n	3d8a <compare_set+0x112>
    3d98:	46b2      	mov	sl, r6
    3d9a:	46c3      	mov	fp, r8
    3d9c:	e7dd      	b.n	3d5a <compare_set+0xe2>
			return -EINVAL;
    3d9e:	f06f 0415 	mvn.w	r4, #21
    3da2:	e7e5      	b.n	3d70 <compare_set+0xf8>
    3da4:	01000001 	.word	0x01000001
    3da8:	2000c678 	.word	0x2000c678
    3dac:	50015000 	.word	0x50015000
    3db0:	2000e048 	.word	0x2000e048

00003db4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    3db6:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3dc0:	4d16      	ldr	r5, [pc, #88]	; (3e1c <sys_clock_driver_init+0x68>)
    3dc2:	4b17      	ldr	r3, [pc, #92]	; (3e20 <sys_clock_driver_init+0x6c>)
    3dc4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3dc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3dd0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3dd6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3dda:	4b12      	ldr	r3, [pc, #72]	; (3e24 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3ddc:	2101      	movs	r1, #1
    3dde:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3de2:	2015      	movs	r0, #21
    3de4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3de8:	4622      	mov	r2, r4
    3dea:	f7fe fd89 	bl	2900 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3dee:	2015      	movs	r0, #21
    3df0:	f7fe fd68 	bl	28c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3df4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3df6:	4a0c      	ldr	r2, [pc, #48]	; (3e28 <sys_clock_driver_init+0x74>)
    3df8:	60ab      	str	r3, [r5, #8]
    3dfa:	602b      	str	r3, [r5, #0]
    3dfc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3dfe:	4b0b      	ldr	r3, [pc, #44]	; (3e2c <sys_clock_driver_init+0x78>)
    3e00:	4a0b      	ldr	r2, [pc, #44]	; (3e30 <sys_clock_driver_init+0x7c>)
    3e02:	9300      	str	r3, [sp, #0]
    3e04:	4620      	mov	r0, r4
    3e06:	2300      	movs	r3, #0
    3e08:	9401      	str	r4, [sp, #4]
    3e0a:	f7ff ff35 	bl	3c78 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3e0e:	4630      	mov	r0, r6
    3e10:	f7ff fa7c 	bl	330c <z_nrf_clock_control_lf_on>

	return 0;
}
    3e14:	4620      	mov	r0, r4
    3e16:	b002      	add	sp, #8
    3e18:	bd70      	pop	{r4, r5, r6, pc}
    3e1a:	bf00      	nop
    3e1c:	50015000 	.word	0x50015000
    3e20:	2000c678 	.word	0x2000c678
    3e24:	e000e100 	.word	0xe000e100
    3e28:	2000e04c 	.word	0x2000e04c
    3e2c:	00003b6d 	.word	0x00003b6d
    3e30:	007fffff 	.word	0x007fffff

00003e34 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    3e34:	4b35      	ldr	r3, [pc, #212]	; (3f0c <rtc_nrf_isr+0xd8>)
{
    3e36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3e3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3e3e:	0791      	lsls	r1, r2, #30
    3e40:	d50b      	bpl.n	3e5a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e42:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3e46:	b142      	cbz	r2, 3e5a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e48:	2200      	movs	r2, #0
    3e4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    3e4e:	4a30      	ldr	r2, [pc, #192]	; (3f10 <rtc_nrf_isr+0xdc>)
    3e50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3e54:	6813      	ldr	r3, [r2, #0]
    3e56:	3301      	adds	r3, #1
    3e58:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3e5a:	f04f 0320 	mov.w	r3, #32
    3e5e:	f3ef 8111 	mrs	r1, BASEPRI
    3e62:	f383 8812 	msr	BASEPRI_MAX, r3
    3e66:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3e6a:	4b28      	ldr	r3, [pc, #160]	; (3f0c <rtc_nrf_isr+0xd8>)
    3e6c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3e70:	03d2      	lsls	r2, r2, #15
    3e72:	d50e      	bpl.n	3e92 <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e74:	4a27      	ldr	r2, [pc, #156]	; (3f14 <rtc_nrf_isr+0xe0>)
    3e76:	e8d2 0fef 	ldaex	r0, [r2]
    3e7a:	f020 0401 	bic.w	r4, r0, #1
    3e7e:	e8c2 4fe5 	stlex	r5, r4, [r2]
    3e82:	2d00      	cmp	r5, #0
    3e84:	d1f7      	bne.n	3e76 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3e86:	2800      	cmp	r0, #0
    3e88:	d137      	bne.n	3efa <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e8a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    3e8e:	2a00      	cmp	r2, #0
    3e90:	d133      	bne.n	3efa <rtc_nrf_isr+0xc6>
{
    3e92:	2300      	movs	r3, #0
	__asm__ volatile(
    3e94:	f381 8811 	msr	BASEPRI, r1
    3e98:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3e9c:	b353      	cbz	r3, 3ef4 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
    3e9e:	f7ff fec9 	bl	3c34 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3ea2:	f04f 0320 	mov.w	r3, #32
    3ea6:	f3ef 8711 	mrs	r7, BASEPRI
    3eaa:	f383 8812 	msr	BASEPRI_MAX, r3
    3eae:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3eb2:	4b19      	ldr	r3, [pc, #100]	; (3f18 <rtc_nrf_isr+0xe4>)
    3eb4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    3eb8:	42a0      	cmp	r0, r4
    3eba:	eb71 0205 	sbcs.w	r2, r1, r5
    3ebe:	f04f 0200 	mov.w	r2, #0
    3ec2:	d321      	bcc.n	3f08 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
    3ec4:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ec8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ecc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    3ed0:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    3ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3ed6:	e9c3 8902 	strd	r8, r9, [r3, #8]
    3eda:	4b0c      	ldr	r3, [pc, #48]	; (3f0c <rtc_nrf_isr+0xd8>)
    3edc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    3ee0:	f387 8811 	msr	BASEPRI, r7
    3ee4:	f3bf 8f6f 	isb	sy
		if (handler) {
    3ee8:	b121      	cbz	r1, 3ef4 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
    3eea:	4622      	mov	r2, r4
    3eec:	462b      	mov	r3, r5
    3eee:	2000      	movs	r0, #0
    3ef0:	9600      	str	r6, [sp, #0]
    3ef2:	4788      	blx	r1
}
    3ef4:	b003      	add	sp, #12
    3ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3efa:	2200      	movs	r2, #0
    3efc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f04:	2301      	movs	r3, #1
}
    3f06:	e7c5      	b.n	3e94 <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3f08:	4611      	mov	r1, r2
    3f0a:	e7e9      	b.n	3ee0 <rtc_nrf_isr+0xac>
    3f0c:	50015000 	.word	0x50015000
    3f10:	2000e050 	.word	0x2000e050
    3f14:	2000e048 	.word	0x2000e048
    3f18:	2000c678 	.word	0x2000c678

00003f1c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f1c:	1c43      	adds	r3, r0, #1
{
    3f1e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f20:	d020      	beq.n	3f64 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f22:	2801      	cmp	r0, #1
    3f24:	dd20      	ble.n	3f68 <sys_clock_set_timeout+0x4c>
    3f26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f2a:	da1f      	bge.n	3f6c <sys_clock_set_timeout+0x50>
    3f2c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3f2e:	f7ff fe81 	bl	3c34 <z_nrf_rtc_timer_read>
    3f32:	4b0f      	ldr	r3, [pc, #60]	; (3f70 <sys_clock_set_timeout+0x54>)
    3f34:	e9d3 1300 	ldrd	r1, r3, [r3]
    3f38:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3f3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3f3e:	bf28      	it	cs
    3f40:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3f42:	3001      	adds	r0, #1
    3f44:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3f46:	480b      	ldr	r0, [pc, #44]	; (3f74 <sys_clock_set_timeout+0x58>)
    3f48:	4282      	cmp	r2, r0
    3f4a:	bf28      	it	cs
    3f4c:	4602      	movcs	r2, r0
    3f4e:	2000      	movs	r0, #0
    3f50:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3f52:	4909      	ldr	r1, [pc, #36]	; (3f78 <sys_clock_set_timeout+0x5c>)
    3f54:	9001      	str	r0, [sp, #4]
    3f56:	9100      	str	r1, [sp, #0]
    3f58:	f143 0300 	adc.w	r3, r3, #0
    3f5c:	f7ff fe8c 	bl	3c78 <compare_set>
}
    3f60:	b002      	add	sp, #8
    3f62:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3f64:	4803      	ldr	r0, [pc, #12]	; (3f74 <sys_clock_set_timeout+0x58>)
    3f66:	e7e1      	b.n	3f2c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3f68:	2400      	movs	r4, #0
    3f6a:	e7e0      	b.n	3f2e <sys_clock_set_timeout+0x12>
    3f6c:	4c01      	ldr	r4, [pc, #4]	; (3f74 <sys_clock_set_timeout+0x58>)
    3f6e:	e7de      	b.n	3f2e <sys_clock_set_timeout+0x12>
    3f70:	2000c688 	.word	0x2000c688
    3f74:	007fffff 	.word	0x007fffff
    3f78:	00003b6d 	.word	0x00003b6d

00003f7c <sys_clock_elapsed>:
{
    3f7c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3f7e:	f7ff fe59 	bl	3c34 <z_nrf_rtc_timer_read>
    3f82:	4b02      	ldr	r3, [pc, #8]	; (3f8c <sys_clock_elapsed+0x10>)
    3f84:	681b      	ldr	r3, [r3, #0]
}
    3f86:	1ac0      	subs	r0, r0, r3
    3f88:	bd08      	pop	{r3, pc}
    3f8a:	bf00      	nop
    3f8c:	2000c688 	.word	0x2000c688

00003f90 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3f90:	4803      	ldr	r0, [pc, #12]	; (3fa0 <k_sys_fatal_error_handler+0x10>)
    3f92:	2145      	movs	r1, #69	; 0x45
{
    3f94:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3f96:	f001 ffa5 	bl	5ee4 <z_log_minimal_printk>
		sys_arch_reboot(0);
    3f9a:	2000      	movs	r0, #0
    3f9c:	f7fe ff44 	bl	2e28 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3fa0:	00009a3b 	.word	0x00009a3b

00003fa4 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3fa4:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3fa6:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3fa8:	4a04      	ldr	r2, [pc, #16]	; (3fbc <boot_write_magic+0x18>)
    3faa:	2310      	movs	r3, #16
    3fac:	3910      	subs	r1, #16
    3fae:	f001 ffc3 	bl	5f38 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3fb2:	3800      	subs	r0, #0
    3fb4:	bf18      	it	ne
    3fb6:	2001      	movne	r0, #1
    3fb8:	bd08      	pop	{r3, pc}
    3fba:	bf00      	nop
    3fbc:	00008b48 	.word	0x00008b48

00003fc0 <boot_read_swap_state>:
{
    3fc0:	b530      	push	{r4, r5, lr}
    3fc2:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3fc4:	6881      	ldr	r1, [r0, #8]
{
    3fc6:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3fc8:	2310      	movs	r3, #16
    3fca:	aa02      	add	r2, sp, #8
    3fcc:	3910      	subs	r1, #16
{
    3fce:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3fd0:	f001 ff96 	bl	5f00 <flash_area_read>
    if (rc < 0) {
    3fd4:	2800      	cmp	r0, #0
    3fd6:	da02      	bge.n	3fde <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3fd8:	2001      	movs	r0, #1
}
    3fda:	b007      	add	sp, #28
    3fdc:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    3fde:	2210      	movs	r2, #16
    3fe0:	4628      	mov	r0, r5
    3fe2:	a902      	add	r1, sp, #8
    3fe4:	f002 fddb 	bl	6b9e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3fe8:	b368      	cbz	r0, 4046 <boot_read_swap_state+0x86>
        state->magic = BOOT_MAGIC_UNSET;
    3fea:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3fec:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    3fee:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3ff0:	2301      	movs	r3, #1
    3ff2:	4628      	mov	r0, r5
    3ff4:	f10d 0207 	add.w	r2, sp, #7
    3ff8:	3928      	subs	r1, #40	; 0x28
    3ffa:	f001 ff81 	bl	5f00 <flash_area_read>
    if (rc < 0) {
    3ffe:	2800      	cmp	r0, #0
    4000:	dbea      	blt.n	3fd8 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4002:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4006:	4628      	mov	r0, r5
    4008:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    400c:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    400e:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4010:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    4012:	2201      	movs	r2, #1
    4014:	f10d 0107 	add.w	r1, sp, #7
    4018:	f002 fdc1 	bl	6b9e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    401c:	b910      	cbnz	r0, 4024 <boot_read_swap_state+0x64>
    401e:	7863      	ldrb	r3, [r4, #1]
    4020:	2b04      	cmp	r3, #4
    4022:	d903      	bls.n	402c <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    4024:	2301      	movs	r3, #1
    4026:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    4028:	2300      	movs	r3, #0
    402a:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    402c:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    402e:	4628      	mov	r0, r5
    4030:	3a20      	subs	r2, #32
    4032:	1ca1      	adds	r1, r4, #2
    4034:	f002 fddb 	bl	6bee <boot_read_flag>
    if (rc) {
    4038:	2800      	cmp	r0, #0
    403a:	d1cd      	bne.n	3fd8 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    403c:	4628      	mov	r0, r5
    403e:	1ce1      	adds	r1, r4, #3
    4040:	f002 fe30 	bl	6ca4 <boot_read_image_ok>
    4044:	e7c9      	b.n	3fda <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    4046:	2210      	movs	r2, #16
    4048:	4904      	ldr	r1, [pc, #16]	; (405c <boot_read_swap_state+0x9c>)
    404a:	a802      	add	r0, sp, #8
    404c:	f002 fa7c 	bl	6548 <memcmp>
        return BOOT_MAGIC_GOOD;
    4050:	2800      	cmp	r0, #0
    4052:	bf14      	ite	ne
    4054:	2302      	movne	r3, #2
    4056:	2301      	moveq	r3, #1
    4058:	e7c8      	b.n	3fec <boot_read_swap_state+0x2c>
    405a:	bf00      	nop
    405c:	00008b48 	.word	0x00008b48

00004060 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    4060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4064:	b085      	sub	sp, #20
    4066:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4068:	4669      	mov	r1, sp
    406a:	2002      	movs	r0, #2
    406c:	f002 fe1e 	bl	6cac <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    4070:	4605      	mov	r5, r0
    4072:	b118      	cbz	r0, 407c <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    4074:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    4076:	b005      	add	sp, #20
    4078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    407c:	2006      	movs	r0, #6
    407e:	a902      	add	r1, sp, #8
    4080:	f002 fe14 	bl	6cac <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    4084:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4086:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    4088:	d13f      	bne.n	410a <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    408a:	4632      	mov	r2, r6
    408c:	2149      	movs	r1, #73	; 0x49
    408e:	482c      	ldr	r0, [pc, #176]	; (4140 <boot_swap_type_multi+0xe0>)
    4090:	f001 ff28 	bl	5ee4 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4094:	2303      	movs	r3, #3
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    4096:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    409a:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    409e:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    40a2:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    40a6:	f88d 500c 	strb.w	r5, [sp, #12]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    40aa:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    40ac:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    40b0:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    40b4:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    40b8:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    40bc:	f89d 9002 	ldrb.w	r9, [sp, #2]
    40c0:	4c20      	ldr	r4, [pc, #128]	; (4144 <boot_swap_type_multi+0xe4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    40c2:	4629      	mov	r1, r5
    40c4:	7820      	ldrb	r0, [r4, #0]
    40c6:	f002 fd7e 	bl	6bc6 <boot_magic_compatible_check>
    40ca:	b318      	cbz	r0, 4114 <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    40cc:	4631      	mov	r1, r6
    40ce:	7860      	ldrb	r0, [r4, #1]
    40d0:	f002 fd79 	bl	6bc6 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    40d4:	b1f0      	cbz	r0, 4114 <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    40d6:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    40d8:	2b04      	cmp	r3, #4
    40da:	d001      	beq.n	40e0 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    40dc:	42bb      	cmp	r3, r7
    40de:	d119      	bne.n	4114 <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    40e0:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    40e2:	2b04      	cmp	r3, #4
    40e4:	d001      	beq.n	40ea <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    40e6:	4543      	cmp	r3, r8
    40e8:	d114      	bne.n	4114 <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    40ea:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    40ec:	2b04      	cmp	r3, #4
    40ee:	d10f      	bne.n	4110 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    40f0:	7963      	ldrb	r3, [r4, #5]
    40f2:	2b02      	cmp	r3, #2
    40f4:	d119      	bne.n	412a <boot_swap_type_multi+0xca>
    40f6:	4a14      	ldr	r2, [pc, #80]	; (4148 <boot_swap_type_multi+0xe8>)
    40f8:	4814      	ldr	r0, [pc, #80]	; (414c <boot_swap_type_multi+0xec>)
    40fa:	2149      	movs	r1, #73	; 0x49
    40fc:	f001 fef2 	bl	5ee4 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    4100:	7960      	ldrb	r0, [r4, #5]
    4102:	1e83      	subs	r3, r0, #2
    4104:	2b02      	cmp	r3, #2
    4106:	d9b6      	bls.n	4076 <boot_swap_type_multi+0x16>
    4108:	e7b4      	b.n	4074 <boot_swap_type_multi+0x14>
    } else if (rc) {
    410a:	2800      	cmp	r0, #0
    410c:	d0cd      	beq.n	40aa <boot_swap_type_multi+0x4a>
    410e:	e7b1      	b.n	4074 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4110:	454b      	cmp	r3, r9
    4112:	d0ed      	beq.n	40f0 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    4114:	3201      	adds	r2, #1
    4116:	2a03      	cmp	r2, #3
    4118:	f104 0406 	add.w	r4, r4, #6
    411c:	d1d1      	bne.n	40c2 <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    411e:	480c      	ldr	r0, [pc, #48]	; (4150 <boot_swap_type_multi+0xf0>)
    4120:	2149      	movs	r1, #73	; 0x49
    4122:	f001 fedf 	bl	5ee4 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    4126:	2001      	movs	r0, #1
    4128:	e7a5      	b.n	4076 <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    412a:	2b03      	cmp	r3, #3
    412c:	d005      	beq.n	413a <boot_swap_type_multi+0xda>
    412e:	4a09      	ldr	r2, [pc, #36]	; (4154 <boot_swap_type_multi+0xf4>)
    4130:	4909      	ldr	r1, [pc, #36]	; (4158 <boot_swap_type_multi+0xf8>)
    4132:	2b04      	cmp	r3, #4
    4134:	bf18      	it	ne
    4136:	460a      	movne	r2, r1
    4138:	e7de      	b.n	40f8 <boot_swap_type_multi+0x98>
    413a:	4a08      	ldr	r2, [pc, #32]	; (415c <boot_swap_type_multi+0xfc>)
    413c:	e7dc      	b.n	40f8 <boot_swap_type_multi+0x98>
    413e:	bf00      	nop
    4140:	00009a80 	.word	0x00009a80
    4144:	00009af3 	.word	0x00009af3
    4148:	00009a64 	.word	0x00009a64
    414c:	00009acb 	.word	0x00009acb
    4150:	00009ade 	.word	0x00009ade
    4154:	00009a5d 	.word	0x00009a5d
    4158:	00009a6e 	.word	0x00009a6e
    415c:	00009a69 	.word	0x00009a69

00004160 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    4160:	6801      	ldr	r1, [r0, #0]
    4162:	4a0e      	ldr	r2, [pc, #56]	; (419c <verify_header+0x3c>)
{
    4164:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    4166:	4291      	cmp	r1, r2
    4168:	d115      	bne.n	4196 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    416a:	69c1      	ldr	r1, [r0, #28]
    416c:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    4170:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    4174:	4291      	cmp	r1, r2
    4176:	d10e      	bne.n	4196 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    4178:	6882      	ldr	r2, [r0, #8]
    417a:	2a01      	cmp	r2, #1
    417c:	d80b      	bhi.n	4196 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    417e:	68c2      	ldr	r2, [r0, #12]
    4180:	b112      	cbz	r2, 4188 <verify_header+0x28>
    4182:	6901      	ldr	r1, [r0, #16]
    4184:	428a      	cmp	r2, r1
    4186:	d006      	beq.n	4196 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    4188:	6958      	ldr	r0, [r3, #20]
    418a:	b128      	cbz	r0, 4198 <verify_header+0x38>
    418c:	699b      	ldr	r3, [r3, #24]
    418e:	1a1b      	subs	r3, r3, r0
    4190:	4258      	negs	r0, r3
    4192:	4158      	adcs	r0, r3
    4194:	4770      	bx	lr
        return( 1 );
    4196:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	ff00aa55 	.word	0xff00aa55

000041a0 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    41a0:	4b0d      	ldr	r3, [pc, #52]	; (41d8 <verify_chain+0x38>)
{
    41a2:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    41a4:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    41a6:	b1a6      	cbz	r6, 41d2 <verify_chain+0x32>
    41a8:	4630      	mov	r0, r6
    41aa:	f7ff ffd9 	bl	4160 <verify_header>
    41ae:	4604      	mov	r4, r0
    41b0:	b978      	cbnz	r0, 41d2 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    41b2:	68f3      	ldr	r3, [r6, #12]
    41b4:	b96b      	cbnz	r3, 41d2 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    41b6:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    41b8:	b90d      	cbnz	r5, 41be <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    41ba:	4620      	mov	r0, r4
    41bc:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    41be:	4628      	mov	r0, r5
    41c0:	f7ff ffce 	bl	4160 <verify_header>
    41c4:	b928      	cbnz	r0, 41d2 <verify_chain+0x32>
        if( cur->prev != prv )
    41c6:	68eb      	ldr	r3, [r5, #12]
    41c8:	42b3      	cmp	r3, r6
    41ca:	d102      	bne.n	41d2 <verify_chain+0x32>
        cur = cur->next;
    41cc:	462e      	mov	r6, r5
    41ce:	692d      	ldr	r5, [r5, #16]
    41d0:	e7f2      	b.n	41b8 <verify_chain+0x18>
        return( 1 );
    41d2:	2401      	movs	r4, #1
    41d4:	e7f1      	b.n	41ba <verify_chain+0x1a>
    41d6:	bf00      	nop
    41d8:	2000e054 	.word	0x2000e054

000041dc <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    41dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    41e0:	4f40      	ldr	r7, [pc, #256]	; (42e4 <buffer_alloc_calloc+0x108>)
    41e2:	683c      	ldr	r4, [r7, #0]
    41e4:	b1d4      	cbz	r4, 421c <buffer_alloc_calloc+0x40>
    41e6:	68bc      	ldr	r4, [r7, #8]
    41e8:	b1c4      	cbz	r4, 421c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    41ea:	2800      	cmp	r0, #0
    41ec:	d04d      	beq.n	428a <buffer_alloc_calloc+0xae>
    41ee:	2900      	cmp	r1, #0
    41f0:	d04b      	beq.n	428a <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    41f2:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    41f6:	fbb5 f0f0 	udiv	r0, r5, r0
    41fa:	4288      	cmp	r0, r1
    41fc:	d145      	bne.n	428a <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    41fe:	1d28      	adds	r0, r5, #4
    4200:	d843      	bhi.n	428a <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4202:	07a9      	lsls	r1, r5, #30
    4204:	d00d      	beq.n	4222 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    4206:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    420a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    420c:	68fc      	ldr	r4, [r7, #12]
    420e:	e003      	b.n	4218 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    4210:	6863      	ldr	r3, [r4, #4]
    4212:	42b3      	cmp	r3, r6
    4214:	d23b      	bcs.n	428e <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    4216:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    4218:	2c00      	cmp	r4, #0
    421a:	d1f9      	bne.n	4210 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    421c:	4620      	mov	r0, r4
    421e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4222:	462e      	mov	r6, r5
    4224:	e7f2      	b.n	420c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    4226:	60f8      	str	r0, [r7, #12]
    4228:	e044      	b.n	42b4 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    422a:	f106 0c20 	add.w	ip, r6, #32
    422e:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    4232:	3920      	subs	r1, #32
    4234:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    4236:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    4238:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 42e8 <buffer_alloc_calloc+0x10c>
    new->prev = cur;
    423c:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    4240:	6921      	ldr	r1, [r4, #16]
    4242:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    4244:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    4248:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 42ec <buffer_alloc_calloc+0x110>
    424c:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    4250:	b101      	cbz	r1, 4254 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    4252:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    4254:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    4258:	b1aa      	cbz	r2, 4286 <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    425a:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    425c:	699a      	ldr	r2, [r3, #24]
    425e:	b102      	cbz	r2, 4262 <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    4260:	6153      	str	r3, [r2, #20]
    cur->next = new;
    4262:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    4264:	2300      	movs	r3, #0
    cur->alloc = 1;
    4266:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    426a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    426e:	693b      	ldr	r3, [r7, #16]
    cur->size = len;
    4270:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    4274:	07db      	lsls	r3, r3, #31
    4276:	d52d      	bpl.n	42d4 <buffer_alloc_calloc+0xf8>
    4278:	f7ff ff92 	bl	41a0 <verify_chain>
    427c:	b350      	cbz	r0, 42d4 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    427e:	4b1c      	ldr	r3, [pc, #112]	; (42f0 <buffer_alloc_calloc+0x114>)
    4280:	4648      	mov	r0, r9
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	e025      	b.n	42d2 <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    4286:	60fb      	str	r3, [r7, #12]
    4288:	e7e8      	b.n	425c <buffer_alloc_calloc+0x80>
        return( NULL );
    428a:	2400      	movs	r4, #0
    428c:	e7c6      	b.n	421c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    428e:	68a3      	ldr	r3, [r4, #8]
    4290:	b11b      	cbz	r3, 429a <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    4292:	4b17      	ldr	r3, [pc, #92]	; (42f0 <buffer_alloc_calloc+0x114>)
    4294:	2001      	movs	r0, #1
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	4798      	blx	r3
            cur->prev_free->next_free = cur->next_free;
    429a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    if( cur->size - len < sizeof(memory_header) +
    429e:	6861      	ldr	r1, [r4, #4]
    42a0:	f104 0820 	add.w	r8, r4, #32
    42a4:	1b89      	subs	r1, r1, r6
    42a6:	2923      	cmp	r1, #35	; 0x23
    42a8:	d8bf      	bhi.n	422a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    42aa:	2301      	movs	r3, #1
    42ac:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    42ae:	2a00      	cmp	r2, #0
    42b0:	d0b9      	beq.n	4226 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    42b2:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    42b4:	69a3      	ldr	r3, [r4, #24]
    42b6:	b103      	cbz	r3, 42ba <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    42b8:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    42ba:	2300      	movs	r3, #0
        cur->next_free = NULL;
    42bc:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    42c0:	693b      	ldr	r3, [r7, #16]
    42c2:	07da      	lsls	r2, r3, #31
    42c4:	d506      	bpl.n	42d4 <buffer_alloc_calloc+0xf8>
    42c6:	f7ff ff6b 	bl	41a0 <verify_chain>
    42ca:	b118      	cbz	r0, 42d4 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    42cc:	2001      	movs	r0, #1
    42ce:	4b08      	ldr	r3, [pc, #32]	; (42f0 <buffer_alloc_calloc+0x114>)
    42d0:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    42d2:	4798      	blx	r3
    memset( ret, 0, original_len );
    42d4:	462a      	mov	r2, r5
    42d6:	2100      	movs	r1, #0
    42d8:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    42da:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    42dc:	f002 f968 	bl	65b0 <memset>
    return( ret );
    42e0:	e79c      	b.n	421c <buffer_alloc_calloc+0x40>
    42e2:	bf00      	nop
    42e4:	2000e054 	.word	0x2000e054
    42e8:	ff00aa55 	.word	0xff00aa55
    42ec:	ee119966 	.word	0xee119966
    42f0:	2000c584 	.word	0x2000c584

000042f4 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    42f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    42f8:	4605      	mov	r5, r0
    42fa:	2800      	cmp	r0, #0
    42fc:	d07c      	beq.n	43f8 <buffer_alloc_free+0x104>
    42fe:	4f3f      	ldr	r7, [pc, #252]	; (43fc <buffer_alloc_free+0x108>)
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	2b00      	cmp	r3, #0
    4304:	d078      	beq.n	43f8 <buffer_alloc_free+0x104>
    4306:	68ba      	ldr	r2, [r7, #8]
    4308:	2a00      	cmp	r2, #0
    430a:	d075      	beq.n	43f8 <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    430c:	4283      	cmp	r3, r0
    430e:	d803      	bhi.n	4318 <buffer_alloc_free+0x24>
    4310:	687a      	ldr	r2, [r7, #4]
    4312:	4413      	add	r3, r2
    4314:	4298      	cmp	r0, r3
    4316:	d303      	bcc.n	4320 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    4318:	4b39      	ldr	r3, [pc, #228]	; (4400 <buffer_alloc_free+0x10c>)
    431a:	2001      	movs	r0, #1
    431c:	681b      	ldr	r3, [r3, #0]
    431e:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    4320:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    4324:	4620      	mov	r0, r4
    4326:	f7ff ff1b 	bl	4160 <verify_header>
    432a:	b118      	cbz	r0, 4334 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    432c:	4b34      	ldr	r3, [pc, #208]	; (4400 <buffer_alloc_free+0x10c>)
    432e:	2001      	movs	r0, #1
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	4798      	blx	r3

    if( hdr->alloc != 1 )
    4334:	f855 3c18 	ldr.w	r3, [r5, #-24]
    4338:	2b01      	cmp	r3, #1
    433a:	d003      	beq.n	4344 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    433c:	4b30      	ldr	r3, [pc, #192]	; (4400 <buffer_alloc_free+0x10c>)
    433e:	2001      	movs	r0, #1
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	4798      	blx	r3
    }

    hdr->alloc = 0;
    4344:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    4346:	f855 6c14 	ldr.w	r6, [r5, #-20]
    hdr->alloc = 0;
    434a:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    434e:	b1ae      	cbz	r6, 437c <buffer_alloc_free+0x88>
    4350:	68b2      	ldr	r2, [r6, #8]
    4352:	b992      	cbnz	r2, 437a <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    4354:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    4358:	f103 0220 	add.w	r2, r3, #32
    435c:	6873      	ldr	r3, [r6, #4]
    435e:	4413      	add	r3, r2
    4360:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    4362:	f855 3c10 	ldr.w	r3, [r5, #-16]
    4366:	6133      	str	r3, [r6, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    4368:	b103      	cbz	r3, 436c <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    436a:	60de      	str	r6, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    436c:	4620      	mov	r0, r4
    436e:	2220      	movs	r2, #32
    4370:	2100      	movs	r1, #0
    4372:	f002 f91d 	bl	65b0 <memset>
    4376:	4623      	mov	r3, r4
    4378:	4634      	mov	r4, r6
    memory_header *hdr, *old = NULL;
    437a:	461e      	mov	r6, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    437c:	6920      	ldr	r0, [r4, #16]
    437e:	2800      	cmp	r0, #0
    4380:	d032      	beq.n	43e8 <buffer_alloc_free+0xf4>
    4382:	6883      	ldr	r3, [r0, #8]
    4384:	2b00      	cmp	r3, #0
    4386:	d12f      	bne.n	43e8 <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    4388:	6863      	ldr	r3, [r4, #4]
    438a:	6842      	ldr	r2, [r0, #4]
    438c:	3320      	adds	r3, #32
    438e:	4413      	add	r3, r2
    4390:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    4392:	6903      	ldr	r3, [r0, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    4394:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->next = hdr->next->next;
    4398:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    439a:	b9da      	cbnz	r2, 43d4 <buffer_alloc_free+0xe0>
    439c:	bb01      	cbnz	r1, 43e0 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    439e:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    43a0:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    43a2:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    43a4:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    43a6:	b1ea      	cbz	r2, 43e4 <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    43a8:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    43aa:	69a2      	ldr	r2, [r4, #24]
    43ac:	b102      	cbz	r2, 43b0 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    43ae:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    43b0:	b103      	cbz	r3, 43b4 <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    43b2:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    43b4:	2220      	movs	r2, #32
    43b6:	2100      	movs	r1, #0
    43b8:	f002 f8fa 	bl	65b0 <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    43bc:	693b      	ldr	r3, [r7, #16]
    43be:	079b      	lsls	r3, r3, #30
    43c0:	d51a      	bpl.n	43f8 <buffer_alloc_free+0x104>
    43c2:	f7ff feed 	bl	41a0 <verify_chain>
    43c6:	b1b8      	cbz	r0, 43f8 <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
}
    43c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    43cc:	4b0c      	ldr	r3, [pc, #48]	; (4400 <buffer_alloc_free+0x10c>)
    43ce:	2001      	movs	r0, #1
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    43d4:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    43d6:	69a1      	ldr	r1, [r4, #24]
    43d8:	2900      	cmp	r1, #0
    43da:	d0e0      	beq.n	439e <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    43dc:	614a      	str	r2, [r1, #20]
    43de:	e7de      	b.n	439e <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    43e0:	60f9      	str	r1, [r7, #12]
    43e2:	e7f8      	b.n	43d6 <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    43e4:	60fc      	str	r4, [r7, #12]
    43e6:	e7e0      	b.n	43aa <buffer_alloc_free+0xb6>
    if( old == NULL )
    43e8:	2e00      	cmp	r6, #0
    43ea:	d1e7      	bne.n	43bc <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    43f0:	b103      	cbz	r3, 43f4 <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    43f2:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    43f4:	60fc      	str	r4, [r7, #12]
    43f6:	e7e1      	b.n	43bc <buffer_alloc_free+0xc8>
}
    43f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43fc:	2000e054 	.word	0x2000e054
    4400:	2000c584 	.word	0x2000c584

00004404 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    4404:	b538      	push	{r3, r4, r5, lr}
    4406:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    4408:	2214      	movs	r2, #20
    440a:	2100      	movs	r1, #0
{
    440c:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    440e:	4812      	ldr	r0, [pc, #72]	; (4458 <mbedtls_memory_buffer_alloc_init+0x54>)
    4410:	f002 f8ce 	bl	65b0 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    4414:	4911      	ldr	r1, [pc, #68]	; (445c <mbedtls_memory_buffer_alloc_init+0x58>)
    4416:	4812      	ldr	r0, [pc, #72]	; (4460 <mbedtls_memory_buffer_alloc_init+0x5c>)
    4418:	f000 f832 	bl	4480 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    441c:	2d23      	cmp	r5, #35	; 0x23
    441e:	d91a      	bls.n	4456 <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    4420:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    4424:	bf1f      	itttt	ne
    4426:	3d04      	subne	r5, #4
    4428:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    442a:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    442e:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    4430:	462a      	mov	r2, r5
    4432:	2100      	movs	r1, #0
    4434:	4620      	mov	r0, r4
    4436:	f002 f8bb 	bl	65b0 <memset>

    heap.buf = buf;
    443a:	4b07      	ldr	r3, [pc, #28]	; (4458 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    443c:	4a09      	ldr	r2, [pc, #36]	; (4464 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    443e:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    4442:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    4444:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    4446:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    444a:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    444c:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    4450:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    4452:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    4454:	60dc      	str	r4, [r3, #12]
}
    4456:	bd38      	pop	{r3, r4, r5, pc}
    4458:	2000e054 	.word	0x2000e054
    445c:	000042f5 	.word	0x000042f5
    4460:	000041dd 	.word	0x000041dd
    4464:	ff00aa55 	.word	0xff00aa55

00004468 <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    4468:	4b01      	ldr	r3, [pc, #4]	; (4470 <mbedtls_calloc+0x8>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	4718      	bx	r3
    446e:	bf00      	nop
    4470:	2000c580 	.word	0x2000c580

00004474 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    4474:	4b01      	ldr	r3, [pc, #4]	; (447c <mbedtls_free+0x8>)
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	4718      	bx	r3
    447a:	bf00      	nop
    447c:	2000c588 	.word	0x2000c588

00004480 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <mbedtls_platform_set_calloc_free+0xc>)
    4482:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    4484:	4b02      	ldr	r3, [pc, #8]	; (4490 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    4486:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    4488:	6019      	str	r1, [r3, #0]
}
    448a:	4770      	bx	lr
    448c:	2000c580 	.word	0x2000c580
    4490:	2000c588 	.word	0x2000c588

00004494 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    4494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    4496:	f100 0608 	add.w	r6, r0, #8
    449a:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    449c:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    449e:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    44a0:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    44a2:	f002 ffe4 	bl	746e <mbedtls_mpi_size>
    44a6:	4287      	cmp	r7, r0
    44a8:	d116      	bne.n	44d8 <rsa_check_context.constprop.0+0x44>
    44aa:	6863      	ldr	r3, [r4, #4]
    44ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    44b0:	d812      	bhi.n	44d8 <rsa_check_context.constprop.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    44b2:	2100      	movs	r1, #0
    44b4:	4630      	mov	r0, r6
    44b6:	f003 f939 	bl	772c <mbedtls_mpi_cmp_int>
    44ba:	2800      	cmp	r0, #0
    44bc:	dd0c      	ble.n	44d8 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    44be:	2100      	movs	r1, #0
    44c0:	4630      	mov	r0, r6
    44c2:	f002 ffa7 	bl	7414 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    44c6:	b138      	cbz	r0, 44d8 <rsa_check_context.constprop.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    44c8:	b945      	cbnz	r5, 44dc <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    44ca:	2100      	movs	r1, #0
    44cc:	f104 0014 	add.w	r0, r4, #20
    44d0:	f003 f92c 	bl	772c <mbedtls_mpi_cmp_int>
    44d4:	2800      	cmp	r0, #0
    44d6:	dc1e      	bgt.n	4516 <rsa_check_context.constprop.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    44d8:	481b      	ldr	r0, [pc, #108]	; (4548 <rsa_check_context.constprop.0+0xb4>)
    44da:	e01e      	b.n	451a <rsa_check_context.constprop.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    44dc:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    44e0:	2100      	movs	r1, #0
    44e2:	4630      	mov	r0, r6
    44e4:	f003 f922 	bl	772c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    44e8:	2800      	cmp	r0, #0
    44ea:	ddf5      	ble.n	44d8 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    44ec:	2100      	movs	r1, #0
    44ee:	4630      	mov	r0, r6
    44f0:	f002 ff90 	bl	7414 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    44f4:	2800      	cmp	r0, #0
    44f6:	d0ef      	beq.n	44d8 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    44f8:	f104 0638 	add.w	r6, r4, #56	; 0x38
    44fc:	2100      	movs	r1, #0
    44fe:	4630      	mov	r0, r6
    4500:	f003 f914 	bl	772c <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    4504:	2800      	cmp	r0, #0
    4506:	dde7      	ble.n	44d8 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    4508:	2100      	movs	r1, #0
    450a:	4630      	mov	r0, r6
    450c:	f002 ff82 	bl	7414 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    4510:	2800      	cmp	r0, #0
    4512:	d1da      	bne.n	44ca <rsa_check_context.constprop.0+0x36>
    4514:	e7e0      	b.n	44d8 <rsa_check_context.constprop.0+0x44>
    if( is_priv &&
    4516:	b90d      	cbnz	r5, 451c <rsa_check_context.constprop.0+0x88>
    }
#endif

    return( 0 );
    4518:	2000      	movs	r0, #0
}
    451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    451c:	2100      	movs	r1, #0
    451e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4522:	f003 f903 	bl	772c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4526:	2800      	cmp	r0, #0
    4528:	ddd6      	ble.n	44d8 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    452a:	2100      	movs	r1, #0
    452c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    4530:	f003 f8fc 	bl	772c <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    4534:	2800      	cmp	r0, #0
    4536:	ddcf      	ble.n	44d8 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    4538:	2100      	movs	r1, #0
    453a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    453e:	f003 f8f5 	bl	772c <mbedtls_mpi_cmp_int>
    if( is_priv &&
    4542:	2800      	cmp	r0, #0
    4544:	dce8      	bgt.n	4518 <rsa_check_context.constprop.0+0x84>
    4546:	e7c7      	b.n	44d8 <rsa_check_context.constprop.0+0x44>
    4548:	ffffbf80 	.word	0xffffbf80

0000454c <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    454c:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    454e:	2100      	movs	r1, #0
{
    4550:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    4552:	f7ff ff9f 	bl	4494 <rsa_check_context.constprop.0>
    4556:	4605      	mov	r5, r0
    4558:	b9b8      	cbnz	r0, 458a <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    455a:	f104 0608 	add.w	r6, r4, #8
    455e:	4630      	mov	r0, r6
    4560:	f002 ff69 	bl	7436 <mbedtls_mpi_bitlen>
    4564:	287f      	cmp	r0, #127	; 0x7f
    4566:	d910      	bls.n	458a <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    4568:	3414      	adds	r4, #20
    456a:	4629      	mov	r1, r5
    456c:	4620      	mov	r0, r4
    456e:	f002 ff51 	bl	7414 <mbedtls_mpi_get_bit>
    4572:	b150      	cbz	r0, 458a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4574:	4620      	mov	r0, r4
    4576:	f002 ff5e 	bl	7436 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    457a:	2801      	cmp	r0, #1
    457c:	d905      	bls.n	458a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    457e:	4631      	mov	r1, r6
    4580:	4620      	mov	r0, r4
    4582:	f003 f892 	bl	76aa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    4586:	2800      	cmp	r0, #0
    4588:	db00      	blt.n	458c <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    458a:	4d01      	ldr	r5, [pc, #4]	; (4590 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    458c:	4628      	mov	r0, r5
    458e:	bd70      	pop	{r4, r5, r6, pc}
    4590:	ffffbe00 	.word	0xffffbe00

00004594 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    4594:	b5f0      	push	{r4, r5, r6, r7, lr}
    4596:	460c      	mov	r4, r1
    4598:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    459a:	2100      	movs	r1, #0
{
    459c:	4605      	mov	r5, r0
    459e:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    45a0:	f7ff ff78 	bl	4494 <rsa_check_context.constprop.0>
    45a4:	bb80      	cbnz	r0, 4608 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    45a6:	a803      	add	r0, sp, #12
    45a8:	f002 fe61 	bl	726e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    45ac:	4621      	mov	r1, r4
    45ae:	686a      	ldr	r2, [r5, #4]
    45b0:	a803      	add	r0, sp, #12
    45b2:	f002 ff62 	bl	747a <mbedtls_mpi_read_binary>
    45b6:	4604      	mov	r4, r0
    45b8:	b9d0      	cbnz	r0, 45f0 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    45ba:	f105 0408 	add.w	r4, r5, #8
    45be:	4621      	mov	r1, r4
    45c0:	a803      	add	r0, sp, #12
    45c2:	f003 f872 	bl	76aa <mbedtls_mpi_cmp_mpi>
    45c6:	2800      	cmp	r0, #0
    45c8:	da1b      	bge.n	4602 <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    45ca:	f105 0368 	add.w	r3, r5, #104	; 0x68
    45ce:	a903      	add	r1, sp, #12
    45d0:	9300      	str	r3, [sp, #0]
    45d2:	4608      	mov	r0, r1
    45d4:	4623      	mov	r3, r4
    45d6:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
    45da:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    45dc:	f003 fbcc 	bl	7d78 <mbedtls_mpi_exp_mod>
    45e0:	4604      	mov	r4, r0
    45e2:	b928      	cbnz	r0, 45f0 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    45e4:	463a      	mov	r2, r7
    45e6:	4631      	mov	r1, r6
    45e8:	a803      	add	r0, sp, #12
    45ea:	f002 ff67 	bl	74bc <mbedtls_mpi_write_binary>
    45ee:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    45f0:	a803      	add	r0, sp, #12
    45f2:	f002 fe42 	bl	727a <mbedtls_mpi_free>

    if( ret != 0 )
    45f6:	b10c      	cbz	r4, 45fc <mbedtls_rsa_public+0x68>
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    45f8:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );

    return( 0 );
}
    45fc:	4620      	mov	r0, r4
    45fe:	b007      	add	sp, #28
    4600:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    4602:	f06f 0403 	mvn.w	r4, #3
    4606:	e7f3      	b.n	45f0 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    4608:	4c00      	ldr	r4, [pc, #0]	; (460c <mbedtls_rsa_public+0x78>)
    460a:	e7f7      	b.n	45fc <mbedtls_rsa_public+0x68>
    460c:	ffffbf80 	.word	0xffffbf80

00004610 <mbedtls_sha256_starts>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
#else
    SHA256_VALIDATE_RET( is224 == 0 );
#endif

    ctx->total[0] = 0;
    4610:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    4612:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    4616:	b9c1      	cbnz	r1, 464a <mbedtls_sha256_starts+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    4618:	4a19      	ldr	r2, [pc, #100]	; (4680 <mbedtls_sha256_starts+0x70>)
    461a:	4b1a      	ldr	r3, [pc, #104]	; (4684 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    461c:	f8df c068 	ldr.w	ip, [pc, #104]	; 4688 <mbedtls_sha256_starts+0x78>
        ctx->state[1] = 0xBB67AE85;
    4620:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    4624:	4b19      	ldr	r3, [pc, #100]	; (468c <mbedtls_sha256_starts+0x7c>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    4626:	4a1a      	ldr	r2, [pc, #104]	; (4690 <mbedtls_sha256_starts+0x80>)
        ctx->state[3] = 0xA54FF53A;
    4628:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    462c:	4b19      	ldr	r3, [pc, #100]	; (4694 <mbedtls_sha256_starts+0x84>)
    462e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    4632:	4b19      	ldr	r3, [pc, #100]	; (4698 <mbedtls_sha256_starts+0x88>)
    4634:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    4636:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    463a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    463e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    4642:	6243      	str	r3, [r0, #36]	; 0x24
#endif
    }

    ctx->is224 = is224;
    4644:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    4646:	2000      	movs	r0, #0
    4648:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    464a:	4b14      	ldr	r3, [pc, #80]	; (469c <mbedtls_sha256_starts+0x8c>)
    464c:	4a14      	ldr	r2, [pc, #80]	; (46a0 <mbedtls_sha256_starts+0x90>)
        ctx->state[4] = 0xFFC00B31;
    464e:	f8df c054 	ldr.w	ip, [pc, #84]	; 46a4 <mbedtls_sha256_starts+0x94>
        ctx->state[1] = 0x367CD507;
    4652:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    4656:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    465a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    465e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    4662:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    4664:	4b10      	ldr	r3, [pc, #64]	; (46a8 <mbedtls_sha256_starts+0x98>)
    4666:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    466a:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    466e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    4672:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    4676:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4678:	4b0c      	ldr	r3, [pc, #48]	; (46ac <mbedtls_sha256_starts+0x9c>)
    467a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    467c:	4b0c      	ldr	r3, [pc, #48]	; (46b0 <mbedtls_sha256_starts+0xa0>)
    467e:	e7e0      	b.n	4642 <mbedtls_sha256_starts+0x32>
    4680:	6a09e667 	.word	0x6a09e667
    4684:	bb67ae85 	.word	0xbb67ae85
    4688:	3c6ef372 	.word	0x3c6ef372
    468c:	a54ff53a 	.word	0xa54ff53a
    4690:	510e527f 	.word	0x510e527f
    4694:	9b05688c 	.word	0x9b05688c
    4698:	1f83d9ab 	.word	0x1f83d9ab
    469c:	367cd507 	.word	0x367cd507
    46a0:	c1059ed8 	.word	0xc1059ed8
    46a4:	f70e5939 	.word	0xf70e5939
    46a8:	ffc00b31 	.word	0xffc00b31
    46ac:	64f98fa7 	.word	0x64f98fa7
    46b0:	befa4fa4 	.word	0xbefa4fa4

000046b4 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    46b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46b8:	b0d1      	sub	sp, #324	; 0x144
    46ba:	ab48      	add	r3, sp, #288	; 0x120
    46bc:	9301      	str	r3, [sp, #4]
    46be:	f100 0608 	add.w	r6, r0, #8
    46c2:	f100 0328 	add.w	r3, r0, #40	; 0x28
    46c6:	9304      	str	r3, [sp, #16]
    46c8:	4633      	mov	r3, r6
    46ca:	9a01      	ldr	r2, [sp, #4]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    46cc:	f853 0b04 	ldr.w	r0, [r3], #4
    46d0:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    46d4:	9804      	ldr	r0, [sp, #16]
    46d6:	4283      	cmp	r3, r0
    46d8:	d1f8      	bne.n	46cc <mbedtls_internal_sha256_process+0x18>
    46da:	e9dd 4748 	ldrd	r4, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    46de:	f04f 0900 	mov.w	r9, #0
    46e2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    46e4:	ad4c      	add	r5, sp, #304	; 0x130
    46e6:	9302      	str	r3, [sp, #8]
    46e8:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    46ec:	9303      	str	r3, [sp, #12]
    46ee:	4b45      	ldr	r3, [pc, #276]	; (4804 <mbedtls_internal_sha256_process+0x150>)
    46f0:	aa06      	add	r2, sp, #24
    46f2:	9305      	str	r3, [sp, #20]
    46f4:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    46f8:	f1b9 0f0f 	cmp.w	r9, #15
    46fc:	d86a      	bhi.n	47d4 <mbedtls_internal_sha256_process+0x120>
            GET_UINT32_BE( local.W[i], data, 4 * i );
    46fe:	784b      	ldrb	r3, [r1, #1]
    4700:	f891 b000 	ldrb.w	fp, [r1]
    4704:	041b      	lsls	r3, r3, #16
    4706:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
    470a:	f891 b003 	ldrb.w	fp, [r1, #3]
    470e:	f891 a002 	ldrb.w	sl, [r1, #2]
    4712:	ea43 030b 	orr.w	r3, r3, fp
    4716:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    471a:	ea4f 20f5 	mov.w	r0, r5, ror #11
    471e:	ea80 10b5 	eor.w	r0, r0, r5, ror #6
    4722:	ea80 6a75 	eor.w	sl, r0, r5, ror #25
    4726:	ea8c 0008 	eor.w	r0, ip, r8
    472a:	f8dd b014 	ldr.w	fp, [sp, #20]
    472e:	4028      	ands	r0, r5
    4730:	ea80 000c 	eor.w	r0, r0, ip
    4734:	4450      	add	r0, sl
    4736:	f85b ab04 	ldr.w	sl, [fp], #4
    473a:	6093      	str	r3, [r2, #8]
    473c:	4482      	add	sl, r0
    473e:	9802      	ldr	r0, [sp, #8]
    4740:	4453      	add	r3, sl
    4742:	4403      	add	r3, r0
    4744:	ea4f 3a74 	mov.w	sl, r4, ror #13
    4748:	ea44 0007 	orr.w	r0, r4, r7
    474c:	f8cd b014 	str.w	fp, [sp, #20]
    4750:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    4754:	ea00 000e 	and.w	r0, r0, lr
    4758:	ea04 0b07 	and.w	fp, r4, r7
    475c:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
    4760:	ea40 000b 	orr.w	r0, r0, fp
    4764:	4450      	add	r0, sl
    for( i = 0; i < 64; i++ )
    4766:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    476a:	f8dd a00c 	ldr.w	sl, [sp, #12]
    for( i = 0; i < 64; i++ )
    476e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    4772:	449a      	add	sl, r3
    4774:	e9cd ce02 	strd	ip, lr, [sp, #8]
    4778:	4403      	add	r3, r0
    for( i = 0; i < 64; i++ )
    477a:	f102 0204 	add.w	r2, r2, #4
    477e:	f101 0104 	add.w	r1, r1, #4
    4782:	d120      	bne.n	47c6 <mbedtls_internal_sha256_process+0x112>
    4784:	e9cd 584d 	strd	r5, r8, [sp, #308]	; 0x134
    4788:	e9cd 3448 	strd	r3, r4, [sp, #288]	; 0x120
    478c:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
    4790:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
    4794:	974a      	str	r7, [sp, #296]	; 0x128
    4796:	9007      	str	r0, [sp, #28]
    4798:	f8cd e12c 	str.w	lr, [sp, #300]	; 0x12c
    479c:	9306      	str	r3, [sp, #24]
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    479e:	9901      	ldr	r1, [sp, #4]
    47a0:	6833      	ldr	r3, [r6, #0]
    47a2:	f851 2b04 	ldr.w	r2, [r1], #4
    47a6:	4413      	add	r3, r2
    47a8:	f846 3b04 	str.w	r3, [r6], #4
    for( i = 0; i < 8; i++ )
    47ac:	9b04      	ldr	r3, [sp, #16]
        ctx->state[i] += local.A[i];
    47ae:	9101      	str	r1, [sp, #4]
    for( i = 0; i < 8; i++ )
    47b0:	42b3      	cmp	r3, r6
    47b2:	d1f4      	bne.n	479e <mbedtls_internal_sha256_process+0xea>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    47b4:	a806      	add	r0, sp, #24
    47b6:	f44f 7194 	mov.w	r1, #296	; 0x128
    47ba:	f000 fed5 	bl	5568 <mbedtls_platform_zeroize>

    return( 0 );
}
    47be:	2000      	movs	r0, #0
    47c0:	b051      	add	sp, #324	; 0x144
    47c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47c6:	46be      	mov	lr, r7
    47c8:	46c4      	mov	ip, r8
    47ca:	4627      	mov	r7, r4
    47cc:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    47ce:	461c      	mov	r4, r3
    47d0:	4655      	mov	r5, sl
    47d2:	e791      	b.n	46f8 <mbedtls_internal_sha256_process+0x44>
            R( i );
    47d4:	6813      	ldr	r3, [r2, #0]
    47d6:	f852 bc34 	ldr.w	fp, [r2, #-52]
    47da:	ea4f 4af3 	mov.w	sl, r3, ror #19
    47de:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    47e2:	f852 0c38 	ldr.w	r0, [r2, #-56]
    47e6:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    47ea:	f852 3c14 	ldr.w	r3, [r2, #-20]
    47ee:	4403      	add	r3, r0
    47f0:	ea4f 40bb 	mov.w	r0, fp, ror #18
    47f4:	ea80 10fb 	eor.w	r0, r0, fp, ror #7
    47f8:	449a      	add	sl, r3
    47fa:	ea80 03db 	eor.w	r3, r0, fp, lsr #3
    47fe:	4453      	add	r3, sl
    4800:	e78b      	b.n	471a <mbedtls_internal_sha256_process+0x66>
    4802:	bf00      	nop
    4804:	00008b58 	.word	0x00008b58

00004808 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    4808:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    480a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    480e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4812:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    4816:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    481a:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    481c:	bf01      	itttt	eq
    481e:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    4822:	2200      	moveq	r2, #0
    4824:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4828:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    482c:	f003 fe1b 	bl	8466 <nrf91_errata_14>
    4830:	b128      	cbz	r0, 483e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4832:	2201      	movs	r2, #1
    4834:	4b4c      	ldr	r3, [pc, #304]	; (4968 <SystemInit+0x160>)
    4836:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    483a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    483e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4842:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4846:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    484a:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    484e:	2a09      	cmp	r2, #9
    4850:	d105      	bne.n	485e <SystemInit+0x56>
            {
                switch(var2)
    4852:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4854:	bf1e      	ittt	ne
    4856:	2201      	movne	r2, #1
    4858:	4b43      	ldrne	r3, [pc, #268]	; (4968 <SystemInit+0x160>)
    485a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    485e:	f003 fe02 	bl	8466 <nrf91_errata_14>
    4862:	b118      	cbz	r0, 486c <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4864:	220e      	movs	r2, #14
    4866:	4b41      	ldr	r3, [pc, #260]	; (496c <SystemInit+0x164>)
    4868:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    486c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4870:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4874:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4878:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    487c:	2a09      	cmp	r2, #9
    487e:	d106      	bne.n	488e <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4880:	2200      	movs	r2, #0
    4882:	4b39      	ldr	r3, [pc, #228]	; (4968 <SystemInit+0x160>)
    4884:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4888:	2201      	movs	r2, #1
    488a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    488e:	2200      	movs	r2, #0
    4890:	00d3      	lsls	r3, r2, #3
    4892:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    4896:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    489a:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    489e:	3101      	adds	r1, #1
    48a0:	d008      	beq.n	48b4 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48a2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48a6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48a8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48ac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    48b0:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    48b2:	d1ed      	bne.n	4890 <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48b4:	4b2e      	ldr	r3, [pc, #184]	; (4970 <SystemInit+0x168>)
    48b6:	69da      	ldr	r2, [r3, #28]
    48b8:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    48bc:	07d1      	lsls	r1, r2, #31
    48be:	d543      	bpl.n	4948 <SystemInit+0x140>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48c0:	4b2c      	ldr	r3, [pc, #176]	; (4974 <SystemInit+0x16c>)
    48c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48c6:	2a01      	cmp	r2, #1
    48c8:	d1fb      	bne.n	48c2 <SystemInit+0xba>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    48ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48d2:	2a01      	cmp	r2, #1
    48d4:	d1fb      	bne.n	48ce <SystemInit+0xc6>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48d6:	4b26      	ldr	r3, [pc, #152]	; (4970 <SystemInit+0x168>)
    48d8:	69da      	ldr	r2, [r3, #28]
    48da:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    48de:	07d2      	lsls	r2, r2, #31
    48e0:	d50a      	bpl.n	48f8 <SystemInit+0xf0>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    48e2:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    48e4:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    48e8:	61da      	str	r2, [r3, #28]
    48ea:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48ee:	4a21      	ldr	r2, [pc, #132]	; (4974 <SystemInit+0x16c>)
    48f0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    48f4:	2b01      	cmp	r3, #1
    48f6:	d1fb      	bne.n	48f0 <SystemInit+0xe8>
        uint32_t val = *word;
    48f8:	4a1d      	ldr	r2, [pc, #116]	; (4970 <SystemInit+0x168>)
    48fa:	6a13      	ldr	r3, [r2, #32]
    48fc:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    4900:	3301      	adds	r3, #1
    4902:	d10c      	bne.n	491e <SystemInit+0x116>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    4904:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    4906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    490a:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    490e:	6213      	str	r3, [r2, #32]
    4910:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4914:	4a17      	ldr	r2, [pc, #92]	; (4974 <SystemInit+0x16c>)
    4916:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    491a:	2b01      	cmp	r3, #1
    491c:	d1fb      	bne.n	4916 <SystemInit+0x10e>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    491e:	2200      	movs	r2, #0
    4920:	4b14      	ldr	r3, [pc, #80]	; (4974 <SystemInit+0x16c>)
    4922:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4926:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    492a:	2a01      	cmp	r2, #1
    492c:	d1fb      	bne.n	4926 <SystemInit+0x11e>
    492e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4932:	4911      	ldr	r1, [pc, #68]	; (4978 <SystemInit+0x170>)
    4934:	4b11      	ldr	r3, [pc, #68]	; (497c <SystemInit+0x174>)
    4936:	68ca      	ldr	r2, [r1, #12]
    4938:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    493c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    493e:	60cb      	str	r3, [r1, #12]
    4940:	f3bf 8f4f 	dsb	sy
    __NOP();
    4944:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4946:	e7fd      	b.n	4944 <SystemInit+0x13c>
        uint32_t val = *word;
    4948:	6a1b      	ldr	r3, [r3, #32]
    494a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    494e:	3301      	adds	r3, #1
    4950:	d0b6      	beq.n	48c0 <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    4952:	4a09      	ldr	r2, [pc, #36]	; (4978 <SystemInit+0x170>)
    4954:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4958:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    495c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    4960:	4b07      	ldr	r3, [pc, #28]	; (4980 <SystemInit+0x178>)
    4962:	4a08      	ldr	r2, [pc, #32]	; (4984 <SystemInit+0x17c>)
    4964:	601a      	str	r2, [r3, #0]
}
    4966:	bd08      	pop	{r3, pc}
    4968:	50004000 	.word	0x50004000
    496c:	5003a000 	.word	0x5003a000
    4970:	00ff8000 	.word	0x00ff8000
    4974:	50039000 	.word	0x50039000
    4978:	e000ed00 	.word	0xe000ed00
    497c:	05fa0004 	.word	0x05fa0004
    4980:	2000c58c 	.word	0x2000c58c
    4984:	03d09000 	.word	0x03d09000

00004988 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4988:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    498a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    498c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    498e:	fab2 f382 	clz	r3, r2
    4992:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    4996:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    4998:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    499a:	d010      	beq.n	49be <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    499c:	fa05 f303 	lsl.w	r3, r5, r3
    49a0:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    49a4:	e8d0 6fef 	ldaex	r6, [r0]
    49a8:	4296      	cmp	r6, r2
    49aa:	d104      	bne.n	49b6 <nrfx_flag32_alloc+0x2e>
    49ac:	e8c0 3fec 	stlex	ip, r3, [r0]
    49b0:	f1bc 0f00 	cmp.w	ip, #0
    49b4:	d1f6      	bne.n	49a4 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49b6:	d1e9      	bne.n	498c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    49b8:	4802      	ldr	r0, [pc, #8]	; (49c4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    49ba:	700c      	strb	r4, [r1, #0]
}
    49bc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    49be:	4802      	ldr	r0, [pc, #8]	; (49c8 <nrfx_flag32_alloc+0x40>)
    49c0:	e7fc      	b.n	49bc <nrfx_flag32_alloc+0x34>
    49c2:	bf00      	nop
    49c4:	0bad0000 	.word	0x0bad0000
    49c8:	0bad0002 	.word	0x0bad0002

000049cc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    49cc:	6803      	ldr	r3, [r0, #0]
{
    49ce:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    49d0:	40cb      	lsrs	r3, r1
    49d2:	07db      	lsls	r3, r3, #31
    49d4:	d411      	bmi.n	49fa <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    49d6:	2301      	movs	r3, #1
    49d8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    49dc:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    49de:	ea41 0203 	orr.w	r2, r1, r3
    49e2:	e8d0 4fef 	ldaex	r4, [r0]
    49e6:	429c      	cmp	r4, r3
    49e8:	d104      	bne.n	49f4 <nrfx_flag32_free+0x28>
    49ea:	e8c0 2fec 	stlex	ip, r2, [r0]
    49ee:	f1bc 0f00 	cmp.w	ip, #0
    49f2:	d1f6      	bne.n	49e2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49f4:	d1f2      	bne.n	49dc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    49f6:	4802      	ldr	r0, [pc, #8]	; (4a00 <nrfx_flag32_free+0x34>)
}
    49f8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    49fa:	4802      	ldr	r0, [pc, #8]	; (4a04 <nrfx_flag32_free+0x38>)
    49fc:	e7fc      	b.n	49f8 <nrfx_flag32_free+0x2c>
    49fe:	bf00      	nop
    4a00:	0bad0000 	.word	0x0bad0000
    4a04:	0bad0004 	.word	0x0bad0004

00004a08 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4a08:	4b04      	ldr	r3, [pc, #16]	; (4a1c <nrfx_clock_init+0x14>)
    4a0a:	791a      	ldrb	r2, [r3, #4]
    4a0c:	b922      	cbnz	r2, 4a18 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4a0e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4a10:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4a12:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4a14:	4802      	ldr	r0, [pc, #8]	; (4a20 <nrfx_clock_init+0x18>)
    4a16:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4a18:	4802      	ldr	r0, [pc, #8]	; (4a24 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4a1a:	4770      	bx	lr
    4a1c:	2000e068 	.word	0x2000e068
    4a20:	0bad0000 	.word	0x0bad0000
    4a24:	0bad000c 	.word	0x0bad000c

00004a28 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a28:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4a30:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4a32:	b152      	cbz	r2, 4a4a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a34:	2000      	movs	r0, #0
    4a36:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4a3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4a3e:	2201      	movs	r2, #1
    4a40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4a44:	4b11      	ldr	r3, [pc, #68]	; (4a8c <nrfx_power_clock_irq_handler+0x64>)
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a4e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4a52:	b18a      	cbz	r2, 4a78 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a54:	2200      	movs	r2, #0
    4a56:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a5e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a62:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a66:	f002 0203 	and.w	r2, r2, #3
    4a6a:	2a01      	cmp	r2, #1
    4a6c:	f04f 0102 	mov.w	r1, #2
    4a70:	d103      	bne.n	4a7a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a72:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a76:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a78:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4a7a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a7e:	4b03      	ldr	r3, [pc, #12]	; (4a8c <nrfx_power_clock_irq_handler+0x64>)
    4a80:	2001      	movs	r0, #1
}
    4a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a86:	681b      	ldr	r3, [r3, #0]
    4a88:	4718      	bx	r3
    4a8a:	bf00      	nop
    4a8c:	2000e068 	.word	0x2000e068

00004a90 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4a90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4a92:	4801      	ldr	r0, [pc, #4]	; (4a98 <nrfx_dppi_channel_alloc+0x8>)
    4a94:	f7ff bf78 	b.w	4988 <nrfx_flag32_alloc>
    4a98:	2000c590 	.word	0x2000c590

00004a9c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4a9c:	f000 021f 	and.w	r2, r0, #31
    4aa0:	4805      	ldr	r0, [pc, #20]	; (4ab8 <nrf_gpio_cfg_sense_set+0x1c>)
    4aa2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4aa6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    4aaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4ab2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    4ab6:	4770      	bx	lr
    4ab8:	50842500 	.word	0x50842500

00004abc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4abc:	4b03      	ldr	r3, [pc, #12]	; (4acc <pin_in_use_by_te+0x10>)
    4abe:	3008      	adds	r0, #8
    4ac0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4ac4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	2000c594 	.word	0x2000c594

00004ad0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4ad0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ad2:	4c0d      	ldr	r4, [pc, #52]	; (4b08 <call_handler+0x38>)
    4ad4:	f100 0308 	add.w	r3, r0, #8
    4ad8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4adc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ade:	05da      	lsls	r2, r3, #23
{
    4ae0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ae2:	d507      	bpl.n	4af4 <call_handler+0x24>
    4ae4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4ae8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4aec:	6852      	ldr	r2, [r2, #4]
    4aee:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4af2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4af4:	68a3      	ldr	r3, [r4, #8]
    4af6:	b12b      	cbz	r3, 4b04 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4af8:	4631      	mov	r1, r6
    4afa:	4628      	mov	r0, r5
    4afc:	68e2      	ldr	r2, [r4, #12]
    }
}
    4afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4b02:	4718      	bx	r3
}
    4b04:	bd70      	pop	{r4, r5, r6, pc}
    4b06:	bf00      	nop
    4b08:	2000c594 	.word	0x2000c594

00004b0c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b0c:	4a12      	ldr	r2, [pc, #72]	; (4b58 <release_handler+0x4c>)
    4b0e:	3008      	adds	r0, #8
    4b10:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    4b14:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b16:	05d9      	lsls	r1, r3, #23
    4b18:	d51b      	bpl.n	4b52 <release_handler+0x46>
    4b1a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4b1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4b22:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b26:	2000      	movs	r0, #0
    4b28:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4b2c:	f834 3b02 	ldrh.w	r3, [r4], #2
    4b30:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b34:	d003      	beq.n	4b3e <release_handler+0x32>
    4b36:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4b3a:	4299      	cmp	r1, r3
    4b3c:	d009      	beq.n	4b52 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b3e:	3001      	adds	r0, #1
    4b40:	2820      	cmp	r0, #32
    4b42:	d1f3      	bne.n	4b2c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4b44:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b46:	4805      	ldr	r0, [pc, #20]	; (4b5c <release_handler+0x50>)
}
    4b48:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    4b4a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b4e:	f7ff bf3d 	b.w	49cc <nrfx_flag32_free>
}
    4b52:	bc10      	pop	{r4}
    4b54:	4770      	bx	lr
    4b56:	bf00      	nop
    4b58:	2000c594 	.word	0x2000c594
    4b5c:	2000c5e8 	.word	0x2000c5e8

00004b60 <pin_handler_trigger_uninit>:
{
    4b60:	b538      	push	{r3, r4, r5, lr}
    4b62:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4b64:	f7ff ffaa 	bl	4abc <pin_in_use_by_te>
    4b68:	4c0b      	ldr	r4, [pc, #44]	; (4b98 <pin_handler_trigger_uninit+0x38>)
    4b6a:	f102 0508 	add.w	r5, r2, #8
    4b6e:	b160      	cbz	r0, 4b8a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b70:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b72:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b76:	0b5b      	lsrs	r3, r3, #13
    4b78:	009b      	lsls	r3, r3, #2
    4b7a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4b7e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4b82:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4b86:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4b8a:	4610      	mov	r0, r2
    4b8c:	f7ff ffbe 	bl	4b0c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b90:	2300      	movs	r3, #0
    4b92:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b96:	bd38      	pop	{r3, r4, r5, pc}
    4b98:	2000c594 	.word	0x2000c594

00004b9c <nrfx_gpiote_input_configure>:
{
    4b9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4ba0:	4604      	mov	r4, r0
    4ba2:	461d      	mov	r5, r3
    if (p_input_config)
    4ba4:	b309      	cbz	r1, 4bea <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ba6:	4f4d      	ldr	r7, [pc, #308]	; (4cdc <nrfx_gpiote_input_configure+0x140>)
    4ba8:	f100 0808 	add.w	r8, r0, #8
    4bac:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4bb0:	07b3      	lsls	r3, r6, #30
    4bb2:	d506      	bpl.n	4bc2 <nrfx_gpiote_input_configure+0x26>
    4bb4:	f7ff ff82 	bl	4abc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4bb8:	b118      	cbz	r0, 4bc2 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4bba:	4849      	ldr	r0, [pc, #292]	; (4ce0 <nrfx_gpiote_input_configure+0x144>)
}
    4bbc:	b002      	add	sp, #8
    4bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bc2:	4b48      	ldr	r3, [pc, #288]	; (4ce4 <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    4bc4:	f004 001f 	and.w	r0, r4, #31
    4bc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bcc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4bd0:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4bd2:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4bd6:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4bda:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4bde:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    4be2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4be6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4bea:	b192      	cbz	r2, 4c12 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bec:	4b3b      	ldr	r3, [pc, #236]	; (4cdc <nrfx_gpiote_input_configure+0x140>)
    4bee:	f104 0608 	add.w	r6, r4, #8
    4bf2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4bf6:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
    4bf8:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4bfa:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    4bfc:	d50c      	bpl.n	4c18 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    4bfe:	2a00      	cmp	r2, #0
    4c00:	d1db      	bne.n	4bba <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4c02:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    4c06:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4c0a:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    4c0e:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    4c12:	bbcd      	cbnz	r5, 4c88 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    4c14:	4834      	ldr	r0, [pc, #208]	; (4ce8 <nrfx_gpiote_input_configure+0x14c>)
    4c16:	e7d1      	b.n	4bbc <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4c18:	f021 0120 	bic.w	r1, r1, #32
    4c1c:	04c9      	lsls	r1, r1, #19
    4c1e:	0cc9      	lsrs	r1, r1, #19
    4c20:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    4c24:	2a00      	cmp	r2, #0
    4c26:	d0ec      	beq.n	4c02 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    4c28:	2803      	cmp	r0, #3
    4c2a:	d8c6      	bhi.n	4bba <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4c2c:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4c30:	4662      	mov	r2, ip
    4c32:	0092      	lsls	r2, r2, #2
    4c34:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4c38:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4c3c:	b920      	cbnz	r0, 4c48 <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    4c3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4c42:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    4c46:	e7dc      	b.n	4c02 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4c48:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c4c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4c50:	f027 0703 	bic.w	r7, r7, #3
    4c54:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c58:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    4c5c:	f041 0120 	orr.w	r1, r1, #32
    4c60:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    4c64:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    4c68:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c6c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c70:	0227      	lsls	r7, r4, #8
    4c72:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    4c76:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    4c7a:	ea47 070e 	orr.w	r7, r7, lr
    4c7e:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    4c82:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    4c86:	e7bc      	b.n	4c02 <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    4c88:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c8a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c8e:	f7ff ff3d 	bl	4b0c <release_handler>
    if (!handler)
    4c92:	2e00      	cmp	r6, #0
    4c94:	d0be      	beq.n	4c14 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c96:	4d11      	ldr	r5, [pc, #68]	; (4cdc <nrfx_gpiote_input_configure+0x140>)
    4c98:	682b      	ldr	r3, [r5, #0]
    4c9a:	429e      	cmp	r6, r3
    4c9c:	d104      	bne.n	4ca8 <nrfx_gpiote_input_configure+0x10c>
    4c9e:	686b      	ldr	r3, [r5, #4]
    4ca0:	429f      	cmp	r7, r3
    4ca2:	d101      	bne.n	4ca8 <nrfx_gpiote_input_configure+0x10c>
    4ca4:	2200      	movs	r2, #0
    4ca6:	e009      	b.n	4cbc <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4ca8:	4810      	ldr	r0, [pc, #64]	; (4cec <nrfx_gpiote_input_configure+0x150>)
    4caa:	f10d 0107 	add.w	r1, sp, #7
    4cae:	f7ff fe6b 	bl	4988 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4cb2:	4b0d      	ldr	r3, [pc, #52]	; (4ce8 <nrfx_gpiote_input_configure+0x14c>)
    4cb4:	4298      	cmp	r0, r3
    4cb6:	d181      	bne.n	4bbc <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4cb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4cbc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cc0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4cc2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cc4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4cc8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ccc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4cd4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4cd8:	e79c      	b.n	4c14 <nrfx_gpiote_input_configure+0x78>
    4cda:	bf00      	nop
    4cdc:	2000c594 	.word	0x2000c594
    4ce0:	0bad0004 	.word	0x0bad0004
    4ce4:	50842500 	.word	0x50842500
    4ce8:	0bad0000 	.word	0x0bad0000
    4cec:	2000c5e8 	.word	0x2000c5e8

00004cf0 <nrfx_gpiote_output_configure>:
{
    4cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cf2:	4604      	mov	r4, r0
    if (p_config)
    4cf4:	b369      	cbz	r1, 4d52 <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cf6:	4e37      	ldr	r6, [pc, #220]	; (4dd4 <nrfx_gpiote_output_configure+0xe4>)
    4cf8:	f100 0708 	add.w	r7, r0, #8
    4cfc:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4d00:	07ab      	lsls	r3, r5, #30
    4d02:	d404      	bmi.n	4d0e <nrfx_gpiote_output_configure+0x1e>
    4d04:	f7ff feda 	bl	4abc <pin_in_use_by_te>
    4d08:	b108      	cbz	r0, 4d0e <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    4d0a:	4833      	ldr	r0, [pc, #204]	; (4dd8 <nrfx_gpiote_output_configure+0xe8>)
}
    4d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4d0e:	f015 0f1c 	tst.w	r5, #28
    4d12:	784b      	ldrb	r3, [r1, #1]
    4d14:	d001      	beq.n	4d1a <nrfx_gpiote_output_configure+0x2a>
    4d16:	2b01      	cmp	r3, #1
    4d18:	d0f7      	beq.n	4d0a <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d1a:	4830      	ldr	r0, [pc, #192]	; (4ddc <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
    4d1c:	f004 0c1f 	and.w	ip, r4, #31
    4d20:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d24:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4d28:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d2c:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4d2e:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d32:	7889      	ldrb	r1, [r1, #2]
    4d34:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
    4d38:	f020 0007 	bic.w	r0, r0, #7
    4d3c:	4303      	orrs	r3, r0
    4d3e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d42:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4d46:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4d4a:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    4d4e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4d52:	b90a      	cbnz	r2, 4d58 <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
    4d54:	4822      	ldr	r0, [pc, #136]	; (4de0 <nrfx_gpiote_output_configure+0xf0>)
    4d56:	e7d9      	b.n	4d0c <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d58:	4e1e      	ldr	r6, [pc, #120]	; (4dd4 <nrfx_gpiote_output_configure+0xe4>)
    4d5a:	f104 0708 	add.w	r7, r4, #8
    4d5e:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4d62:	0783      	lsls	r3, r0, #30
    4d64:	d5d1      	bpl.n	4d0a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4d66:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4d6a:	2300      	movs	r3, #0
    4d6c:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d6e:	f020 0020 	bic.w	r0, r0, #32
    4d72:	0089      	lsls	r1, r1, #2
    4d74:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d78:	04c0      	lsls	r0, r0, #19
    4d7a:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4d7e:	0cc0      	lsrs	r0, r0, #19
    4d80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4d88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d8c:	7855      	ldrb	r5, [r2, #1]
    4d8e:	2d00      	cmp	r5, #0
    4d90:	d0e0      	beq.n	4d54 <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d92:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4d96:	7892      	ldrb	r2, [r2, #2]
    4d98:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4d9c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4da0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4da4:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4da8:	0223      	lsls	r3, r4, #8
    4daa:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4dae:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4db0:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4db4:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4db8:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dba:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4dbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4dc0:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dc4:	4313      	orrs	r3, r2
    4dc6:	f040 0020 	orr.w	r0, r0, #32
    4dca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4dce:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4dd2:	e7bf      	b.n	4d54 <nrfx_gpiote_output_configure+0x64>
    4dd4:	2000c594 	.word	0x2000c594
    4dd8:	0bad0004 	.word	0x0bad0004
    4ddc:	50842500 	.word	0x50842500
    4de0:	0bad0000 	.word	0x0bad0000

00004de4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4de4:	4b01      	ldr	r3, [pc, #4]	; (4dec <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4de6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4dea:	4770      	bx	lr
    4dec:	2000c594 	.word	0x2000c594

00004df0 <nrfx_gpiote_channel_get>:
{
    4df0:	b508      	push	{r3, lr}
    4df2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4df4:	f7ff fe62 	bl	4abc <pin_in_use_by_te>
    4df8:	b138      	cbz	r0, 4e0a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4dfa:	4b05      	ldr	r3, [pc, #20]	; (4e10 <nrfx_gpiote_channel_get+0x20>)
    4dfc:	3208      	adds	r2, #8
    4dfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4e02:	4804      	ldr	r0, [pc, #16]	; (4e14 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e04:	0b5b      	lsrs	r3, r3, #13
    4e06:	700b      	strb	r3, [r1, #0]
}
    4e08:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e0a:	4803      	ldr	r0, [pc, #12]	; (4e18 <nrfx_gpiote_channel_get+0x28>)
    4e0c:	e7fc      	b.n	4e08 <nrfx_gpiote_channel_get+0x18>
    4e0e:	bf00      	nop
    4e10:	2000c594 	.word	0x2000c594
    4e14:	0bad0000 	.word	0x0bad0000
    4e18:	0bad0004 	.word	0x0bad0004

00004e1c <nrfx_gpiote_init>:
{
    4e1c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4e1e:	4c0f      	ldr	r4, [pc, #60]	; (4e5c <nrfx_gpiote_init+0x40>)
    4e20:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4e24:	b9bd      	cbnz	r5, 4e56 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4e26:	2240      	movs	r2, #64	; 0x40
    4e28:	4629      	mov	r1, r5
    4e2a:	f104 0010 	add.w	r0, r4, #16
    4e2e:	f001 fbbf 	bl	65b0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4e32:	200d      	movs	r0, #13
    4e34:	f7fd fd46 	bl	28c4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e38:	4b09      	ldr	r3, [pc, #36]	; (4e60 <nrfx_gpiote_init+0x44>)
    return err_code;
    4e3a:	480a      	ldr	r0, [pc, #40]	; (4e64 <nrfx_gpiote_init+0x48>)
    4e3c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4e40:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4e44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4e4c:	2301      	movs	r3, #1
    4e4e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4e52:	6563      	str	r3, [r4, #84]	; 0x54
}
    4e54:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4e56:	4804      	ldr	r0, [pc, #16]	; (4e68 <nrfx_gpiote_init+0x4c>)
    4e58:	e7fc      	b.n	4e54 <nrfx_gpiote_init+0x38>
    4e5a:	bf00      	nop
    4e5c:	2000c594 	.word	0x2000c594
    4e60:	5000d000 	.word	0x5000d000
    4e64:	0bad0000 	.word	0x0bad0000
    4e68:	0bad0005 	.word	0x0bad0005

00004e6c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e6c:	4b03      	ldr	r3, [pc, #12]	; (4e7c <nrfx_gpiote_is_init+0x10>)
    4e6e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4e72:	3800      	subs	r0, #0
    4e74:	bf18      	it	ne
    4e76:	2001      	movne	r0, #1
    4e78:	4770      	bx	lr
    4e7a:	bf00      	nop
    4e7c:	2000c594 	.word	0x2000c594

00004e80 <nrfx_gpiote_channel_free>:
{
    4e80:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e82:	4801      	ldr	r0, [pc, #4]	; (4e88 <nrfx_gpiote_channel_free+0x8>)
    4e84:	f7ff bda2 	b.w	49cc <nrfx_flag32_free>
    4e88:	2000c5e4 	.word	0x2000c5e4

00004e8c <nrfx_gpiote_channel_alloc>:
{
    4e8c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e8e:	4801      	ldr	r0, [pc, #4]	; (4e94 <nrfx_gpiote_channel_alloc+0x8>)
    4e90:	f7ff bd7a 	b.w	4988 <nrfx_flag32_alloc>
    4e94:	2000c5e4 	.word	0x2000c5e4

00004e98 <nrfx_gpiote_trigger_enable>:
{
    4e98:	4602      	mov	r2, r0
    4e9a:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e9c:	f7ff fe0e 	bl	4abc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ea0:	4b1c      	ldr	r3, [pc, #112]	; (4f14 <nrfx_gpiote_trigger_enable+0x7c>)
    4ea2:	f102 0408 	add.w	r4, r2, #8
    4ea6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4eaa:	b1e0      	cbz	r0, 4ee6 <nrfx_gpiote_trigger_enable+0x4e>
    4eac:	f013 0402 	ands.w	r4, r3, #2
    4eb0:	d119      	bne.n	4ee6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eb2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4eb4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4eb6:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4eba:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4ebe:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ec2:	6004      	str	r4, [r0, #0]
    4ec4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4ec8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4eca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4ece:	f040 0001 	orr.w	r0, r0, #1
    4ed2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4ed6:	b129      	cbz	r1, 4ee4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4ed8:	2201      	movs	r2, #1
    4eda:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4ede:	4a0e      	ldr	r2, [pc, #56]	; (4f18 <nrfx_gpiote_trigger_enable+0x80>)
    4ee0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4ee4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4ee6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4eea:	2b04      	cmp	r3, #4
    4eec:	d00e      	beq.n	4f0c <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4eee:	2b05      	cmp	r3, #5
    4ef0:	d00e      	beq.n	4f10 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4ef2:	4b0a      	ldr	r3, [pc, #40]	; (4f1c <nrfx_gpiote_trigger_enable+0x84>)
    4ef4:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4ef6:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4efa:	40d9      	lsrs	r1, r3
    4efc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f00:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4f02:	4610      	mov	r0, r2
}
    4f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4f08:	f7ff bdc8 	b.w	4a9c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4f0c:	2103      	movs	r1, #3
    4f0e:	e7f8      	b.n	4f02 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4f10:	2102      	movs	r1, #2
    4f12:	e7f6      	b.n	4f02 <nrfx_gpiote_trigger_enable+0x6a>
    4f14:	2000c594 	.word	0x2000c594
    4f18:	5000d000 	.word	0x5000d000
    4f1c:	50842500 	.word	0x50842500

00004f20 <nrfx_gpiote_trigger_disable>:
{
    4f20:	b508      	push	{r3, lr}
    4f22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f24:	f7ff fdca 	bl	4abc <pin_in_use_by_te>
    4f28:	b1c0      	cbz	r0, 4f5c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f2a:	4b0f      	ldr	r3, [pc, #60]	; (4f68 <nrfx_gpiote_trigger_disable+0x48>)
    4f2c:	f102 0108 	add.w	r1, r2, #8
    4f30:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f34:	0799      	lsls	r1, r3, #30
    4f36:	d411      	bmi.n	4f5c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f38:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f3a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f3c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4f3e:	490b      	ldr	r1, [pc, #44]	; (4f6c <nrfx_gpiote_trigger_disable+0x4c>)
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4f46:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f4a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4f4e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f52:	f022 0203 	bic.w	r2, r2, #3
    4f56:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f5a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f5c:	2100      	movs	r1, #0
}
    4f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f62:	4610      	mov	r0, r2
    4f64:	f7ff bd9a 	b.w	4a9c <nrf_gpio_cfg_sense_set>
    4f68:	2000c594 	.word	0x2000c594
    4f6c:	5000d000 	.word	0x5000d000

00004f70 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f70:	4b0c      	ldr	r3, [pc, #48]	; (4fa4 <nrfx_gpiote_pin_uninit+0x34>)
    4f72:	f100 0208 	add.w	r2, r0, #8
    4f76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4f7a:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    4f7c:	07db      	lsls	r3, r3, #31
{
    4f7e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f80:	d50d      	bpl.n	4f9e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4f82:	f7ff ffcd 	bl	4f20 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f86:	4620      	mov	r0, r4
    4f88:	f7ff fdea 	bl	4b60 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4f8c:	2202      	movs	r2, #2
    4f8e:	4b06      	ldr	r3, [pc, #24]	; (4fa8 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4f90:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4f94:	3480      	adds	r4, #128	; 0x80
    4f96:	4805      	ldr	r0, [pc, #20]	; (4fac <nrfx_gpiote_pin_uninit+0x3c>)
    4f98:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4f9c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f9e:	4804      	ldr	r0, [pc, #16]	; (4fb0 <nrfx_gpiote_pin_uninit+0x40>)
    4fa0:	e7fc      	b.n	4f9c <nrfx_gpiote_pin_uninit+0x2c>
    4fa2:	bf00      	nop
    4fa4:	2000c594 	.word	0x2000c594
    4fa8:	50842500 	.word	0x50842500
    4fac:	0bad0000 	.word	0x0bad0000
    4fb0:	0bad0004 	.word	0x0bad0004

00004fb4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4fb8:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4fba:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fbc:	462c      	mov	r4, r5
{
    4fbe:	4b4d      	ldr	r3, [pc, #308]	; (50f4 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4fc0:	484d      	ldr	r0, [pc, #308]	; (50f8 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fc2:	494e      	ldr	r1, [pc, #312]	; (50fc <nrfx_gpiote_irq_handler+0x148>)
{
    4fc4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fc6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4fc8:	b136      	cbz	r6, 4fd8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4fca:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4fce:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fd0:	bf1e      	ittt	ne
    4fd2:	601c      	strne	r4, [r3, #0]
    4fd4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4fd6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fd8:	3304      	adds	r3, #4
    4fda:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4fdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fe0:	d1f1      	bne.n	4fc6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fe2:	4f45      	ldr	r7, [pc, #276]	; (50f8 <nrfx_gpiote_irq_handler+0x144>)
    4fe4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4fe8:	b193      	cbz	r3, 5010 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    4fea:	4e45      	ldr	r6, [pc, #276]	; (5100 <nrfx_gpiote_irq_handler+0x14c>)
    4fec:	6a33      	ldr	r3, [r6, #32]
    4fee:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4ff0:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4ff2:	f04f 0901 	mov.w	r9, #1
    4ff6:	f10d 080c 	add.w	r8, sp, #12
            while (latch[i])
    4ffa:	9803      	ldr	r0, [sp, #12]
    4ffc:	b950      	cbnz	r0, 5014 <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ffe:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    5002:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5006:	6a33      	ldr	r3, [r6, #32]
    5008:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    500a:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    500c:	2b00      	cmp	r3, #0
    500e:	d1f0      	bne.n	4ff2 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    5010:	2401      	movs	r4, #1
    5012:	e069      	b.n	50e8 <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
    5014:	fa90 faa0 	rbit	sl, r0
    5018:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    501c:	4a39      	ldr	r2, [pc, #228]	; (5104 <nrfx_gpiote_irq_handler+0x150>)
    501e:	f10a 0308 	add.w	r3, sl, #8
    5022:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5026:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    502a:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    502e:	fa09 f403 	lsl.w	r4, r9, r3
    5032:	f818 300c 	ldrb.w	r3, [r8, ip]
    5036:	f3c1 0282 	ubfx	r2, r1, #2, #3
    503a:	ea23 0304 	bic.w	r3, r3, r4
    503e:	f808 300c 	strb.w	r3, [r8, ip]
    5042:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5046:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    504a:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    504c:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    504e:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    5052:	d518      	bpl.n	5086 <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
    5054:	4611      	mov	r1, r2
    5056:	4650      	mov	r0, sl
    5058:	9301      	str	r3, [sp, #4]
    505a:	f7ff fd39 	bl	4ad0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    505e:	9b01      	ldr	r3, [sp, #4]
    5060:	b2e4      	uxtb	r4, r4
    5062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5066:	f3c3 4301 	ubfx	r3, r3, #16, #2
    506a:	429c      	cmp	r4, r3
    506c:	d107      	bne.n	507e <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    506e:	2100      	movs	r1, #0
    5070:	4650      	mov	r0, sl
    5072:	f7ff fd13 	bl	4a9c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5076:	4621      	mov	r1, r4
    5078:	4650      	mov	r0, sl
    507a:	f7ff fd0f 	bl	4a9c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    507e:	fa09 f00a 	lsl.w	r0, r9, sl
    5082:	6230      	str	r0, [r6, #32]
}
    5084:	e7b9      	b.n	4ffa <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5086:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5088:	bf0c      	ite	eq
    508a:	2103      	moveq	r1, #3
    508c:	2102      	movne	r1, #2
    508e:	4650      	mov	r0, sl
    5090:	9201      	str	r2, [sp, #4]
    5092:	f7ff fd03 	bl	4a9c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5096:	9a01      	ldr	r2, [sp, #4]
    5098:	2a03      	cmp	r2, #3
    509a:	d004      	beq.n	50a6 <nrfx_gpiote_irq_handler+0xf2>
    509c:	2c02      	cmp	r4, #2
    509e:	d107      	bne.n	50b0 <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50a0:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50a4:	d1eb      	bne.n	507e <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
    50a6:	4659      	mov	r1, fp
    50a8:	4650      	mov	r0, sl
    50aa:	f7ff fd11 	bl	4ad0 <call_handler>
    50ae:	e7e6      	b.n	507e <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50b0:	2c03      	cmp	r4, #3
    50b2:	d1e4      	bne.n	507e <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50b4:	f1bb 0f02 	cmp.w	fp, #2
    50b8:	e7f4      	b.n	50a4 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    50ba:	fa95 f3a5 	rbit	r3, r5
    50be:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50c2:	fa04 f203 	lsl.w	r2, r4, r3
    50c6:	009b      	lsls	r3, r3, #2
    50c8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    50cc:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50d0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50d4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50d8:	f3c0 2004 	ubfx	r0, r0, #8, #5
    50dc:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    50e0:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50e4:	f7ff fcf4 	bl	4ad0 <call_handler>
    while (mask)
    50e8:	2d00      	cmp	r5, #0
    50ea:	d1e6      	bne.n	50ba <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    50ec:	b005      	add	sp, #20
    50ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50f2:	bf00      	nop
    50f4:	5000d100 	.word	0x5000d100
    50f8:	5000d000 	.word	0x5000d000
    50fc:	5000d120 	.word	0x5000d120
    5100:	50842500 	.word	0x50842500
    5104:	2000c594 	.word	0x2000c594

00005108 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    5108:	2200      	movs	r2, #0
    510a:	4b03      	ldr	r3, [pc, #12]	; (5118 <nvmc_readonly_mode_set+0x10>)
    510c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    5110:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    5114:	4770      	bx	lr
    5116:	bf00      	nop
    5118:	50039000 	.word	0x50039000

0000511c <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    511c:	4a04      	ldr	r2, [pc, #16]	; (5130 <nvmc_word_write+0x14>)
    511e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    5122:	07db      	lsls	r3, r3, #31
    5124:	d5fb      	bpl.n	511e <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    5126:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    5128:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    512c:	4770      	bx	lr
    512e:	bf00      	nop
    5130:	50039000 	.word	0x50039000

00005134 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    5134:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    5136:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    513a:	b983      	cbnz	r3, 515e <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    513c:	2202      	movs	r2, #2
    513e:	4b09      	ldr	r3, [pc, #36]	; (5164 <nrfx_nvmc_page_erase+0x30>)
    5140:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    5144:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    5148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    514c:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    514e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    5152:	07d2      	lsls	r2, r2, #31
    5154:	d5fb      	bpl.n	514e <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    5156:	f7ff ffd7 	bl	5108 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    515a:	4803      	ldr	r0, [pc, #12]	; (5168 <nrfx_nvmc_page_erase+0x34>)
}
    515c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    515e:	4803      	ldr	r0, [pc, #12]	; (516c <nrfx_nvmc_page_erase+0x38>)
    5160:	e7fc      	b.n	515c <nrfx_nvmc_page_erase+0x28>
    5162:	bf00      	nop
    5164:	50039000 	.word	0x50039000
    5168:	0bad0000 	.word	0x0bad0000
    516c:	0bad000a 	.word	0x0bad000a

00005170 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    5170:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    5172:	b508      	push	{r3, lr}
    5174:	4b05      	ldr	r3, [pc, #20]	; (518c <nrfx_nvmc_word_write+0x1c>)
    5176:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    517a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    517e:	f7ff ffcd 	bl	511c <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    5182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    5186:	f7ff bfbf 	b.w	5108 <nvmc_readonly_mode_set>
    518a:	bf00      	nop
    518c:	50039000 	.word	0x50039000

00005190 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5190:	4b0e      	ldr	r3, [pc, #56]	; (51cc <z_sys_init_run_level+0x3c>)
{
    5192:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5194:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5198:	3001      	adds	r0, #1
    519a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    519e:	42a6      	cmp	r6, r4
    51a0:	d800      	bhi.n	51a4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    51a2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    51a4:	e9d4 3500 	ldrd	r3, r5, [r4]
    51a8:	4628      	mov	r0, r5
    51aa:	4798      	blx	r3
		if (dev != NULL) {
    51ac:	b165      	cbz	r5, 51c8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    51ae:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    51b0:	b130      	cbz	r0, 51c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    51b2:	2800      	cmp	r0, #0
    51b4:	bfb8      	it	lt
    51b6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    51b8:	28ff      	cmp	r0, #255	; 0xff
    51ba:	bfa8      	it	ge
    51bc:	20ff      	movge	r0, #255	; 0xff
    51be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    51c0:	785a      	ldrb	r2, [r3, #1]
    51c2:	f042 0201 	orr.w	r2, r2, #1
    51c6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51c8:	3408      	adds	r4, #8
    51ca:	e7e8      	b.n	519e <z_sys_init_run_level+0xe>
    51cc:	00008c58 	.word	0x00008c58

000051d0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    51d0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    51d2:	4605      	mov	r5, r0
    51d4:	b910      	cbnz	r0, 51dc <z_impl_device_get_binding+0xc>
		return NULL;
    51d6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    51d8:	4620      	mov	r0, r4
    51da:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    51dc:	7803      	ldrb	r3, [r0, #0]
    51de:	2b00      	cmp	r3, #0
    51e0:	d0f9      	beq.n	51d6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    51e2:	4c0e      	ldr	r4, [pc, #56]	; (521c <z_impl_device_get_binding+0x4c>)
    51e4:	4e0e      	ldr	r6, [pc, #56]	; (5220 <z_impl_device_get_binding+0x50>)
    51e6:	42b4      	cmp	r4, r6
    51e8:	d108      	bne.n	51fc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    51ea:	4c0c      	ldr	r4, [pc, #48]	; (521c <z_impl_device_get_binding+0x4c>)
    51ec:	42b4      	cmp	r4, r6
    51ee:	d0f2      	beq.n	51d6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    51f0:	4620      	mov	r0, r4
    51f2:	f003 f9c8 	bl	8586 <z_device_is_ready>
    51f6:	b950      	cbnz	r0, 520e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    51f8:	3418      	adds	r4, #24
    51fa:	e7f7      	b.n	51ec <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    51fc:	4620      	mov	r0, r4
    51fe:	f003 f9c2 	bl	8586 <z_device_is_ready>
    5202:	b110      	cbz	r0, 520a <z_impl_device_get_binding+0x3a>
    5204:	6823      	ldr	r3, [r4, #0]
    5206:	42ab      	cmp	r3, r5
    5208:	d0e6      	beq.n	51d8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    520a:	3418      	adds	r4, #24
    520c:	e7eb      	b.n	51e6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    520e:	4628      	mov	r0, r5
    5210:	6821      	ldr	r1, [r4, #0]
    5212:	f001 f98d 	bl	6530 <strcmp>
    5216:	2800      	cmp	r0, #0
    5218:	d1ee      	bne.n	51f8 <z_impl_device_get_binding+0x28>
    521a:	e7dd      	b.n	51d8 <z_impl_device_get_binding+0x8>
    521c:	00008614 	.word	0x00008614
    5220:	0000868c 	.word	0x0000868c

00005224 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5224:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5226:	4604      	mov	r4, r0
    5228:	460d      	mov	r5, r1
	__asm__ volatile(
    522a:	f04f 0320 	mov.w	r3, #32
    522e:	f3ef 8611 	mrs	r6, BASEPRI
    5232:	f383 8812 	msr	BASEPRI_MAX, r3
    5236:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    523a:	2200      	movs	r2, #0
    523c:	2804      	cmp	r0, #4
    523e:	bf96      	itet	ls
    5240:	4b11      	ldrls	r3, [pc, #68]	; (5288 <z_fatal_error+0x64>)
    5242:	4b12      	ldrhi	r3, [pc, #72]	; (528c <z_fatal_error+0x68>)
	return 0;
    5244:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5248:	9200      	str	r2, [sp, #0]
    524a:	2145      	movs	r1, #69	; 0x45
    524c:	4602      	mov	r2, r0
    524e:	4810      	ldr	r0, [pc, #64]	; (5290 <z_fatal_error+0x6c>)
    5250:	f000 fe48 	bl	5ee4 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5254:	b13d      	cbz	r5, 5266 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5256:	69eb      	ldr	r3, [r5, #28]
    5258:	f3c3 0308 	ubfx	r3, r3, #0, #9
    525c:	b11b      	cbz	r3, 5266 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    525e:	2145      	movs	r1, #69	; 0x45
    5260:	480c      	ldr	r0, [pc, #48]	; (5294 <z_fatal_error+0x70>)
    5262:	f000 fe3f 	bl	5ee4 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5266:	2200      	movs	r2, #0
    5268:	4b0b      	ldr	r3, [pc, #44]	; (5298 <z_fatal_error+0x74>)
    526a:	2145      	movs	r1, #69	; 0x45
    526c:	480b      	ldr	r0, [pc, #44]	; (529c <z_fatal_error+0x78>)
    526e:	f000 fe39 	bl	5ee4 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5272:	4629      	mov	r1, r5
    5274:	4620      	mov	r0, r4
    5276:	f7fe fe8b 	bl	3f90 <k_sys_fatal_error_handler>
	__asm__ volatile(
    527a:	f386 8811 	msr	BASEPRI, r6
    527e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5282:	b002      	add	sp, #8
    5284:	bd70      	pop	{r4, r5, r6, pc}
    5286:	bf00      	nop
    5288:	00008c6c 	.word	0x00008c6c
    528c:	00009b05 	.word	0x00009b05
    5290:	00009b13 	.word	0x00009b13
    5294:	00009b40 	.word	0x00009b40
    5298:	00009b66 	.word	0x00009b66
    529c:	00009b6e 	.word	0x00009b6e

000052a0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    52a0:	2201      	movs	r2, #1
{
    52a2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    52a4:	4b08      	ldr	r3, [pc, #32]	; (52c8 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52a6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    52a8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    52aa:	f7ff ff71 	bl	5190 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    52ae:	f003 f982 	bl	85b6 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    52b2:	2003      	movs	r0, #3
    52b4:	f7ff ff6c 	bl	5190 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    52b8:	f7fb f8d2 	bl	460 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    52bc:	4a03      	ldr	r2, [pc, #12]	; (52cc <bg_thread_main+0x2c>)
    52be:	7b13      	ldrb	r3, [r2, #12]
    52c0:	f023 0301 	bic.w	r3, r3, #1
    52c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    52c6:	bd08      	pop	{r3, pc}
    52c8:	2000fe51 	.word	0x2000fe51
    52cc:	2000c690 	.word	0x2000c690

000052d0 <z_bss_zero>:
{
    52d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    52d2:	4803      	ldr	r0, [pc, #12]	; (52e0 <z_bss_zero+0x10>)
    52d4:	4a03      	ldr	r2, [pc, #12]	; (52e4 <z_bss_zero+0x14>)
    52d6:	2100      	movs	r1, #0
    52d8:	1a12      	subs	r2, r2, r0
    52da:	f003 f95e 	bl	859a <z_early_memset>
}
    52de:	bd08      	pop	{r3, pc}
    52e0:	2000c670 	.word	0x2000c670
    52e4:	2000fe54 	.word	0x2000fe54

000052e8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    52e8:	b508      	push	{r3, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    52ea:	4b19      	ldr	r3, [pc, #100]	; (5350 <z_cstart+0x68>)
	uint32_t msp =
    52ec:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    52f0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    52f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    52f8:	2500      	movs	r5, #0
    52fa:	23e0      	movs	r3, #224	; 0xe0
    52fc:	4c15      	ldr	r4, [pc, #84]	; (5354 <z_cstart+0x6c>)
    52fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    5302:	77e5      	strb	r5, [r4, #31]
    5304:	7625      	strb	r5, [r4, #24]
    5306:	7665      	strb	r5, [r4, #25]
    5308:	76a5      	strb	r5, [r4, #26]
    530a:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    530e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5310:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5314:	6263      	str	r3, [r4, #36]	; 0x24
    5316:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    531a:	f7fd fd33 	bl	2d84 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    531e:	f7fd fa85 	bl	282c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5326:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5328:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    532a:	f7fd fef3 	bl	3114 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    532e:	f7fd fdc3 	bl	2eb8 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5332:	f003 f927 	bl	8584 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5336:	4628      	mov	r0, r5
    5338:	f7ff ff2a 	bl	5190 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    533c:	2001      	movs	r0, #1
    533e:	f7ff ff27 	bl	5190 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    5342:	462b      	mov	r3, r5
    5344:	462a      	mov	r2, r5
    5346:	4629      	mov	r1, r5
    5348:	4803      	ldr	r0, [pc, #12]	; (5358 <z_cstart+0x70>)
    534a:	f7fd fb1f 	bl	298c <z_arm_switch_to_main_no_multithreading>
    534e:	bf00      	nop
    5350:	20012658 	.word	0x20012658
    5354:	e000ed00 	.word	0xe000ed00
    5358:	000052a1 	.word	0x000052a1

0000535c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    535c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    535e:	4806      	ldr	r0, [pc, #24]	; (5378 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5360:	4a06      	ldr	r2, [pc, #24]	; (537c <z_data_copy+0x20>)
    5362:	4907      	ldr	r1, [pc, #28]	; (5380 <z_data_copy+0x24>)
    5364:	1a12      	subs	r2, r2, r0
    5366:	f003 f91a 	bl	859e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    536a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    536e:	4a05      	ldr	r2, [pc, #20]	; (5384 <z_data_copy+0x28>)
    5370:	4905      	ldr	r1, [pc, #20]	; (5388 <z_data_copy+0x2c>)
    5372:	4806      	ldr	r0, [pc, #24]	; (538c <z_data_copy+0x30>)
    5374:	f003 b913 	b.w	859e <z_early_memcpy>
    5378:	2000c500 	.word	0x2000c500
    537c:	2000c66c 	.word	0x2000c66c
    5380:	00009bf0 	.word	0x00009bf0
    5384:	00000000 	.word	0x00000000
    5388:	00009bd8 	.word	0x00009bd8
    538c:	2000c500 	.word	0x2000c500

00005390 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5390:	4b03      	ldr	r3, [pc, #12]	; (53a0 <elapsed+0x10>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	b90b      	cbnz	r3, 539a <elapsed+0xa>
    5396:	f7fe bdf1 	b.w	3f7c <sys_clock_elapsed>
}
    539a:	2000      	movs	r0, #0
    539c:	4770      	bx	lr
    539e:	bf00      	nop
    53a0:	2000e070 	.word	0x2000e070

000053a4 <next_timeout>:
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    53a4:	4b0d      	ldr	r3, [pc, #52]	; (53dc <next_timeout+0x38>)

static int32_t next_timeout(void)
{
    53a6:	b510      	push	{r4, lr}
    53a8:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53aa:	429c      	cmp	r4, r3
    53ac:	bf08      	it	eq
    53ae:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    53b0:	f7ff ffee 	bl	5390 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    53b4:	b174      	cbz	r4, 53d4 <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    53b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    53ba:	1a1b      	subs	r3, r3, r0
    53bc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    53c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    53c4:	f170 0200 	sbcs.w	r2, r0, #0
    53c8:	da04      	bge.n	53d4 <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    53ca:	2800      	cmp	r0, #0
    53cc:	bfac      	ite	ge
    53ce:	4618      	movge	r0, r3
    53d0:	2000      	movlt	r0, #0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    53d2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    53d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    53d8:	e7fb      	b.n	53d2 <next_timeout+0x2e>
    53da:	bf00      	nop
    53dc:	2000c5f0 	.word	0x2000c5f0

000053e0 <remove_timeout>:
{
    53e0:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    53e2:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    53e4:	b168      	cbz	r0, 5402 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    53e6:	4a0a      	ldr	r2, [pc, #40]	; (5410 <remove_timeout+0x30>)
    53e8:	6852      	ldr	r2, [r2, #4]
    53ea:	4290      	cmp	r0, r2
    53ec:	d009      	beq.n	5402 <remove_timeout+0x22>
	if (next(t) != NULL) {
    53ee:	b143      	cbz	r3, 5402 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    53f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    53f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    53f8:	1912      	adds	r2, r2, r4
    53fa:	eb41 0105 	adc.w	r1, r1, r5
    53fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5402:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5404:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5406:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5408:	2300      	movs	r3, #0
	node->prev = NULL;
    540a:	e9c0 3300 	strd	r3, r3, [r0]
}
    540e:	bd30      	pop	{r4, r5, pc}
    5410:	2000c5f0 	.word	0x2000c5f0

00005414 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    5418:	f04f 0320 	mov.w	r3, #32
    541c:	f3ef 8411 	mrs	r4, BASEPRI
    5420:	f383 8812 	msr	BASEPRI_MAX, r3
    5424:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5428:	4e23      	ldr	r6, [pc, #140]	; (54b8 <sys_clock_announce+0xa4>)
	return list->head == list;
    542a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 54bc <sys_clock_announce+0xa8>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    542e:	4d24      	ldr	r5, [pc, #144]	; (54c0 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
    5430:	6030      	str	r0, [r6, #0]
    5432:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5436:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5438:	4540      	cmp	r0, r8
    543a:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    543e:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5442:	d00b      	beq.n	545c <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5444:	b150      	cbz	r0, 545c <sys_clock_announce+0x48>
    5446:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    544a:	429a      	cmp	r2, r3
    544c:	eb77 090c 	sbcs.w	r9, r7, ip
    5450:	da16      	bge.n	5480 <sys_clock_announce+0x6c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5452:	1a9b      	subs	r3, r3, r2
    5454:	eb6c 0c07 	sbc.w	ip, ip, r7
    5458:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    545c:	1852      	adds	r2, r2, r1
    545e:	eb4e 0707 	adc.w	r7, lr, r7
    5462:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5466:	2500      	movs	r5, #0
    5468:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    546a:	f7ff ff9b 	bl	53a4 <next_timeout>
    546e:	4629      	mov	r1, r5
    5470:	f7fe fd54 	bl	3f1c <sys_clock_set_timeout>
	__asm__ volatile(
    5474:	f384 8811 	msr	BASEPRI, r4
    5478:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    547c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5480:	1859      	adds	r1, r3, r1
    5482:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5486:	1ad3      	subs	r3, r2, r3
    5488:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    548a:	2200      	movs	r2, #0
    548c:	2300      	movs	r3, #0
    548e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5492:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5496:	f7ff ffa3 	bl	53e0 <remove_timeout>
    549a:	f384 8811 	msr	BASEPRI, r4
    549e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    54a2:	6883      	ldr	r3, [r0, #8]
    54a4:	4798      	blx	r3
	__asm__ volatile(
    54a6:	f04f 0320 	mov.w	r3, #32
    54aa:	f3ef 8411 	mrs	r4, BASEPRI
    54ae:	f383 8812 	msr	BASEPRI_MAX, r3
    54b2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    54b6:	e7bc      	b.n	5432 <sys_clock_announce+0x1e>
    54b8:	2000e070 	.word	0x2000e070
    54bc:	2000c5f0 	.word	0x2000c5f0
    54c0:	2000c710 	.word	0x2000c710

000054c4 <nrf_cc3xx_platform_init_no_rng>:
    54c4:	b510      	push	{r4, lr}
    54c6:	4c0a      	ldr	r4, [pc, #40]	; (54f0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    54c8:	6823      	ldr	r3, [r4, #0]
    54ca:	b11b      	cbz	r3, 54d4 <nrf_cc3xx_platform_init_no_rng+0x10>
    54cc:	2301      	movs	r3, #1
    54ce:	2000      	movs	r0, #0
    54d0:	6023      	str	r3, [r4, #0]
    54d2:	bd10      	pop	{r4, pc}
    54d4:	f000 f852 	bl	557c <CC_LibInitNoRng>
    54d8:	2800      	cmp	r0, #0
    54da:	d0f7      	beq.n	54cc <nrf_cc3xx_platform_init_no_rng+0x8>
    54dc:	3801      	subs	r0, #1
    54de:	2806      	cmp	r0, #6
    54e0:	d803      	bhi.n	54ea <nrf_cc3xx_platform_init_no_rng+0x26>
    54e2:	4b04      	ldr	r3, [pc, #16]	; (54f4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    54e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    54e8:	bd10      	pop	{r4, pc}
    54ea:	4803      	ldr	r0, [pc, #12]	; (54f8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    54ec:	bd10      	pop	{r4, pc}
    54ee:	bf00      	nop
    54f0:	2000e074 	.word	0x2000e074
    54f4:	00008c80 	.word	0x00008c80
    54f8:	ffff8ffe 	.word	0xffff8ffe

000054fc <nrf_cc3xx_platform_abort>:
    54fc:	f3bf 8f4f 	dsb	sy
    5500:	4905      	ldr	r1, [pc, #20]	; (5518 <nrf_cc3xx_platform_abort+0x1c>)
    5502:	4b06      	ldr	r3, [pc, #24]	; (551c <nrf_cc3xx_platform_abort+0x20>)
    5504:	68ca      	ldr	r2, [r1, #12]
    5506:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    550a:	4313      	orrs	r3, r2
    550c:	60cb      	str	r3, [r1, #12]
    550e:	f3bf 8f4f 	dsb	sy
    5512:	bf00      	nop
    5514:	e7fd      	b.n	5512 <nrf_cc3xx_platform_abort+0x16>
    5516:	bf00      	nop
    5518:	e000ed00 	.word	0xe000ed00
    551c:	05fa0004 	.word	0x05fa0004

00005520 <CC_PalAbort>:
    5520:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5524:	2100      	movs	r1, #0
    5526:	b430      	push	{r4, r5}
    5528:	4a06      	ldr	r2, [pc, #24]	; (5544 <CC_PalAbort+0x24>)
    552a:	4d07      	ldr	r5, [pc, #28]	; (5548 <CC_PalAbort+0x28>)
    552c:	4c07      	ldr	r4, [pc, #28]	; (554c <CC_PalAbort+0x2c>)
    552e:	602b      	str	r3, [r5, #0]
    5530:	6013      	str	r3, [r2, #0]
    5532:	6023      	str	r3, [r4, #0]
    5534:	4a06      	ldr	r2, [pc, #24]	; (5550 <CC_PalAbort+0x30>)
    5536:	4c07      	ldr	r4, [pc, #28]	; (5554 <CC_PalAbort+0x34>)
    5538:	60eb      	str	r3, [r5, #12]
    553a:	6863      	ldr	r3, [r4, #4]
    553c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5540:	bc30      	pop	{r4, r5}
    5542:	4718      	bx	r3
    5544:	50841404 	.word	0x50841404
    5548:	50841400 	.word	0x50841400
    554c:	50841408 	.word	0x50841408
    5550:	50840000 	.word	0x50840000
    5554:	2000c5f8 	.word	0x2000c5f8

00005558 <nrf_cc3xx_platform_set_abort>:
    5558:	4b02      	ldr	r3, [pc, #8]	; (5564 <nrf_cc3xx_platform_set_abort+0xc>)
    555a:	e9d0 1200 	ldrd	r1, r2, [r0]
    555e:	e9c3 1200 	strd	r1, r2, [r3]
    5562:	4770      	bx	lr
    5564:	2000c5f8 	.word	0x2000c5f8

00005568 <mbedtls_platform_zeroize>:
    5568:	b138      	cbz	r0, 557a <mbedtls_platform_zeroize+0x12>
    556a:	b131      	cbz	r1, 557a <mbedtls_platform_zeroize+0x12>
    556c:	2200      	movs	r2, #0
    556e:	4401      	add	r1, r0
    5570:	4603      	mov	r3, r0
    5572:	3001      	adds	r0, #1
    5574:	4288      	cmp	r0, r1
    5576:	701a      	strb	r2, [r3, #0]
    5578:	d1fa      	bne.n	5570 <mbedtls_platform_zeroize+0x8>
    557a:	4770      	bx	lr

0000557c <CC_LibInitNoRng>:
    557c:	b510      	push	{r4, lr}
    557e:	f000 f833 	bl	55e8 <CC_HalInit>
    5582:	b120      	cbz	r0, 558e <CC_LibInitNoRng+0x12>
    5584:	2403      	movs	r4, #3
    5586:	f000 f867 	bl	5658 <CC_PalTerminate>
    558a:	4620      	mov	r0, r4
    558c:	bd10      	pop	{r4, pc}
    558e:	f000 f835 	bl	55fc <CC_PalInit>
    5592:	b990      	cbnz	r0, 55ba <CC_LibInitNoRng+0x3e>
    5594:	f000 f8b0 	bl	56f8 <CC_PalPowerSaveModeSelect>
    5598:	b990      	cbnz	r0, 55c0 <CC_LibInitNoRng+0x44>
    559a:	4b0f      	ldr	r3, [pc, #60]	; (55d8 <CC_LibInitNoRng+0x5c>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	0e1b      	lsrs	r3, r3, #24
    55a0:	2bf0      	cmp	r3, #240	; 0xf0
    55a2:	d108      	bne.n	55b6 <CC_LibInitNoRng+0x3a>
    55a4:	4a0d      	ldr	r2, [pc, #52]	; (55dc <CC_LibInitNoRng+0x60>)
    55a6:	4b0e      	ldr	r3, [pc, #56]	; (55e0 <CC_LibInitNoRng+0x64>)
    55a8:	6812      	ldr	r2, [r2, #0]
    55aa:	429a      	cmp	r2, r3
    55ac:	d00a      	beq.n	55c4 <CC_LibInitNoRng+0x48>
    55ae:	2407      	movs	r4, #7
    55b0:	f000 f81c 	bl	55ec <CC_HalTerminate>
    55b4:	e7e7      	b.n	5586 <CC_LibInitNoRng+0xa>
    55b6:	2406      	movs	r4, #6
    55b8:	e7fa      	b.n	55b0 <CC_LibInitNoRng+0x34>
    55ba:	2404      	movs	r4, #4
    55bc:	4620      	mov	r0, r4
    55be:	bd10      	pop	{r4, pc}
    55c0:	2400      	movs	r4, #0
    55c2:	e7f5      	b.n	55b0 <CC_LibInitNoRng+0x34>
    55c4:	2001      	movs	r0, #1
    55c6:	f000 f897 	bl	56f8 <CC_PalPowerSaveModeSelect>
    55ca:	4604      	mov	r4, r0
    55cc:	2800      	cmp	r0, #0
    55ce:	d1f7      	bne.n	55c0 <CC_LibInitNoRng+0x44>
    55d0:	4b04      	ldr	r3, [pc, #16]	; (55e4 <CC_LibInitNoRng+0x68>)
    55d2:	6018      	str	r0, [r3, #0]
    55d4:	e7d9      	b.n	558a <CC_LibInitNoRng+0xe>
    55d6:	bf00      	nop
    55d8:	50841928 	.word	0x50841928
    55dc:	50841a24 	.word	0x50841a24
    55e0:	20e00000 	.word	0x20e00000
    55e4:	50841a0c 	.word	0x50841a0c

000055e8 <CC_HalInit>:
    55e8:	2000      	movs	r0, #0
    55ea:	4770      	bx	lr

000055ec <CC_HalTerminate>:
    55ec:	2000      	movs	r0, #0
    55ee:	4770      	bx	lr

000055f0 <CC_HalMaskInterrupt>:
    55f0:	4b01      	ldr	r3, [pc, #4]	; (55f8 <CC_HalMaskInterrupt+0x8>)
    55f2:	6018      	str	r0, [r3, #0]
    55f4:	4770      	bx	lr
    55f6:	bf00      	nop
    55f8:	50841a04 	.word	0x50841a04

000055fc <CC_PalInit>:
    55fc:	b510      	push	{r4, lr}
    55fe:	4811      	ldr	r0, [pc, #68]	; (5644 <CC_PalInit+0x48>)
    5600:	f000 f848 	bl	5694 <CC_PalMutexCreate>
    5604:	b100      	cbz	r0, 5608 <CC_PalInit+0xc>
    5606:	bd10      	pop	{r4, pc}
    5608:	480f      	ldr	r0, [pc, #60]	; (5648 <CC_PalInit+0x4c>)
    560a:	f000 f843 	bl	5694 <CC_PalMutexCreate>
    560e:	2800      	cmp	r0, #0
    5610:	d1f9      	bne.n	5606 <CC_PalInit+0xa>
    5612:	4c0e      	ldr	r4, [pc, #56]	; (564c <CC_PalInit+0x50>)
    5614:	4620      	mov	r0, r4
    5616:	f000 f83d 	bl	5694 <CC_PalMutexCreate>
    561a:	2800      	cmp	r0, #0
    561c:	d1f3      	bne.n	5606 <CC_PalInit+0xa>
    561e:	4b0c      	ldr	r3, [pc, #48]	; (5650 <CC_PalInit+0x54>)
    5620:	480c      	ldr	r0, [pc, #48]	; (5654 <CC_PalInit+0x58>)
    5622:	601c      	str	r4, [r3, #0]
    5624:	f000 f836 	bl	5694 <CC_PalMutexCreate>
    5628:	4601      	mov	r1, r0
    562a:	2800      	cmp	r0, #0
    562c:	d1eb      	bne.n	5606 <CC_PalInit+0xa>
    562e:	f000 f82d 	bl	568c <CC_PalDmaInit>
    5632:	4604      	mov	r4, r0
    5634:	b108      	cbz	r0, 563a <CC_PalInit+0x3e>
    5636:	4620      	mov	r0, r4
    5638:	bd10      	pop	{r4, pc}
    563a:	f000 f83f 	bl	56bc <CC_PalPowerSaveModeInit>
    563e:	4620      	mov	r0, r4
    5640:	e7fa      	b.n	5638 <CC_PalInit+0x3c>
    5642:	bf00      	nop
    5644:	2000c60c 	.word	0x2000c60c
    5648:	2000c600 	.word	0x2000c600
    564c:	2000c608 	.word	0x2000c608
    5650:	2000c610 	.word	0x2000c610
    5654:	2000c604 	.word	0x2000c604

00005658 <CC_PalTerminate>:
    5658:	b508      	push	{r3, lr}
    565a:	4808      	ldr	r0, [pc, #32]	; (567c <CC_PalTerminate+0x24>)
    565c:	f000 f824 	bl	56a8 <CC_PalMutexDestroy>
    5660:	4807      	ldr	r0, [pc, #28]	; (5680 <CC_PalTerminate+0x28>)
    5662:	f000 f821 	bl	56a8 <CC_PalMutexDestroy>
    5666:	4807      	ldr	r0, [pc, #28]	; (5684 <CC_PalTerminate+0x2c>)
    5668:	f000 f81e 	bl	56a8 <CC_PalMutexDestroy>
    566c:	4806      	ldr	r0, [pc, #24]	; (5688 <CC_PalTerminate+0x30>)
    566e:	f000 f81b 	bl	56a8 <CC_PalMutexDestroy>
    5672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5676:	f000 b80b 	b.w	5690 <CC_PalDmaTerminate>
    567a:	bf00      	nop
    567c:	2000c60c 	.word	0x2000c60c
    5680:	2000c600 	.word	0x2000c600
    5684:	2000c608 	.word	0x2000c608
    5688:	2000c604 	.word	0x2000c604

0000568c <CC_PalDmaInit>:
    568c:	2000      	movs	r0, #0
    568e:	4770      	bx	lr

00005690 <CC_PalDmaTerminate>:
    5690:	4770      	bx	lr
    5692:	bf00      	nop

00005694 <CC_PalMutexCreate>:
    5694:	b508      	push	{r3, lr}
    5696:	4b03      	ldr	r3, [pc, #12]	; (56a4 <CC_PalMutexCreate+0x10>)
    5698:	6802      	ldr	r2, [r0, #0]
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	6810      	ldr	r0, [r2, #0]
    569e:	4798      	blx	r3
    56a0:	2000      	movs	r0, #0
    56a2:	bd08      	pop	{r3, pc}
    56a4:	2000c61c 	.word	0x2000c61c

000056a8 <CC_PalMutexDestroy>:
    56a8:	b508      	push	{r3, lr}
    56aa:	4b03      	ldr	r3, [pc, #12]	; (56b8 <CC_PalMutexDestroy+0x10>)
    56ac:	6802      	ldr	r2, [r0, #0]
    56ae:	685b      	ldr	r3, [r3, #4]
    56b0:	6810      	ldr	r0, [r2, #0]
    56b2:	4798      	blx	r3
    56b4:	2000      	movs	r0, #0
    56b6:	bd08      	pop	{r3, pc}
    56b8:	2000c61c 	.word	0x2000c61c

000056bc <CC_PalPowerSaveModeInit>:
    56bc:	b570      	push	{r4, r5, r6, lr}
    56be:	4c09      	ldr	r4, [pc, #36]	; (56e4 <CC_PalPowerSaveModeInit+0x28>)
    56c0:	4d09      	ldr	r5, [pc, #36]	; (56e8 <CC_PalPowerSaveModeInit+0x2c>)
    56c2:	6920      	ldr	r0, [r4, #16]
    56c4:	68ab      	ldr	r3, [r5, #8]
    56c6:	4798      	blx	r3
    56c8:	b118      	cbz	r0, 56d2 <CC_PalPowerSaveModeInit+0x16>
    56ca:	4b08      	ldr	r3, [pc, #32]	; (56ec <CC_PalPowerSaveModeInit+0x30>)
    56cc:	4808      	ldr	r0, [pc, #32]	; (56f0 <CC_PalPowerSaveModeInit+0x34>)
    56ce:	685b      	ldr	r3, [r3, #4]
    56d0:	4798      	blx	r3
    56d2:	2100      	movs	r1, #0
    56d4:	4a07      	ldr	r2, [pc, #28]	; (56f4 <CC_PalPowerSaveModeInit+0x38>)
    56d6:	68eb      	ldr	r3, [r5, #12]
    56d8:	6011      	str	r1, [r2, #0]
    56da:	6920      	ldr	r0, [r4, #16]
    56dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56e0:	4718      	bx	r3
    56e2:	bf00      	nop
    56e4:	2000c62c 	.word	0x2000c62c
    56e8:	2000c61c 	.word	0x2000c61c
    56ec:	2000c5f8 	.word	0x2000c5f8
    56f0:	00008c9c 	.word	0x00008c9c
    56f4:	2000e078 	.word	0x2000e078

000056f8 <CC_PalPowerSaveModeSelect>:
    56f8:	b570      	push	{r4, r5, r6, lr}
    56fa:	4d1a      	ldr	r5, [pc, #104]	; (5764 <CC_PalPowerSaveModeSelect+0x6c>)
    56fc:	4e1a      	ldr	r6, [pc, #104]	; (5768 <CC_PalPowerSaveModeSelect+0x70>)
    56fe:	4604      	mov	r4, r0
    5700:	68b2      	ldr	r2, [r6, #8]
    5702:	6928      	ldr	r0, [r5, #16]
    5704:	4790      	blx	r2
    5706:	b9f0      	cbnz	r0, 5746 <CC_PalPowerSaveModeSelect+0x4e>
    5708:	b15c      	cbz	r4, 5722 <CC_PalPowerSaveModeSelect+0x2a>
    570a:	4c18      	ldr	r4, [pc, #96]	; (576c <CC_PalPowerSaveModeSelect+0x74>)
    570c:	6823      	ldr	r3, [r4, #0]
    570e:	b1ab      	cbz	r3, 573c <CC_PalPowerSaveModeSelect+0x44>
    5710:	2b01      	cmp	r3, #1
    5712:	d01a      	beq.n	574a <CC_PalPowerSaveModeSelect+0x52>
    5714:	3b01      	subs	r3, #1
    5716:	6023      	str	r3, [r4, #0]
    5718:	6928      	ldr	r0, [r5, #16]
    571a:	68f3      	ldr	r3, [r6, #12]
    571c:	4798      	blx	r3
    571e:	2000      	movs	r0, #0
    5720:	bd70      	pop	{r4, r5, r6, pc}
    5722:	4c12      	ldr	r4, [pc, #72]	; (576c <CC_PalPowerSaveModeSelect+0x74>)
    5724:	6821      	ldr	r1, [r4, #0]
    5726:	b939      	cbnz	r1, 5738 <CC_PalPowerSaveModeSelect+0x40>
    5728:	2001      	movs	r0, #1
    572a:	4b11      	ldr	r3, [pc, #68]	; (5770 <CC_PalPowerSaveModeSelect+0x78>)
    572c:	4a11      	ldr	r2, [pc, #68]	; (5774 <CC_PalPowerSaveModeSelect+0x7c>)
    572e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    5732:	6813      	ldr	r3, [r2, #0]
    5734:	2b00      	cmp	r3, #0
    5736:	d1fc      	bne.n	5732 <CC_PalPowerSaveModeSelect+0x3a>
    5738:	3101      	adds	r1, #1
    573a:	6021      	str	r1, [r4, #0]
    573c:	68f3      	ldr	r3, [r6, #12]
    573e:	6928      	ldr	r0, [r5, #16]
    5740:	4798      	blx	r3
    5742:	2000      	movs	r0, #0
    5744:	bd70      	pop	{r4, r5, r6, pc}
    5746:	480c      	ldr	r0, [pc, #48]	; (5778 <CC_PalPowerSaveModeSelect+0x80>)
    5748:	bd70      	pop	{r4, r5, r6, pc}
    574a:	4a0a      	ldr	r2, [pc, #40]	; (5774 <CC_PalPowerSaveModeSelect+0x7c>)
    574c:	6813      	ldr	r3, [r2, #0]
    574e:	2b00      	cmp	r3, #0
    5750:	d1fc      	bne.n	574c <CC_PalPowerSaveModeSelect+0x54>
    5752:	4a07      	ldr	r2, [pc, #28]	; (5770 <CC_PalPowerSaveModeSelect+0x78>)
    5754:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5758:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    575c:	f7ff ff48 	bl	55f0 <CC_HalMaskInterrupt>
    5760:	6823      	ldr	r3, [r4, #0]
    5762:	e7d7      	b.n	5714 <CC_PalPowerSaveModeSelect+0x1c>
    5764:	2000c62c 	.word	0x2000c62c
    5768:	2000c61c 	.word	0x2000c61c
    576c:	2000e078 	.word	0x2000e078
    5770:	50840000 	.word	0x50840000
    5774:	50841910 	.word	0x50841910
    5778:	ffff8fe9 	.word	0xffff8fe9

0000577c <mutex_free>:
    577c:	b510      	push	{r4, lr}
    577e:	4604      	mov	r4, r0
    5780:	b130      	cbz	r0, 5790 <mutex_free+0x14>
    5782:	6863      	ldr	r3, [r4, #4]
    5784:	06db      	lsls	r3, r3, #27
    5786:	d502      	bpl.n	578e <mutex_free+0x12>
    5788:	2300      	movs	r3, #0
    578a:	6023      	str	r3, [r4, #0]
    578c:	6063      	str	r3, [r4, #4]
    578e:	bd10      	pop	{r4, pc}
    5790:	4b02      	ldr	r3, [pc, #8]	; (579c <mutex_free+0x20>)
    5792:	4803      	ldr	r0, [pc, #12]	; (57a0 <mutex_free+0x24>)
    5794:	685b      	ldr	r3, [r3, #4]
    5796:	4798      	blx	r3
    5798:	e7f3      	b.n	5782 <mutex_free+0x6>
    579a:	bf00      	nop
    579c:	2000c5f8 	.word	0x2000c5f8
    57a0:	00008cbc 	.word	0x00008cbc

000057a4 <mutex_unlock>:
    57a4:	b168      	cbz	r0, 57c2 <mutex_unlock+0x1e>
    57a6:	6843      	ldr	r3, [r0, #4]
    57a8:	b13b      	cbz	r3, 57ba <mutex_unlock+0x16>
    57aa:	06db      	lsls	r3, r3, #27
    57ac:	d507      	bpl.n	57be <mutex_unlock+0x1a>
    57ae:	f3bf 8f5f 	dmb	sy
    57b2:	2300      	movs	r3, #0
    57b4:	6003      	str	r3, [r0, #0]
    57b6:	4618      	mov	r0, r3
    57b8:	4770      	bx	lr
    57ba:	4803      	ldr	r0, [pc, #12]	; (57c8 <mutex_unlock+0x24>)
    57bc:	4770      	bx	lr
    57be:	4803      	ldr	r0, [pc, #12]	; (57cc <mutex_unlock+0x28>)
    57c0:	4770      	bx	lr
    57c2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    57c6:	4770      	bx	lr
    57c8:	ffff8fea 	.word	0xffff8fea
    57cc:	ffff8fe9 	.word	0xffff8fe9

000057d0 <mutex_init>:
    57d0:	b510      	push	{r4, lr}
    57d2:	4604      	mov	r4, r0
    57d4:	b120      	cbz	r0, 57e0 <mutex_init+0x10>
    57d6:	2200      	movs	r2, #0
    57d8:	2311      	movs	r3, #17
    57da:	6022      	str	r2, [r4, #0]
    57dc:	6063      	str	r3, [r4, #4]
    57de:	bd10      	pop	{r4, pc}
    57e0:	4801      	ldr	r0, [pc, #4]	; (57e8 <mutex_init+0x18>)
    57e2:	f7ff fe9d 	bl	5520 <CC_PalAbort>
    57e6:	e7f6      	b.n	57d6 <mutex_init+0x6>
    57e8:	00008ce4 	.word	0x00008ce4

000057ec <mutex_lock>:
    57ec:	b1a0      	cbz	r0, 5818 <mutex_lock+0x2c>
    57ee:	6843      	ldr	r3, [r0, #4]
    57f0:	b183      	cbz	r3, 5814 <mutex_lock+0x28>
    57f2:	06db      	lsls	r3, r3, #27
    57f4:	d50c      	bpl.n	5810 <mutex_lock+0x24>
    57f6:	2201      	movs	r2, #1
    57f8:	e8d0 3fef 	ldaex	r3, [r0]
    57fc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5800:	2900      	cmp	r1, #0
    5802:	d1f9      	bne.n	57f8 <mutex_lock+0xc>
    5804:	2b01      	cmp	r3, #1
    5806:	d0f7      	beq.n	57f8 <mutex_lock+0xc>
    5808:	f3bf 8f5f 	dmb	sy
    580c:	2000      	movs	r0, #0
    580e:	4770      	bx	lr
    5810:	4803      	ldr	r0, [pc, #12]	; (5820 <mutex_lock+0x34>)
    5812:	4770      	bx	lr
    5814:	4803      	ldr	r0, [pc, #12]	; (5824 <mutex_lock+0x38>)
    5816:	4770      	bx	lr
    5818:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    581c:	4770      	bx	lr
    581e:	bf00      	nop
    5820:	ffff8fe9 	.word	0xffff8fe9
    5824:	ffff8fea 	.word	0xffff8fea

00005828 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5828:	4770      	bx	lr

0000582a <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    582a:	b129      	cbz	r1, 5838 <flash_area_id_from_multi_image_slot+0xe>
    582c:	2901      	cmp	r1, #1
    582e:	bf14      	ite	ne
    5830:	f06f 0015 	mvnne.w	r0, #21
    5834:	2006      	moveq	r0, #6
    5836:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5838:	2002      	movs	r0, #2
}
    583a:	4770      	bx	lr

0000583c <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    583c:	2000      	movs	r0, #0
    583e:	4770      	bx	lr

00005840 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5844:	460e      	mov	r6, r1
    5846:	4617      	mov	r7, r2
    5848:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    584a:	4604      	mov	r4, r0
    584c:	b928      	cbnz	r0, 585a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    584e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5852:	4640      	mov	r0, r8
    5854:	b003      	add	sp, #12
    5856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    585a:	2900      	cmp	r1, #0
    585c:	d0f7      	beq.n	584e <bootutil_tlv_iter_begin+0xe>
    585e:	2a00      	cmp	r2, #0
    5860:	d0f5      	beq.n	584e <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5862:	68cb      	ldr	r3, [r1, #12]
    5864:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5866:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5868:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    586a:	2304      	movs	r3, #4
    586c:	4629      	mov	r1, r5
    586e:	eb0d 0203 	add.w	r2, sp, r3
    5872:	f000 fb45 	bl	5f00 <flash_area_read>
    5876:	4680      	mov	r8, r0
    5878:	2800      	cmp	r0, #0
    587a:	d1e8      	bne.n	584e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    587c:	f646 1208 	movw	r2, #26888	; 0x6908
    5880:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5884:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5886:	4291      	cmp	r1, r2
    5888:	d123      	bne.n	58d2 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    588a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    588e:	4299      	cmp	r1, r3
    5890:	d1dd      	bne.n	584e <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5892:	2304      	movs	r3, #4
    5894:	4638      	mov	r0, r7
    5896:	eb0d 0203 	add.w	r2, sp, r3
    589a:	4429      	add	r1, r5
    589c:	f000 fb30 	bl	5f00 <flash_area_read>
    58a0:	2800      	cmp	r0, #0
    58a2:	d1d4      	bne.n	584e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    58a4:	f646 1307 	movw	r3, #26887	; 0x6907
    58a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    58ac:	429a      	cmp	r2, r3
    58ae:	d1ce      	bne.n	584e <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    58b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    58b8:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    58ba:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    58bc:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    58c0:	442b      	add	r3, r5
    58c2:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    58c4:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58c6:	4413      	add	r3, r2
    it->type = type;
    58c8:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58cc:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    58ce:	6125      	str	r5, [r4, #16]
    return 0;
    58d0:	e7bf      	b.n	5852 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    58d2:	2b00      	cmp	r3, #0
    58d4:	d0e6      	beq.n	58a4 <bootutil_tlv_iter_begin+0x64>
    58d6:	e7ba      	b.n	584e <bootutil_tlv_iter_begin+0xe>

000058d8 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    58d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    58dc:	460f      	mov	r7, r1
    58de:	4690      	mov	r8, r2
    58e0:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    58e2:	4604      	mov	r4, r0
    58e4:	b920      	cbnz	r0, 58f0 <bootutil_tlv_iter_next+0x18>
        return -1;
    58e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    58ea:	b003      	add	sp, #12
    58ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    58f0:	6803      	ldr	r3, [r0, #0]
    58f2:	2b00      	cmp	r3, #0
    58f4:	d0f7      	beq.n	58e6 <bootutil_tlv_iter_next+0xe>
    58f6:	6843      	ldr	r3, [r0, #4]
    58f8:	2b00      	cmp	r3, #0
    58fa:	d0f4      	beq.n	58e6 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    58fc:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5900:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5904:	429a      	cmp	r2, r3
    5906:	d216      	bcs.n	5936 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5908:	6823      	ldr	r3, [r4, #0]
    590a:	895b      	ldrh	r3, [r3, #10]
    590c:	b123      	cbz	r3, 5918 <bootutil_tlv_iter_next+0x40>
    590e:	68e3      	ldr	r3, [r4, #12]
    5910:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5912:	bf04      	itt	eq
    5914:	3304      	addeq	r3, #4
    5916:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5918:	2304      	movs	r3, #4
    591a:	6921      	ldr	r1, [r4, #16]
    591c:	6860      	ldr	r0, [r4, #4]
    591e:	eb0d 0203 	add.w	r2, sp, r3
    5922:	f000 faed 	bl	5f00 <flash_area_read>
        if (rc) {
    5926:	2800      	cmp	r0, #0
    5928:	d1dd      	bne.n	58e6 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    592a:	7aa3      	ldrb	r3, [r4, #10]
    592c:	6925      	ldr	r5, [r4, #16]
    592e:	b123      	cbz	r3, 593a <bootutil_tlv_iter_next+0x62>
    5930:	68e3      	ldr	r3, [r4, #12]
    5932:	42ab      	cmp	r3, r5
    5934:	d801      	bhi.n	593a <bootutil_tlv_iter_next+0x62>
            return 1;
    5936:	2001      	movs	r0, #1
    5938:	e7d7      	b.n	58ea <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    593a:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    593c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5940:	4549      	cmp	r1, r9
    5942:	f102 0304 	add.w	r3, r2, #4
    5946:	d003      	beq.n	5950 <bootutil_tlv_iter_next+0x78>
    5948:	f8bd c004 	ldrh.w	ip, [sp, #4]
    594c:	458c      	cmp	ip, r1
    594e:	d10b      	bne.n	5968 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5950:	b116      	cbz	r6, 5958 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5952:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5956:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5958:	3504      	adds	r5, #4
    595a:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    595c:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5960:	6922      	ldr	r2, [r4, #16]
    5962:	4413      	add	r3, r2
    5964:	6123      	str	r3, [r4, #16]
            return 0;
    5966:	e7c0      	b.n	58ea <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5968:	442b      	add	r3, r5
    596a:	6123      	str	r3, [r4, #16]
    596c:	e7c8      	b.n	5900 <bootutil_tlv_iter_next+0x28>

0000596e <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    596e:	f000 bdeb 	b.w	6548 <memcmp>

00005972 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5972:	f44f 7340 	mov.w	r3, #768	; 0x300
    5976:	4358      	muls	r0, r3
}
    5978:	3030      	adds	r0, #48	; 0x30
    597a:	4770      	bx	lr

0000597c <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    597c:	780b      	ldrb	r3, [r1, #0]
    597e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5982:	2b02      	cmp	r3, #2
}
    5984:	bf14      	ite	ne
    5986:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    598a:	f44f 7040 	moveq.w	r0, #768	; 0x300
    598e:	4770      	bx	lr

00005990 <boot_status_off>:
{
    5990:	b510      	push	{r4, lr}
    5992:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5994:	f000 fb03 	bl	5f9e <flash_area_align>
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5998:	b2c3      	uxtb	r3, r0
}
    599a:	f44f 7040 	mov.w	r0, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    599e:	68a2      	ldr	r2, [r4, #8]
    59a0:	3a30      	subs	r2, #48	; 0x30
}
    59a2:	fb00 2013 	mls	r0, r0, r3, r2
    59a6:	bd10      	pop	{r4, pc}

000059a8 <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    59a8:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    59aa:	2201      	movs	r2, #1
    59ac:	3920      	subs	r1, #32
    59ae:	f001 b96a 	b.w	6c86 <boot_write_trailer_flag>

000059b2 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    59b2:	b513      	push	{r0, r1, r4, lr}
    59b4:	4604      	mov	r4, r0
    59b6:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    59b8:	f001 f902 	bl	6bc0 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    59bc:	2304      	movs	r3, #4
    59be:	f1a0 0108 	sub.w	r1, r0, #8
    59c2:	eb0d 0203 	add.w	r2, sp, r3
    59c6:	4620      	mov	r0, r4
    59c8:	f001 f92e 	bl	6c28 <boot_write_trailer>
}
    59cc:	b002      	add	sp, #8
    59ce:	bd10      	pop	{r4, pc}

000059d0 <boot_read_image_headers>:
{
    59d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    59d2:	4613      	mov	r3, r2
{
    59d4:	460f      	mov	r7, r1
    59d6:	4616      	mov	r6, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    59d8:	2100      	movs	r1, #0
    59da:	4602      	mov	r2, r0
{
    59dc:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    59de:	f7fb fa75 	bl	ecc <boot_read_image_header>
        if (rc != 0) {
    59e2:	4604      	mov	r4, r0
    59e4:	b950      	cbnz	r0, 59fc <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    59e6:	4633      	mov	r3, r6
    59e8:	2101      	movs	r1, #1
    59ea:	4628      	mov	r0, r5
    59ec:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    59f0:	f7fb fa6c 	bl	ecc <boot_read_image_header>
        if (rc != 0) {
    59f4:	b110      	cbz	r0, 59fc <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    59f6:	2f00      	cmp	r7, #0
    59f8:	bf18      	it	ne
    59fa:	4604      	movne	r4, r0
}
    59fc:	4620      	mov	r0, r4
    59fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005a00 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a02:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a04:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a06:	460c      	mov	r4, r1
    5a08:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a0a:	f7ff ff0e 	bl	582a <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5a0e:	4669      	mov	r1, sp
    5a10:	b2c0      	uxtb	r0, r0
    5a12:	f7fc f9a7 	bl	1d64 <flash_area_open>
    if (rc != 0) {
    5a16:	bb30      	cbnz	r0, 5a66 <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a18:	212c      	movs	r1, #44	; 0x2c
    5a1a:	fb01 5404 	mla	r4, r1, r4, r5
    5a1e:	8921      	ldrh	r1, [r4, #8]
    5a20:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a22:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a24:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a26:	2304      	movs	r3, #4
    5a28:	4629      	mov	r1, r5
    5a2a:	eb0d 0203 	add.w	r2, sp, r3
    5a2e:	f000 fa67 	bl	5f00 <flash_area_read>
    5a32:	b9c0      	cbnz	r0, 5a66 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a34:	f646 1308 	movw	r3, #26888	; 0x6908
    5a38:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5a3c:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a3e:	429a      	cmp	r2, r3
    5a40:	d116      	bne.n	5a70 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    5a42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a46:	429c      	cmp	r4, r3
    5a48:	d10d      	bne.n	5a66 <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5a4a:	2304      	movs	r3, #4
    5a4c:	9800      	ldr	r0, [sp, #0]
    5a4e:	eb0d 0203 	add.w	r2, sp, r3
    5a52:	1961      	adds	r1, r4, r5
    5a54:	f000 fa54 	bl	5f00 <flash_area_read>
    5a58:	b928      	cbnz	r0, 5a66 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5a5a:	f646 1307 	movw	r3, #26887	; 0x6907
    5a5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5a62:	429a      	cmp	r2, r3
    5a64:	d007      	beq.n	5a76 <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    5a66:	9800      	ldr	r0, [sp, #0]
    5a68:	f000 fa49 	bl	5efe <flash_area_close>
}
    5a6c:	b002      	add	sp, #8
    5a6e:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    5a70:	2c00      	cmp	r4, #0
    5a72:	d0f2      	beq.n	5a5a <boot_read_image_size.isra.0+0x5a>
    5a74:	e7f7      	b.n	5a66 <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5a76:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5a7a:	4421      	add	r1, r4
    5a7c:	4429      	add	r1, r5
    5a7e:	6031      	str	r1, [r6, #0]
    rc = 0;
    5a80:	e7f1      	b.n	5a66 <boot_read_image_size.isra.0+0x66>

00005a82 <boot_read_sectors>:
{
    5a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5a84:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5a88:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5a8c:	a901      	add	r1, sp, #4
    5a8e:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5a90:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a92:	f7fc f985 	bl	1da0 <flash_area_get_sectors>
    if (rc != 0) {
    5a96:	b958      	cbnz	r0, 5ab0 <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    5a98:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5a9a:	2006      	movs	r0, #6
    5a9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5a9e:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5aa0:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5aa2:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5aa4:	f7fc f97c 	bl	1da0 <flash_area_get_sectors>
    if (rc != 0) {
    5aa8:	4605      	mov	r5, r0
    5aaa:	b128      	cbz	r0, 5ab8 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    5aac:	2509      	movs	r5, #9
    5aae:	e000      	b.n	5ab2 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    5ab0:	2501      	movs	r5, #1
}
    5ab2:	4628      	mov	r0, r5
    5ab4:	b003      	add	sp, #12
    5ab6:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5ab8:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5aba:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5abc:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5abe:	f000 fa6e 	bl	5f9e <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5ac2:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5ac4:	e7f5      	b.n	5ab2 <boot_read_sectors+0x30>

00005ac6 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5ac6:	2301      	movs	r3, #1
    5ac8:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5aca:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5ace:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5ad0:	2300      	movs	r3, #0
    bs->source = 0;
    5ad2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5ad6:	4770      	bx	lr

00005ad8 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5ad8:	7943      	ldrb	r3, [r0, #5]
    5ada:	2b01      	cmp	r3, #1
    5adc:	d107      	bne.n	5aee <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5ade:	6803      	ldr	r3, [r0, #0]
    5ae0:	2b01      	cmp	r3, #1
    5ae2:	d104      	bne.n	5aee <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5ae4:	7900      	ldrb	r0, [r0, #4]
    5ae6:	1e43      	subs	r3, r0, #1
    5ae8:	4258      	negs	r0, r3
    5aea:	4158      	adcs	r0, r3
    5aec:	4770      	bx	lr
    5aee:	2000      	movs	r0, #0
}
    5af0:	4770      	bx	lr

00005af2 <boot_write_status>:
{
    5af2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5af4:	4606      	mov	r6, r0
    5af6:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5af8:	2002      	movs	r0, #2
    5afa:	a901      	add	r1, sp, #4
    5afc:	f7fc f932 	bl	1d64 <flash_area_open>
    if (rc != 0) {
    5b00:	bb38      	cbnz	r0, 5b52 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5b02:	9801      	ldr	r0, [sp, #4]
    5b04:	f7ff ff44 	bl	5990 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b08:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5b0a:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b0c:	4628      	mov	r0, r5
    5b0e:	f000 f8e5 	bl	5cdc <boot_status_internal_off>
    off = boot_status_off(fap) +
    5b12:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5b14:	9801      	ldr	r0, [sp, #4]
    5b16:	f000 fa42 	bl	5f9e <flash_area_align>
    5b1a:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5b1c:	9801      	ldr	r0, [sp, #4]
    5b1e:	f000 fa47 	bl	5fb0 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b22:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5b24:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b26:	eb0d 0002 	add.w	r0, sp, r2
    5b2a:	f000 fd41 	bl	65b0 <memset>
    buf[0] = bs->state;
    5b2e:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5b30:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5b32:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5b36:	9801      	ldr	r0, [sp, #4]
    5b38:	b2f3      	uxtb	r3, r6
    5b3a:	aa02      	add	r2, sp, #8
    5b3c:	f000 f9fc 	bl	5f38 <flash_area_write>
    if (rc != 0) {
    5b40:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5b42:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5b44:	bf18      	it	ne
    5b46:	2401      	movne	r4, #1
    flash_area_close(fap);
    5b48:	f000 f9d9 	bl	5efe <flash_area_close>
}
    5b4c:	4620      	mov	r0, r4
    5b4e:	b004      	add	sp, #16
    5b50:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5b52:	2401      	movs	r4, #1
    5b54:	e7fa      	b.n	5b4c <boot_write_status+0x5a>

00005b56 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5b56:	f000 ba0b 	b.w	5f70 <flash_area_erase>

00005b5a <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5b5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b5e:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5b60:	2100      	movs	r1, #0
{
    5b62:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5b64:	4608      	mov	r0, r1
    5b66:	f7ff fe60 	bl	582a <flash_area_id_from_multi_image_slot>
    5b6a:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5b6c:	2101      	movs	r1, #1
    5b6e:	2000      	movs	r0, #0
    5b70:	f7ff fe5b 	bl	582a <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5b74:	7833      	ldrb	r3, [r6, #0]
    5b76:	429c      	cmp	r4, r3
    5b78:	d021      	beq.n	5bbe <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5b7a:	4298      	cmp	r0, r3
    5b7c:	d121      	bne.n	5bc2 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5b7e:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5b80:	232c      	movs	r3, #44	; 0x2c
    5b82:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b86:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5b88:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b8a:	f7ff fef2 	bl	5972 <boot_trailer_sz>
    total_sz = 0;
    5b8e:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5b92:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5b94:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5b98:	4630      	mov	r0, r6
    5b9a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5b9e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5ba2:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5ba6:	681b      	ldr	r3, [r3, #0]
    5ba8:	464a      	mov	r2, r9
    5baa:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5bac:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5bae:	f7ff ffd2 	bl	5b56 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5bb2:	45b8      	cmp	r8, r7
        sector--;
    5bb4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    5bb8:	d3ed      	bcc.n	5b96 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5bbe:	2500      	movs	r5, #0
    5bc0:	e7de      	b.n	5b80 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5bc2:	2001      	movs	r0, #1
    5bc4:	e7f9      	b.n	5bba <swap_erase_trailer_sectors+0x60>

00005bc6 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5bc8:	4615      	mov	r5, r2
    5bca:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5bcc:	2006      	movs	r0, #6
    5bce:	4669      	mov	r1, sp
    5bd0:	f001 f86c 	bl	6cac <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5bd4:	79e9      	ldrb	r1, [r5, #7]
    5bd6:	2901      	cmp	r1, #1
    5bd8:	d003      	beq.n	5be2 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5bda:	2200      	movs	r2, #0
    5bdc:	4620      	mov	r0, r4
    5bde:	f001 f879 	bl	6cd4 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5be2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5be6:	2b01      	cmp	r3, #1
    5be8:	d102      	bne.n	5bf0 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5bea:	4620      	mov	r0, r4
    5bec:	f001 f855 	bl	6c9a <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5bf0:	68a9      	ldr	r1, [r5, #8]
    5bf2:	4620      	mov	r0, r4
    5bf4:	f7ff fedd 	bl	59b2 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5bf8:	4620      	mov	r0, r4
    5bfa:	f7fe f9d3 	bl	3fa4 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5bfe:	2000      	movs	r0, #0
    5c00:	b003      	add	sp, #12
    5c02:	bd30      	pop	{r4, r5, pc}

00005c04 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c06:	460d      	mov	r5, r1
    5c08:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5c0a:	f7fb fa4b 	bl	10a4 <swap_status_source>
    5c0e:	4604      	mov	r4, r0
    5c10:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5c12:	b350      	cbz	r0, 5c6a <swap_read_status+0x66>
    5c14:	2802      	cmp	r0, #2
    5c16:	d12d      	bne.n	5c74 <swap_read_status+0x70>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5c18:	a901      	add	r1, sp, #4
    5c1a:	f7fc f8a3 	bl	1d64 <flash_area_open>
    if (rc != 0) {
    5c1e:	bb58      	cbnz	r0, 5c78 <swap_read_status+0x74>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5c20:	462a      	mov	r2, r5
    5c22:	4631      	mov	r1, r6
    5c24:	9801      	ldr	r0, [sp, #4]
    5c26:	f7fb f99f 	bl	f68 <swap_read_status_bytes>
    if (rc == 0) {
    5c2a:	4604      	mov	r4, r0
    5c2c:	b9d0      	cbnz	r0, 5c64 <swap_read_status+0x60>
        off = boot_swap_info_off(fap);
    5c2e:	9801      	ldr	r0, [sp, #4]
    5c30:	f000 ffc6 	bl	6bc0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c34:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5c36:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c38:	f10d 0203 	add.w	r2, sp, #3
    5c3c:	9801      	ldr	r0, [sp, #4]
    5c3e:	f000 f95f 	bl	5f00 <flash_area_read>
        if (rc != 0) {
    5c42:	4604      	mov	r4, r0
    5c44:	b9a0      	cbnz	r0, 5c70 <swap_read_status+0x6c>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5c46:	2201      	movs	r2, #1
    5c48:	9801      	ldr	r0, [sp, #4]
    5c4a:	f10d 0103 	add.w	r1, sp, #3
    5c4e:	f000 ffc8 	bl	6be2 <bootutil_buffer_is_erased>
    5c52:	b110      	cbz	r0, 5c5a <swap_read_status+0x56>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5c54:	2301      	movs	r3, #1
    5c56:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5c5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c5e:	f003 030f 	and.w	r3, r3, #15
    5c62:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5c64:	9801      	ldr	r0, [sp, #4]
    5c66:	f000 f94a 	bl	5efe <flash_area_close>

    return rc;
}
    5c6a:	4620      	mov	r0, r4
    5c6c:	b002      	add	sp, #8
    5c6e:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5c70:	2401      	movs	r4, #1
    5c72:	e7f7      	b.n	5c64 <swap_read_status+0x60>
    switch (bs->source) {
    5c74:	2407      	movs	r4, #7
    5c76:	e7f8      	b.n	5c6a <swap_read_status+0x66>
        return BOOT_EFLASH;
    5c78:	2401      	movs	r4, #1
    5c7a:	e7f6      	b.n	5c6a <swap_read_status+0x66>

00005c7c <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5c7c:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5c7e:	2002      	movs	r0, #2
    5c80:	a901      	add	r1, sp, #4
    5c82:	f7fc f86f 	bl	1d64 <flash_area_open>
            &fap);
    if (rc != 0) {
    5c86:	b948      	cbnz	r0, 5c9c <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5c88:	9801      	ldr	r0, [sp, #4]
    5c8a:	f7ff fe8d 	bl	59a8 <boot_write_copy_done>
    5c8e:	4604      	mov	r4, r0
    flash_area_close(fap);
    5c90:	9801      	ldr	r0, [sp, #4]
    5c92:	f000 f934 	bl	5efe <flash_area_close>
    return rc;
}
    5c96:	4620      	mov	r0, r4
    5c98:	b002      	add	sp, #8
    5c9a:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5c9c:	2401      	movs	r4, #1
    5c9e:	e7fa      	b.n	5c96 <swap_set_copy_done+0x1a>

00005ca0 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5ca2:	2002      	movs	r0, #2
    5ca4:	a901      	add	r1, sp, #4
    5ca6:	f7fc f85d 	bl	1d64 <flash_area_open>
            &fap);
    if (rc != 0) {
    5caa:	b9a8      	cbnz	r0, 5cd8 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5cac:	9801      	ldr	r0, [sp, #4]
    5cae:	a902      	add	r1, sp, #8
    5cb0:	f7fe f986 	bl	3fc0 <boot_read_swap_state>
    if (rc != 0) {
    5cb4:	4604      	mov	r4, r0
    5cb6:	b968      	cbnz	r0, 5cd4 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5cb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5cbc:	2b03      	cmp	r3, #3
    5cbe:	d103      	bne.n	5cc8 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5cc0:	9801      	ldr	r0, [sp, #4]
    5cc2:	f000 ffea 	bl	6c9a <boot_write_image_ok>
    5cc6:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5cc8:	9801      	ldr	r0, [sp, #4]
    5cca:	f000 f918 	bl	5efe <flash_area_close>
    return rc;
}
    5cce:	4620      	mov	r0, r4
    5cd0:	b004      	add	sp, #16
    5cd2:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5cd4:	2401      	movs	r4, #1
    5cd6:	e7f7      	b.n	5cc8 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5cd8:	2401      	movs	r4, #1
    5cda:	e7f8      	b.n	5cce <swap_set_image_ok+0x2e>

00005cdc <boot_status_internal_off>:
{
    5cdc:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5cde:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5ce0:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5ce2:	2b01      	cmp	r3, #1
    5ce4:	bf0a      	itet	eq
    5ce6:	2301      	moveq	r3, #1
    5ce8:	2302      	movne	r3, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5cea:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5cec:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5cf0:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5cf2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5cf6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5cfa:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5cfe:	bf18      	it	ne
    5d00:	020d      	lslne	r5, r1, #8
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d02:	fb01 3102 	mla	r1, r1, r2, r3
}
    5d06:	1948      	adds	r0, r1, r5
    5d08:	bd30      	pop	{r4, r5, pc}

00005d0a <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    5d0a:	440a      	add	r2, r1
    5d0c:	428a      	cmp	r2, r1
    5d0e:	d100      	bne.n	5d12 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    5d10:	4770      	bx	lr
		seed ^= *src++;
    5d12:	f811 3b01 	ldrb.w	r3, [r1], #1
    5d16:	ba40      	rev16	r0, r0
    5d18:	b280      	uxth	r0, r0
    5d1a:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    5d1c:	f3c0 1303 	ubfx	r3, r0, #4, #4
    5d20:	4058      	eors	r0, r3
		seed ^= seed << 12U;
    5d22:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    5d26:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    5d28:	0158      	lsls	r0, r3, #5
    5d2a:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    5d2e:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    5d30:	e7ec      	b.n	5d0c <crc16_itu_t+0x2>

00005d32 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5d32:	4603      	mov	r3, r0
    5d34:	b158      	cbz	r0, 5d4e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5d36:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5d38:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5d3c:	2a01      	cmp	r2, #1
    5d3e:	d003      	beq.n	5d48 <sys_notify_validate+0x16>
    5d40:	2a03      	cmp	r2, #3
    5d42:	d104      	bne.n	5d4e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5d44:	6802      	ldr	r2, [r0, #0]
    5d46:	b112      	cbz	r2, 5d4e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5d48:	2000      	movs	r0, #0
    5d4a:	6098      	str	r0, [r3, #8]
    5d4c:	4770      	bx	lr
		return -EINVAL;
    5d4e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5d52:	4770      	bx	lr

00005d54 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5d54:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5d56:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5d58:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5d5c:	2a03      	cmp	r2, #3
    5d5e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    5d62:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    5d64:	bf14      	ite	ne
    5d66:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5d68:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5d6a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5d6c:	4770      	bx	lr

00005d6e <arch_printk_char_out>:
}
    5d6e:	2000      	movs	r0, #0
    5d70:	4770      	bx	lr

00005d72 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5d72:	b40f      	push	{r0, r1, r2, r3}
    5d74:	b507      	push	{r0, r1, r2, lr}
    5d76:	a904      	add	r1, sp, #16
    5d78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5d7c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5d7e:	f7fb fca7 	bl	16d0 <vprintk>

	va_end(ap);
}
    5d82:	b003      	add	sp, #12
    5d84:	f85d eb04 	ldr.w	lr, [sp], #4
    5d88:	b004      	add	sp, #16
    5d8a:	4770      	bx	lr

00005d8c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5d8c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5d8e:	f013 0307 	ands.w	r3, r3, #7
    5d92:	d105      	bne.n	5da0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5d94:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5d96:	2b00      	cmp	r3, #0
    5d98:	bf0c      	ite	eq
    5d9a:	2000      	moveq	r0, #0
    5d9c:	2003      	movne	r0, #3
    5d9e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5da0:	2b02      	cmp	r3, #2
    5da2:	d105      	bne.n	5db0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5da4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    5da6:	2b00      	cmp	r3, #0
    5da8:	bf14      	ite	ne
    5daa:	2000      	movne	r0, #0
    5dac:	2004      	moveq	r0, #4
    5dae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5db0:	2b01      	cmp	r3, #1
    5db2:	d105      	bne.n	5dc0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5db4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5db6:	2b00      	cmp	r3, #0
    5db8:	bf0c      	ite	eq
    5dba:	2000      	moveq	r0, #0
    5dbc:	2005      	movne	r0, #5
    5dbe:	4770      	bx	lr
	int evt = EVT_NOP;
    5dc0:	2000      	movs	r0, #0
}
    5dc2:	4770      	bx	lr

00005dc4 <notify_one>:
{
    5dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dc8:	460d      	mov	r5, r1
    5dca:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5dcc:	4619      	mov	r1, r3
    5dce:	1d28      	adds	r0, r5, #4
{
    5dd0:	4690      	mov	r8, r2
    5dd2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5dd4:	f7ff ffbe 	bl	5d54 <sys_notify_finalize>
	if (cb) {
    5dd8:	4604      	mov	r4, r0
    5dda:	b138      	cbz	r0, 5dec <notify_one+0x28>
		cb(mgr, cli, state, res);
    5ddc:	4633      	mov	r3, r6
    5dde:	4642      	mov	r2, r8
    5de0:	4629      	mov	r1, r5
    5de2:	4638      	mov	r0, r7
    5de4:	46a4      	mov	ip, r4
}
    5de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5dea:	4760      	bx	ip
}
    5dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005df0 <transition_complete>:
{
    5df0:	b410      	push	{r4}
    5df2:	f04f 0420 	mov.w	r4, #32
    5df6:	f3ef 8211 	mrs	r2, BASEPRI
    5dfa:	f384 8812 	msr	BASEPRI_MAX, r4
    5dfe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5e02:	6141      	str	r1, [r0, #20]
}
    5e04:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5e06:	2101      	movs	r1, #1
    5e08:	f7fb bc70 	b.w	16ec <process_event>

00005e0c <validate_args>:
{
    5e0c:	b510      	push	{r4, lr}
    5e0e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5e10:	b140      	cbz	r0, 5e24 <validate_args+0x18>
    5e12:	b139      	cbz	r1, 5e24 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5e14:	1d08      	adds	r0, r1, #4
    5e16:	f7ff ff8c 	bl	5d32 <sys_notify_validate>
	if ((rv == 0)
    5e1a:	b928      	cbnz	r0, 5e28 <validate_args+0x1c>
	    && ((cli->notify.flags
    5e1c:	68a3      	ldr	r3, [r4, #8]
    5e1e:	f033 0303 	bics.w	r3, r3, #3
    5e22:	d001      	beq.n	5e28 <validate_args+0x1c>
		rv = -EINVAL;
    5e24:	f06f 0015 	mvn.w	r0, #21
}
    5e28:	bd10      	pop	{r4, pc}

00005e2a <onoff_manager_init>:
{
    5e2a:	b538      	push	{r3, r4, r5, lr}
    5e2c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5e2e:	4605      	mov	r5, r0
    5e30:	b158      	cbz	r0, 5e4a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5e32:	b151      	cbz	r1, 5e4a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5e34:	680b      	ldr	r3, [r1, #0]
    5e36:	b143      	cbz	r3, 5e4a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5e38:	684b      	ldr	r3, [r1, #4]
    5e3a:	b133      	cbz	r3, 5e4a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5e3c:	221c      	movs	r2, #28
    5e3e:	2100      	movs	r1, #0
    5e40:	f000 fbb6 	bl	65b0 <memset>
	return 0;
    5e44:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5e46:	612c      	str	r4, [r5, #16]
}
    5e48:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5e4a:	f06f 0015 	mvn.w	r0, #21
    5e4e:	e7fb      	b.n	5e48 <onoff_manager_init+0x1e>

00005e50 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5e50:	b570      	push	{r4, r5, r6, lr}
    5e52:	4604      	mov	r4, r0
    5e54:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5e56:	f7ff ffd9 	bl	5e0c <validate_args>

	if (rv < 0) {
    5e5a:	1e05      	subs	r5, r0, #0
    5e5c:	db31      	blt.n	5ec2 <onoff_request+0x72>
    5e5e:	f04f 0320 	mov.w	r3, #32
    5e62:	f3ef 8111 	mrs	r1, BASEPRI
    5e66:	f383 8812 	msr	BASEPRI_MAX, r3
    5e6a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5e6e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5e72:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5e74:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5e76:	42ab      	cmp	r3, r5
    5e78:	f000 0207 	and.w	r2, r0, #7
    5e7c:	d02e      	beq.n	5edc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5e7e:	2a02      	cmp	r2, #2
    5e80:	d10e      	bne.n	5ea0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5e82:	3301      	adds	r3, #1
    5e84:	8363      	strh	r3, [r4, #26]
	rv = state;
    5e86:	4615      	mov	r5, r2
		notify = true;
    5e88:	2301      	movs	r3, #1
	__asm__ volatile(
    5e8a:	f381 8811 	msr	BASEPRI, r1
    5e8e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5e92:	b1b3      	cbz	r3, 5ec2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5e94:	2300      	movs	r3, #0
    5e96:	4631      	mov	r1, r6
    5e98:	4620      	mov	r0, r4
    5e9a:	f7ff ff93 	bl	5dc4 <notify_one>
    5e9e:	e010      	b.n	5ec2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5ea0:	0783      	lsls	r3, r0, #30
    5ea2:	d001      	beq.n	5ea8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5ea4:	2a06      	cmp	r2, #6
    5ea6:	d10e      	bne.n	5ec6 <onoff_request+0x76>
	parent->next = child;
    5ea8:	2300      	movs	r3, #0
    5eaa:	6033      	str	r3, [r6, #0]
	return list->tail;
    5eac:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5eae:	b993      	cbnz	r3, 5ed6 <onoff_request+0x86>
	list->head = node;
    5eb0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5eb4:	4615      	mov	r5, r2
    5eb6:	b962      	cbnz	r2, 5ed2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5eb8:	460a      	mov	r2, r1
    5eba:	4620      	mov	r0, r4
    5ebc:	2102      	movs	r1, #2
    5ebe:	f7fb fc15 	bl	16ec <process_event>
		}
	}

	return rv;
}
    5ec2:	4628      	mov	r0, r5
    5ec4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5ec6:	2a05      	cmp	r2, #5
    5ec8:	bf0c      	ite	eq
    5eca:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    5ece:	f06f 0504 	mvnne.w	r5, #4
    5ed2:	2300      	movs	r3, #0
    5ed4:	e7d9      	b.n	5e8a <onoff_request+0x3a>
	parent->next = child;
    5ed6:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5ed8:	6066      	str	r6, [r4, #4]
}
    5eda:	e7eb      	b.n	5eb4 <onoff_request+0x64>
		rv = -EAGAIN;
    5edc:	f06f 050a 	mvn.w	r5, #10
    5ee0:	e7f7      	b.n	5ed2 <onoff_request+0x82>

00005ee2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5ee2:	4770      	bx	lr

00005ee4 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    5ee4:	b40f      	push	{r0, r1, r2, r3}
    5ee6:	b507      	push	{r0, r1, r2, lr}
    5ee8:	a904      	add	r1, sp, #16
    5eea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5eee:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    5ef0:	f7fb fbee 	bl	16d0 <vprintk>
	va_end(ap);
}
    5ef4:	b003      	add	sp, #12
    5ef6:	f85d eb04 	ldr.w	lr, [sp], #4
    5efa:	b004      	add	sp, #16
    5efc:	4770      	bx	lr

00005efe <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    5efe:	4770      	bx	lr

00005f00 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    5f04:	1e0c      	subs	r4, r1, #0
    5f06:	4605      	mov	r5, r0
    5f08:	4617      	mov	r7, r2
    5f0a:	461e      	mov	r6, r3
    5f0c:	db10      	blt.n	5f30 <flash_area_read+0x30>
    5f0e:	6882      	ldr	r2, [r0, #8]
    5f10:	18e3      	adds	r3, r4, r3
    5f12:	4293      	cmp	r3, r2
    5f14:	d80c      	bhi.n	5f30 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    5f16:	68c0      	ldr	r0, [r0, #12]
    5f18:	f7ff f95a 	bl	51d0 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    5f1c:	6869      	ldr	r1, [r5, #4]
    5f1e:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    5f20:	6883      	ldr	r3, [r0, #8]
    5f22:	463a      	mov	r2, r7
    5f24:	681c      	ldr	r4, [r3, #0]
    5f26:	4633      	mov	r3, r6
    5f28:	46a4      	mov	ip, r4
}
    5f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f2e:	4760      	bx	ip
    5f30:	f06f 0015 	mvn.w	r0, #21
    5f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f38 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f3c:	1e0c      	subs	r4, r1, #0
    5f3e:	4605      	mov	r5, r0
    5f40:	4617      	mov	r7, r2
    5f42:	461e      	mov	r6, r3
    5f44:	db10      	blt.n	5f68 <flash_area_write+0x30>
    5f46:	6882      	ldr	r2, [r0, #8]
    5f48:	18e3      	adds	r3, r4, r3
    5f4a:	4293      	cmp	r3, r2
    5f4c:	d80c      	bhi.n	5f68 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5f4e:	68c0      	ldr	r0, [r0, #12]
    5f50:	f7ff f93e 	bl	51d0 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5f54:	6869      	ldr	r1, [r5, #4]
    5f56:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    5f58:	6883      	ldr	r3, [r0, #8]
    5f5a:	463a      	mov	r2, r7
    5f5c:	685c      	ldr	r4, [r3, #4]
    5f5e:	4633      	mov	r3, r6
    5f60:	46a4      	mov	ip, r4

	return rc;
}
    5f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f66:	4760      	bx	ip
    5f68:	f06f 0015 	mvn.w	r0, #21
    5f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f70 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    5f70:	b570      	push	{r4, r5, r6, lr}
    5f72:	1e0c      	subs	r4, r1, #0
    5f74:	4605      	mov	r5, r0
    5f76:	4616      	mov	r6, r2
    5f78:	db0e      	blt.n	5f98 <flash_area_erase+0x28>
    5f7a:	18a3      	adds	r3, r4, r2
    5f7c:	6882      	ldr	r2, [r0, #8]
    5f7e:	4293      	cmp	r3, r2
    5f80:	d80a      	bhi.n	5f98 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5f82:	68c0      	ldr	r0, [r0, #12]
    5f84:	f7ff f924 	bl	51d0 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    5f88:	6869      	ldr	r1, [r5, #4]
    5f8a:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    5f8c:	6883      	ldr	r3, [r0, #8]
    5f8e:	4632      	mov	r2, r6

	return rc;
}
    5f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f94:	689b      	ldr	r3, [r3, #8]
    5f96:	4718      	bx	r3
    5f98:	f06f 0015 	mvn.w	r0, #21
    5f9c:	bd70      	pop	{r4, r5, r6, pc}

00005f9e <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    5f9e:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    5fa0:	68c0      	ldr	r0, [r0, #12]
    5fa2:	f7ff f915 	bl	51d0 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5fa6:	6883      	ldr	r3, [r0, #8]
    5fa8:	68db      	ldr	r3, [r3, #12]
    5faa:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    5fac:	6800      	ldr	r0, [r0, #0]
    5fae:	bd08      	pop	{r3, pc}

00005fb0 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5fb0:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    5fb2:	68c0      	ldr	r0, [r0, #12]
    5fb4:	f7ff f90c 	bl	51d0 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5fb8:	6883      	ldr	r3, [r0, #8]
    5fba:	68db      	ldr	r3, [r3, #12]
    5fbc:	4798      	blx	r3

	return param->erase_value;
}
    5fbe:	7900      	ldrb	r0, [r0, #4]
    5fc0:	bd08      	pop	{r3, pc}

00005fc2 <get_sectors_cb>:
{
    5fc2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5fc4:	6802      	ldr	r2, [r0, #0]
    5fc6:	684c      	ldr	r4, [r1, #4]
    5fc8:	42a2      	cmp	r2, r4
    5fca:	d316      	bcc.n	5ffa <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5fcc:	688b      	ldr	r3, [r1, #8]
    5fce:	4423      	add	r3, r4
    5fd0:	429a      	cmp	r2, r3
    5fd2:	d206      	bcs.n	5fe2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    5fd4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    5fd8:	42ab      	cmp	r3, r5
    5fda:	d304      	bcc.n	5fe6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    5fdc:	f06f 030b 	mvn.w	r3, #11
    5fe0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    5fe2:	2000      	movs	r0, #0
    5fe4:	e00a      	b.n	5ffc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5fe6:	68cd      	ldr	r5, [r1, #12]
    5fe8:	1b12      	subs	r2, r2, r4
    5fea:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5fee:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5ff0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    5ff4:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    5ff6:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    5ff8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    5ffa:	2001      	movs	r0, #1
}
    5ffc:	bd70      	pop	{r4, r5, r6, pc}

00005ffe <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5ffe:	2000      	movs	r0, #0
{
    6000:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6002:	f7fb fe7d 	bl	1d00 <sys_reboot>

00006006 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    6006:	4770      	bx	lr

00006008 <console_write>:
{
    6008:	b570      	push	{r4, r5, r6, lr}
    600a:	4606      	mov	r6, r0
    600c:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    600e:	2400      	movs	r4, #0
    6010:	42ac      	cmp	r4, r5
    6012:	db00      	blt.n	6016 <console_write+0xe>
}
    6014:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    6016:	5d30      	ldrb	r0, [r6, r4]
    6018:	f7fb ff52 	bl	1ec0 <console_out>
    601c:	3001      	adds	r0, #1
    601e:	d0f9      	beq.n	6014 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    6020:	3401      	adds	r4, #1
    6022:	e7f5      	b.n	6010 <console_write+0x8>

00006024 <u32toa>:
{
    6024:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    6026:	2301      	movs	r3, #1
        d *= 10;
    6028:	240a      	movs	r4, #10
    while (val / d >= 10) {
    602a:	fbb1 f2f3 	udiv	r2, r1, r3
    602e:	2a09      	cmp	r2, #9
    6030:	d806      	bhi.n	6040 <u32toa+0x1c>
    dst = tgt;
    6032:	4602      	mov	r2, r0
    int n = 0;
    6034:	2500      	movs	r5, #0
        d /= 10;
    6036:	260a      	movs	r6, #10
    while (d) {
    6038:	b923      	cbnz	r3, 6044 <u32toa+0x20>
    *dst = '\0';
    603a:	7013      	strb	r3, [r2, #0]
}
    603c:	1a10      	subs	r0, r2, r0
    603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    6040:	4363      	muls	r3, r4
    6042:	e7f2      	b.n	602a <u32toa+0x6>
        dgt = val / d;
    6044:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    6048:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    604c:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    6050:	b91d      	cbnz	r5, 605a <u32toa+0x36>
    6052:	4299      	cmp	r1, r3
    6054:	d201      	bcs.n	605a <u32toa+0x36>
    6056:	2b09      	cmp	r3, #9
    6058:	d803      	bhi.n	6062 <u32toa+0x3e>
            *dst++ = dgt + '0';
    605a:	3430      	adds	r4, #48	; 0x30
    605c:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    6060:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    6062:	4663      	mov	r3, ip
    6064:	4639      	mov	r1, r7
    6066:	e7e7      	b.n	6038 <u32toa+0x14>

00006068 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    6068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    606a:	4604      	mov	r4, r0
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    606c:	6880      	ldr	r0, [r0, #8]
{
    606e:	460d      	mov	r5, r1
    6070:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    6072:	b1a0      	cbz	r0, 609e <value_extract+0x36>
    6074:	6823      	ldr	r3, [r4, #0]
    6076:	68e1      	ldr	r1, [r4, #12]
    6078:	428b      	cmp	r3, r1
    607a:	d21d      	bcs.n	60b8 <value_extract+0x50>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    607c:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    607e:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    6080:	3301      	adds	r3, #1

	memset(result, 0, result_len);
    6082:	2100      	movs	r1, #0
    6084:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    6086:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    608a:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    608c:	f000 fa90 	bl	65b0 <memset>
	if (additional <= VALUE_IN_HEADER) {
    6090:	2e17      	cmp	r6, #23
    6092:	d805      	bhi.n	60a0 <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    6094:	702e      	strb	r6, [r5, #0]

		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
    6096:	2001      	movs	r0, #1
	(state->elem_count)--;
    6098:	68a3      	ldr	r3, [r4, #8]
    609a:	3b01      	subs	r3, #1
    609c:	60a3      	str	r3, [r4, #8]
}
    609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (24 <= additional && additional <= 27) {
    60a0:	3e18      	subs	r6, #24
    60a2:	b2f3      	uxtb	r3, r6
    60a4:	2b03      	cmp	r3, #3
		FAIL_AND_DECR_IF(len > result_len);
    60a6:	6822      	ldr	r2, [r4, #0]
	if (24 <= additional && additional <= 27) {
    60a8:	d808      	bhi.n	60bc <value_extract+0x54>
		return 1 << (additional - 24);
    60aa:	2301      	movs	r3, #1
    60ac:	fa03 f606 	lsl.w	r6, r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    60b0:	42b7      	cmp	r7, r6
    60b2:	d204      	bcs.n	60be <value_extract+0x56>
		FAIL_AND_DECR_IF((state->payload + len)
    60b4:	3a01      	subs	r2, #1
    60b6:	6022      	str	r2, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    60b8:	2000      	movs	r0, #0
    60ba:	e7f0      	b.n	609e <value_extract+0x36>
	return 0;
    60bc:	2600      	movs	r6, #0
		FAIL_AND_DECR_IF((state->payload + len)
    60be:	68e1      	ldr	r1, [r4, #12]
    60c0:	1993      	adds	r3, r2, r6
    60c2:	4299      	cmp	r1, r3
    60c4:	d3f6      	bcc.n	60b4 <value_extract+0x4c>
    60c6:	1e72      	subs	r2, r6, #1
    60c8:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    60ca:	1c51      	adds	r1, r2, #1
			u8_result[i] = (state->payload)[len - i - 1];
    60cc:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i = 0; i < len; i++) {
    60ce:	d102      	bne.n	60d6 <value_extract+0x6e>
		(state->payload) += len;
    60d0:	441e      	add	r6, r3
    60d2:	6026      	str	r6, [r4, #0]
    60d4:	e7df      	b.n	6096 <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    60d6:	5c9b      	ldrb	r3, [r3, r2]
    60d8:	3a01      	subs	r2, #1
    60da:	f805 3f01 	strb.w	r3, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    60de:	e7f4      	b.n	60ca <value_extract+0x62>

000060e0 <uint32_decode>:
}


static bool uint32_decode(cbor_state_t *state, uint32_t *result)
{
	if (!value_extract(state, result, 4)) {
    60e0:	2204      	movs	r2, #4
    60e2:	f7ff bfc1 	b.w	6068 <value_extract>

000060e6 <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    60e6:	b538      	push	{r3, r4, r5, lr}
    60e8:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    60ea:	6803      	ldr	r3, [r0, #0]
    60ec:	68c1      	ldr	r1, [r0, #12]
{
    60ee:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    60f0:	428b      	cmp	r3, r1
    60f2:	d301      	bcc.n	60f8 <strx_start_decode+0x12>

	if (result->len > (state->payload_end - state->payload)) {
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)result->len,
		(uint32_t)(state->payload_end - state->payload));
		FAIL_RESTORE();
    60f4:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    60f6:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    60f8:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    60fa:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    60fe:	d1f9      	bne.n	60f4 <strx_start_decode+0xe>
	if (!uint32_decode(state, &result->len)) {
    6100:	1d29      	adds	r1, r5, #4
    6102:	f7ff ffed 	bl	60e0 <uint32_decode>
    6106:	2800      	cmp	r0, #0
    6108:	d0f4      	beq.n	60f4 <strx_start_decode+0xe>
	if (result->len > (state->payload_end - state->payload)) {
    610a:	6822      	ldr	r2, [r4, #0]
    610c:	68e3      	ldr	r3, [r4, #12]
    610e:	6869      	ldr	r1, [r5, #4]
    6110:	1a9b      	subs	r3, r3, r2
    6112:	4299      	cmp	r1, r3
    6114:	d905      	bls.n	6122 <strx_start_decode+0x3c>
		FAIL_RESTORE();
    6116:	6863      	ldr	r3, [r4, #4]
    6118:	6023      	str	r3, [r4, #0]
    611a:	68a3      	ldr	r3, [r4, #8]
    611c:	3301      	adds	r3, #1
    611e:	60a3      	str	r3, [r4, #8]
    6120:	e7e8      	b.n	60f4 <strx_start_decode+0xe>
	result->value = state->payload;
    6122:	602a      	str	r2, [r5, #0]
	return true;
    6124:	e7e7      	b.n	60f6 <strx_start_decode+0x10>

00006126 <list_map_start_decode>:


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
	FAIL_IF(state->payload >= state->payload_end);
    6126:	6803      	ldr	r3, [r0, #0]
    6128:	68c2      	ldr	r2, [r0, #12]
{
    612a:	b513      	push	{r0, r1, r4, lr}
	FAIL_IF(state->payload >= state->payload_end);
    612c:	4293      	cmp	r3, r2
{
    612e:	4604      	mov	r4, r0
	FAIL_IF(state->payload >= state->payload_end);
    6130:	d213      	bcs.n	615a <list_map_start_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    6132:	781b      	ldrb	r3, [r3, #0]
	uint32_t new_elem_count;

	if (major_type != exp_major_type) {
    6134:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    6138:	d10f      	bne.n	615a <list_map_start_decode+0x34>
		FAIL();
	}

	if (!uint32_decode(state, &new_elem_count)) {
    613a:	a901      	add	r1, sp, #4
    613c:	f7ff ffd0 	bl	60e0 <uint32_decode>
    6140:	b148      	cbz	r0, 6156 <list_map_start_decode+0x30>
		FAIL();
	}

	if (!new_backup(state, new_elem_count)) {
    6142:	4620      	mov	r0, r4
    6144:	9901      	ldr	r1, [sp, #4]
    6146:	f000 f95c 	bl	6402 <new_backup>
    614a:	b920      	cbnz	r0, 6156 <list_map_start_decode+0x30>
		FAIL_RESTORE();
    614c:	6863      	ldr	r3, [r4, #4]
    614e:	6023      	str	r3, [r4, #0]
    6150:	68a3      	ldr	r3, [r4, #8]
    6152:	3301      	adds	r3, #1
    6154:	60a3      	str	r3, [r4, #8]
	}

	return true;
}
    6156:	b002      	add	sp, #8
    6158:	bd10      	pop	{r4, pc}
	FAIL_IF(state->payload >= state->payload_end);
    615a:	2000      	movs	r0, #0
    615c:	e7fb      	b.n	6156 <list_map_start_decode+0x30>

0000615e <intx32_decode>:
	FAIL_IF(state->payload >= state->payload_end);
    615e:	6803      	ldr	r3, [r0, #0]
    6160:	68c2      	ldr	r2, [r0, #12]
{
    6162:	b573      	push	{r0, r1, r4, r5, r6, lr}
	FAIL_IF(state->payload >= state->payload_end);
    6164:	4293      	cmp	r3, r2
{
    6166:	4604      	mov	r4, r0
    6168:	460d      	mov	r5, r1
	FAIL_IF(state->payload >= state->payload_end);
    616a:	d212      	bcs.n	6192 <intx32_decode+0x34>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    616c:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    616e:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    6170:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    6174:	d80d      	bhi.n	6192 <intx32_decode+0x34>
	if (!value_extract(state, &uint_result, 4)) {
    6176:	2204      	movs	r2, #4
    6178:	eb0d 0102 	add.w	r1, sp, r2
    617c:	f7ff ff74 	bl	6068 <value_extract>
    6180:	b168      	cbz	r0, 619e <intx32_decode+0x40>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	2b00      	cmp	r3, #0
    6186:	da06      	bge.n	6196 <intx32_decode+0x38>
		FAIL_RESTORE();
    6188:	6863      	ldr	r3, [r4, #4]
    618a:	6023      	str	r3, [r4, #0]
    618c:	68a3      	ldr	r3, [r4, #8]
    618e:	3301      	adds	r3, #1
    6190:	60a3      	str	r3, [r4, #8]
	FAIL_IF(state->payload >= state->payload_end);
    6192:	2000      	movs	r0, #0
    6194:	e003      	b.n	619e <intx32_decode+0x40>
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    6196:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    6198:	bf08      	it	eq
    619a:	43db      	mvneq	r3, r3
	*result = int_result;
    619c:	602b      	str	r3, [r5, #0]
}
    619e:	b002      	add	sp, #8
    61a0:	bd70      	pop	{r4, r5, r6, pc}

000061a2 <strx_decode>:
{
    61a2:	b538      	push	{r3, r4, r5, lr}
    61a4:	4604      	mov	r4, r0
    61a6:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    61a8:	f7ff ff9d 	bl	60e6 <strx_start_decode>
    61ac:	b118      	cbz	r0, 61b6 <strx_decode+0x14>
	(state->payload) += result->len;
    61ae:	6823      	ldr	r3, [r4, #0]
    61b0:	686a      	ldr	r2, [r5, #4]
    61b2:	4413      	add	r3, r2
    61b4:	6023      	str	r3, [r4, #0]
}
    61b6:	bd38      	pop	{r3, r4, r5, pc}

000061b8 <strx_expect>:
{
    61b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    61ba:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    61bc:	4669      	mov	r1, sp
{
    61be:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    61c0:	f7ff ffef 	bl	61a2 <strx_decode>
    61c4:	4605      	mov	r5, r0
    61c6:	b148      	cbz	r0, 61dc <strx_expect+0x24>
	if ((tmp_result.len != result->len)
    61c8:	9a01      	ldr	r2, [sp, #4]
    61ca:	6873      	ldr	r3, [r6, #4]
    61cc:	429a      	cmp	r2, r3
    61ce:	d008      	beq.n	61e2 <strx_expect+0x2a>
		FAIL_RESTORE();
    61d0:	2500      	movs	r5, #0
    61d2:	6863      	ldr	r3, [r4, #4]
    61d4:	6023      	str	r3, [r4, #0]
    61d6:	68a3      	ldr	r3, [r4, #8]
    61d8:	3301      	adds	r3, #1
    61da:	60a3      	str	r3, [r4, #8]
}
    61dc:	4628      	mov	r0, r5
    61de:	b002      	add	sp, #8
    61e0:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    61e2:	9900      	ldr	r1, [sp, #0]
    61e4:	6830      	ldr	r0, [r6, #0]
    61e6:	f000 f9af 	bl	6548 <memcmp>
    61ea:	2800      	cmp	r0, #0
    61ec:	d0f6      	beq.n	61dc <strx_expect+0x24>
    61ee:	e7ef      	b.n	61d0 <strx_expect+0x18>

000061f0 <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    61f0:	2202      	movs	r2, #2
    61f2:	f7ff bfd6 	b.w	61a2 <strx_decode>

000061f6 <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    61f6:	2203      	movs	r2, #3
    61f8:	f7ff bfde 	b.w	61b8 <strx_expect>

000061fc <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    61fc:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    61fe:	2105      	movs	r1, #5
{
    6200:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    6202:	f7ff ff90 	bl	6126 <list_map_start_decode>

	if (ret) {
    6206:	b110      	cbz	r0, 620e <map_start_decode+0x12>
		state->elem_count *= 2;
    6208:	68a3      	ldr	r3, [r4, #8]
    620a:	005b      	lsls	r3, r3, #1
    620c:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    620e:	bd10      	pop	{r4, pc}

00006210 <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    6210:	2200      	movs	r2, #0
    6212:	2107      	movs	r1, #7
    6214:	f000 b90b 	b.w	642e <restore_backup>

00006218 <map_end_decode>:
    6218:	f7ff bffa 	b.w	6210 <list_map_end_decode>

0000621c <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    621c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6220:	4682      	mov	sl, r0
    6222:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    6226:	4688      	mov	r8, r1
    6228:	4616      	mov	r6, r2
    622a:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    622c:	2400      	movs	r4, #0
    622e:	4544      	cmp	r4, r8
    6230:	d102      	bne.n	6238 <multi_decode+0x1c>
			return true;
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
	return true;
    6232:	2001      	movs	r0, #1
	*num_decode = max_decode;
    6234:	6034      	str	r4, [r6, #0]
	return true;
    6236:	e012      	b.n	625e <multi_decode+0x42>
		uint8_t const *payload_bak = state->payload;
    6238:	682a      	ldr	r2, [r5, #0]
		if (!decoder(state,
    623a:	4639      	mov	r1, r7
    623c:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    623e:	9201      	str	r2, [sp, #4]
		uint32_t elem_count_bak = state->elem_count;
    6240:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    6244:	47d8      	blx	fp
    6246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6248:	9a01      	ldr	r2, [sp, #4]
    624a:	441f      	add	r7, r3
    624c:	b950      	cbnz	r0, 6264 <multi_decode+0x48>
			if (i < min_decode) {
    624e:	4554      	cmp	r4, sl
    6250:	bf34      	ite	cc
    6252:	2000      	movcc	r0, #0
    6254:	2001      	movcs	r0, #1
			*num_decode = i;
    6256:	6034      	str	r4, [r6, #0]
			state->payload = payload_bak;
    6258:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    625a:	f8c5 9008 	str.w	r9, [r5, #8]
}
    625e:	b003      	add	sp, #12
    6260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    6264:	3401      	adds	r4, #1
    6266:	e7e2      	b.n	622e <multi_decode+0x12>

00006268 <get_result_len>:
static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    6268:	2200      	movs	r2, #0
{
    626a:	b510      	push	{r4, lr}
    626c:	4603      	mov	r3, r0
    626e:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    6270:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    6274:	b914      	cbnz	r4, 627c <get_result_len+0x14>
	for (i = 0; i < max_result_len; i++) {
    6276:	3201      	adds	r2, #1
    6278:	4291      	cmp	r1, r2
    627a:	d1f9      	bne.n	6270 <get_result_len+0x8>
			break;
		}
	}
	max_result_len -= i;
    627c:	1a89      	subs	r1, r1, r2

	/* According to specification result length can be encoded on 1, 2, 4
	 * or 8 bytes.
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;
    627e:	2001      	movs	r0, #1
	max_result_len -= i;
    6280:	2204      	movs	r2, #4

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    6282:	4281      	cmp	r1, r0
    6284:	d904      	bls.n	6290 <get_result_len+0x28>
	for (size_t i = 0; i <= 3; i++) {
    6286:	3a01      	subs	r2, #1
			max_result_len = encode_byte_cnt;
			break;
		}

		encode_byte_cnt *= 2;
    6288:	ea4f 0040 	mov.w	r0, r0, lsl #1
	for (size_t i = 0; i <= 3; i++) {
    628c:	d1f9      	bne.n	6282 <get_result_len+0x1a>
    628e:	4608      	mov	r0, r1
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    6290:	2801      	cmp	r0, #1
    6292:	d104      	bne.n	629e <get_result_len+0x36>
    6294:	7818      	ldrb	r0, [r3, #0]
    6296:	2817      	cmp	r0, #23
    6298:	bf94      	ite	ls
    629a:	2000      	movls	r0, #0
    629c:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
}
    629e:	bd10      	pop	{r4, pc}

000062a0 <get_additional>:
	switch(len) {
    62a0:	2808      	cmp	r0, #8
    62a2:	d80f      	bhi.n	62c4 <get_additional+0x24>
    62a4:	e8df f000 	tbb	[pc, r0]
    62a8:	08080506 	.word	0x08080506
    62ac:	0a0a0a0a 	.word	0x0a0a0a0a
    62b0:	0c          	.byte	0x0c
    62b1:	00          	.byte	0x00
    62b2:	2118      	movs	r1, #24
}
    62b4:	4608      	mov	r0, r1
    62b6:	4770      	bx	lr
		case 2: return 25;
    62b8:	2119      	movs	r1, #25
    62ba:	e7fb      	b.n	62b4 <get_additional+0x14>
		case 4: return 26;
    62bc:	211a      	movs	r1, #26
    62be:	e7f9      	b.n	62b4 <get_additional+0x14>
		case 8: return 27;
    62c0:	211b      	movs	r1, #27
    62c2:	e7f7      	b.n	62b4 <get_additional+0x14>
	return 0;
    62c4:	2100      	movs	r1, #0
    62c6:	e7f5      	b.n	62b4 <get_additional+0x14>

000062c8 <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    62c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62cc:	4604      	mov	r4, r0
    62ce:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    62d0:	4610      	mov	r0, r2
    62d2:	4619      	mov	r1, r3
{
    62d4:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    62d6:	f7ff ffc7 	bl	6268 <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    62da:	6822      	ldr	r2, [r4, #0]
    62dc:	68e1      	ldr	r1, [r4, #12]
    62de:	1c43      	adds	r3, r0, #1
    62e0:	4413      	add	r3, r2
    62e2:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    62e4:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    62e6:	d31d      	bcc.n	6324 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    62e8:	f102 0801 	add.w	r8, r2, #1
    62ec:	4541      	cmp	r1, r8
    62ee:	d319      	bcc.n	6324 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    62f0:	7831      	ldrb	r1, [r6, #0]
    62f2:	f7ff ffd5 	bl	62a0 <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    62f6:	f000 001f 	and.w	r0, r0, #31
    62fa:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    62fe:	f8c4 8000 	str.w	r8, [r4]
    6302:	1973      	adds	r3, r6, r5
    6304:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    6306:	42b3      	cmp	r3, r6
    6308:	d105      	bne.n	6316 <value_encode+0x4e>
	return true;
    630a:	2001      	movs	r0, #1
	state->elem_count++;
    630c:	68a3      	ldr	r3, [r4, #8]
    630e:	3301      	adds	r3, #1
    6310:	60a3      	str	r3, [r4, #8]
				get_result_len(input, max_result_len));
}
    6312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    6316:	6822      	ldr	r2, [r4, #0]
    6318:	1c51      	adds	r1, r2, #1
    631a:	6021      	str	r1, [r4, #0]
    631c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    6320:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    6322:	e7f0      	b.n	6306 <value_encode+0x3e>
		FAIL();
    6324:	2000      	movs	r0, #0
    6326:	e7f4      	b.n	6312 <value_encode+0x4a>

00006328 <uint32_encode>:
}


static bool uint32_encode(cbor_state_t *state, const uint32_t *input,
		cbor_major_type_t major_type)
{
    6328:	b410      	push	{r4}
    632a:	460c      	mov	r4, r1
	if (!value_encode(state, major_type, input, 4)) {
    632c:	2304      	movs	r3, #4
{
    632e:	4611      	mov	r1, r2
	if (!value_encode(state, major_type, input, 4)) {
    6330:	4622      	mov	r2, r4
		FAIL();
	}
	return true;
}
    6332:	bc10      	pop	{r4}
	if (!value_encode(state, major_type, input, 4)) {
    6334:	f7ff bfc8 	b.w	62c8 <value_encode>

00006338 <strx_encode>:
}


static bool strx_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    6338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    633a:	460e      	mov	r6, r1
    633c:	f856 3b04 	ldr.w	r3, [r6], #4
{
    6340:	4604      	mov	r4, r0
    6342:	460d      	mov	r5, r1
    6344:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6346:	b173      	cbz	r3, 6366 <strx_encode+0x2e>
    6348:	2104      	movs	r1, #4
    634a:	4630      	mov	r0, r6
    634c:	f7ff ff8c 	bl	6268 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    6350:	686a      	ldr	r2, [r5, #4]
    6352:	6823      	ldr	r3, [r4, #0]
    6354:	3201      	adds	r2, #1
    6356:	4413      	add	r3, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    6358:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    635a:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    635c:	429a      	cmp	r2, r3
    635e:	d202      	bcs.n	6366 <strx_encode+0x2e>
	if (!strx_start_encode(state, input, major_type)) {
		FAIL();
    6360:	2600      	movs	r6, #0
	if (state->payload_mut != input->value) {
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    6362:	4630      	mov	r0, r6
    6364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!uint32_encode(state, &input->len, major_type)) {
    6366:	4631      	mov	r1, r6
    6368:	463a      	mov	r2, r7
    636a:	4620      	mov	r0, r4
    636c:	f7ff ffdc 	bl	6328 <uint32_encode>
    6370:	4606      	mov	r6, r0
    6372:	2800      	cmp	r0, #0
    6374:	d0f4      	beq.n	6360 <strx_encode+0x28>
	if (input->len > (state->payload_end - state->payload)) {
    6376:	6820      	ldr	r0, [r4, #0]
    6378:	68e3      	ldr	r3, [r4, #12]
    637a:	686a      	ldr	r2, [r5, #4]
    637c:	1a1b      	subs	r3, r3, r0
    637e:	429a      	cmp	r2, r3
    6380:	d8ee      	bhi.n	6360 <strx_encode+0x28>
	if (state->payload_mut != input->value) {
    6382:	6829      	ldr	r1, [r5, #0]
    6384:	4288      	cmp	r0, r1
    6386:	d001      	beq.n	638c <strx_encode+0x54>
		memmove(state->payload_mut, input->value, input->len);
    6388:	f000 f8ef 	bl	656a <memmove>
	state->payload += input->len;
    638c:	6823      	ldr	r3, [r4, #0]
    638e:	686a      	ldr	r2, [r5, #4]
    6390:	4413      	add	r3, r2
    6392:	6023      	str	r3, [r4, #0]
	return true;
    6394:	e7e5      	b.n	6362 <strx_encode+0x2a>

00006396 <uintx32_put>:
{
    6396:	b507      	push	{r0, r1, r2, lr}
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    6398:	2200      	movs	r2, #0
{
    639a:	9101      	str	r1, [sp, #4]
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    639c:	a901      	add	r1, sp, #4
    639e:	f7ff ffc3 	bl	6328 <uint32_encode>
}
    63a2:	b003      	add	sp, #12
    63a4:	f85d fb04 	ldr.w	pc, [sp], #4

000063a8 <tstrx_encode>:
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
    63a8:	2203      	movs	r2, #3
    63aa:	f7ff bfc5 	b.w	6338 <strx_encode>

000063ae <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    63ae:	6803      	ldr	r3, [r0, #0]
    63b0:	68c1      	ldr	r1, [r0, #12]
    63b2:	1c5a      	adds	r2, r3, #1
    63b4:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63b6:	bf9f      	itttt	ls
    63b8:	6002      	strls	r2, [r0, #0]
    63ba:	229f      	movls	r2, #159	; 0x9f
#else
	if (!encode_header_byte(state, major_type, 31)) {
		FAIL();
	}
#endif
	return true;
    63bc:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63be:	701a      	strbls	r2, [r3, #0]
		FAIL();
    63c0:	bf88      	it	hi
    63c2:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    63c4:	4770      	bx	lr

000063c6 <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    63c6:	6803      	ldr	r3, [r0, #0]
    63c8:	68c1      	ldr	r1, [r0, #12]
    63ca:	1c5a      	adds	r2, r3, #1
    63cc:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63ce:	bf9f      	itttt	ls
    63d0:	6002      	strls	r2, [r0, #0]
    63d2:	22bf      	movls	r2, #191	; 0xbf
	return true;
    63d4:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63d6:	701a      	strbls	r2, [r3, #0]
		FAIL();
    63d8:	bf88      	it	hi
    63da:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    63dc:	4770      	bx	lr

000063de <list_map_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    63de:	6803      	ldr	r3, [r0, #0]
    63e0:	68c1      	ldr	r1, [r0, #12]
    63e2:	1c5a      	adds	r2, r3, #1
    63e4:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63e6:	bf9f      	itttt	ls
    63e8:	6002      	strls	r2, [r0, #0]
    63ea:	22ff      	movls	r2, #255	; 0xff
#else
	if (!encode_header_byte(state, CBOR_MAJOR_TYPE_PRIM, 31)) {
		FAIL();
	}
#endif
	return true;
    63ec:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    63ee:	701a      	strbls	r2, [r3, #0]
		FAIL();
    63f0:	bf88      	it	hi
    63f2:	2000      	movhi	r0, #0
}
    63f4:	4770      	bx	lr

000063f6 <list_end_encode>:


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
    63f6:	2204      	movs	r2, #4
    63f8:	f7ff bff1 	b.w	63de <list_map_end_encode>

000063fc <map_end_encode>:
}


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
    63fc:	2205      	movs	r2, #5
    63fe:	f7ff bfee 	b.w	63de <list_map_end_encode>

00006402 <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    6402:	6902      	ldr	r2, [r0, #16]
{
    6404:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    6406:	6853      	ldr	r3, [r2, #4]
{
    6408:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    640a:	6891      	ldr	r1, [r2, #8]
    640c:	3301      	adds	r3, #1
    640e:	428b      	cmp	r3, r1
{
    6410:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    6412:	d20a      	bcs.n	642a <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    6414:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    6416:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    6418:	2214      	movs	r2, #20
    641a:	4621      	mov	r1, r4
    641c:	fb02 0003 	mla	r0, r2, r3, r0
    6420:	f000 f8bb 	bl	659a <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;

	return true;
    6424:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    6426:	60a5      	str	r5, [r4, #8]
}
    6428:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    642a:	2000      	movs	r0, #0
    642c:	e7fc      	b.n	6428 <new_backup+0x26>

0000642e <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6432:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    6434:	6902      	ldr	r2, [r0, #16]
{
    6436:	4604      	mov	r4, r0
	if (state->backups->current_backup == 0) {
    6438:	6853      	ldr	r3, [r2, #4]
{
    643a:	460d      	mov	r5, r1
	if (state->backups->current_backup == 0) {
    643c:	b913      	cbnz	r3, 6444 <restore_backup+0x16>
		FAIL();
    643e:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    6440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    6444:	07e9      	lsls	r1, r5, #31
	const uint8_t *payload = state->payload;
    6446:	6807      	ldr	r7, [r0, #0]
	const uint32_t elem_count = state->elem_count;
    6448:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (flags & FLAG_RESTORE) {
    644c:	d505      	bpl.n	645a <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    644e:	6811      	ldr	r1, [r2, #0]
    6450:	2214      	movs	r2, #20
    6452:	fb02 1103 	mla	r1, r2, r3, r1
    6456:	f000 f8a0 	bl	659a <memcpy>
	if (flags & FLAG_DISCARD) {
    645a:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    645c:	bf41      	itttt	mi
    645e:	6922      	ldrmi	r2, [r4, #16]
    6460:	6853      	ldrmi	r3, [r2, #4]
    6462:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    6466:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    6468:	45b0      	cmp	r8, r6
    646a:	d8e8      	bhi.n	643e <restore_backup+0x10>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    646c:	076b      	lsls	r3, r5, #29
	return true;
    646e:	f04f 0001 	mov.w	r0, #1
		state->payload = payload;
    6472:	bf48      	it	mi
    6474:	6027      	strmi	r7, [r4, #0]
    6476:	e7e3      	b.n	6440 <restore_backup+0x12>

00006478 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    6478:	6881      	ldr	r1, [r0, #8]
    647a:	f7ff bfc2 	b.w	6402 <new_backup>

0000647e <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    647e:	2101      	movs	r1, #1
    6480:	6882      	ldr	r2, [r0, #8]
    6482:	f7ff bfd4 	b.w	642e <restore_backup>

00006486 <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    6486:	2102      	movs	r1, #2
    6488:	6882      	ldr	r2, [r0, #8]
    648a:	f7ff bfd0 	b.w	642e <restore_backup>

0000648e <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    648e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.payload = payload,
		.payload_end = payload + payload_len,
		.elem_count = elem_count,
	};

	cbor_state_t state_backups[num_backups + 1];
    6492:	2414      	movs	r4, #20
{
    6494:	4605      	mov	r5, r0
    6496:	460e      	mov	r6, r1
    6498:	4698      	mov	r8, r3
	cbor_state_t state = {
    649a:	2300      	movs	r3, #0
{
    649c:	b088      	sub	sp, #32
    649e:	af00      	add	r7, sp, #0
    64a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
	cbor_state_t state = {
    64a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
	cbor_state_t state_backups[num_backups + 1];
    64a4:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    64a8:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    64aa:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    64ac:	19a9      	adds	r1, r5, r6
	cbor_state_t state = {
    64ae:	61b9      	str	r1, [r7, #24]
	cbor_state_t state_backups[num_backups + 1];
    64b0:	f024 0407 	bic.w	r4, r4, #7
    64b4:	1c41      	adds	r1, r0, #1

	cbor_state_backups_t backups = {
    64b6:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    64ba:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    64be:	ebad 0d04 	sub.w	sp, sp, r4
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;

	bool result = func(&state, struct_ptr);
    64c2:	4611      	mov	r1, r2
    64c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    64c6:	f107 000c 	add.w	r0, r7, #12
	cbor_state_backups_t backups = {
    64ca:	f8c7 d000 	str.w	sp, [r7]
	state.backups = &backups;
    64ce:	61ff      	str	r7, [r7, #28]
	bool result = func(&state, struct_ptr);
    64d0:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    64d2:	b150      	cbz	r0, 64ea <entry_function+0x5c>
    64d4:	f1b8 0f00 	cmp.w	r8, #0
    64d8:	d007      	beq.n	64ea <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    64da:	68fb      	ldr	r3, [r7, #12]
    64dc:	1b5b      	subs	r3, r3, r5
    64de:	42b3      	cmp	r3, r6
    64e0:	bf94      	ite	ls
    64e2:	f8c8 3000 	strls.w	r3, [r8]
    64e6:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    64ea:	3720      	adds	r7, #32
    64ec:	46bd      	mov	sp, r7
    64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064f2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    64f2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    64f4:	6800      	ldr	r0, [r0, #0]
    64f6:	f7fc b9b7 	b.w	2868 <z_arm_fatal_error>

000064fa <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    64fa:	2100      	movs	r1, #0
    64fc:	2001      	movs	r0, #1
    64fe:	f7fc b9b3 	b.w	2868 <z_arm_fatal_error>

00006502 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6502:	b508      	push	{r3, lr}
	handler();
    6504:	f7fc fa12 	bl	292c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    650c:	f7fc ba70 	b.w	29f0 <z_arm_exc_exit>

00006510 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6510:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    6514:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6518:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    651a:	bf08      	it	eq
    651c:	f06f 0015 	mvneq.w	r0, #21
    6520:	4770      	bx	lr

00006522 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6522:	4603      	mov	r3, r0
	size_t n = 0;
    6524:	2000      	movs	r0, #0

	while (*s != '\0') {
    6526:	5c1a      	ldrb	r2, [r3, r0]
    6528:	b902      	cbnz	r2, 652c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    652a:	4770      	bx	lr
		n++;
    652c:	3001      	adds	r0, #1
    652e:	e7fa      	b.n	6526 <strlen+0x4>

00006530 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6530:	1e43      	subs	r3, r0, #1
    6532:	3901      	subs	r1, #1
    6534:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6538:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    653c:	4282      	cmp	r2, r0
    653e:	d101      	bne.n	6544 <strcmp+0x14>
    6540:	2a00      	cmp	r2, #0
    6542:	d1f7      	bne.n	6534 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6544:	1a10      	subs	r0, r2, r0
    6546:	4770      	bx	lr

00006548 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6548:	4603      	mov	r3, r0
    654a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    654c:	b15a      	cbz	r2, 6566 <memcmp+0x1e>
    654e:	3901      	subs	r1, #1
    6550:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6552:	f813 0b01 	ldrb.w	r0, [r3], #1
    6556:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    655a:	42a3      	cmp	r3, r4
    655c:	d001      	beq.n	6562 <memcmp+0x1a>
    655e:	4290      	cmp	r0, r2
    6560:	d0f7      	beq.n	6552 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6562:	1a80      	subs	r0, r0, r2
}
    6564:	bd10      	pop	{r4, pc}
		return 0;
    6566:	4610      	mov	r0, r2
    6568:	e7fc      	b.n	6564 <memcmp+0x1c>

0000656a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    656a:	1a43      	subs	r3, r0, r1
    656c:	4293      	cmp	r3, r2
{
    656e:	b510      	push	{r4, lr}
    6570:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    6574:	d308      	bcc.n	6588 <memmove+0x1e>
	char *dest = d;
    6576:	4602      	mov	r2, r0
    6578:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    657a:	429a      	cmp	r2, r3
    657c:	d007      	beq.n	658e <memmove+0x24>
			*dest = *src;
    657e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6582:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    6586:	e7f8      	b.n	657a <memmove+0x10>
    6588:	440a      	add	r2, r1
		while (n > 0) {
    658a:	428a      	cmp	r2, r1
    658c:	d100      	bne.n	6590 <memmove+0x26>
		}
	}

	return d;
}
    658e:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    6590:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    6594:	f803 4d01 	strb.w	r4, [r3, #-1]!
    6598:	e7f7      	b.n	658a <memmove+0x20>

0000659a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    659a:	b510      	push	{r4, lr}
    659c:	1e43      	subs	r3, r0, #1
    659e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    65a0:	4291      	cmp	r1, r2
    65a2:	d100      	bne.n	65a6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    65a4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    65a6:	f811 4b01 	ldrb.w	r4, [r1], #1
    65aa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    65ae:	e7f7      	b.n	65a0 <memcpy+0x6>

000065b0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    65b0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    65b2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    65b4:	4402      	add	r2, r0
    65b6:	4293      	cmp	r3, r2
    65b8:	d100      	bne.n	65bc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    65ba:	4770      	bx	lr
		*(d_byte++) = c_byte;
    65bc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    65c0:	e7f9      	b.n	65b6 <memset+0x6>

000065c2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    65c2:	220c      	movs	r2, #12
    65c4:	6903      	ldr	r3, [r0, #16]
    65c6:	b2c9      	uxtb	r1, r1
    65c8:	fb01 3302 	mla	r3, r1, r2, r3
    65cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    65ce:	f000 0007 	and.w	r0, r0, #7
    65d2:	4770      	bx	lr

000065d4 <set_on_state>:
	__asm__ volatile(
    65d4:	f04f 0320 	mov.w	r3, #32
    65d8:	f3ef 8211 	mrs	r2, BASEPRI
    65dc:	f383 8812 	msr	BASEPRI_MAX, r3
    65e0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    65e4:	6803      	ldr	r3, [r0, #0]
    65e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    65ea:	f043 0302 	orr.w	r3, r3, #2
    65ee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    65f0:	f382 8811 	msr	BASEPRI, r2
    65f4:	f3bf 8f6f 	isb	sy
}
    65f8:	4770      	bx	lr

000065fa <stop>:
{
    65fa:	4603      	mov	r3, r0
    65fc:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    65fe:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6600:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6602:	f04f 0420 	mov.w	r4, #32
    6606:	f3ef 8611 	mrs	r6, BASEPRI
    660a:	f384 8812 	msr	BASEPRI_MAX, r4
    660e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6612:	250c      	movs	r5, #12
    6614:	fb05 0401 	mla	r4, r5, r1, r0
    6618:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    661a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    661e:	d001      	beq.n	6624 <stop+0x2a>
    6620:	42a2      	cmp	r2, r4
    6622:	d111      	bne.n	6648 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6624:	2201      	movs	r2, #1
    6626:	fb05 0001 	mla	r0, r5, r1, r0
    662a:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    662c:	2000      	movs	r0, #0
	__asm__ volatile(
    662e:	f386 8811 	msr	BASEPRI, r6
    6632:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6636:	b930      	cbnz	r0, 6646 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6638:	220c      	movs	r2, #12
    663a:	685b      	ldr	r3, [r3, #4]
    663c:	fb02 3101 	mla	r1, r2, r1, r3
    6640:	684b      	ldr	r3, [r1, #4]
    6642:	4798      	blx	r3
	return 0;
    6644:	2000      	movs	r0, #0
}
    6646:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    664c:	e7ef      	b.n	662e <stop+0x34>

0000664e <api_stop>:
	return stop(dev, subsys, CTX_API);
    664e:	2280      	movs	r2, #128	; 0x80
    6650:	f7ff bfd3 	b.w	65fa <stop>

00006654 <async_start>:
{
    6654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6656:	9f06      	ldr	r7, [sp, #24]
    6658:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    665a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    665c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    665e:	f04f 0020 	mov.w	r0, #32
    6662:	f3ef 8c11 	mrs	ip, BASEPRI
    6666:	f380 8812 	msr	BASEPRI_MAX, r0
    666a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    666e:	260c      	movs	r6, #12
    6670:	fb06 4601 	mla	r6, r6, r1, r4
    6674:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6676:	f000 0e07 	and.w	lr, r0, #7
    667a:	f1be 0f01 	cmp.w	lr, #1
    667e:	d110      	bne.n	66a2 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6680:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6682:	2600      	movs	r6, #0
	__asm__ volatile(
    6684:	f38c 8811 	msr	BASEPRI, ip
    6688:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    668c:	b93e      	cbnz	r6, 669e <async_start+0x4a>
	subdata->cb = cb;
    668e:	200c      	movs	r0, #12
    6690:	4341      	muls	r1, r0
    6692:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6694:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6698:	686b      	ldr	r3, [r5, #4]
    669a:	585b      	ldr	r3, [r3, r1]
    669c:	4798      	blx	r3
}
    669e:	4630      	mov	r0, r6
    66a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    66a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    66a6:	4287      	cmp	r7, r0
    66a8:	bf14      	ite	ne
    66aa:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    66ae:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    66b2:	e7e7      	b.n	6684 <async_start+0x30>

000066b4 <api_start>:
{
    66b4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    66b6:	2480      	movs	r4, #128	; 0x80
    66b8:	9400      	str	r4, [sp, #0]
    66ba:	f7ff ffcb 	bl	6654 <async_start>
}
    66be:	b002      	add	sp, #8
    66c0:	bd10      	pop	{r4, pc}

000066c2 <api_blocking_start>:
}
    66c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    66c6:	4770      	bx	lr

000066c8 <onoff_started_callback>:
{
    66c8:	b410      	push	{r4}
	notify(mgr, 0);
    66ca:	241c      	movs	r4, #28
	return &data->mgr[type];
    66cc:	6900      	ldr	r0, [r0, #16]
    66ce:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    66d0:	fb03 0004 	mla	r0, r3, r4, r0
    66d4:	2100      	movs	r1, #0
}
    66d6:	bc10      	pop	{r4}
	notify(mgr, 0);
    66d8:	4710      	bx	r2

000066da <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    66da:	2000      	movs	r0, #0
    66dc:	f001 bee1 	b.w	84a2 <nrfx_clock_start>

000066e0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    66e0:	2000      	movs	r0, #0
    66e2:	f001 bf0e 	b.w	8502 <nrfx_clock_stop>

000066e6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66e6:	6843      	ldr	r3, [r0, #4]
}
    66e8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    66ec:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    66ee:	600b      	str	r3, [r1, #0]
}
    66f0:	4770      	bx	lr

000066f2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66f2:	6843      	ldr	r3, [r0, #4]
    66f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    66f6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    66f8:	4042      	eors	r2, r0
    66fa:	400a      	ands	r2, r1
    66fc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    66fe:	605a      	str	r2, [r3, #4]
}
    6700:	2000      	movs	r0, #0
    6702:	4770      	bx	lr

00006704 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6704:	6843      	ldr	r3, [r0, #4]
}
    6706:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6708:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    670a:	6099      	str	r1, [r3, #8]
}
    670c:	4770      	bx	lr

0000670e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    670e:	6843      	ldr	r3, [r0, #4]
}
    6710:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6712:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6714:	60d9      	str	r1, [r3, #12]
}
    6716:	4770      	bx	lr

00006718 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6718:	6843      	ldr	r3, [r0, #4]
}
    671a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    671c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    671e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    6720:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6722:	6053      	str	r3, [r2, #4]
}
    6724:	4770      	bx	lr

00006726 <gpio_nrfx_manage_callback>:
	return port->data;
    6726:	6903      	ldr	r3, [r0, #16]
{
    6728:	b530      	push	{r4, r5, lr}
	return list->head;
    672a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    672c:	b158      	cbz	r0, 6746 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    672e:	2400      	movs	r4, #0
    6730:	4281      	cmp	r1, r0
    6732:	d112      	bne.n	675a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6734:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6736:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6738:	b954      	cbnz	r4, 6750 <gpio_nrfx_manage_callback+0x2a>
    673a:	428d      	cmp	r5, r1
	list->head = node;
    673c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    673e:	d100      	bne.n	6742 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6740:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6742:	2000      	movs	r0, #0
    6744:	6008      	str	r0, [r1, #0]
	if (set) {
    6746:	b96a      	cbnz	r2, 6764 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6748:	2000      	movs	r0, #0
}
    674a:	bd30      	pop	{r4, r5, pc}
    674c:	4628      	mov	r0, r5
    674e:	e7ef      	b.n	6730 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6750:	428d      	cmp	r5, r1
	parent->next = child;
    6752:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6754:	bf08      	it	eq
    6756:	609c      	streq	r4, [r3, #8]
}
    6758:	e7f3      	b.n	6742 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    675a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    675c:	4604      	mov	r4, r0
    675e:	2d00      	cmp	r5, #0
    6760:	d1f4      	bne.n	674c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6762:	b13a      	cbz	r2, 6774 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    6764:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6766:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6768:	600a      	str	r2, [r1, #0]
	list->head = node;
    676a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    676c:	2800      	cmp	r0, #0
    676e:	d1eb      	bne.n	6748 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6770:	6099      	str	r1, [r3, #8]
}
    6772:	e7ea      	b.n	674a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6774:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6778:	e7e7      	b.n	674a <gpio_nrfx_manage_callback+0x24>

0000677a <is_regular_addr_valid>:
{
    677a:	b538      	push	{r3, r4, r5, lr}
    677c:	4605      	mov	r5, r0
    677e:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    6780:	f001 fef7 	bl	8572 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    6784:	2d00      	cmp	r5, #0
    6786:	db07      	blt.n	6798 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    6788:	42a8      	cmp	r0, r5
    678a:	d905      	bls.n	6798 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    678c:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    678e:	4284      	cmp	r4, r0
    6790:	bf8c      	ite	hi
    6792:	2000      	movhi	r0, #0
    6794:	2001      	movls	r0, #1
}
    6796:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    6798:	2000      	movs	r0, #0
    679a:	e7fc      	b.n	6796 <is_regular_addr_valid+0x1c>

0000679c <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    679c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    67a0:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    67a2:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
    67a6:	6883      	ldr	r3, [r0, #8]
{
    67a8:	460d      	mov	r5, r1
    67aa:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    67ac:	4669      	mov	r1, sp
    67ae:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
    67b0:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
    67b4:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    67b8:	aa01      	add	r2, sp, #4
    67ba:	4798      	blx	r3

	while (layout_size--) {
    67bc:	e9dd 7c00 	ldrd	r7, ip, [sp]
    67c0:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    67c2:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    67c6:	4560      	cmp	r0, ip
    67c8:	d104      	bne.n	67d4 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    67ca:	f06f 0015 	mvn.w	r0, #21
}
    67ce:	b003      	add	sp, #12
    67d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    67d4:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    67d8:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    67da:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    67dc:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    67e0:	b97d      	cbnz	r5, 6802 <flash_get_page_info+0x66>
			index_jmp = index - info->index;
    67e2:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    67e4:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
    67e8:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
    67ea:	4543      	cmp	r3, r8
    67ec:	bf28      	it	cs
    67ee:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    67f0:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    67f4:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    67f6:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    67f8:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    67fa:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    67fc:	d9e3      	bls.n	67c6 <flash_get_page_info+0x2a>
			return 0;
    67fe:	2000      	movs	r0, #0
    6800:	e7e5      	b.n	67ce <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    6802:	1aab      	subs	r3, r5, r2
    6804:	fbb3 f3f9 	udiv	r3, r3, r9
    6808:	e7ec      	b.n	67e4 <flash_get_page_info+0x48>

0000680a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    680a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    680c:	2200      	movs	r2, #0
    680e:	f7ff bfc5 	b.w	679c <flash_get_page_info>

00006812 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    6816:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    6818:	6883      	ldr	r3, [r0, #8]
{
    681a:	b086      	sub	sp, #24
    681c:	4688      	mov	r8, r1
    681e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6820:	691b      	ldr	r3, [r3, #16]
    6822:	aa02      	add	r2, sp, #8
    6824:	a901      	add	r1, sp, #4
    6826:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    6828:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    682a:	4625      	mov	r5, r4
    682c:	9b02      	ldr	r3, [sp, #8]
    682e:	42ab      	cmp	r3, r5
    6830:	d802      	bhi.n	6838 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6832:	b006      	add	sp, #24
    6834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    6838:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    683a:	9f01      	ldr	r7, [sp, #4]
    683c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6844:	683a      	ldr	r2, [r7, #0]
    6846:	eb0a 0306 	add.w	r3, sl, r6
    684a:	42b2      	cmp	r2, r6
    684c:	d802      	bhi.n	6854 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    684e:	469a      	mov	sl, r3
    6850:	3501      	adds	r5, #1
    6852:	e7eb      	b.n	682c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6854:	4649      	mov	r1, r9
    6856:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6858:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    685a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    685c:	47c0      	blx	r8
    685e:	2800      	cmp	r0, #0
    6860:	d0e7      	beq.n	6832 <flash_page_foreach+0x20>
			off += page_info.size;
    6862:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6864:	3601      	adds	r6, #1
			off += page_info.size;
    6866:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6868:	e7ec      	b.n	6844 <flash_page_foreach+0x32>

0000686a <uarte_nrfx_config_get>:
{
    686a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    686c:	6902      	ldr	r2, [r0, #16]
    686e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6872:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6876:	2000      	movs	r0, #0
    6878:	4770      	bx	lr

0000687a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    687a:	6843      	ldr	r3, [r0, #4]
    687c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    687e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6882:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6886:	4770      	bx	lr

00006888 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6888:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    688a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    688c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    688e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6892:	b148      	cbz	r0, 68a8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6894:	2000      	movs	r0, #0
	*c = data->rx_data;
    6896:	7d52      	ldrb	r2, [r2, #21]
    6898:	700a      	strb	r2, [r1, #0]
    689a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    689e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68a2:	2201      	movs	r2, #1
    68a4:	601a      	str	r2, [r3, #0]
	return 0;
    68a6:	4770      	bx	lr
		return -1;
    68a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    68ac:	4770      	bx	lr

000068ae <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68ae:	2a00      	cmp	r2, #0
{
    68b0:	b510      	push	{r4, lr}
    68b2:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68b4:	dd0f      	ble.n	68d6 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    68b6:	6843      	ldr	r3, [r0, #4]
    68b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68be:	b148      	cbz	r0, 68d4 <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68c0:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
    68c2:	6922      	ldr	r2, [r4, #16]
    68c4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    68c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68cc:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    68ce:	7d52      	ldrb	r2, [r2, #21]
    68d0:	700a      	strb	r2, [r1, #0]
    68d2:	6018      	str	r0, [r3, #0]
}
    68d4:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    68d6:	2000      	movs	r0, #0
    68d8:	e7fc      	b.n	68d4 <uarte_nrfx_fifo_read+0x26>

000068da <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    68da:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    68dc:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    68de:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    68e0:	f04f 0020 	mov.w	r0, #32
    68e4:	f3ef 8311 	mrs	r3, BASEPRI
    68e8:	f380 8812 	msr	BASEPRI_MAX, r0
    68ec:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    68f0:	2000      	movs	r0, #0
    68f2:	68c9      	ldr	r1, [r1, #12]
    68f4:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    68f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    68fa:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    68fe:	f383 8811 	msr	BASEPRI, r3
    6902:	f3bf 8f6f 	isb	sy
}
    6906:	4770      	bx	lr

00006908 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    6908:	2201      	movs	r2, #1
    690a:	6903      	ldr	r3, [r0, #16]
    690c:	68db      	ldr	r3, [r3, #12]
    690e:	739a      	strb	r2, [r3, #14]
}
    6910:	4770      	bx	lr

00006912 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    6912:	6903      	ldr	r3, [r0, #16]
    6914:	68db      	ldr	r3, [r3, #12]
    6916:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6918:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    691c:	b962      	cbnz	r2, 6938 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    691e:	6842      	ldr	r2, [r0, #4]
    6920:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6922:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6926:	b140      	cbz	r0, 693a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6928:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    692c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    6930:	d003      	beq.n	693a <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6932:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    6934:	6119      	str	r1, [r3, #16]
    6936:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6938:	2000      	movs	r0, #0
}
    693a:	4770      	bx	lr

0000693c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    693c:	6843      	ldr	r3, [r0, #4]
    693e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6940:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6944:	3800      	subs	r0, #0
    6946:	bf18      	it	ne
    6948:	2001      	movne	r0, #1
    694a:	4770      	bx	lr

0000694c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    694c:	2210      	movs	r2, #16
	return config->uarte_regs;
    694e:	6843      	ldr	r3, [r0, #4]
    6950:	681b      	ldr	r3, [r3, #0]
    6952:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6956:	4770      	bx	lr

00006958 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6958:	2210      	movs	r2, #16
	return config->uarte_regs;
    695a:	6843      	ldr	r3, [r0, #4]
    695c:	681b      	ldr	r3, [r3, #0]
    695e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6962:	4770      	bx	lr

00006964 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6964:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6968:	6843      	ldr	r3, [r0, #4]
    696a:	681b      	ldr	r3, [r3, #0]
    696c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6970:	4770      	bx	lr

00006972 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    6972:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6976:	6843      	ldr	r3, [r0, #4]
    6978:	681b      	ldr	r3, [r3, #0]
    697a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    697e:	4770      	bx	lr

00006980 <uarte_nrfx_irq_update>:
}
    6980:	2001      	movs	r0, #1
    6982:	4770      	bx	lr

00006984 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6984:	6903      	ldr	r3, [r0, #16]
    6986:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6988:	e9c3 1200 	strd	r1, r2, [r3]
}
    698c:	4770      	bx	lr

0000698e <uarte_nrfx_irq_is_pending>:
{
    698e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6990:	6843      	ldr	r3, [r0, #4]
{
    6992:	4604      	mov	r4, r0
	return config->uarte_regs;
    6994:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6996:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    699a:	025b      	lsls	r3, r3, #9
    699c:	d405      	bmi.n	69aa <uarte_nrfx_irq_is_pending+0x1c>
    699e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    69a2:	f010 0010 	ands.w	r0, r0, #16
    69a6:	d106      	bne.n	69b6 <uarte_nrfx_irq_is_pending+0x28>
}
    69a8:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    69aa:	f7ff ffb2 	bl	6912 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    69ae:	2800      	cmp	r0, #0
    69b0:	d0f5      	beq.n	699e <uarte_nrfx_irq_is_pending+0x10>
		||
    69b2:	2001      	movs	r0, #1
    69b4:	e7f8      	b.n	69a8 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    69b6:	4620      	mov	r0, r4
    69b8:	f7ff ffc0 	bl	693c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    69bc:	3800      	subs	r0, #0
    69be:	bf18      	it	ne
    69c0:	2001      	movne	r0, #1
    69c2:	e7f1      	b.n	69a8 <uarte_nrfx_irq_is_pending+0x1a>

000069c4 <tx_start.isra.0>:
	return config->uarte_regs;
    69c4:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    69c6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    69ca:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69ce:	2200      	movs	r2, #0
    69d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    69d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    69d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    69dc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    69e0:	6842      	ldr	r2, [r0, #4]
    69e2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    69e4:	bf41      	itttt	mi
    69e6:	2208      	movmi	r2, #8
    69e8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    69ec:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    69f0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69f4:	2201      	movs	r2, #1
    69f6:	609a      	str	r2, [r3, #8]
}
    69f8:	4770      	bx	lr

000069fa <is_tx_ready.isra.0>:
	return config->uarte_regs;
    69fa:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    69fc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69fe:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6a02:	b940      	cbnz	r0, 6a16 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6a04:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6a06:	079b      	lsls	r3, r3, #30
    6a08:	d406      	bmi.n	6a18 <is_tx_ready.isra.0+0x1e>
    6a0a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6a0e:	3800      	subs	r0, #0
    6a10:	bf18      	it	ne
    6a12:	2001      	movne	r0, #1
    6a14:	4770      	bx	lr
    6a16:	2001      	movs	r0, #1
}
    6a18:	4770      	bx	lr

00006a1a <uarte_nrfx_fifo_fill>:
{
    6a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    6a1c:	6906      	ldr	r6, [r0, #16]
{
    6a1e:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    6a20:	68f3      	ldr	r3, [r6, #12]
    6a22:	899c      	ldrh	r4, [r3, #12]
    6a24:	3310      	adds	r3, #16
    6a26:	4294      	cmp	r4, r2
    6a28:	bfa8      	it	ge
    6a2a:	4614      	movge	r4, r2
    6a2c:	2201      	movs	r2, #1
    6a2e:	e8d3 0fef 	ldaex	r0, [r3]
    6a32:	2800      	cmp	r0, #0
    6a34:	d103      	bne.n	6a3e <uarte_nrfx_fifo_fill+0x24>
    6a36:	e8c3 2fe7 	stlex	r7, r2, [r3]
    6a3a:	2f00      	cmp	r7, #0
    6a3c:	d1f7      	bne.n	6a2e <uarte_nrfx_fifo_fill+0x14>
    6a3e:	bf0c      	ite	eq
    6a40:	4613      	moveq	r3, r2
    6a42:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6a44:	d01d      	beq.n	6a82 <uarte_nrfx_fifo_fill+0x68>
		return 0;
    6a46:	461c      	mov	r4, r3
}
    6a48:	4620      	mov	r0, r4
    6a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    6a4c:	68f2      	ldr	r2, [r6, #12]
    6a4e:	5cc8      	ldrb	r0, [r1, r3]
    6a50:	6892      	ldr	r2, [r2, #8]
    6a52:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    6a54:	3301      	adds	r3, #1
    6a56:	42a3      	cmp	r3, r4
    6a58:	dbf8      	blt.n	6a4c <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
    6a5a:	f04f 0320 	mov.w	r3, #32
    6a5e:	f3ef 8711 	mrs	r7, BASEPRI
    6a62:	f383 8812 	msr	BASEPRI_MAX, r3
    6a66:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6a6a:	6868      	ldr	r0, [r5, #4]
    6a6c:	f7ff ffc5 	bl	69fa <is_tx_ready.isra.0>
    6a70:	68f3      	ldr	r3, [r6, #12]
    6a72:	b940      	cbnz	r0, 6a86 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    6a74:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6a76:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6a78:	f387 8811 	msr	BASEPRI, r7
    6a7c:	f3bf 8f6f 	isb	sy
	return len;
    6a80:	e7e2      	b.n	6a48 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
    6a82:	2300      	movs	r3, #0
    6a84:	e7e7      	b.n	6a56 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
    6a86:	4622      	mov	r2, r4
    6a88:	6899      	ldr	r1, [r3, #8]
    6a8a:	6868      	ldr	r0, [r5, #4]
    6a8c:	f7ff ff9a 	bl	69c4 <tx_start.isra.0>
    6a90:	e7f2      	b.n	6a78 <uarte_nrfx_fifo_fill+0x5e>

00006a92 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    6a92:	6842      	ldr	r2, [r0, #4]
{
    6a94:	b410      	push	{r4}
	return config->uarte_regs;
    6a96:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6a98:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6a9c:	05c9      	lsls	r1, r1, #23
    6a9e:	d518      	bpl.n	6ad2 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6aa0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6aa4:	b1a9      	cbz	r1, 6ad2 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6aa6:	f04f 0420 	mov.w	r4, #32
    6aaa:	f3ef 8111 	mrs	r1, BASEPRI
    6aae:	f384 8812 	msr	BASEPRI_MAX, r4
    6ab2:	f3bf 8f6f 	isb	sy
    6ab6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6aba:	b134      	cbz	r4, 6aca <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6abc:	2400      	movs	r4, #0
    6abe:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    6ac2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ac6:	2401      	movs	r4, #1
    6ac8:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    6aca:	f381 8811 	msr	BASEPRI, r1
    6ace:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ad2:	6852      	ldr	r2, [r2, #4]
    6ad4:	06d2      	lsls	r2, r2, #27
    6ad6:	d51a      	bpl.n	6b0e <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    6ad8:	f04f 0220 	mov.w	r2, #32
    6adc:	f3ef 8111 	mrs	r1, BASEPRI
    6ae0:	f382 8812 	msr	BASEPRI_MAX, r2
    6ae4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ae8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6aec:	b112      	cbz	r2, 6af4 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6aee:	2200      	movs	r2, #0
    6af0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6af4:	6902      	ldr	r2, [r0, #16]
    6af6:	68d2      	ldr	r2, [r2, #12]
    6af8:	b10a      	cbz	r2, 6afe <uarte_nrfx_isr_int+0x6c>
    6afa:	6912      	ldr	r2, [r2, #16]
    6afc:	b91a      	cbnz	r2, 6b06 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    6afe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6b02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    6b06:	f381 8811 	msr	BASEPRI, r1
    6b0a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6b0e:	6902      	ldr	r2, [r0, #16]
    6b10:	68d2      	ldr	r2, [r2, #12]
    6b12:	b15a      	cbz	r2, 6b2c <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b14:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6b18:	b151      	cbz	r1, 6b30 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->fifo_fill_lock = 0;
    6b1a:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    6b1c:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6b1e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6b20:	b134      	cbz	r4, 6b30 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    6b22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6b26:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6b2a:	7391      	strb	r1, [r2, #14]
}
    6b2c:	bc10      	pop	{r4}
    6b2e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b30:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6b34:	b121      	cbz	r1, 6b40 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b36:	2100      	movs	r1, #0
    6b38:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6b3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6b40:	6813      	ldr	r3, [r2, #0]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d0f2      	beq.n	6b2c <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b46:	6851      	ldr	r1, [r2, #4]
}
    6b48:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6b4a:	4718      	bx	r3

00006b4c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6b4c:	b510      	push	{r4, lr}
    6b4e:	4604      	mov	r4, r0
    6b50:	2200      	movs	r2, #0
    6b52:	2101      	movs	r1, #1
    6b54:	2009      	movs	r0, #9
    6b56:	f7fb fed3 	bl	2900 <z_arm_irq_priority_set>
    6b5a:	2009      	movs	r0, #9
    6b5c:	f7fb feb2 	bl	28c4 <arch_irq_enable>
    6b60:	4620      	mov	r0, r4
    6b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b66:	f7fc bf2d 	b.w	39c4 <uarte_instance_init.constprop.0>

00006b6a <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6b6a:	b510      	push	{r4, lr}
    6b6c:	4604      	mov	r4, r0
    6b6e:	2200      	movs	r2, #0
    6b70:	2101      	movs	r1, #1
    6b72:	2008      	movs	r0, #8
    6b74:	f7fb fec4 	bl	2900 <z_arm_irq_priority_set>
    6b78:	2008      	movs	r0, #8
    6b7a:	f7fb fea3 	bl	28c4 <arch_irq_enable>
    6b7e:	4620      	mov	r0, r4
    6b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b84:	f7fc bf1e 	b.w	39c4 <uarte_instance_init.constprop.0>

00006b88 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6b88:	f7fe bc9c 	b.w	54c4 <nrf_cc3xx_platform_init_no_rng>

00006b8c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6b8c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6b8e:	f7fb f93b 	bl	1e08 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6b92:	f7ff fa38 	bl	6006 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6b9a:	f7fe bc93 	b.w	54c4 <nrf_cc3xx_platform_init_no_rng>

00006b9e <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    6b9e:	b538      	push	{r3, r4, r5, lr}
    6ba0:	460c      	mov	r4, r1
    6ba2:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    6ba4:	f7ff fa04 	bl	5fb0 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6ba8:	4621      	mov	r1, r4
    6baa:	4425      	add	r5, r4
    6bac:	42a9      	cmp	r1, r5
    6bae:	d101      	bne.n	6bb4 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    6bb0:	2001      	movs	r0, #1
}
    6bb2:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    6bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
    6bb8:	4298      	cmp	r0, r3
    6bba:	d0f7      	beq.n	6bac <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    6bbc:	2000      	movs	r0, #0
    6bbe:	e7f8      	b.n	6bb2 <bootutil_buffer_is_erased.part.0+0x14>

00006bc0 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6bc0:	6880      	ldr	r0, [r0, #8]
}
    6bc2:	3828      	subs	r0, #40	; 0x28
    6bc4:	4770      	bx	lr

00006bc6 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6bc6:	2804      	cmp	r0, #4
    6bc8:	d009      	beq.n	6bde <boot_magic_compatible_check+0x18>
    6bca:	2805      	cmp	r0, #5
    6bcc:	d103      	bne.n	6bd6 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6bce:	1e48      	subs	r0, r1, #1
    6bd0:	bf18      	it	ne
    6bd2:	2001      	movne	r0, #1
    6bd4:	4770      	bx	lr
        return tbl_val == val;
    6bd6:	1a43      	subs	r3, r0, r1
    6bd8:	4258      	negs	r0, r3
    6bda:	4158      	adcs	r0, r3
    6bdc:	4770      	bx	lr
    switch (tbl_val) {
    6bde:	2001      	movs	r0, #1
}
    6be0:	4770      	bx	lr

00006be2 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6be2:	b111      	cbz	r1, 6bea <bootutil_buffer_is_erased+0x8>
    6be4:	b10a      	cbz	r2, 6bea <bootutil_buffer_is_erased+0x8>
    6be6:	f7ff bfda 	b.w	6b9e <bootutil_buffer_is_erased.part.0>
}
    6bea:	2000      	movs	r0, #0
    6bec:	4770      	bx	lr

00006bee <boot_read_flag>:
{
    6bee:	b538      	push	{r3, r4, r5, lr}
    6bf0:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bf2:	2301      	movs	r3, #1
{
    6bf4:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bf6:	4622      	mov	r2, r4
{
    6bf8:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6bfa:	f7ff f981 	bl	5f00 <flash_area_read>
    if (rc < 0) {
    6bfe:	2800      	cmp	r0, #0
    6c00:	db10      	blt.n	6c24 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6c02:	2201      	movs	r2, #1
    6c04:	4621      	mov	r1, r4
    6c06:	4628      	mov	r0, r5
    6c08:	f7ff ffeb 	bl	6be2 <bootutil_buffer_is_erased>
    6c0c:	b118      	cbz	r0, 6c16 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    6c0e:	2303      	movs	r3, #3
    return 0;
    6c10:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    6c12:	7023      	strb	r3, [r4, #0]
}
    6c14:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    6c16:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    6c18:	2b01      	cmp	r3, #1
    6c1a:	bf0c      	ite	eq
    6c1c:	2301      	moveq	r3, #1
    6c1e:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    6c20:	7023      	strb	r3, [r4, #0]
    6c22:	e7f7      	b.n	6c14 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6c24:	2001      	movs	r0, #1
    6c26:	e7f5      	b.n	6c14 <boot_read_flag+0x26>

00006c28 <boot_write_trailer>:
{
    6c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c2c:	461d      	mov	r5, r3
    6c2e:	4606      	mov	r6, r0
    6c30:	460f      	mov	r7, r1
    6c32:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6c34:	f7ff f9b3 	bl	5f9e <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    6c38:	1e6c      	subs	r4, r5, #1
    align = flash_area_align(fap);
    6c3a:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
    6c3c:	fa54 f480 	uxtab	r4, r4, r0
    6c40:	425b      	negs	r3, r3
    6c42:	401c      	ands	r4, r3
    6c44:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    6c46:	2c08      	cmp	r4, #8
    6c48:	d81a      	bhi.n	6c80 <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
    6c4a:	4630      	mov	r0, r6
    6c4c:	f7ff f9b0 	bl	5fb0 <flash_area_erased_val>
    6c50:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6c52:	462a      	mov	r2, r5
    6c54:	4641      	mov	r1, r8
    6c56:	4668      	mov	r0, sp
    6c58:	f7ff fc9f 	bl	659a <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6c5c:	4649      	mov	r1, r9
    6c5e:	1b62      	subs	r2, r4, r5
    6c60:	eb0d 0005 	add.w	r0, sp, r5
    6c64:	f7ff fca4 	bl	65b0 <memset>
    rc = flash_area_write(fap, off, buf, align);
    6c68:	4623      	mov	r3, r4
    6c6a:	466a      	mov	r2, sp
    6c6c:	4639      	mov	r1, r7
    6c6e:	4630      	mov	r0, r6
    6c70:	f7ff f962 	bl	5f38 <flash_area_write>
    if (rc != 0) {
    6c74:	3800      	subs	r0, #0
    6c76:	bf18      	it	ne
    6c78:	2001      	movne	r0, #1
}
    6c7a:	b003      	add	sp, #12
    6c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6c84:	e7f9      	b.n	6c7a <boot_write_trailer+0x52>

00006c86 <boot_write_trailer_flag>:
{
    6c86:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6c88:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6c8a:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6c8e:	aa01      	add	r2, sp, #4
    6c90:	f7ff ffca 	bl	6c28 <boot_write_trailer>
}
    6c94:	b003      	add	sp, #12
    6c96:	f85d fb04 	ldr.w	pc, [sp], #4

00006c9a <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6c9a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6c9c:	2201      	movs	r2, #1
    6c9e:	3918      	subs	r1, #24
    6ca0:	f7ff bff1 	b.w	6c86 <boot_write_trailer_flag>

00006ca4 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6ca4:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6ca6:	3a18      	subs	r2, #24
    6ca8:	f7ff bfa1 	b.w	6bee <boot_read_flag>

00006cac <boot_read_swap_state_by_id>:
{
    6cac:	b513      	push	{r0, r1, r4, lr}
    6cae:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6cb0:	b2c0      	uxtb	r0, r0
    6cb2:	a901      	add	r1, sp, #4
    6cb4:	f7fb f856 	bl	1d64 <flash_area_open>
    if (rc != 0) {
    6cb8:	b950      	cbnz	r0, 6cd0 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6cba:	4621      	mov	r1, r4
    6cbc:	9801      	ldr	r0, [sp, #4]
    6cbe:	f7fd f97f 	bl	3fc0 <boot_read_swap_state>
    6cc2:	4604      	mov	r4, r0
    flash_area_close(fap);
    6cc4:	9801      	ldr	r0, [sp, #4]
    6cc6:	f7ff f91a 	bl	5efe <flash_area_close>
}
    6cca:	4620      	mov	r0, r4
    6ccc:	b002      	add	sp, #8
    6cce:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6cd0:	2401      	movs	r4, #1
    6cd2:	e7fa      	b.n	6cca <boot_read_swap_state_by_id+0x1e>

00006cd4 <boot_write_swap_info>:
{
    6cd4:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6cd6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6cda:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6cde:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6ce0:	2301      	movs	r3, #1
    6ce2:	f10d 0207 	add.w	r2, sp, #7
    6ce6:	3928      	subs	r1, #40	; 0x28
    6ce8:	f7ff ff9e 	bl	6c28 <boot_write_trailer>
}
    6cec:	b003      	add	sp, #12
    6cee:	f85d fb04 	ldr.w	pc, [sp], #4

00006cf2 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6cf2:	2000      	movs	r0, #0
    6cf4:	4770      	bx	lr

00006cf6 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6cf6:	6803      	ldr	r3, [r0, #0]
{
    6cf8:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6cfa:	1acd      	subs	r5, r1, r3
    6cfc:	2d00      	cmp	r5, #0
    6cfe:	dd0d      	ble.n	6d1c <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6d00:	f993 6000 	ldrsb.w	r6, [r3]
    6d04:	781c      	ldrb	r4, [r3, #0]
    6d06:	2e00      	cmp	r6, #0
    6d08:	db0b      	blt.n	6d22 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    6d0a:	1c5c      	adds	r4, r3, #1
    6d0c:	6004      	str	r4, [r0, #0]
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6d12:	6803      	ldr	r3, [r0, #0]
    6d14:	1ac9      	subs	r1, r1, r3
    6d16:	6813      	ldr	r3, [r2, #0]
    6d18:	428b      	cmp	r3, r1
    6d1a:	d932      	bls.n	6d82 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d1c:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    6d20:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6d22:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6d26:	3c01      	subs	r4, #1
    6d28:	2c03      	cmp	r4, #3
    6d2a:	d827      	bhi.n	6d7c <mbedtls_asn1_get_len+0x86>
    6d2c:	e8df f004 	tbb	[pc, r4]
    6d30:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
    6d34:	2d01      	cmp	r5, #1
    6d36:	d0f1      	beq.n	6d1c <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6d38:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6d3a:	3302      	adds	r3, #2
            *len = (*p)[1];
    6d3c:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6d3e:	6003      	str	r3, [r0, #0]
            break;
    6d40:	e7e7      	b.n	6d12 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6d42:	2d02      	cmp	r5, #2
    6d44:	ddea      	ble.n	6d1c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6d46:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6d4a:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6d4c:	ba64      	rev16	r4, r4
    6d4e:	b2a4      	uxth	r4, r4
    6d50:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6d52:	e7f4      	b.n	6d3e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6d54:	2d03      	cmp	r5, #3
    6d56:	dde1      	ble.n	6d1c <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d58:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d5a:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d5c:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d5e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d62:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    6d64:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d66:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d68:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6d6a:	e7e8      	b.n	6d3e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    6d6c:	2d04      	cmp	r5, #4
    6d6e:	ddd5      	ble.n	6d1c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d70:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    6d74:	3305      	adds	r3, #5
    6d76:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d78:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6d7a:	e7e0      	b.n	6d3e <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    6d7c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6d80:	e7ce      	b.n	6d20 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    6d82:	2000      	movs	r0, #0
    6d84:	e7cc      	b.n	6d20 <mbedtls_asn1_get_len+0x2a>

00006d86 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6d86:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6d88:	6804      	ldr	r4, [r0, #0]
    6d8a:	1b0e      	subs	r6, r1, r4
    6d8c:	2e00      	cmp	r6, #0
    6d8e:	dd07      	ble.n	6da0 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6d90:	7826      	ldrb	r6, [r4, #0]
    6d92:	429e      	cmp	r6, r3
    6d94:	d108      	bne.n	6da8 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6d96:	3401      	adds	r4, #1
    6d98:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6d9a:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6d9c:	f7ff bfab 	b.w	6cf6 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6da0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6da4:	bc70      	pop	{r4, r5, r6}
    6da6:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6da8:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6dac:	e7fa      	b.n	6da4 <mbedtls_asn1_get_tag+0x1e>

00006dae <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6dae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6db0:	2302      	movs	r3, #2
{
    6db2:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6db4:	aa01      	add	r2, sp, #4
{
    6db6:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6db8:	f7ff ffe5 	bl	6d86 <mbedtls_asn1_get_tag>
    6dbc:	b940      	cbnz	r0, 6dd0 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    6dbe:	9a01      	ldr	r2, [sp, #4]
    6dc0:	4628      	mov	r0, r5
    6dc2:	6821      	ldr	r1, [r4, #0]
    6dc4:	f000 fb59 	bl	747a <mbedtls_mpi_read_binary>

    *p += len;
    6dc8:	6823      	ldr	r3, [r4, #0]
    6dca:	9a01      	ldr	r2, [sp, #4]
    6dcc:	4413      	add	r3, r2
    6dce:	6023      	str	r3, [r4, #0]

    return( ret );
}
    6dd0:	b003      	add	sp, #12
    6dd2:	bd30      	pop	{r4, r5, pc}

00006dd4 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    6dd4:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    6dd6:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -assign;
    6dd8:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    6dda:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    6ddc:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    6dde:	4285      	cmp	r5, r0
    6de0:	d100      	bne.n	6de4 <mpi_safe_cond_assign+0x10>
}
    6de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    6de4:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    6de8:	f851 4f04 	ldr.w	r4, [r1, #4]!
    6dec:	403e      	ands	r6, r7
    6dee:	401c      	ands	r4, r3
    6df0:	4334      	orrs	r4, r6
    6df2:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    6df4:	3501      	adds	r5, #1
    6df6:	e7f2      	b.n	6dde <mpi_safe_cond_assign+0xa>

00006df8 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
    6df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6dfc:	4684      	mov	ip, r0
{
    6dfe:	4688      	mov	r8, r1
    6e00:	460e      	mov	r6, r1
    6e02:	4614      	mov	r4, r2
    mbedtls_mpi_uint c = 0, t = 0;
    6e04:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    6e06:	f1bc 0f0f 	cmp.w	ip, #15
    6e0a:	f106 0640 	add.w	r6, r6, #64	; 0x40
    6e0e:	f104 0440 	add.w	r4, r4, #64	; 0x40
    6e12:	d878      	bhi.n	6f06 <mpi_mul_hlp+0x10e>
    6e14:	f06f 060f 	mvn.w	r6, #15
    6e18:	0907      	lsrs	r7, r0, #4
    6e1a:	fb06 0607 	mla	r6, r6, r7, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    6e1e:	2e07      	cmp	r6, #7
    6e20:	ea4f 1c87 	mov.w	ip, r7, lsl #6
    6e24:	eb08 1487 	add.w	r4, r8, r7, lsl #6
    6e28:	eb02 1087 	add.w	r0, r2, r7, lsl #6
    6e2c:	d95d      	bls.n	6eea <mpi_mul_hlp+0xf2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6e2e:	f858 700c 	ldr.w	r7, [r8, ip]
    for( ; i >= 8; i -= 8 )
    6e32:	3e08      	subs	r6, #8
        MULADDC_CORE   MULADDC_CORE
    6e34:	fba3 1707 	umull	r1, r7, r3, r7
    6e38:	186d      	adds	r5, r5, r1
    6e3a:	f852 100c 	ldr.w	r1, [r2, ip]
    6e3e:	f147 0700 	adc.w	r7, r7, #0
    6e42:	186d      	adds	r5, r5, r1
    6e44:	f842 500c 	str.w	r5, [r2, ip]
    6e48:	6861      	ldr	r1, [r4, #4]
    6e4a:	f147 0200 	adc.w	r2, r7, #0
    6e4e:	fba3 5101 	umull	r5, r1, r3, r1
    6e52:	1952      	adds	r2, r2, r5
    6e54:	6845      	ldr	r5, [r0, #4]
    6e56:	f141 0100 	adc.w	r1, r1, #0
    6e5a:	1952      	adds	r2, r2, r5
    6e5c:	6042      	str	r2, [r0, #4]
        MULADDC_CORE   MULADDC_CORE
    6e5e:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    6e60:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6e64:	fba3 5202 	umull	r5, r2, r3, r2
    6e68:	1949      	adds	r1, r1, r5
    6e6a:	6885      	ldr	r5, [r0, #8]
    6e6c:	f142 0200 	adc.w	r2, r2, #0
    6e70:	1949      	adds	r1, r1, r5
    6e72:	6081      	str	r1, [r0, #8]
    6e74:	68e1      	ldr	r1, [r4, #12]
    6e76:	f142 0200 	adc.w	r2, r2, #0
    6e7a:	fba3 5101 	umull	r5, r1, r3, r1
    6e7e:	1952      	adds	r2, r2, r5
    6e80:	68c5      	ldr	r5, [r0, #12]
    6e82:	f141 0100 	adc.w	r1, r1, #0
    6e86:	1952      	adds	r2, r2, r5
    6e88:	60c2      	str	r2, [r0, #12]

        MULADDC_CORE   MULADDC_CORE
    6e8a:	6922      	ldr	r2, [r4, #16]
        MULADDC_CORE   MULADDC_CORE
    6e8c:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6e90:	fba3 5202 	umull	r5, r2, r3, r2
    6e94:	1949      	adds	r1, r1, r5
    6e96:	6905      	ldr	r5, [r0, #16]
    6e98:	f142 0200 	adc.w	r2, r2, #0
    6e9c:	1949      	adds	r1, r1, r5
    6e9e:	6101      	str	r1, [r0, #16]
    6ea0:	6961      	ldr	r1, [r4, #20]
    6ea2:	f142 0200 	adc.w	r2, r2, #0
    6ea6:	fba3 5101 	umull	r5, r1, r3, r1
    6eaa:	1952      	adds	r2, r2, r5
    6eac:	6945      	ldr	r5, [r0, #20]
    6eae:	f141 0100 	adc.w	r1, r1, #0
    6eb2:	1952      	adds	r2, r2, r5
    6eb4:	6142      	str	r2, [r0, #20]
        MULADDC_CORE   MULADDC_CORE
    6eb6:	69a2      	ldr	r2, [r4, #24]
        MULADDC_CORE   MULADDC_CORE
    6eb8:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    6ebc:	fba3 5202 	umull	r5, r2, r3, r2
    6ec0:	1949      	adds	r1, r1, r5
    6ec2:	6985      	ldr	r5, [r0, #24]
    6ec4:	f142 0200 	adc.w	r2, r2, #0
    6ec8:	1949      	adds	r1, r1, r5
    6eca:	6181      	str	r1, [r0, #24]
    6ecc:	69e5      	ldr	r5, [r4, #28]
    6ece:	f142 0200 	adc.w	r2, r2, #0
    6ed2:	fba3 5105 	umull	r5, r1, r3, r5
    6ed6:	1952      	adds	r2, r2, r5
    6ed8:	f141 0500 	adc.w	r5, r1, #0
    6edc:	69c1      	ldr	r1, [r0, #28]
    6ede:	3420      	adds	r4, #32
    6ee0:	1852      	adds	r2, r2, r1
    6ee2:	61c2      	str	r2, [r0, #28]
    6ee4:	f145 0500 	adc.w	r5, r5, #0
    6ee8:	3020      	adds	r0, #32
    6eea:	4607      	mov	r7, r0
    6eec:	ea4f 0c86 	mov.w	ip, r6, lsl #2
    6ef0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    6ef4:	42a6      	cmp	r6, r4
    6ef6:	f040 8105 	bne.w	7104 <mpi_mul_hlp+0x30c>
    6efa:	4460      	add	r0, ip
    }
#endif /* MULADDC_HUIT */

    t++;

    while( c != 0 )
    6efc:	2d00      	cmp	r5, #0
    6efe:	f040 810f 	bne.w	7120 <mpi_mul_hlp+0x328>
    {
        *d += c; c = ( *d < c ); d++;
    }
}
    6f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MULADDC_CORE   MULADDC_CORE
    6f06:	f856 7c40 	ldr.w	r7, [r6, #-64]
    6f0a:	f854 1c40 	ldr.w	r1, [r4, #-64]
    6f0e:	fba3 e707 	umull	lr, r7, r3, r7
    6f12:	eb15 050e 	adds.w	r5, r5, lr
    6f16:	f147 0700 	adc.w	r7, r7, #0
    6f1a:	194d      	adds	r5, r1, r5
    6f1c:	f844 5c40 	str.w	r5, [r4, #-64]
    6f20:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    6f24:	f854 1c3c 	ldr.w	r1, [r4, #-60]
    6f28:	fba3 e505 	umull	lr, r5, r3, r5
    6f2c:	f147 0700 	adc.w	r7, r7, #0
    6f30:	eb17 070e 	adds.w	r7, r7, lr
    6f34:	f145 0500 	adc.w	r5, r5, #0
    6f38:	19cf      	adds	r7, r1, r7
    6f3a:	f844 7c3c 	str.w	r7, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
    6f3e:	f856 7c38 	ldr.w	r7, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    6f42:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6f46:	fba3 e707 	umull	lr, r7, r3, r7
    6f4a:	eb15 0e0e 	adds.w	lr, r5, lr
    6f4e:	f854 5c38 	ldr.w	r5, [r4, #-56]
    6f52:	f147 0700 	adc.w	r7, r7, #0
    6f56:	eb15 050e 	adds.w	r5, r5, lr
    6f5a:	f844 5c38 	str.w	r5, [r4, #-56]
    6f5e:	f856 5c34 	ldr.w	r5, [r6, #-52]
    6f62:	f147 0700 	adc.w	r7, r7, #0
    6f66:	fba3 e505 	umull	lr, r5, r3, r5
    6f6a:	eb17 0e0e 	adds.w	lr, r7, lr
    6f6e:	f854 7c34 	ldr.w	r7, [r4, #-52]
    6f72:	f145 0500 	adc.w	r5, r5, #0
    6f76:	eb17 070e 	adds.w	r7, r7, lr
    6f7a:	f844 7c34 	str.w	r7, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
    6f7e:	f856 7c30 	ldr.w	r7, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    6f82:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6f86:	fba3 e707 	umull	lr, r7, r3, r7
    6f8a:	eb15 0e0e 	adds.w	lr, r5, lr
    6f8e:	f854 5c30 	ldr.w	r5, [r4, #-48]
    6f92:	f147 0700 	adc.w	r7, r7, #0
    6f96:	eb15 050e 	adds.w	r5, r5, lr
    6f9a:	f844 5c30 	str.w	r5, [r4, #-48]
    6f9e:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    6fa2:	f147 0700 	adc.w	r7, r7, #0
    6fa6:	fba3 e505 	umull	lr, r5, r3, r5
    6faa:	eb17 0e0e 	adds.w	lr, r7, lr
    6fae:	f854 7c2c 	ldr.w	r7, [r4, #-44]
    6fb2:	f145 0500 	adc.w	r5, r5, #0
    6fb6:	eb17 070e 	adds.w	r7, r7, lr
    6fba:	f844 7c2c 	str.w	r7, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
    6fbe:	f856 7c28 	ldr.w	r7, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    6fc2:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    6fc6:	fba3 e707 	umull	lr, r7, r3, r7
    6fca:	eb15 0e0e 	adds.w	lr, r5, lr
    6fce:	f854 5c28 	ldr.w	r5, [r4, #-40]
    6fd2:	f147 0700 	adc.w	r7, r7, #0
    6fd6:	eb15 050e 	adds.w	r5, r5, lr
    6fda:	f844 5c28 	str.w	r5, [r4, #-40]
    6fde:	f856 5c24 	ldr.w	r5, [r6, #-36]
    6fe2:	f147 0700 	adc.w	r7, r7, #0
    6fe6:	fba3 e505 	umull	lr, r5, r3, r5
    6fea:	eb17 0e0e 	adds.w	lr, r7, lr
    6fee:	f854 7c24 	ldr.w	r7, [r4, #-36]
    6ff2:	f145 0500 	adc.w	r5, r5, #0
    6ff6:	eb17 070e 	adds.w	r7, r7, lr
    6ffa:	f844 7c24 	str.w	r7, [r4, #-36]
        MULADDC_CORE   MULADDC_CORE
    6ffe:	f856 7c20 	ldr.w	r7, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    7002:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7006:	fba3 e707 	umull	lr, r7, r3, r7
    700a:	eb15 0e0e 	adds.w	lr, r5, lr
    700e:	f854 5c20 	ldr.w	r5, [r4, #-32]
    7012:	f147 0700 	adc.w	r7, r7, #0
    7016:	eb15 050e 	adds.w	r5, r5, lr
    701a:	f844 5c20 	str.w	r5, [r4, #-32]
    701e:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    7022:	f147 0700 	adc.w	r7, r7, #0
    7026:	fba3 e505 	umull	lr, r5, r3, r5
    702a:	eb17 0e0e 	adds.w	lr, r7, lr
    702e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    7032:	f145 0500 	adc.w	r5, r5, #0
    7036:	eb17 070e 	adds.w	r7, r7, lr
    703a:	f844 7c1c 	str.w	r7, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
    703e:	f856 7c18 	ldr.w	r7, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    7042:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7046:	fba3 e707 	umull	lr, r7, r3, r7
    704a:	eb15 0e0e 	adds.w	lr, r5, lr
    704e:	f854 5c18 	ldr.w	r5, [r4, #-24]
    7052:	f147 0700 	adc.w	r7, r7, #0
    7056:	eb15 050e 	adds.w	r5, r5, lr
    705a:	f844 5c18 	str.w	r5, [r4, #-24]
    705e:	f856 5c14 	ldr.w	r5, [r6, #-20]
    7062:	f147 0700 	adc.w	r7, r7, #0
    7066:	fba3 e505 	umull	lr, r5, r3, r5
    706a:	eb17 0e0e 	adds.w	lr, r7, lr
    706e:	f854 7c14 	ldr.w	r7, [r4, #-20]
    7072:	f145 0500 	adc.w	r5, r5, #0
    7076:	eb17 070e 	adds.w	r7, r7, lr
    707a:	f844 7c14 	str.w	r7, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    707e:	f856 7c10 	ldr.w	r7, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    7082:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    7086:	fba3 e707 	umull	lr, r7, r3, r7
    708a:	eb15 0e0e 	adds.w	lr, r5, lr
    708e:	f854 5c10 	ldr.w	r5, [r4, #-16]
    7092:	f147 0700 	adc.w	r7, r7, #0
    7096:	eb15 050e 	adds.w	r5, r5, lr
    709a:	f844 5c10 	str.w	r5, [r4, #-16]
    709e:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    70a2:	f147 0700 	adc.w	r7, r7, #0
    70a6:	fba3 e505 	umull	lr, r5, r3, r5
    70aa:	eb17 0e0e 	adds.w	lr, r7, lr
    70ae:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    70b2:	f145 0500 	adc.w	r5, r5, #0
    70b6:	eb17 070e 	adds.w	r7, r7, lr
    70ba:	f844 7c0c 	str.w	r7, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    70be:	f856 7c08 	ldr.w	r7, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    70c2:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    70c6:	fba3 e707 	umull	lr, r7, r3, r7
    70ca:	eb15 0e0e 	adds.w	lr, r5, lr
    70ce:	f854 5c08 	ldr.w	r5, [r4, #-8]
    70d2:	f147 0700 	adc.w	r7, r7, #0
    70d6:	eb15 050e 	adds.w	r5, r5, lr
    70da:	f844 5c08 	str.w	r5, [r4, #-8]
    70de:	f856 5c04 	ldr.w	r5, [r6, #-4]
    70e2:	f854 1c04 	ldr.w	r1, [r4, #-4]
    70e6:	fba3 5e05 	umull	r5, lr, r3, r5
    70ea:	f147 0700 	adc.w	r7, r7, #0
    70ee:	197f      	adds	r7, r7, r5
    70f0:	f14e 0500 	adc.w	r5, lr, #0
    70f4:	19cf      	adds	r7, r1, r7
    70f6:	f145 0500 	adc.w	r5, r5, #0
    70fa:	f844 7c04 	str.w	r7, [r4, #-4]
    for( ; i >= 16; i -= 16 )
    70fe:	f1ac 0c10 	sub.w	ip, ip, #16
    7102:	e680      	b.n	6e06 <mpi_mul_hlp+0xe>
        MULADDC_CORE
    7104:	f854 2b04 	ldr.w	r2, [r4], #4
    7108:	fba3 2102 	umull	r2, r1, r3, r2
    710c:	18ad      	adds	r5, r5, r2
    710e:	f141 0200 	adc.w	r2, r1, #0
    7112:	6839      	ldr	r1, [r7, #0]
    7114:	1949      	adds	r1, r1, r5
    7116:	f142 0500 	adc.w	r5, r2, #0
    711a:	f847 1b04 	str.w	r1, [r7], #4
    for( ; i > 0; i-- )
    711e:	e6e9      	b.n	6ef4 <mpi_mul_hlp+0xfc>
        *d += c; c = ( *d < c ); d++;
    7120:	6803      	ldr	r3, [r0, #0]
    7122:	195b      	adds	r3, r3, r5
    7124:	bf2c      	ite	cs
    7126:	2501      	movcs	r5, #1
    7128:	2500      	movcc	r5, #0
    712a:	f840 3b04 	str.w	r3, [r0], #4
    712e:	e6e5      	b.n	6efc <mpi_mul_hlp+0x104>

00007130 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    7130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7134:	468a      	mov	sl, r1
    7136:	4617      	mov	r7, r2
    7138:	b085      	sub	sp, #20
    713a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    713c:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    713e:	6862      	ldr	r2, [r4, #4]
    7140:	68a0      	ldr	r0, [r4, #8]
    7142:	2100      	movs	r1, #0
    7144:	0092      	lsls	r2, r2, #2
{
    7146:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    7148:	f7ff fa32 	bl	65b0 <memset>

    d = T->p;
    n = N->n;
    714c:	687d      	ldr	r5, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    714e:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    7152:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    7154:	42ab      	cmp	r3, r5
    7156:	bf28      	it	cs
    7158:	462b      	movcs	r3, r5
    d = T->p;
    715a:	46b1      	mov	r9, r6

    for( i = 0; i < n; i++ )
    715c:	f04f 0800 	mov.w	r8, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    7160:	1c6c      	adds	r4, r5, #1
    m = ( B->n < n ) ? B->n : n;
    7162:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    7164:	00a4      	lsls	r4, r4, #2
        u0 = A->p[i];
    7166:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    7168:	45a8      	cmp	r8, r5
        u0 = A->p[i];
    716a:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    716c:	d122      	bne.n	71b4 <mpi_montmul+0x84>
    716e:	3c04      	subs	r4, #4
    7170:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7174:	4622      	mov	r2, r4
    7176:	4641      	mov	r1, r8
    7178:	f7ff fa0f 	bl	659a <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    717c:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7180:	f8d7 e008 	ldr.w	lr, [r7, #8]
    d[n] += 1;
    7184:	3301      	adds	r3, #1
    7186:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mbedtls_mpi_uint c = 0, t, z;
    718a:	2300      	movs	r3, #0
    for( i = 0; i < n; i++ )
    718c:	461a      	mov	r2, r3
    718e:	f1a8 0004 	sub.w	r0, r8, #4
    7192:	4295      	cmp	r5, r2
    7194:	d12d      	bne.n	71f2 <mpi_montmul+0xc2>
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    7196:	f856 2014 	ldr.w	r2, [r6, r4, lsl #1]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    719a:	4628      	mov	r0, r5
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    719c:	1ad3      	subs	r3, r2, r3
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    719e:	4642      	mov	r2, r8
    71a0:	9900      	ldr	r1, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, d, N->p );
    71a2:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    71a6:	6889      	ldr	r1, [r1, #8]
    71a8:	b2db      	uxtb	r3, r3
}
    71aa:	b005      	add	sp, #20
    71ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    71b0:	f7ff be10 	b.w	6dd4 <mpi_safe_cond_assign>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71b4:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    71b8:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71bc:	f8d9 3000 	ldr.w	r3, [r9]
    71c0:	6808      	ldr	r0, [r1, #0]
    71c2:	9a03      	ldr	r2, [sp, #12]
    71c4:	fb00 330b 	mla	r3, r0, fp, r3
    71c8:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    71ca:	9801      	ldr	r0, [sp, #4]
    71cc:	464a      	mov	r2, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    71ce:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    71d0:	465b      	mov	r3, fp
    71d2:	f7ff fe11 	bl	6df8 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    71d6:	464a      	mov	r2, r9
    71d8:	9b02      	ldr	r3, [sp, #8]
    71da:	4628      	mov	r0, r5
    71dc:	68b9      	ldr	r1, [r7, #8]
    71de:	f7ff fe0b 	bl	6df8 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    71e2:	2300      	movs	r3, #0
    71e4:	f849 bb04 	str.w	fp, [r9], #4
    71e8:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    71ec:	f108 0801 	add.w	r8, r8, #1
    71f0:	e7b9      	b.n	7166 <mpi_montmul+0x36>
        z = ( l[i] <  c );    t = l[i] - c;
    71f2:	f850 cf04 	ldr.w	ip, [r0, #4]!
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    71f6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    71fa:	ebac 0103 	sub.w	r1, ip, r3
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    71fe:	42b9      	cmp	r1, r7
    7200:	bf2c      	ite	cs
    7202:	f04f 0900 	movcs.w	r9, #0
    7206:	f04f 0901 	movcc.w	r9, #1
    720a:	1bc9      	subs	r1, r1, r7
    720c:	459c      	cmp	ip, r3
    720e:	bf2c      	ite	cs
    7210:	464b      	movcs	r3, r9
    7212:	f109 0301 	addcc.w	r3, r9, #1
    7216:	6001      	str	r1, [r0, #0]
    for( i = 0; i < n; i++ )
    7218:	3201      	adds	r2, #1
    721a:	e7ba      	b.n	7192 <mpi_montmul+0x62>

0000721c <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    721c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    721e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7222:	3901      	subs	r1, #1
    7224:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7228:	4281      	cmp	r1, r0
    722a:	d201      	bcs.n	7230 <mpi_bigendian_to_host.part.0+0x14>
}
    722c:	b002      	add	sp, #8
    722e:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    7230:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    7232:	2500      	movs	r5, #0
    7234:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    7236:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7238:	eb0d 0203 	add.w	r2, sp, r3
    723c:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    723e:	f812 6b01 	ldrb.w	r6, [r2], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7242:	3b01      	subs	r3, #1
    7244:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7248:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    724c:	d1f7      	bne.n	723e <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    724e:	680a      	ldr	r2, [r1, #0]
    7250:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7252:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    7254:	f814 6b01 	ldrb.w	r6, [r4], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7258:	3a01      	subs	r2, #1
    725a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    725e:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    7262:	d1f7      	bne.n	7254 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    7264:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    7268:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    726c:	e7dc      	b.n	7228 <mpi_bigendian_to_host.part.0+0xc>

0000726e <mbedtls_mpi_init>:
    X->n = 0;
    726e:	2300      	movs	r3, #0
    7270:	2201      	movs	r2, #1
    X->p = NULL;
    7272:	6083      	str	r3, [r0, #8]
    X->n = 0;
    7274:	e9c0 2300 	strd	r2, r3, [r0]
}
    7278:	4770      	bx	lr

0000727a <mbedtls_mpi_free>:
{
    727a:	b510      	push	{r4, lr}
    if( X == NULL )
    727c:	4604      	mov	r4, r0
    727e:	b168      	cbz	r0, 729c <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    7280:	6880      	ldr	r0, [r0, #8]
    7282:	b130      	cbz	r0, 7292 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    7284:	6861      	ldr	r1, [r4, #4]
    7286:	0089      	lsls	r1, r1, #2
    7288:	f7fe f96e 	bl	5568 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    728c:	68a0      	ldr	r0, [r4, #8]
    728e:	f7fd f8f1 	bl	4474 <mbedtls_free>
    X->n = 0;
    7292:	2300      	movs	r3, #0
    7294:	2201      	movs	r2, #1
    7296:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    729a:	60a3      	str	r3, [r4, #8]
}
    729c:	bd10      	pop	{r4, pc}

0000729e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    729e:	f242 7310 	movw	r3, #10000	; 0x2710
    72a2:	4299      	cmp	r1, r3
{
    72a4:	b570      	push	{r4, r5, r6, lr}
    72a6:	4604      	mov	r4, r0
    72a8:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    72aa:	d902      	bls.n	72b2 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    72ac:	f06f 000f 	mvn.w	r0, #15
}
    72b0:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    72b2:	6843      	ldr	r3, [r0, #4]
    72b4:	428b      	cmp	r3, r1
    72b6:	d216      	bcs.n	72e6 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    72b8:	2104      	movs	r1, #4
    72ba:	4628      	mov	r0, r5
    72bc:	f7fd f8d4 	bl	4468 <mbedtls_calloc>
    72c0:	4606      	mov	r6, r0
    72c2:	2800      	cmp	r0, #0
    72c4:	d0f2      	beq.n	72ac <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    72c6:	68a1      	ldr	r1, [r4, #8]
    72c8:	b159      	cbz	r1, 72e2 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    72ca:	6862      	ldr	r2, [r4, #4]
    72cc:	0092      	lsls	r2, r2, #2
    72ce:	f7ff f964 	bl	659a <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    72d2:	6861      	ldr	r1, [r4, #4]
    72d4:	68a0      	ldr	r0, [r4, #8]
    72d6:	0089      	lsls	r1, r1, #2
    72d8:	f7fe f946 	bl	5568 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    72dc:	68a0      	ldr	r0, [r4, #8]
    72de:	f7fd f8c9 	bl	4474 <mbedtls_free>
        X->p = p;
    72e2:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    72e6:	2000      	movs	r0, #0
    72e8:	e7e2      	b.n	72b0 <mbedtls_mpi_grow+0x12>

000072ea <mbedtls_mpi_resize_clear>:
{
    72ea:	b538      	push	{r3, r4, r5, lr}
    72ec:	4604      	mov	r4, r0
    if( limbs == 0 )
    72ee:	460d      	mov	r5, r1
    72f0:	b919      	cbnz	r1, 72fa <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    72f2:	f7ff ffc2 	bl	727a <mbedtls_mpi_free>
}
    72f6:	2000      	movs	r0, #0
    72f8:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    72fa:	6842      	ldr	r2, [r0, #4]
    72fc:	428a      	cmp	r2, r1
    72fe:	d107      	bne.n	7310 <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    7300:	2100      	movs	r1, #0
    7302:	6880      	ldr	r0, [r0, #8]
    7304:	0092      	lsls	r2, r2, #2
    7306:	f7ff f953 	bl	65b0 <memset>
        X->s = 1;
    730a:	2301      	movs	r3, #1
    730c:	6023      	str	r3, [r4, #0]
        return( 0 );
    730e:	e7f2      	b.n	72f6 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    7310:	f7ff ffb3 	bl	727a <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    7314:	4629      	mov	r1, r5
    7316:	4620      	mov	r0, r4
}
    7318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    731c:	f7ff bfbf 	b.w	729e <mbedtls_mpi_grow>

00007320 <mbedtls_mpi_copy>:
    if( X == Y )
    7320:	4288      	cmp	r0, r1
{
    7322:	b570      	push	{r4, r5, r6, lr}
    7324:	4605      	mov	r5, r0
    7326:	460e      	mov	r6, r1
    if( X == Y )
    7328:	d00a      	beq.n	7340 <mbedtls_mpi_copy+0x20>
    if( Y->n == 0 )
    732a:	684c      	ldr	r4, [r1, #4]
        if( X->n != 0 )
    732c:	6840      	ldr	r0, [r0, #4]
    if( Y->n == 0 )
    732e:	b96c      	cbnz	r4, 734c <mbedtls_mpi_copy+0x2c>
        if( X->n != 0 )
    7330:	b1c8      	cbz	r0, 7366 <mbedtls_mpi_copy+0x46>
            X->s = 1;
    7332:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    7334:	0082      	lsls	r2, r0, #2
    7336:	4621      	mov	r1, r4
    7338:	68a8      	ldr	r0, [r5, #8]
            X->s = 1;
    733a:	602b      	str	r3, [r5, #0]
            memset( X->p, 0, X->n * ciL );
    733c:	f7ff f938 	bl	65b0 <memset>
        return( 0 );
    7340:	2000      	movs	r0, #0
    7342:	e010      	b.n	7366 <mbedtls_mpi_copy+0x46>
        if( Y->p[i] != 0 )
    7344:	68b3      	ldr	r3, [r6, #8]
    7346:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    734a:	b913      	cbnz	r3, 7352 <mbedtls_mpi_copy+0x32>
    for( i = Y->n - 1; i > 0; i-- )
    734c:	3c01      	subs	r4, #1
    734e:	2c00      	cmp	r4, #0
    7350:	d1f8      	bne.n	7344 <mbedtls_mpi_copy+0x24>
    X->s = Y->s;
    7352:	6833      	ldr	r3, [r6, #0]
    i++;
    7354:	3401      	adds	r4, #1
    if( X->n < i )
    7356:	4284      	cmp	r4, r0
    X->s = Y->s;
    7358:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    735a:	d905      	bls.n	7368 <mbedtls_mpi_copy+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    735c:	4621      	mov	r1, r4
    735e:	4628      	mov	r0, r5
    7360:	f7ff ff9d 	bl	729e <mbedtls_mpi_grow>
    7364:	b140      	cbz	r0, 7378 <mbedtls_mpi_copy+0x58>
}
    7366:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    7368:	1b02      	subs	r2, r0, r4
    736a:	68a8      	ldr	r0, [r5, #8]
    736c:	2100      	movs	r1, #0
    736e:	0092      	lsls	r2, r2, #2
    7370:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7374:	f7ff f91c 	bl	65b0 <memset>
    memcpy( X->p, Y->p, i * ciL );
    7378:	68b1      	ldr	r1, [r6, #8]
    737a:	68a8      	ldr	r0, [r5, #8]
    737c:	00a2      	lsls	r2, r4, #2
    737e:	f7ff f90c 	bl	659a <memcpy>
    7382:	e7dd      	b.n	7340 <mbedtls_mpi_copy+0x20>

00007384 <mbedtls_mpi_safe_cond_assign>:
{
    7384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7386:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    7388:	6849      	ldr	r1, [r1, #4]
{
    738a:	4605      	mov	r5, r0
    738c:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    738e:	f7ff ff86 	bl	729e <mbedtls_mpi_grow>
    7392:	4607      	mov	r7, r0
    7394:	b9c0      	cbnz	r0, 73c8 <mbedtls_mpi_safe_cond_assign+0x44>
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    7396:	4263      	negs	r3, r4
    7398:	431c      	orrs	r4, r3
    unsigned ua = a + 1;
    739a:	682b      	ldr	r3, [r5, #0]
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
    739c:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    unsigned ua = a + 1;
    73a0:	1c5a      	adds	r2, r3, #1
    unsigned ub = b + 1;
    73a2:	6833      	ldr	r3, [r6, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    73a4:	68a9      	ldr	r1, [r5, #8]
    unsigned ub = b + 1;
    73a6:	3301      	adds	r3, #1
    unsigned ur = ( ua & ~mask ) | ( ub & mask );
    73a8:	4053      	eors	r3, r2
    73aa:	ea03 0344 	and.w	r3, r3, r4, lsl #1
    73ae:	4053      	eors	r3, r2
    return( (int) ur - 1 );
    73b0:	3b01      	subs	r3, #1
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
    73b2:	602b      	str	r3, [r5, #0]
    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
    73b4:	68b2      	ldr	r2, [r6, #8]
    73b6:	4623      	mov	r3, r4
    73b8:	6870      	ldr	r0, [r6, #4]
    73ba:	f7ff fd0b 	bl	6dd4 <mpi_safe_cond_assign>
    for( i = Y->n; i < X->n; i++ )
    73be:	6873      	ldr	r3, [r6, #4]
        X->p[i] &= ~limb_mask;
    73c0:	3c01      	subs	r4, #1
    for( i = Y->n; i < X->n; i++ )
    73c2:	686a      	ldr	r2, [r5, #4]
    73c4:	429a      	cmp	r2, r3
    73c6:	d801      	bhi.n	73cc <mbedtls_mpi_safe_cond_assign+0x48>
}
    73c8:	4638      	mov	r0, r7
    73ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] &= ~limb_mask;
    73cc:	68a9      	ldr	r1, [r5, #8]
    73ce:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    73d2:	4022      	ands	r2, r4
    73d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = Y->n; i < X->n; i++ )
    73d8:	3301      	adds	r3, #1
    73da:	e7f2      	b.n	73c2 <mbedtls_mpi_safe_cond_assign+0x3e>

000073dc <mbedtls_mpi_lset>:
{
    73dc:	b570      	push	{r4, r5, r6, lr}
    73de:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    73e0:	2101      	movs	r1, #1
{
    73e2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    73e4:	f7ff ff5b 	bl	729e <mbedtls_mpi_grow>
    73e8:	4605      	mov	r5, r0
    73ea:	b988      	cbnz	r0, 7410 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    73ec:	6862      	ldr	r2, [r4, #4]
    73ee:	4601      	mov	r1, r0
    73f0:	0092      	lsls	r2, r2, #2
    73f2:	68a0      	ldr	r0, [r4, #8]
    73f4:	f7ff f8dc 	bl	65b0 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    73f8:	68a3      	ldr	r3, [r4, #8]
    73fa:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    73fe:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    7400:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    7404:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    7406:	bfb4      	ite	lt
    7408:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    740c:	2301      	movge	r3, #1
    740e:	6023      	str	r3, [r4, #0]
}
    7410:	4628      	mov	r0, r5
    7412:	bd70      	pop	{r4, r5, r6, pc}

00007414 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    7414:	6843      	ldr	r3, [r0, #4]
    7416:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    741a:	bf3f      	itttt	cc
    741c:	6883      	ldrcc	r3, [r0, #8]
    741e:	094a      	lsrcc	r2, r1, #5
    7420:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    7424:	f001 011f 	andcc.w	r1, r1, #31
    7428:	bf3a      	itte	cc
    742a:	fa20 f101 	lsrcc.w	r1, r0, r1
    742e:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    7432:	2000      	movcs	r0, #0
}
    7434:	4770      	bx	lr

00007436 <mbedtls_mpi_bitlen>:
{
    7436:	4602      	mov	r2, r0
    if( X->n == 0 )
    7438:	6840      	ldr	r0, [r0, #4]
    743a:	b188      	cbz	r0, 7460 <mbedtls_mpi_bitlen+0x2a>
        if( X->p[i] != 0 )
    743c:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    743e:	1e43      	subs	r3, r0, #1
    7440:	b97b      	cbnz	r3, 7462 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    7442:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    7446:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    7448:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    744c:	4211      	tst	r1, r2
    744e:	d104      	bne.n	745a <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    7450:	3001      	adds	r0, #1
    7452:	2820      	cmp	r0, #32
        mask >>= 1;
    7454:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    7458:	d1f8      	bne.n	744c <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    745a:	3301      	adds	r3, #1
    745c:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    7460:	4770      	bx	lr
        if( X->p[i] != 0 )
    7462:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7466:	2900      	cmp	r1, #0
    7468:	d1eb      	bne.n	7442 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    746a:	3b01      	subs	r3, #1
    746c:	e7e8      	b.n	7440 <mbedtls_mpi_bitlen+0xa>

0000746e <mbedtls_mpi_size>:
{
    746e:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    7470:	f7ff ffe1 	bl	7436 <mbedtls_mpi_bitlen>
    7474:	3007      	adds	r0, #7
}
    7476:	08c0      	lsrs	r0, r0, #3
    7478:	bd08      	pop	{r3, pc}

0000747a <mbedtls_mpi_read_binary>:
{
    747a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    747e:	f012 0403 	ands.w	r4, r2, #3
    7482:	bf18      	it	ne
    7484:	2401      	movne	r4, #1
    7486:	eb04 0492 	add.w	r4, r4, r2, lsr #2
{
    748a:	4688      	mov	r8, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    748c:	4621      	mov	r1, r4
{
    748e:	4607      	mov	r7, r0
    7490:	4615      	mov	r5, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    7492:	f7ff ff2a 	bl	72ea <mbedtls_mpi_resize_clear>
    7496:	4606      	mov	r6, r0
    7498:	b968      	cbnz	r0, 74b6 <mbedtls_mpi_read_binary+0x3c>
    if( buflen != 0 )
    749a:	b165      	cbz	r5, 74b6 <mbedtls_mpi_read_binary+0x3c>
        memcpy( Xp + overhead, buf, buflen );
    749c:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    749e:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    74a2:	462a      	mov	r2, r5
    74a4:	4641      	mov	r1, r8
    74a6:	4418      	add	r0, r3
    74a8:	f7ff f877 	bl	659a <memcpy>
    if( limbs == 0 )
    74ac:	b11c      	cbz	r4, 74b6 <mbedtls_mpi_read_binary+0x3c>
    74ae:	4621      	mov	r1, r4
    74b0:	68b8      	ldr	r0, [r7, #8]
    74b2:	f7ff feb3 	bl	721c <mpi_bigendian_to_host.part.0>
}
    74b6:	4630      	mov	r0, r6
    74b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000074bc <mbedtls_mpi_write_binary>:
{
    74bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74be:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    74c0:	6863      	ldr	r3, [r4, #4]
{
    74c2:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    74c4:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    74c8:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    74cc:	d91b      	bls.n	7506 <mbedtls_mpi_write_binary+0x4a>
        p = buf + buflen - stored_bytes;
    74ce:	1b52      	subs	r2, r2, r5
    74d0:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    74d2:	2100      	movs	r1, #0
    74d4:	f7ff f86c 	bl	65b0 <memset>
        p = buf + buflen - stored_bytes;
    74d8:	4630      	mov	r0, r6
    74da:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    74dc:	2300      	movs	r3, #0
    74de:	1881      	adds	r1, r0, r2
    74e0:	429a      	cmp	r2, r3
    74e2:	d112      	bne.n	750a <mbedtls_mpi_write_binary+0x4e>
    return( 0 );
    74e4:	2000      	movs	r0, #0
}
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    74e8:	68a7      	ldr	r7, [r4, #8]
    74ea:	f003 0103 	and.w	r1, r3, #3
    74ee:	f023 0c03 	bic.w	ip, r3, #3
    74f2:	00ce      	lsls	r6, r1, #3
    74f4:	f857 100c 	ldr.w	r1, [r7, ip]
    74f8:	40f1      	lsrs	r1, r6
    74fa:	b2c9      	uxtb	r1, r1
    74fc:	b989      	cbnz	r1, 7522 <mbedtls_mpi_write_binary+0x66>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    74fe:	3301      	adds	r3, #1
    7500:	42ab      	cmp	r3, r5
    7502:	d1f1      	bne.n	74e8 <mbedtls_mpi_write_binary+0x2c>
    7504:	e7ea      	b.n	74dc <mbedtls_mpi_write_binary+0x20>
    7506:	4613      	mov	r3, r2
    7508:	e7fa      	b.n	7500 <mbedtls_mpi_write_binary+0x44>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    750a:	68a7      	ldr	r7, [r4, #8]
    750c:	f003 0003 	and.w	r0, r3, #3
    7510:	f023 0603 	bic.w	r6, r3, #3
    7514:	00c5      	lsls	r5, r0, #3
    7516:	59b8      	ldr	r0, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
    7518:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    751a:	40e8      	lsrs	r0, r5
    751c:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    7520:	e7de      	b.n	74e0 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    7522:	f06f 0007 	mvn.w	r0, #7
    7526:	e7de      	b.n	74e6 <mbedtls_mpi_write_binary+0x2a>

00007528 <mbedtls_mpi_shift_l>:
{
    7528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    752a:	4605      	mov	r5, r0
    752c:	460e      	mov	r6, r1
    v0 = count / (biL    );
    752e:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    7530:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    7534:	f7ff ff7f 	bl	7436 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    7538:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    753a:	4430      	add	r0, r6
    if( X->n * biL < i )
    753c:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    7540:	d805      	bhi.n	754e <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    7542:	2e1f      	cmp	r6, #31
    7544:	d80f      	bhi.n	7566 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    7546:	2f00      	cmp	r7, #0
    7548:	d13c      	bne.n	75c4 <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    754a:	2000      	movs	r0, #0
    754c:	e00a      	b.n	7564 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    754e:	f010 011f 	ands.w	r1, r0, #31
    7552:	bf18      	it	ne
    7554:	2101      	movne	r1, #1
    7556:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    755a:	4628      	mov	r0, r5
    755c:	f7ff fe9f 	bl	729e <mbedtls_mpi_grow>
    7560:	2800      	cmp	r0, #0
    7562:	d0ee      	beq.n	7542 <mbedtls_mpi_shift_l+0x1a>
}
    7564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    7566:	f06f 0003 	mvn.w	r0, #3
    756a:	686b      	ldr	r3, [r5, #4]
    756c:	4360      	muls	r0, r4
    756e:	4619      	mov	r1, r3
    7570:	009a      	lsls	r2, r3, #2
    7572:	42a1      	cmp	r1, r4
    7574:	f1a2 0204 	sub.w	r2, r2, #4
    7578:	d80c      	bhi.n	7594 <mbedtls_mpi_shift_l+0x6c>
    757a:	1ae2      	subs	r2, r4, r3
    757c:	429c      	cmp	r4, r3
    757e:	bf88      	it	hi
    7580:	2200      	movhi	r2, #0
    7582:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    7584:	2200      	movs	r2, #0
    7586:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    7588:	3b04      	subs	r3, #4
    758a:	1d19      	adds	r1, r3, #4
    758c:	d0db      	beq.n	7546 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    758e:	68a9      	ldr	r1, [r5, #8]
    7590:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    7592:	e7f9      	b.n	7588 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    7594:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    7596:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    7598:	eb06 0c02 	add.w	ip, r6, r2
    759c:	f85c c000 	ldr.w	ip, [ip, r0]
    75a0:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    75a4:	e7e5      	b.n	7572 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    75a6:	68a8      	ldr	r0, [r5, #8]
    75a8:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    75ac:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    75b0:	4313      	orrs	r3, r2
    75b2:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    75b6:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    75ba:	3401      	adds	r4, #1
    75bc:	686b      	ldr	r3, [r5, #4]
    75be:	42a3      	cmp	r3, r4
    75c0:	d8f1      	bhi.n	75a6 <mbedtls_mpi_shift_l+0x7e>
    75c2:	e7c2      	b.n	754a <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    75c4:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    75c6:	f1c7 0620 	rsb	r6, r7, #32
    75ca:	e7f7      	b.n	75bc <mbedtls_mpi_shift_l+0x94>

000075cc <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    75cc:	6843      	ldr	r3, [r0, #4]
{
    75ce:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    75d0:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    75d2:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    75d4:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    75d8:	d301      	bcc.n	75de <mbedtls_mpi_shift_r+0x12>
    75da:	d104      	bne.n	75e6 <mbedtls_mpi_shift_r+0x1a>
    75dc:	b36a      	cbz	r2, 763a <mbedtls_mpi_shift_r+0x6e>
}
    75de:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    75e0:	2100      	movs	r1, #0
    75e2:	f7ff befb 	b.w	73dc <mbedtls_mpi_lset>
    if( v0 > 0 )
    75e6:	291f      	cmp	r1, #31
    75e8:	d829      	bhi.n	763e <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    75ea:	b9aa      	cbnz	r2, 7618 <mbedtls_mpi_shift_r+0x4c>
}
    75ec:	bcf0      	pop	{r4, r5, r6, r7}
    75ee:	2000      	movs	r0, #0
    75f0:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    75f2:	6885      	ldr	r5, [r0, #8]
    75f4:	586e      	ldr	r6, [r5, r1]
    75f6:	3104      	adds	r1, #4
    75f8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    75fc:	3301      	adds	r3, #1
    75fe:	6845      	ldr	r5, [r0, #4]
    7600:	1b2d      	subs	r5, r5, r4
    7602:	429d      	cmp	r5, r3
    7604:	d8f5      	bhi.n	75f2 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    7606:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    7608:	6841      	ldr	r1, [r0, #4]
    760a:	4299      	cmp	r1, r3
    760c:	d9ed      	bls.n	75ea <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    760e:	6881      	ldr	r1, [r0, #8]
    7610:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    7614:	3301      	adds	r3, #1
    7616:	e7f7      	b.n	7608 <mbedtls_mpi_shift_r+0x3c>
    mbedtls_mpi_uint r0 = 0, r1;
    7618:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    761a:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    761c:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    7620:	3b01      	subs	r3, #1
    7622:	d3e3      	bcc.n	75ec <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    7624:	6886      	ldr	r6, [r0, #8]
    7626:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    762a:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    762e:	4321      	orrs	r1, r4
    7630:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    7634:	fa05 f407 	lsl.w	r4, r5, r7
    7638:	e7f2      	b.n	7620 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    763a:	291f      	cmp	r1, #31
    763c:	d9d6      	bls.n	75ec <mbedtls_mpi_shift_r+0x20>
{
    763e:	2300      	movs	r3, #0
    7640:	00a1      	lsls	r1, r4, #2
    7642:	e7dc      	b.n	75fe <mbedtls_mpi_shift_r+0x32>

00007644 <mbedtls_mpi_cmp_abs>:
{
    7644:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7646:	6843      	ldr	r3, [r0, #4]
    7648:	b92b      	cbnz	r3, 7656 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    764a:	684a      	ldr	r2, [r1, #4]
    764c:	b962      	cbnz	r2, 7668 <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    764e:	1e18      	subs	r0, r3, #0
    7650:	bf18      	it	ne
    7652:	2001      	movne	r0, #1
    7654:	e028      	b.n	76a8 <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    7656:	6882      	ldr	r2, [r0, #8]
    7658:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    765c:	f852 2c04 	ldr.w	r2, [r2, #-4]
    7660:	2a00      	cmp	r2, #0
    7662:	d1f2      	bne.n	764a <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    7664:	3b01      	subs	r3, #1
    7666:	e7ef      	b.n	7648 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    7668:	688c      	ldr	r4, [r1, #8]
    766a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    766e:	f855 5c04 	ldr.w	r5, [r5, #-4]
    7672:	b935      	cbnz	r5, 7682 <mbedtls_mpi_cmp_abs+0x3e>
    for( j = Y->n; j > 0; j-- )
    7674:	3a01      	subs	r2, #1
    7676:	e7e9      	b.n	764c <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    7678:	2001      	movs	r0, #1
    767a:	e015      	b.n	76a8 <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
    767c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7680:	e012      	b.n	76a8 <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    7682:	2b00      	cmp	r3, #0
    7684:	d0fa      	beq.n	767c <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
    7686:	4293      	cmp	r3, r2
    7688:	d8f6      	bhi.n	7678 <mbedtls_mpi_cmp_abs+0x34>
    if( j > i ) return( -1 );
    768a:	d3f7      	bcc.n	767c <mbedtls_mpi_cmp_abs+0x38>
    768c:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    768e:	6882      	ldr	r2, [r0, #8]
    7690:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7694:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    7698:	4291      	cmp	r1, r2
    769a:	d8ed      	bhi.n	7678 <mbedtls_mpi_cmp_abs+0x34>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    769c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    76a0:	d3ec      	bcc.n	767c <mbedtls_mpi_cmp_abs+0x38>
    for( ; i > 0; i-- )
    76a2:	1c5a      	adds	r2, r3, #1
    76a4:	d1f3      	bne.n	768e <mbedtls_mpi_cmp_abs+0x4a>
    return( 0 );
    76a6:	2000      	movs	r0, #0
}
    76a8:	bd30      	pop	{r4, r5, pc}

000076aa <mbedtls_mpi_cmp_mpi>:
{
    76aa:	4602      	mov	r2, r0
    76ac:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    76ae:	6843      	ldr	r3, [r0, #4]
    76b0:	b923      	cbnz	r3, 76bc <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    76b2:	6848      	ldr	r0, [r1, #4]
    76b4:	b958      	cbnz	r0, 76ce <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    76b6:	2b00      	cmp	r3, #0
    76b8:	d136      	bne.n	7728 <mbedtls_mpi_cmp_mpi+0x7e>
    76ba:	e02f      	b.n	771c <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    76bc:	6890      	ldr	r0, [r2, #8]
    76be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    76c2:	f850 0c04 	ldr.w	r0, [r0, #-4]
    76c6:	2800      	cmp	r0, #0
    76c8:	d1f3      	bne.n	76b2 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    76ca:	3b01      	subs	r3, #1
    76cc:	e7f0      	b.n	76b0 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    76ce:	688c      	ldr	r4, [r1, #8]
    76d0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    76d4:	f855 5c04 	ldr.w	r5, [r5, #-4]
    76d8:	bb15      	cbnz	r5, 7720 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    76da:	3801      	subs	r0, #1
    76dc:	e7ea      	b.n	76b4 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    76de:	d202      	bcs.n	76e6 <mbedtls_mpi_cmp_mpi+0x3c>
    76e0:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    76e2:	4240      	negs	r0, r0
    76e4:	e021      	b.n	772a <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    76e6:	6810      	ldr	r0, [r2, #0]
    if( j > i ) return( -Y->s );
    76e8:	6809      	ldr	r1, [r1, #0]
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    76ea:	2800      	cmp	r0, #0
    76ec:	dd03      	ble.n	76f6 <mbedtls_mpi_cmp_mpi+0x4c>
    76ee:	2900      	cmp	r1, #0
    76f0:	da07      	bge.n	7702 <mbedtls_mpi_cmp_mpi+0x58>
    76f2:	2001      	movs	r0, #1
    76f4:	e019      	b.n	772a <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    76f6:	2900      	cmp	r1, #0
    76f8:	dd03      	ble.n	7702 <mbedtls_mpi_cmp_mpi+0x58>
    76fa:	b110      	cbz	r0, 7702 <mbedtls_mpi_cmp_mpi+0x58>
    76fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7700:	e013      	b.n	772a <mbedtls_mpi_cmp_mpi+0x80>
    7702:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    7704:	6891      	ldr	r1, [r2, #8]
    7706:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    770a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    770e:	428d      	cmp	r5, r1
    7710:	d80b      	bhi.n	772a <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    7712:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    7716:	d3e4      	bcc.n	76e2 <mbedtls_mpi_cmp_mpi+0x38>
    for( ; i > 0; i-- )
    7718:	1c59      	adds	r1, r3, #1
    771a:	d1f3      	bne.n	7704 <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    771c:	2000      	movs	r0, #0
    771e:	e004      	b.n	772a <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    7720:	2b00      	cmp	r3, #0
    7722:	d0dd      	beq.n	76e0 <mbedtls_mpi_cmp_mpi+0x36>
    if( i > j ) return(  X->s );
    7724:	4283      	cmp	r3, r0
    7726:	d9da      	bls.n	76de <mbedtls_mpi_cmp_mpi+0x34>
    7728:	6810      	ldr	r0, [r2, #0]
}
    772a:	bd30      	pop	{r4, r5, pc}

0000772c <mbedtls_mpi_cmp_int>:
{
    772c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    772e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    7732:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    7736:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    7738:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    773a:	bfb4      	ite	lt
    773c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    7740:	2301      	movge	r3, #1
    7742:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    7744:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    7746:	a901      	add	r1, sp, #4
    Y.n = 1;
    7748:	9302      	str	r3, [sp, #8]
    Y.p = p;
    774a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    774e:	f7ff ffac 	bl	76aa <mbedtls_mpi_cmp_mpi>
}
    7752:	b005      	add	sp, #20
    7754:	f85d fb04 	ldr.w	pc, [sp], #4

00007758 <mbedtls_mpi_add_abs>:
    if( X == B )
    7758:	4290      	cmp	r0, r2
{
    775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    775e:	4606      	mov	r6, r0
    7760:	460f      	mov	r7, r1
    7762:	4615      	mov	r5, r2
    if( X == B )
    7764:	d002      	beq.n	776c <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    7766:	4288      	cmp	r0, r1
    7768:	d129      	bne.n	77be <mbedtls_mpi_add_abs+0x66>
{
    776a:	462f      	mov	r7, r5
    X->s = 1;
    776c:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    776e:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    7770:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    7772:	bb65      	cbnz	r5, 77ce <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7774:	4629      	mov	r1, r5
    7776:	4630      	mov	r0, r6
    7778:	f7ff fd91 	bl	729e <mbedtls_mpi_grow>
    777c:	4604      	mov	r4, r0
    777e:	bb18      	cbnz	r0, 77c8 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    7780:	68b3      	ldr	r3, [r6, #8]
    7782:	68b9      	ldr	r1, [r7, #8]
    7784:	469c      	mov	ip, r3
    7786:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    7788:	4285      	cmp	r5, r0
    778a:	d129      	bne.n	77e0 <mbedtls_mpi_add_abs+0x88>
    778c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    7790:	b1d7      	cbz	r7, 77c8 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7792:	6872      	ldr	r2, [r6, #4]
    7794:	f105 0801 	add.w	r8, r5, #1
    7798:	42aa      	cmp	r2, r5
    779a:	d807      	bhi.n	77ac <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    779c:	4641      	mov	r1, r8
    779e:	4630      	mov	r0, r6
    77a0:	f7ff fd7d 	bl	729e <mbedtls_mpi_grow>
    77a4:	bb68      	cbnz	r0, 7802 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    77a6:	68b3      	ldr	r3, [r6, #8]
    77a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    77ac:	681a      	ldr	r2, [r3, #0]
    77ae:	4645      	mov	r5, r8
    77b0:	19d2      	adds	r2, r2, r7
    77b2:	bf2c      	ite	cs
    77b4:	2701      	movcs	r7, #1
    77b6:	2700      	movcc	r7, #0
    77b8:	f843 2b04 	str.w	r2, [r3], #4
    77bc:	e7e8      	b.n	7790 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    77be:	f7ff fdaf 	bl	7320 <mbedtls_mpi_copy>
    77c2:	4604      	mov	r4, r0
    77c4:	2800      	cmp	r0, #0
    77c6:	d0d0      	beq.n	776a <mbedtls_mpi_add_abs+0x12>
}
    77c8:	4620      	mov	r0, r4
    77ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    77ce:	68bb      	ldr	r3, [r7, #8]
    77d0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    77d4:	f853 3c04 	ldr.w	r3, [r3, #-4]
    77d8:	2b00      	cmp	r3, #0
    77da:	d1cb      	bne.n	7774 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    77dc:	3d01      	subs	r5, #1
    77de:	e7c8      	b.n	7772 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    77e0:	f8dc 2000 	ldr.w	r2, [ip]
    77e4:	19d2      	adds	r2, r2, r7
    77e6:	bf2c      	ite	cs
    77e8:	f04f 0e01 	movcs.w	lr, #1
    77ec:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    77f0:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    for( i = 0; i < j; i++, o++, p++ )
    77f4:	3001      	adds	r0, #1
    77f6:	19d2      	adds	r2, r2, r7
        *p += tmp; c += ( *p < tmp );
    77f8:	f84c 2b04 	str.w	r2, [ip], #4
    77fc:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    7800:	e7c2      	b.n	7788 <mbedtls_mpi_add_abs+0x30>
    return( ret );
    7802:	4604      	mov	r4, r0
    7804:	e7e0      	b.n	77c8 <mbedtls_mpi_add_abs+0x70>

00007806 <mbedtls_mpi_sub_abs>:
{
    7806:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    780a:	4605      	mov	r5, r0
    780c:	460e      	mov	r6, r1
    780e:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    7810:	6854      	ldr	r4, [r2, #4]
    7812:	b93c      	cbnz	r4, 7824 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    7814:	6871      	ldr	r1, [r6, #4]
    7816:	42a1      	cmp	r1, r4
    7818:	d20e      	bcs.n	7838 <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    781a:	f06f 0709 	mvn.w	r7, #9
}
    781e:	4638      	mov	r0, r7
    7820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if( B->p[n - 1] != 0 )
    7824:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7828:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    782c:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7830:	2b00      	cmp	r3, #0
    7832:	d1ef      	bne.n	7814 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    7834:	3c01      	subs	r4, #1
    7836:	e7ec      	b.n	7812 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    7838:	4628      	mov	r0, r5
    783a:	f7ff fd30 	bl	729e <mbedtls_mpi_grow>
    783e:	4607      	mov	r7, r0
    7840:	2800      	cmp	r0, #0
    7842:	d1ec      	bne.n	781e <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    7844:	6872      	ldr	r2, [r6, #4]
    7846:	42a2      	cmp	r2, r4
    7848:	d909      	bls.n	785e <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    784a:	68b1      	ldr	r1, [r6, #8]
    784c:	68a8      	ldr	r0, [r5, #8]
    784e:	1b12      	subs	r2, r2, r4
    7850:	0092      	lsls	r2, r2, #2
    7852:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7856:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    785a:	f7fe fe9e 	bl	659a <memcpy>
    if( X->n > A->n )
    785e:	686a      	ldr	r2, [r5, #4]
    7860:	6870      	ldr	r0, [r6, #4]
    7862:	4282      	cmp	r2, r0
    7864:	d907      	bls.n	7876 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    7866:	68ab      	ldr	r3, [r5, #8]
    7868:	1a12      	subs	r2, r2, r0
    786a:	2100      	movs	r1, #0
    786c:	0092      	lsls	r2, r2, #2
    786e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7872:	f7fe fe9d 	bl	65b0 <memset>
    mbedtls_mpi_uint c = 0, t, z;
    7876:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
    7878:	4613      	mov	r3, r2
    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
    787a:	68a9      	ldr	r1, [r5, #8]
    787c:	f8d6 e008 	ldr.w	lr, [r6, #8]
    7880:	f8d8 8008 	ldr.w	r8, [r8, #8]
    for( i = 0; i < n; i++ )
    7884:	429c      	cmp	r4, r3
    7886:	d111      	bne.n	78ac <mbedtls_mpi_sub_abs+0xa6>
    if( carry != 0 )
    7888:	b16a      	cbz	r2, 78a6 <mbedtls_mpi_sub_abs+0xa0>
            --X->p[n];
    788a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    788e:	eb01 0384 	add.w	r3, r1, r4, lsl #2
        for( ; n < X->n && X->p[n] == 0; n++ )
    7892:	686a      	ldr	r2, [r5, #4]
    7894:	42a2      	cmp	r2, r4
    7896:	d923      	bls.n	78e0 <mbedtls_mpi_sub_abs+0xda>
    7898:	681a      	ldr	r2, [r3, #0]
    789a:	b1ea      	cbz	r2, 78d8 <mbedtls_mpi_sub_abs+0xd2>
        --X->p[n];
    789c:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    78a0:	3b01      	subs	r3, #1
    78a2:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    X->s = 1;
    78a6:	2301      	movs	r3, #1
    78a8:	602b      	str	r3, [r5, #0]
    return( ret );
    78aa:	e7b8      	b.n	781e <mbedtls_mpi_sub_abs+0x18>
        z = ( l[i] <  c );    t = l[i] - c;
    78ac:	f85e c023 	ldr.w	ip, [lr, r3, lsl #2]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    78b0:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
        z = ( l[i] <  c );    t = l[i] - c;
    78b4:	ebac 0002 	sub.w	r0, ip, r2
        c = ( t < r[i] ) + z; d[i] = t - r[i];
    78b8:	42b0      	cmp	r0, r6
    78ba:	bf2c      	ite	cs
    78bc:	f04f 0900 	movcs.w	r9, #0
    78c0:	f04f 0901 	movcc.w	r9, #1
    78c4:	1b80      	subs	r0, r0, r6
    78c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    78ca:	4594      	cmp	ip, r2
    78cc:	bf2c      	ite	cs
    78ce:	464a      	movcs	r2, r9
    78d0:	f109 0201 	addcc.w	r2, r9, #1
    for( i = 0; i < n; i++ )
    78d4:	3301      	adds	r3, #1
    78d6:	e7d5      	b.n	7884 <mbedtls_mpi_sub_abs+0x7e>
            --X->p[n];
    78d8:	f843 0b04 	str.w	r0, [r3], #4
        for( ; n < X->n && X->p[n] == 0; n++ )
    78dc:	3401      	adds	r4, #1
    78de:	e7d8      	b.n	7892 <mbedtls_mpi_sub_abs+0x8c>
        if( n == X->n )
    78e0:	d1dc      	bne.n	789c <mbedtls_mpi_sub_abs+0x96>
    78e2:	e79a      	b.n	781a <mbedtls_mpi_sub_abs+0x14>

000078e4 <mbedtls_mpi_add_mpi>:
{
    78e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    78e6:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    78e8:	6813      	ldr	r3, [r2, #0]
{
    78ea:	4604      	mov	r4, r0
    if( A->s * B->s < 0 )
    78ec:	436b      	muls	r3, r5
{
    78ee:	460f      	mov	r7, r1
    78f0:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    78f2:	d516      	bpl.n	7922 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    78f4:	4611      	mov	r1, r2
    78f6:	4638      	mov	r0, r7
    78f8:	f7ff fea4 	bl	7644 <mbedtls_mpi_cmp_abs>
    78fc:	2800      	cmp	r0, #0
    78fe:	db06      	blt.n	790e <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7900:	4632      	mov	r2, r6
    7902:	4639      	mov	r1, r7
    7904:	4620      	mov	r0, r4
    7906:	f7ff ff7e 	bl	7806 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    790a:	b140      	cbz	r0, 791e <mbedtls_mpi_add_mpi+0x3a>
}
    790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    790e:	463a      	mov	r2, r7
    7910:	4631      	mov	r1, r6
    7912:	4620      	mov	r0, r4
    7914:	f7ff ff77 	bl	7806 <mbedtls_mpi_sub_abs>
    7918:	2800      	cmp	r0, #0
    791a:	d1f7      	bne.n	790c <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    791c:	426d      	negs	r5, r5
        X->s = s;
    791e:	6025      	str	r5, [r4, #0]
    return( ret );
    7920:	e7f4      	b.n	790c <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7922:	f7ff ff19 	bl	7758 <mbedtls_mpi_add_abs>
    7926:	e7f0      	b.n	790a <mbedtls_mpi_add_mpi+0x26>

00007928 <mbedtls_mpi_sub_mpi>:
{
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    792a:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    792c:	6813      	ldr	r3, [r2, #0]
{
    792e:	4604      	mov	r4, r0
    if( A->s * B->s > 0 )
    7930:	436b      	muls	r3, r5
    7932:	2b00      	cmp	r3, #0
{
    7934:	460f      	mov	r7, r1
    7936:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    7938:	dd16      	ble.n	7968 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    793a:	4611      	mov	r1, r2
    793c:	4638      	mov	r0, r7
    793e:	f7ff fe81 	bl	7644 <mbedtls_mpi_cmp_abs>
    7942:	2800      	cmp	r0, #0
    7944:	db06      	blt.n	7954 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7946:	4632      	mov	r2, r6
    7948:	4639      	mov	r1, r7
    794a:	4620      	mov	r0, r4
    794c:	f7ff ff5b 	bl	7806 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7950:	b140      	cbz	r0, 7964 <mbedtls_mpi_sub_mpi+0x3c>
}
    7952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7954:	463a      	mov	r2, r7
    7956:	4631      	mov	r1, r6
    7958:	4620      	mov	r0, r4
    795a:	f7ff ff54 	bl	7806 <mbedtls_mpi_sub_abs>
    795e:	2800      	cmp	r0, #0
    7960:	d1f7      	bne.n	7952 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    7962:	426d      	negs	r5, r5
        X->s = s;
    7964:	6025      	str	r5, [r4, #0]
    return( ret );
    7966:	e7f4      	b.n	7952 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7968:	f7ff fef6 	bl	7758 <mbedtls_mpi_add_abs>
    796c:	e7f0      	b.n	7950 <mbedtls_mpi_sub_mpi+0x28>

0000796e <mbedtls_mpi_mul_int>:
{
    796e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7972:	4605      	mov	r5, r0
    7974:	460f      	mov	r7, r1
    7976:	4690      	mov	r8, r2
    size_t n = A->n;
    7978:	684e      	ldr	r6, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    797a:	b146      	cbz	r6, 798e <mbedtls_mpi_mul_int+0x20>
    797c:	68bb      	ldr	r3, [r7, #8]
    797e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    7982:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7986:	b143      	cbz	r3, 799a <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    7988:	f1b8 0f00 	cmp.w	r8, #0
    798c:	d107      	bne.n	799e <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    798e:	4628      	mov	r0, r5
}
    7990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    7994:	2100      	movs	r1, #0
    7996:	f7ff bd21 	b.w	73dc <mbedtls_mpi_lset>
        --n;
    799a:	3e01      	subs	r6, #1
    799c:	e7ed      	b.n	797a <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    799e:	4628      	mov	r0, r5
    79a0:	1c71      	adds	r1, r6, #1
    79a2:	f7ff fc7c 	bl	729e <mbedtls_mpi_grow>
    79a6:	4604      	mov	r4, r0
    79a8:	b960      	cbnz	r0, 79c4 <mbedtls_mpi_mul_int+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    79aa:	4639      	mov	r1, r7
    79ac:	4628      	mov	r0, r5
    79ae:	f7ff fcb7 	bl	7320 <mbedtls_mpi_copy>
    79b2:	4604      	mov	r4, r0
    79b4:	b930      	cbnz	r0, 79c4 <mbedtls_mpi_mul_int+0x56>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
    79b6:	4630      	mov	r0, r6
    79b8:	68aa      	ldr	r2, [r5, #8]
    79ba:	68b9      	ldr	r1, [r7, #8]
    79bc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    79c0:	f7ff fa1a 	bl	6df8 <mpi_mul_hlp>
}
    79c4:	4620      	mov	r0, r4
    79c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079ca <mbedtls_mpi_div_mpi>:
{
    79ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79ce:	b099      	sub	sp, #100	; 0x64
    79d0:	4688      	mov	r8, r1
    79d2:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    79d4:	2100      	movs	r1, #0
    79d6:	4618      	mov	r0, r3
{
    79d8:	4616      	mov	r6, r2
    79da:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    79dc:	f7ff fea6 	bl	772c <mbedtls_mpi_cmp_int>
    79e0:	2800      	cmp	r0, #0
    79e2:	f000 8194 	beq.w	7d0e <mbedtls_mpi_div_mpi+0x344>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    79e6:	2303      	movs	r3, #3
    X->n = 0;
    79e8:	2400      	movs	r4, #0
    79ea:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    79ec:	9313      	str	r3, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    79ee:	4630      	mov	r0, r6
    T2.p = TP2;
    79f0:	ab15      	add	r3, sp, #84	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    79f2:	9901      	ldr	r1, [sp, #4]
    X->n = 0;
    79f4:	e9cd 5406 	strd	r5, r4, [sp, #24]
    X->s = 1;
    79f8:	e9cd 4508 	strd	r4, r5, [sp, #32]
    X->p = NULL;
    79fc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    X->n = 0;
    7a00:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    X->s = 1;
    7a04:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    X->p = NULL;
    7a08:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    T2.s = 1;
    7a0c:	9512      	str	r5, [sp, #72]	; 0x48
    T2.p = TP2;
    7a0e:	9314      	str	r3, [sp, #80]	; 0x50
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7a10:	f7ff fe18 	bl	7644 <mbedtls_mpi_cmp_abs>
    7a14:	42a0      	cmp	r0, r4
    7a16:	da29      	bge.n	7a6c <mbedtls_mpi_div_mpi+0xa2>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7a18:	9b00      	ldr	r3, [sp, #0]
    7a1a:	b93b      	cbnz	r3, 7a2c <mbedtls_mpi_div_mpi+0x62>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7a1c:	f1b8 0f00 	cmp.w	r8, #0
    7a20:	d11c      	bne.n	7a5c <mbedtls_mpi_div_mpi+0x92>
        return( 0 );
    7a22:	2400      	movs	r4, #0
}
    7a24:	4620      	mov	r0, r4
    7a26:	b019      	add	sp, #100	; 0x64
    7a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7a2c:	4621      	mov	r1, r4
    7a2e:	9800      	ldr	r0, [sp, #0]
    7a30:	f7ff fcd4 	bl	73dc <mbedtls_mpi_lset>
    7a34:	4604      	mov	r4, r0
    7a36:	2800      	cmp	r0, #0
    7a38:	d0f0      	beq.n	7a1c <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    7a3a:	a806      	add	r0, sp, #24
    7a3c:	f7ff fc1d 	bl	727a <mbedtls_mpi_free>
    7a40:	a809      	add	r0, sp, #36	; 0x24
    7a42:	f7ff fc1a 	bl	727a <mbedtls_mpi_free>
    7a46:	a80c      	add	r0, sp, #48	; 0x30
    7a48:	f7ff fc17 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    7a4c:	a80f      	add	r0, sp, #60	; 0x3c
    7a4e:	f7ff fc14 	bl	727a <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    7a52:	210c      	movs	r1, #12
    7a54:	a815      	add	r0, sp, #84	; 0x54
    7a56:	f7fd fd87 	bl	5568 <mbedtls_platform_zeroize>
    return( ret );
    7a5a:	e7e3      	b.n	7a24 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7a5c:	4631      	mov	r1, r6
    7a5e:	4640      	mov	r0, r8
    7a60:	f7ff fc5e 	bl	7320 <mbedtls_mpi_copy>
    7a64:	4604      	mov	r4, r0
    7a66:	2800      	cmp	r0, #0
    7a68:	d1e7      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    7a6a:	e7da      	b.n	7a22 <mbedtls_mpi_div_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7a6c:	4631      	mov	r1, r6
    7a6e:	a806      	add	r0, sp, #24
    7a70:	f7ff fc56 	bl	7320 <mbedtls_mpi_copy>
    7a74:	4604      	mov	r4, r0
    7a76:	2800      	cmp	r0, #0
    7a78:	d1df      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7a7a:	af09      	add	r7, sp, #36	; 0x24
    7a7c:	4638      	mov	r0, r7
    7a7e:	9901      	ldr	r1, [sp, #4]
    7a80:	f7ff fc4e 	bl	7320 <mbedtls_mpi_copy>
    7a84:	4604      	mov	r4, r0
    7a86:	2800      	cmp	r0, #0
    7a88:	d1d7      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7a8a:	6871      	ldr	r1, [r6, #4]
    7a8c:	a80c      	add	r0, sp, #48	; 0x30
    7a8e:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7a90:	9509      	str	r5, [sp, #36]	; 0x24
    7a92:	9506      	str	r5, [sp, #24]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7a94:	f7ff fc03 	bl	729e <mbedtls_mpi_grow>
    7a98:	4604      	mov	r4, r0
    7a9a:	2800      	cmp	r0, #0
    7a9c:	d1cd      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7a9e:	4601      	mov	r1, r0
    7aa0:	a80c      	add	r0, sp, #48	; 0x30
    7aa2:	f7ff fc9b 	bl	73dc <mbedtls_mpi_lset>
    7aa6:	4604      	mov	r4, r0
    7aa8:	2800      	cmp	r0, #0
    7aaa:	d1c6      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    7aac:	6871      	ldr	r1, [r6, #4]
    7aae:	a80f      	add	r0, sp, #60	; 0x3c
    7ab0:	3102      	adds	r1, #2
    7ab2:	f7ff fbf4 	bl	729e <mbedtls_mpi_grow>
    7ab6:	4604      	mov	r4, r0
    7ab8:	2800      	cmp	r0, #0
    7aba:	d1be      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7abc:	4638      	mov	r0, r7
    7abe:	f7ff fcba 	bl	7436 <mbedtls_mpi_bitlen>
    7ac2:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7ac6:	281f      	cmp	r0, #31
    7ac8:	d073      	beq.n	7bb2 <mbedtls_mpi_div_mpi+0x1e8>
        k = biL - 1 - k;
    7aca:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7ace:	4651      	mov	r1, sl
    7ad0:	a806      	add	r0, sp, #24
    7ad2:	f7ff fd29 	bl	7528 <mbedtls_mpi_shift_l>
    7ad6:	4604      	mov	r4, r0
    7ad8:	2800      	cmp	r0, #0
    7ada:	d1ae      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7adc:	4651      	mov	r1, sl
    7ade:	4638      	mov	r0, r7
    7ae0:	f7ff fd22 	bl	7528 <mbedtls_mpi_shift_l>
    7ae4:	4604      	mov	r4, r0
    7ae6:	2800      	cmp	r0, #0
    7ae8:	d1a7      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    n = X.n - 1;
    7aea:	f8dd 901c 	ldr.w	r9, [sp, #28]
    t = Y.n - 1;
    7aee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7af0:	4638      	mov	r0, r7
    7af2:	eba9 0305 	sub.w	r3, r9, r5
    7af6:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    7afa:	4659      	mov	r1, fp
    7afc:	9302      	str	r3, [sp, #8]
    7afe:	f7ff fd13 	bl	7528 <mbedtls_mpi_shift_l>
    7b02:	4604      	mov	r4, r0
    7b04:	2800      	cmp	r0, #0
    7b06:	d198      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
        Z.p[n - t]++;
    7b08:	9b02      	ldr	r3, [sp, #8]
    7b0a:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7b0c:	4639      	mov	r1, r7
    7b0e:	a806      	add	r0, sp, #24
    7b10:	9302      	str	r3, [sp, #8]
    7b12:	f7ff fdca 	bl	76aa <mbedtls_mpi_cmp_mpi>
    7b16:	2800      	cmp	r0, #0
    7b18:	9b02      	ldr	r3, [sp, #8]
    7b1a:	da4c      	bge.n	7bb6 <mbedtls_mpi_div_mpi+0x1ec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7b1c:	4659      	mov	r1, fp
    7b1e:	4638      	mov	r0, r7
    7b20:	f7ff fd54 	bl	75cc <mbedtls_mpi_shift_r>
    7b24:	4604      	mov	r4, r0
    7b26:	2800      	cmp	r0, #0
    7b28:	d187      	bne.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    t = Y.n - 1;
    7b2a:	1e6b      	subs	r3, r5, #1
    7b2c:	9302      	str	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    7b2e:	009b      	lsls	r3, r3, #2
    7b30:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7b32:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7b36:	3b02      	subs	r3, #2
    7b38:	009b      	lsls	r3, r3, #2
    7b3a:	9305      	str	r3, [sp, #20]
    7b3c:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
    n = X.n - 1;
    7b40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
    7b44:	3b01      	subs	r3, #1
    7b46:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    7b4a:	1b5d      	subs	r5, r3, r5
    7b4c:	f1a9 0902 	sub.w	r9, r9, #2
    7b50:	00ad      	lsls	r5, r5, #2
    7b52:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    for( i = n; i > t ; i-- )
    7b56:	9b02      	ldr	r3, [sp, #8]
    7b58:	429f      	cmp	r7, r3
    7b5a:	d83b      	bhi.n	7bd4 <mbedtls_mpi_div_mpi+0x20a>
    if( Q != NULL )
    7b5c:	9b00      	ldr	r3, [sp, #0]
    7b5e:	b153      	cbz	r3, 7b76 <mbedtls_mpi_div_mpi+0x1ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7b60:	4618      	mov	r0, r3
    7b62:	a90c      	add	r1, sp, #48	; 0x30
    7b64:	f7ff fbdc 	bl	7320 <mbedtls_mpi_copy>
    7b68:	bb08      	cbnz	r0, 7bae <mbedtls_mpi_div_mpi+0x1e4>
        Q->s = A->s * B->s;
    7b6a:	9a01      	ldr	r2, [sp, #4]
    7b6c:	6833      	ldr	r3, [r6, #0]
    7b6e:	6812      	ldr	r2, [r2, #0]
    7b70:	4353      	muls	r3, r2
    7b72:	9a00      	ldr	r2, [sp, #0]
    7b74:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    7b76:	f1b8 0f00 	cmp.w	r8, #0
    7b7a:	f43f af5e 	beq.w	7a3a <mbedtls_mpi_div_mpi+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7b7e:	4651      	mov	r1, sl
    7b80:	a806      	add	r0, sp, #24
    7b82:	f7ff fd23 	bl	75cc <mbedtls_mpi_shift_r>
    7b86:	b990      	cbnz	r0, 7bae <mbedtls_mpi_div_mpi+0x1e4>
        X.s = A->s;
    7b88:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7b8a:	a906      	add	r1, sp, #24
    7b8c:	4640      	mov	r0, r8
        X.s = A->s;
    7b8e:	9306      	str	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7b90:	f7ff fbc6 	bl	7320 <mbedtls_mpi_copy>
    7b94:	4601      	mov	r1, r0
    7b96:	2800      	cmp	r0, #0
    7b98:	f040 80b7 	bne.w	7d0a <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7b9c:	4640      	mov	r0, r8
    7b9e:	f7ff fdc5 	bl	772c <mbedtls_mpi_cmp_int>
    7ba2:	2800      	cmp	r0, #0
    7ba4:	f47f af49 	bne.w	7a3a <mbedtls_mpi_div_mpi+0x70>
            R->s = 1;
    7ba8:	2301      	movs	r3, #1
    7baa:	f8c8 3000 	str.w	r3, [r8]
    7bae:	4604      	mov	r4, r0
    7bb0:	e743      	b.n	7a3a <mbedtls_mpi_div_mpi+0x70>
    else k = 0;
    7bb2:	46a2      	mov	sl, r4
    7bb4:	e799      	b.n	7aea <mbedtls_mpi_div_mpi+0x120>
        Z.p[n - t]++;
    7bb6:	990e      	ldr	r1, [sp, #56]	; 0x38
    7bb8:	9302      	str	r3, [sp, #8]
    7bba:	58ca      	ldr	r2, [r1, r3]
    7bbc:	3201      	adds	r2, #1
    7bbe:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7bc0:	a906      	add	r1, sp, #24
    7bc2:	463a      	mov	r2, r7
    7bc4:	4608      	mov	r0, r1
    7bc6:	f7ff feaf 	bl	7928 <mbedtls_mpi_sub_mpi>
    7bca:	9b02      	ldr	r3, [sp, #8]
    7bcc:	4604      	mov	r4, r0
    7bce:	2800      	cmp	r0, #0
    7bd0:	d09c      	beq.n	7b0c <mbedtls_mpi_div_mpi+0x142>
    7bd2:	e732      	b.n	7a3a <mbedtls_mpi_div_mpi+0x70>
        if( X.p[i] >= Y.p[t] )
    7bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7bd6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    7bda:	9a04      	ldr	r2, [sp, #16]
    7bdc:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
    7be0:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    7be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if( X.p[i] >= Y.p[t] )
    7be4:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    7be6:	eb03 0005 	add.w	r0, r3, r5
    7bea:	9003      	str	r0, [sp, #12]
        if( X.p[i] >= Y.p[t] )
    7bec:	d376      	bcc.n	7cdc <mbedtls_mpi_div_mpi+0x312>
            Z.p[i - t - 1] = ~0;
    7bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7bf2:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7bf4:	2f01      	cmp	r7, #1
    7bf6:	bf92      	itee	ls
    7bf8:	2300      	movls	r3, #0
    7bfa:	eb09 030b 	addhi.w	r3, r9, fp
    7bfe:	f853 3c04 	ldrhi.w	r3, [r3, #-4]
    7c02:	9315      	str	r3, [sp, #84]	; 0x54
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7c04:	2f00      	cmp	r7, #0
    7c06:	d07c      	beq.n	7d02 <mbedtls_mpi_div_mpi+0x338>
    7c08:	f859 300b 	ldr.w	r3, [r9, fp]
    7c0c:	9316      	str	r3, [sp, #88]	; 0x58
        T2.p[2] = X.p[i];
    7c0e:	00bb      	lsls	r3, r7, #2
    7c10:	f859 3003 	ldr.w	r3, [r9, r3]
        Z.p[i - t - 1]++;
    7c14:	9a03      	ldr	r2, [sp, #12]
        T2.p[2] = X.p[i];
    7c16:	9317      	str	r3, [sp, #92]	; 0x5c
        Z.p[i - t - 1]++;
    7c18:	9b03      	ldr	r3, [sp, #12]
    7c1a:	681b      	ldr	r3, [r3, #0]
    7c1c:	3301      	adds	r3, #1
    7c1e:	6013      	str	r3, [r2, #0]
            Z.p[i - t - 1]--;
    7c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7c22:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    7c24:	5953      	ldr	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7c26:	a80f      	add	r0, sp, #60	; 0x3c
            Z.p[i - t - 1]--;
    7c28:	3b01      	subs	r3, #1
    7c2a:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7c2c:	f7ff fbd6 	bl	73dc <mbedtls_mpi_lset>
    7c30:	2800      	cmp	r0, #0
    7c32:	d1bc      	bne.n	7bae <mbedtls_mpi_div_mpi+0x1e4>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7c34:	9b02      	ldr	r3, [sp, #8]
    7c36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d064      	beq.n	7d06 <mbedtls_mpi_div_mpi+0x33c>
    7c3c:	9b05      	ldr	r3, [sp, #20]
    7c3e:	58d1      	ldr	r1, [r2, r3]
    7c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c42:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    7c44:	9904      	ldr	r1, [sp, #16]
    7c46:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7c48:	a90f      	add	r1, sp, #60	; 0x3c
            T1.p[1] = Y.p[t];
    7c4a:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c4e:	4608      	mov	r0, r1
    7c50:	595a      	ldr	r2, [r3, r5]
    7c52:	f7ff fe8c 	bl	796e <mbedtls_mpi_mul_int>
    7c56:	2800      	cmp	r0, #0
    7c58:	d1a9      	bne.n	7bae <mbedtls_mpi_div_mpi+0x1e4>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7c5a:	a912      	add	r1, sp, #72	; 0x48
    7c5c:	a80f      	add	r0, sp, #60	; 0x3c
    7c5e:	f7ff fd24 	bl	76aa <mbedtls_mpi_cmp_mpi>
    7c62:	2800      	cmp	r0, #0
    7c64:	dcdc      	bgt.n	7c20 <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c68:	a909      	add	r1, sp, #36	; 0x24
    7c6a:	595a      	ldr	r2, [r3, r5]
    7c6c:	a80f      	add	r0, sp, #60	; 0x3c
    7c6e:	f7ff fe7e 	bl	796e <mbedtls_mpi_mul_int>
    7c72:	2800      	cmp	r0, #0
    7c74:	d19b      	bne.n	7bae <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7c76:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    7c7a:	4649      	mov	r1, r9
    7c7c:	a80f      	add	r0, sp, #60	; 0x3c
    7c7e:	f7ff fc53 	bl	7528 <mbedtls_mpi_shift_l>
    7c82:	2800      	cmp	r0, #0
    7c84:	d193      	bne.n	7bae <mbedtls_mpi_div_mpi+0x1e4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7c86:	a906      	add	r1, sp, #24
    7c88:	4608      	mov	r0, r1
    7c8a:	aa0f      	add	r2, sp, #60	; 0x3c
    7c8c:	f7ff fe4c 	bl	7928 <mbedtls_mpi_sub_mpi>
    7c90:	4601      	mov	r1, r0
    7c92:	2800      	cmp	r0, #0
    7c94:	d139      	bne.n	7d0a <mbedtls_mpi_div_mpi+0x340>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7c96:	a806      	add	r0, sp, #24
    7c98:	f7ff fd48 	bl	772c <mbedtls_mpi_cmp_int>
    7c9c:	2800      	cmp	r0, #0
    7c9e:	da18      	bge.n	7cd2 <mbedtls_mpi_div_mpi+0x308>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7ca0:	a909      	add	r1, sp, #36	; 0x24
    7ca2:	a80f      	add	r0, sp, #60	; 0x3c
    7ca4:	f7ff fb3c 	bl	7320 <mbedtls_mpi_copy>
    7ca8:	2800      	cmp	r0, #0
    7caa:	d180      	bne.n	7bae <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7cac:	4649      	mov	r1, r9
    7cae:	a80f      	add	r0, sp, #60	; 0x3c
    7cb0:	f7ff fc3a 	bl	7528 <mbedtls_mpi_shift_l>
    7cb4:	2800      	cmp	r0, #0
    7cb6:	f47f af7a 	bne.w	7bae <mbedtls_mpi_div_mpi+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7cba:	a906      	add	r1, sp, #24
    7cbc:	4608      	mov	r0, r1
    7cbe:	aa0f      	add	r2, sp, #60	; 0x3c
    7cc0:	f7ff fe10 	bl	78e4 <mbedtls_mpi_add_mpi>
    7cc4:	2800      	cmp	r0, #0
    7cc6:	f47f af72 	bne.w	7bae <mbedtls_mpi_div_mpi+0x1e4>
            Z.p[i - t - 1]--;
    7cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7ccc:	5953      	ldr	r3, [r2, r5]
    7cce:	3b01      	subs	r3, #1
    7cd0:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    7cd2:	3f01      	subs	r7, #1
    7cd4:	3d04      	subs	r5, #4
    7cd6:	f1ab 0b04 	sub.w	fp, fp, #4
    7cda:	e73c      	b.n	7b56 <mbedtls_mpi_div_mpi+0x18c>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7cdc:	f859 000b 	ldr.w	r0, [r9, fp]
    if( 0 == d || u1 >= d )
    7ce0:	b152      	cbz	r2, 7cf8 <mbedtls_mpi_div_mpi+0x32e>
    dividend  = (mbedtls_t_udbl) u1 << biL;
    7ce2:	2300      	movs	r3, #0
    quotient = dividend / d;
    7ce4:	f7f8 fa2e 	bl	144 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
    7ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cec:	4283      	cmp	r3, r0
    7cee:	f04f 0300 	mov.w	r3, #0
    7cf2:	418b      	sbcs	r3, r1
    7cf4:	4602      	mov	r2, r0
    7cf6:	d201      	bcs.n	7cfc <mbedtls_mpi_div_mpi+0x332>
        return ( ~0 );
    7cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7cfc:	9b03      	ldr	r3, [sp, #12]
    7cfe:	601a      	str	r2, [r3, #0]
    7d00:	e778      	b.n	7bf4 <mbedtls_mpi_div_mpi+0x22a>
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7d02:	463b      	mov	r3, r7
    7d04:	e782      	b.n	7c0c <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d06:	9902      	ldr	r1, [sp, #8]
    7d08:	e79a      	b.n	7c40 <mbedtls_mpi_div_mpi+0x276>
    7d0a:	460c      	mov	r4, r1
    7d0c:	e695      	b.n	7a3a <mbedtls_mpi_div_mpi+0x70>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7d0e:	f06f 040b 	mvn.w	r4, #11
    7d12:	e687      	b.n	7a24 <mbedtls_mpi_div_mpi+0x5a>

00007d14 <mbedtls_mpi_mod_mpi>:
{
    7d14:	b570      	push	{r4, r5, r6, lr}
    7d16:	4604      	mov	r4, r0
    7d18:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7d1a:	4610      	mov	r0, r2
    7d1c:	2100      	movs	r1, #0
{
    7d1e:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7d20:	f7ff fd04 	bl	772c <mbedtls_mpi_cmp_int>
    7d24:	2800      	cmp	r0, #0
    7d26:	db24      	blt.n	7d72 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7d28:	462a      	mov	r2, r5
    7d2a:	4633      	mov	r3, r6
    7d2c:	4621      	mov	r1, r4
    7d2e:	2000      	movs	r0, #0
    7d30:	f7ff fe4b 	bl	79ca <mbedtls_mpi_div_mpi>
    7d34:	4605      	mov	r5, r0
    7d36:	b138      	cbz	r0, 7d48 <mbedtls_mpi_mod_mpi+0x34>
}
    7d38:	4628      	mov	r0, r5
    7d3a:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7d3c:	4632      	mov	r2, r6
    7d3e:	4621      	mov	r1, r4
    7d40:	4620      	mov	r0, r4
    7d42:	f7ff fdcf 	bl	78e4 <mbedtls_mpi_add_mpi>
    7d46:	b990      	cbnz	r0, 7d6e <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7d48:	2100      	movs	r1, #0
    7d4a:	4620      	mov	r0, r4
    7d4c:	f7ff fcee 	bl	772c <mbedtls_mpi_cmp_int>
    7d50:	2800      	cmp	r0, #0
    7d52:	dbf3      	blt.n	7d3c <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7d54:	4631      	mov	r1, r6
    7d56:	4620      	mov	r0, r4
    7d58:	f7ff fca7 	bl	76aa <mbedtls_mpi_cmp_mpi>
    7d5c:	2800      	cmp	r0, #0
    7d5e:	dbeb      	blt.n	7d38 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7d60:	4632      	mov	r2, r6
    7d62:	4621      	mov	r1, r4
    7d64:	4620      	mov	r0, r4
    7d66:	f7ff fddf 	bl	7928 <mbedtls_mpi_sub_mpi>
    7d6a:	2800      	cmp	r0, #0
    7d6c:	d0f2      	beq.n	7d54 <mbedtls_mpi_mod_mpi+0x40>
    7d6e:	4605      	mov	r5, r0
    7d70:	e7e2      	b.n	7d38 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7d72:	f06f 0509 	mvn.w	r5, #9
    7d76:	e7df      	b.n	7d38 <mbedtls_mpi_mod_mpi+0x24>

00007d78 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d7c:	4606      	mov	r6, r0
    7d7e:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    7d82:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7d84:	4618      	mov	r0, r3
    7d86:	2100      	movs	r1, #0
{
    7d88:	461d      	mov	r5, r3
    7d8a:	9204      	str	r2, [sp, #16]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7d8c:	f7ff fcce 	bl	772c <mbedtls_mpi_cmp_int>
    7d90:	2800      	cmp	r0, #0
    7d92:	f340 8217 	ble.w	81c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    7d96:	68ab      	ldr	r3, [r5, #8]
    7d98:	681c      	ldr	r4, [r3, #0]
    7d9a:	f014 0301 	ands.w	r3, r4, #1
    7d9e:	9307      	str	r3, [sp, #28]
    7da0:	f000 8210 	beq.w	81c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7da4:	2100      	movs	r1, #0
    7da6:	9804      	ldr	r0, [sp, #16]
    7da8:	f7ff fcc0 	bl	772c <mbedtls_mpi_cmp_int>
    7dac:	2800      	cmp	r0, #0
    7dae:	f2c0 8209 	blt.w	81c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7db2:	9804      	ldr	r0, [sp, #16]
    7db4:	f7ff fb3f 	bl	7436 <mbedtls_mpi_bitlen>
    7db8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7dbc:	f200 8202 	bhi.w	81c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    7dc0:	4628      	mov	r0, r5
    7dc2:	f7ff fb38 	bl	7436 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    7dc6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    7dca:	f200 81fb 	bhi.w	81c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    7dce:	2103      	movs	r1, #3
    7dd0:	1ca7      	adds	r7, r4, #2
    7dd2:	007f      	lsls	r7, r7, #1
    7dd4:	f007 0708 	and.w	r7, r7, #8
    7dd8:	4427      	add	r7, r4
        x *= ( 2 - ( m0 * x ) );
    7dda:	fb07 f304 	mul.w	r3, r7, r4
    for( i = biL; i >= 8; i /= 2 )
    7dde:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    7de0:	f1c3 0302 	rsb	r3, r3, #2
    7de4:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
    7de8:	d1f7      	bne.n	7dda <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    7dea:	2301      	movs	r3, #1
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    mbedtls_mpi_init( &WW );
    memset( W, 0, sizeof( W ) );
    7dec:	f44f 7240 	mov.w	r2, #768	; 0x300
    7df0:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    7df2:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    7df6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    7dfa:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    7dfe:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    7e02:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    7e06:	9116      	str	r1, [sp, #88]	; 0x58
    7e08:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    7e0a:	f7fe fbd1 	bl	65b0 <memset>

    i = mbedtls_mpi_bitlen( E );
    7e0e:	9804      	ldr	r0, [sp, #16]
    7e10:	f7ff fb11 	bl	7436 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7e14:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7e18:	f080 80f8 	bcs.w	800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    7e1c:	28ef      	cmp	r0, #239	; 0xef
    7e1e:	f200 80f7 	bhi.w	8010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    7e22:	284f      	cmp	r0, #79	; 0x4f
    7e24:	f200 80f6 	bhi.w	8014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    7e28:	2817      	cmp	r0, #23
    7e2a:	9b07      	ldr	r3, [sp, #28]
    7e2c:	bf88      	it	hi
    7e2e:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7e30:	6869      	ldr	r1, [r5, #4]
    /* All W[i] and X must have at least N->n limbs for the mpi_montmul()
     * and mpi_montred() calls later. Here we ensure that W[1] and X are
     * large enough, and later we'll grow other W[i] to the same length.
     * They must not be shrunk midway through this function!
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7e32:	4630      	mov	r0, r6
    j = N->n + 1;
    7e34:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7e38:	4649      	mov	r1, r9
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7e3a:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7e3c:	f7ff fa2f 	bl	729e <mbedtls_mpi_grow>
    7e40:	4604      	mov	r4, r0
    7e42:	2800      	cmp	r0, #0
    7e44:	f040 80be 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7e48:	4649      	mov	r1, r9
    7e4a:	a81d      	add	r0, sp, #116	; 0x74
    7e4c:	f7ff fa27 	bl	729e <mbedtls_mpi_grow>
    7e50:	4604      	mov	r4, r0
    7e52:	2800      	cmp	r0, #0
    7e54:	f040 80b6 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7e58:	ea4f 0149 	mov.w	r1, r9, lsl #1
    7e5c:	a80e      	add	r0, sp, #56	; 0x38
    7e5e:	f7ff fa1e 	bl	729e <mbedtls_mpi_grow>
    7e62:	4604      	mov	r4, r0
    7e64:	2800      	cmp	r0, #0
    7e66:	f040 80ad 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    7e6a:	f8d8 3000 	ldr.w	r3, [r8]
    7e6e:	9306      	str	r3, [sp, #24]
    if( neg )
    7e70:	3301      	adds	r3, #1
    7e72:	d10b      	bne.n	7e8c <mbedtls_mpi_exp_mod+0x114>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    7e74:	4641      	mov	r1, r8
    7e76:	a814      	add	r0, sp, #80	; 0x50
    7e78:	f7ff fa52 	bl	7320 <mbedtls_mpi_copy>
    7e7c:	4604      	mov	r4, r0
    7e7e:	2800      	cmp	r0, #0
    7e80:	f040 80a0 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>
        Apos.s = 1;
    7e84:	2301      	movs	r3, #1
        A = &Apos;
    7e86:	f10d 0850 	add.w	r8, sp, #80	; 0x50
        Apos.s = 1;
    7e8a:	9314      	str	r3, [sp, #80]	; 0x50
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    7e8c:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7e8e:	b11b      	cbz	r3, 7e98 <mbedtls_mpi_exp_mod+0x120>
    7e90:	689b      	ldr	r3, [r3, #8]
    7e92:	2b00      	cmp	r3, #0
    7e94:	f040 80c0 	bne.w	8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7e98:	2101      	movs	r1, #1
    7e9a:	a80b      	add	r0, sp, #44	; 0x2c
    7e9c:	f7ff fa9e 	bl	73dc <mbedtls_mpi_lset>
    7ea0:	4604      	mov	r4, r0
    7ea2:	2800      	cmp	r0, #0
    7ea4:	f040 808e 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7ea8:	6869      	ldr	r1, [r5, #4]
    7eaa:	a80b      	add	r0, sp, #44	; 0x2c
    7eac:	0189      	lsls	r1, r1, #6
    7eae:	f7ff fb3b 	bl	7528 <mbedtls_mpi_shift_l>
    7eb2:	4604      	mov	r4, r0
    7eb4:	2800      	cmp	r0, #0
    7eb6:	f040 8085 	bne.w	7fc4 <mbedtls_mpi_exp_mod+0x24c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7eba:	a90b      	add	r1, sp, #44	; 0x2c
    7ebc:	462a      	mov	r2, r5
    7ebe:	4608      	mov	r0, r1
    7ec0:	f7ff ff28 	bl	7d14 <mbedtls_mpi_mod_mpi>
    7ec4:	4604      	mov	r4, r0
    7ec6:	2800      	cmp	r0, #0
    7ec8:	d17c      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>

        if( _RR != NULL )
    7eca:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7ecc:	b123      	cbz	r3, 7ed8 <mbedtls_mpi_exp_mod+0x160>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    7ece:	220c      	movs	r2, #12
    7ed0:	4618      	mov	r0, r3
    7ed2:	a90b      	add	r1, sp, #44	; 0x2c
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7ed4:	f7fe fb61 	bl	659a <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7ed8:	4629      	mov	r1, r5
    7eda:	4640      	mov	r0, r8
    7edc:	f7ff fbe5 	bl	76aa <mbedtls_mpi_cmp_mpi>
    7ee0:	2800      	cmp	r0, #0
    7ee2:	f2c0 809d 	blt.w	8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7ee6:	462a      	mov	r2, r5
    7ee8:	4641      	mov	r1, r8
    7eea:	a81d      	add	r0, sp, #116	; 0x74
    7eec:	f7ff ff12 	bl	7d14 <mbedtls_mpi_mod_mpi>
    7ef0:	4604      	mov	r4, r0
    7ef2:	2800      	cmp	r0, #0
    7ef4:	d166      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
        /* This should be a no-op because W[1] is already that large before
         * mbedtls_mpi_mod_mpi(), but it's necessary to avoid an overflow
         * in mpi_montmul() below, so let's make sure. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    7ef6:	6869      	ldr	r1, [r5, #4]
    7ef8:	a81d      	add	r0, sp, #116	; 0x74
    7efa:	3101      	adds	r1, #1
    7efc:	f7ff f9cf 	bl	729e <mbedtls_mpi_grow>
    7f00:	4604      	mov	r4, r0
    7f02:	2800      	cmp	r0, #0
    7f04:	d15e      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    *mm = ~x + 1;
    7f06:	f1c7 0b00 	rsb	fp, r7, #0
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    /* Note that this is safe because W[1] always has at least N->n limbs
     * (it grew above and was preserved by mbedtls_mpi_copy()). */
    mpi_montmul( &W[1], &RR, N, mm, &T );
    7f0a:	f10d 0938 	add.w	r9, sp, #56	; 0x38
    7f0e:	465b      	mov	r3, fp
    7f10:	462a      	mov	r2, r5
    7f12:	a90b      	add	r1, sp, #44	; 0x2c
    7f14:	a81d      	add	r0, sp, #116	; 0x74
    7f16:	f8cd 9000 	str.w	r9, [sp]
    7f1a:	f7ff f909 	bl	7130 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    7f1e:	4630      	mov	r0, r6
    7f20:	a90b      	add	r1, sp, #44	; 0x2c
    7f22:	f7ff f9fd 	bl	7320 <mbedtls_mpi_copy>
    7f26:	4604      	mov	r4, r0
    7f28:	2800      	cmp	r0, #0
    7f2a:	d14b      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    mbedtls_mpi_uint z = 1;
    7f2c:	2701      	movs	r7, #1
    7f2e:	ab0a      	add	r3, sp, #40	; 0x28
    U.p = &z;
    7f30:	9319      	str	r3, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    7f32:	462a      	mov	r2, r5
    7f34:	465b      	mov	r3, fp
    7f36:	4630      	mov	r0, r6
    7f38:	f8cd 9000 	str.w	r9, [sp]
    7f3c:	a917      	add	r1, sp, #92	; 0x5c
    U.n = U.s = (int) z;
    7f3e:	e9cd 7717 	strd	r7, r7, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    7f42:	970a      	str	r7, [sp, #40]	; 0x28
    mpi_montmul( A, &U, N, mm, T );
    7f44:	f7ff f8f4 	bl	7130 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    7f48:	9b03      	ldr	r3, [sp, #12]
    7f4a:	42bb      	cmp	r3, r7
    7f4c:	d16d      	bne.n	802a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    7f4e:	f04f 0800 	mov.w	r8, #0
    nbits   = 0;
    7f52:	4647      	mov	r7, r8
    wbits   = 0;
    7f54:	46c2      	mov	sl, r8
    nblimbs = E->n;
    7f56:	9b04      	ldr	r3, [sp, #16]
    bufsize = 0;
    7f58:	f8cd 8014 	str.w	r8, [sp, #20]
    nblimbs = E->n;
    7f5c:	f8d3 9004 	ldr.w	r9, [r3, #4]

    while( 1 )
    {
        if( bufsize == 0 )
    7f60:	9b05      	ldr	r3, [sp, #20]
    7f62:	2b00      	cmp	r3, #0
    7f64:	f040 80b3 	bne.w	80ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
        {
            if( nblimbs == 0 )
    7f68:	f1b9 0f00 	cmp.w	r9, #0
    7f6c:	f040 80ab 	bne.w	80c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    7f70:	2301      	movs	r3, #1
    7f72:	9a03      	ldr	r2, [sp, #12]
    7f74:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    7f78:	4093      	lsls	r3, r2
    7f7a:	9305      	str	r3, [sp, #20]
    for( i = 0; i < nbits; i++ )
    7f7c:	45b9      	cmp	r9, r7
    7f7e:	f040 80ff 	bne.w	8180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    mbedtls_mpi_uint z = 1;
    7f82:	2301      	movs	r3, #1
    7f84:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    7f86:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    7f8a:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    7f8c:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    7f8e:	465b      	mov	r3, fp
    7f90:	462a      	mov	r2, r5
    7f92:	4630      	mov	r0, r6
    7f94:	f8cd 8000 	str.w	r8, [sp]
    7f98:	a917      	add	r1, sp, #92	; 0x5c
    7f9a:	f7ff f8c9 	bl	7130 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    7f9e:	9b06      	ldr	r3, [sp, #24]
    7fa0:	3301      	adds	r3, #1
    7fa2:	d10f      	bne.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    7fa4:	9b04      	ldr	r3, [sp, #16]
    7fa6:	685b      	ldr	r3, [r3, #4]
    7fa8:	b163      	cbz	r3, 7fc4 <mbedtls_mpi_exp_mod+0x24c>
    7faa:	9b04      	ldr	r3, [sp, #16]
    7fac:	689b      	ldr	r3, [r3, #8]
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	07db      	lsls	r3, r3, #31
    7fb2:	d507      	bpl.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
    {
        X->s = -1;
    7fb4:	9b06      	ldr	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7fb6:	4632      	mov	r2, r6
    7fb8:	4629      	mov	r1, r5
    7fba:	4630      	mov	r0, r6
        X->s = -1;
    7fbc:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7fbe:	f7ff fc91 	bl	78e4 <mbedtls_mpi_add_mpi>
    7fc2:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7fc4:	9b03      	ldr	r3, [sp, #12]
        mbedtls_mpi_free( &W[i] );
    7fc6:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7fc8:	1e5d      	subs	r5, r3, #1
    7fca:	2301      	movs	r3, #1
    7fcc:	9a03      	ldr	r2, [sp, #12]
    7fce:	fa03 f505 	lsl.w	r5, r3, r5
    7fd2:	fa03 f602 	lsl.w	r6, r3, r2
    7fd6:	42ae      	cmp	r6, r5
    7fd8:	f200 80ed 	bhi.w	81b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    7fdc:	a81d      	add	r0, sp, #116	; 0x74
    7fde:	f7ff f94c 	bl	727a <mbedtls_mpi_free>
    7fe2:	a80e      	add	r0, sp, #56	; 0x38
    7fe4:	f7ff f949 	bl	727a <mbedtls_mpi_free>
    7fe8:	a814      	add	r0, sp, #80	; 0x50
    7fea:	f7ff f946 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    7fee:	a811      	add	r0, sp, #68	; 0x44
    7ff0:	f7ff f943 	bl	727a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    7ff4:	9be4      	ldr	r3, [sp, #912]	; 0x390
    7ff6:	b10b      	cbz	r3, 7ffc <mbedtls_mpi_exp_mod+0x284>
    7ff8:	689b      	ldr	r3, [r3, #8]
    7ffa:	b913      	cbnz	r3, 8002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
        mbedtls_mpi_free( &RR );
    7ffc:	a80b      	add	r0, sp, #44	; 0x2c
    7ffe:	f7ff f93c 	bl	727a <mbedtls_mpi_free>

    return( ret );
}
    8002:	4620      	mov	r0, r4
    8004:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    8008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    800c:	2306      	movs	r3, #6
    800e:	e70f      	b.n	7e30 <mbedtls_mpi_exp_mod+0xb8>
    8010:	2305      	movs	r3, #5
    8012:	e70d      	b.n	7e30 <mbedtls_mpi_exp_mod+0xb8>
    8014:	2304      	movs	r3, #4
    8016:	e70b      	b.n	7e30 <mbedtls_mpi_exp_mod+0xb8>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    8018:	220c      	movs	r2, #12
    801a:	99e4      	ldr	r1, [sp, #912]	; 0x390
    801c:	a80b      	add	r0, sp, #44	; 0x2c
    801e:	e759      	b.n	7ed4 <mbedtls_mpi_exp_mod+0x15c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    8020:	4641      	mov	r1, r8
    8022:	a81d      	add	r0, sp, #116	; 0x74
    8024:	f7ff f97c 	bl	7320 <mbedtls_mpi_copy>
    8028:	e76a      	b.n	7f00 <mbedtls_mpi_exp_mod+0x188>
        j =  one << ( wsize - 1 );
    802a:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    802c:	6869      	ldr	r1, [r5, #4]
        j =  one << ( wsize - 1 );
    802e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    8032:	fa07 f308 	lsl.w	r3, r7, r8
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    8036:	270c      	movs	r7, #12
        j =  one << ( wsize - 1 );
    8038:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    803a:	fa07 f708 	lsl.w	r7, r7, r8
    803e:	ab1a      	add	r3, sp, #104	; 0x68
    8040:	441f      	add	r7, r3
    8042:	4638      	mov	r0, r7
    8044:	3101      	adds	r1, #1
    8046:	f7ff f92a 	bl	729e <mbedtls_mpi_grow>
    804a:	2800      	cmp	r0, #0
    804c:	d1b9      	bne.n	7fc2 <mbedtls_mpi_exp_mod+0x24a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    804e:	4638      	mov	r0, r7
    8050:	a91d      	add	r1, sp, #116	; 0x74
    8052:	f7ff f965 	bl	7320 <mbedtls_mpi_copy>
    8056:	2800      	cmp	r0, #0
    8058:	d1b3      	bne.n	7fc2 <mbedtls_mpi_exp_mod+0x24a>
        for( i = 0; i < wsize - 1; i++ )
    805a:	46a2      	mov	sl, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    805c:	465b      	mov	r3, fp
    805e:	462a      	mov	r2, r5
    8060:	4639      	mov	r1, r7
    8062:	4638      	mov	r0, r7
    8064:	f8cd 9000 	str.w	r9, [sp]
        for( i = 0; i < wsize - 1; i++ )
    8068:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    806c:	f7ff f860 	bl	7130 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8070:	45d0      	cmp	r8, sl
    8072:	d8f3      	bhi.n	805c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8074:	f04f 0a01 	mov.w	sl, #1
    8078:	9b05      	ldr	r3, [sp, #20]
    807a:	f103 0801 	add.w	r8, r3, #1
    807e:	9b03      	ldr	r3, [sp, #12]
    8080:	fa0a fa03 	lsl.w	sl, sl, r3
    8084:	45c2      	cmp	sl, r8
    8086:	f67f af62 	bls.w	7f4e <mbedtls_mpi_exp_mod+0x1d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    808a:	6869      	ldr	r1, [r5, #4]
    808c:	f107 090c 	add.w	r9, r7, #12
    8090:	4648      	mov	r0, r9
    8092:	3101      	adds	r1, #1
    8094:	f7ff f903 	bl	729e <mbedtls_mpi_grow>
    8098:	2800      	cmp	r0, #0
    809a:	d192      	bne.n	7fc2 <mbedtls_mpi_exp_mod+0x24a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    809c:	4639      	mov	r1, r7
    809e:	4648      	mov	r0, r9
    80a0:	f7ff f93e 	bl	7320 <mbedtls_mpi_copy>
    80a4:	2800      	cmp	r0, #0
    80a6:	d18c      	bne.n	7fc2 <mbedtls_mpi_exp_mod+0x24a>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    80a8:	ab0e      	add	r3, sp, #56	; 0x38
    80aa:	9300      	str	r3, [sp, #0]
    80ac:	462a      	mov	r2, r5
    80ae:	465b      	mov	r3, fp
    80b0:	4648      	mov	r0, r9
    80b2:	a91d      	add	r1, sp, #116	; 0x74
    80b4:	f7ff f83c 	bl	7130 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    80b8:	464f      	mov	r7, r9
    80ba:	f108 0801 	add.w	r8, r8, #1
    80be:	e7e1      	b.n	8084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
        state = 2;
    80c0:	f04f 0802 	mov.w	r8, #2
    80c4:	e74c      	b.n	7f60 <mbedtls_mpi_exp_mod+0x1e8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    80c6:	2320      	movs	r3, #32
            nblimbs--;
    80c8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    80cc:	9305      	str	r3, [sp, #20]
        bufsize--;
    80ce:	9b05      	ldr	r3, [sp, #20]
    80d0:	3b01      	subs	r3, #1
    80d2:	9305      	str	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    80d4:	9b04      	ldr	r3, [sp, #16]
    80d6:	9a05      	ldr	r2, [sp, #20]
    80d8:	689b      	ldr	r3, [r3, #8]
    80da:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    80de:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    80e0:	f013 0301 	ands.w	r3, r3, #1
    80e4:	d10f      	bne.n	8106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
    80e6:	f1b8 0f00 	cmp.w	r8, #0
    80ea:	f43f af39 	beq.w	7f60 <mbedtls_mpi_exp_mod+0x1e8>
        if( ei == 0 && state == 1 )
    80ee:	f1b8 0f01 	cmp.w	r8, #1
    80f2:	d108      	bne.n	8106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
            mpi_montmul( X, X, N, mm, &T );
    80f4:	ab0e      	add	r3, sp, #56	; 0x38
    80f6:	9300      	str	r3, [sp, #0]
    80f8:	462a      	mov	r2, r5
    80fa:	465b      	mov	r3, fp
    80fc:	4631      	mov	r1, r6
    80fe:	4630      	mov	r0, r6
    8100:	f7ff f816 	bl	7130 <mpi_montmul>
            continue;
    8104:	e72c      	b.n	7f60 <mbedtls_mpi_exp_mod+0x1e8>
        wbits |= ( ei << ( wsize - nbits ) );
    8106:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    8108:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
    810a:	1bd2      	subs	r2, r2, r7
    810c:	4093      	lsls	r3, r2
    810e:	ea4a 0a03 	orr.w	sl, sl, r3
        if( nbits == wsize )
    8112:	9b03      	ldr	r3, [sp, #12]
    8114:	42bb      	cmp	r3, r7
    8116:	d1d3      	bne.n	80c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
            for( i = 0; i < wsize; i++ )
    8118:	f04f 0800 	mov.w	r8, #0
                mpi_montmul( X, X, N, mm, &T );
    811c:	ab0e      	add	r3, sp, #56	; 0x38
    811e:	9300      	str	r3, [sp, #0]
    8120:	462a      	mov	r2, r5
    8122:	465b      	mov	r3, fp
    8124:	4631      	mov	r1, r6
    8126:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    8128:	f108 0801 	add.w	r8, r8, #1
                mpi_montmul( X, X, N, mm, &T );
    812c:	f7ff f800 	bl	7130 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    8130:	4547      	cmp	r7, r8
    8132:	d8f3      	bhi.n	811c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    8134:	2301      	movs	r3, #1
    for( size_t i = 0; i < T_size; i++ )
    8136:	f04f 0800 	mov.w	r8, #0
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, (size_t) 1 << wsize, wbits ) );
    813a:	40bb      	lsls	r3, r7
    813c:	9308      	str	r3, [sp, #32]
    for( size_t i = 0; i < T_size; i++ )
    813e:	a91a      	add	r1, sp, #104	; 0x68
    const size_t diff = x ^ y;
    8140:	ea8a 0308 	eor.w	r3, sl, r8
    const size_t diff_msb = ( diff | (size_t) -diff );
    8144:	425a      	negs	r2, r3
    8146:	431a      	orrs	r2, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    8148:	43d2      	mvns	r2, r2
    814a:	a811      	add	r0, sp, #68	; 0x44
    814c:	0fd2      	lsrs	r2, r2, #31
    814e:	9109      	str	r1, [sp, #36]	; 0x24
    8150:	f7ff f918 	bl	7384 <mbedtls_mpi_safe_cond_assign>
    8154:	4607      	mov	r7, r0
    8156:	bb60      	cbnz	r0, 81b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    for( size_t i = 0; i < T_size; i++ )
    8158:	9b08      	ldr	r3, [sp, #32]
    815a:	9909      	ldr	r1, [sp, #36]	; 0x24
    815c:	f108 0801 	add.w	r8, r8, #1
    8160:	4543      	cmp	r3, r8
    8162:	f101 010c 	add.w	r1, r1, #12
    8166:	d1eb      	bne.n	8140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
            mpi_montmul( X, &WW, N, mm, &T );
    8168:	ab0e      	add	r3, sp, #56	; 0x38
    816a:	9300      	str	r3, [sp, #0]
    816c:	462a      	mov	r2, r5
    816e:	465b      	mov	r3, fp
    8170:	4630      	mov	r0, r6
    8172:	a911      	add	r1, sp, #68	; 0x44
    8174:	f7fe ffdc 	bl	7130 <mpi_montmul>
            nbits = 0;
    8178:	46ba      	mov	sl, r7
            state--;
    817a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    817e:	e6ef      	b.n	7f60 <mbedtls_mpi_exp_mod+0x1e8>
        mpi_montmul( X, X, N, mm, &T );
    8180:	465b      	mov	r3, fp
    8182:	462a      	mov	r2, r5
    8184:	4631      	mov	r1, r6
    8186:	4630      	mov	r0, r6
    8188:	f8cd 8000 	str.w	r8, [sp]
    818c:	f7fe ffd0 	bl	7130 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    8190:	9b05      	ldr	r3, [sp, #20]
        wbits <<= 1;
    8192:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    8196:	ea13 0f0a 	tst.w	r3, sl
    819a:	d007      	beq.n	81ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
            mpi_montmul( X, &W[1], N, mm, &T );
    819c:	465b      	mov	r3, fp
    819e:	462a      	mov	r2, r5
    81a0:	4630      	mov	r0, r6
    81a2:	f8cd 8000 	str.w	r8, [sp]
    81a6:	a91d      	add	r1, sp, #116	; 0x74
    81a8:	f7fe ffc2 	bl	7130 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    81ac:	f109 0901 	add.w	r9, r9, #1
    81b0:	e6e4      	b.n	7f7c <mbedtls_mpi_exp_mod+0x204>
    81b2:	4604      	mov	r4, r0
    81b4:	e706      	b.n	7fc4 <mbedtls_mpi_exp_mod+0x24c>
        mbedtls_mpi_free( &W[i] );
    81b6:	ab1a      	add	r3, sp, #104	; 0x68
    81b8:	fb07 3005 	mla	r0, r7, r5, r3
    81bc:	f7ff f85d 	bl	727a <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    81c0:	3501      	adds	r5, #1
    81c2:	e708      	b.n	7fd6 <mbedtls_mpi_exp_mod+0x25e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    81c4:	f06f 0403 	mvn.w	r4, #3
    81c8:	e71b      	b.n	8002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>

000081ca <platform_calloc_uninit>:
}
    81ca:	2000      	movs	r0, #0
    81cc:	4770      	bx	lr

000081ce <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    81ce:	4770      	bx	lr

000081d0 <platform_free_uninit>:
    81d0:	4770      	bx	lr

000081d2 <mbedtls_rsa_import>:
{
    81d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81d6:	4605      	mov	r5, r0
    81d8:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    81dc:	4691      	mov	r9, r2
    81de:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    81e0:	460c      	mov	r4, r1
    81e2:	b979      	cbnz	r1, 8204 <mbedtls_rsa_import+0x32>
    81e4:	f1b9 0f00 	cmp.w	r9, #0
    81e8:	d115      	bne.n	8216 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    81ea:	f1b8 0f00 	cmp.w	r8, #0
    81ee:	d11a      	bne.n	8226 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    81f0:	bb0f      	cbnz	r7, 8236 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    81f2:	bb46      	cbnz	r6, 8246 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    81f4:	b37c      	cbz	r4, 8256 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    81f6:	f105 0008 	add.w	r0, r5, #8
    81fa:	f7ff f938 	bl	746e <mbedtls_mpi_size>
    81fe:	6068      	str	r0, [r5, #4]
    return( 0 );
    8200:	2000      	movs	r0, #0
    8202:	e006      	b.n	8212 <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    8204:	3008      	adds	r0, #8
    8206:	f7ff f88b 	bl	7320 <mbedtls_mpi_copy>
    820a:	2800      	cmp	r0, #0
    820c:	d0ea      	beq.n	81e4 <mbedtls_rsa_import+0x12>
    820e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    8212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    8216:	4649      	mov	r1, r9
    8218:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    821c:	f7ff f880 	bl	7320 <mbedtls_mpi_copy>
    8220:	2800      	cmp	r0, #0
    8222:	d0e2      	beq.n	81ea <mbedtls_rsa_import+0x18>
    8224:	e7f3      	b.n	820e <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    8226:	4641      	mov	r1, r8
    8228:	f105 0038 	add.w	r0, r5, #56	; 0x38
    822c:	f7ff f878 	bl	7320 <mbedtls_mpi_copy>
    8230:	2800      	cmp	r0, #0
    8232:	d0dd      	beq.n	81f0 <mbedtls_rsa_import+0x1e>
    8234:	e7eb      	b.n	820e <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    8236:	4639      	mov	r1, r7
    8238:	f105 0020 	add.w	r0, r5, #32
    823c:	f7ff f870 	bl	7320 <mbedtls_mpi_copy>
    8240:	2800      	cmp	r0, #0
    8242:	d0d6      	beq.n	81f2 <mbedtls_rsa_import+0x20>
    8244:	e7e3      	b.n	820e <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    8246:	4631      	mov	r1, r6
    8248:	f105 0014 	add.w	r0, r5, #20
    824c:	f7ff f868 	bl	7320 <mbedtls_mpi_copy>
    8250:	2800      	cmp	r0, #0
    8252:	d0cf      	beq.n	81f4 <mbedtls_rsa_import+0x22>
    8254:	e7db      	b.n	820e <mbedtls_rsa_import+0x3c>
    return( 0 );
    8256:	4620      	mov	r0, r4
    8258:	e7db      	b.n	8212 <mbedtls_rsa_import+0x40>

0000825a <mbedtls_rsa_init>:
{
    825a:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    825c:	22ac      	movs	r2, #172	; 0xac
    825e:	2100      	movs	r1, #0
{
    8260:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8262:	f7fe f9a5 	bl	65b0 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    8266:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    8268:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    826c:	bd10      	pop	{r4, pc}

0000826e <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    826e:	b510      	push	{r4, lr}
    if( ctx == NULL )
    8270:	4604      	mov	r4, r0
    8272:	b3a0      	cbz	r0, 82de <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    8274:	308c      	adds	r0, #140	; 0x8c
    8276:	f7ff f800 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    827a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    827e:	f7fe fffc 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    8282:	f104 0068 	add.w	r0, r4, #104	; 0x68
    8286:	f7fe fff8 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    828a:	f104 0020 	add.w	r0, r4, #32
    828e:	f7fe fff4 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    8292:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8296:	f7fe fff0 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    829a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    829e:	f7fe ffec 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    82a2:	f104 0014 	add.w	r0, r4, #20
    82a6:	f7fe ffe8 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    82aa:	f104 0008 	add.w	r0, r4, #8
    82ae:	f7fe ffe4 	bl	727a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    82b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    82b6:	f7fe ffe0 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    82ba:	f104 0074 	add.w	r0, r4, #116	; 0x74
    82be:	f7fe ffdc 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    82c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    82c6:	f7fe ffd8 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    82ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
    82ce:	f7fe ffd4 	bl	727a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    82d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    82d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    82da:	f7fe bfce 	b.w	727a <mbedtls_mpi_free>
}
    82de:	bd10      	pop	{r4, pc}

000082e0 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    82e0:	226c      	movs	r2, #108	; 0x6c
    82e2:	2100      	movs	r1, #0
    82e4:	f7fe b964 	b.w	65b0 <memset>

000082e8 <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    82e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    82ec:	4605      	mov	r5, r0
    82ee:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    82f0:	4614      	mov	r4, r2
    82f2:	b912      	cbnz	r2, 82fa <mbedtls_sha256_update+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    82f4:	2000      	movs	r0, #0
}
    82f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    82fa:	6803      	ldr	r3, [r0, #0]
    82fc:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    8300:	18d3      	adds	r3, r2, r3
    8302:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    8304:	bf22      	ittt	cs
    8306:	6843      	ldrcs	r3, [r0, #4]
    8308:	3301      	addcs	r3, #1
    830a:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    830c:	b1a7      	cbz	r7, 8338 <mbedtls_sha256_update+0x50>
    fill = 64 - left;
    830e:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    8312:	454a      	cmp	r2, r9
    8314:	d310      	bcc.n	8338 <mbedtls_sha256_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8316:	f100 0828 	add.w	r8, r0, #40	; 0x28
    831a:	464a      	mov	r2, r9
    831c:	eb08 0007 	add.w	r0, r8, r7
    8320:	f7fe f93b 	bl	659a <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8324:	4641      	mov	r1, r8
    8326:	4628      	mov	r0, r5
    8328:	f7fc f9c4 	bl	46b4 <mbedtls_internal_sha256_process>
    832c:	2800      	cmp	r0, #0
    832e:	d1e2      	bne.n	82f6 <mbedtls_sha256_update+0xe>
        ilen  -= fill;
    8330:	443c      	add	r4, r7
        left = 0;
    8332:	4607      	mov	r7, r0
        input += fill;
    8334:	444e      	add	r6, r9
        ilen  -= fill;
    8336:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    8338:	4426      	add	r6, r4
    833a:	e005      	b.n	8348 <mbedtls_sha256_update+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    833c:	4628      	mov	r0, r5
    833e:	f7fc f9b9 	bl	46b4 <mbedtls_internal_sha256_process>
    8342:	2800      	cmp	r0, #0
    8344:	d1d7      	bne.n	82f6 <mbedtls_sha256_update+0xe>
        ilen  -= 64;
    8346:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    8348:	2c3f      	cmp	r4, #63	; 0x3f
    834a:	eba6 0104 	sub.w	r1, r6, r4
    834e:	d8f5      	bhi.n	833c <mbedtls_sha256_update+0x54>
    if( ilen > 0 )
    8350:	2c00      	cmp	r4, #0
    8352:	d0cf      	beq.n	82f4 <mbedtls_sha256_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    8354:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8358:	4622      	mov	r2, r4
    835a:	4438      	add	r0, r7
    835c:	f7fe f91d 	bl	659a <memcpy>
    8360:	e7c8      	b.n	82f4 <mbedtls_sha256_update+0xc>

00008362 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    8362:	b570      	push	{r4, r5, r6, lr}
    8364:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    8366:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    8368:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    836a:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    836e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    8372:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    8374:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    8376:	4403      	add	r3, r0
{
    8378:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    837a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    837e:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    8382:	d861      	bhi.n	8448 <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    8384:	2100      	movs	r1, #0
    8386:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    838a:	f7fe f911 	bl	65b0 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    838e:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    8392:	0f5a      	lsrs	r2, r3, #29
    8394:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    8398:	00db      	lsls	r3, r3, #3
    839a:	ba12      	rev	r2, r2
    839c:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    839e:	4631      	mov	r1, r6
    83a0:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    83a2:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    83a4:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    83a6:	f7fc f985 	bl	46b4 <mbedtls_internal_sha256_process>
    83aa:	2800      	cmp	r0, #0
    83ac:	d14b      	bne.n	8446 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    83ae:	7ae3      	ldrb	r3, [r4, #11]
    83b0:	702b      	strb	r3, [r5, #0]
    83b2:	8963      	ldrh	r3, [r4, #10]
    83b4:	706b      	strb	r3, [r5, #1]
    83b6:	68a3      	ldr	r3, [r4, #8]
    83b8:	0a1b      	lsrs	r3, r3, #8
    83ba:	70ab      	strb	r3, [r5, #2]
    83bc:	68a3      	ldr	r3, [r4, #8]
    83be:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    83c0:	7be3      	ldrb	r3, [r4, #15]
    83c2:	712b      	strb	r3, [r5, #4]
    83c4:	89e3      	ldrh	r3, [r4, #14]
    83c6:	716b      	strb	r3, [r5, #5]
    83c8:	68e3      	ldr	r3, [r4, #12]
    83ca:	0a1b      	lsrs	r3, r3, #8
    83cc:	71ab      	strb	r3, [r5, #6]
    83ce:	68e3      	ldr	r3, [r4, #12]
    83d0:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    83d2:	7ce3      	ldrb	r3, [r4, #19]
    83d4:	722b      	strb	r3, [r5, #8]
    83d6:	8a63      	ldrh	r3, [r4, #18]
    83d8:	726b      	strb	r3, [r5, #9]
    83da:	6923      	ldr	r3, [r4, #16]
    83dc:	0a1b      	lsrs	r3, r3, #8
    83de:	72ab      	strb	r3, [r5, #10]
    83e0:	6923      	ldr	r3, [r4, #16]
    83e2:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    83e4:	7de3      	ldrb	r3, [r4, #23]
    83e6:	732b      	strb	r3, [r5, #12]
    83e8:	8ae3      	ldrh	r3, [r4, #22]
    83ea:	736b      	strb	r3, [r5, #13]
    83ec:	6963      	ldr	r3, [r4, #20]
    83ee:	0a1b      	lsrs	r3, r3, #8
    83f0:	73ab      	strb	r3, [r5, #14]
    83f2:	6963      	ldr	r3, [r4, #20]
    83f4:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    83f6:	7ee3      	ldrb	r3, [r4, #27]
    83f8:	742b      	strb	r3, [r5, #16]
    83fa:	8b63      	ldrh	r3, [r4, #26]
    83fc:	746b      	strb	r3, [r5, #17]
    83fe:	69a3      	ldr	r3, [r4, #24]
    8400:	0a1b      	lsrs	r3, r3, #8
    8402:	74ab      	strb	r3, [r5, #18]
    8404:	69a3      	ldr	r3, [r4, #24]
    8406:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    8408:	7fe3      	ldrb	r3, [r4, #31]
    840a:	752b      	strb	r3, [r5, #20]
    840c:	8be3      	ldrh	r3, [r4, #30]
    840e:	756b      	strb	r3, [r5, #21]
    8410:	69e3      	ldr	r3, [r4, #28]
    8412:	0a1b      	lsrs	r3, r3, #8
    8414:	75ab      	strb	r3, [r5, #22]
    8416:	69e3      	ldr	r3, [r4, #28]
    8418:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    841a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    841e:	762b      	strb	r3, [r5, #24]
    8420:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    8422:	766b      	strb	r3, [r5, #25]
    8424:	6a23      	ldr	r3, [r4, #32]
    8426:	0a1b      	lsrs	r3, r3, #8
    8428:	76ab      	strb	r3, [r5, #26]
    842a:	6a23      	ldr	r3, [r4, #32]
    842c:	76eb      	strb	r3, [r5, #27]

#if defined(MBEDTLS_SHA224_C)
    if( ctx->is224 == 0 )
    842e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8430:	b94b      	cbnz	r3, 8446 <mbedtls_sha256_finish+0xe4>
#endif
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    8432:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    8436:	772b      	strb	r3, [r5, #28]
    8438:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    843a:	776b      	strb	r3, [r5, #29]
    843c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    843e:	0a1b      	lsrs	r3, r3, #8
    8440:	77ab      	strb	r3, [r5, #30]
    8442:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8444:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    8446:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    8448:	2100      	movs	r1, #0
    844a:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    844e:	f7fe f8af 	bl	65b0 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8452:	4631      	mov	r1, r6
    8454:	4620      	mov	r0, r4
    8456:	f7fc f92d 	bl	46b4 <mbedtls_internal_sha256_process>
    845a:	2800      	cmp	r0, #0
    845c:	d1f3      	bne.n	8446 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    845e:	4601      	mov	r1, r0
    8460:	2238      	movs	r2, #56	; 0x38
    8462:	4630      	mov	r0, r6
    8464:	e791      	b.n	838a <mbedtls_sha256_finish+0x28>

00008466 <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    8466:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    846a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    846e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    8472:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    8476:	2a09      	cmp	r2, #9
    8478:	d103      	bne.n	8482 <nrf91_errata_14+0x1c>
                switch(var2)
    847a:	1e43      	subs	r3, r0, #1
    847c:	4258      	negs	r0, r3
    847e:	4158      	adcs	r0, r3
    8480:	4770      	bx	lr
        return false;
    8482:	2000      	movs	r0, #0
}
    8484:	4770      	bx	lr

00008486 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8486:	4700      	bx	r0

00008488 <nrfx_busy_wait>:
    8488:	f000 b891 	b.w	85ae <z_impl_k_busy_wait>

0000848c <nrfx_clock_enable>:
{
    848c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    848e:	2005      	movs	r0, #5
    8490:	f7fa fa28 	bl	28e4 <arch_irq_is_enabled>
    8494:	b920      	cbnz	r0, 84a0 <nrfx_clock_enable+0x14>
}
    8496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    849a:	2005      	movs	r0, #5
    849c:	f7fa ba12 	b.w	28c4 <arch_irq_enable>
    84a0:	bd08      	pop	{r3, pc}

000084a2 <nrfx_clock_start>:
    switch (domain)
    84a2:	b110      	cbz	r0, 84aa <nrfx_clock_start+0x8>
    84a4:	2801      	cmp	r0, #1
    84a6:	d021      	beq.n	84ec <nrfx_clock_start+0x4a>
    84a8:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    84aa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    84ae:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    84b2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84b6:	03c9      	lsls	r1, r1, #15
    84b8:	d512      	bpl.n	84e0 <nrfx_clock_start+0x3e>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    84ba:	f003 0303 	and.w	r3, r3, #3
    84be:	2b02      	cmp	r3, #2
    84c0:	d10e      	bne.n	84e0 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    84c2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    84ca:	2200      	movs	r2, #0
    84cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    84d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    84d4:	2202      	movs	r2, #2
    84d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84da:	2201      	movs	r2, #1
    84dc:	609a      	str	r2, [r3, #8]
}
    84de:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    84e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    84e4:	2201      	movs	r2, #1
    84e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    84ea:	e7ec      	b.n	84c6 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    84f0:	2200      	movs	r2, #0
    84f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    84f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    84fa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84fe:	6018      	str	r0, [r3, #0]
}
    8500:	4770      	bx	lr

00008502 <nrfx_clock_stop>:
{
    8502:	b538      	push	{r3, r4, r5, lr}
    switch (domain)
    8504:	b110      	cbz	r0, 850c <nrfx_clock_stop+0xa>
    8506:	2801      	cmp	r0, #1
    8508:	d017      	beq.n	853a <nrfx_clock_stop+0x38>
}
    850a:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    850c:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    8510:	2302      	movs	r3, #2
    8512:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8516:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    851a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    851e:	2301      	movs	r3, #1
    8520:	f242 7510 	movw	r5, #10000	; 0x2710
    8524:	60e3      	str	r3, [r4, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8526:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    852a:	03db      	lsls	r3, r3, #15
    852c:	d5ed      	bpl.n	850a <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    852e:	2001      	movs	r0, #1
    8530:	f7ff ffaa 	bl	8488 <nrfx_busy_wait>
    8534:	3d01      	subs	r5, #1
    8536:	d1f6      	bne.n	8526 <nrfx_clock_stop+0x24>
    8538:	e7e7      	b.n	850a <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    853a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    853e:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8540:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    8544:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8548:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    854c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8550:	6060      	str	r0, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8552:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8556:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    855a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    855e:	03d2      	lsls	r2, r2, #15
    8560:	d5d3      	bpl.n	850a <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    8562:	2b00      	cmp	r3, #0
    8564:	d0d1      	beq.n	850a <nrfx_clock_stop+0x8>
    8566:	2001      	movs	r0, #1
    8568:	f7ff ff8e 	bl	8488 <nrfx_busy_wait>
    856c:	3d01      	subs	r5, #1
    856e:	d1f0      	bne.n	8552 <nrfx_clock_stop+0x50>
    8570:	e7cb      	b.n	850a <nrfx_clock_stop+0x8>

00008572 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    8572:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8576:	4770      	bx	lr

00008578 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    8578:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    857c:	4770      	bx	lr

0000857e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    857e:	f44f 7080 	mov.w	r0, #256	; 0x100
    8582:	4770      	bx	lr

00008584 <z_device_state_init>:
}
    8584:	4770      	bx	lr

00008586 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8586:	b138      	cbz	r0, 8598 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8588:	68c3      	ldr	r3, [r0, #12]
    858a:	8818      	ldrh	r0, [r3, #0]
    858c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8590:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8594:	4258      	negs	r0, r3
    8596:	4158      	adcs	r0, r3
}
    8598:	4770      	bx	lr

0000859a <z_early_memset>:
	(void) memset(dst, c, n);
    859a:	f7fe b809 	b.w	65b0 <memset>

0000859e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    859e:	f7fd bffc 	b.w	659a <memcpy>

000085a2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    85a2:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    85a6:	3800      	subs	r0, #0
    85a8:	bf18      	it	ne
    85aa:	2001      	movne	r0, #1
    85ac:	4770      	bx	lr

000085ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    85ae:	b108      	cbz	r0, 85b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    85b0:	f7f9 bbce 	b.w	1d50 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    85b4:	4770      	bx	lr

000085b6 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    85b6:	4770      	bx	lr

000085b8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    85b8:	f7fc b926 	b.w	4808 <SystemInit>
